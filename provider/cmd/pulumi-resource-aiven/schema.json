{
    "name": "aiven",
    "description": "A Pulumi package for creating and managing Aiven cloud resources.",
    "keywords": [
        "pulumi",
        "aiven"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`aiven` Terraform Provider](https://github.com/aiven/terraform-provider-aiven).",
    "repository": "https://github.com/pulumi/pulumi-aiven",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apiToken": {
                "type": "string",
                "description": "Aiven Authentication Token\n",
                "defaultInfo": {
                    "environment": [
                        "AIVEN_API_TOKEN"
                    ]
                }
            }
        },
        "defaults": [
            "apiToken"
        ]
    },
    "types": {
        "aiven:/ElasticSearchAclAcl:ElasticSearchAclAcl": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/ElasticSearchAclAclRule:ElasticSearchAclAclRule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rules",
                "username"
            ]
        },
        "aiven:/ElasticSearchAclAclRule:ElasticSearchAclAclRule": {
            "properties": {
                "index": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "permission"
            ]
        },
        "aiven:/KafkaConnectorTask:KafkaConnectorTask": {
            "properties": {
                "connector": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "task": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "connector",
                        "task"
                    ]
                }
            }
        },
        "aiven:/KafkaTopicClientTimeout:KafkaTopicClientTimeout": {
            "properties": {
                "create": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "read": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ProjectVpcClientTimeout:ProjectVpcClientTimeout": {
            "properties": {
                "create": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delete": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceCassandra:ServiceCassandra": {
            "type": "object"
        },
        "aiven:/ServiceCassandraUserConfig:ServiceCassandraUserConfig": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "migrateSstableloader": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/ServiceCassandraUserConfigPrivateAccess:ServiceCassandraUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/ServiceCassandraUserConfigPublicAccess:ServiceCassandraUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceCassandraUserConfigPrivateAccess:ServiceCassandraUserConfigPrivateAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceCassandraUserConfigPublicAccess:ServiceCassandraUserConfigPublicAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceClientTimeout:ServiceClientTimeout": {
            "properties": {
                "create": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "update": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceComponent:ServiceComponent": {
            "properties": {
                "component": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaAuthenticationMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssl": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "component",
                        "host",
                        "kafkaAuthenticationMethod",
                        "port",
                        "route",
                        "ssl",
                        "usage"
                    ]
                }
            }
        },
        "aiven:/ServiceElasticsearch:ServiceElasticsearch": {
            "properties": {
                "kibanaUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kibanaUri"
                    ]
                }
            }
        },
        "aiven:/ServiceElasticsearchUserConfig:ServiceElasticsearchUserConfig": {
            "properties": {
                "customDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableReplicationFactorAdjustment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elasticsearch": {
                    "$ref": "#/types/aiven:/ServiceElasticsearchUserConfigElasticsearch:ServiceElasticsearchUserConfigElasticsearch",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elasticsearchVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/ServiceElasticsearchUserConfigIndexPattern:ServiceElasticsearchUserConfigIndexPattern"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibana": {
                    "$ref": "#/types/aiven:/ServiceElasticsearchUserConfigKibana:ServiceElasticsearchUserConfigKibana",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxIndexCount": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/ServiceElasticsearchUserConfigPrivateAccess:ServiceElasticsearchUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/ServiceElasticsearchUserConfigPublicAccess:ServiceElasticsearchUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryBasebackupName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceElasticsearchUserConfigElasticsearch:ServiceElasticsearchUserConfigElasticsearch": {
            "properties": {
                "actionAutoCreateIndexEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionDestructiveRequiresName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMaxContentLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMaxHeaderSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMaxInitialLineLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indicesFielddataCacheSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indicesMemoryIndexBufferSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indicesQueriesCacheSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indicesQueryBoolMaxClauseCount": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reindexRemoteWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolAnalyzeQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolAnalyzeSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolForceMergeSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolGetQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolGetSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolIndexQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolIndexSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolSearchQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolSearchSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolSearchThrottledQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolSearchThrottledSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolWriteQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolWriteSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceElasticsearchUserConfigIndexPattern:ServiceElasticsearchUserConfigIndexPattern": {
            "properties": {
                "maxIndexCount": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pattern": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceElasticsearchUserConfigKibana:ServiceElasticsearchUserConfigKibana": {
            "properties": {
                "elasticsearchRequestTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxOldSpaceSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceElasticsearchUserConfigPrivateAccess:ServiceElasticsearchUserConfigPrivateAccess": {
            "properties": {
                "elasticsearch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibana": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceElasticsearchUserConfigPublicAccess:ServiceElasticsearchUserConfigPublicAccess": {
            "properties": {
                "elasticsearch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibana": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceGrafana:ServiceGrafana": {
            "type": "object"
        },
        "aiven:/ServiceGrafanaUserConfig:ServiceGrafanaUserConfig": {
            "properties": {
                "alertingEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertingErrorOrTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertingNodataOrNullvalues": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowEmbedding": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authBasicEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authGenericOauth": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfigAuthGenericOauth:ServiceGrafanaUserConfigAuthGenericOauth",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authGithub": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfigAuthGithub:ServiceGrafanaUserConfigAuthGithub",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authGitlab": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfigAuthGitlab:ServiceGrafanaUserConfigAuthGitlab",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authGoogle": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfigAuthGoogle:ServiceGrafanaUserConfigAuthGoogle",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieSamesite": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dashboardsVersionsToKeep": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataproxySendUserHeader": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataproxyTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableGravatar": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "editorsCanAdmin": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalImageStorage": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfigExternalImageStorage:ServiceGrafanaUserConfigExternalImageStorage",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "googleAnalyticsUaId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfigPrivateAccess:ServiceGrafanaUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfigPublicAccess:ServiceGrafanaUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smtpServer": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfigSmtpServer:ServiceGrafanaUserConfigSmtpServer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAutoAssignOrg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAutoAssignOrgRole": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "viewersCanEdit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceGrafanaUserConfigAuthGenericOauth:ServiceGrafanaUserConfigAuthGenericOauth": {
            "properties": {
                "allowSignUp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedOrganizations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceGrafanaUserConfigAuthGithub:ServiceGrafanaUserConfigAuthGithub": {
            "properties": {
                "allowSignUp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedOrganizations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceGrafanaUserConfigAuthGitlab:ServiceGrafanaUserConfigAuthGitlab": {
            "properties": {
                "allowSignUp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceGrafanaUserConfigAuthGoogle:ServiceGrafanaUserConfigAuthGoogle": {
            "properties": {
                "allowSignUp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceGrafanaUserConfigExternalImageStorage:ServiceGrafanaUserConfigExternalImageStorage": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceGrafanaUserConfigPrivateAccess:ServiceGrafanaUserConfigPrivateAccess": {
            "properties": {
                "grafana": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceGrafanaUserConfigPublicAccess:ServiceGrafanaUserConfigPublicAccess": {
            "properties": {
                "grafana": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceGrafanaUserConfigSmtpServer:ServiceGrafanaUserConfigSmtpServer": {
            "properties": {
                "fromAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skipVerify": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceInfluxdb:ServiceInfluxdb": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "databaseName"
                    ]
                }
            }
        },
        "aiven:/ServiceInfluxdbUserConfig:ServiceInfluxdbUserConfig": {
            "properties": {
                "customDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/ServiceInfluxdbUserConfigPrivateAccess:ServiceInfluxdbUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/ServiceInfluxdbUserConfigPublicAccess:ServiceInfluxdbUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceInfluxdbUserConfigPrivateAccess:ServiceInfluxdbUserConfigPrivateAccess": {
            "properties": {
                "influxdb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceInfluxdbUserConfigPublicAccess:ServiceInfluxdbUserConfigPublicAccess": {
            "properties": {
                "influxdb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceIntegrationEndpointDatadogUserConfig:ServiceIntegrationEndpointDatadogUserConfig": {
            "properties": {
                "datadogApiKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableConsumerStats": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPartitionContexts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "site": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceIntegrationEndpointExternalElasticsearchLogsUserConfig:ServiceIntegrationEndpointExternalElasticsearchLogsUserConfig": {
            "properties": {
                "ca": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexDaysMax": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceIntegrationEndpointPrometheusUserConfig:ServiceIntegrationEndpointPrometheusUserConfig": {
            "properties": {
                "basicAuthPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "basicAuthUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceIntegrationEndpointRsyslogUserConfig:ServiceIntegrationEndpointRsyslogUserConfig": {
            "properties": {
                "ca": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logline": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sd": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceIntegrationKafkaConnectUserConfig:ServiceIntegrationKafkaConnectUserConfig": {
            "properties": {
                "kafkaConnect": {
                    "$ref": "#/types/aiven:/ServiceIntegrationKafkaConnectUserConfigKafkaConnect:ServiceIntegrationKafkaConnectUserConfigKafkaConnect",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceIntegrationKafkaConnectUserConfigKafkaConnect:ServiceIntegrationKafkaConnectUserConfigKafkaConnect": {
            "properties": {
                "configStorageTopic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetStorageTopic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusStorageTopic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceIntegrationKafkaMirrormakerUserConfig:ServiceIntegrationKafkaMirrormakerUserConfig": {
            "properties": {
                "clusterAlias": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceIntegrationLogsUserConfig:ServiceIntegrationLogsUserConfig": {
            "properties": {
                "elasticsearchIndexDaysMax": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elasticsearchIndexPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceIntegrationMirrormakerUserConfig:ServiceIntegrationMirrormakerUserConfig": {
            "properties": {
                "mirrormakerWhitelist": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafka:ServiceKafka": {
            "properties": {
                "accessCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaRegistryUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessCert",
                        "accessKey",
                        "connectUri",
                        "restUri",
                        "schemaRegistryUri"
                    ]
                }
            }
        },
        "aiven:/ServiceKafkaConnect:ServiceKafkaConnect": {
            "type": "object"
        },
        "aiven:/ServiceKafkaConnectUserConfig:ServiceKafkaConnectUserConfig": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaConnect": {
                    "$ref": "#/types/aiven:/ServiceKafkaConnectUserConfigKafkaConnect:ServiceKafkaConnectUserConfigKafkaConnect",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/ServiceKafkaConnectUserConfigPrivateAccess:ServiceKafkaConnectUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/ServiceKafkaConnectUserConfigPublicAccess:ServiceKafkaConnectUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaConnectUserConfigKafkaConnect:ServiceKafkaConnectUserConfigKafkaConnect": {
            "properties": {
                "consumerIsolationLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerMaxPollRecords": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetFlushIntervalMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaConnectUserConfigPrivateAccess:ServiceKafkaConnectUserConfigPrivateAccess": {
            "properties": {
                "kafkaConnect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaConnectUserConfigPublicAccess:ServiceKafkaConnectUserConfigPublicAccess": {
            "properties": {
                "kafkaConnect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaMirrormaker:ServiceKafkaMirrormaker": {
            "type": "object"
        },
        "aiven:/ServiceKafkaMirrormakerUserConfig:ServiceKafkaMirrormakerUserConfig": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaMirrormaker": {
                    "$ref": "#/types/aiven:/ServiceKafkaMirrormakerUserConfigKafkaMirrormaker:ServiceKafkaMirrormakerUserConfigKafkaMirrormaker",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaMirrormakerUserConfigKafkaMirrormaker:ServiceKafkaMirrormakerUserConfigKafkaMirrormaker": {
            "properties": {
                "refreshGroupsEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "refreshGroupsIntervalSeconds": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "refreshTopicsEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "refreshTopicsIntervalSeconds": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaUserConfig:ServiceKafkaUserConfig": {
            "properties": {
                "customDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafka": {
                    "$ref": "#/types/aiven:/ServiceKafkaUserConfigKafka:ServiceKafkaUserConfigKafka",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaAuthenticationMethods": {
                    "$ref": "#/types/aiven:/ServiceKafkaUserConfigKafkaAuthenticationMethods:ServiceKafkaUserConfigKafkaAuthenticationMethods",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaConnect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaConnectConfig": {
                    "$ref": "#/types/aiven:/ServiceKafkaUserConfigKafkaConnectConfig:ServiceKafkaUserConfigKafkaConnectConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaRest": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaRestConfig": {
                    "$ref": "#/types/aiven:/ServiceKafkaUserConfigKafkaRestConfig:ServiceKafkaUserConfigKafkaRestConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/ServiceKafkaUserConfigPrivateAccess:ServiceKafkaUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/ServiceKafkaUserConfigPublicAccess:ServiceKafkaUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaRegistry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaUserConfigKafka:ServiceKafkaUserConfigKafka": {
            "properties": {
                "autoCreateTopicsEnable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionsMaxIdleMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultReplicationFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupMaxSessionTimeoutMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupMinSessionTimeoutMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logCleanerMaxCompactionLagMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logCleanerMinCleanableRatio": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logCleanerMinCompactionLagMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logCleanupPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logMessageTimestampDifferenceMaxMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logMessageTimestampType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionHours": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logSegmentBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConnectionsPerIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numPartitions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetsRetentionMinutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "producerPurgatoryPurgeIntervalRequests": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaFetchMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaFetchResponseMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "socketRequestMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaUserConfigKafkaAuthenticationMethods:ServiceKafkaUserConfigKafkaAuthenticationMethods": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sasl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaUserConfigKafkaConnectConfig:ServiceKafkaUserConfigKafkaConnectConfig": {
            "properties": {
                "consumerIsolationLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerMaxPollRecords": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetFlushIntervalMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaUserConfigKafkaRestConfig:ServiceKafkaUserConfigKafkaRestConfig": {
            "properties": {
                "consumerEnableAutoCommit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerRequestMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerRequestTimeoutMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "producerAcks": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "producerLingerMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "simpleconsumerPoolSizeMax": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaUserConfigPrivateAccess:ServiceKafkaUserConfigPrivateAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceKafkaUserConfigPublicAccess:ServiceKafkaUserConfigPublicAccess": {
            "properties": {
                "kafka": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaConnect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaRest": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaRegistry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceMysql:ServiceMysql": {
            "type": "object"
        },
        "aiven:/ServiceMysqlUserConfig:ServiceMysqlUserConfig": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupHour": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupMinute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mysql": {
                    "$ref": "#/types/aiven:/ServiceMysqlUserConfigMysql:ServiceMysqlUserConfigMysql",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mysqlVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/ServiceMysqlUserConfigPrivateAccess:ServiceMysqlUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/ServiceMysqlUserConfigPublicAccess:ServiceMysqlUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryTargetTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceMysqlUserConfigMysql:ServiceMysqlUserConfigMysql": {
            "properties": {
                "connectTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultTimeZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupConcatMaxLen": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "informationSchemaStatsExpiry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbFtMinTokenSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbFtServerStopwordTable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbLockWaitTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbLogBufferSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbOnlineAlterLogMaxSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbRollbackOnTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interactiveTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAllowedPacket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxHeapTableSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netReadTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netWriteTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortBufferSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sqlMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sqlRequirePrimaryKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tmpTableSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceMysqlUserConfigPrivateAccess:ServiceMysqlUserConfigPrivateAccess": {
            "properties": {
                "mysql": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceMysqlUserConfigPublicAccess:ServiceMysqlUserConfigPublicAccess": {
            "properties": {
                "mysql": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServicePg:ServicePg": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslmode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dbname",
                        "host",
                        "password",
                        "port",
                        "replicaUri",
                        "sslmode",
                        "uri",
                        "user"
                    ]
                }
            }
        },
        "aiven:/ServicePgUserConfig:ServicePgUserConfig": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupHour": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupMinute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pg": {
                    "$ref": "#/types/aiven:/ServicePgUserConfigPg:ServicePgUserConfigPg",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgReadReplica": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgServiceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgbouncer": {
                    "$ref": "#/types/aiven:/ServicePgUserConfigPgbouncer:ServicePgUserConfigPgbouncer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pglookout": {
                    "$ref": "#/types/aiven:/ServicePgUserConfigPglookout:ServicePgUserConfigPglookout",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/ServicePgUserConfigPrivateAccess:ServicePgUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/ServicePgUserConfigPublicAccess:ServicePgUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryTargetTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "synchronousReplication": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timescaledb": {
                    "$ref": "#/types/aiven:/ServicePgUserConfigTimescaledb:ServicePgUserConfigTimescaledb",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variant": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServicePgUserConfigPg:ServicePgUserConfigPg": {
            "properties": {
                "autovacuumAnalyzeScaleFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumAnalyzeThreshold": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumFreezeMaxAge": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumMaxWorkers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumNaptime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumVacuumCostDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumVacuumCostLimit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumVacuumScaleFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumVacuumThreshold": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deadlockTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleInTransactionSessionTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "jit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logAutovacuumMinDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logErrorVerbosity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logMinDurationStatement": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxLocksPerTransaction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxParallelWorkers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxParallelWorkersPerGather": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPredLocksPerTransaction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPreparedTransactions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxStackDepth": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxStandbyArchiveDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxStandbyStreamingDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxWorkerProcesses": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgStatStatementsTrack": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tempFileLimit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trackActivityQuerySize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trackCommitTimestamp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trackFunctions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "walSenderTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "walWriterDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServicePgUserConfigPgbouncer:ServicePgUserConfigPgbouncer": {
            "properties": {
                "ignoreStartupParameters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverResetQueryAlways": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServicePgUserConfigPglookout:ServicePgUserConfigPglookout": {
            "properties": {
                "maxFailoverReplicationTimeLag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServicePgUserConfigPrivateAccess:ServicePgUserConfigPrivateAccess": {
            "properties": {
                "pg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgbouncer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServicePgUserConfigPublicAccess:ServicePgUserConfigPublicAccess": {
            "properties": {
                "pg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgbouncer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServicePgUserConfigTimescaledb:ServicePgUserConfigTimescaledb": {
            "properties": {
                "maxBackgroundWorkers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceRedis:ServiceRedis": {
            "type": "object"
        },
        "aiven:/ServiceRedisUserConfig:ServiceRedisUserConfig": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "migration": {
                    "$ref": "#/types/aiven:/ServiceRedisUserConfigMigration:ServiceRedisUserConfigMigration",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/ServiceRedisUserConfigPrivateAccess:ServiceRedisUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/ServiceRedisUserConfigPublicAccess:ServiceRedisUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisLfuDecayTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisLfuLogFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisMaxmemoryPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisNotifyKeyspaceEvents": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisSsl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceRedisUserConfigMigration:ServiceRedisUserConfigMigration": {
            "properties": {
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceRedisUserConfigPrivateAccess:ServiceRedisUserConfigPrivateAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redis": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceRedisUserConfigPublicAccess:ServiceRedisUserConfigPublicAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redis": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/ServiceServiceIntegration:ServiceServiceIntegration": {
            "properties": {
                "integrationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceServiceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "integrationType",
                "sourceServiceName"
            ]
        },
        "aiven:/VpcPeeringConnectionClientTimeout:VpcPeeringConnectionClientTimeout": {
            "properties": {
                "create": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getElasticSearchAclAcl:getElasticSearchAclAcl": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/getElasticSearchAclAclRule:getElasticSearchAclAclRule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rules",
                "username"
            ]
        },
        "aiven:/getElasticSearchAclAclRule:getElasticSearchAclAclRule": {
            "properties": {
                "index": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "permission"
            ]
        },
        "aiven:/getKafkaConnectorTask:getKafkaConnectorTask": {
            "properties": {
                "connector": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "task": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "connector",
                "task"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aiven:/getKafkaTopicClientTimeout:getKafkaTopicClientTimeout": {
            "properties": {
                "create": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "read": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getProjectVpcClientTimeout:getProjectVpcClientTimeout": {
            "properties": {
                "create": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delete": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceCassandra:getServiceCassandra": {
            "type": "object"
        },
        "aiven:/getServiceCassandraUserConfig:getServiceCassandraUserConfig": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "migrateSstableloader": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/getServiceCassandraUserConfigPrivateAccess:getServiceCassandraUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/getServiceCassandraUserConfigPublicAccess:getServiceCassandraUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceCassandraUserConfigPrivateAccess:getServiceCassandraUserConfigPrivateAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceCassandraUserConfigPublicAccess:getServiceCassandraUserConfigPublicAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceClientTimeout:getServiceClientTimeout": {
            "properties": {
                "create": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "update": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceComponent:getServiceComponent": {
            "properties": {
                "component": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaAuthenticationMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssl": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "component",
                "host",
                "kafkaAuthenticationMethod",
                "port",
                "route",
                "ssl",
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aiven:/getServiceElasticsearch:getServiceElasticsearch": {
            "properties": {
                "kibanaUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kibanaUri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aiven:/getServiceElasticsearchUserConfig:getServiceElasticsearchUserConfig": {
            "properties": {
                "customDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableReplicationFactorAdjustment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elasticsearch": {
                    "$ref": "#/types/aiven:/getServiceElasticsearchUserConfigElasticsearch:getServiceElasticsearchUserConfigElasticsearch",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elasticsearchVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/getServiceElasticsearchUserConfigIndexPattern:getServiceElasticsearchUserConfigIndexPattern"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibana": {
                    "$ref": "#/types/aiven:/getServiceElasticsearchUserConfigKibana:getServiceElasticsearchUserConfigKibana",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxIndexCount": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/getServiceElasticsearchUserConfigPrivateAccess:getServiceElasticsearchUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/getServiceElasticsearchUserConfigPublicAccess:getServiceElasticsearchUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryBasebackupName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceElasticsearchUserConfigElasticsearch:getServiceElasticsearchUserConfigElasticsearch": {
            "properties": {
                "actionAutoCreateIndexEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionDestructiveRequiresName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMaxContentLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMaxHeaderSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMaxInitialLineLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indicesFielddataCacheSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indicesMemoryIndexBufferSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indicesQueriesCacheSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indicesQueryBoolMaxClauseCount": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reindexRemoteWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolAnalyzeQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolAnalyzeSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolForceMergeSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolGetQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolGetSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolIndexQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolIndexSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolSearchQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolSearchSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolSearchThrottledQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolSearchThrottledSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolWriteQueueSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadPoolWriteSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceElasticsearchUserConfigIndexPattern:getServiceElasticsearchUserConfigIndexPattern": {
            "properties": {
                "maxIndexCount": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pattern": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceElasticsearchUserConfigKibana:getServiceElasticsearchUserConfigKibana": {
            "properties": {
                "elasticsearchRequestTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxOldSpaceSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceElasticsearchUserConfigPrivateAccess:getServiceElasticsearchUserConfigPrivateAccess": {
            "properties": {
                "elasticsearch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibana": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceElasticsearchUserConfigPublicAccess:getServiceElasticsearchUserConfigPublicAccess": {
            "properties": {
                "elasticsearch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibana": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceGrafana:getServiceGrafana": {
            "type": "object"
        },
        "aiven:/getServiceGrafanaUserConfig:getServiceGrafanaUserConfig": {
            "properties": {
                "alertingEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertingErrorOrTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertingNodataOrNullvalues": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowEmbedding": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authBasicEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authGenericOauth": {
                    "$ref": "#/types/aiven:/getServiceGrafanaUserConfigAuthGenericOauth:getServiceGrafanaUserConfigAuthGenericOauth",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authGithub": {
                    "$ref": "#/types/aiven:/getServiceGrafanaUserConfigAuthGithub:getServiceGrafanaUserConfigAuthGithub",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authGitlab": {
                    "$ref": "#/types/aiven:/getServiceGrafanaUserConfigAuthGitlab:getServiceGrafanaUserConfigAuthGitlab",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authGoogle": {
                    "$ref": "#/types/aiven:/getServiceGrafanaUserConfigAuthGoogle:getServiceGrafanaUserConfigAuthGoogle",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieSamesite": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dashboardsVersionsToKeep": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataproxySendUserHeader": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataproxyTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableGravatar": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "editorsCanAdmin": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalImageStorage": {
                    "$ref": "#/types/aiven:/getServiceGrafanaUserConfigExternalImageStorage:getServiceGrafanaUserConfigExternalImageStorage",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "googleAnalyticsUaId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/getServiceGrafanaUserConfigPrivateAccess:getServiceGrafanaUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/getServiceGrafanaUserConfigPublicAccess:getServiceGrafanaUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smtpServer": {
                    "$ref": "#/types/aiven:/getServiceGrafanaUserConfigSmtpServer:getServiceGrafanaUserConfigSmtpServer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAutoAssignOrg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAutoAssignOrgRole": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "viewersCanEdit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceGrafanaUserConfigAuthGenericOauth:getServiceGrafanaUserConfigAuthGenericOauth": {
            "properties": {
                "allowSignUp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedOrganizations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceGrafanaUserConfigAuthGithub:getServiceGrafanaUserConfigAuthGithub": {
            "properties": {
                "allowSignUp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedOrganizations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceGrafanaUserConfigAuthGitlab:getServiceGrafanaUserConfigAuthGitlab": {
            "properties": {
                "allowSignUp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceGrafanaUserConfigAuthGoogle:getServiceGrafanaUserConfigAuthGoogle": {
            "properties": {
                "allowSignUp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceGrafanaUserConfigExternalImageStorage:getServiceGrafanaUserConfigExternalImageStorage": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceGrafanaUserConfigPrivateAccess:getServiceGrafanaUserConfigPrivateAccess": {
            "properties": {
                "grafana": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceGrafanaUserConfigPublicAccess:getServiceGrafanaUserConfigPublicAccess": {
            "properties": {
                "grafana": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceGrafanaUserConfigSmtpServer:getServiceGrafanaUserConfigSmtpServer": {
            "properties": {
                "fromAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skipVerify": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceInfluxdb:getServiceInfluxdb": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aiven:/getServiceInfluxdbUserConfig:getServiceInfluxdbUserConfig": {
            "properties": {
                "customDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/getServiceInfluxdbUserConfigPrivateAccess:getServiceInfluxdbUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/getServiceInfluxdbUserConfigPublicAccess:getServiceInfluxdbUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceInfluxdbUserConfigPrivateAccess:getServiceInfluxdbUserConfigPrivateAccess": {
            "properties": {
                "influxdb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceInfluxdbUserConfigPublicAccess:getServiceInfluxdbUserConfigPublicAccess": {
            "properties": {
                "influxdb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceIntegrationEndpointDatadogUserConfig:getServiceIntegrationEndpointDatadogUserConfig": {
            "properties": {
                "datadogApiKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableConsumerStats": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPartitionContexts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "site": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceIntegrationEndpointExternalElasticsearchLogsUserConfig:getServiceIntegrationEndpointExternalElasticsearchLogsUserConfig": {
            "properties": {
                "ca": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexDaysMax": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceIntegrationEndpointPrometheusUserConfig:getServiceIntegrationEndpointPrometheusUserConfig": {
            "properties": {
                "basicAuthPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "basicAuthUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceIntegrationEndpointRsyslogUserConfig:getServiceIntegrationEndpointRsyslogUserConfig": {
            "properties": {
                "ca": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logline": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sd": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceIntegrationKafkaConnectUserConfig:getServiceIntegrationKafkaConnectUserConfig": {
            "properties": {
                "kafkaConnect": {
                    "$ref": "#/types/aiven:/getServiceIntegrationKafkaConnectUserConfigKafkaConnect:getServiceIntegrationKafkaConnectUserConfigKafkaConnect",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceIntegrationKafkaConnectUserConfigKafkaConnect:getServiceIntegrationKafkaConnectUserConfigKafkaConnect": {
            "properties": {
                "configStorageTopic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetStorageTopic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusStorageTopic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceIntegrationKafkaMirrormakerUserConfig:getServiceIntegrationKafkaMirrormakerUserConfig": {
            "properties": {
                "clusterAlias": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceIntegrationLogsUserConfig:getServiceIntegrationLogsUserConfig": {
            "properties": {
                "elasticsearchIndexDaysMax": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elasticsearchIndexPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceIntegrationMirrormakerUserConfig:getServiceIntegrationMirrormakerUserConfig": {
            "properties": {
                "mirrormakerWhitelist": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafka:getServiceKafka": {
            "properties": {
                "accessCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaRegistryUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessCert",
                "accessKey",
                "connectUri",
                "restUri",
                "schemaRegistryUri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aiven:/getServiceKafkaConnect:getServiceKafkaConnect": {
            "type": "object"
        },
        "aiven:/getServiceKafkaConnectUserConfig:getServiceKafkaConnectUserConfig": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaConnect": {
                    "$ref": "#/types/aiven:/getServiceKafkaConnectUserConfigKafkaConnect:getServiceKafkaConnectUserConfigKafkaConnect",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/getServiceKafkaConnectUserConfigPrivateAccess:getServiceKafkaConnectUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/getServiceKafkaConnectUserConfigPublicAccess:getServiceKafkaConnectUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaConnectUserConfigKafkaConnect:getServiceKafkaConnectUserConfigKafkaConnect": {
            "properties": {
                "consumerIsolationLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerMaxPollRecords": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetFlushIntervalMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaConnectUserConfigPrivateAccess:getServiceKafkaConnectUserConfigPrivateAccess": {
            "properties": {
                "kafkaConnect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaConnectUserConfigPublicAccess:getServiceKafkaConnectUserConfigPublicAccess": {
            "properties": {
                "kafkaConnect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaMirrormaker:getServiceKafkaMirrormaker": {
            "type": "object"
        },
        "aiven:/getServiceKafkaMirrormakerUserConfig:getServiceKafkaMirrormakerUserConfig": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaMirrormaker": {
                    "$ref": "#/types/aiven:/getServiceKafkaMirrormakerUserConfigKafkaMirrormaker:getServiceKafkaMirrormakerUserConfigKafkaMirrormaker",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaMirrormakerUserConfigKafkaMirrormaker:getServiceKafkaMirrormakerUserConfigKafkaMirrormaker": {
            "properties": {
                "refreshGroupsEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "refreshGroupsIntervalSeconds": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "refreshTopicsEnabled": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "refreshTopicsIntervalSeconds": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaUserConfig:getServiceKafkaUserConfig": {
            "properties": {
                "customDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafka": {
                    "$ref": "#/types/aiven:/getServiceKafkaUserConfigKafka:getServiceKafkaUserConfigKafka",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaAuthenticationMethods": {
                    "$ref": "#/types/aiven:/getServiceKafkaUserConfigKafkaAuthenticationMethods:getServiceKafkaUserConfigKafkaAuthenticationMethods",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaConnect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaConnectConfig": {
                    "$ref": "#/types/aiven:/getServiceKafkaUserConfigKafkaConnectConfig:getServiceKafkaUserConfigKafkaConnectConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaRest": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaRestConfig": {
                    "$ref": "#/types/aiven:/getServiceKafkaUserConfigKafkaRestConfig:getServiceKafkaUserConfigKafkaRestConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/getServiceKafkaUserConfigPrivateAccess:getServiceKafkaUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/getServiceKafkaUserConfigPublicAccess:getServiceKafkaUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaRegistry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaUserConfigKafka:getServiceKafkaUserConfigKafka": {
            "properties": {
                "autoCreateTopicsEnable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionsMaxIdleMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultReplicationFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupMaxSessionTimeoutMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupMinSessionTimeoutMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logCleanerMaxCompactionLagMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logCleanerMinCleanableRatio": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logCleanerMinCompactionLagMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logCleanupPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logMessageTimestampDifferenceMaxMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logMessageTimestampType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionHours": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logSegmentBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConnectionsPerIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numPartitions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetsRetentionMinutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "producerPurgatoryPurgeIntervalRequests": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaFetchMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaFetchResponseMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "socketRequestMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaUserConfigKafkaAuthenticationMethods:getServiceKafkaUserConfigKafkaAuthenticationMethods": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sasl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaUserConfigKafkaConnectConfig:getServiceKafkaUserConfigKafkaConnectConfig": {
            "properties": {
                "consumerIsolationLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerMaxPollRecords": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetFlushIntervalMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaUserConfigKafkaRestConfig:getServiceKafkaUserConfigKafkaRestConfig": {
            "properties": {
                "consumerEnableAutoCommit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerRequestMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerRequestTimeoutMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "producerAcks": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "producerLingerMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "simpleconsumerPoolSizeMax": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaUserConfigPrivateAccess:getServiceKafkaUserConfigPrivateAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceKafkaUserConfigPublicAccess:getServiceKafkaUserConfigPublicAccess": {
            "properties": {
                "kafka": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaConnect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaRest": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaRegistry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceMysql:getServiceMysql": {
            "type": "object"
        },
        "aiven:/getServiceMysqlUserConfig:getServiceMysqlUserConfig": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupHour": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupMinute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mysql": {
                    "$ref": "#/types/aiven:/getServiceMysqlUserConfigMysql:getServiceMysqlUserConfigMysql",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mysqlVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/getServiceMysqlUserConfigPrivateAccess:getServiceMysqlUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/getServiceMysqlUserConfigPublicAccess:getServiceMysqlUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryTargetTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceMysqlUserConfigMysql:getServiceMysqlUserConfigMysql": {
            "properties": {
                "connectTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultTimeZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupConcatMaxLen": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "informationSchemaStatsExpiry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbFtMinTokenSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbFtServerStopwordTable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbLockWaitTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbLogBufferSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbOnlineAlterLogMaxSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innodbRollbackOnTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interactiveTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAllowedPacket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxHeapTableSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netReadTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netWriteTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortBufferSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sqlMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sqlRequirePrimaryKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tmpTableSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceMysqlUserConfigPrivateAccess:getServiceMysqlUserConfigPrivateAccess": {
            "properties": {
                "mysql": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceMysqlUserConfigPublicAccess:getServiceMysqlUserConfigPublicAccess": {
            "properties": {
                "mysql": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServicePg:getServicePg": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslmode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dbname",
                "host",
                "password",
                "port",
                "replicaUri",
                "sslmode",
                "uri",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aiven:/getServicePgUserConfig:getServicePgUserConfig": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupHour": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupMinute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pg": {
                    "$ref": "#/types/aiven:/getServicePgUserConfigPg:getServicePgUserConfigPg",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgReadReplica": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgServiceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgbouncer": {
                    "$ref": "#/types/aiven:/getServicePgUserConfigPgbouncer:getServicePgUserConfigPgbouncer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pglookout": {
                    "$ref": "#/types/aiven:/getServicePgUserConfigPglookout:getServicePgUserConfigPglookout",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/getServicePgUserConfigPrivateAccess:getServicePgUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/getServicePgUserConfigPublicAccess:getServicePgUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryTargetTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToForkFrom": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "synchronousReplication": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timescaledb": {
                    "$ref": "#/types/aiven:/getServicePgUserConfigTimescaledb:getServicePgUserConfigTimescaledb",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variant": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServicePgUserConfigPg:getServicePgUserConfigPg": {
            "properties": {
                "autovacuumAnalyzeScaleFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumAnalyzeThreshold": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumFreezeMaxAge": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumMaxWorkers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumNaptime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumVacuumCostDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumVacuumCostLimit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumVacuumScaleFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autovacuumVacuumThreshold": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deadlockTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleInTransactionSessionTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "jit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logAutovacuumMinDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logErrorVerbosity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logMinDurationStatement": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxLocksPerTransaction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxParallelWorkers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxParallelWorkersPerGather": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPredLocksPerTransaction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPreparedTransactions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxStackDepth": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxStandbyArchiveDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxStandbyStreamingDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxWorkerProcesses": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgStatStatementsTrack": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tempFileLimit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trackActivityQuerySize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trackCommitTimestamp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trackFunctions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "walSenderTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "walWriterDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServicePgUserConfigPgbouncer:getServicePgUserConfigPgbouncer": {
            "properties": {
                "ignoreStartupParameters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverResetQueryAlways": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServicePgUserConfigPglookout:getServicePgUserConfigPglookout": {
            "properties": {
                "maxFailoverReplicationTimeLag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServicePgUserConfigPrivateAccess:getServicePgUserConfigPrivateAccess": {
            "properties": {
                "pg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgbouncer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServicePgUserConfigPublicAccess:getServicePgUserConfigPublicAccess": {
            "properties": {
                "pg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgbouncer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServicePgUserConfigTimescaledb:getServicePgUserConfigTimescaledb": {
            "properties": {
                "maxBackgroundWorkers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceRedis:getServiceRedis": {
            "type": "object"
        },
        "aiven:/getServiceRedisUserConfig:getServiceRedisUserConfig": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "migration": {
                    "$ref": "#/types/aiven:/getServiceRedisUserConfigMigration:getServiceRedisUserConfigMigration",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAccess": {
                    "$ref": "#/types/aiven:/getServiceRedisUserConfigPrivateAccess:getServiceRedisUserConfigPrivateAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccess": {
                    "$ref": "#/types/aiven:/getServiceRedisUserConfigPublicAccess:getServiceRedisUserConfigPublicAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisLfuDecayTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisLfuLogFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisMaxmemoryPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisNotifyKeyspaceEvents": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisSsl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceRedisUserConfigMigration:getServiceRedisUserConfigMigration": {
            "properties": {
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceRedisUserConfigPrivateAccess:getServiceRedisUserConfigPrivateAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redis": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceRedisUserConfigPublicAccess:getServiceRedisUserConfigPublicAccess": {
            "properties": {
                "prometheus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redis": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aiven:/getServiceServiceIntegration:getServiceServiceIntegration": {
            "properties": {
                "integrationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceServiceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "integrationType",
                "sourceServiceName"
            ]
        },
        "aiven:/getVpcPeeringConnectionClientTimeout:getVpcPeeringConnectionClientTimeout": {
            "properties": {
                "create": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the aiven package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "apiToken": {
                "type": "string",
                "description": "Aiven Authentication Token\n",
                "defaultInfo": {
                    "environment": [
                        "AIVEN_API_TOKEN"
                    ]
                }
            }
        }
    },
    "resources": {
        "aiven:index/account:Account": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst account1 = new aiven.Account(\"account1\", {});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\naccount1 = aiven.Account(\"account1\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var account1 = new Aiven.Account(\"account1\", new Aiven.AccountArgs\n        {\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account id\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Time of creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Account name\n"
                },
                "ownerTeamId": {
                    "type": "string",
                    "description": "Owner team id\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant id\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "Time of last update\n"
                }
            },
            "required": [
                "accountId",
                "createTime",
                "name",
                "ownerTeamId",
                "tenantId",
                "updateTime"
            ],
            "inputProperties": {
                "createTime": {
                    "type": "string",
                    "description": "Time of creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Account name\n"
                },
                "ownerTeamId": {
                    "type": "string",
                    "description": "Owner team id\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant id\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "Time of last update\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account id\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of creation\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Account name\n"
                    },
                    "ownerTeamId": {
                        "type": "string",
                        "description": "Owner team id\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Tenant id\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "Time of last update\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/accountAuthentication:AccountAuthentication": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account id\n"
                },
                "authenticationId": {
                    "type": "string",
                    "description": "Account authentication id\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Time of creation\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of account authentication method\n"
                },
                "name": {
                    "type": "string",
                    "description": "Account team name\n"
                },
                "samlAcsUrl": {
                    "type": "string",
                    "description": "SAML Assertion Consumer Service URL\n"
                },
                "samlCertificate": {
                    "type": "string",
                    "description": "SAML Certificate\n"
                },
                "samlEntityId": {
                    "type": "string",
                    "description": "SAML Entity id\n"
                },
                "samlIdpUrl": {
                    "type": "string",
                    "description": "SAML Idp URL\n"
                },
                "samlMetadataUrl": {
                    "type": "string",
                    "description": "SAML Metadata URL\n"
                },
                "type": {
                    "type": "string",
                    "description": "Account authentication id\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "Time of last update\n"
                }
            },
            "required": [
                "accountId",
                "authenticationId",
                "createTime",
                "name",
                "samlAcsUrl",
                "samlMetadataUrl",
                "type",
                "updateTime"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account id\n"
                },
                "authenticationId": {
                    "type": "string",
                    "description": "Account authentication id\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Time of creation\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of account authentication method\n"
                },
                "name": {
                    "type": "string",
                    "description": "Account team name\n"
                },
                "samlAcsUrl": {
                    "type": "string",
                    "description": "SAML Assertion Consumer Service URL\n"
                },
                "samlCertificate": {
                    "type": "string",
                    "description": "SAML Certificate\n"
                },
                "samlEntityId": {
                    "type": "string",
                    "description": "SAML Entity id\n"
                },
                "samlIdpUrl": {
                    "type": "string",
                    "description": "SAML Idp URL\n"
                },
                "samlMetadataUrl": {
                    "type": "string",
                    "description": "SAML Metadata URL\n"
                },
                "type": {
                    "type": "string",
                    "description": "Account authentication id\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "Time of last update\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountAuthentication resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account id\n"
                    },
                    "authenticationId": {
                        "type": "string",
                        "description": "Account authentication id\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of creation\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Status of account authentication method\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Account team name\n"
                    },
                    "samlAcsUrl": {
                        "type": "string",
                        "description": "SAML Assertion Consumer Service URL\n"
                    },
                    "samlCertificate": {
                        "type": "string",
                        "description": "SAML Certificate\n"
                    },
                    "samlEntityId": {
                        "type": "string",
                        "description": "SAML Entity id\n"
                    },
                    "samlIdpUrl": {
                        "type": "string",
                        "description": "SAML Idp URL\n"
                    },
                    "samlMetadataUrl": {
                        "type": "string",
                        "description": "SAML Metadata URL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Account authentication id\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "Time of last update\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/accountTeam:AccountTeam": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst accountTeam1 = new aiven.AccountTeam(\"account_team1\", {\n    accountId: aiven_account_team.accountId,\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\naccount_team1 = aiven.AccountTeam(\"accountTeam1\", account_id=aiven_account[\"team\"][\"account_id\"])\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var accountTeam1 = new Aiven.AccountTeam(\"accountTeam1\", new Aiven.AccountTeamArgs\n        {\n            AccountId = aiven_account.Team.Account_id,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account id\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Time of creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Account team name\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Account team id\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "Time of last update\n"
                }
            },
            "required": [
                "accountId",
                "createTime",
                "name",
                "teamId",
                "updateTime"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account id\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Time of creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Account team name\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "Time of last update\n"
                }
            },
            "requiredInputs": [
                "accountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountTeam resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account id\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of creation\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Account team name\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Account team id\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "Time of last update\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/accountTeamMember:AccountTeamMember": {
            "description": "During the creation of `aiven..AccountTeamMember` resource, an email invitation will be sent\nto a user using `user_email` address. If the user accepts an invitation, he or she will become a member of the account team. \nThe deletion of `aiven..AccountTeamMember` will not only delete invitation if one was sent but not yet accepted by the \nuser, and it will also eliminate an account team member if one has accepted an invitation previously.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst foo = new aiven.AccountTeamMember(\"foo\", {\n    accountId: aiven_account_developers.accountId,\n    teamId: aiven_account_developers.accountId,\n    userEmail: \"user+1@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nfoo = aiven.AccountTeamMember(\"foo\",\n    account_id=aiven_account[\"developers\"][\"account_id\"],\n    team_id=aiven_account[\"developers\"][\"account_id\"],\n    user_email=\"user+1@example.com\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Aiven.AccountTeamMember(\"foo\", new Aiven.AccountTeamMemberArgs\n        {\n            AccountId = aiven_account.Developers.Account_id,\n            TeamId = aiven_account.Developers.Account_id,\n            UserEmail = \"user+1@example.com\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "accepted": {
                    "type": "boolean",
                    "description": "Team member invitation status\n"
                },
                "accountId": {
                    "type": "string",
                    "description": "Account id\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Time of creation\n"
                },
                "invitedByUserEmail": {
                    "type": "string",
                    "description": "Team invited by user email\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Account team id\n"
                },
                "userEmail": {
                    "type": "string",
                    "description": "Team invite user email\n"
                }
            },
            "required": [
                "accepted",
                "accountId",
                "createTime",
                "invitedByUserEmail",
                "teamId",
                "userEmail"
            ],
            "inputProperties": {
                "accepted": {
                    "type": "boolean",
                    "description": "Team member invitation status\n"
                },
                "accountId": {
                    "type": "string",
                    "description": "Account id\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Time of creation\n"
                },
                "invitedByUserEmail": {
                    "type": "string",
                    "description": "Team invited by user email\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Account team id\n"
                },
                "userEmail": {
                    "type": "string",
                    "description": "Team invite user email\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "teamId",
                "userEmail"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountTeamMember resources.\n",
                "properties": {
                    "accepted": {
                        "type": "boolean",
                        "description": "Team member invitation status\n"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "Account id\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of creation\n"
                    },
                    "invitedByUserEmail": {
                        "type": "string",
                        "description": "Team invited by user email\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Account team id\n"
                    },
                    "userEmail": {
                        "type": "string",
                        "description": "Team invite user email\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/accountTeamProject:AccountTeamProject": {
            "description": "The account team project is intended to link and existing project to the existing account team. It is important to note \nthat the project should have an `account_id` property set and equal to account team you are trying to link this project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst project1 = new aiven.Project(\"project1\", {\n    accountId: aiven_account_team_developers.accountId,\n    project: \"project-1\",\n});\nconst accountTeamProject1 = new aiven.AccountTeamProject(\"account_team_project1\", {\n    accountId: aiven_account_team_developers.accountId,\n    projectName: project1.project,\n    teamId: aiven_account_team_developers.teamId,\n    teamType: \"admin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nproject1 = aiven.Project(\"project1\",\n    account_id=aiven_account_team[\"developers\"][\"account_id\"],\n    project=\"project-1\")\naccount_team_project1 = aiven.AccountTeamProject(\"accountTeamProject1\",\n    account_id=aiven_account_team[\"developers\"][\"account_id\"],\n    project_name=project1.project,\n    team_id=aiven_account_team[\"developers\"][\"team_id\"],\n    team_type=\"admin\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project1 = new Aiven.Project(\"project1\", new Aiven.ProjectArgs\n        {\n            AccountId = aiven_account_team.Developers.Account_id,\n            Project = \"project-1\",\n        });\n        var accountTeamProject1 = new Aiven.AccountTeamProject(\"accountTeamProject1\", new Aiven.AccountTeamProjectArgs\n        {\n            AccountId = aiven_account_team.Developers.Account_id,\n            ProjectName = project1.ProjectName,\n            TeamId = aiven_account_team.Developers.Team_id,\n            TeamType = \"admin\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account id\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "Account team project name\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Account team id\n"
                },
                "teamType": {
                    "type": "string",
                    "description": "Account team project type, can one of the following values: admin, developer, operator and read_only\n"
                }
            },
            "required": [
                "accountId",
                "teamId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account id\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "Account team project name\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Account team id\n"
                },
                "teamType": {
                    "type": "string",
                    "description": "Account team project type, can one of the following values: admin, developer, operator and read_only\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountTeamProject resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account id\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "Account team project name\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Account team id\n"
                    },
                    "teamType": {
                        "type": "string",
                        "description": "Account team project type, can one of the following values: admin, developer, operator and read_only\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/connectionPool:ConnectionPool": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mytestpool = new aiven.ConnectionPool(\"mytestpool\", {\n    databaseName: aiven_database_mydatabase.databaseName,\n    poolMode: \"transaction\",\n    poolName: \"mypool\",\n    poolSize: 10,\n    project: aiven_project_myproject.project,\n    serviceName: aiven_service_myservice.serviceName,\n    username: aiven_service_user_myserviceuser.username,\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmytestpool = aiven.ConnectionPool(\"mytestpool\",\n    database_name=aiven_database[\"mydatabase\"][\"database_name\"],\n    pool_mode=\"transaction\",\n    pool_name=\"mypool\",\n    pool_size=10,\n    project=aiven_project[\"myproject\"][\"project\"],\n    service_name=aiven_service[\"myservice\"][\"service_name\"],\n    username=aiven_service_user[\"myserviceuser\"][\"username\"])\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mytestpool = new Aiven.ConnectionPool(\"mytestpool\", new Aiven.ConnectionPoolArgs\n        {\n            DatabaseName = aiven_database.Mydatabase.Database_name,\n            PoolMode = \"transaction\",\n            PoolName = \"mypool\",\n            PoolSize = 10,\n            Project = aiven_project.Myproject.Project,\n            ServiceName = aiven_service.Myservice.Service_name,\n            Username = aiven_service_user.Myserviceuser.Username,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "connectionUri": {
                    "type": "string",
                    "description": "URI for connecting to the pool\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database the pool connects to\n"
                },
                "poolMode": {
                    "type": "string",
                    "description": "Mode the pool operates in (session, transaction, statement)\n"
                },
                "poolName": {
                    "type": "string",
                    "description": "Name of the pool\n"
                },
                "poolSize": {
                    "type": "integer",
                    "description": "Number of connections the pool may create towards the backend server\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the connection pool to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the connection pool to\n"
                },
                "username": {
                    "type": "string",
                    "description": "Name of the service user used to connect to the database\n"
                }
            },
            "required": [
                "connectionUri",
                "databaseName",
                "poolName",
                "project",
                "serviceName",
                "username"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database the pool connects to\n"
                },
                "poolMode": {
                    "type": "string",
                    "description": "Mode the pool operates in (session, transaction, statement)\n"
                },
                "poolName": {
                    "type": "string",
                    "description": "Name of the pool\n"
                },
                "poolSize": {
                    "type": "integer",
                    "description": "Number of connections the pool may create towards the backend server\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the connection pool to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the connection pool to\n"
                },
                "username": {
                    "type": "string",
                    "description": "Name of the service user used to connect to the database\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "poolName",
                "project",
                "serviceName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionPool resources.\n",
                "properties": {
                    "connectionUri": {
                        "type": "string",
                        "description": "URI for connecting to the pool\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database the pool connects to\n"
                    },
                    "poolMode": {
                        "type": "string",
                        "description": "Mode the pool operates in (session, transaction, statement)\n"
                    },
                    "poolName": {
                        "type": "string",
                        "description": "Name of the pool\n"
                    },
                    "poolSize": {
                        "type": "integer",
                        "description": "Number of connections the pool may create towards the backend server\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project to link the connection pool to\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the connection pool to\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Name of the service user used to connect to the database\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/database:Database": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mydatabase = new aiven.Database(\"mydatabase\", {\n    databaseName: \"\u003cDATABASE_NAME\u003e\",\n    project: aiven_project_myproject.project,\n    serviceName: aiven_service_myservice.serviceName,\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmydatabase = aiven.Database(\"mydatabase\",\n    database_name=\"\u003cDATABASE_NAME\u003e\",\n    project=aiven_project[\"myproject\"][\"project\"],\n    service_name=aiven_service[\"myservice\"][\"service_name\"])\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mydatabase = new Aiven.Database(\"mydatabase\", new Aiven.DatabaseArgs\n        {\n            DatabaseName = \"\u003cDATABASE_NAME\u003e\",\n            Project = aiven_project.Myproject.Project,\n            ServiceName = aiven_service.Myservice.Service_name,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Service database name\n"
                },
                "lcCollate": {
                    "type": "string",
                    "description": "Default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8\n"
                },
                "lcCtype": {
                    "type": "string",
                    "description": "Default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the database to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the database to\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is\nrecommended to enable this for any production databases containing critical data.\n"
                }
            },
            "required": [
                "databaseName",
                "project",
                "serviceName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Service database name\n"
                },
                "lcCollate": {
                    "type": "string",
                    "description": "Default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8\n"
                },
                "lcCtype": {
                    "type": "string",
                    "description": "Default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the database to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the database to\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is\nrecommended to enable this for any production databases containing critical data.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "project",
                "serviceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Service database name\n"
                    },
                    "lcCollate": {
                        "type": "string",
                        "description": "Default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8\n"
                    },
                    "lcCtype": {
                        "type": "string",
                        "description": "Default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project to link the database to\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the database to\n"
                    },
                    "terminationProtection": {
                        "type": "boolean",
                        "description": "It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is\nrecommended to enable this for any production databases containing critical data.\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/elasticSearchAcl:ElasticSearchAcl": {
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/ElasticSearchAclAcl:ElasticSearchAclAcl"
                    },
                    "description": "List of Elasticsearch ACLs\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access\n"
                },
                "extendedAcl": {
                    "type": "boolean",
                    "description": "Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the\nExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target\nindexes they have been granted access to\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the Elasticsearch ACLs to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the Elasticsearch ACLs to\n"
                }
            },
            "required": [
                "project",
                "serviceName"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/ElasticSearchAclAcl:ElasticSearchAclAcl"
                    },
                    "description": "List of Elasticsearch ACLs\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access\n"
                },
                "extendedAcl": {
                    "type": "boolean",
                    "description": "Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the\nExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target\nindexes they have been granted access to\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the Elasticsearch ACLs to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the Elasticsearch ACLs to\n"
                }
            },
            "requiredInputs": [
                "project",
                "serviceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticSearchAcl resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/ElasticSearchAclAcl:ElasticSearchAclAcl"
                        },
                        "description": "List of Elasticsearch ACLs\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access\n"
                    },
                    "extendedAcl": {
                        "type": "boolean",
                        "description": "Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the\nExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target\nindexes they have been granted access to\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project to link the Elasticsearch ACLs to\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the Elasticsearch ACLs to\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/kafkaAcl:KafkaAcl": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mytestacl = new aiven.KafkaAcl(\"mytestacl\", {\n    permission: \"admin\",\n    project: aiven_project_myproject.project,\n    serviceName: aiven_service_myservice.serviceName,\n    topic: \"\u003cTOPIC_NAME_PATTERN\u003e\",\n    username: \"\u003cUSERNAME_PATTERN\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmytestacl = aiven.KafkaAcl(\"mytestacl\",\n    permission=\"admin\",\n    project=aiven_project[\"myproject\"][\"project\"],\n    service_name=aiven_service[\"myservice\"][\"service_name\"],\n    topic=\"\u003cTOPIC_NAME_PATTERN\u003e\",\n    username=\"\u003cUSERNAME_PATTERN\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mytestacl = new Aiven.KafkaAcl(\"mytestacl\", new Aiven.KafkaAclArgs\n        {\n            Permission = \"admin\",\n            Project = aiven_project.Myproject.Project,\n            ServiceName = aiven_service.Myservice.Service_name,\n            Topic = \"\u003cTOPIC_NAME_PATTERN\u003e\",\n            Username = \"\u003cUSERNAME_PATTERN\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "Kafka permission to grant (admin, read, readwrite, write)\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the Kafka ACL to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the Kafka ACL to\n"
                },
                "topic": {
                    "type": "string",
                    "description": "Topic name pattern for the ACL entry\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username pattern for the ACL entry\n"
                }
            },
            "required": [
                "permission",
                "project",
                "serviceName",
                "topic",
                "username"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "Kafka permission to grant (admin, read, readwrite, write)\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the Kafka ACL to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the Kafka ACL to\n"
                },
                "topic": {
                    "type": "string",
                    "description": "Topic name pattern for the ACL entry\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username pattern for the ACL entry\n"
                }
            },
            "requiredInputs": [
                "permission",
                "project",
                "serviceName",
                "topic",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaAcl resources.\n",
                "properties": {
                    "permission": {
                        "type": "string",
                        "description": "Kafka permission to grant (admin, read, readwrite, write)\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project to link the Kafka ACL to\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the Kafka ACL to\n"
                    },
                    "topic": {
                        "type": "string",
                        "description": "Topic name pattern for the ACL entry\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username pattern for the ACL entry\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/kafkaConnector:KafkaConnector": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Kafka Connector configuration parameters\n"
                },
                "connectorName": {
                    "type": "string",
                    "description": "Kafka connector name\n"
                },
                "pluginAuthor": {
                    "type": "string",
                    "description": "Kafka connector author\n"
                },
                "pluginClass": {
                    "type": "string",
                    "description": "Kafka connector Java class\n"
                },
                "pluginDocUrl": {
                    "type": "string",
                    "description": "Kafka connector documentation URL\n"
                },
                "pluginTitle": {
                    "type": "string",
                    "description": "Kafka connector title\n"
                },
                "pluginType": {
                    "type": "string",
                    "description": "Kafka connector type\n"
                },
                "pluginVersion": {
                    "type": "string",
                    "description": "Kafka connector version\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the kafka connector to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the kafka connector to\n"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/KafkaConnectorTask:KafkaConnectorTask"
                    },
                    "description": "List of tasks of a connector\n"
                }
            },
            "required": [
                "config",
                "connectorName",
                "pluginAuthor",
                "pluginClass",
                "pluginDocUrl",
                "pluginTitle",
                "pluginType",
                "pluginVersion",
                "project",
                "serviceName",
                "tasks"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Kafka Connector configuration parameters\n"
                },
                "connectorName": {
                    "type": "string",
                    "description": "Kafka connector name\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the kafka connector to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the kafka connector to\n"
                }
            },
            "requiredInputs": [
                "config",
                "connectorName",
                "project",
                "serviceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaConnector resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Kafka Connector configuration parameters\n"
                    },
                    "connectorName": {
                        "type": "string",
                        "description": "Kafka connector name\n"
                    },
                    "pluginAuthor": {
                        "type": "string",
                        "description": "Kafka connector author\n"
                    },
                    "pluginClass": {
                        "type": "string",
                        "description": "Kafka connector Java class\n"
                    },
                    "pluginDocUrl": {
                        "type": "string",
                        "description": "Kafka connector documentation URL\n"
                    },
                    "pluginTitle": {
                        "type": "string",
                        "description": "Kafka connector title\n"
                    },
                    "pluginType": {
                        "type": "string",
                        "description": "Kafka connector type\n"
                    },
                    "pluginVersion": {
                        "type": "string",
                        "description": "Kafka connector version\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project to link the kafka connector to\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the kafka connector to\n"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/KafkaConnectorTask:KafkaConnectorTask"
                        },
                        "description": "List of tasks of a connector\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/kafkaSchema:KafkaSchema": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "Project to link the Kafka Schema to\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Kafka Schema configuration should be a valid Avro Schema JSON format\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the Kafka Schema to\n"
                },
                "subjectName": {
                    "type": "string",
                    "description": "Kafka Schema Subject name\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Kafka Schema configuration version\n"
                }
            },
            "required": [
                "project",
                "schema",
                "serviceName",
                "subjectName",
                "version"
            ],
            "inputProperties": {
                "project": {
                    "type": "string",
                    "description": "Project to link the Kafka Schema to\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Kafka Schema configuration should be a valid Avro Schema JSON format\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the Kafka Schema to\n"
                },
                "subjectName": {
                    "type": "string",
                    "description": "Kafka Schema Subject name\n"
                }
            },
            "requiredInputs": [
                "project",
                "schema",
                "serviceName",
                "subjectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaSchema resources.\n",
                "properties": {
                    "project": {
                        "type": "string",
                        "description": "Project to link the Kafka Schema to\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "Kafka Schema configuration should be a valid Avro Schema JSON format\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the Kafka Schema to\n"
                    },
                    "subjectName": {
                        "type": "string",
                        "description": "Kafka Schema Subject name\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Kafka Schema configuration version\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration": {
            "properties": {
                "compatibilityLevel": {
                    "type": "string",
                    "description": "Kafka Schemas compatibility level\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the Kafka Schemas Configuration to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the Kafka Schemas Configuration to\n"
                }
            },
            "required": [
                "compatibilityLevel",
                "project",
                "serviceName"
            ],
            "inputProperties": {
                "compatibilityLevel": {
                    "type": "string",
                    "description": "Kafka Schemas compatibility level\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the Kafka Schemas Configuration to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the Kafka Schemas Configuration to\n"
                }
            },
            "requiredInputs": [
                "compatibilityLevel",
                "project",
                "serviceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaSchemaConfiguration resources.\n",
                "properties": {
                    "compatibilityLevel": {
                        "type": "string",
                        "description": "Kafka Schemas compatibility level\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project to link the Kafka Schemas Configuration to\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the Kafka Schemas Configuration to\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/kafkaTopic:KafkaTopic": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mytesttopic = new aiven.KafkaTopic(\"mytesttopic\", {\n    cleanupPolicy: \"delete\",\n    minimumInSyncReplicas: 2,\n    partitions: 5,\n    project: aiven_project_myproject.project,\n    replication: 3,\n    retentionBytes: -1,\n    retentionHours: 72,\n    serviceName: aiven_service_myservice.serviceName,\n    topicName: \"\u003cTOPIC_NAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmytesttopic = aiven.KafkaTopic(\"mytesttopic\",\n    cleanup_policy=\"delete\",\n    minimum_in_sync_replicas=2,\n    partitions=5,\n    project=aiven_project[\"myproject\"][\"project\"],\n    replication=3,\n    retention_bytes=-1,\n    retention_hours=72,\n    service_name=aiven_service[\"myservice\"][\"service_name\"],\n    topic_name=\"\u003cTOPIC_NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mytesttopic = new Aiven.KafkaTopic(\"mytesttopic\", new Aiven.KafkaTopicArgs\n        {\n            CleanupPolicy = \"delete\",\n            MinimumInSyncReplicas = 2,\n            Partitions = 5,\n            Project = aiven_project.Myproject.Project,\n            Replication = 3,\n            RetentionBytes = -1,\n            RetentionHours = 72,\n            ServiceName = aiven_service.Myservice.Service_name,\n            TopicName = \"\u003cTOPIC_NAME\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "cleanupPolicy": {
                    "type": "string",
                    "description": "Topic cleanup policy. Allowed values: delete, compact\n"
                },
                "clientTimeout": {
                    "$ref": "#/types/aiven:/KafkaTopicClientTimeout:KafkaTopicClientTimeout",
                    "description": "Custom Terraform Client timeouts\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "minimumInSyncReplicas": {
                    "type": "integer",
                    "description": "Minimum required nodes in-sync replicas (ISR) to produce to a partition\n"
                },
                "partitions": {
                    "type": "integer",
                    "description": "Number of partitions to create in the topic\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the kafka topic to\n"
                },
                "replication": {
                    "type": "integer",
                    "description": "Replication factor for the topic\n"
                },
                "retentionBytes": {
                    "type": "integer",
                    "description": "Retention bytes\n"
                },
                "retentionHours": {
                    "type": "integer",
                    "description": "Retention period (hours)\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the kafka topic to\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to\nenable this for any production Kafka topic containing critical data.\n"
                },
                "topicName": {
                    "type": "string",
                    "description": "Topic name\n"
                }
            },
            "required": [
                "partitions",
                "project",
                "replication",
                "serviceName",
                "topicName"
            ],
            "inputProperties": {
                "cleanupPolicy": {
                    "type": "string",
                    "description": "Topic cleanup policy. Allowed values: delete, compact\n"
                },
                "clientTimeout": {
                    "$ref": "#/types/aiven:/KafkaTopicClientTimeout:KafkaTopicClientTimeout",
                    "description": "Custom Terraform Client timeouts\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "minimumInSyncReplicas": {
                    "type": "integer",
                    "description": "Minimum required nodes in-sync replicas (ISR) to produce to a partition\n"
                },
                "partitions": {
                    "type": "integer",
                    "description": "Number of partitions to create in the topic\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the kafka topic to\n"
                },
                "replication": {
                    "type": "integer",
                    "description": "Replication factor for the topic\n"
                },
                "retentionBytes": {
                    "type": "integer",
                    "description": "Retention bytes\n"
                },
                "retentionHours": {
                    "type": "integer",
                    "description": "Retention period (hours)\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the kafka topic to\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to\nenable this for any production Kafka topic containing critical data.\n"
                },
                "topicName": {
                    "type": "string",
                    "description": "Topic name\n"
                }
            },
            "requiredInputs": [
                "partitions",
                "project",
                "replication",
                "serviceName",
                "topicName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaTopic resources.\n",
                "properties": {
                    "cleanupPolicy": {
                        "type": "string",
                        "description": "Topic cleanup policy. Allowed values: delete, compact\n"
                    },
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/KafkaTopicClientTimeout:KafkaTopicClientTimeout",
                        "description": "Custom Terraform Client timeouts\n",
                        "deprecationMessage": "use timeouts instead"
                    },
                    "minimumInSyncReplicas": {
                        "type": "integer",
                        "description": "Minimum required nodes in-sync replicas (ISR) to produce to a partition\n"
                    },
                    "partitions": {
                        "type": "integer",
                        "description": "Number of partitions to create in the topic\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project to link the kafka topic to\n"
                    },
                    "replication": {
                        "type": "integer",
                        "description": "Replication factor for the topic\n"
                    },
                    "retentionBytes": {
                        "type": "integer",
                        "description": "Retention bytes\n"
                    },
                    "retentionHours": {
                        "type": "integer",
                        "description": "Retention period (hours)\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the kafka topic to\n"
                    },
                    "terminationProtection": {
                        "type": "boolean",
                        "description": "It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to\nenable this for any production Kafka topic containing critical data.\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "Topic name\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable of disable replication flows for a service\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the kafka topic to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the kafka topic to\n"
                },
                "sourceCluster": {
                    "type": "string",
                    "description": "Source cluster alias\n"
                },
                "targetCluster": {
                    "type": "string",
                    "description": "Target cluster alias\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of topics and/or regular expressions to replicate\n"
                },
                "topicsBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of topics and/or regular expressions to not replicate.\n"
                }
            },
            "required": [
                "enable",
                "project",
                "serviceName",
                "sourceCluster",
                "targetCluster"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable of disable replication flows for a service\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the kafka topic to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the kafka topic to\n"
                },
                "sourceCluster": {
                    "type": "string",
                    "description": "Source cluster alias\n"
                },
                "targetCluster": {
                    "type": "string",
                    "description": "Target cluster alias\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of topics and/or regular expressions to replicate\n"
                },
                "topicsBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of topics and/or regular expressions to not replicate.\n"
                }
            },
            "requiredInputs": [
                "enable",
                "project",
                "serviceName",
                "sourceCluster",
                "targetCluster"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MirrorMakerReplicationFlow resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable of disable replication flows for a service\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project to link the kafka topic to\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the kafka topic to\n"
                    },
                    "sourceCluster": {
                        "type": "string",
                        "description": "Source cluster alias\n"
                    },
                    "targetCluster": {
                        "type": "string",
                        "description": "Target cluster alias\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of topics and/or regular expressions to replicate\n"
                    },
                    "topicsBlacklists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of topics and/or regular expressions to not replicate.\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/project:Project": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myproject = new aiven.Project(\"myproject\", {\n    cardId: \"\u003cFULL_CARD_ID/LAST4_DIGITS\u003e\",\n    project: \"\u003cPROJECT_NAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyproject = aiven.Project(\"myproject\",\n    card_id=\"\u003cFULL_CARD_ID/LAST4_DIGITS\u003e\",\n    project=\"\u003cPROJECT_NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myproject = new Aiven.Project(\"myproject\", new Aiven.ProjectArgs\n        {\n            CardId = \"\u003cFULL_CARD_ID/LAST4_DIGITS\u003e\",\n            Project = \"\u003cPROJECT_NAME\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID\n"
                },
                "billingAddress": {
                    "type": "string",
                    "description": "Billing name and address of the project\n"
                },
                "billingEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Billing contact emails of the project\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "Project root CA. This is used by some services like Kafka to sign service certificate\n"
                },
                "cardId": {
                    "type": "string",
                    "description": "Credit card ID\n"
                },
                "copyFromProject": {
                    "type": "string",
                    "description": "Copy properties from another project. Only has effect when a new project is created.\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "Billing country code of the project\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project name\n",
                    "language": {
                        "csharp": {
                            "name": "ProjectName"
                        }
                    }
                },
                "technicalEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Technical contact emails of the project\n"
                }
            },
            "required": [
                "caCert",
                "project"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID\n"
                },
                "billingAddress": {
                    "type": "string",
                    "description": "Billing name and address of the project\n"
                },
                "billingEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Billing contact emails of the project\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "Project root CA. This is used by some services like Kafka to sign service certificate\n"
                },
                "cardId": {
                    "type": "string",
                    "description": "Credit card ID\n"
                },
                "copyFromProject": {
                    "type": "string",
                    "description": "Copy properties from another project. Only has effect when a new project is created.\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "Billing country code of the project\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project name\n",
                    "language": {
                        "csharp": {
                            "name": "ProjectName"
                        }
                    }
                },
                "technicalEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Technical contact emails of the project\n"
                }
            },
            "requiredInputs": [
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account ID\n"
                    },
                    "billingAddress": {
                        "type": "string",
                        "description": "Billing name and address of the project\n"
                    },
                    "billingEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Billing contact emails of the project\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "Project root CA. This is used by some services like Kafka to sign service certificate\n"
                    },
                    "cardId": {
                        "type": "string",
                        "description": "Credit card ID\n"
                    },
                    "copyFromProject": {
                        "type": "string",
                        "description": "Copy properties from another project. Only has effect when a new project is created.\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Billing country code of the project\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project name\n",
                        "language": {
                            "csharp": {
                                "name": "ProjectName"
                            }
                        }
                    },
                    "technicalEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Technical contact emails of the project\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/projectUser:ProjectUser": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mytestuser = new aiven.ProjectUser(\"mytestuser\", {\n    email: \"john.doe@example.com\",\n    memberType: \"admin\",\n    project: aiven_project_myproject.project,\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmytestuser = aiven.ProjectUser(\"mytestuser\",\n    email=\"john.doe@example.com\",\n    member_type=\"admin\",\n    project=aiven_project[\"myproject\"][\"project\"])\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mytestuser = new Aiven.ProjectUser(\"mytestuser\", new Aiven.ProjectUserArgs\n        {\n            Email = \"john.doe@example.com\",\n            MemberType = \"admin\",\n            Project = aiven_project.Myproject.Project,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "accepted": {
                    "type": "boolean",
                    "description": "Whether the user has accepted project membership or not\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address of the user\n"
                },
                "memberType": {
                    "type": "string",
                    "description": "Project membership type. One of: admin, developer, operator\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the user belongs to\n"
                }
            },
            "required": [
                "accepted",
                "email",
                "memberType",
                "project"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "Email address of the user\n"
                },
                "memberType": {
                    "type": "string",
                    "description": "Project membership type. One of: admin, developer, operator\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the user belongs to\n"
                }
            },
            "requiredInputs": [
                "email",
                "memberType",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectUser resources.\n",
                "properties": {
                    "accepted": {
                        "type": "boolean",
                        "description": "Whether the user has accepted project membership or not\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user\n"
                    },
                    "memberType": {
                        "type": "string",
                        "description": "Project membership type. One of: admin, developer, operator\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project the user belongs to\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/projectVpc:ProjectVpc": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myvpc = new aiven.ProjectVpc(\"myvpc\", {\n    cloudName: \"google-europe-west1\",\n    networkCidr: \"192.168.0.1/24\",\n    project: aiven_project_myproject.project,\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyvpc = aiven.ProjectVpc(\"myvpc\",\n    cloud_name=\"google-europe-west1\",\n    network_cidr=\"192.168.0.1/24\",\n    project=aiven_project[\"myproject\"][\"project\"])\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myvpc = new Aiven.ProjectVpc(\"myvpc\", new Aiven.ProjectVpcArgs\n        {\n            CloudName = \"google-europe-west1\",\n            NetworkCidr = \"192.168.0.1/24\",\n            Project = aiven_project.Myproject.Project,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "clientTimeout": {
                    "$ref": "#/types/aiven:/ProjectVpcClientTimeout:ProjectVpcClientTimeout",
                    "description": "Custom Terraform Client timeouts\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "cloudName": {
                    "type": "string",
                    "description": "Cloud the VPC is in\n"
                },
                "networkCidr": {
                    "type": "string",
                    "description": "Network address range used by the VPC like 192.168.0.0/24\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the VPC belongs to\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the VPC (APPROVED, ACTIVE, DELETING, DELETED)\n"
                }
            },
            "required": [
                "cloudName",
                "networkCidr",
                "project",
                "state"
            ],
            "inputProperties": {
                "clientTimeout": {
                    "$ref": "#/types/aiven:/ProjectVpcClientTimeout:ProjectVpcClientTimeout",
                    "description": "Custom Terraform Client timeouts\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "cloudName": {
                    "type": "string",
                    "description": "Cloud the VPC is in\n"
                },
                "networkCidr": {
                    "type": "string",
                    "description": "Network address range used by the VPC like 192.168.0.0/24\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the VPC belongs to\n"
                }
            },
            "requiredInputs": [
                "cloudName",
                "networkCidr",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectVpc resources.\n",
                "properties": {
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/ProjectVpcClientTimeout:ProjectVpcClientTimeout",
                        "description": "Custom Terraform Client timeouts\n",
                        "deprecationMessage": "use timeouts instead"
                    },
                    "cloudName": {
                        "type": "string",
                        "description": "Cloud the VPC is in\n"
                    },
                    "networkCidr": {
                        "type": "string",
                        "description": "Network address range used by the VPC like 192.168.0.0/24\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project the VPC belongs to\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the VPC (APPROVED, ACTIVE, DELETING, DELETED)\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/service:Service": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myservice = new aiven.Service(\"myservice\", {\n    cloudName: \"google-europe-west1\",\n    pgUserConfig: {\n        ipFilters: [\"0.0.0.0/0\"],\n        pgVersion: \"10\",\n    },\n    plan: \"business-8\",\n    project: aiven_project_myproject.project,\n    projectVpcId: aiven_project_vpc_vpc_gcp_europe_west1.id,\n    serviceName: \"\u003cSERVICE_NAME\u003e\",\n    serviceType: \"pg\",\n    terminationProtection: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyservice = aiven.Service(\"myservice\",\n    cloud_name=\"google-europe-west1\",\n    pg_user_config={\n        \"ipFilter\": [\"0.0.0.0/0\"],\n        \"pgVersion\": \"10\",\n    },\n    plan=\"business-8\",\n    project=aiven_project[\"myproject\"][\"project\"],\n    project_vpc_id=aiven_project_vpc[\"vpc_gcp_europe_west1\"][\"id\"],\n    service_name=\"\u003cSERVICE_NAME\u003e\",\n    service_type=\"pg\",\n    termination_protection=True)\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myservice = new Aiven.Service(\"myservice\", new Aiven.ServiceArgs\n        {\n            CloudName = \"google-europe-west1\",\n            PgUserConfig = new Aiven.Inputs.ServicePgUserConfigArgs\n            {\n                IpFilter = \n                {\n                    \"0.0.0.0/0\",\n                },\n                PgVersion = \"10\",\n            },\n            Plan = \"business-8\",\n            Project = aiven_project.Myproject.Project,\n            ProjectVpcId = aiven_project_vpc.Vpc_gcp_europe_west1.Id,\n            ServiceName = \"\u003cSERVICE_NAME\u003e\",\n            ServiceType = \"pg\",\n            TerminationProtection = true,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "cassandra": {
                    "$ref": "#/types/aiven:/ServiceCassandra:ServiceCassandra",
                    "description": "Cassandra specific server provided values\n"
                },
                "cassandraUserConfig": {
                    "$ref": "#/types/aiven:/ServiceCassandraUserConfig:ServiceCassandraUserConfig",
                    "description": "Cassandra specific user configurable settings\n"
                },
                "clientTimeout": {
                    "$ref": "#/types/aiven:/ServiceClientTimeout:ServiceClientTimeout",
                    "description": "Custom Terraform Client timeouts\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "cloudName": {
                    "type": "string",
                    "description": "Cloud the service runs in\n"
                },
                "components": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/ServiceComponent:ServiceComponent"
                    },
                    "description": "Service component information objects\n"
                },
                "elasticsearch": {
                    "$ref": "#/types/aiven:/ServiceElasticsearch:ServiceElasticsearch",
                    "description": "Elasticsearch specific server provided values\n"
                },
                "elasticsearchUserConfig": {
                    "$ref": "#/types/aiven:/ServiceElasticsearchUserConfig:ServiceElasticsearchUserConfig",
                    "description": "Elasticsearch specific user configurable settings\n"
                },
                "grafana": {
                    "$ref": "#/types/aiven:/ServiceGrafana:ServiceGrafana",
                    "description": "Grafana specific server provided values\n"
                },
                "grafanaUserConfig": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfig:ServiceGrafanaUserConfig",
                    "description": "Grafana specific user configurable settings\n"
                },
                "influxdb": {
                    "$ref": "#/types/aiven:/ServiceInfluxdb:ServiceInfluxdb",
                    "description": "InfluxDB specific server provided values\n"
                },
                "influxdbUserConfig": {
                    "$ref": "#/types/aiven:/ServiceInfluxdbUserConfig:ServiceInfluxdbUserConfig",
                    "description": "InfluxDB specific user configurable settings\n"
                },
                "kafka": {
                    "$ref": "#/types/aiven:/ServiceKafka:ServiceKafka",
                    "description": "Kafka specific server provided values\n"
                },
                "kafkaConnect": {
                    "$ref": "#/types/aiven:/ServiceKafkaConnect:ServiceKafkaConnect",
                    "description": "Kafka Connect specific server provided values\n"
                },
                "kafkaConnectUserConfig": {
                    "$ref": "#/types/aiven:/ServiceKafkaConnectUserConfig:ServiceKafkaConnectUserConfig",
                    "description": "Kafka Connect specific user configurable settings\n"
                },
                "kafkaMirrormaker": {
                    "$ref": "#/types/aiven:/ServiceKafkaMirrormaker:ServiceKafkaMirrormaker",
                    "description": "Kafka MirrorMaker 2 specific server provided values\n"
                },
                "kafkaMirrormakerUserConfig": {
                    "$ref": "#/types/aiven:/ServiceKafkaMirrormakerUserConfig:ServiceKafkaMirrormakerUserConfig",
                    "description": "Kafka MirrorMaker 2 specific user configurable settings\n"
                },
                "kafkaUserConfig": {
                    "$ref": "#/types/aiven:/ServiceKafkaUserConfig:ServiceKafkaUserConfig",
                    "description": "Kafka specific user configurable settings\n"
                },
                "maintenanceWindowDow": {
                    "type": "string",
                    "description": "Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.\n"
                },
                "maintenanceWindowTime": {
                    "type": "string",
                    "description": "Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.\n"
                },
                "mysql": {
                    "$ref": "#/types/aiven:/ServiceMysql:ServiceMysql",
                    "description": "MySQL specific server provided values\n"
                },
                "mysqlUserConfig": {
                    "$ref": "#/types/aiven:/ServiceMysqlUserConfig:ServiceMysqlUserConfig",
                    "description": "MySQL specific user configurable settings\n"
                },
                "pg": {
                    "$ref": "#/types/aiven:/ServicePg:ServicePg",
                    "description": "PostgreSQL specific server provided values\n"
                },
                "pgUserConfig": {
                    "$ref": "#/types/aiven:/ServicePgUserConfig:ServicePgUserConfig",
                    "description": "PostgreSQL specific user configurable settings\n"
                },
                "plan": {
                    "type": "string",
                    "description": "Subscription plan\n"
                },
                "project": {
                    "type": "string",
                    "description": "Target project\n"
                },
                "projectVpcId": {
                    "type": "string",
                    "description": "Identifier of the VPC the service should be in, if any\n"
                },
                "redis": {
                    "$ref": "#/types/aiven:/ServiceRedis:ServiceRedis",
                    "description": "Redis specific server provided values\n"
                },
                "redisUserConfig": {
                    "$ref": "#/types/aiven:/ServiceRedisUserConfig:ServiceRedisUserConfig",
                    "description": "Redis specific user configurable settings\n"
                },
                "serviceHost": {
                    "type": "string",
                    "description": "Service hostname\n"
                },
                "serviceIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/ServiceServiceIntegration:ServiceServiceIntegration"
                    },
                    "description": "Service integrations to specify when creating a service. Not applied after initial service creation\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service name\n"
                },
                "servicePassword": {
                    "type": "string",
                    "description": "Password used for connecting to the service, if applicable\n"
                },
                "servicePort": {
                    "type": "integer",
                    "description": "Service port\n"
                },
                "serviceType": {
                    "type": "string",
                    "description": "Service type code\n"
                },
                "serviceUri": {
                    "type": "string",
                    "description": "URI for connecting to the service. Service specific info is under \"kafka\", \"pg\", etc.\n"
                },
                "serviceUsername": {
                    "type": "string",
                    "description": "Username used for connecting to the service, if applicable\n"
                },
                "state": {
                    "type": "string",
                    "description": "Service state\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "Prevent service from being deleted. It is recommended to have this enabled for all services.\n"
                }
            },
            "required": [
                "cassandra",
                "components",
                "elasticsearch",
                "grafana",
                "influxdb",
                "kafka",
                "kafkaConnect",
                "kafkaMirrormaker",
                "mysql",
                "pg",
                "project",
                "redis",
                "serviceHost",
                "serviceName",
                "servicePassword",
                "servicePort",
                "serviceType",
                "serviceUri",
                "serviceUsername",
                "state"
            ],
            "inputProperties": {
                "cassandra": {
                    "$ref": "#/types/aiven:/ServiceCassandra:ServiceCassandra",
                    "description": "Cassandra specific server provided values\n"
                },
                "cassandraUserConfig": {
                    "$ref": "#/types/aiven:/ServiceCassandraUserConfig:ServiceCassandraUserConfig",
                    "description": "Cassandra specific user configurable settings\n"
                },
                "clientTimeout": {
                    "$ref": "#/types/aiven:/ServiceClientTimeout:ServiceClientTimeout",
                    "description": "Custom Terraform Client timeouts\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "cloudName": {
                    "type": "string",
                    "description": "Cloud the service runs in\n"
                },
                "elasticsearch": {
                    "$ref": "#/types/aiven:/ServiceElasticsearch:ServiceElasticsearch",
                    "description": "Elasticsearch specific server provided values\n"
                },
                "elasticsearchUserConfig": {
                    "$ref": "#/types/aiven:/ServiceElasticsearchUserConfig:ServiceElasticsearchUserConfig",
                    "description": "Elasticsearch specific user configurable settings\n"
                },
                "grafana": {
                    "$ref": "#/types/aiven:/ServiceGrafana:ServiceGrafana",
                    "description": "Grafana specific server provided values\n"
                },
                "grafanaUserConfig": {
                    "$ref": "#/types/aiven:/ServiceGrafanaUserConfig:ServiceGrafanaUserConfig",
                    "description": "Grafana specific user configurable settings\n"
                },
                "influxdb": {
                    "$ref": "#/types/aiven:/ServiceInfluxdb:ServiceInfluxdb",
                    "description": "InfluxDB specific server provided values\n"
                },
                "influxdbUserConfig": {
                    "$ref": "#/types/aiven:/ServiceInfluxdbUserConfig:ServiceInfluxdbUserConfig",
                    "description": "InfluxDB specific user configurable settings\n"
                },
                "kafka": {
                    "$ref": "#/types/aiven:/ServiceKafka:ServiceKafka",
                    "description": "Kafka specific server provided values\n"
                },
                "kafkaConnect": {
                    "$ref": "#/types/aiven:/ServiceKafkaConnect:ServiceKafkaConnect",
                    "description": "Kafka Connect specific server provided values\n"
                },
                "kafkaConnectUserConfig": {
                    "$ref": "#/types/aiven:/ServiceKafkaConnectUserConfig:ServiceKafkaConnectUserConfig",
                    "description": "Kafka Connect specific user configurable settings\n"
                },
                "kafkaMirrormaker": {
                    "$ref": "#/types/aiven:/ServiceKafkaMirrormaker:ServiceKafkaMirrormaker",
                    "description": "Kafka MirrorMaker 2 specific server provided values\n"
                },
                "kafkaMirrormakerUserConfig": {
                    "$ref": "#/types/aiven:/ServiceKafkaMirrormakerUserConfig:ServiceKafkaMirrormakerUserConfig",
                    "description": "Kafka MirrorMaker 2 specific user configurable settings\n"
                },
                "kafkaUserConfig": {
                    "$ref": "#/types/aiven:/ServiceKafkaUserConfig:ServiceKafkaUserConfig",
                    "description": "Kafka specific user configurable settings\n"
                },
                "maintenanceWindowDow": {
                    "type": "string",
                    "description": "Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.\n"
                },
                "maintenanceWindowTime": {
                    "type": "string",
                    "description": "Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.\n"
                },
                "mysql": {
                    "$ref": "#/types/aiven:/ServiceMysql:ServiceMysql",
                    "description": "MySQL specific server provided values\n"
                },
                "mysqlUserConfig": {
                    "$ref": "#/types/aiven:/ServiceMysqlUserConfig:ServiceMysqlUserConfig",
                    "description": "MySQL specific user configurable settings\n"
                },
                "pg": {
                    "$ref": "#/types/aiven:/ServicePg:ServicePg",
                    "description": "PostgreSQL specific server provided values\n"
                },
                "pgUserConfig": {
                    "$ref": "#/types/aiven:/ServicePgUserConfig:ServicePgUserConfig",
                    "description": "PostgreSQL specific user configurable settings\n"
                },
                "plan": {
                    "type": "string",
                    "description": "Subscription plan\n"
                },
                "project": {
                    "type": "string",
                    "description": "Target project\n"
                },
                "projectVpcId": {
                    "type": "string",
                    "description": "Identifier of the VPC the service should be in, if any\n"
                },
                "redis": {
                    "$ref": "#/types/aiven:/ServiceRedis:ServiceRedis",
                    "description": "Redis specific server provided values\n"
                },
                "redisUserConfig": {
                    "$ref": "#/types/aiven:/ServiceRedisUserConfig:ServiceRedisUserConfig",
                    "description": "Redis specific user configurable settings\n"
                },
                "serviceIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aiven:/ServiceServiceIntegration:ServiceServiceIntegration"
                    },
                    "description": "Service integrations to specify when creating a service. Not applied after initial service creation\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service name\n"
                },
                "serviceType": {
                    "type": "string",
                    "description": "Service type code\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "Prevent service from being deleted. It is recommended to have this enabled for all services.\n"
                }
            },
            "requiredInputs": [
                "project",
                "serviceName",
                "serviceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "cassandra": {
                        "$ref": "#/types/aiven:/ServiceCassandra:ServiceCassandra",
                        "description": "Cassandra specific server provided values\n"
                    },
                    "cassandraUserConfig": {
                        "$ref": "#/types/aiven:/ServiceCassandraUserConfig:ServiceCassandraUserConfig",
                        "description": "Cassandra specific user configurable settings\n"
                    },
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/ServiceClientTimeout:ServiceClientTimeout",
                        "description": "Custom Terraform Client timeouts\n",
                        "deprecationMessage": "use timeouts instead"
                    },
                    "cloudName": {
                        "type": "string",
                        "description": "Cloud the service runs in\n"
                    },
                    "components": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/ServiceComponent:ServiceComponent"
                        },
                        "description": "Service component information objects\n"
                    },
                    "elasticsearch": {
                        "$ref": "#/types/aiven:/ServiceElasticsearch:ServiceElasticsearch",
                        "description": "Elasticsearch specific server provided values\n"
                    },
                    "elasticsearchUserConfig": {
                        "$ref": "#/types/aiven:/ServiceElasticsearchUserConfig:ServiceElasticsearchUserConfig",
                        "description": "Elasticsearch specific user configurable settings\n"
                    },
                    "grafana": {
                        "$ref": "#/types/aiven:/ServiceGrafana:ServiceGrafana",
                        "description": "Grafana specific server provided values\n"
                    },
                    "grafanaUserConfig": {
                        "$ref": "#/types/aiven:/ServiceGrafanaUserConfig:ServiceGrafanaUserConfig",
                        "description": "Grafana specific user configurable settings\n"
                    },
                    "influxdb": {
                        "$ref": "#/types/aiven:/ServiceInfluxdb:ServiceInfluxdb",
                        "description": "InfluxDB specific server provided values\n"
                    },
                    "influxdbUserConfig": {
                        "$ref": "#/types/aiven:/ServiceInfluxdbUserConfig:ServiceInfluxdbUserConfig",
                        "description": "InfluxDB specific user configurable settings\n"
                    },
                    "kafka": {
                        "$ref": "#/types/aiven:/ServiceKafka:ServiceKafka",
                        "description": "Kafka specific server provided values\n"
                    },
                    "kafkaConnect": {
                        "$ref": "#/types/aiven:/ServiceKafkaConnect:ServiceKafkaConnect",
                        "description": "Kafka Connect specific server provided values\n"
                    },
                    "kafkaConnectUserConfig": {
                        "$ref": "#/types/aiven:/ServiceKafkaConnectUserConfig:ServiceKafkaConnectUserConfig",
                        "description": "Kafka Connect specific user configurable settings\n"
                    },
                    "kafkaMirrormaker": {
                        "$ref": "#/types/aiven:/ServiceKafkaMirrormaker:ServiceKafkaMirrormaker",
                        "description": "Kafka MirrorMaker 2 specific server provided values\n"
                    },
                    "kafkaMirrormakerUserConfig": {
                        "$ref": "#/types/aiven:/ServiceKafkaMirrormakerUserConfig:ServiceKafkaMirrormakerUserConfig",
                        "description": "Kafka MirrorMaker 2 specific user configurable settings\n"
                    },
                    "kafkaUserConfig": {
                        "$ref": "#/types/aiven:/ServiceKafkaUserConfig:ServiceKafkaUserConfig",
                        "description": "Kafka specific user configurable settings\n"
                    },
                    "maintenanceWindowDow": {
                        "type": "string",
                        "description": "Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.\n"
                    },
                    "maintenanceWindowTime": {
                        "type": "string",
                        "description": "Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.\n"
                    },
                    "mysql": {
                        "$ref": "#/types/aiven:/ServiceMysql:ServiceMysql",
                        "description": "MySQL specific server provided values\n"
                    },
                    "mysqlUserConfig": {
                        "$ref": "#/types/aiven:/ServiceMysqlUserConfig:ServiceMysqlUserConfig",
                        "description": "MySQL specific user configurable settings\n"
                    },
                    "pg": {
                        "$ref": "#/types/aiven:/ServicePg:ServicePg",
                        "description": "PostgreSQL specific server provided values\n"
                    },
                    "pgUserConfig": {
                        "$ref": "#/types/aiven:/ServicePgUserConfig:ServicePgUserConfig",
                        "description": "PostgreSQL specific user configurable settings\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Subscription plan\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Target project\n"
                    },
                    "projectVpcId": {
                        "type": "string",
                        "description": "Identifier of the VPC the service should be in, if any\n"
                    },
                    "redis": {
                        "$ref": "#/types/aiven:/ServiceRedis:ServiceRedis",
                        "description": "Redis specific server provided values\n"
                    },
                    "redisUserConfig": {
                        "$ref": "#/types/aiven:/ServiceRedisUserConfig:ServiceRedisUserConfig",
                        "description": "Redis specific user configurable settings\n"
                    },
                    "serviceHost": {
                        "type": "string",
                        "description": "Service hostname\n"
                    },
                    "serviceIntegrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/ServiceServiceIntegration:ServiceServiceIntegration"
                        },
                        "description": "Service integrations to specify when creating a service. Not applied after initial service creation\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service name\n"
                    },
                    "servicePassword": {
                        "type": "string",
                        "description": "Password used for connecting to the service, if applicable\n"
                    },
                    "servicePort": {
                        "type": "integer",
                        "description": "Service port\n"
                    },
                    "serviceType": {
                        "type": "string",
                        "description": "Service type code\n"
                    },
                    "serviceUri": {
                        "type": "string",
                        "description": "URI for connecting to the service. Service specific info is under \"kafka\", \"pg\", etc.\n"
                    },
                    "serviceUsername": {
                        "type": "string",
                        "description": "Username used for connecting to the service, if applicable\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Service state\n"
                    },
                    "terminationProtection": {
                        "type": "boolean",
                        "description": "Prevent service from being deleted. It is recommended to have this enabled for all services.\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/serviceIntegration:ServiceIntegration": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myintegration = new aiven.ServiceIntegration(\"myintegration\", {\n    destinationEndpointId: aiven_service_integration_endpoint_myendpoint.id,\n    destinationServiceName: \"\",\n    integrationType: \"datadog\",\n    project: aiven_project_myproject.project,\n    sourceEndpointId: \"\",\n    sourceServiceName: aiven_service_testkafka.serviceName,\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyintegration = aiven.ServiceIntegration(\"myintegration\",\n    destination_endpoint_id=aiven_service_integration_endpoint[\"myendpoint\"][\"id\"],\n    destination_service_name=\"\",\n    integration_type=\"datadog\",\n    project=aiven_project[\"myproject\"][\"project\"],\n    source_endpoint_id=\"\",\n    source_service_name=aiven_service[\"testkafka\"][\"service_name\"])\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myintegration = new Aiven.ServiceIntegration(\"myintegration\", new Aiven.ServiceIntegrationArgs\n        {\n            DestinationEndpointId = aiven_service_integration_endpoint.Myendpoint.Id,\n            DestinationServiceName = \"\",\n            IntegrationType = \"datadog\",\n            Project = aiven_project.Myproject.Project,\n            SourceEndpointId = \"\",\n            SourceServiceName = aiven_service.Testkafka.Service_name,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "destinationEndpointId": {
                    "type": "string",
                    "description": "Destination endpoint for the integration (if any)\n"
                },
                "destinationServiceName": {
                    "type": "string",
                    "description": "Destination service for the integration (if any)\n"
                },
                "integrationType": {
                    "type": "string",
                    "description": "Type of the service integration\n"
                },
                "kafkaConnectUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationKafkaConnectUserConfig:ServiceIntegrationKafkaConnectUserConfig",
                    "description": "Kafka Connect specific user configurable settings\n"
                },
                "kafkaMirrormakerUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationKafkaMirrormakerUserConfig:ServiceIntegrationKafkaMirrormakerUserConfig",
                    "description": "Mirrormaker 2 integration specific user configurable settings\n"
                },
                "logsUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationLogsUserConfig:ServiceIntegrationLogsUserConfig",
                    "description": "Log integration specific user configurable settings\n"
                },
                "mirrormakerUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationMirrormakerUserConfig:ServiceIntegrationMirrormakerUserConfig",
                    "description": "Mirrormaker 1 integration specific user configurable settings\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project the integration belongs to\n"
                },
                "sourceEndpointId": {
                    "type": "string",
                    "description": "Source endpoint for the integration (if any)\n"
                },
                "sourceServiceName": {
                    "type": "string",
                    "description": "Source service for the integration (if any)\n"
                }
            },
            "required": [
                "integrationType",
                "project"
            ],
            "inputProperties": {
                "destinationEndpointId": {
                    "type": "string",
                    "description": "Destination endpoint for the integration (if any)\n"
                },
                "destinationServiceName": {
                    "type": "string",
                    "description": "Destination service for the integration (if any)\n"
                },
                "integrationType": {
                    "type": "string",
                    "description": "Type of the service integration\n"
                },
                "kafkaConnectUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationKafkaConnectUserConfig:ServiceIntegrationKafkaConnectUserConfig",
                    "description": "Kafka Connect specific user configurable settings\n"
                },
                "kafkaMirrormakerUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationKafkaMirrormakerUserConfig:ServiceIntegrationKafkaMirrormakerUserConfig",
                    "description": "Mirrormaker 2 integration specific user configurable settings\n"
                },
                "logsUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationLogsUserConfig:ServiceIntegrationLogsUserConfig",
                    "description": "Log integration specific user configurable settings\n"
                },
                "mirrormakerUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationMirrormakerUserConfig:ServiceIntegrationMirrormakerUserConfig",
                    "description": "Mirrormaker 1 integration specific user configurable settings\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project the integration belongs to\n"
                },
                "sourceEndpointId": {
                    "type": "string",
                    "description": "Source endpoint for the integration (if any)\n"
                },
                "sourceServiceName": {
                    "type": "string",
                    "description": "Source service for the integration (if any)\n"
                }
            },
            "requiredInputs": [
                "integrationType",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceIntegration resources.\n",
                "properties": {
                    "destinationEndpointId": {
                        "type": "string",
                        "description": "Destination endpoint for the integration (if any)\n"
                    },
                    "destinationServiceName": {
                        "type": "string",
                        "description": "Destination service for the integration (if any)\n"
                    },
                    "integrationType": {
                        "type": "string",
                        "description": "Type of the service integration\n"
                    },
                    "kafkaConnectUserConfig": {
                        "$ref": "#/types/aiven:/ServiceIntegrationKafkaConnectUserConfig:ServiceIntegrationKafkaConnectUserConfig",
                        "description": "Kafka Connect specific user configurable settings\n"
                    },
                    "kafkaMirrormakerUserConfig": {
                        "$ref": "#/types/aiven:/ServiceIntegrationKafkaMirrormakerUserConfig:ServiceIntegrationKafkaMirrormakerUserConfig",
                        "description": "Mirrormaker 2 integration specific user configurable settings\n"
                    },
                    "logsUserConfig": {
                        "$ref": "#/types/aiven:/ServiceIntegrationLogsUserConfig:ServiceIntegrationLogsUserConfig",
                        "description": "Log integration specific user configurable settings\n"
                    },
                    "mirrormakerUserConfig": {
                        "$ref": "#/types/aiven:/ServiceIntegrationMirrormakerUserConfig:ServiceIntegrationMirrormakerUserConfig",
                        "description": "Mirrormaker 1 integration specific user configurable settings\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project the integration belongs to\n"
                    },
                    "sourceEndpointId": {
                        "type": "string",
                        "description": "Source endpoint for the integration (if any)\n"
                    },
                    "sourceServiceName": {
                        "type": "string",
                        "description": "Source service for the integration (if any)\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/serviceIntegrationEndpoint:ServiceIntegrationEndpoint": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myendpoint = new aiven.ServiceIntegrationEndpoint(\"myendpoint\", {\n    datadogUserConfig: {\n        datadogApiKey: \"\u003cDATADOG_API_KEY\u003e\",\n    },\n    endpointName: \"\u003cENDPOINT_NAME\u003e\",\n    endpointType: \"datadog\",\n    project: aiven_project_myproject.project,\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyendpoint = aiven.ServiceIntegrationEndpoint(\"myendpoint\",\n    datadog_user_config={\n        \"datadogApiKey\": \"\u003cDATADOG_API_KEY\u003e\",\n    },\n    endpoint_name=\"\u003cENDPOINT_NAME\u003e\",\n    endpoint_type=\"datadog\",\n    project=aiven_project[\"myproject\"][\"project\"])\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myendpoint = new Aiven.ServiceIntegrationEndpoint(\"myendpoint\", new Aiven.ServiceIntegrationEndpointArgs\n        {\n            DatadogUserConfig = new Aiven.Inputs.ServiceIntegrationEndpointDatadogUserConfigArgs\n            {\n                DatadogApiKey = \"\u003cDATADOG_API_KEY\u003e\",\n            },\n            EndpointName = \"\u003cENDPOINT_NAME\u003e\",\n            EndpointType = \"datadog\",\n            Project = aiven_project.Myproject.Project,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "datadogUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationEndpointDatadogUserConfig:ServiceIntegrationEndpointDatadogUserConfig",
                    "description": "Datadog specific user configurable settings\n"
                },
                "endpointConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Integration endpoint specific backend configuration\n"
                },
                "endpointName": {
                    "type": "string",
                    "description": "Name of the service integration endpoint\n"
                },
                "endpointType": {
                    "type": "string",
                    "description": "Type of the service integration endpoint\n"
                },
                "externalElasticsearchLogsUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationEndpointExternalElasticsearchLogsUserConfig:ServiceIntegrationEndpointExternalElasticsearchLogsUserConfig",
                    "description": "external elasticsearch specific user configurable settings\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project the service integration endpoint belongs to\n"
                },
                "prometheusUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationEndpointPrometheusUserConfig:ServiceIntegrationEndpointPrometheusUserConfig",
                    "description": "Prometheus specific user configurable settings\n"
                },
                "rsyslogUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationEndpointRsyslogUserConfig:ServiceIntegrationEndpointRsyslogUserConfig",
                    "description": "rsyslog specific user configurable settings\n"
                }
            },
            "required": [
                "endpointConfig",
                "endpointName",
                "endpointType",
                "project"
            ],
            "inputProperties": {
                "datadogUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationEndpointDatadogUserConfig:ServiceIntegrationEndpointDatadogUserConfig",
                    "description": "Datadog specific user configurable settings\n"
                },
                "endpointName": {
                    "type": "string",
                    "description": "Name of the service integration endpoint\n"
                },
                "endpointType": {
                    "type": "string",
                    "description": "Type of the service integration endpoint\n"
                },
                "externalElasticsearchLogsUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationEndpointExternalElasticsearchLogsUserConfig:ServiceIntegrationEndpointExternalElasticsearchLogsUserConfig",
                    "description": "external elasticsearch specific user configurable settings\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project the service integration endpoint belongs to\n"
                },
                "prometheusUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationEndpointPrometheusUserConfig:ServiceIntegrationEndpointPrometheusUserConfig",
                    "description": "Prometheus specific user configurable settings\n"
                },
                "rsyslogUserConfig": {
                    "$ref": "#/types/aiven:/ServiceIntegrationEndpointRsyslogUserConfig:ServiceIntegrationEndpointRsyslogUserConfig",
                    "description": "rsyslog specific user configurable settings\n"
                }
            },
            "requiredInputs": [
                "endpointName",
                "endpointType",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceIntegrationEndpoint resources.\n",
                "properties": {
                    "datadogUserConfig": {
                        "$ref": "#/types/aiven:/ServiceIntegrationEndpointDatadogUserConfig:ServiceIntegrationEndpointDatadogUserConfig",
                        "description": "Datadog specific user configurable settings\n"
                    },
                    "endpointConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Integration endpoint specific backend configuration\n"
                    },
                    "endpointName": {
                        "type": "string",
                        "description": "Name of the service integration endpoint\n"
                    },
                    "endpointType": {
                        "type": "string",
                        "description": "Type of the service integration endpoint\n"
                    },
                    "externalElasticsearchLogsUserConfig": {
                        "$ref": "#/types/aiven:/ServiceIntegrationEndpointExternalElasticsearchLogsUserConfig:ServiceIntegrationEndpointExternalElasticsearchLogsUserConfig",
                        "description": "external elasticsearch specific user configurable settings\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project the service integration endpoint belongs to\n"
                    },
                    "prometheusUserConfig": {
                        "$ref": "#/types/aiven:/ServiceIntegrationEndpointPrometheusUserConfig:ServiceIntegrationEndpointPrometheusUserConfig",
                        "description": "Prometheus specific user configurable settings\n"
                    },
                    "rsyslogUserConfig": {
                        "$ref": "#/types/aiven:/ServiceIntegrationEndpointRsyslogUserConfig:ServiceIntegrationEndpointRsyslogUserConfig",
                        "description": "rsyslog specific user configurable settings\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/serviceUser:ServiceUser": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myserviceuser = new aiven.ServiceUser(\"myserviceuser\", {\n    project: aiven_project_myproject.project,\n    serviceName: aiven_service_myservice.serviceName,\n    username: \"\u003cUSERNAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyserviceuser = aiven.ServiceUser(\"myserviceuser\",\n    project=aiven_project[\"myproject\"][\"project\"],\n    service_name=aiven_service[\"myservice\"][\"service_name\"],\n    username=\"\u003cUSERNAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myserviceuser = new Aiven.ServiceUser(\"myserviceuser\", new Aiven.ServiceUserArgs\n        {\n            Project = aiven_project.Myproject.Project,\n            ServiceName = aiven_service.Myservice.Service_name,\n            Username = \"\u003cUSERNAME\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "accessCert": {
                    "type": "string",
                    "description": "Access certificate for the user if applicable for the service in question\n"
                },
                "accessKey": {
                    "type": "string",
                    "description": "Access certificate key for the user if applicable for the service in question\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the user\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to link the user to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the user to\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the user account\n"
                },
                "username": {
                    "type": "string",
                    "description": "Name of the user account\n"
                }
            },
            "required": [
                "accessCert",
                "accessKey",
                "password",
                "project",
                "serviceName",
                "type",
                "username"
            ],
            "inputProperties": {
                "project": {
                    "type": "string",
                    "description": "Project to link the user to\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Service to link the user to\n"
                },
                "username": {
                    "type": "string",
                    "description": "Name of the user account\n"
                }
            },
            "requiredInputs": [
                "project",
                "serviceName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceUser resources.\n",
                "properties": {
                    "accessCert": {
                        "type": "string",
                        "description": "Access certificate for the user if applicable for the service in question\n"
                    },
                    "accessKey": {
                        "type": "string",
                        "description": "Access certificate key for the user if applicable for the service in question\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the user\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project to link the user to\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Service to link the user to\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the user account\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Name of the user account\n"
                    }
                },
                "type": "object"
            }
        },
        "aiven:index/vpcPeeringConnection:VpcPeeringConnection": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mypeeringconnection = new aiven.VpcPeeringConnection(\"mypeeringconnection\", {\n    peerCloudAccount: \"\u003cPEER_ACCOUNT_ID\u003e\",\n    peerRegion: \"\u003cPEER_REGION\u003e\",\n    peerVpc: \"\u003cPEER_VPC_ID/NAME\u003e\",\n    vpcId: aiven_project_vpc_myvpc.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmypeeringconnection = aiven.VpcPeeringConnection(\"mypeeringconnection\",\n    peer_cloud_account=\"\u003cPEER_ACCOUNT_ID\u003e\",\n    peer_region=\"\u003cPEER_REGION\u003e\",\n    peer_vpc=\"\u003cPEER_VPC_ID/NAME\u003e\",\n    vpc_id=aiven_project_vpc[\"myvpc\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mypeeringconnection = new Aiven.VpcPeeringConnection(\"mypeeringconnection\", new Aiven.VpcPeeringConnectionArgs\n        {\n            PeerCloudAccount = \"\u003cPEER_ACCOUNT_ID\u003e\",\n            PeerRegion = \"\u003cPEER_REGION\u003e\",\n            PeerVpc = \"\u003cPEER_VPC_ID/NAME\u003e\",\n            VpcId = aiven_project_vpc.Myvpc.Id,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "clientTimeout": {
                    "$ref": "#/types/aiven:/VpcPeeringConnectionClientTimeout:VpcPeeringConnectionClientTimeout",
                    "description": "Custom Terraform Client timeouts\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "peerCloudAccount": {
                    "type": "string",
                    "description": "AWS account ID or GCP project ID of the peered VPC\n"
                },
                "peerRegion": {
                    "type": "string",
                    "description": "AWS region of the peered VPC (if not in the same region as Aiven VPC)\n"
                },
                "peerVpc": {
                    "type": "string",
                    "description": "AWS VPC ID or GCP VPC network name of the peered VPC\n"
                },
                "peeringConnectionId": {
                    "type": "string",
                    "description": "Cloud provider identifier for the peering connection if available\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the peering connection\n"
                },
                "stateInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "State-specific help or error information\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC the peering connection belongs to\n"
                }
            },
            "required": [
                "peerCloudAccount",
                "peerVpc",
                "peeringConnectionId",
                "state",
                "stateInfo",
                "vpcId"
            ],
            "inputProperties": {
                "clientTimeout": {
                    "$ref": "#/types/aiven:/VpcPeeringConnectionClientTimeout:VpcPeeringConnectionClientTimeout",
                    "description": "Custom Terraform Client timeouts\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "peerCloudAccount": {
                    "type": "string",
                    "description": "AWS account ID or GCP project ID of the peered VPC\n"
                },
                "peerRegion": {
                    "type": "string",
                    "description": "AWS region of the peered VPC (if not in the same region as Aiven VPC)\n"
                },
                "peerVpc": {
                    "type": "string",
                    "description": "AWS VPC ID or GCP VPC network name of the peered VPC\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC the peering connection belongs to\n"
                }
            },
            "requiredInputs": [
                "peerCloudAccount",
                "peerVpc",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPeeringConnection resources.\n",
                "properties": {
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/VpcPeeringConnectionClientTimeout:VpcPeeringConnectionClientTimeout",
                        "description": "Custom Terraform Client timeouts\n",
                        "deprecationMessage": "use timeouts instead"
                    },
                    "peerCloudAccount": {
                        "type": "string",
                        "description": "AWS account ID or GCP project ID of the peered VPC\n"
                    },
                    "peerRegion": {
                        "type": "string",
                        "description": "AWS region of the peered VPC (if not in the same region as Aiven VPC)\n"
                    },
                    "peerVpc": {
                        "type": "string",
                        "description": "AWS VPC ID or GCP VPC network name of the peered VPC\n"
                    },
                    "peeringConnectionId": {
                        "type": "string",
                        "description": "Cloud provider identifier for the peering connection if available\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the peering connection\n"
                    },
                    "stateInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "State-specific help or error information\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC the peering connection belongs to\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "aiven:index/getAccount:getAccount": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst account1 = pulumi.output(aiven.getAccount({\n    name: \"\u003cACCOUNT_NAME\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\naccount1 = aiven.get_account(name=\"\u003cACCOUNT_NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var account1 = Output.Create(Aiven.GetAccount.InvokeAsync(new Aiven.GetAccountArgs\n        {\n            Name = \"\u003cACCOUNT_NAME\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerTeamId": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "updateTime": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerTeamId": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "updateTime": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "createTime",
                    "name",
                    "ownerTeamId",
                    "tenantId",
                    "updateTime",
                    "id"
                ]
            }
        },
        "aiven:index/getAccountAuthentication:getAccountAuthentication": {
            "inputs": {
                "description": "A collection of arguments for invoking getAccountAuthentication.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "authenticationId": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "samlAcsUrl": {
                        "type": "string"
                    },
                    "samlCertificate": {
                        "type": "string"
                    },
                    "samlEntityId": {
                        "type": "string"
                    },
                    "samlIdpUrl": {
                        "type": "string"
                    },
                    "samlMetadataUrl": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "updateTime": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccountAuthentication.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "authenticationId": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "samlAcsUrl": {
                        "type": "string"
                    },
                    "samlCertificate": {
                        "type": "string"
                    },
                    "samlEntityId": {
                        "type": "string"
                    },
                    "samlIdpUrl": {
                        "type": "string"
                    },
                    "samlMetadataUrl": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "updateTime": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "authenticationId",
                    "createTime",
                    "name",
                    "samlAcsUrl",
                    "samlMetadataUrl",
                    "updateTime",
                    "id"
                ]
            }
        },
        "aiven:index/getAccountTeam:getAccountTeam": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst accountTeam1 = aiven_account_team.accountId.apply(accountId =\u003e aiven.getAccountTeam({\n    accountId: accountId,\n    name: \"account_team1\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\naccount_team1 = aiven.get_account_team(account_id=aiven_account[\"team\"][\"account_id\"],\n    name=\"account_team1\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var accountTeam1 = Output.Create(Aiven.GetAccountTeam.InvokeAsync(new Aiven.GetAccountTeamArgs\n        {\n            AccountId = aiven_account.Team.Account_id,\n            Name = \"account_team1\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountTeam.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "updateTime": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccountTeam.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "updateTime": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "createTime",
                    "name",
                    "teamId",
                    "updateTime",
                    "id"
                ]
            }
        },
        "aiven:index/getAccountTeamMember:getAccountTeamMember": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst foo = pulumi.all([aiven_account_developers.accountId, aiven_account_developers.accountId]).apply(([aiven_account_developersAccountId, aiven_account_developersAccountId1]) =\u003e aiven.getAccountTeamMember({\n    accountId: aiven_account_developersAccountId,\n    teamId: aiven_account_developersAccountId1,\n    userEmail: \"user+1@example.com\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nfoo = aiven.get_account_team_member(account_id=aiven_account[\"developers\"][\"account_id\"],\n    team_id=aiven_account[\"developers\"][\"account_id\"],\n    user_email=\"user+1@example.com\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Aiven.GetAccountTeamMember.InvokeAsync(new Aiven.GetAccountTeamMemberArgs\n        {\n            AccountId = aiven_account.Developers.Account_id,\n            TeamId = aiven_account.Developers.Account_id,\n            UserEmail = \"user+1@example.com\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountTeamMember.\n",
                "properties": {
                    "accepted": {
                        "type": "boolean"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "string"
                    },
                    "invitedByUserEmail": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "userEmail": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "teamId",
                    "userEmail"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccountTeamMember.\n",
                "properties": {
                    "accepted": {
                        "type": "boolean"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "invitedByUserEmail": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "userEmail": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accepted",
                    "accountId",
                    "createTime",
                    "invitedByUserEmail",
                    "teamId",
                    "userEmail",
                    "id"
                ]
            }
        },
        "aiven:index/getAccountTeamProject:getAccountTeamProject": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst accountTeamProject1 = pulumi.all([aiven_account_team_developers.accountId, aiven_project_project1.project, aiven_account_team_developers.teamId]).apply(([accountId, project, teamId]) =\u003e aiven.getAccountTeamProject({\n    accountId: accountId,\n    projectName: project,\n    teamId: teamId,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\naccount_team_project1 = aiven.get_account_team_project(account_id=aiven_account_team[\"developers\"][\"account_id\"],\n    project_name=aiven_project[\"project1\"][\"project\"],\n    team_id=aiven_account_team[\"developers\"][\"team_id\"])\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var accountTeamProject1 = Output.Create(Aiven.GetAccountTeamProject.InvokeAsync(new Aiven.GetAccountTeamProjectArgs\n        {\n            AccountId = aiven_account_team.Developers.Account_id,\n            ProjectName = aiven_project.Project1.Project,\n            TeamId = aiven_account_team.Developers.Team_id,\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountTeamProject.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "teamType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "projectName",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccountTeamProject.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "teamType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "projectName",
                    "teamId",
                    "id"
                ]
            }
        },
        "aiven:index/getConnectionPool:getConnectionPool": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mytestpool = aiven.getConnectionPool({\n    project: data.aiven_service.myservice.project,\n    serviceName: data.aiven_service.myservice.service_name,\n    poolName: \"\u003cPOOLNAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmytestpool = aiven.get_connection_pool(project=data[\"aiven..Service\"][\"myservice\"][\"project\"],\n    service_name=data[\"aiven..Service\"][\"myservice\"][\"service_name\"],\n    pool_name=\"\u003cPOOLNAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mytestpool = Output.Create(Aiven.GetConnectionPool.InvokeAsync(new Aiven.GetConnectionPoolArgs\n        {\n            Project = data.Aiven_service.Myservice.Project,\n            ServiceName = data.Aiven_service.Myservice.Service_name,\n            PoolName = \"\u003cPOOLNAME\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectionPool.\n",
                "properties": {
                    "connectionUri": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    },
                    "poolMode": {
                        "type": "string"
                    },
                    "poolName": {
                        "type": "string"
                    },
                    "poolSize": {
                        "type": "integer"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "poolName",
                    "project",
                    "serviceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectionPool.\n",
                "properties": {
                    "connectionUri": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "poolMode": {
                        "type": "string"
                    },
                    "poolName": {
                        "type": "string"
                    },
                    "poolSize": {
                        "type": "integer"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "connectionUri",
                    "poolName",
                    "project",
                    "serviceName",
                    "id"
                ]
            }
        },
        "aiven:index/getDatabase:getDatabase": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mydatabase = aiven.getDatabase({\n    project: data.aiven_service.myservice.project,\n    serviceName: data.aiven_service.myservice.service_name,\n    databaseName: \"\u003cDATABASE_NAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmydatabase = aiven.get_database(project=data[\"aiven..Service\"][\"myservice\"][\"project\"],\n    service_name=data[\"aiven..Service\"][\"myservice\"][\"service_name\"],\n    database_name=\"\u003cDATABASE_NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mydatabase = Output.Create(Aiven.GetDatabase.InvokeAsync(new Aiven.GetDatabaseArgs\n        {\n            Project = data.Aiven_service.Myservice.Project,\n            ServiceName = data.Aiven_service.Myservice.Service_name,\n            DatabaseName = \"\u003cDATABASE_NAME\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "databaseName": {
                        "type": "string"
                    },
                    "lcCollate": {
                        "type": "string"
                    },
                    "lcCtype": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "terminationProtection": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "project",
                    "serviceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "databaseName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lcCollate": {
                        "type": "string"
                    },
                    "lcCtype": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "terminationProtection": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "project",
                    "serviceName",
                    "id"
                ]
            }
        },
        "aiven:index/getElasticSearchAcl:getElasticSearchAcl": {
            "inputs": {
                "description": "A collection of arguments for invoking getElasticSearchAcl.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/getElasticSearchAclAcl:getElasticSearchAclAcl"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "extendedAcl": {
                        "type": "boolean"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getElasticSearchAcl.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/getElasticSearchAclAcl:getElasticSearchAclAcl"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "extendedAcl": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName",
                    "id"
                ]
            }
        },
        "aiven:index/getKafkaAcl:getKafkaAcl": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mytestacl = aiven.getKafkaAcl({\n    project: data.aiven_service.myservice.project,\n    serviceName: data.aiven_service.myservice.service_name,\n    topic: \"\u003cTOPIC_NAME_PATTERN\u003e\",\n    username: \"\u003cUSERNAME_PATTERN\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmytestacl = aiven.get_kafka_acl(project=data[\"aiven..Service\"][\"myservice\"][\"project\"],\n    service_name=data[\"aiven..Service\"][\"myservice\"][\"service_name\"],\n    topic=\"\u003cTOPIC_NAME_PATTERN\u003e\",\n    username=\"\u003cUSERNAME_PATTERN\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mytestacl = Output.Create(Aiven.GetKafkaAcl.InvokeAsync(new Aiven.GetKafkaAclArgs\n        {\n            Project = data.Aiven_service.Myservice.Project,\n            ServiceName = data.Aiven_service.Myservice.Service_name,\n            Topic = \"\u003cTOPIC_NAME_PATTERN\u003e\",\n            Username = \"\u003cUSERNAME_PATTERN\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaAcl.\n",
                "properties": {
                    "permission": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "topic": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "permission",
                    "project",
                    "serviceName",
                    "topic",
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaAcl.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "permission": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "topic": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "permission",
                    "project",
                    "serviceName",
                    "topic",
                    "username",
                    "id"
                ]
            }
        },
        "aiven:index/getKafkaConnector:getKafkaConnector": {
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaConnector.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "connectorName": {
                        "type": "string"
                    },
                    "pluginAuthor": {
                        "type": "string"
                    },
                    "pluginClass": {
                        "type": "string"
                    },
                    "pluginDocUrl": {
                        "type": "string"
                    },
                    "pluginTitle": {
                        "type": "string"
                    },
                    "pluginType": {
                        "type": "string"
                    },
                    "pluginVersion": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/getKafkaConnectorTask:getKafkaConnectorTask"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "connectorName",
                    "project",
                    "serviceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaConnector.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "connectorName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "pluginAuthor": {
                        "type": "string"
                    },
                    "pluginClass": {
                        "type": "string"
                    },
                    "pluginDocUrl": {
                        "type": "string"
                    },
                    "pluginTitle": {
                        "type": "string"
                    },
                    "pluginType": {
                        "type": "string"
                    },
                    "pluginVersion": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/getKafkaConnectorTask:getKafkaConnectorTask"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "connectorName",
                    "pluginAuthor",
                    "pluginClass",
                    "pluginDocUrl",
                    "pluginTitle",
                    "pluginType",
                    "pluginVersion",
                    "project",
                    "serviceName",
                    "tasks",
                    "id"
                ]
            }
        },
        "aiven:index/getKafkaSchema:getKafkaSchema": {
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaSchema.\n",
                "properties": {
                    "project": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "subjectName": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName",
                    "subjectName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaSchema.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "project": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "subjectName": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName",
                    "subjectName",
                    "version",
                    "id"
                ]
            }
        },
        "aiven:index/getKafkaSchemaConfiguration:getKafkaSchemaConfiguration": {
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaSchemaConfiguration.\n",
                "properties": {
                    "project": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "subjectName": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaSchemaConfiguration.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "project": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "subjectName": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName",
                    "version",
                    "id"
                ]
            }
        },
        "aiven:index/getKafkaTopic:getKafkaTopic": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mytesttopic = aiven.getKafkaTopic({\n    project: data.aiven_service.myservice.project,\n    serviceName: data.aiven_service.myservice.service_name,\n    topicName: \"\u003cTOPIC_NAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmytesttopic = aiven.get_kafka_topic(project=data[\"aiven..Service\"][\"myservice\"][\"project\"],\n    service_name=data[\"aiven..Service\"][\"myservice\"][\"service_name\"],\n    topic_name=\"\u003cTOPIC_NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mytesttopic = Output.Create(Aiven.GetKafkaTopic.InvokeAsync(new Aiven.GetKafkaTopicArgs\n        {\n            Project = data.Aiven_service.Myservice.Project,\n            ServiceName = data.Aiven_service.Myservice.Service_name,\n            TopicName = \"\u003cTOPIC_NAME\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaTopic.\n",
                "properties": {
                    "cleanupPolicy": {
                        "type": "string"
                    },
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/getKafkaTopicClientTimeout:getKafkaTopicClientTimeout"
                    },
                    "minimumInSyncReplicas": {
                        "type": "integer"
                    },
                    "partitions": {
                        "type": "integer"
                    },
                    "project": {
                        "type": "string"
                    },
                    "replication": {
                        "type": "integer"
                    },
                    "retentionBytes": {
                        "type": "integer"
                    },
                    "retentionHours": {
                        "type": "integer"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "terminationProtection": {
                        "type": "boolean"
                    },
                    "topicName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName",
                    "topicName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaTopic.\n",
                "properties": {
                    "cleanupPolicy": {
                        "type": "string"
                    },
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/getKafkaTopicClientTimeout:getKafkaTopicClientTimeout"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "minimumInSyncReplicas": {
                        "type": "integer"
                    },
                    "partitions": {
                        "type": "integer"
                    },
                    "project": {
                        "type": "string"
                    },
                    "replication": {
                        "type": "integer"
                    },
                    "retentionBytes": {
                        "type": "integer"
                    },
                    "retentionHours": {
                        "type": "integer"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "terminationProtection": {
                        "type": "boolean"
                    },
                    "topicName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName",
                    "topicName",
                    "id"
                ]
            }
        },
        "aiven:index/getMirrorMakerReplicationFlow:getMirrorMakerReplicationFlow": {
            "inputs": {
                "description": "A collection of arguments for invoking getMirrorMakerReplicationFlow.\n",
                "properties": {
                    "enable": {
                        "type": "boolean"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "sourceCluster": {
                        "type": "string"
                    },
                    "targetCluster": {
                        "type": "string"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "topicsBlacklists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName",
                    "sourceCluster",
                    "targetCluster"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMirrorMakerReplicationFlow.\n",
                "properties": {
                    "enable": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "sourceCluster": {
                        "type": "string"
                    },
                    "targetCluster": {
                        "type": "string"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "topicsBlacklists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName",
                    "sourceCluster",
                    "targetCluster",
                    "id"
                ]
            }
        },
        "aiven:index/getProject:getProject": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myproject = pulumi.output(aiven.getProject({\n    project: \"\u003cPROJECT_NAME\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyproject = aiven.get_project(project=\"\u003cPROJECT_NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myproject = Output.Create(Aiven.GetProject.InvokeAsync(new Aiven.GetProjectArgs\n        {\n            Project = \"\u003cPROJECT_NAME\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "billingAddress": {
                        "type": "string"
                    },
                    "billingEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "caCert": {
                        "type": "string"
                    },
                    "cardId": {
                        "type": "string"
                    },
                    "copyFromProject": {
                        "type": "string"
                    },
                    "countryCode": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "technicalEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "billingAddress": {
                        "type": "string"
                    },
                    "billingEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "caCert": {
                        "type": "string"
                    },
                    "cardId": {
                        "type": "string"
                    },
                    "copyFromProject": {
                        "type": "string"
                    },
                    "countryCode": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "project": {
                        "type": "string"
                    },
                    "technicalEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "caCert",
                    "project",
                    "id"
                ]
            }
        },
        "aiven:index/getProjectUser:getProjectUser": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mytestuser = aiven.getProjectUser({\n    project: data.aiven_project.myproject.project,\n    email: \"john.doe@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmytestuser = aiven.get_project_user(project=data[\"aiven..Project\"][\"myproject\"][\"project\"],\n    email=\"john.doe@example.com\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mytestuser = Output.Create(Aiven.GetProjectUser.InvokeAsync(new Aiven.GetProjectUserArgs\n        {\n            Project = data.Aiven_project.Myproject.Project,\n            Email = \"john.doe@example.com\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectUser.\n",
                "properties": {
                    "accepted": {
                        "type": "boolean"
                    },
                    "email": {
                        "type": "string"
                    },
                    "memberType": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectUser.\n",
                "properties": {
                    "accepted": {
                        "type": "boolean"
                    },
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "memberType": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accepted",
                    "email",
                    "project",
                    "id"
                ]
            }
        },
        "aiven:index/getProjectVpc:getProjectVpc": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myvpc = aiven.getProjectVpc({\n    project: data.aiven_project.myproject.project,\n    cloudName: \"google-europe-west1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyvpc = aiven.get_project_vpc(project=data[\"aiven..Project\"][\"myproject\"][\"project\"],\n    cloud_name=\"google-europe-west1\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myvpc = Output.Create(Aiven.GetProjectVpc.InvokeAsync(new Aiven.GetProjectVpcArgs\n        {\n            Project = data.Aiven_project.Myproject.Project,\n            CloudName = \"google-europe-west1\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectVpc.\n",
                "properties": {
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/getProjectVpcClientTimeout:getProjectVpcClientTimeout"
                    },
                    "cloudName": {
                        "type": "string"
                    },
                    "networkCidr": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloudName",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectVpc.\n",
                "properties": {
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/getProjectVpcClientTimeout:getProjectVpcClientTimeout"
                    },
                    "cloudName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "networkCidr": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloudName",
                    "project",
                    "state",
                    "id"
                ]
            }
        },
        "aiven:index/getService:getService": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myservice = aiven.getService({\n    project: data.aiven_project.myproject.project,\n    serviceName: \"\u003cSERVICE_NAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyservice = aiven.get_service(project=data[\"aiven..Project\"][\"myproject\"][\"project\"],\n    service_name=\"\u003cSERVICE_NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myservice = Output.Create(Aiven.GetService.InvokeAsync(new Aiven.GetServiceArgs\n        {\n            Project = data.Aiven_project.Myproject.Project,\n            ServiceName = \"\u003cSERVICE_NAME\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "cassandra": {
                        "$ref": "#/types/aiven:/getServiceCassandra:getServiceCassandra"
                    },
                    "cassandraUserConfig": {
                        "$ref": "#/types/aiven:/getServiceCassandraUserConfig:getServiceCassandraUserConfig"
                    },
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/getServiceClientTimeout:getServiceClientTimeout"
                    },
                    "cloudName": {
                        "type": "string"
                    },
                    "components": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/getServiceComponent:getServiceComponent"
                        }
                    },
                    "elasticsearch": {
                        "$ref": "#/types/aiven:/getServiceElasticsearch:getServiceElasticsearch"
                    },
                    "elasticsearchUserConfig": {
                        "$ref": "#/types/aiven:/getServiceElasticsearchUserConfig:getServiceElasticsearchUserConfig"
                    },
                    "grafana": {
                        "$ref": "#/types/aiven:/getServiceGrafana:getServiceGrafana"
                    },
                    "grafanaUserConfig": {
                        "$ref": "#/types/aiven:/getServiceGrafanaUserConfig:getServiceGrafanaUserConfig"
                    },
                    "influxdb": {
                        "$ref": "#/types/aiven:/getServiceInfluxdb:getServiceInfluxdb"
                    },
                    "influxdbUserConfig": {
                        "$ref": "#/types/aiven:/getServiceInfluxdbUserConfig:getServiceInfluxdbUserConfig"
                    },
                    "kafka": {
                        "$ref": "#/types/aiven:/getServiceKafka:getServiceKafka"
                    },
                    "kafkaConnect": {
                        "$ref": "#/types/aiven:/getServiceKafkaConnect:getServiceKafkaConnect"
                    },
                    "kafkaConnectUserConfig": {
                        "$ref": "#/types/aiven:/getServiceKafkaConnectUserConfig:getServiceKafkaConnectUserConfig"
                    },
                    "kafkaMirrormaker": {
                        "$ref": "#/types/aiven:/getServiceKafkaMirrormaker:getServiceKafkaMirrormaker"
                    },
                    "kafkaMirrormakerUserConfig": {
                        "$ref": "#/types/aiven:/getServiceKafkaMirrormakerUserConfig:getServiceKafkaMirrormakerUserConfig"
                    },
                    "kafkaUserConfig": {
                        "$ref": "#/types/aiven:/getServiceKafkaUserConfig:getServiceKafkaUserConfig"
                    },
                    "maintenanceWindowDow": {
                        "type": "string"
                    },
                    "maintenanceWindowTime": {
                        "type": "string"
                    },
                    "mysql": {
                        "$ref": "#/types/aiven:/getServiceMysql:getServiceMysql"
                    },
                    "mysqlUserConfig": {
                        "$ref": "#/types/aiven:/getServiceMysqlUserConfig:getServiceMysqlUserConfig"
                    },
                    "pg": {
                        "$ref": "#/types/aiven:/getServicePg:getServicePg"
                    },
                    "pgUserConfig": {
                        "$ref": "#/types/aiven:/getServicePgUserConfig:getServicePgUserConfig"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "projectVpcId": {
                        "type": "string"
                    },
                    "redis": {
                        "$ref": "#/types/aiven:/getServiceRedis:getServiceRedis"
                    },
                    "redisUserConfig": {
                        "$ref": "#/types/aiven:/getServiceRedisUserConfig:getServiceRedisUserConfig"
                    },
                    "serviceHost": {
                        "type": "string"
                    },
                    "serviceIntegrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/getServiceServiceIntegration:getServiceServiceIntegration"
                        }
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "servicePassword": {
                        "type": "string"
                    },
                    "servicePort": {
                        "type": "integer"
                    },
                    "serviceType": {
                        "type": "string"
                    },
                    "serviceUri": {
                        "type": "string"
                    },
                    "serviceUsername": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "terminationProtection": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "cassandra": {
                        "$ref": "#/types/aiven:/getServiceCassandra:getServiceCassandra"
                    },
                    "cassandraUserConfig": {
                        "$ref": "#/types/aiven:/getServiceCassandraUserConfig:getServiceCassandraUserConfig"
                    },
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/getServiceClientTimeout:getServiceClientTimeout"
                    },
                    "cloudName": {
                        "type": "string"
                    },
                    "components": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/getServiceComponent:getServiceComponent"
                        }
                    },
                    "elasticsearch": {
                        "$ref": "#/types/aiven:/getServiceElasticsearch:getServiceElasticsearch"
                    },
                    "elasticsearchUserConfig": {
                        "$ref": "#/types/aiven:/getServiceElasticsearchUserConfig:getServiceElasticsearchUserConfig"
                    },
                    "grafana": {
                        "$ref": "#/types/aiven:/getServiceGrafana:getServiceGrafana"
                    },
                    "grafanaUserConfig": {
                        "$ref": "#/types/aiven:/getServiceGrafanaUserConfig:getServiceGrafanaUserConfig"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "influxdb": {
                        "$ref": "#/types/aiven:/getServiceInfluxdb:getServiceInfluxdb"
                    },
                    "influxdbUserConfig": {
                        "$ref": "#/types/aiven:/getServiceInfluxdbUserConfig:getServiceInfluxdbUserConfig"
                    },
                    "kafka": {
                        "$ref": "#/types/aiven:/getServiceKafka:getServiceKafka"
                    },
                    "kafkaConnect": {
                        "$ref": "#/types/aiven:/getServiceKafkaConnect:getServiceKafkaConnect"
                    },
                    "kafkaConnectUserConfig": {
                        "$ref": "#/types/aiven:/getServiceKafkaConnectUserConfig:getServiceKafkaConnectUserConfig"
                    },
                    "kafkaMirrormaker": {
                        "$ref": "#/types/aiven:/getServiceKafkaMirrormaker:getServiceKafkaMirrormaker"
                    },
                    "kafkaMirrormakerUserConfig": {
                        "$ref": "#/types/aiven:/getServiceKafkaMirrormakerUserConfig:getServiceKafkaMirrormakerUserConfig"
                    },
                    "kafkaUserConfig": {
                        "$ref": "#/types/aiven:/getServiceKafkaUserConfig:getServiceKafkaUserConfig"
                    },
                    "maintenanceWindowDow": {
                        "type": "string"
                    },
                    "maintenanceWindowTime": {
                        "type": "string"
                    },
                    "mysql": {
                        "$ref": "#/types/aiven:/getServiceMysql:getServiceMysql"
                    },
                    "mysqlUserConfig": {
                        "$ref": "#/types/aiven:/getServiceMysqlUserConfig:getServiceMysqlUserConfig"
                    },
                    "pg": {
                        "$ref": "#/types/aiven:/getServicePg:getServicePg"
                    },
                    "pgUserConfig": {
                        "$ref": "#/types/aiven:/getServicePgUserConfig:getServicePgUserConfig"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "projectVpcId": {
                        "type": "string"
                    },
                    "redis": {
                        "$ref": "#/types/aiven:/getServiceRedis:getServiceRedis"
                    },
                    "redisUserConfig": {
                        "$ref": "#/types/aiven:/getServiceRedisUserConfig:getServiceRedisUserConfig"
                    },
                    "serviceHost": {
                        "type": "string"
                    },
                    "serviceIntegrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aiven:/getServiceServiceIntegration:getServiceServiceIntegration"
                        }
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "servicePassword": {
                        "type": "string"
                    },
                    "servicePort": {
                        "type": "integer"
                    },
                    "serviceType": {
                        "type": "string"
                    },
                    "serviceUri": {
                        "type": "string"
                    },
                    "serviceUsername": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "terminationProtection": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "cassandra",
                    "components",
                    "elasticsearch",
                    "grafana",
                    "influxdb",
                    "kafka",
                    "kafkaConnect",
                    "kafkaMirrormaker",
                    "mysql",
                    "pg",
                    "project",
                    "redis",
                    "serviceHost",
                    "serviceName",
                    "servicePassword",
                    "servicePort",
                    "serviceUri",
                    "serviceUsername",
                    "state",
                    "id"
                ]
            }
        },
        "aiven:index/getServiceIntegration:getServiceIntegration": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceIntegration.\n",
                "properties": {
                    "destinationEndpointId": {
                        "type": "string"
                    },
                    "destinationServiceName": {
                        "type": "string"
                    },
                    "integrationType": {
                        "type": "string"
                    },
                    "kafkaConnectUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationKafkaConnectUserConfig:getServiceIntegrationKafkaConnectUserConfig"
                    },
                    "kafkaMirrormakerUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationKafkaMirrormakerUserConfig:getServiceIntegrationKafkaMirrormakerUserConfig"
                    },
                    "logsUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationLogsUserConfig:getServiceIntegrationLogsUserConfig"
                    },
                    "mirrormakerUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationMirrormakerUserConfig:getServiceIntegrationMirrormakerUserConfig"
                    },
                    "project": {
                        "type": "string"
                    },
                    "sourceEndpointId": {
                        "type": "string"
                    },
                    "sourceServiceName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationServiceName",
                    "integrationType",
                    "project",
                    "sourceServiceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceIntegration.\n",
                "properties": {
                    "destinationEndpointId": {
                        "type": "string"
                    },
                    "destinationServiceName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationType": {
                        "type": "string"
                    },
                    "kafkaConnectUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationKafkaConnectUserConfig:getServiceIntegrationKafkaConnectUserConfig"
                    },
                    "kafkaMirrormakerUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationKafkaMirrormakerUserConfig:getServiceIntegrationKafkaMirrormakerUserConfig"
                    },
                    "logsUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationLogsUserConfig:getServiceIntegrationLogsUserConfig"
                    },
                    "mirrormakerUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationMirrormakerUserConfig:getServiceIntegrationMirrormakerUserConfig"
                    },
                    "project": {
                        "type": "string"
                    },
                    "sourceEndpointId": {
                        "type": "string"
                    },
                    "sourceServiceName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationServiceName",
                    "integrationType",
                    "project",
                    "sourceServiceName",
                    "id"
                ]
            }
        },
        "aiven:index/getServiceIntegrationEndpoint:getServiceIntegrationEndpoint": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myendpoint = aiven.getServiceIntegrationEndpoint({\n    project: data.aiven_project.myproject.project,\n    endpointName: \"\u003cENDPOINT_NAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyendpoint = aiven.get_service_integration_endpoint(project=data[\"aiven..Project\"][\"myproject\"][\"project\"],\n    endpoint_name=\"\u003cENDPOINT_NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myendpoint = Output.Create(Aiven.GetServiceIntegrationEndpoint.InvokeAsync(new Aiven.GetServiceIntegrationEndpointArgs\n        {\n            Project = data.Aiven_project.Myproject.Project,\n            EndpointName = \"\u003cENDPOINT_NAME\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceIntegrationEndpoint.\n",
                "properties": {
                    "datadogUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationEndpointDatadogUserConfig:getServiceIntegrationEndpointDatadogUserConfig"
                    },
                    "endpointConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "endpointName": {
                        "type": "string"
                    },
                    "endpointType": {
                        "type": "string"
                    },
                    "externalElasticsearchLogsUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationEndpointExternalElasticsearchLogsUserConfig:getServiceIntegrationEndpointExternalElasticsearchLogsUserConfig"
                    },
                    "project": {
                        "type": "string"
                    },
                    "prometheusUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationEndpointPrometheusUserConfig:getServiceIntegrationEndpointPrometheusUserConfig"
                    },
                    "rsyslogUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationEndpointRsyslogUserConfig:getServiceIntegrationEndpointRsyslogUserConfig"
                    }
                },
                "type": "object",
                "required": [
                    "endpointName",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceIntegrationEndpoint.\n",
                "properties": {
                    "datadogUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationEndpointDatadogUserConfig:getServiceIntegrationEndpointDatadogUserConfig"
                    },
                    "endpointConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "endpointName": {
                        "type": "string"
                    },
                    "endpointType": {
                        "type": "string"
                    },
                    "externalElasticsearchLogsUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationEndpointExternalElasticsearchLogsUserConfig:getServiceIntegrationEndpointExternalElasticsearchLogsUserConfig"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "project": {
                        "type": "string"
                    },
                    "prometheusUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationEndpointPrometheusUserConfig:getServiceIntegrationEndpointPrometheusUserConfig"
                    },
                    "rsyslogUserConfig": {
                        "$ref": "#/types/aiven:/getServiceIntegrationEndpointRsyslogUserConfig:getServiceIntegrationEndpointRsyslogUserConfig"
                    }
                },
                "type": "object",
                "required": [
                    "endpointConfig",
                    "endpointName",
                    "project",
                    "id"
                ]
            }
        },
        "aiven:index/getServiceUser:getServiceUser": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst myserviceuser = aiven.getServiceUser({\n    project: data.aiven_service.myservice.project,\n    serviceName: data.aiven_service.myservice.service_name,\n    username: \"\u003cUSERNAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmyserviceuser = aiven.get_service_user(project=data[\"aiven..Service\"][\"myservice\"][\"project\"],\n    service_name=data[\"aiven..Service\"][\"myservice\"][\"service_name\"],\n    username=\"\u003cUSERNAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myserviceuser = Output.Create(Aiven.GetServiceUser.InvokeAsync(new Aiven.GetServiceUserArgs\n        {\n            Project = data.Aiven_service.Myservice.Project,\n            ServiceName = data.Aiven_service.Myservice.Service_name,\n            Username = \"\u003cUSERNAME\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceUser.\n",
                "properties": {
                    "accessCert": {
                        "type": "string"
                    },
                    "accessKey": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "serviceName",
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceUser.\n",
                "properties": {
                    "accessCert": {
                        "type": "string"
                    },
                    "accessKey": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "password": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accessCert",
                    "accessKey",
                    "password",
                    "project",
                    "serviceName",
                    "type",
                    "username",
                    "id"
                ]
            }
        },
        "aiven:index/getVpcPeeringConnection:getVpcPeeringConnection": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aiven from \"@pulumi/aiven\";\n\nconst mypeeringconnection = aiven.getVpcPeeringConnection({\n    vpcId: data.aiven_project_vpc.vpc_id,\n    peerCloudAccount: \"\u003cPEER_ACCOUNT_ID\u003e\",\n    peerVpc: \"\u003cPEER_VPC_ID/NAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aiven as aiven\n\nmypeeringconnection = aiven.get_vpc_peering_connection(vpc_id=data[\"aiven..ProjectVpc\"][\"vpc_id\"],\n    peer_cloud_account=\"\u003cPEER_ACCOUNT_ID\u003e\",\n    peer_vpc=\"\u003cPEER_VPC_ID/NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Aiven = Pulumi.Aiven;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mypeeringconnection = Output.Create(Aiven.GetVpcPeeringConnection.InvokeAsync(new Aiven.GetVpcPeeringConnectionArgs\n        {\n            VpcId = data.Aiven_project_vpc.Vpc_id,\n            PeerCloudAccount = \"\u003cPEER_ACCOUNT_ID\u003e\",\n            PeerVpc = \"\u003cPEER_VPC_ID/NAME\u003e\",\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPeeringConnection.\n",
                "properties": {
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/getVpcPeeringConnectionClientTimeout:getVpcPeeringConnectionClientTimeout"
                    },
                    "peerCloudAccount": {
                        "type": "string"
                    },
                    "peerRegion": {
                        "type": "string"
                    },
                    "peerVpc": {
                        "type": "string"
                    },
                    "peeringConnectionId": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "stateInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "peerCloudAccount",
                    "peerVpc",
                    "vpcId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPeeringConnection.\n",
                "properties": {
                    "clientTimeout": {
                        "$ref": "#/types/aiven:/getVpcPeeringConnectionClientTimeout:getVpcPeeringConnectionClientTimeout"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "peerCloudAccount": {
                        "type": "string"
                    },
                    "peerRegion": {
                        "type": "string"
                    },
                    "peerVpc": {
                        "type": "string"
                    },
                    "peeringConnectionId": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "stateInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "peerCloudAccount",
                    "peerVpc",
                    "peeringConnectionId",
                    "state",
                    "stateInfo",
                    "vpcId",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "aiven": "Aiven"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Aiven cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/aiven/terraform-provider-aiven)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-aiven` repo](https://github.com/pulumi/pulumi-aiven/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`aiven/terraform-provider-aiven` repo](https://github.com/aiven/terraform-provider-aiven/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}