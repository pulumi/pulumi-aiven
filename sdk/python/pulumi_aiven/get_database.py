# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'GetDatabaseResult',
    'AwaitableGetDatabaseResult',
    'get_database',
]

@pulumi.output_type
class GetDatabaseResult:
    """
    A collection of values returned by getDatabase.
    """
    def __init__(__self__, database_name=None, id=None, lc_collate=None, lc_ctype=None, project=None, service_name=None, termination_protection=None):
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lc_collate and not isinstance(lc_collate, str):
            raise TypeError("Expected argument 'lc_collate' to be a str")
        pulumi.set(__self__, "lc_collate", lc_collate)
        if lc_ctype and not isinstance(lc_ctype, str):
            raise TypeError("Expected argument 'lc_ctype' to be a str")
        pulumi.set(__self__, "lc_ctype", lc_ctype)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if termination_protection and not isinstance(termination_protection, bool):
            raise TypeError("Expected argument 'termination_protection' to be a bool")
        pulumi.set(__self__, "termination_protection", termination_protection)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> Optional[str]:
        """
        default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
        """
        return pulumi.get(self, "lc_collate")

    @property
    @pulumi.getter(name="lcCtype")
    def lc_ctype(self) -> Optional[str]:
        """
        default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
        """
        return pulumi.get(self, "lc_ctype")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[bool]:
        return pulumi.get(self, "termination_protection")


class AwaitableGetDatabaseResult(GetDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseResult(
            database_name=self.database_name,
            id=self.id,
            lc_collate=self.lc_collate,
            lc_ctype=self.lc_ctype,
            project=self.project,
            service_name=self.service_name,
            termination_protection=self.termination_protection)


def get_database(database_name: Optional[str] = None,
                 lc_collate: Optional[str] = None,
                 lc_ctype: Optional[str] = None,
                 project: Optional[str] = None,
                 service_name: Optional[str] = None,
                 termination_protection: Optional[bool] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseResult:
    """
    ## # Database Data Source

    The Database data source provides information about the existing Aiven Database.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aiven as aiven

    mydatabase = aiven.get_database(database_name="<DATABASE_NAME>",
        project=aiven_project["myproject"]["project"],
        service_name=aiven_service["myservice"]["service_name"])
    ```


    :param str database_name: is the actual name of the database.
    :param str lc_collate: default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
    :param str lc_ctype: default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
    :param str project: and `service_name` - (Required) define the project and service the database belongs to.
           They should be defined using reference as shown above to set up dependencies correctly.
    """
    __args__ = dict()
    __args__['databaseName'] = database_name
    __args__['lcCollate'] = lc_collate
    __args__['lcCtype'] = lc_ctype
    __args__['project'] = project
    __args__['serviceName'] = service_name
    __args__['terminationProtection'] = termination_protection
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getDatabase:getDatabase', __args__, opts=opts, typ=GetDatabaseResult).value

    return AwaitableGetDatabaseResult(
        database_name=__ret__.database_name,
        id=__ret__.id,
        lc_collate=__ret__.lc_collate,
        lc_ctype=__ret__.lc_ctype,
        project=__ret__.project,
        service_name=__ret__.service_name,
        termination_protection=__ret__.termination_protection)
