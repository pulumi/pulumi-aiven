# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAzureOrgVpcPeeringConnectionResult',
    'AwaitableGetAzureOrgVpcPeeringConnectionResult',
    'get_azure_org_vpc_peering_connection',
    'get_azure_org_vpc_peering_connection_output',
]

@pulumi.output_type
class GetAzureOrgVpcPeeringConnectionResult:
    """
    A collection of values returned by getAzureOrgVpcPeeringConnection.
    """
    def __init__(__self__, azure_subscription_id=None, id=None, organization_id=None, organization_vpc_id=None, peer_azure_app_id=None, peer_azure_tenant_id=None, peer_resource_group=None, peering_connection_id=None, state=None, vnet_name=None):
        if azure_subscription_id and not isinstance(azure_subscription_id, str):
            raise TypeError("Expected argument 'azure_subscription_id' to be a str")
        pulumi.set(__self__, "azure_subscription_id", azure_subscription_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if organization_vpc_id and not isinstance(organization_vpc_id, str):
            raise TypeError("Expected argument 'organization_vpc_id' to be a str")
        pulumi.set(__self__, "organization_vpc_id", organization_vpc_id)
        if peer_azure_app_id and not isinstance(peer_azure_app_id, str):
            raise TypeError("Expected argument 'peer_azure_app_id' to be a str")
        pulumi.set(__self__, "peer_azure_app_id", peer_azure_app_id)
        if peer_azure_tenant_id and not isinstance(peer_azure_tenant_id, str):
            raise TypeError("Expected argument 'peer_azure_tenant_id' to be a str")
        pulumi.set(__self__, "peer_azure_tenant_id", peer_azure_tenant_id)
        if peer_resource_group and not isinstance(peer_resource_group, str):
            raise TypeError("Expected argument 'peer_resource_group' to be a str")
        pulumi.set(__self__, "peer_resource_group", peer_resource_group)
        if peering_connection_id and not isinstance(peering_connection_id, str):
            raise TypeError("Expected argument 'peering_connection_id' to be a str")
        pulumi.set(__self__, "peering_connection_id", peering_connection_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if vnet_name and not isinstance(vnet_name, str):
            raise TypeError("Expected argument 'vnet_name' to be a str")
        pulumi.set(__self__, "vnet_name", vnet_name)

    @property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> str:
        """
        The ID of the Azure subscription in UUID4 format. Changing this property forces recreation of the resource.
        """
        return pulumi.get(self, "azure_subscription_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="organizationVpcId")
    def organization_vpc_id(self) -> str:
        """
        Identifier of the organization VPC.
        """
        return pulumi.get(self, "organization_vpc_id")

    @property
    @pulumi.getter(name="peerAzureAppId")
    def peer_azure_app_id(self) -> str:
        """
        The ID of the Azure app that is allowed to create a peering to the Azure Virtual Network (VNet) in UUID4 format. Changing this property forces recreation of the resource.
        """
        return pulumi.get(self, "peer_azure_app_id")

    @property
    @pulumi.getter(name="peerAzureTenantId")
    def peer_azure_tenant_id(self) -> str:
        """
        The Azure tenant ID in UUID4 format. Changing this property forces recreation of the resource.
        """
        return pulumi.get(self, "peer_azure_tenant_id")

    @property
    @pulumi.getter(name="peerResourceGroup")
    def peer_resource_group(self) -> str:
        """
        The name of the Azure resource group associated with the VNet. Changing this property forces recreation of the resource.
        """
        return pulumi.get(self, "peer_resource_group")

    @property
    @pulumi.getter(name="peeringConnectionId")
    def peering_connection_id(self) -> str:
        """
        The ID of the cloud provider for the peering connection.
        """
        return pulumi.get(self, "peering_connection_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the peering connection
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vnetName")
    def vnet_name(self) -> str:
        """
        The name of the Azure VNet. Changing this property forces recreation of the resource.
        """
        return pulumi.get(self, "vnet_name")


class AwaitableGetAzureOrgVpcPeeringConnectionResult(GetAzureOrgVpcPeeringConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAzureOrgVpcPeeringConnectionResult(
            azure_subscription_id=self.azure_subscription_id,
            id=self.id,
            organization_id=self.organization_id,
            organization_vpc_id=self.organization_vpc_id,
            peer_azure_app_id=self.peer_azure_app_id,
            peer_azure_tenant_id=self.peer_azure_tenant_id,
            peer_resource_group=self.peer_resource_group,
            peering_connection_id=self.peering_connection_id,
            state=self.state,
            vnet_name=self.vnet_name)


def get_azure_org_vpc_peering_connection(azure_subscription_id: Optional[str] = None,
                                         organization_id: Optional[str] = None,
                                         organization_vpc_id: Optional[str] = None,
                                         peer_resource_group: Optional[str] = None,
                                         vnet_name: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAzureOrgVpcPeeringConnectionResult:
    """
    Gets information about about an Azure VPC peering connection.

    **This resource is in the beta stage and may change without notice.** Set
    the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.


    :param str azure_subscription_id: The ID of the Azure subscription in UUID4 format. Changing this property forces recreation of the resource.
    :param str organization_id: Identifier of the organization.
    :param str organization_vpc_id: Identifier of the organization VPC.
    :param str peer_resource_group: The name of the Azure resource group associated with the VNet. Changing this property forces recreation of the resource.
    :param str vnet_name: The name of the Azure VNet. Changing this property forces recreation of the resource.
    """
    __args__ = dict()
    __args__['azureSubscriptionId'] = azure_subscription_id
    __args__['organizationId'] = organization_id
    __args__['organizationVpcId'] = organization_vpc_id
    __args__['peerResourceGroup'] = peer_resource_group
    __args__['vnetName'] = vnet_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aiven:index/getAzureOrgVpcPeeringConnection:getAzureOrgVpcPeeringConnection', __args__, opts=opts, typ=GetAzureOrgVpcPeeringConnectionResult).value

    return AwaitableGetAzureOrgVpcPeeringConnectionResult(
        azure_subscription_id=pulumi.get(__ret__, 'azure_subscription_id'),
        id=pulumi.get(__ret__, 'id'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        organization_vpc_id=pulumi.get(__ret__, 'organization_vpc_id'),
        peer_azure_app_id=pulumi.get(__ret__, 'peer_azure_app_id'),
        peer_azure_tenant_id=pulumi.get(__ret__, 'peer_azure_tenant_id'),
        peer_resource_group=pulumi.get(__ret__, 'peer_resource_group'),
        peering_connection_id=pulumi.get(__ret__, 'peering_connection_id'),
        state=pulumi.get(__ret__, 'state'),
        vnet_name=pulumi.get(__ret__, 'vnet_name'))
def get_azure_org_vpc_peering_connection_output(azure_subscription_id: Optional[pulumi.Input[str]] = None,
                                                organization_id: Optional[pulumi.Input[str]] = None,
                                                organization_vpc_id: Optional[pulumi.Input[str]] = None,
                                                peer_resource_group: Optional[pulumi.Input[str]] = None,
                                                vnet_name: Optional[pulumi.Input[str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAzureOrgVpcPeeringConnectionResult]:
    """
    Gets information about about an Azure VPC peering connection.

    **This resource is in the beta stage and may change without notice.** Set
    the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.


    :param str azure_subscription_id: The ID of the Azure subscription in UUID4 format. Changing this property forces recreation of the resource.
    :param str organization_id: Identifier of the organization.
    :param str organization_vpc_id: Identifier of the organization VPC.
    :param str peer_resource_group: The name of the Azure resource group associated with the VNet. Changing this property forces recreation of the resource.
    :param str vnet_name: The name of the Azure VNet. Changing this property forces recreation of the resource.
    """
    __args__ = dict()
    __args__['azureSubscriptionId'] = azure_subscription_id
    __args__['organizationId'] = organization_id
    __args__['organizationVpcId'] = organization_vpc_id
    __args__['peerResourceGroup'] = peer_resource_group
    __args__['vnetName'] = vnet_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aiven:index/getAzureOrgVpcPeeringConnection:getAzureOrgVpcPeeringConnection', __args__, opts=opts, typ=GetAzureOrgVpcPeeringConnectionResult)
    return __ret__.apply(lambda __response__: GetAzureOrgVpcPeeringConnectionResult(
        azure_subscription_id=pulumi.get(__response__, 'azure_subscription_id'),
        id=pulumi.get(__response__, 'id'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        organization_vpc_id=pulumi.get(__response__, 'organization_vpc_id'),
        peer_azure_app_id=pulumi.get(__response__, 'peer_azure_app_id'),
        peer_azure_tenant_id=pulumi.get(__response__, 'peer_azure_tenant_id'),
        peer_resource_group=pulumi.get(__response__, 'peer_resource_group'),
        peering_connection_id=pulumi.get(__response__, 'peering_connection_id'),
        state=pulumi.get(__response__, 'state'),
        vnet_name=pulumi.get(__response__, 'vnet_name')))
