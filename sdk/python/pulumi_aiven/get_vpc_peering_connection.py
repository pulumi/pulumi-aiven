# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetVpcPeeringConnectionResult:
    """
    A collection of values returned by getVpcPeeringConnection.
    """
    def __init__(__self__, id=None, peer_cloud_account=None, peer_region=None, peer_vpc=None, peering_connection_id=None, state=None, state_info=None, vpc_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if peer_cloud_account and not isinstance(peer_cloud_account, str):
            raise TypeError("Expected argument 'peer_cloud_account' to be a str")
        __self__.peer_cloud_account = peer_cloud_account
        if peer_region and not isinstance(peer_region, str):
            raise TypeError("Expected argument 'peer_region' to be a str")
        __self__.peer_region = peer_region
        if peer_vpc and not isinstance(peer_vpc, str):
            raise TypeError("Expected argument 'peer_vpc' to be a str")
        __self__.peer_vpc = peer_vpc
        if peering_connection_id and not isinstance(peering_connection_id, str):
            raise TypeError("Expected argument 'peering_connection_id' to be a str")
        __self__.peering_connection_id = peering_connection_id
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        if state_info and not isinstance(state_info, dict):
            raise TypeError("Expected argument 'state_info' to be a dict")
        __self__.state_info = state_info
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        __self__.vpc_id = vpc_id
class AwaitableGetVpcPeeringConnectionResult(GetVpcPeeringConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpcPeeringConnectionResult(
            id=self.id,
            peer_cloud_account=self.peer_cloud_account,
            peer_region=self.peer_region,
            peer_vpc=self.peer_vpc,
            peering_connection_id=self.peering_connection_id,
            state=self.state,
            state_info=self.state_info,
            vpc_id=self.vpc_id)

def get_vpc_peering_connection(peer_cloud_account=None,peer_region=None,peer_vpc=None,peering_connection_id=None,state=None,state_info=None,vpc_id=None,opts=None):
    """
    ## Example Usage



    ```python
    import pulumi
    import pulumi_aiven as aiven

    mypeeringconnection = aiven.get_vpc_peering_connection(vpc_id=data[".ProjectVpc"]["vpc_id"],
        peer_cloud_account="<PEER_ACCOUNT_ID>",
        peer_vpc="<PEER_VPC_ID/NAME>")
    ```
    """
    __args__ = dict()


    __args__['peerCloudAccount'] = peer_cloud_account
    __args__['peerRegion'] = peer_region
    __args__['peerVpc'] = peer_vpc
    __args__['peeringConnectionId'] = peering_connection_id
    __args__['state'] = state
    __args__['stateInfo'] = state_info
    __args__['vpcId'] = vpc_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getVpcPeeringConnection:getVpcPeeringConnection', __args__, opts=opts).value

    return AwaitableGetVpcPeeringConnectionResult(
        id=__ret__.get('id'),
        peer_cloud_account=__ret__.get('peerCloudAccount'),
        peer_region=__ret__.get('peerRegion'),
        peer_vpc=__ret__.get('peerVpc'),
        peering_connection_id=__ret__.get('peeringConnectionId'),
        state=__ret__.get('state'),
        state_info=__ret__.get('stateInfo'),
        vpc_id=__ret__.get('vpcId'))
