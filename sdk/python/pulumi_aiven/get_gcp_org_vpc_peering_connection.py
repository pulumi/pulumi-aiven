# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetGcpOrgVpcPeeringConnectionResult',
    'AwaitableGetGcpOrgVpcPeeringConnectionResult',
    'get_gcp_org_vpc_peering_connection',
    'get_gcp_org_vpc_peering_connection_output',
]

@pulumi.output_type
class GetGcpOrgVpcPeeringConnectionResult:
    """
    A collection of values returned by getGcpOrgVpcPeeringConnection.
    """
    def __init__(__self__, gcp_project_id=None, id=None, organization_id=None, organization_vpc_id=None, peer_vpc=None, self_link=None, state=None):
        if gcp_project_id and not isinstance(gcp_project_id, str):
            raise TypeError("Expected argument 'gcp_project_id' to be a str")
        pulumi.set(__self__, "gcp_project_id", gcp_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if organization_vpc_id and not isinstance(organization_vpc_id, str):
            raise TypeError("Expected argument 'organization_vpc_id' to be a str")
        pulumi.set(__self__, "organization_vpc_id", organization_vpc_id)
        if peer_vpc and not isinstance(peer_vpc, str):
            raise TypeError("Expected argument 'peer_vpc' to be a str")
        pulumi.set(__self__, "peer_vpc", peer_vpc)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> str:
        """
        Google Cloud project ID. Changing this property forces recreation of the resource.
        """
        return pulumi.get(self, "gcp_project_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="organizationVpcId")
    def organization_vpc_id(self) -> str:
        """
        Identifier of the organization VPC.
        """
        return pulumi.get(self, "organization_vpc_id")

    @property
    @pulumi.getter(name="peerVpc")
    def peer_vpc(self) -> str:
        """
        Google Cloud VPC network name. Changing this property forces recreation of the resource.
        """
        return pulumi.get(self, "peer_vpc")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> str:
        """
        Computed Google Cloud network peering link.
        """
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the peering connection.
        """
        return pulumi.get(self, "state")


class AwaitableGetGcpOrgVpcPeeringConnectionResult(GetGcpOrgVpcPeeringConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGcpOrgVpcPeeringConnectionResult(
            gcp_project_id=self.gcp_project_id,
            id=self.id,
            organization_id=self.organization_id,
            organization_vpc_id=self.organization_vpc_id,
            peer_vpc=self.peer_vpc,
            self_link=self.self_link,
            state=self.state)


def get_gcp_org_vpc_peering_connection(gcp_project_id: Optional[str] = None,
                                       organization_id: Optional[str] = None,
                                       organization_vpc_id: Optional[str] = None,
                                       peer_vpc: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGcpOrgVpcPeeringConnectionResult:
    """
    The GCP VPC Peering Connection data source provides information about the existing Aiven VPC Peering Connection.

    **This resource is in the beta stage and may change without notice.** Set
    the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.


    :param str gcp_project_id: Google Cloud project ID. Changing this property forces recreation of the resource.
    :param str organization_id: Identifier of the organization.
    :param str organization_vpc_id: Identifier of the organization VPC.
    :param str peer_vpc: Google Cloud VPC network name. Changing this property forces recreation of the resource.
    """
    __args__ = dict()
    __args__['gcpProjectId'] = gcp_project_id
    __args__['organizationId'] = organization_id
    __args__['organizationVpcId'] = organization_vpc_id
    __args__['peerVpc'] = peer_vpc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aiven:index/getGcpOrgVpcPeeringConnection:getGcpOrgVpcPeeringConnection', __args__, opts=opts, typ=GetGcpOrgVpcPeeringConnectionResult).value

    return AwaitableGetGcpOrgVpcPeeringConnectionResult(
        gcp_project_id=pulumi.get(__ret__, 'gcp_project_id'),
        id=pulumi.get(__ret__, 'id'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        organization_vpc_id=pulumi.get(__ret__, 'organization_vpc_id'),
        peer_vpc=pulumi.get(__ret__, 'peer_vpc'),
        self_link=pulumi.get(__ret__, 'self_link'),
        state=pulumi.get(__ret__, 'state'))
def get_gcp_org_vpc_peering_connection_output(gcp_project_id: Optional[pulumi.Input[str]] = None,
                                              organization_id: Optional[pulumi.Input[str]] = None,
                                              organization_vpc_id: Optional[pulumi.Input[str]] = None,
                                              peer_vpc: Optional[pulumi.Input[str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGcpOrgVpcPeeringConnectionResult]:
    """
    The GCP VPC Peering Connection data source provides information about the existing Aiven VPC Peering Connection.

    **This resource is in the beta stage and may change without notice.** Set
    the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.


    :param str gcp_project_id: Google Cloud project ID. Changing this property forces recreation of the resource.
    :param str organization_id: Identifier of the organization.
    :param str organization_vpc_id: Identifier of the organization VPC.
    :param str peer_vpc: Google Cloud VPC network name. Changing this property forces recreation of the resource.
    """
    __args__ = dict()
    __args__['gcpProjectId'] = gcp_project_id
    __args__['organizationId'] = organization_id
    __args__['organizationVpcId'] = organization_vpc_id
    __args__['peerVpc'] = peer_vpc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aiven:index/getGcpOrgVpcPeeringConnection:getGcpOrgVpcPeeringConnection', __args__, opts=opts, typ=GetGcpOrgVpcPeeringConnectionResult)
    return __ret__.apply(lambda __response__: GetGcpOrgVpcPeeringConnectionResult(
        gcp_project_id=pulumi.get(__response__, 'gcp_project_id'),
        id=pulumi.get(__response__, 'id'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        organization_vpc_id=pulumi.get(__response__, 'organization_vpc_id'),
        peer_vpc=pulumi.get(__response__, 'peer_vpc'),
        self_link=pulumi.get(__response__, 'self_link'),
        state=pulumi.get(__response__, 'state')))
