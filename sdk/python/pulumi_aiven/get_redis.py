# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetRedisResult:
    """
    A collection of values returned by getRedis.
    """
    def __init__(__self__, cloud_name=None, components=None, id=None, maintenance_window_dow=None, maintenance_window_time=None, plan=None, project=None, project_vpc_id=None, redis=None, redis_user_config=None, service_host=None, service_integrations=None, service_name=None, service_password=None, service_port=None, service_type=None, service_uri=None, service_username=None, state=None, termination_protection=None):
        if cloud_name and not isinstance(cloud_name, str):
            raise TypeError("Expected argument 'cloud_name' to be a str")
        __self__.cloud_name = cloud_name
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        __self__.components = components
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if maintenance_window_dow and not isinstance(maintenance_window_dow, str):
            raise TypeError("Expected argument 'maintenance_window_dow' to be a str")
        __self__.maintenance_window_dow = maintenance_window_dow
        if maintenance_window_time and not isinstance(maintenance_window_time, str):
            raise TypeError("Expected argument 'maintenance_window_time' to be a str")
        __self__.maintenance_window_time = maintenance_window_time
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        __self__.plan = plan
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        __self__.project = project
        if project_vpc_id and not isinstance(project_vpc_id, str):
            raise TypeError("Expected argument 'project_vpc_id' to be a str")
        __self__.project_vpc_id = project_vpc_id
        if redis and not isinstance(redis, dict):
            raise TypeError("Expected argument 'redis' to be a dict")
        __self__.redis = redis
        if redis_user_config and not isinstance(redis_user_config, dict):
            raise TypeError("Expected argument 'redis_user_config' to be a dict")
        __self__.redis_user_config = redis_user_config
        if service_host and not isinstance(service_host, str):
            raise TypeError("Expected argument 'service_host' to be a str")
        __self__.service_host = service_host
        if service_integrations and not isinstance(service_integrations, list):
            raise TypeError("Expected argument 'service_integrations' to be a list")
        __self__.service_integrations = service_integrations
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        __self__.service_name = service_name
        if service_password and not isinstance(service_password, str):
            raise TypeError("Expected argument 'service_password' to be a str")
        __self__.service_password = service_password
        if service_port and not isinstance(service_port, float):
            raise TypeError("Expected argument 'service_port' to be a float")
        __self__.service_port = service_port
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        __self__.service_type = service_type
        if service_uri and not isinstance(service_uri, str):
            raise TypeError("Expected argument 'service_uri' to be a str")
        __self__.service_uri = service_uri
        if service_username and not isinstance(service_username, str):
            raise TypeError("Expected argument 'service_username' to be a str")
        __self__.service_username = service_username
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        if termination_protection and not isinstance(termination_protection, bool):
            raise TypeError("Expected argument 'termination_protection' to be a bool")
        __self__.termination_protection = termination_protection


class AwaitableGetRedisResult(GetRedisResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRedisResult(
            cloud_name=self.cloud_name,
            components=self.components,
            id=self.id,
            maintenance_window_dow=self.maintenance_window_dow,
            maintenance_window_time=self.maintenance_window_time,
            plan=self.plan,
            project=self.project,
            project_vpc_id=self.project_vpc_id,
            redis=self.redis,
            redis_user_config=self.redis_user_config,
            service_host=self.service_host,
            service_integrations=self.service_integrations,
            service_name=self.service_name,
            service_password=self.service_password,
            service_port=self.service_port,
            service_type=self.service_type,
            service_uri=self.service_uri,
            service_username=self.service_username,
            state=self.state,
            termination_protection=self.termination_protection)


def get_redis(cloud_name=None, components=None, maintenance_window_dow=None, maintenance_window_time=None, plan=None, project=None, project_vpc_id=None, redis=None, redis_user_config=None, service_host=None, service_integrations=None, service_name=None, service_password=None, service_port=None, service_type=None, service_uri=None, service_username=None, state=None, termination_protection=None, opts=None):
    """
    Use this data source to access information about an existing resource.


    The **components** object supports the following:

      * `component` (`str`)
      * `host` (`str`)
      * `kafkaAuthenticationMethod` (`str`)
      * `port` (`float`)
      * `route` (`str`)
      * `ssl` (`bool`)
      * `usage` (`str`)

    The **redis_user_config** object supports the following:

      * `ipFilters` (`list`)
      * `migration` (`dict`)
        * `host` (`str`)
        * `password` (`str`)
        * `port` (`str`)
        * `ssl` (`str`)
        * `username` (`str`)

      * `privateAccess` (`dict`)
        * `prometheus` (`str`)
        * `redis` (`str`)

      * `publicAccess` (`dict`)
        * `prometheus` (`str`)
        * `redis` (`str`)

      * `redisLfuDecayTime` (`str`)
      * `redisLfuLogFactor` (`str`)
      * `redisMaxmemoryPolicy` (`str`)
      * `redisNotifyKeyspaceEvents` (`str`)
      * `redisSsl` (`str`)
      * `redisTimeout` (`str`)

    The **service_integrations** object supports the following:

      * `integration_type` (`str`)
      * `source_service_name` (`str`)
    """
    __args__ = dict()
    __args__['cloudName'] = cloud_name
    __args__['components'] = components
    __args__['maintenanceWindowDow'] = maintenance_window_dow
    __args__['maintenanceWindowTime'] = maintenance_window_time
    __args__['plan'] = plan
    __args__['project'] = project
    __args__['projectVpcId'] = project_vpc_id
    __args__['redis'] = redis
    __args__['redisUserConfig'] = redis_user_config
    __args__['serviceHost'] = service_host
    __args__['serviceIntegrations'] = service_integrations
    __args__['serviceName'] = service_name
    __args__['servicePassword'] = service_password
    __args__['servicePort'] = service_port
    __args__['serviceType'] = service_type
    __args__['serviceUri'] = service_uri
    __args__['serviceUsername'] = service_username
    __args__['state'] = state
    __args__['terminationProtection'] = termination_protection
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getRedis:getRedis', __args__, opts=opts).value

    return AwaitableGetRedisResult(
        cloud_name=__ret__.get('cloudName'),
        components=__ret__.get('components'),
        id=__ret__.get('id'),
        maintenance_window_dow=__ret__.get('maintenanceWindowDow'),
        maintenance_window_time=__ret__.get('maintenanceWindowTime'),
        plan=__ret__.get('plan'),
        project=__ret__.get('project'),
        project_vpc_id=__ret__.get('projectVpcId'),
        redis=__ret__.get('redis'),
        redis_user_config=__ret__.get('redisUserConfig'),
        service_host=__ret__.get('serviceHost'),
        service_integrations=__ret__.get('serviceIntegrations'),
        service_name=__ret__.get('serviceName'),
        service_password=__ret__.get('servicePassword'),
        service_port=__ret__.get('servicePort'),
        service_type=__ret__.get('serviceType'),
        service_uri=__ret__.get('serviceUri'),
        service_username=__ret__.get('serviceUsername'),
        state=__ret__.get('state'),
        termination_protection=__ret__.get('terminationProtection'))
