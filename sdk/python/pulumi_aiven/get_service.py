# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = [
    'GetServiceResult',
    'AwaitableGetServiceResult',
    'get_service',
]

@pulumi.output_type
class GetServiceResult:
    """
    A collection of values returned by getService.
    """
    def __init__(__self__, cassandra=None, cassandra_user_config=None, cloud_name=None, components=None, elasticsearch=None, elasticsearch_user_config=None, grafana=None, grafana_user_config=None, id=None, influxdb=None, influxdb_user_config=None, kafka=None, kafka_connect=None, kafka_connect_user_config=None, kafka_mirrormaker=None, kafka_mirrormaker_user_config=None, kafka_user_config=None, maintenance_window_dow=None, maintenance_window_time=None, mysql=None, mysql_user_config=None, pg=None, pg_user_config=None, plan=None, project=None, project_vpc_id=None, redis=None, redis_user_config=None, service_host=None, service_integrations=None, service_name=None, service_password=None, service_port=None, service_type=None, service_uri=None, service_username=None, state=None, termination_protection=None):
        if cassandra and not isinstance(cassandra, dict):
            raise TypeError("Expected argument 'cassandra' to be a dict")
        pulumi.set(__self__, "cassandra", cassandra)
        if cassandra_user_config and not isinstance(cassandra_user_config, dict):
            raise TypeError("Expected argument 'cassandra_user_config' to be a dict")
        pulumi.set(__self__, "cassandra_user_config", cassandra_user_config)
        if cloud_name and not isinstance(cloud_name, str):
            raise TypeError("Expected argument 'cloud_name' to be a str")
        pulumi.set(__self__, "cloud_name", cloud_name)
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        pulumi.set(__self__, "components", components)
        if elasticsearch and not isinstance(elasticsearch, dict):
            raise TypeError("Expected argument 'elasticsearch' to be a dict")
        pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_user_config and not isinstance(elasticsearch_user_config, dict):
            raise TypeError("Expected argument 'elasticsearch_user_config' to be a dict")
        pulumi.set(__self__, "elasticsearch_user_config", elasticsearch_user_config)
        if grafana and not isinstance(grafana, dict):
            raise TypeError("Expected argument 'grafana' to be a dict")
        pulumi.set(__self__, "grafana", grafana)
        if grafana_user_config and not isinstance(grafana_user_config, dict):
            raise TypeError("Expected argument 'grafana_user_config' to be a dict")
        pulumi.set(__self__, "grafana_user_config", grafana_user_config)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if influxdb and not isinstance(influxdb, dict):
            raise TypeError("Expected argument 'influxdb' to be a dict")
        pulumi.set(__self__, "influxdb", influxdb)
        if influxdb_user_config and not isinstance(influxdb_user_config, dict):
            raise TypeError("Expected argument 'influxdb_user_config' to be a dict")
        pulumi.set(__self__, "influxdb_user_config", influxdb_user_config)
        if kafka and not isinstance(kafka, dict):
            raise TypeError("Expected argument 'kafka' to be a dict")
        pulumi.set(__self__, "kafka", kafka)
        if kafka_connect and not isinstance(kafka_connect, dict):
            raise TypeError("Expected argument 'kafka_connect' to be a dict")
        pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_connect_user_config and not isinstance(kafka_connect_user_config, dict):
            raise TypeError("Expected argument 'kafka_connect_user_config' to be a dict")
        pulumi.set(__self__, "kafka_connect_user_config", kafka_connect_user_config)
        if kafka_mirrormaker and not isinstance(kafka_mirrormaker, dict):
            raise TypeError("Expected argument 'kafka_mirrormaker' to be a dict")
        pulumi.set(__self__, "kafka_mirrormaker", kafka_mirrormaker)
        if kafka_mirrormaker_user_config and not isinstance(kafka_mirrormaker_user_config, dict):
            raise TypeError("Expected argument 'kafka_mirrormaker_user_config' to be a dict")
        pulumi.set(__self__, "kafka_mirrormaker_user_config", kafka_mirrormaker_user_config)
        if kafka_user_config and not isinstance(kafka_user_config, dict):
            raise TypeError("Expected argument 'kafka_user_config' to be a dict")
        pulumi.set(__self__, "kafka_user_config", kafka_user_config)
        if maintenance_window_dow and not isinstance(maintenance_window_dow, str):
            raise TypeError("Expected argument 'maintenance_window_dow' to be a str")
        pulumi.set(__self__, "maintenance_window_dow", maintenance_window_dow)
        if maintenance_window_time and not isinstance(maintenance_window_time, str):
            raise TypeError("Expected argument 'maintenance_window_time' to be a str")
        pulumi.set(__self__, "maintenance_window_time", maintenance_window_time)
        if mysql and not isinstance(mysql, dict):
            raise TypeError("Expected argument 'mysql' to be a dict")
        pulumi.set(__self__, "mysql", mysql)
        if mysql_user_config and not isinstance(mysql_user_config, dict):
            raise TypeError("Expected argument 'mysql_user_config' to be a dict")
        pulumi.set(__self__, "mysql_user_config", mysql_user_config)
        if pg and not isinstance(pg, dict):
            raise TypeError("Expected argument 'pg' to be a dict")
        pulumi.set(__self__, "pg", pg)
        if pg_user_config and not isinstance(pg_user_config, dict):
            raise TypeError("Expected argument 'pg_user_config' to be a dict")
        pulumi.set(__self__, "pg_user_config", pg_user_config)
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        pulumi.set(__self__, "plan", plan)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if project_vpc_id and not isinstance(project_vpc_id, str):
            raise TypeError("Expected argument 'project_vpc_id' to be a str")
        pulumi.set(__self__, "project_vpc_id", project_vpc_id)
        if redis and not isinstance(redis, dict):
            raise TypeError("Expected argument 'redis' to be a dict")
        pulumi.set(__self__, "redis", redis)
        if redis_user_config and not isinstance(redis_user_config, dict):
            raise TypeError("Expected argument 'redis_user_config' to be a dict")
        pulumi.set(__self__, "redis_user_config", redis_user_config)
        if service_host and not isinstance(service_host, str):
            raise TypeError("Expected argument 'service_host' to be a str")
        pulumi.set(__self__, "service_host", service_host)
        if service_integrations and not isinstance(service_integrations, list):
            raise TypeError("Expected argument 'service_integrations' to be a list")
        pulumi.set(__self__, "service_integrations", service_integrations)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if service_password and not isinstance(service_password, str):
            raise TypeError("Expected argument 'service_password' to be a str")
        pulumi.set(__self__, "service_password", service_password)
        if service_port and not isinstance(service_port, int):
            raise TypeError("Expected argument 'service_port' to be a int")
        pulumi.set(__self__, "service_port", service_port)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if service_uri and not isinstance(service_uri, str):
            raise TypeError("Expected argument 'service_uri' to be a str")
        pulumi.set(__self__, "service_uri", service_uri)
        if service_username and not isinstance(service_username, str):
            raise TypeError("Expected argument 'service_username' to be a str")
        pulumi.set(__self__, "service_username", service_username)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if termination_protection and not isinstance(termination_protection, bool):
            raise TypeError("Expected argument 'termination_protection' to be a bool")
        pulumi.set(__self__, "termination_protection", termination_protection)

    @property
    @pulumi.getter
    def cassandra(self) -> 'outputs.GetServiceCassandraResult':
        return pulumi.get(self, "cassandra")

    @property
    @pulumi.getter(name="cassandraUserConfig")
    def cassandra_user_config(self) -> Optional['outputs.GetServiceCassandraUserConfigResult']:
        return pulumi.get(self, "cassandra_user_config")

    @property
    @pulumi.getter(name="cloudName")
    def cloud_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_name")

    @property
    @pulumi.getter
    def components(self) -> Sequence['outputs.GetServiceComponentResult']:
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def elasticsearch(self) -> 'outputs.GetServiceElasticsearchResult':
        return pulumi.get(self, "elasticsearch")

    @property
    @pulumi.getter(name="elasticsearchUserConfig")
    def elasticsearch_user_config(self) -> Optional['outputs.GetServiceElasticsearchUserConfigResult']:
        return pulumi.get(self, "elasticsearch_user_config")

    @property
    @pulumi.getter
    def grafana(self) -> 'outputs.GetServiceGrafanaResult':
        return pulumi.get(self, "grafana")

    @property
    @pulumi.getter(name="grafanaUserConfig")
    def grafana_user_config(self) -> Optional['outputs.GetServiceGrafanaUserConfigResult']:
        return pulumi.get(self, "grafana_user_config")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def influxdb(self) -> 'outputs.GetServiceInfluxdbResult':
        return pulumi.get(self, "influxdb")

    @property
    @pulumi.getter(name="influxdbUserConfig")
    def influxdb_user_config(self) -> Optional['outputs.GetServiceInfluxdbUserConfigResult']:
        return pulumi.get(self, "influxdb_user_config")

    @property
    @pulumi.getter
    def kafka(self) -> 'outputs.GetServiceKafkaResult':
        return pulumi.get(self, "kafka")

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> 'outputs.GetServiceKafkaConnectResult':
        return pulumi.get(self, "kafka_connect")

    @property
    @pulumi.getter(name="kafkaConnectUserConfig")
    def kafka_connect_user_config(self) -> Optional['outputs.GetServiceKafkaConnectUserConfigResult']:
        return pulumi.get(self, "kafka_connect_user_config")

    @property
    @pulumi.getter(name="kafkaMirrormaker")
    def kafka_mirrormaker(self) -> 'outputs.GetServiceKafkaMirrormakerResult':
        return pulumi.get(self, "kafka_mirrormaker")

    @property
    @pulumi.getter(name="kafkaMirrormakerUserConfig")
    def kafka_mirrormaker_user_config(self) -> Optional['outputs.GetServiceKafkaMirrormakerUserConfigResult']:
        return pulumi.get(self, "kafka_mirrormaker_user_config")

    @property
    @pulumi.getter(name="kafkaUserConfig")
    def kafka_user_config(self) -> Optional['outputs.GetServiceKafkaUserConfigResult']:
        return pulumi.get(self, "kafka_user_config")

    @property
    @pulumi.getter(name="maintenanceWindowDow")
    def maintenance_window_dow(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_window_dow")

    @property
    @pulumi.getter(name="maintenanceWindowTime")
    def maintenance_window_time(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_window_time")

    @property
    @pulumi.getter
    def mysql(self) -> 'outputs.GetServiceMysqlResult':
        return pulumi.get(self, "mysql")

    @property
    @pulumi.getter(name="mysqlUserConfig")
    def mysql_user_config(self) -> Optional['outputs.GetServiceMysqlUserConfigResult']:
        return pulumi.get(self, "mysql_user_config")

    @property
    @pulumi.getter
    def pg(self) -> 'outputs.GetServicePgResult':
        return pulumi.get(self, "pg")

    @property
    @pulumi.getter(name="pgUserConfig")
    def pg_user_config(self) -> Optional['outputs.GetServicePgUserConfigResult']:
        return pulumi.get(self, "pg_user_config")

    @property
    @pulumi.getter
    def plan(self) -> Optional[str]:
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="projectVpcId")
    def project_vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "project_vpc_id")

    @property
    @pulumi.getter
    def redis(self) -> 'outputs.GetServiceRedisResult':
        return pulumi.get(self, "redis")

    @property
    @pulumi.getter(name="redisUserConfig")
    def redis_user_config(self) -> Optional['outputs.GetServiceRedisUserConfigResult']:
        return pulumi.get(self, "redis_user_config")

    @property
    @pulumi.getter(name="serviceHost")
    def service_host(self) -> str:
        return pulumi.get(self, "service_host")

    @property
    @pulumi.getter(name="serviceIntegrations")
    def service_integrations(self) -> Optional[Sequence['outputs.GetServiceServiceIntegrationResult']]:
        return pulumi.get(self, "service_integrations")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="servicePassword")
    def service_password(self) -> str:
        return pulumi.get(self, "service_password")

    @property
    @pulumi.getter(name="servicePort")
    def service_port(self) -> int:
        return pulumi.get(self, "service_port")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        return pulumi.get(self, "service_uri")

    @property
    @pulumi.getter(name="serviceUsername")
    def service_username(self) -> str:
        return pulumi.get(self, "service_username")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[bool]:
        return pulumi.get(self, "termination_protection")


class AwaitableGetServiceResult(GetServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceResult(
            cassandra=self.cassandra,
            cassandra_user_config=self.cassandra_user_config,
            cloud_name=self.cloud_name,
            components=self.components,
            elasticsearch=self.elasticsearch,
            elasticsearch_user_config=self.elasticsearch_user_config,
            grafana=self.grafana,
            grafana_user_config=self.grafana_user_config,
            id=self.id,
            influxdb=self.influxdb,
            influxdb_user_config=self.influxdb_user_config,
            kafka=self.kafka,
            kafka_connect=self.kafka_connect,
            kafka_connect_user_config=self.kafka_connect_user_config,
            kafka_mirrormaker=self.kafka_mirrormaker,
            kafka_mirrormaker_user_config=self.kafka_mirrormaker_user_config,
            kafka_user_config=self.kafka_user_config,
            maintenance_window_dow=self.maintenance_window_dow,
            maintenance_window_time=self.maintenance_window_time,
            mysql=self.mysql,
            mysql_user_config=self.mysql_user_config,
            pg=self.pg,
            pg_user_config=self.pg_user_config,
            plan=self.plan,
            project=self.project,
            project_vpc_id=self.project_vpc_id,
            redis=self.redis,
            redis_user_config=self.redis_user_config,
            service_host=self.service_host,
            service_integrations=self.service_integrations,
            service_name=self.service_name,
            service_password=self.service_password,
            service_port=self.service_port,
            service_type=self.service_type,
            service_uri=self.service_uri,
            service_username=self.service_username,
            state=self.state,
            termination_protection=self.termination_protection)


def get_service(cassandra: Optional[pulumi.InputType['GetServiceCassandraArgs']] = None,
                cassandra_user_config: Optional[pulumi.InputType['GetServiceCassandraUserConfigArgs']] = None,
                cloud_name: Optional[str] = None,
                components: Optional[Sequence[pulumi.InputType['GetServiceComponentArgs']]] = None,
                elasticsearch: Optional[pulumi.InputType['GetServiceElasticsearchArgs']] = None,
                elasticsearch_user_config: Optional[pulumi.InputType['GetServiceElasticsearchUserConfigArgs']] = None,
                grafana: Optional[pulumi.InputType['GetServiceGrafanaArgs']] = None,
                grafana_user_config: Optional[pulumi.InputType['GetServiceGrafanaUserConfigArgs']] = None,
                influxdb: Optional[pulumi.InputType['GetServiceInfluxdbArgs']] = None,
                influxdb_user_config: Optional[pulumi.InputType['GetServiceInfluxdbUserConfigArgs']] = None,
                kafka: Optional[pulumi.InputType['GetServiceKafkaArgs']] = None,
                kafka_connect: Optional[pulumi.InputType['GetServiceKafkaConnectArgs']] = None,
                kafka_connect_user_config: Optional[pulumi.InputType['GetServiceKafkaConnectUserConfigArgs']] = None,
                kafka_mirrormaker: Optional[pulumi.InputType['GetServiceKafkaMirrormakerArgs']] = None,
                kafka_mirrormaker_user_config: Optional[pulumi.InputType['GetServiceKafkaMirrormakerUserConfigArgs']] = None,
                kafka_user_config: Optional[pulumi.InputType['GetServiceKafkaUserConfigArgs']] = None,
                maintenance_window_dow: Optional[str] = None,
                maintenance_window_time: Optional[str] = None,
                mysql: Optional[pulumi.InputType['GetServiceMysqlArgs']] = None,
                mysql_user_config: Optional[pulumi.InputType['GetServiceMysqlUserConfigArgs']] = None,
                pg: Optional[pulumi.InputType['GetServicePgArgs']] = None,
                pg_user_config: Optional[pulumi.InputType['GetServicePgUserConfigArgs']] = None,
                plan: Optional[str] = None,
                project: Optional[str] = None,
                project_vpc_id: Optional[str] = None,
                redis: Optional[pulumi.InputType['GetServiceRedisArgs']] = None,
                redis_user_config: Optional[pulumi.InputType['GetServiceRedisUserConfigArgs']] = None,
                service_host: Optional[str] = None,
                service_integrations: Optional[Sequence[pulumi.InputType['GetServiceServiceIntegrationArgs']]] = None,
                service_name: Optional[str] = None,
                service_password: Optional[str] = None,
                service_port: Optional[int] = None,
                service_type: Optional[str] = None,
                service_uri: Optional[str] = None,
                service_username: Optional[str] = None,
                state: Optional[str] = None,
                termination_protection: Optional[bool] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cassandra'] = cassandra
    __args__['cassandraUserConfig'] = cassandra_user_config
    __args__['cloudName'] = cloud_name
    __args__['components'] = components
    __args__['elasticsearch'] = elasticsearch
    __args__['elasticsearchUserConfig'] = elasticsearch_user_config
    __args__['grafana'] = grafana
    __args__['grafanaUserConfig'] = grafana_user_config
    __args__['influxdb'] = influxdb
    __args__['influxdbUserConfig'] = influxdb_user_config
    __args__['kafka'] = kafka
    __args__['kafkaConnect'] = kafka_connect
    __args__['kafkaConnectUserConfig'] = kafka_connect_user_config
    __args__['kafkaMirrormaker'] = kafka_mirrormaker
    __args__['kafkaMirrormakerUserConfig'] = kafka_mirrormaker_user_config
    __args__['kafkaUserConfig'] = kafka_user_config
    __args__['maintenanceWindowDow'] = maintenance_window_dow
    __args__['maintenanceWindowTime'] = maintenance_window_time
    __args__['mysql'] = mysql
    __args__['mysqlUserConfig'] = mysql_user_config
    __args__['pg'] = pg
    __args__['pgUserConfig'] = pg_user_config
    __args__['plan'] = plan
    __args__['project'] = project
    __args__['projectVpcId'] = project_vpc_id
    __args__['redis'] = redis
    __args__['redisUserConfig'] = redis_user_config
    __args__['serviceHost'] = service_host
    __args__['serviceIntegrations'] = service_integrations
    __args__['serviceName'] = service_name
    __args__['servicePassword'] = service_password
    __args__['servicePort'] = service_port
    __args__['serviceType'] = service_type
    __args__['serviceUri'] = service_uri
    __args__['serviceUsername'] = service_username
    __args__['state'] = state
    __args__['terminationProtection'] = termination_protection
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getService:getService', __args__, opts=opts, typ=GetServiceResult).value

    return AwaitableGetServiceResult(
        cassandra=__ret__.cassandra,
        cassandra_user_config=__ret__.cassandra_user_config,
        cloud_name=__ret__.cloud_name,
        components=__ret__.components,
        elasticsearch=__ret__.elasticsearch,
        elasticsearch_user_config=__ret__.elasticsearch_user_config,
        grafana=__ret__.grafana,
        grafana_user_config=__ret__.grafana_user_config,
        id=__ret__.id,
        influxdb=__ret__.influxdb,
        influxdb_user_config=__ret__.influxdb_user_config,
        kafka=__ret__.kafka,
        kafka_connect=__ret__.kafka_connect,
        kafka_connect_user_config=__ret__.kafka_connect_user_config,
        kafka_mirrormaker=__ret__.kafka_mirrormaker,
        kafka_mirrormaker_user_config=__ret__.kafka_mirrormaker_user_config,
        kafka_user_config=__ret__.kafka_user_config,
        maintenance_window_dow=__ret__.maintenance_window_dow,
        maintenance_window_time=__ret__.maintenance_window_time,
        mysql=__ret__.mysql,
        mysql_user_config=__ret__.mysql_user_config,
        pg=__ret__.pg,
        pg_user_config=__ret__.pg_user_config,
        plan=__ret__.plan,
        project=__ret__.project,
        project_vpc_id=__ret__.project_vpc_id,
        redis=__ret__.redis,
        redis_user_config=__ret__.redis_user_config,
        service_host=__ret__.service_host,
        service_integrations=__ret__.service_integrations,
        service_name=__ret__.service_name,
        service_password=__ret__.service_password,
        service_port=__ret__.service_port,
        service_type=__ret__.service_type,
        service_uri=__ret__.service_uri,
        service_username=__ret__.service_username,
        state=__ret__.state,
        termination_protection=__ret__.termination_protection)
