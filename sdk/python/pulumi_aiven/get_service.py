# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetServiceResult:
    """
    A collection of values returned by getService.
    """
    def __init__(__self__, cassandra=None, cassandra_user_config=None, cloud_name=None, components=None, elasticsearch=None, elasticsearch_user_config=None, grafana=None, grafana_user_config=None, id=None, influxdb=None, influxdb_user_config=None, kafka=None, kafka_connect=None, kafka_connect_user_config=None, kafka_user_config=None, maintenance_window_dow=None, maintenance_window_time=None, mysql=None, mysql_user_config=None, pg=None, pg_user_config=None, plan=None, project=None, project_vpc_id=None, redis=None, redis_user_config=None, service_host=None, service_integrations=None, service_name=None, service_password=None, service_port=None, service_type=None, service_uri=None, service_username=None, state=None, termination_protection=None):
        if cassandra and not isinstance(cassandra, dict):
            raise TypeError("Expected argument 'cassandra' to be a dict")
        __self__.cassandra = cassandra
        if cassandra_user_config and not isinstance(cassandra_user_config, dict):
            raise TypeError("Expected argument 'cassandra_user_config' to be a dict")
        __self__.cassandra_user_config = cassandra_user_config
        if cloud_name and not isinstance(cloud_name, str):
            raise TypeError("Expected argument 'cloud_name' to be a str")
        __self__.cloud_name = cloud_name
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        __self__.components = components
        if elasticsearch and not isinstance(elasticsearch, dict):
            raise TypeError("Expected argument 'elasticsearch' to be a dict")
        __self__.elasticsearch = elasticsearch
        if elasticsearch_user_config and not isinstance(elasticsearch_user_config, dict):
            raise TypeError("Expected argument 'elasticsearch_user_config' to be a dict")
        __self__.elasticsearch_user_config = elasticsearch_user_config
        if grafana and not isinstance(grafana, dict):
            raise TypeError("Expected argument 'grafana' to be a dict")
        __self__.grafana = grafana
        if grafana_user_config and not isinstance(grafana_user_config, dict):
            raise TypeError("Expected argument 'grafana_user_config' to be a dict")
        __self__.grafana_user_config = grafana_user_config
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if influxdb and not isinstance(influxdb, dict):
            raise TypeError("Expected argument 'influxdb' to be a dict")
        __self__.influxdb = influxdb
        if influxdb_user_config and not isinstance(influxdb_user_config, dict):
            raise TypeError("Expected argument 'influxdb_user_config' to be a dict")
        __self__.influxdb_user_config = influxdb_user_config
        if kafka and not isinstance(kafka, dict):
            raise TypeError("Expected argument 'kafka' to be a dict")
        __self__.kafka = kafka
        if kafka_connect and not isinstance(kafka_connect, dict):
            raise TypeError("Expected argument 'kafka_connect' to be a dict")
        __self__.kafka_connect = kafka_connect
        if kafka_connect_user_config and not isinstance(kafka_connect_user_config, dict):
            raise TypeError("Expected argument 'kafka_connect_user_config' to be a dict")
        __self__.kafka_connect_user_config = kafka_connect_user_config
        if kafka_user_config and not isinstance(kafka_user_config, dict):
            raise TypeError("Expected argument 'kafka_user_config' to be a dict")
        __self__.kafka_user_config = kafka_user_config
        if maintenance_window_dow and not isinstance(maintenance_window_dow, str):
            raise TypeError("Expected argument 'maintenance_window_dow' to be a str")
        __self__.maintenance_window_dow = maintenance_window_dow
        if maintenance_window_time and not isinstance(maintenance_window_time, str):
            raise TypeError("Expected argument 'maintenance_window_time' to be a str")
        __self__.maintenance_window_time = maintenance_window_time
        if mysql and not isinstance(mysql, dict):
            raise TypeError("Expected argument 'mysql' to be a dict")
        __self__.mysql = mysql
        if mysql_user_config and not isinstance(mysql_user_config, dict):
            raise TypeError("Expected argument 'mysql_user_config' to be a dict")
        __self__.mysql_user_config = mysql_user_config
        if pg and not isinstance(pg, dict):
            raise TypeError("Expected argument 'pg' to be a dict")
        __self__.pg = pg
        if pg_user_config and not isinstance(pg_user_config, dict):
            raise TypeError("Expected argument 'pg_user_config' to be a dict")
        __self__.pg_user_config = pg_user_config
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        __self__.plan = plan
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        __self__.project = project
        if project_vpc_id and not isinstance(project_vpc_id, str):
            raise TypeError("Expected argument 'project_vpc_id' to be a str")
        __self__.project_vpc_id = project_vpc_id
        if redis and not isinstance(redis, dict):
            raise TypeError("Expected argument 'redis' to be a dict")
        __self__.redis = redis
        if redis_user_config and not isinstance(redis_user_config, dict):
            raise TypeError("Expected argument 'redis_user_config' to be a dict")
        __self__.redis_user_config = redis_user_config
        if service_host and not isinstance(service_host, str):
            raise TypeError("Expected argument 'service_host' to be a str")
        __self__.service_host = service_host
        if service_integrations and not isinstance(service_integrations, list):
            raise TypeError("Expected argument 'service_integrations' to be a list")
        __self__.service_integrations = service_integrations
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        __self__.service_name = service_name
        if service_password and not isinstance(service_password, str):
            raise TypeError("Expected argument 'service_password' to be a str")
        __self__.service_password = service_password
        if service_port and not isinstance(service_port, float):
            raise TypeError("Expected argument 'service_port' to be a float")
        __self__.service_port = service_port
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        __self__.service_type = service_type
        if service_uri and not isinstance(service_uri, str):
            raise TypeError("Expected argument 'service_uri' to be a str")
        __self__.service_uri = service_uri
        if service_username and not isinstance(service_username, str):
            raise TypeError("Expected argument 'service_username' to be a str")
        __self__.service_username = service_username
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        if termination_protection and not isinstance(termination_protection, bool):
            raise TypeError("Expected argument 'termination_protection' to be a bool")
        __self__.termination_protection = termination_protection
class AwaitableGetServiceResult(GetServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceResult(
            cassandra=self.cassandra,
            cassandra_user_config=self.cassandra_user_config,
            cloud_name=self.cloud_name,
            components=self.components,
            elasticsearch=self.elasticsearch,
            elasticsearch_user_config=self.elasticsearch_user_config,
            grafana=self.grafana,
            grafana_user_config=self.grafana_user_config,
            id=self.id,
            influxdb=self.influxdb,
            influxdb_user_config=self.influxdb_user_config,
            kafka=self.kafka,
            kafka_connect=self.kafka_connect,
            kafka_connect_user_config=self.kafka_connect_user_config,
            kafka_user_config=self.kafka_user_config,
            maintenance_window_dow=self.maintenance_window_dow,
            maintenance_window_time=self.maintenance_window_time,
            mysql=self.mysql,
            mysql_user_config=self.mysql_user_config,
            pg=self.pg,
            pg_user_config=self.pg_user_config,
            plan=self.plan,
            project=self.project,
            project_vpc_id=self.project_vpc_id,
            redis=self.redis,
            redis_user_config=self.redis_user_config,
            service_host=self.service_host,
            service_integrations=self.service_integrations,
            service_name=self.service_name,
            service_password=self.service_password,
            service_port=self.service_port,
            service_type=self.service_type,
            service_uri=self.service_uri,
            service_username=self.service_username,
            state=self.state,
            termination_protection=self.termination_protection)

def get_service(cassandra=None,cassandra_user_config=None,cloud_name=None,components=None,elasticsearch=None,elasticsearch_user_config=None,grafana=None,grafana_user_config=None,influxdb=None,influxdb_user_config=None,kafka=None,kafka_connect=None,kafka_connect_user_config=None,kafka_user_config=None,maintenance_window_dow=None,maintenance_window_time=None,mysql=None,mysql_user_config=None,pg=None,pg_user_config=None,plan=None,project=None,project_vpc_id=None,redis=None,redis_user_config=None,service_host=None,service_integrations=None,service_name=None,service_password=None,service_port=None,service_type=None,service_uri=None,service_username=None,state=None,termination_protection=None,opts=None):
    """
    ## Example Usage



    ```python
    import pulumi
    import pulumi_aiven as aiven

    myservice = aiven.get_service(project=data[".Project"]["myproject"]["project"],
        service_name="<SERVICE_NAME>")
    ```




    The **cassandra_user_config** object supports the following:

      * `ipFilters` (`list`)
      * `migrateSstableloader` (`str`)
      * `privateAccess` (`dict`)
        * `prometheus` (`str`)

      * `publicAccess` (`dict`)
        * `prometheus` (`str`)

      * `serviceToForkFrom` (`str`)

    The **components** object supports the following:

      * `component` (`str`)
      * `host` (`str`)
      * `kafkaAuthenticationMethod` (`str`)
      * `port` (`float`)
      * `route` (`str`)
      * `ssl` (`bool`)
      * `usage` (`str`)

    The **elasticsearch** object supports the following:

      * `kibanaUri` (`str`)

    The **elasticsearch_user_config** object supports the following:

      * `customDomain` (`str`)
      * `disableReplicationFactorAdjustment` (`str`)
      * `elasticsearch` (`dict`)
        * `actionAutoCreateIndexEnabled` (`str`)
        * `actionDestructiveRequiresName` (`str`)
        * `httpMaxContentLength` (`float`)
        * `indicesFielddataCacheSize` (`float`)
        * `indicesMemoryIndexBufferSize` (`float`)
        * `indicesQueriesCacheSize` (`float`)
        * `indicesQueryBoolMaxClauseCount` (`float`)
        * `reindexRemoteWhitelists` (`list`)
        * `threadPoolAnalyzeQueueSize` (`float`)
        * `threadPoolAnalyzeSize` (`float`)
        * `threadPoolForceMergeSize` (`float`)
        * `threadPoolGetQueueSize` (`float`)
        * `threadPoolGetSize` (`float`)
        * `threadPoolIndexQueueSize` (`float`)
        * `threadPoolIndexSize` (`float`)
        * `threadPoolSearchQueueSize` (`float`)
        * `threadPoolSearchSize` (`float`)
        * `threadPoolSearchThrottledQueueSize` (`float`)
        * `threadPoolSearchThrottledSize` (`float`)
        * `threadPoolWriteQueueSize` (`float`)
        * `threadPoolWriteSize` (`float`)

      * `elasticsearchVersion` (`str`)
      * `indexPatterns` (`list`)
        * `maxIndexCount` (`float`)
        * `pattern` (`str`)

      * `ipFilters` (`list`)
      * `kibana` (`dict`)
        * `elasticsearchRequestTimeout` (`float`)
        * `enabled` (`bool`)
        * `maxOldSpaceSize` (`float`)

      * `maxIndexCount` (`float`)
      * `privateAccess` (`dict`)
        * `elasticsearch` (`str`)
        * `kibana` (`str`)
        * `prometheus` (`str`)

      * `publicAccess` (`dict`)
        * `elasticsearch` (`str`)
        * `kibana` (`str`)
        * `prometheus` (`str`)

      * `recoveryBasebackupName` (`str`)
      * `serviceToForkFrom` (`str`)

    The **grafana_user_config** object supports the following:

      * `alertingEnabled` (`str`)
      * `alertingErrorOrTimeout` (`str`)
      * `alertingNodataOrNullvalues` (`str`)
      * `allowEmbedding` (`str`)
      * `authGenericOauth` (`dict`)
        * `allowSignUp` (`str`)
        * `allowedDomains` (`list`)
        * `allowedOrganizations` (`list`)
        * `apiUrl` (`str`)
        * `authUrl` (`str`)
        * `clientId` (`str`)
        * `clientSecret` (`str`)
        * `name` (`str`)
        * `scopes` (`list`)
        * `tokenUrl` (`str`)

      * `authGithub` (`dict`)
        * `allowSignUp` (`str`)
        * `allowedOrganizations` (`list`)
        * `clientId` (`str`)
        * `clientSecret` (`str`)
        * `teamIds` (`list`)

      * `authGitlab` (`dict`)
        * `allowSignUp` (`str`)
        * `allowedGroups` (`list`)
        * `apiUrl` (`str`)
        * `authUrl` (`str`)
        * `clientId` (`str`)
        * `clientSecret` (`str`)
        * `tokenUrl` (`str`)

      * `authGoogle` (`dict`)
        * `allowSignUp` (`str`)
        * `allowedDomains` (`list`)
        * `clientId` (`str`)
        * `clientSecret` (`str`)

      * `cookieSamesite` (`str`)
      * `customDomain` (`str`)
      * `dashboardsVersionsToKeep` (`float`)
      * `dataproxySendUserHeader` (`str`)
      * `dataproxyTimeout` (`float`)
      * `disableGravatar` (`str`)
      * `editorsCanAdmin` (`str`)
      * `externalImageStorage` (`dict`)
        * `access_key` (`str`)
        * `bucketUrl` (`str`)
        * `provider` (`str`)
        * `secretKey` (`str`)

      * `googleAnalyticsUaId` (`str`)
      * `ipFilters` (`list`)
      * `metricsEnabled` (`str`)
      * `privateAccess` (`dict`)
        * `grafana` (`str`)

      * `publicAccess` (`dict`)
        * `grafana` (`str`)

      * `smtpServer` (`dict`)
        * `fromAddress` (`str`)
        * `fromName` (`str`)
        * `host` (`str`)
        * `password` (`str`)
        * `port` (`float`)
        * `skipVerify` (`str`)
        * `username` (`str`)

      * `userAutoAssignOrg` (`str`)
      * `userAutoAssignOrgRole` (`str`)
      * `viewersCanEdit` (`str`)

    The **influxdb** object supports the following:

      * `database_name` (`str`)

    The **influxdb_user_config** object supports the following:

      * `customDomain` (`str`)
      * `ipFilters` (`list`)
      * `privateAccess` (`dict`)
        * `influxdb` (`str`)

      * `publicAccess` (`dict`)
        * `influxdb` (`str`)

      * `serviceToForkFrom` (`str`)

    The **kafka** object supports the following:

      * `access_cert` (`str`)
      * `access_key` (`str`)
      * `connectUri` (`str`)
      * `restUri` (`str`)
      * `schemaRegistryUri` (`str`)

    The **kafka_connect_user_config** object supports the following:

      * `ipFilters` (`list`)
      * `kafka_connect` (`dict`)
        * `consumerIsolationLevel` (`str`)
        * `consumerMaxPollRecords` (`float`)
        * `offsetFlushIntervalMs` (`float`)

      * `privateAccess` (`dict`)
        * `kafka_connect` (`str`)
        * `prometheus` (`str`)

      * `publicAccess` (`dict`)
        * `kafka_connect` (`str`)
        * `prometheus` (`str`)

    The **kafka_user_config** object supports the following:

      * `customDomain` (`str`)
      * `ipFilters` (`list`)
      * `kafka` (`dict`)
        * `autoCreateTopicsEnable` (`str`)
        * `compressionType` (`str`)
        * `connectionsMaxIdleMs` (`float`)
        * `defaultReplicationFactor` (`float`)
        * `groupMaxSessionTimeoutMs` (`float`)
        * `groupMinSessionTimeoutMs` (`float`)
        * `logCleanerMaxCompactionLagMs` (`float`)
        * `logCleanerMinCleanableRatio` (`float`)
        * `logCleanerMinCompactionLagMs` (`float`)
        * `logCleanupPolicy` (`str`)
        * `logMessageTimestampDifferenceMaxMs` (`float`)
        * `logMessageTimestampType` (`str`)
        * `logRetentionBytes` (`float`)
        * `logRetentionHours` (`float`)
        * `logSegmentBytes` (`float`)
        * `maxConnectionsPerIp` (`float`)
        * `messageMaxBytes` (`float`)
        * `numPartitions` (`float`)
        * `offsetsRetentionMinutes` (`float`)
        * `producerPurgatoryPurgeIntervalRequests` (`float`)
        * `replicaFetchMaxBytes` (`float`)
        * `replicaFetchResponseMaxBytes` (`float`)
        * `socketRequestMaxBytes` (`float`)

      * `kafkaAuthenticationMethods` (`dict`)
        * `certificate` (`bool`)
        * `sasl` (`bool`)

      * `kafka_connect` (`bool`)
      * `kafkaConnectConfig` (`dict`)
        * `consumerIsolationLevel` (`str`)
        * `consumerMaxPollRecords` (`float`)
        * `offsetFlushIntervalMs` (`float`)

      * `kafkaRest` (`bool`)
      * `kafkaRestConfig` (`dict`)
        * `consumerEnableAutoCommit` (`bool`)
        * `consumerRequestMaxBytes` (`float`)
        * `consumerRequestTimeoutMs` (`float`)
        * `producerAcks` (`str`)
        * `producerLingerMs` (`float`)
        * `simpleconsumerPoolSizeMax` (`float`)

      * `kafkaVersion` (`str`)
      * `privateAccess` (`dict`)
        * `prometheus` (`str`)

      * `publicAccess` (`dict`)
        * `kafka` (`str`)
        * `kafka_connect` (`str`)
        * `kafkaRest` (`str`)
        * `prometheus` (`str`)
        * `schemaRegistry` (`str`)

      * `schemaRegistry` (`bool`)

    The **mysql_user_config** object supports the following:

      * `adminPassword` (`str`)
      * `adminUsername` (`str`)
      * `backupHour` (`float`)
      * `backupMinute` (`float`)
      * `ipFilters` (`list`)
      * `mysql` (`dict`)
        * `connectTimeout` (`float`)
        * `defaultTimeZone` (`str`)
        * `groupConcatMaxLen` (`float`)
        * `informationSchemaStatsExpiry` (`float`)
        * `innodbFtMinTokenSize` (`float`)
        * `innodbFtServerStopwordTable` (`str`)
        * `innodbLockWaitTimeout` (`float`)
        * `innodbOnlineAlterLogMaxSize` (`float`)
        * `innodbRollbackOnTimeout` (`str`)
        * `maxAllowedPacket` (`float`)
        * `netReadTimeout` (`float`)
        * `netWriteTimeout` (`float`)
        * `sqlMode` (`str`)
        * `sqlRequirePrimaryKey` (`str`)
        * `waitTimeout` (`float`)

      * `mysqlVersion` (`str`)
      * `privateAccess` (`dict`)
        * `mysql` (`str`)
        * `prometheus` (`str`)

      * `publicAccess` (`dict`)
        * `mysql` (`str`)
        * `prometheus` (`str`)

      * `recoveryTargetTime` (`str`)
      * `serviceToForkFrom` (`str`)

    The **pg** object supports the following:

      * `dbname` (`str`)
      * `host` (`str`)
      * `password` (`str`)
      * `port` (`float`)
      * `replicaUri` (`str`)
      * `sslmode` (`str`)
      * `uri` (`str`)
      * `user` (`str`)

    The **pg_user_config** object supports the following:

      * `adminPassword` (`str`)
      * `adminUsername` (`str`)
      * `backupHour` (`float`)
      * `backupMinute` (`float`)
      * `ipFilters` (`list`)
      * `pg` (`dict`)
        * `autovacuumAnalyzeScaleFactor` (`float`)
        * `autovacuumAnalyzeThreshold` (`float`)
        * `autovacuumMaxWorkers` (`float`)
        * `autovacuumNaptime` (`float`)
        * `autovacuumVacuumCostDelay` (`float`)
        * `autovacuumVacuumCostLimit` (`float`)
        * `autovacuumVacuumScaleFactor` (`float`)
        * `autovacuumVacuumThreshold` (`float`)
        * `deadlockTimeout` (`float`)
        * `idleInTransactionSessionTimeout` (`float`)
        * `jit` (`str`)
        * `logAutovacuumMinDuration` (`float`)
        * `logErrorVerbosity` (`str`)
        * `logMinDurationStatement` (`float`)
        * `maxLocksPerTransaction` (`float`)
        * `maxParallelWorkers` (`float`)
        * `maxParallelWorkersPerGather` (`float`)
        * `maxPredLocksPerTransaction` (`float`)
        * `maxPreparedTransactions` (`float`)
        * `maxStackDepth` (`float`)
        * `maxStandbyArchiveDelay` (`float`)
        * `maxStandbyStreamingDelay` (`float`)
        * `maxWorkerProcesses` (`float`)
        * `pgStatStatementsTrack` (`str`)
        * `tempFileLimit` (`float`)
        * `timezone` (`str`)
        * `trackActivityQuerySize` (`float`)
        * `trackFunctions` (`str`)
        * `walWriterDelay` (`float`)

      * `pgReadReplica` (`str`)
      * `pgServiceToForkFrom` (`str`)
      * `pgVersion` (`str`)
      * `pgbouncer` (`dict`)
        * `serverResetQueryAlways` (`bool`)

      * `pglookout` (`dict`)
        * `maxFailoverReplicationTimeLag` (`float`)

      * `privateAccess` (`dict`)
        * `pg` (`str`)
        * `pgbouncer` (`str`)
        * `prometheus` (`str`)

      * `publicAccess` (`dict`)
        * `pg` (`str`)
        * `pgbouncer` (`str`)
        * `prometheus` (`str`)

      * `recoveryTargetTime` (`str`)
      * `serviceToForkFrom` (`str`)
      * `timescaledb` (`dict`)
        * `maxBackgroundWorkers` (`float`)

      * `variant` (`str`)

    The **redis_user_config** object supports the following:

      * `ipFilters` (`list`)
      * `migration` (`dict`)
        * `host` (`str`)
        * `password` (`str`)
        * `port` (`float`)
        * `ssl` (`bool`)
        * `username` (`str`)

      * `privateAccess` (`dict`)
        * `prometheus` (`str`)
        * `redis` (`str`)

      * `publicAccess` (`dict`)
        * `prometheus` (`str`)
        * `redis` (`str`)

      * `redisLfuDecayTime` (`float`)
      * `redisLfuLogFactor` (`float`)
      * `redisMaxmemoryPolicy` (`str`)
      * `redisNotifyKeyspaceEvents` (`str`)
      * `redisSsl` (`bool`)
      * `redisTimeout` (`float`)

    The **service_integrations** object supports the following:

      * `integration_type` (`str`)
      * `source_service_name` (`str`)
    """
    __args__ = dict()


    __args__['cassandra'] = cassandra
    __args__['cassandraUserConfig'] = cassandra_user_config
    __args__['cloudName'] = cloud_name
    __args__['components'] = components
    __args__['elasticsearch'] = elasticsearch
    __args__['elasticsearchUserConfig'] = elasticsearch_user_config
    __args__['grafana'] = grafana
    __args__['grafanaUserConfig'] = grafana_user_config
    __args__['influxdb'] = influxdb
    __args__['influxdbUserConfig'] = influxdb_user_config
    __args__['kafka'] = kafka
    __args__['kafkaConnect'] = kafka_connect
    __args__['kafkaConnectUserConfig'] = kafka_connect_user_config
    __args__['kafkaUserConfig'] = kafka_user_config
    __args__['maintenanceWindowDow'] = maintenance_window_dow
    __args__['maintenanceWindowTime'] = maintenance_window_time
    __args__['mysql'] = mysql
    __args__['mysqlUserConfig'] = mysql_user_config
    __args__['pg'] = pg
    __args__['pgUserConfig'] = pg_user_config
    __args__['plan'] = plan
    __args__['project'] = project
    __args__['projectVpcId'] = project_vpc_id
    __args__['redis'] = redis
    __args__['redisUserConfig'] = redis_user_config
    __args__['serviceHost'] = service_host
    __args__['serviceIntegrations'] = service_integrations
    __args__['serviceName'] = service_name
    __args__['servicePassword'] = service_password
    __args__['servicePort'] = service_port
    __args__['serviceType'] = service_type
    __args__['serviceUri'] = service_uri
    __args__['serviceUsername'] = service_username
    __args__['state'] = state
    __args__['terminationProtection'] = termination_protection
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getService:getService', __args__, opts=opts).value

    return AwaitableGetServiceResult(
        cassandra=__ret__.get('cassandra'),
        cassandra_user_config=__ret__.get('cassandraUserConfig'),
        cloud_name=__ret__.get('cloudName'),
        components=__ret__.get('components'),
        elasticsearch=__ret__.get('elasticsearch'),
        elasticsearch_user_config=__ret__.get('elasticsearchUserConfig'),
        grafana=__ret__.get('grafana'),
        grafana_user_config=__ret__.get('grafanaUserConfig'),
        id=__ret__.get('id'),
        influxdb=__ret__.get('influxdb'),
        influxdb_user_config=__ret__.get('influxdbUserConfig'),
        kafka=__ret__.get('kafka'),
        kafka_connect=__ret__.get('kafkaConnect'),
        kafka_connect_user_config=__ret__.get('kafkaConnectUserConfig'),
        kafka_user_config=__ret__.get('kafkaUserConfig'),
        maintenance_window_dow=__ret__.get('maintenanceWindowDow'),
        maintenance_window_time=__ret__.get('maintenanceWindowTime'),
        mysql=__ret__.get('mysql'),
        mysql_user_config=__ret__.get('mysqlUserConfig'),
        pg=__ret__.get('pg'),
        pg_user_config=__ret__.get('pgUserConfig'),
        plan=__ret__.get('plan'),
        project=__ret__.get('project'),
        project_vpc_id=__ret__.get('projectVpcId'),
        redis=__ret__.get('redis'),
        redis_user_config=__ret__.get('redisUserConfig'),
        service_host=__ret__.get('serviceHost'),
        service_integrations=__ret__.get('serviceIntegrations'),
        service_name=__ret__.get('serviceName'),
        service_password=__ret__.get('servicePassword'),
        service_port=__ret__.get('servicePort'),
        service_type=__ret__.get('serviceType'),
        service_uri=__ret__.get('serviceUri'),
        service_username=__ret__.get('serviceUsername'),
        state=__ret__.get('state'),
        termination_protection=__ret__.get('terminationProtection'))
