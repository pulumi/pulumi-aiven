# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetMirrorMakerReplicationFlowResult',
    'AwaitableGetMirrorMakerReplicationFlowResult',
    'get_mirror_maker_replication_flow',
    'get_mirror_maker_replication_flow_output',
]

@pulumi.output_type
class GetMirrorMakerReplicationFlowResult:
    """
    A collection of values returned by getMirrorMakerReplicationFlow.
    """
    def __init__(__self__, emit_heartbeats_enabled=None, enable=None, id=None, project=None, replication_policy_class=None, service_name=None, source_cluster=None, sync_group_offsets_enabled=None, sync_group_offsets_interval_seconds=None, target_cluster=None, topics=None, topics_blacklists=None):
        if emit_heartbeats_enabled and not isinstance(emit_heartbeats_enabled, bool):
            raise TypeError("Expected argument 'emit_heartbeats_enabled' to be a bool")
        pulumi.set(__self__, "emit_heartbeats_enabled", emit_heartbeats_enabled)
        if enable and not isinstance(enable, bool):
            raise TypeError("Expected argument 'enable' to be a bool")
        pulumi.set(__self__, "enable", enable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if replication_policy_class and not isinstance(replication_policy_class, str):
            raise TypeError("Expected argument 'replication_policy_class' to be a str")
        pulumi.set(__self__, "replication_policy_class", replication_policy_class)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if source_cluster and not isinstance(source_cluster, str):
            raise TypeError("Expected argument 'source_cluster' to be a str")
        pulumi.set(__self__, "source_cluster", source_cluster)
        if sync_group_offsets_enabled and not isinstance(sync_group_offsets_enabled, bool):
            raise TypeError("Expected argument 'sync_group_offsets_enabled' to be a bool")
        pulumi.set(__self__, "sync_group_offsets_enabled", sync_group_offsets_enabled)
        if sync_group_offsets_interval_seconds and not isinstance(sync_group_offsets_interval_seconds, int):
            raise TypeError("Expected argument 'sync_group_offsets_interval_seconds' to be a int")
        pulumi.set(__self__, "sync_group_offsets_interval_seconds", sync_group_offsets_interval_seconds)
        if target_cluster and not isinstance(target_cluster, str):
            raise TypeError("Expected argument 'target_cluster' to be a str")
        pulumi.set(__self__, "target_cluster", target_cluster)
        if topics and not isinstance(topics, list):
            raise TypeError("Expected argument 'topics' to be a list")
        pulumi.set(__self__, "topics", topics)
        if topics_blacklists and not isinstance(topics_blacklists, list):
            raise TypeError("Expected argument 'topics_blacklists' to be a list")
        pulumi.set(__self__, "topics_blacklists", topics_blacklists)

    @property
    @pulumi.getter(name="emitHeartbeatsEnabled")
    def emit_heartbeats_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "emit_heartbeats_enabled")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        enable of disable replication flows for a MirrorMaker service
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="replicationPolicyClass")
    def replication_policy_class(self) -> Optional[str]:
        return pulumi.get(self, "replication_policy_class")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="sourceCluster")
    def source_cluster(self) -> str:
        return pulumi.get(self, "source_cluster")

    @property
    @pulumi.getter(name="syncGroupOffsetsEnabled")
    def sync_group_offsets_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "sync_group_offsets_enabled")

    @property
    @pulumi.getter(name="syncGroupOffsetsIntervalSeconds")
    def sync_group_offsets_interval_seconds(self) -> Optional[int]:
        return pulumi.get(self, "sync_group_offsets_interval_seconds")

    @property
    @pulumi.getter(name="targetCluster")
    def target_cluster(self) -> str:
        return pulumi.get(self, "target_cluster")

    @property
    @pulumi.getter
    def topics(self) -> Optional[Sequence[str]]:
        """
        is a list of topics and/or regular expressions to replicate.
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter(name="topicsBlacklists")
    def topics_blacklists(self) -> Optional[Sequence[str]]:
        """
        is a list of topics and/or regular expressions to not replicate.
        """
        return pulumi.get(self, "topics_blacklists")


class AwaitableGetMirrorMakerReplicationFlowResult(GetMirrorMakerReplicationFlowResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMirrorMakerReplicationFlowResult(
            emit_heartbeats_enabled=self.emit_heartbeats_enabled,
            enable=self.enable,
            id=self.id,
            project=self.project,
            replication_policy_class=self.replication_policy_class,
            service_name=self.service_name,
            source_cluster=self.source_cluster,
            sync_group_offsets_enabled=self.sync_group_offsets_enabled,
            sync_group_offsets_interval_seconds=self.sync_group_offsets_interval_seconds,
            target_cluster=self.target_cluster,
            topics=self.topics,
            topics_blacklists=self.topics_blacklists)


def get_mirror_maker_replication_flow(emit_heartbeats_enabled: Optional[bool] = None,
                                      enable: Optional[bool] = None,
                                      project: Optional[str] = None,
                                      replication_policy_class: Optional[str] = None,
                                      service_name: Optional[str] = None,
                                      source_cluster: Optional[str] = None,
                                      sync_group_offsets_enabled: Optional[bool] = None,
                                      sync_group_offsets_interval_seconds: Optional[int] = None,
                                      target_cluster: Optional[str] = None,
                                      topics: Optional[Sequence[str]] = None,
                                      topics_blacklists: Optional[Sequence[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMirrorMakerReplicationFlowResult:
    """
    ## # MirrorMaker 2 Replication Flow Data Source

    The MirrorMaker 2 Replication Flow data source provides information about the existing MirrorMaker 2
    Replication Flow on Aiven Cloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aiven as aiven

    f1 = aiven.get_mirror_maker_replication_flow(project=aiven_project["kafka-mm-project1"]["project"],
        service_name=aiven_service["mm"]["service_name"],
        source_cluster=aiven_service["source"]["service_name"],
        target_cluster=aiven_service["target"]["service_name"])
    ```


    :param bool enable: enable of disable replication flows for a MirrorMaker service
    :param str project: and `service_name` - (Required) define the project and service the Kafka MirrorMaker Replication 
           Flow belongs to. They should be defined using reference as shown above to set up dependencies correctly.
    :param str source_cluster: is a source cluster alias.
    :param str target_cluster: is a target cluster alias.
    :param Sequence[str] topics: is a list of topics and/or regular expressions to replicate.
    :param Sequence[str] topics_blacklists: is a list of topics and/or regular expressions to not replicate.
    """
    __args__ = dict()
    __args__['emitHeartbeatsEnabled'] = emit_heartbeats_enabled
    __args__['enable'] = enable
    __args__['project'] = project
    __args__['replicationPolicyClass'] = replication_policy_class
    __args__['serviceName'] = service_name
    __args__['sourceCluster'] = source_cluster
    __args__['syncGroupOffsetsEnabled'] = sync_group_offsets_enabled
    __args__['syncGroupOffsetsIntervalSeconds'] = sync_group_offsets_interval_seconds
    __args__['targetCluster'] = target_cluster
    __args__['topics'] = topics
    __args__['topicsBlacklists'] = topics_blacklists
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getMirrorMakerReplicationFlow:getMirrorMakerReplicationFlow', __args__, opts=opts, typ=GetMirrorMakerReplicationFlowResult).value

    return AwaitableGetMirrorMakerReplicationFlowResult(
        emit_heartbeats_enabled=__ret__.emit_heartbeats_enabled,
        enable=__ret__.enable,
        id=__ret__.id,
        project=__ret__.project,
        replication_policy_class=__ret__.replication_policy_class,
        service_name=__ret__.service_name,
        source_cluster=__ret__.source_cluster,
        sync_group_offsets_enabled=__ret__.sync_group_offsets_enabled,
        sync_group_offsets_interval_seconds=__ret__.sync_group_offsets_interval_seconds,
        target_cluster=__ret__.target_cluster,
        topics=__ret__.topics,
        topics_blacklists=__ret__.topics_blacklists)


@_utilities.lift_output_func(get_mirror_maker_replication_flow)
def get_mirror_maker_replication_flow_output(emit_heartbeats_enabled: Optional[pulumi.Input[Optional[bool]]] = None,
                                             enable: Optional[pulumi.Input[Optional[bool]]] = None,
                                             project: Optional[pulumi.Input[str]] = None,
                                             replication_policy_class: Optional[pulumi.Input[Optional[str]]] = None,
                                             service_name: Optional[pulumi.Input[str]] = None,
                                             source_cluster: Optional[pulumi.Input[str]] = None,
                                             sync_group_offsets_enabled: Optional[pulumi.Input[Optional[bool]]] = None,
                                             sync_group_offsets_interval_seconds: Optional[pulumi.Input[Optional[int]]] = None,
                                             target_cluster: Optional[pulumi.Input[str]] = None,
                                             topics: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                             topics_blacklists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMirrorMakerReplicationFlowResult]:
    """
    ## # MirrorMaker 2 Replication Flow Data Source

    The MirrorMaker 2 Replication Flow data source provides information about the existing MirrorMaker 2
    Replication Flow on Aiven Cloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aiven as aiven

    f1 = aiven.get_mirror_maker_replication_flow(project=aiven_project["kafka-mm-project1"]["project"],
        service_name=aiven_service["mm"]["service_name"],
        source_cluster=aiven_service["source"]["service_name"],
        target_cluster=aiven_service["target"]["service_name"])
    ```


    :param bool enable: enable of disable replication flows for a MirrorMaker service
    :param str project: and `service_name` - (Required) define the project and service the Kafka MirrorMaker Replication 
           Flow belongs to. They should be defined using reference as shown above to set up dependencies correctly.
    :param str source_cluster: is a source cluster alias.
    :param str target_cluster: is a target cluster alias.
    :param Sequence[str] topics: is a list of topics and/or regular expressions to replicate.
    :param Sequence[str] topics_blacklists: is a list of topics and/or regular expressions to not replicate.
    """
    ...
