# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetConnectionPoolResult:
    """
    A collection of values returned by getConnectionPool.
    """
    def __init__(__self__, connection_uri=None, database_name=None, id=None, pool_mode=None, pool_name=None, pool_size=None, project=None, service_name=None, username=None):
        if connection_uri and not isinstance(connection_uri, str):
            raise TypeError("Expected argument 'connection_uri' to be a str")
        __self__.connection_uri = connection_uri
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        __self__.database_name = database_name
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if pool_mode and not isinstance(pool_mode, str):
            raise TypeError("Expected argument 'pool_mode' to be a str")
        __self__.pool_mode = pool_mode
        if pool_name and not isinstance(pool_name, str):
            raise TypeError("Expected argument 'pool_name' to be a str")
        __self__.pool_name = pool_name
        if pool_size and not isinstance(pool_size, float):
            raise TypeError("Expected argument 'pool_size' to be a float")
        __self__.pool_size = pool_size
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        __self__.project = project
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        __self__.service_name = service_name
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        __self__.username = username
class AwaitableGetConnectionPoolResult(GetConnectionPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionPoolResult(
            connection_uri=self.connection_uri,
            database_name=self.database_name,
            id=self.id,
            pool_mode=self.pool_mode,
            pool_name=self.pool_name,
            pool_size=self.pool_size,
            project=self.project,
            service_name=self.service_name,
            username=self.username)

def get_connection_pool(connection_uri=None,database_name=None,pool_mode=None,pool_name=None,pool_size=None,project=None,service_name=None,username=None,opts=None):
    """
    ## Example Usage



    ```python
    import pulumi
    import pulumi_aiven as aiven

    mytestpool = aiven.get_connection_pool(project=data[".Service"]["myservice"]["project"],
        service_name=data[".Service"]["myservice"]["service_name"],
        pool_name="<POOLNAME>")
    ```
    """
    __args__ = dict()


    __args__['connectionUri'] = connection_uri
    __args__['databaseName'] = database_name
    __args__['poolMode'] = pool_mode
    __args__['poolName'] = pool_name
    __args__['poolSize'] = pool_size
    __args__['project'] = project
    __args__['serviceName'] = service_name
    __args__['username'] = username
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getConnectionPool:getConnectionPool', __args__, opts=opts).value

    return AwaitableGetConnectionPoolResult(
        connection_uri=__ret__.get('connectionUri'),
        database_name=__ret__.get('databaseName'),
        id=__ret__.get('id'),
        pool_mode=__ret__.get('poolMode'),
        pool_name=__ret__.get('poolName'),
        pool_size=__ret__.get('poolSize'),
        project=__ret__.get('project'),
        service_name=__ret__.get('serviceName'),
        username=__ret__.get('username'))
