# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class KafkaMirrorMaker(pulumi.CustomResource):
    cloud_name: pulumi.Output[str]
    """
    Cloud the service runs in
    """
    components: pulumi.Output[list]
    """
    Service component information objects

      * `component` (`str`)
      * `host` (`str`)
      * `kafkaAuthenticationMethod` (`str`)
      * `port` (`float`)
      * `route` (`str`)
      * `ssl` (`bool`)
      * `usage` (`str`)
    """
    kafka_mirrormaker: pulumi.Output[dict]
    """
    Kafka MirrorMaker 2 server provided values
    """
    kafka_mirrormaker_user_config: pulumi.Output[dict]
    """
    Kafka MirrorMaker 2 specific user configurable settings

      * `ipFilters` (`list`)
      * `kafka_mirrormaker` (`dict`)
        * `refreshGroupsEnabled` (`str`)
        * `refreshGroupsIntervalSeconds` (`str`)
        * `refreshTopicsEnabled` (`str`)
        * `refreshTopicsIntervalSeconds` (`str`)
    """
    maintenance_window_dow: pulumi.Output[str]
    """
    Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
    """
    maintenance_window_time: pulumi.Output[str]
    """
    Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
    """
    plan: pulumi.Output[str]
    """
    Subscription plan
    """
    project: pulumi.Output[str]
    """
    Target project
    """
    project_vpc_id: pulumi.Output[str]
    """
    Identifier of the VPC the service should be in, if any
    """
    service_host: pulumi.Output[str]
    """
    Service hostname
    """
    service_integrations: pulumi.Output[list]
    """
    Service integrations to specify when creating a service. Not applied after initial service creation

      * `integration_type` (`str`)
      * `source_service_name` (`str`)
    """
    service_name: pulumi.Output[str]
    """
    Service name
    """
    service_password: pulumi.Output[str]
    """
    Password used for connecting to the service, if applicable
    """
    service_port: pulumi.Output[float]
    """
    Service port
    """
    service_type: pulumi.Output[str]
    """
    Aiven internal service type code
    """
    service_uri: pulumi.Output[str]
    """
    URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
    """
    service_username: pulumi.Output[str]
    """
    Username used for connecting to the service, if applicable
    """
    state: pulumi.Output[str]
    """
    Service state
    """
    termination_protection: pulumi.Output[bool]
    """
    Prevent service from being deleted. It is recommended to have this enabled for all services.
    """
    def __init__(__self__, resource_name, opts=None, cloud_name=None, kafka_mirrormaker=None, kafka_mirrormaker_user_config=None, maintenance_window_dow=None, maintenance_window_time=None, plan=None, project=None, project_vpc_id=None, service_integrations=None, service_name=None, termination_protection=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a KafkaMirrorMaker resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_name: Cloud the service runs in
        :param pulumi.Input[dict] kafka_mirrormaker: Kafka MirrorMaker 2 server provided values
        :param pulumi.Input[dict] kafka_mirrormaker_user_config: Kafka MirrorMaker 2 specific user configurable settings
        :param pulumi.Input[str] maintenance_window_dow: Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        :param pulumi.Input[str] maintenance_window_time: Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        :param pulumi.Input[str] plan: Subscription plan
        :param pulumi.Input[str] project: Target project
        :param pulumi.Input[str] project_vpc_id: Identifier of the VPC the service should be in, if any
        :param pulumi.Input[list] service_integrations: Service integrations to specify when creating a service. Not applied after initial service creation
        :param pulumi.Input[str] service_name: Service name
        :param pulumi.Input[bool] termination_protection: Prevent service from being deleted. It is recommended to have this enabled for all services.

        The **kafka_mirrormaker_user_config** object supports the following:

          * `ipFilters` (`pulumi.Input[list]`)
          * `kafka_mirrormaker` (`pulumi.Input[dict]`)
            * `refreshGroupsEnabled` (`pulumi.Input[str]`)
            * `refreshGroupsIntervalSeconds` (`pulumi.Input[str]`)
            * `refreshTopicsEnabled` (`pulumi.Input[str]`)
            * `refreshTopicsIntervalSeconds` (`pulumi.Input[str]`)

        The **service_integrations** object supports the following:

          * `integration_type` (`pulumi.Input[str]`)
          * `source_service_name` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['cloud_name'] = cloud_name
            __props__['kafka_mirrormaker'] = kafka_mirrormaker
            __props__['kafka_mirrormaker_user_config'] = kafka_mirrormaker_user_config
            __props__['maintenance_window_dow'] = maintenance_window_dow
            __props__['maintenance_window_time'] = maintenance_window_time
            __props__['plan'] = plan
            if project is None:
                raise TypeError("Missing required property 'project'")
            __props__['project'] = project
            __props__['project_vpc_id'] = project_vpc_id
            __props__['service_integrations'] = service_integrations
            if service_name is None:
                raise TypeError("Missing required property 'service_name'")
            __props__['service_name'] = service_name
            __props__['termination_protection'] = termination_protection
            __props__['components'] = None
            __props__['service_host'] = None
            __props__['service_password'] = None
            __props__['service_port'] = None
            __props__['service_type'] = None
            __props__['service_uri'] = None
            __props__['service_username'] = None
            __props__['state'] = None
        super(KafkaMirrorMaker, __self__).__init__(
            'aiven:index/kafkaMirrorMaker:KafkaMirrorMaker',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, cloud_name=None, components=None, kafka_mirrormaker=None, kafka_mirrormaker_user_config=None, maintenance_window_dow=None, maintenance_window_time=None, plan=None, project=None, project_vpc_id=None, service_host=None, service_integrations=None, service_name=None, service_password=None, service_port=None, service_type=None, service_uri=None, service_username=None, state=None, termination_protection=None):
        """
        Get an existing KafkaMirrorMaker resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_name: Cloud the service runs in
        :param pulumi.Input[list] components: Service component information objects
        :param pulumi.Input[dict] kafka_mirrormaker: Kafka MirrorMaker 2 server provided values
        :param pulumi.Input[dict] kafka_mirrormaker_user_config: Kafka MirrorMaker 2 specific user configurable settings
        :param pulumi.Input[str] maintenance_window_dow: Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        :param pulumi.Input[str] maintenance_window_time: Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        :param pulumi.Input[str] plan: Subscription plan
        :param pulumi.Input[str] project: Target project
        :param pulumi.Input[str] project_vpc_id: Identifier of the VPC the service should be in, if any
        :param pulumi.Input[str] service_host: Service hostname
        :param pulumi.Input[list] service_integrations: Service integrations to specify when creating a service. Not applied after initial service creation
        :param pulumi.Input[str] service_name: Service name
        :param pulumi.Input[str] service_password: Password used for connecting to the service, if applicable
        :param pulumi.Input[float] service_port: Service port
        :param pulumi.Input[str] service_type: Aiven internal service type code
        :param pulumi.Input[str] service_uri: URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        :param pulumi.Input[str] service_username: Username used for connecting to the service, if applicable
        :param pulumi.Input[str] state: Service state
        :param pulumi.Input[bool] termination_protection: Prevent service from being deleted. It is recommended to have this enabled for all services.

        The **components** object supports the following:

          * `component` (`pulumi.Input[str]`)
          * `host` (`pulumi.Input[str]`)
          * `kafkaAuthenticationMethod` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `route` (`pulumi.Input[str]`)
          * `ssl` (`pulumi.Input[bool]`)
          * `usage` (`pulumi.Input[str]`)

        The **kafka_mirrormaker_user_config** object supports the following:

          * `ipFilters` (`pulumi.Input[list]`)
          * `kafka_mirrormaker` (`pulumi.Input[dict]`)
            * `refreshGroupsEnabled` (`pulumi.Input[str]`)
            * `refreshGroupsIntervalSeconds` (`pulumi.Input[str]`)
            * `refreshTopicsEnabled` (`pulumi.Input[str]`)
            * `refreshTopicsIntervalSeconds` (`pulumi.Input[str]`)

        The **service_integrations** object supports the following:

          * `integration_type` (`pulumi.Input[str]`)
          * `source_service_name` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["cloud_name"] = cloud_name
        __props__["components"] = components
        __props__["kafka_mirrormaker"] = kafka_mirrormaker
        __props__["kafka_mirrormaker_user_config"] = kafka_mirrormaker_user_config
        __props__["maintenance_window_dow"] = maintenance_window_dow
        __props__["maintenance_window_time"] = maintenance_window_time
        __props__["plan"] = plan
        __props__["project"] = project
        __props__["project_vpc_id"] = project_vpc_id
        __props__["service_host"] = service_host
        __props__["service_integrations"] = service_integrations
        __props__["service_name"] = service_name
        __props__["service_password"] = service_password
        __props__["service_port"] = service_port
        __props__["service_type"] = service_type
        __props__["service_uri"] = service_uri
        __props__["service_username"] = service_username
        __props__["state"] = state
        __props__["termination_protection"] = termination_protection
        return KafkaMirrorMaker(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
