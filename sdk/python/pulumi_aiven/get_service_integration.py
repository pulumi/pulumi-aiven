# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetServiceIntegrationResult:
    """
    A collection of values returned by getServiceIntegration.
    """
    def __init__(__self__, destination_endpoint_id=None, destination_service_name=None, id=None, integration_type=None, kafka_connect_user_config=None, kafka_mirrormaker_user_config=None, logs_user_config=None, mirrormaker_user_config=None, project=None, source_endpoint_id=None, source_service_name=None):
        if destination_endpoint_id and not isinstance(destination_endpoint_id, str):
            raise TypeError("Expected argument 'destination_endpoint_id' to be a str")
        __self__.destination_endpoint_id = destination_endpoint_id
        if destination_service_name and not isinstance(destination_service_name, str):
            raise TypeError("Expected argument 'destination_service_name' to be a str")
        __self__.destination_service_name = destination_service_name
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if integration_type and not isinstance(integration_type, str):
            raise TypeError("Expected argument 'integration_type' to be a str")
        __self__.integration_type = integration_type
        if kafka_connect_user_config and not isinstance(kafka_connect_user_config, dict):
            raise TypeError("Expected argument 'kafka_connect_user_config' to be a dict")
        __self__.kafka_connect_user_config = kafka_connect_user_config
        if kafka_mirrormaker_user_config and not isinstance(kafka_mirrormaker_user_config, dict):
            raise TypeError("Expected argument 'kafka_mirrormaker_user_config' to be a dict")
        __self__.kafka_mirrormaker_user_config = kafka_mirrormaker_user_config
        if logs_user_config and not isinstance(logs_user_config, dict):
            raise TypeError("Expected argument 'logs_user_config' to be a dict")
        __self__.logs_user_config = logs_user_config
        if mirrormaker_user_config and not isinstance(mirrormaker_user_config, dict):
            raise TypeError("Expected argument 'mirrormaker_user_config' to be a dict")
        __self__.mirrormaker_user_config = mirrormaker_user_config
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        __self__.project = project
        if source_endpoint_id and not isinstance(source_endpoint_id, str):
            raise TypeError("Expected argument 'source_endpoint_id' to be a str")
        __self__.source_endpoint_id = source_endpoint_id
        if source_service_name and not isinstance(source_service_name, str):
            raise TypeError("Expected argument 'source_service_name' to be a str")
        __self__.source_service_name = source_service_name


class AwaitableGetServiceIntegrationResult(GetServiceIntegrationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceIntegrationResult(
            destination_endpoint_id=self.destination_endpoint_id,
            destination_service_name=self.destination_service_name,
            id=self.id,
            integration_type=self.integration_type,
            kafka_connect_user_config=self.kafka_connect_user_config,
            kafka_mirrormaker_user_config=self.kafka_mirrormaker_user_config,
            logs_user_config=self.logs_user_config,
            mirrormaker_user_config=self.mirrormaker_user_config,
            project=self.project,
            source_endpoint_id=self.source_endpoint_id,
            source_service_name=self.source_service_name)


def get_service_integration(destination_endpoint_id=None, destination_service_name=None, integration_type=None, kafka_connect_user_config=None, kafka_mirrormaker_user_config=None, logs_user_config=None, mirrormaker_user_config=None, project=None, source_endpoint_id=None, source_service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.


    The **kafka_connect_user_config** object supports the following:

      * `kafka_connect` (`dict`)
        * `configStorageTopic` (`str`)
        * `groupId` (`str`)
        * `offsetStorageTopic` (`str`)
        * `statusStorageTopic` (`str`)

    The **kafka_mirrormaker_user_config** object supports the following:

      * `clusterAlias` (`str`)

    The **logs_user_config** object supports the following:

      * `elasticsearchIndexDaysMax` (`str`)
      * `elasticsearchIndexPrefix` (`str`)

    The **mirrormaker_user_config** object supports the following:

      * `mirrormakerWhitelist` (`str`)
    """
    __args__ = dict()
    __args__['destinationEndpointId'] = destination_endpoint_id
    __args__['destinationServiceName'] = destination_service_name
    __args__['integrationType'] = integration_type
    __args__['kafkaConnectUserConfig'] = kafka_connect_user_config
    __args__['kafkaMirrormakerUserConfig'] = kafka_mirrormaker_user_config
    __args__['logsUserConfig'] = logs_user_config
    __args__['mirrormakerUserConfig'] = mirrormaker_user_config
    __args__['project'] = project
    __args__['sourceEndpointId'] = source_endpoint_id
    __args__['sourceServiceName'] = source_service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getServiceIntegration:getServiceIntegration', __args__, opts=opts).value

    return AwaitableGetServiceIntegrationResult(
        destination_endpoint_id=__ret__.get('destinationEndpointId'),
        destination_service_name=__ret__.get('destinationServiceName'),
        id=__ret__.get('id'),
        integration_type=__ret__.get('integrationType'),
        kafka_connect_user_config=__ret__.get('kafkaConnectUserConfig'),
        kafka_mirrormaker_user_config=__ret__.get('kafkaMirrormakerUserConfig'),
        logs_user_config=__ret__.get('logsUserConfig'),
        mirrormaker_user_config=__ret__.get('mirrormakerUserConfig'),
        project=__ret__.get('project'),
        source_endpoint_id=__ret__.get('sourceEndpointId'),
        source_service_name=__ret__.get('sourceServiceName'))
