# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RedisUserArgs', 'RedisUser']

@pulumi.input_type
class RedisUserArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 redis_acl_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a RedisUser resource.
        :param pulumi.Input[str] project: Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[str] service_name: Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[str] username: The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[str] password: The password of the Redis User.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_categories: Defines command category rules. The field is required with`redis_acl_commands` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_channels: Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_commands: Defines rules for individual commands. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_keys: Defines key access rules. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        RedisUserArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            project=project,
            service_name=service_name,
            username=username,
            password=password,
            redis_acl_categories=redis_acl_categories,
            redis_acl_channels=redis_acl_channels,
            redis_acl_commands=redis_acl_commands,
            redis_acl_keys=redis_acl_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             project: pulumi.Input[str],
             service_name: pulumi.Input[str],
             username: pulumi.Input[str],
             password: Optional[pulumi.Input[str]] = None,
             redis_acl_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             redis_acl_channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             redis_acl_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             redis_acl_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("project", project)
        _setter("service_name", service_name)
        _setter("username", username)
        if password is not None:
            _setter("password", password)
        if redis_acl_categories is not None:
            _setter("redis_acl_categories", redis_acl_categories)
        if redis_acl_channels is not None:
            _setter("redis_acl_channels", redis_acl_channels)
        if redis_acl_commands is not None:
            _setter("redis_acl_commands", redis_acl_commands)
        if redis_acl_keys is not None:
            _setter("redis_acl_keys", redis_acl_keys)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the Redis User.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="redisAclCategories")
    def redis_acl_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Defines command category rules. The field is required with`redis_acl_commands` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_categories")

    @redis_acl_categories.setter
    def redis_acl_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redis_acl_categories", value)

    @property
    @pulumi.getter(name="redisAclChannels")
    def redis_acl_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_channels")

    @redis_acl_channels.setter
    def redis_acl_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redis_acl_channels", value)

    @property
    @pulumi.getter(name="redisAclCommands")
    def redis_acl_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Defines rules for individual commands. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_commands")

    @redis_acl_commands.setter
    def redis_acl_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redis_acl_commands", value)

    @property
    @pulumi.getter(name="redisAclKeys")
    def redis_acl_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Defines key access rules. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_keys")

    @redis_acl_keys.setter
    def redis_acl_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redis_acl_keys", value)


@pulumi.input_type
class _RedisUserState:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 redis_acl_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RedisUser resources.
        :param pulumi.Input[str] password: The password of the Redis User.
        :param pulumi.Input[str] project: Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_categories: Defines command category rules. The field is required with`redis_acl_commands` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_channels: Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_commands: Defines rules for individual commands. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_keys: Defines key access rules. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[str] service_name: Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[str] type: Type of the user account. Tells whether the user is the primary account or a regular account.
        :param pulumi.Input[str] username: The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        _RedisUserState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            project=project,
            redis_acl_categories=redis_acl_categories,
            redis_acl_channels=redis_acl_channels,
            redis_acl_commands=redis_acl_commands,
            redis_acl_keys=redis_acl_keys,
            service_name=service_name,
            type=type,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: Optional[pulumi.Input[str]] = None,
             project: Optional[pulumi.Input[str]] = None,
             redis_acl_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             redis_acl_channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             redis_acl_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             redis_acl_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             service_name: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if password is not None:
            _setter("password", password)
        if project is not None:
            _setter("project", project)
        if redis_acl_categories is not None:
            _setter("redis_acl_categories", redis_acl_categories)
        if redis_acl_channels is not None:
            _setter("redis_acl_channels", redis_acl_channels)
        if redis_acl_commands is not None:
            _setter("redis_acl_commands", redis_acl_commands)
        if redis_acl_keys is not None:
            _setter("redis_acl_keys", redis_acl_keys)
        if service_name is not None:
            _setter("service_name", service_name)
        if type is not None:
            _setter("type", type)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the Redis User.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="redisAclCategories")
    def redis_acl_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Defines command category rules. The field is required with`redis_acl_commands` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_categories")

    @redis_acl_categories.setter
    def redis_acl_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redis_acl_categories", value)

    @property
    @pulumi.getter(name="redisAclChannels")
    def redis_acl_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_channels")

    @redis_acl_channels.setter
    def redis_acl_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redis_acl_channels", value)

    @property
    @pulumi.getter(name="redisAclCommands")
    def redis_acl_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Defines rules for individual commands. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_commands")

    @redis_acl_commands.setter
    def redis_acl_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redis_acl_commands", value)

    @property
    @pulumi.getter(name="redisAclKeys")
    def redis_acl_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Defines key access rules. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_keys")

    @redis_acl_keys.setter
    def redis_acl_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redis_acl_keys", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the user account. Tells whether the user is the primary account or a regular account.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class RedisUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 redis_acl_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The Redis User resource allows the creation and management of Aiven Redis Users.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aiven as aiven

        foo = aiven.RedisUser("foo",
            service_name=aiven_redis["bar"]["service_name"],
            project="my-project",
            username="user-1",
            password="Test$1234")
        ```

        ## Import

        ```sh
         $ pulumi import aiven:index/redisUser:RedisUser foo project/service_name/username
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] password: The password of the Redis User.
        :param pulumi.Input[str] project: Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_categories: Defines command category rules. The field is required with`redis_acl_commands` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_channels: Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_commands: Defines rules for individual commands. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_keys: Defines key access rules. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[str] service_name: Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[str] username: The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RedisUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The Redis User resource allows the creation and management of Aiven Redis Users.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aiven as aiven

        foo = aiven.RedisUser("foo",
            service_name=aiven_redis["bar"]["service_name"],
            project="my-project",
            username="user-1",
            password="Test$1234")
        ```

        ## Import

        ```sh
         $ pulumi import aiven:index/redisUser:RedisUser foo project/service_name/username
        ```

        :param str resource_name: The name of the resource.
        :param RedisUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RedisUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            RedisUserArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 redis_acl_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redis_acl_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RedisUserArgs.__new__(RedisUserArgs)

            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["redis_acl_categories"] = redis_acl_categories
            __props__.__dict__["redis_acl_channels"] = redis_acl_channels
            __props__.__dict__["redis_acl_commands"] = redis_acl_commands
            __props__.__dict__["redis_acl_keys"] = redis_acl_keys
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(RedisUser, __self__).__init__(
            'aiven:index/redisUser:RedisUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            password: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            redis_acl_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            redis_acl_channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            redis_acl_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            redis_acl_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service_name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'RedisUser':
        """
        Get an existing RedisUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] password: The password of the Redis User.
        :param pulumi.Input[str] project: Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_categories: Defines command category rules. The field is required with`redis_acl_commands` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_channels: Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_commands: Defines rules for individual commands. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redis_acl_keys: Defines key access rules. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[str] service_name: Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        :param pulumi.Input[str] type: Type of the user account. Tells whether the user is the primary account or a regular account.
        :param pulumi.Input[str] username: The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RedisUserState.__new__(_RedisUserState)

        __props__.__dict__["password"] = password
        __props__.__dict__["project"] = project
        __props__.__dict__["redis_acl_categories"] = redis_acl_categories
        __props__.__dict__["redis_acl_channels"] = redis_acl_channels
        __props__.__dict__["redis_acl_commands"] = redis_acl_commands
        __props__.__dict__["redis_acl_keys"] = redis_acl_keys
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["type"] = type
        __props__.__dict__["username"] = username
        return RedisUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The password of the Redis User.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="redisAclCategories")
    def redis_acl_categories(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Defines command category rules. The field is required with`redis_acl_commands` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_categories")

    @property
    @pulumi.getter(name="redisAclChannels")
    def redis_acl_channels(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_channels")

    @property
    @pulumi.getter(name="redisAclCommands")
    def redis_acl_commands(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Defines rules for individual commands. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_commands")

    @property
    @pulumi.getter(name="redisAclKeys")
    def redis_acl_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Defines key access rules. The field is required with`redis_acl_categories` and `redis_acl_keys`. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "redis_acl_keys")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the user account. Tells whether the user is the primary account or a regular account.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        """
        return pulumi.get(self, "username")

