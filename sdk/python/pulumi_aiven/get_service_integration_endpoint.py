# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetServiceIntegrationEndpointResult:
    """
    A collection of values returned by getServiceIntegrationEndpoint.
    """
    def __init__(__self__, datadog_user_config=None, endpoint_config=None, endpoint_name=None, endpoint_type=None, external_elasticsearch_logs_user_config=None, id=None, project=None, prometheus_user_config=None, rsyslog_user_config=None):
        if datadog_user_config and not isinstance(datadog_user_config, dict):
            raise TypeError("Expected argument 'datadog_user_config' to be a dict")
        __self__.datadog_user_config = datadog_user_config
        if endpoint_config and not isinstance(endpoint_config, dict):
            raise TypeError("Expected argument 'endpoint_config' to be a dict")
        __self__.endpoint_config = endpoint_config
        if endpoint_name and not isinstance(endpoint_name, str):
            raise TypeError("Expected argument 'endpoint_name' to be a str")
        __self__.endpoint_name = endpoint_name
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        __self__.endpoint_type = endpoint_type
        if external_elasticsearch_logs_user_config and not isinstance(external_elasticsearch_logs_user_config, dict):
            raise TypeError("Expected argument 'external_elasticsearch_logs_user_config' to be a dict")
        __self__.external_elasticsearch_logs_user_config = external_elasticsearch_logs_user_config
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        __self__.project = project
        if prometheus_user_config and not isinstance(prometheus_user_config, dict):
            raise TypeError("Expected argument 'prometheus_user_config' to be a dict")
        __self__.prometheus_user_config = prometheus_user_config
        if rsyslog_user_config and not isinstance(rsyslog_user_config, dict):
            raise TypeError("Expected argument 'rsyslog_user_config' to be a dict")
        __self__.rsyslog_user_config = rsyslog_user_config


class AwaitableGetServiceIntegrationEndpointResult(GetServiceIntegrationEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceIntegrationEndpointResult(
            datadog_user_config=self.datadog_user_config,
            endpoint_config=self.endpoint_config,
            endpoint_name=self.endpoint_name,
            endpoint_type=self.endpoint_type,
            external_elasticsearch_logs_user_config=self.external_elasticsearch_logs_user_config,
            id=self.id,
            project=self.project,
            prometheus_user_config=self.prometheus_user_config,
            rsyslog_user_config=self.rsyslog_user_config)


def get_service_integration_endpoint(datadog_user_config=None, endpoint_config=None, endpoint_name=None, endpoint_type=None, external_elasticsearch_logs_user_config=None, project=None, prometheus_user_config=None, rsyslog_user_config=None, opts=None):
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_aiven as aiven

    myendpoint = aiven.get_service_integration_endpoint(project=data["aiven_project"]["myproject"]["project"],
        endpoint_name="<ENDPOINT_NAME>")
    ```



    The **datadog_user_config** object supports the following:

      * `datadogApiKey` (`str`)
      * `disableConsumerStats` (`str`)
      * `maxPartitionContexts` (`str`)
      * `site` (`str`)

    The **external_elasticsearch_logs_user_config** object supports the following:

      * `ca` (`str`)
      * `indexDaysMax` (`str`)
      * `indexPrefix` (`str`)
      * `timeout` (`str`)
      * `url` (`str`)

    The **prometheus_user_config** object supports the following:

      * `basicAuthPassword` (`str`)
      * `basicAuthUsername` (`str`)

    The **rsyslog_user_config** object supports the following:

      * `ca` (`str`)
      * `cert` (`str`)
      * `format` (`str`)
      * `key` (`str`)
      * `logline` (`str`)
      * `port` (`str`)
      * `sd` (`str`)
      * `server` (`str`)
      * `tls` (`str`)
    """
    __args__ = dict()
    __args__['datadogUserConfig'] = datadog_user_config
    __args__['endpointConfig'] = endpoint_config
    __args__['endpointName'] = endpoint_name
    __args__['endpointType'] = endpoint_type
    __args__['externalElasticsearchLogsUserConfig'] = external_elasticsearch_logs_user_config
    __args__['project'] = project
    __args__['prometheusUserConfig'] = prometheus_user_config
    __args__['rsyslogUserConfig'] = rsyslog_user_config
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getServiceIntegrationEndpoint:getServiceIntegrationEndpoint', __args__, opts=opts).value

    return AwaitableGetServiceIntegrationEndpointResult(
        datadog_user_config=__ret__.get('datadogUserConfig'),
        endpoint_config=__ret__.get('endpointConfig'),
        endpoint_name=__ret__.get('endpointName'),
        endpoint_type=__ret__.get('endpointType'),
        external_elasticsearch_logs_user_config=__ret__.get('externalElasticsearchLogsUserConfig'),
        id=__ret__.get('id'),
        project=__ret__.get('project'),
        prometheus_user_config=__ret__.get('prometheusUserConfig'),
        rsyslog_user_config=__ret__.get('rsyslogUserConfig'))
