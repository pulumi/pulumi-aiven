# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetServiceUserResult:
    """
    A collection of values returned by getServiceUser.
    """
    def __init__(__self__, access_cert=None, access_key=None, id=None, password=None, project=None, service_name=None, type=None, username=None):
        if access_cert and not isinstance(access_cert, str):
            raise TypeError("Expected argument 'access_cert' to be a str")
        __self__.access_cert = access_cert
        if access_key and not isinstance(access_key, str):
            raise TypeError("Expected argument 'access_key' to be a str")
        __self__.access_key = access_key
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        __self__.password = password
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        __self__.project = project
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        __self__.service_name = service_name
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        __self__.username = username
class AwaitableGetServiceUserResult(GetServiceUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceUserResult(
            access_cert=self.access_cert,
            access_key=self.access_key,
            id=self.id,
            password=self.password,
            project=self.project,
            service_name=self.service_name,
            type=self.type,
            username=self.username)

def get_service_user(access_cert=None,access_key=None,password=None,project=None,service_name=None,type=None,username=None,opts=None):
    """
    ## Example Usage



    ```python
    import pulumi
    import pulumi_aiven as aiven

    myserviceuser = aiven.get_service_user(project=data[".Service"]["myservice"]["project"],
        service_name=data[".Service"]["myservice"]["service_name"],
        username="<USERNAME>")
    ```
    """
    __args__ = dict()


    __args__['accessCert'] = access_cert
    __args__['accessKey'] = access_key
    __args__['password'] = password
    __args__['project'] = project
    __args__['serviceName'] = service_name
    __args__['type'] = type
    __args__['username'] = username
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getServiceUser:getServiceUser', __args__, opts=opts).value

    return AwaitableGetServiceUserResult(
        access_cert=__ret__.get('accessCert'),
        access_key=__ret__.get('accessKey'),
        id=__ret__.get('id'),
        password=__ret__.get('password'),
        project=__ret__.get('project'),
        service_name=__ret__.get('serviceName'),
        type=__ret__.get('type'),
        username=__ret__.get('username'))
