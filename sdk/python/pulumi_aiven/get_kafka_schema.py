# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetKafkaSchemaResult:
    """
    A collection of values returned by getKafkaSchema.
    """
    def __init__(__self__, id=None, project=None, schema=None, service_name=None, subject_name=None, version=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        __self__.project = project
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        __self__.schema = schema
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        __self__.service_name = service_name
        if subject_name and not isinstance(subject_name, str):
            raise TypeError("Expected argument 'subject_name' to be a str")
        __self__.subject_name = subject_name
        if version and not isinstance(version, float):
            raise TypeError("Expected argument 'version' to be a float")
        __self__.version = version
class AwaitableGetKafkaSchemaResult(GetKafkaSchemaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkaSchemaResult(
            id=self.id,
            project=self.project,
            schema=self.schema,
            service_name=self.service_name,
            subject_name=self.subject_name,
            version=self.version)

def get_kafka_schema(project=None,schema=None,service_name=None,subject_name=None,version=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['project'] = project
    __args__['schema'] = schema
    __args__['serviceName'] = service_name
    __args__['subjectName'] = subject_name
    __args__['version'] = version
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getKafkaSchema:getKafkaSchema', __args__, opts=opts).value

    return AwaitableGetKafkaSchemaResult(
        id=__ret__.get('id'),
        project=__ret__.get('project'),
        schema=__ret__.get('schema'),
        service_name=__ret__.get('serviceName'),
        subject_name=__ret__.get('subjectName'),
        version=__ret__.get('version'))
