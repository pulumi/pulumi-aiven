# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetOrganizationAddressResult',
    'AwaitableGetOrganizationAddressResult',
    'get_organization_address',
    'get_organization_address_output',
]

@pulumi.output_type
class GetOrganizationAddressResult:
    """
    A collection of values returned by getOrganizationAddress.
    """
    def __init__(__self__, address_id=None, address_lines=None, city=None, company_name=None, country_code=None, create_time=None, id=None, organization_id=None, state=None, update_time=None, zip_code=None):
        if address_id and not isinstance(address_id, str):
            raise TypeError("Expected argument 'address_id' to be a str")
        pulumi.set(__self__, "address_id", address_id)
        if address_lines and not isinstance(address_lines, list):
            raise TypeError("Expected argument 'address_lines' to be a list")
        pulumi.set(__self__, "address_lines", address_lines)
        if city and not isinstance(city, str):
            raise TypeError("Expected argument 'city' to be a str")
        pulumi.set(__self__, "city", city)
        if company_name and not isinstance(company_name, str):
            raise TypeError("Expected argument 'company_name' to be a str")
        pulumi.set(__self__, "company_name", company_name)
        if country_code and not isinstance(country_code, str):
            raise TypeError("Expected argument 'country_code' to be a str")
        pulumi.set(__self__, "country_code", country_code)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if zip_code and not isinstance(zip_code, str):
            raise TypeError("Expected argument 'zip_code' to be a str")
        pulumi.set(__self__, "zip_code", zip_code)

    @property
    @pulumi.getter(name="addressId")
    def address_id(self) -> builtins.str:
        """
        ID of the address.
        """
        return pulumi.get(self, "address_id")

    @property
    @pulumi.getter(name="addressLines")
    def address_lines(self) -> Sequence[builtins.str]:
        """
        Array of address lines.
        """
        return pulumi.get(self, "address_lines")

    @property
    @pulumi.getter
    def city(self) -> builtins.str:
        """
        City name.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> builtins.str:
        """
        Name of the company.
        """
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> builtins.str:
        """
        Country code.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> builtins.str:
        """
        Timestamp of the creation.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Resource ID, a composite of organization*id and address*id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> builtins.str:
        """
        ID of organization.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        State name.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> builtins.str:
        """
        Timestamp of the last update.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="zipCode")
    def zip_code(self) -> builtins.str:
        """
        Zip code.
        """
        return pulumi.get(self, "zip_code")


class AwaitableGetOrganizationAddressResult(GetOrganizationAddressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationAddressResult(
            address_id=self.address_id,
            address_lines=self.address_lines,
            city=self.city,
            company_name=self.company_name,
            country_code=self.country_code,
            create_time=self.create_time,
            id=self.id,
            organization_id=self.organization_id,
            state=self.state,
            update_time=self.update_time,
            zip_code=self.zip_code)


def get_organization_address(address_id: Optional[builtins.str] = None,
                             organization_id: Optional[builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationAddressResult:
    """
    Gets information about an organization address.


    :param builtins.str address_id: ID of the address.
    :param builtins.str organization_id: ID of organization.
    """
    __args__ = dict()
    __args__['addressId'] = address_id
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aiven:index/getOrganizationAddress:getOrganizationAddress', __args__, opts=opts, typ=GetOrganizationAddressResult).value

    return AwaitableGetOrganizationAddressResult(
        address_id=pulumi.get(__ret__, 'address_id'),
        address_lines=pulumi.get(__ret__, 'address_lines'),
        city=pulumi.get(__ret__, 'city'),
        company_name=pulumi.get(__ret__, 'company_name'),
        country_code=pulumi.get(__ret__, 'country_code'),
        create_time=pulumi.get(__ret__, 'create_time'),
        id=pulumi.get(__ret__, 'id'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'),
        zip_code=pulumi.get(__ret__, 'zip_code'))
def get_organization_address_output(address_id: Optional[pulumi.Input[builtins.str]] = None,
                                    organization_id: Optional[pulumi.Input[builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrganizationAddressResult]:
    """
    Gets information about an organization address.


    :param builtins.str address_id: ID of the address.
    :param builtins.str organization_id: ID of organization.
    """
    __args__ = dict()
    __args__['addressId'] = address_id
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aiven:index/getOrganizationAddress:getOrganizationAddress', __args__, opts=opts, typ=GetOrganizationAddressResult)
    return __ret__.apply(lambda __response__: GetOrganizationAddressResult(
        address_id=pulumi.get(__response__, 'address_id'),
        address_lines=pulumi.get(__response__, 'address_lines'),
        city=pulumi.get(__response__, 'city'),
        company_name=pulumi.get(__response__, 'company_name'),
        country_code=pulumi.get(__response__, 'country_code'),
        create_time=pulumi.get(__response__, 'create_time'),
        id=pulumi.get(__response__, 'id'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        state=pulumi.get(__response__, 'state'),
        update_time=pulumi.get(__response__, 'update_time'),
        zip_code=pulumi.get(__response__, 'zip_code')))
