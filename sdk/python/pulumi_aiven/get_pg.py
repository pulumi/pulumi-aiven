# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = [
    'GetPgResult',
    'AwaitableGetPgResult',
    'get_pg',
]

@pulumi.output_type
class GetPgResult:
    """
    A collection of values returned by getPg.
    """
    def __init__(__self__, cloud_name=None, components=None, id=None, maintenance_window_dow=None, maintenance_window_time=None, pg=None, pg_user_config=None, plan=None, project=None, project_vpc_id=None, service_host=None, service_integrations=None, service_name=None, service_password=None, service_port=None, service_type=None, service_uri=None, service_username=None, state=None, termination_protection=None):
        if cloud_name and not isinstance(cloud_name, str):
            raise TypeError("Expected argument 'cloud_name' to be a str")
        pulumi.set(__self__, "cloud_name", cloud_name)
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        pulumi.set(__self__, "components", components)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if maintenance_window_dow and not isinstance(maintenance_window_dow, str):
            raise TypeError("Expected argument 'maintenance_window_dow' to be a str")
        pulumi.set(__self__, "maintenance_window_dow", maintenance_window_dow)
        if maintenance_window_time and not isinstance(maintenance_window_time, str):
            raise TypeError("Expected argument 'maintenance_window_time' to be a str")
        pulumi.set(__self__, "maintenance_window_time", maintenance_window_time)
        if pg and not isinstance(pg, dict):
            raise TypeError("Expected argument 'pg' to be a dict")
        pulumi.set(__self__, "pg", pg)
        if pg_user_config and not isinstance(pg_user_config, dict):
            raise TypeError("Expected argument 'pg_user_config' to be a dict")
        pulumi.set(__self__, "pg_user_config", pg_user_config)
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        pulumi.set(__self__, "plan", plan)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if project_vpc_id and not isinstance(project_vpc_id, str):
            raise TypeError("Expected argument 'project_vpc_id' to be a str")
        pulumi.set(__self__, "project_vpc_id", project_vpc_id)
        if service_host and not isinstance(service_host, str):
            raise TypeError("Expected argument 'service_host' to be a str")
        pulumi.set(__self__, "service_host", service_host)
        if service_integrations and not isinstance(service_integrations, list):
            raise TypeError("Expected argument 'service_integrations' to be a list")
        pulumi.set(__self__, "service_integrations", service_integrations)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if service_password and not isinstance(service_password, str):
            raise TypeError("Expected argument 'service_password' to be a str")
        pulumi.set(__self__, "service_password", service_password)
        if service_port and not isinstance(service_port, float):
            raise TypeError("Expected argument 'service_port' to be a float")
        pulumi.set(__self__, "service_port", service_port)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if service_uri and not isinstance(service_uri, str):
            raise TypeError("Expected argument 'service_uri' to be a str")
        pulumi.set(__self__, "service_uri", service_uri)
        if service_username and not isinstance(service_username, str):
            raise TypeError("Expected argument 'service_username' to be a str")
        pulumi.set(__self__, "service_username", service_username)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if termination_protection and not isinstance(termination_protection, bool):
            raise TypeError("Expected argument 'termination_protection' to be a bool")
        pulumi.set(__self__, "termination_protection", termination_protection)

    @property
    @pulumi.getter(name="cloudName")
    def cloud_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_name")

    @property
    @pulumi.getter
    def components(self) -> List['outputs.GetPgComponentResult']:
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maintenanceWindowDow")
    def maintenance_window_dow(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_window_dow")

    @property
    @pulumi.getter(name="maintenanceWindowTime")
    def maintenance_window_time(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_window_time")

    @property
    @pulumi.getter
    def pg(self) -> 'outputs.GetPgPgResult':
        return pulumi.get(self, "pg")

    @property
    @pulumi.getter(name="pgUserConfig")
    def pg_user_config(self) -> Optional['outputs.GetPgPgUserConfigResult']:
        return pulumi.get(self, "pg_user_config")

    @property
    @pulumi.getter
    def plan(self) -> Optional[str]:
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="projectVpcId")
    def project_vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "project_vpc_id")

    @property
    @pulumi.getter(name="serviceHost")
    def service_host(self) -> str:
        return pulumi.get(self, "service_host")

    @property
    @pulumi.getter(name="serviceIntegrations")
    def service_integrations(self) -> Optional[List['outputs.GetPgServiceIntegrationResult']]:
        return pulumi.get(self, "service_integrations")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="servicePassword")
    def service_password(self) -> str:
        return pulumi.get(self, "service_password")

    @property
    @pulumi.getter(name="servicePort")
    def service_port(self) -> float:
        return pulumi.get(self, "service_port")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        return pulumi.get(self, "service_uri")

    @property
    @pulumi.getter(name="serviceUsername")
    def service_username(self) -> str:
        return pulumi.get(self, "service_username")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[bool]:
        return pulumi.get(self, "termination_protection")


class AwaitableGetPgResult(GetPgResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPgResult(
            cloud_name=self.cloud_name,
            components=self.components,
            id=self.id,
            maintenance_window_dow=self.maintenance_window_dow,
            maintenance_window_time=self.maintenance_window_time,
            pg=self.pg,
            pg_user_config=self.pg_user_config,
            plan=self.plan,
            project=self.project,
            project_vpc_id=self.project_vpc_id,
            service_host=self.service_host,
            service_integrations=self.service_integrations,
            service_name=self.service_name,
            service_password=self.service_password,
            service_port=self.service_port,
            service_type=self.service_type,
            service_uri=self.service_uri,
            service_username=self.service_username,
            state=self.state,
            termination_protection=self.termination_protection)


def get_pg(cloud_name: Optional[str] = None,
           components: Optional[List[pulumi.InputType['GetPgComponentArgs']]] = None,
           maintenance_window_dow: Optional[str] = None,
           maintenance_window_time: Optional[str] = None,
           pg: Optional[pulumi.InputType['GetPgPgArgs']] = None,
           pg_user_config: Optional[pulumi.InputType['GetPgPgUserConfigArgs']] = None,
           plan: Optional[str] = None,
           project: Optional[str] = None,
           project_vpc_id: Optional[str] = None,
           service_host: Optional[str] = None,
           service_integrations: Optional[List[pulumi.InputType['GetPgServiceIntegrationArgs']]] = None,
           service_name: Optional[str] = None,
           service_password: Optional[str] = None,
           service_port: Optional[float] = None,
           service_type: Optional[str] = None,
           service_uri: Optional[str] = None,
           service_username: Optional[str] = None,
           state: Optional[str] = None,
           termination_protection: Optional[bool] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPgResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cloudName'] = cloud_name
    __args__['components'] = components
    __args__['maintenanceWindowDow'] = maintenance_window_dow
    __args__['maintenanceWindowTime'] = maintenance_window_time
    __args__['pg'] = pg
    __args__['pgUserConfig'] = pg_user_config
    __args__['plan'] = plan
    __args__['project'] = project
    __args__['projectVpcId'] = project_vpc_id
    __args__['serviceHost'] = service_host
    __args__['serviceIntegrations'] = service_integrations
    __args__['serviceName'] = service_name
    __args__['servicePassword'] = service_password
    __args__['servicePort'] = service_port
    __args__['serviceType'] = service_type
    __args__['serviceUri'] = service_uri
    __args__['serviceUsername'] = service_username
    __args__['state'] = state
    __args__['terminationProtection'] = termination_protection
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getPg:getPg', __args__, opts=opts, typ=GetPgResult).value

    return AwaitableGetPgResult(
        cloud_name=__ret__.cloud_name,
        components=__ret__.components,
        id=__ret__.id,
        maintenance_window_dow=__ret__.maintenance_window_dow,
        maintenance_window_time=__ret__.maintenance_window_time,
        pg=__ret__.pg,
        pg_user_config=__ret__.pg_user_config,
        plan=__ret__.plan,
        project=__ret__.project,
        project_vpc_id=__ret__.project_vpc_id,
        service_host=__ret__.service_host,
        service_integrations=__ret__.service_integrations,
        service_name=__ret__.service_name,
        service_password=__ret__.service_password,
        service_port=__ret__.service_port,
        service_type=__ret__.service_type,
        service_uri=__ret__.service_uri,
        service_username=__ret__.service_username,
        state=__ret__.state,
        termination_protection=__ret__.termination_protection)
