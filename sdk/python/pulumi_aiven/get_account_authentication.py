# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'GetAccountAuthenticationResult',
    'AwaitableGetAccountAuthenticationResult',
    'get_account_authentication',
]

@pulumi.output_type
class GetAccountAuthenticationResult:
    """
    A collection of values returned by getAccountAuthentication.
    """
    def __init__(__self__, account_id=None, authentication_id=None, create_time=None, enabled=None, id=None, name=None, saml_acs_url=None, saml_certificate=None, saml_entity_id=None, saml_idp_url=None, saml_metadata_url=None, type=None, update_time=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if authentication_id and not isinstance(authentication_id, str):
            raise TypeError("Expected argument 'authentication_id' to be a str")
        pulumi.set(__self__, "authentication_id", authentication_id)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if saml_acs_url and not isinstance(saml_acs_url, str):
            raise TypeError("Expected argument 'saml_acs_url' to be a str")
        pulumi.set(__self__, "saml_acs_url", saml_acs_url)
        if saml_certificate and not isinstance(saml_certificate, str):
            raise TypeError("Expected argument 'saml_certificate' to be a str")
        pulumi.set(__self__, "saml_certificate", saml_certificate)
        if saml_entity_id and not isinstance(saml_entity_id, str):
            raise TypeError("Expected argument 'saml_entity_id' to be a str")
        pulumi.set(__self__, "saml_entity_id", saml_entity_id)
        if saml_idp_url and not isinstance(saml_idp_url, str):
            raise TypeError("Expected argument 'saml_idp_url' to be a str")
        pulumi.set(__self__, "saml_idp_url", saml_idp_url)
        if saml_metadata_url and not isinstance(saml_metadata_url, str):
            raise TypeError("Expected argument 'saml_metadata_url' to be a str")
        pulumi.set(__self__, "saml_metadata_url", saml_metadata_url)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        is a unique account id.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="authenticationId")
    def authentication_id(self) -> str:
        """
        account authentication id.
        """
        return pulumi.get(self, "authentication_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        time of creation.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        defines an authentication method enabled or not.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        is an account authentication name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="samlAcsUrl")
    def saml_acs_url(self) -> str:
        """
        is a SAML Assertion Consumer Service URL.
        """
        return pulumi.get(self, "saml_acs_url")

    @property
    @pulumi.getter(name="samlCertificate")
    def saml_certificate(self) -> Optional[str]:
        """
        is a SAML Certificate.
        """
        return pulumi.get(self, "saml_certificate")

    @property
    @pulumi.getter(name="samlEntityId")
    def saml_entity_id(self) -> Optional[str]:
        """
        is a SAML Entity ID.
        """
        return pulumi.get(self, "saml_entity_id")

    @property
    @pulumi.getter(name="samlIdpUrl")
    def saml_idp_url(self) -> Optional[str]:
        """
        is a SAML Idp URL.
        """
        return pulumi.get(self, "saml_idp_url")

    @property
    @pulumi.getter(name="samlMetadataUrl")
    def saml_metadata_url(self) -> str:
        """
        is a SAML Metadata URL.
        """
        return pulumi.get(self, "saml_metadata_url")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        is an account authentication type, can be one of `internal` and `saml`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        time of last update.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetAccountAuthenticationResult(GetAccountAuthenticationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountAuthenticationResult(
            account_id=self.account_id,
            authentication_id=self.authentication_id,
            create_time=self.create_time,
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            saml_acs_url=self.saml_acs_url,
            saml_certificate=self.saml_certificate,
            saml_entity_id=self.saml_entity_id,
            saml_idp_url=self.saml_idp_url,
            saml_metadata_url=self.saml_metadata_url,
            type=self.type,
            update_time=self.update_time)


def get_account_authentication(account_id: Optional[str] = None,
                               authentication_id: Optional[str] = None,
                               create_time: Optional[str] = None,
                               enabled: Optional[bool] = None,
                               name: Optional[str] = None,
                               saml_acs_url: Optional[str] = None,
                               saml_certificate: Optional[str] = None,
                               saml_entity_id: Optional[str] = None,
                               saml_idp_url: Optional[str] = None,
                               saml_metadata_url: Optional[str] = None,
                               type: Optional[str] = None,
                               update_time: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountAuthenticationResult:
    """
    ## # Account Authentication Data Source

    The Account Authentication data source provides information about the existing Aiven Account Authentication.


    :param str account_id: is a unique account id.
    :param str authentication_id: account authentication id.
    :param str create_time: time of creation.
    :param bool enabled: defines an authentication method enabled or not.
    :param str name: is an account authentication name.
    :param str saml_acs_url: is a SAML Assertion Consumer Service URL.
    :param str saml_certificate: is a SAML Certificate.
    :param str saml_entity_id: is a SAML Entity ID.
    :param str saml_idp_url: is a SAML Idp URL.
    :param str saml_metadata_url: is a SAML Metadata URL.
    :param str type: is an account authentication type, can be one of `internal` and `saml`.
    :param str update_time: time of last update.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['authenticationId'] = authentication_id
    __args__['createTime'] = create_time
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['samlAcsUrl'] = saml_acs_url
    __args__['samlCertificate'] = saml_certificate
    __args__['samlEntityId'] = saml_entity_id
    __args__['samlIdpUrl'] = saml_idp_url
    __args__['samlMetadataUrl'] = saml_metadata_url
    __args__['type'] = type
    __args__['updateTime'] = update_time
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getAccountAuthentication:getAccountAuthentication', __args__, opts=opts, typ=GetAccountAuthenticationResult).value

    return AwaitableGetAccountAuthenticationResult(
        account_id=__ret__.account_id,
        authentication_id=__ret__.authentication_id,
        create_time=__ret__.create_time,
        enabled=__ret__.enabled,
        id=__ret__.id,
        name=__ret__.name,
        saml_acs_url=__ret__.saml_acs_url,
        saml_certificate=__ret__.saml_certificate,
        saml_entity_id=__ret__.saml_entity_id,
        saml_idp_url=__ret__.saml_idp_url,
        saml_metadata_url=__ret__.saml_metadata_url,
        type=__ret__.type,
        update_time=__ret__.update_time)
