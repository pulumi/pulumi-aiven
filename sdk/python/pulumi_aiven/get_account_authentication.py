# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetAccountAuthenticationResult:
    """
    A collection of values returned by getAccountAuthentication.
    """
    def __init__(__self__, account_id=None, authentication_id=None, create_time=None, enabled=None, id=None, name=None, saml_acs_url=None, saml_certificate=None, saml_entity_id=None, saml_idp_url=None, saml_metadata_url=None, type=None, update_time=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        __self__.account_id = account_id
        if authentication_id and not isinstance(authentication_id, str):
            raise TypeError("Expected argument 'authentication_id' to be a str")
        __self__.authentication_id = authentication_id
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        __self__.create_time = create_time
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        __self__.enabled = enabled
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if saml_acs_url and not isinstance(saml_acs_url, str):
            raise TypeError("Expected argument 'saml_acs_url' to be a str")
        __self__.saml_acs_url = saml_acs_url
        if saml_certificate and not isinstance(saml_certificate, str):
            raise TypeError("Expected argument 'saml_certificate' to be a str")
        __self__.saml_certificate = saml_certificate
        if saml_entity_id and not isinstance(saml_entity_id, str):
            raise TypeError("Expected argument 'saml_entity_id' to be a str")
        __self__.saml_entity_id = saml_entity_id
        if saml_idp_url and not isinstance(saml_idp_url, str):
            raise TypeError("Expected argument 'saml_idp_url' to be a str")
        __self__.saml_idp_url = saml_idp_url
        if saml_metadata_url and not isinstance(saml_metadata_url, str):
            raise TypeError("Expected argument 'saml_metadata_url' to be a str")
        __self__.saml_metadata_url = saml_metadata_url
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        __self__.update_time = update_time


class AwaitableGetAccountAuthenticationResult(GetAccountAuthenticationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountAuthenticationResult(
            account_id=self.account_id,
            authentication_id=self.authentication_id,
            create_time=self.create_time,
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            saml_acs_url=self.saml_acs_url,
            saml_certificate=self.saml_certificate,
            saml_entity_id=self.saml_entity_id,
            saml_idp_url=self.saml_idp_url,
            saml_metadata_url=self.saml_metadata_url,
            type=self.type,
            update_time=self.update_time)


def get_account_authentication(account_id=None, authentication_id=None, create_time=None, enabled=None, name=None, saml_acs_url=None, saml_certificate=None, saml_entity_id=None, saml_idp_url=None, saml_metadata_url=None, type=None, update_time=None, opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['authenticationId'] = authentication_id
    __args__['createTime'] = create_time
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['samlAcsUrl'] = saml_acs_url
    __args__['samlCertificate'] = saml_certificate
    __args__['samlEntityId'] = saml_entity_id
    __args__['samlIdpUrl'] = saml_idp_url
    __args__['samlMetadataUrl'] = saml_metadata_url
    __args__['type'] = type
    __args__['updateTime'] = update_time
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getAccountAuthentication:getAccountAuthentication', __args__, opts=opts).value

    return AwaitableGetAccountAuthenticationResult(
        account_id=__ret__.get('accountId'),
        authentication_id=__ret__.get('authenticationId'),
        create_time=__ret__.get('createTime'),
        enabled=__ret__.get('enabled'),
        id=__ret__.get('id'),
        name=__ret__.get('name'),
        saml_acs_url=__ret__.get('samlAcsUrl'),
        saml_certificate=__ret__.get('samlCertificate'),
        saml_entity_id=__ret__.get('samlEntityId'),
        saml_idp_url=__ret__.get('samlIdpUrl'),
        saml_metadata_url=__ret__.get('samlMetadataUrl'),
        type=__ret__.get('type'),
        update_time=__ret__.get('updateTime'))
