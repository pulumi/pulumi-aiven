# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetKafkaTopicResult:
    """
    A collection of values returned by getKafkaTopic.
    """
    def __init__(__self__, cleanup_policy=None, id=None, minimum_in_sync_replicas=None, partitions=None, project=None, replication=None, retention_bytes=None, retention_hours=None, service_name=None, termination_protection=None, topic_name=None):
        if cleanup_policy and not isinstance(cleanup_policy, str):
            raise TypeError("Expected argument 'cleanup_policy' to be a str")
        __self__.cleanup_policy = cleanup_policy
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if minimum_in_sync_replicas and not isinstance(minimum_in_sync_replicas, float):
            raise TypeError("Expected argument 'minimum_in_sync_replicas' to be a float")
        __self__.minimum_in_sync_replicas = minimum_in_sync_replicas
        if partitions and not isinstance(partitions, float):
            raise TypeError("Expected argument 'partitions' to be a float")
        __self__.partitions = partitions
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        __self__.project = project
        if replication and not isinstance(replication, float):
            raise TypeError("Expected argument 'replication' to be a float")
        __self__.replication = replication
        if retention_bytes and not isinstance(retention_bytes, float):
            raise TypeError("Expected argument 'retention_bytes' to be a float")
        __self__.retention_bytes = retention_bytes
        if retention_hours and not isinstance(retention_hours, float):
            raise TypeError("Expected argument 'retention_hours' to be a float")
        __self__.retention_hours = retention_hours
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        __self__.service_name = service_name
        if termination_protection and not isinstance(termination_protection, bool):
            raise TypeError("Expected argument 'termination_protection' to be a bool")
        __self__.termination_protection = termination_protection
        if topic_name and not isinstance(topic_name, str):
            raise TypeError("Expected argument 'topic_name' to be a str")
        __self__.topic_name = topic_name
class AwaitableGetKafkaTopicResult(GetKafkaTopicResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkaTopicResult(
            cleanup_policy=self.cleanup_policy,
            id=self.id,
            minimum_in_sync_replicas=self.minimum_in_sync_replicas,
            partitions=self.partitions,
            project=self.project,
            replication=self.replication,
            retention_bytes=self.retention_bytes,
            retention_hours=self.retention_hours,
            service_name=self.service_name,
            termination_protection=self.termination_protection,
            topic_name=self.topic_name)

def get_kafka_topic(cleanup_policy=None,minimum_in_sync_replicas=None,partitions=None,project=None,replication=None,retention_bytes=None,retention_hours=None,service_name=None,termination_protection=None,topic_name=None,opts=None):
    """
    ## Example Usage



    ```python
    import pulumi
    import pulumi_aiven as aiven

    mytesttopic = aiven.get_kafka_topic(project=data[".Service"]["myservice"]["project"],
        service_name=data[".Service"]["myservice"]["service_name"],
        topic_name="<TOPIC_NAME>")
    ```
    """
    __args__ = dict()


    __args__['cleanupPolicy'] = cleanup_policy
    __args__['minimumInSyncReplicas'] = minimum_in_sync_replicas
    __args__['partitions'] = partitions
    __args__['project'] = project
    __args__['replication'] = replication
    __args__['retentionBytes'] = retention_bytes
    __args__['retentionHours'] = retention_hours
    __args__['serviceName'] = service_name
    __args__['terminationProtection'] = termination_protection
    __args__['topicName'] = topic_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aiven:index/getKafkaTopic:getKafkaTopic', __args__, opts=opts).value

    return AwaitableGetKafkaTopicResult(
        cleanup_policy=__ret__.get('cleanupPolicy'),
        id=__ret__.get('id'),
        minimum_in_sync_replicas=__ret__.get('minimumInSyncReplicas'),
        partitions=__ret__.get('partitions'),
        project=__ret__.get('project'),
        replication=__ret__.get('replication'),
        retention_bytes=__ret__.get('retentionBytes'),
        retention_hours=__ret__.get('retentionHours'),
        service_name=__ret__.get('serviceName'),
        termination_protection=__ret__.get('terminationProtection'),
        topic_name=__ret__.get('topicName'))
