# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAccountTeamProjectResult',
    'AwaitableGetAccountTeamProjectResult',
    'get_account_team_project',
    'get_account_team_project_output',
]

@pulumi.output_type
class GetAccountTeamProjectResult:
    """
    A collection of values returned by getAccountTeamProject.
    """
    def __init__(__self__, account_id=None, id=None, project_name=None, team_id=None, team_type=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        pulumi.set(__self__, "team_id", team_id)
        if team_type and not isinstance(team_type, str):
            raise TypeError("Expected argument 'team_type' to be a str")
        pulumi.set(__self__, "team_type", team_type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The unique account id
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The name of an already existing project
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        """
        An account team id
        """
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter(name="teamType")
    def team_type(self) -> str:
        """
        The Account team project type The possible values are `admin`, `developer`, `operator` and `read_only`.
        """
        return pulumi.get(self, "team_type")


class AwaitableGetAccountTeamProjectResult(GetAccountTeamProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountTeamProjectResult(
            account_id=self.account_id,
            id=self.id,
            project_name=self.project_name,
            team_id=self.team_id,
            team_type=self.team_type)


def get_account_team_project(account_id: Optional[str] = None,
                             project_name: Optional[str] = None,
                             team_id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountTeamProjectResult:
    """
    The Account Team Project data source provides information about the existing Account Team Project.


    :param str account_id: The unique account id
    :param str project_name: The name of an already existing project
    :param str team_id: An account team id
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['projectName'] = project_name
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aiven:index/getAccountTeamProject:getAccountTeamProject', __args__, opts=opts, typ=GetAccountTeamProjectResult).value

    return AwaitableGetAccountTeamProjectResult(
        account_id=__ret__.account_id,
        id=__ret__.id,
        project_name=__ret__.project_name,
        team_id=__ret__.team_id,
        team_type=__ret__.team_type)


@_utilities.lift_output_func(get_account_team_project)
def get_account_team_project_output(account_id: Optional[pulumi.Input[str]] = None,
                                    project_name: Optional[pulumi.Input[str]] = None,
                                    team_id: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountTeamProjectResult]:
    """
    The Account Team Project data source provides information about the existing Account Team Project.


    :param str account_id: The unique account id
    :param str project_name: The name of an already existing project
    :param str team_id: An account team id
    """
    ...
