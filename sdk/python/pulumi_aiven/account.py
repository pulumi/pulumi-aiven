# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Account(pulumi.CustomResource):
    account_id: pulumi.Output[str]
    """
    Account id
    """
    create_time: pulumi.Output[str]
    """
    Time of creation
    """
    name: pulumi.Output[str]
    """
    Account name
    """
    owner_team_id: pulumi.Output[str]
    """
    Owner team id
    """
    tenant_id: pulumi.Output[str]
    """
    Tenant id
    """
    update_time: pulumi.Output[str]
    """
    Time of last update
    """
    def __init__(__self__, resource_name, opts=None, create_time=None, name=None, owner_team_id=None, tenant_id=None, update_time=None, __props__=None, __name__=None, __opts__=None):
        """
        ## Example Usage



        ```python
        import pulumi
        import pulumi_aiven as aiven

        account1 = aiven.Account("account1")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: Time of creation
        :param pulumi.Input[str] name: Account name
        :param pulumi.Input[str] owner_team_id: Owner team id
        :param pulumi.Input[str] tenant_id: Tenant id
        :param pulumi.Input[str] update_time: Time of last update
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['create_time'] = create_time
            __props__['name'] = name
            __props__['owner_team_id'] = owner_team_id
            __props__['tenant_id'] = tenant_id
            __props__['update_time'] = update_time
            __props__['account_id'] = None
        super(Account, __self__).__init__(
            'aiven:index/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, account_id=None, create_time=None, name=None, owner_team_id=None, tenant_id=None, update_time=None):
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account id
        :param pulumi.Input[str] create_time: Time of creation
        :param pulumi.Input[str] name: Account name
        :param pulumi.Input[str] owner_team_id: Owner team id
        :param pulumi.Input[str] tenant_id: Tenant id
        :param pulumi.Input[str] update_time: Time of last update
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["account_id"] = account_id
        __props__["create_time"] = create_time
        __props__["name"] = name
        __props__["owner_team_id"] = owner_team_id
        __props__["tenant_id"] = tenant_id
        __props__["update_time"] = update_time
        return Account(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

