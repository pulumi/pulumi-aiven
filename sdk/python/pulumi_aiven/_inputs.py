# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'CassandraCassandraArgs',
    'CassandraCassandraUserConfigArgs',
    'CassandraCassandraUserConfigPrivateAccessArgs',
    'CassandraCassandraUserConfigPublicAccessArgs',
    'CassandraComponentArgs',
    'CassandraServiceIntegrationArgs',
    'ElasticSearchAclAclArgs',
    'ElasticSearchAclAclRuleArgs',
    'ElasticSearchComponentArgs',
    'ElasticSearchElasticsearchArgs',
    'ElasticSearchElasticsearchUserConfigArgs',
    'ElasticSearchElasticsearchUserConfigElasticsearchArgs',
    'ElasticSearchElasticsearchUserConfigIndexPatternArgs',
    'ElasticSearchElasticsearchUserConfigIndexTemplateArgs',
    'ElasticSearchElasticsearchUserConfigKibanaArgs',
    'ElasticSearchElasticsearchUserConfigPrivateAccessArgs',
    'ElasticSearchElasticsearchUserConfigPublicAccessArgs',
    'ElasticSearchServiceIntegrationArgs',
    'GrafanaComponentArgs',
    'GrafanaGrafanaArgs',
    'GrafanaGrafanaUserConfigArgs',
    'GrafanaGrafanaUserConfigAuthGenericOauthArgs',
    'GrafanaGrafanaUserConfigAuthGithubArgs',
    'GrafanaGrafanaUserConfigAuthGitlabArgs',
    'GrafanaGrafanaUserConfigAuthGoogleArgs',
    'GrafanaGrafanaUserConfigExternalImageStorageArgs',
    'GrafanaGrafanaUserConfigPrivateAccessArgs',
    'GrafanaGrafanaUserConfigPublicAccessArgs',
    'GrafanaGrafanaUserConfigSmtpServerArgs',
    'GrafanaServiceIntegrationArgs',
    'InfluxDbComponentArgs',
    'InfluxDbInfluxdbArgs',
    'InfluxDbInfluxdbUserConfigArgs',
    'InfluxDbInfluxdbUserConfigInfluxdbArgs',
    'InfluxDbInfluxdbUserConfigPrivateAccessArgs',
    'InfluxDbInfluxdbUserConfigPublicAccessArgs',
    'InfluxDbServiceIntegrationArgs',
    'KafkaComponentArgs',
    'KafkaConnectComponentArgs',
    'KafkaConnectKafkaConnectArgs',
    'KafkaConnectKafkaConnectUserConfigArgs',
    'KafkaConnectKafkaConnectUserConfigKafkaConnectArgs',
    'KafkaConnectKafkaConnectUserConfigPrivateAccessArgs',
    'KafkaConnectKafkaConnectUserConfigPublicAccessArgs',
    'KafkaConnectServiceIntegrationArgs',
    'KafkaConnectorTaskArgs',
    'KafkaKafkaArgs',
    'KafkaKafkaUserConfigArgs',
    'KafkaKafkaUserConfigKafkaArgs',
    'KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs',
    'KafkaKafkaUserConfigKafkaConnectConfigArgs',
    'KafkaKafkaUserConfigKafkaRestConfigArgs',
    'KafkaKafkaUserConfigPrivateAccessArgs',
    'KafkaKafkaUserConfigPrivatelinkAccessArgs',
    'KafkaKafkaUserConfigPublicAccessArgs',
    'KafkaKafkaUserConfigSchemaRegistryConfigArgs',
    'KafkaMirrorMakerComponentArgs',
    'KafkaMirrorMakerKafkaMirrormakerArgs',
    'KafkaMirrorMakerKafkaMirrormakerUserConfigArgs',
    'KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs',
    'KafkaMirrorMakerServiceIntegrationArgs',
    'KafkaServiceIntegrationArgs',
    'KafkaTopicConfigArgs',
    'M3AggregatorComponentArgs',
    'M3AggregatorM3aggregatorArgs',
    'M3AggregatorM3aggregatorUserConfigArgs',
    'M3AggregatorServiceIntegrationArgs',
    'M3DbComponentArgs',
    'M3DbM3dbArgs',
    'M3DbM3dbUserConfigArgs',
    'M3DbM3dbUserConfigLimitsArgs',
    'M3DbM3dbUserConfigNamespaceArgs',
    'M3DbM3dbUserConfigNamespaceOptionsArgs',
    'M3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs',
    'M3DbM3dbUserConfigPrivateAccessArgs',
    'M3DbM3dbUserConfigPublicAccessArgs',
    'M3DbServiceIntegrationArgs',
    'MySqlComponentArgs',
    'MySqlMysqlArgs',
    'MySqlMysqlUserConfigArgs',
    'MySqlMysqlUserConfigMysqlArgs',
    'MySqlMysqlUserConfigPrivateAccessArgs',
    'MySqlMysqlUserConfigPublicAccessArgs',
    'MySqlServiceIntegrationArgs',
    'PgComponentArgs',
    'PgPgArgs',
    'PgPgUserConfigArgs',
    'PgPgUserConfigMigrationArgs',
    'PgPgUserConfigPgArgs',
    'PgPgUserConfigPgbouncerArgs',
    'PgPgUserConfigPglookoutArgs',
    'PgPgUserConfigPrivateAccessArgs',
    'PgPgUserConfigPrivatelinkAccessArgs',
    'PgPgUserConfigPublicAccessArgs',
    'PgPgUserConfigTimescaledbArgs',
    'PgServiceIntegrationArgs',
    'RedisComponentArgs',
    'RedisRedisArgs',
    'RedisRedisUserConfigArgs',
    'RedisRedisUserConfigMigrationArgs',
    'RedisRedisUserConfigPrivateAccessArgs',
    'RedisRedisUserConfigPublicAccessArgs',
    'RedisServiceIntegrationArgs',
    'ServiceCassandraArgs',
    'ServiceCassandraUserConfigArgs',
    'ServiceCassandraUserConfigPrivateAccessArgs',
    'ServiceCassandraUserConfigPublicAccessArgs',
    'ServiceComponentArgs',
    'ServiceElasticsearchArgs',
    'ServiceElasticsearchUserConfigArgs',
    'ServiceElasticsearchUserConfigElasticsearchArgs',
    'ServiceElasticsearchUserConfigIndexPatternArgs',
    'ServiceElasticsearchUserConfigIndexTemplateArgs',
    'ServiceElasticsearchUserConfigKibanaArgs',
    'ServiceElasticsearchUserConfigPrivateAccessArgs',
    'ServiceElasticsearchUserConfigPublicAccessArgs',
    'ServiceGrafanaArgs',
    'ServiceGrafanaUserConfigArgs',
    'ServiceGrafanaUserConfigAuthGenericOauthArgs',
    'ServiceGrafanaUserConfigAuthGithubArgs',
    'ServiceGrafanaUserConfigAuthGitlabArgs',
    'ServiceGrafanaUserConfigAuthGoogleArgs',
    'ServiceGrafanaUserConfigExternalImageStorageArgs',
    'ServiceGrafanaUserConfigPrivateAccessArgs',
    'ServiceGrafanaUserConfigPublicAccessArgs',
    'ServiceGrafanaUserConfigSmtpServerArgs',
    'ServiceInfluxdbArgs',
    'ServiceInfluxdbUserConfigArgs',
    'ServiceInfluxdbUserConfigInfluxdbArgs',
    'ServiceInfluxdbUserConfigPrivateAccessArgs',
    'ServiceInfluxdbUserConfigPublicAccessArgs',
    'ServiceIntegrationDashboardUserConfigArgs',
    'ServiceIntegrationDatadogUserConfigArgs',
    'ServiceIntegrationEndpointDatadogUserConfigArgs',
    'ServiceIntegrationEndpointExternalAwsCloudwatchLogsUserConfigArgs',
    'ServiceIntegrationEndpointExternalElasticsearchLogsUserConfigArgs',
    'ServiceIntegrationEndpointExternalGoogleCloudLoggingUserConfigArgs',
    'ServiceIntegrationEndpointExternalKafkaUserConfigArgs',
    'ServiceIntegrationEndpointExternalSchemaRegistryUserConfigArgs',
    'ServiceIntegrationEndpointJolokiaUserConfigArgs',
    'ServiceIntegrationEndpointPrometheusUserConfigArgs',
    'ServiceIntegrationEndpointRsyslogUserConfigArgs',
    'ServiceIntegrationEndpointSignalfxUserConfigArgs',
    'ServiceIntegrationExternalAwsCloudwatchLogsUserConfigArgs',
    'ServiceIntegrationExternalElasticsearchLogsUserConfigArgs',
    'ServiceIntegrationExternalGoogleCloudLoggingUserConfigArgs',
    'ServiceIntegrationKafkaConnectUserConfigArgs',
    'ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs',
    'ServiceIntegrationKafkaLogsUserConfigArgs',
    'ServiceIntegrationKafkaMirrormakerUserConfigArgs',
    'ServiceIntegrationLogsUserConfigArgs',
    'ServiceIntegrationM3aggregatorUserConfigArgs',
    'ServiceIntegrationM3coordinatorUserConfigArgs',
    'ServiceIntegrationMetricsUserConfigArgs',
    'ServiceIntegrationMetricsUserConfigSourceMysqlArgs',
    'ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs',
    'ServiceIntegrationMirrormakerUserConfigArgs',
    'ServiceIntegrationPrometheusUserConfigArgs',
    'ServiceIntegrationPrometheusUserConfigSourceMysqlArgs',
    'ServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs',
    'ServiceIntegrationReadReplicaUserConfigArgs',
    'ServiceIntegrationRsyslogUserConfigArgs',
    'ServiceIntegrationSchemaRegistryProxyUserConfigArgs',
    'ServiceIntegrationSignalfxUserConfigArgs',
    'ServiceKafkaArgs',
    'ServiceKafkaConnectArgs',
    'ServiceKafkaConnectUserConfigArgs',
    'ServiceKafkaConnectUserConfigKafkaConnectArgs',
    'ServiceKafkaConnectUserConfigPrivateAccessArgs',
    'ServiceKafkaConnectUserConfigPublicAccessArgs',
    'ServiceKafkaMirrormakerArgs',
    'ServiceKafkaMirrormakerUserConfigArgs',
    'ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs',
    'ServiceKafkaUserConfigArgs',
    'ServiceKafkaUserConfigKafkaArgs',
    'ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs',
    'ServiceKafkaUserConfigKafkaConnectConfigArgs',
    'ServiceKafkaUserConfigKafkaRestConfigArgs',
    'ServiceKafkaUserConfigPrivateAccessArgs',
    'ServiceKafkaUserConfigPrivatelinkAccessArgs',
    'ServiceKafkaUserConfigPublicAccessArgs',
    'ServiceKafkaUserConfigSchemaRegistryConfigArgs',
    'ServiceMysqlArgs',
    'ServiceMysqlUserConfigArgs',
    'ServiceMysqlUserConfigMysqlArgs',
    'ServiceMysqlUserConfigPrivateAccessArgs',
    'ServiceMysqlUserConfigPublicAccessArgs',
    'ServicePgArgs',
    'ServicePgUserConfigArgs',
    'ServicePgUserConfigMigrationArgs',
    'ServicePgUserConfigPgArgs',
    'ServicePgUserConfigPgbouncerArgs',
    'ServicePgUserConfigPglookoutArgs',
    'ServicePgUserConfigPrivateAccessArgs',
    'ServicePgUserConfigPrivatelinkAccessArgs',
    'ServicePgUserConfigPublicAccessArgs',
    'ServicePgUserConfigTimescaledbArgs',
    'ServiceRedisArgs',
    'ServiceRedisUserConfigArgs',
    'ServiceRedisUserConfigMigrationArgs',
    'ServiceRedisUserConfigPrivateAccessArgs',
    'ServiceRedisUserConfigPublicAccessArgs',
    'ServiceServiceIntegrationArgs',
    'GetCassandaCassandraArgs',
    'GetCassandaCassandraUserConfigArgs',
    'GetCassandaCassandraUserConfigPrivateAccessArgs',
    'GetCassandaCassandraUserConfigPublicAccessArgs',
    'GetCassandaComponentArgs',
    'GetCassandaServiceIntegrationArgs',
    'GetElasticSearchAclAclArgs',
    'GetElasticSearchAclAclRuleArgs',
    'GetElasticSearchComponentArgs',
    'GetElasticSearchElasticsearchArgs',
    'GetElasticSearchElasticsearchUserConfigArgs',
    'GetElasticSearchElasticsearchUserConfigElasticsearchArgs',
    'GetElasticSearchElasticsearchUserConfigIndexPatternArgs',
    'GetElasticSearchElasticsearchUserConfigIndexTemplateArgs',
    'GetElasticSearchElasticsearchUserConfigKibanaArgs',
    'GetElasticSearchElasticsearchUserConfigPrivateAccessArgs',
    'GetElasticSearchElasticsearchUserConfigPublicAccessArgs',
    'GetElasticSearchServiceIntegrationArgs',
    'GetGrafanaComponentArgs',
    'GetGrafanaGrafanaArgs',
    'GetGrafanaGrafanaUserConfigArgs',
    'GetGrafanaGrafanaUserConfigAuthGenericOauthArgs',
    'GetGrafanaGrafanaUserConfigAuthGithubArgs',
    'GetGrafanaGrafanaUserConfigAuthGitlabArgs',
    'GetGrafanaGrafanaUserConfigAuthGoogleArgs',
    'GetGrafanaGrafanaUserConfigExternalImageStorageArgs',
    'GetGrafanaGrafanaUserConfigPrivateAccessArgs',
    'GetGrafanaGrafanaUserConfigPublicAccessArgs',
    'GetGrafanaGrafanaUserConfigSmtpServerArgs',
    'GetGrafanaServiceIntegrationArgs',
    'GetInfluxDbComponentArgs',
    'GetInfluxDbInfluxdbArgs',
    'GetInfluxDbInfluxdbUserConfigArgs',
    'GetInfluxDbInfluxdbUserConfigInfluxdbArgs',
    'GetInfluxDbInfluxdbUserConfigPrivateAccessArgs',
    'GetInfluxDbInfluxdbUserConfigPublicAccessArgs',
    'GetInfluxDbServiceIntegrationArgs',
    'GetKafkaComponentArgs',
    'GetKafkaConnectComponentArgs',
    'GetKafkaConnectKafkaConnectArgs',
    'GetKafkaConnectKafkaConnectUserConfigArgs',
    'GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs',
    'GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs',
    'GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs',
    'GetKafkaConnectServiceIntegrationArgs',
    'GetKafkaConnectorTaskArgs',
    'GetKafkaKafkaArgs',
    'GetKafkaKafkaUserConfigArgs',
    'GetKafkaKafkaUserConfigKafkaArgs',
    'GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs',
    'GetKafkaKafkaUserConfigKafkaConnectConfigArgs',
    'GetKafkaKafkaUserConfigKafkaRestConfigArgs',
    'GetKafkaKafkaUserConfigPrivateAccessArgs',
    'GetKafkaKafkaUserConfigPrivatelinkAccessArgs',
    'GetKafkaKafkaUserConfigPublicAccessArgs',
    'GetKafkaKafkaUserConfigSchemaRegistryConfigArgs',
    'GetKafkaMirrorMakerComponentArgs',
    'GetKafkaMirrorMakerKafkaMirrormakerArgs',
    'GetKafkaMirrorMakerKafkaMirrormakerUserConfigArgs',
    'GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs',
    'GetKafkaMirrorMakerServiceIntegrationArgs',
    'GetKafkaServiceIntegrationArgs',
    'GetKafkaTopicConfigArgs',
    'GetM3AggregatorComponentArgs',
    'GetM3AggregatorM3aggregatorArgs',
    'GetM3AggregatorM3aggregatorUserConfigArgs',
    'GetM3AggregatorServiceIntegrationArgs',
    'GetM3DbComponentArgs',
    'GetM3DbM3dbArgs',
    'GetM3DbM3dbUserConfigArgs',
    'GetM3DbM3dbUserConfigLimitsArgs',
    'GetM3DbM3dbUserConfigNamespaceArgs',
    'GetM3DbM3dbUserConfigNamespaceOptionsArgs',
    'GetM3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs',
    'GetM3DbM3dbUserConfigPrivateAccessArgs',
    'GetM3DbM3dbUserConfigPublicAccessArgs',
    'GetM3DbServiceIntegrationArgs',
    'GetMySqlComponentArgs',
    'GetMySqlMysqlArgs',
    'GetMySqlMysqlUserConfigArgs',
    'GetMySqlMysqlUserConfigMysqlArgs',
    'GetMySqlMysqlUserConfigPrivateAccessArgs',
    'GetMySqlMysqlUserConfigPublicAccessArgs',
    'GetMySqlServiceIntegrationArgs',
    'GetPgComponentArgs',
    'GetPgPgArgs',
    'GetPgPgUserConfigArgs',
    'GetPgPgUserConfigMigrationArgs',
    'GetPgPgUserConfigPgArgs',
    'GetPgPgUserConfigPgbouncerArgs',
    'GetPgPgUserConfigPglookoutArgs',
    'GetPgPgUserConfigPrivateAccessArgs',
    'GetPgPgUserConfigPrivatelinkAccessArgs',
    'GetPgPgUserConfigPublicAccessArgs',
    'GetPgPgUserConfigTimescaledbArgs',
    'GetPgServiceIntegrationArgs',
    'GetRedisComponentArgs',
    'GetRedisRedisArgs',
    'GetRedisRedisUserConfigArgs',
    'GetRedisRedisUserConfigMigrationArgs',
    'GetRedisRedisUserConfigPrivateAccessArgs',
    'GetRedisRedisUserConfigPublicAccessArgs',
    'GetRedisServiceIntegrationArgs',
    'GetServiceCassandraArgs',
    'GetServiceCassandraUserConfigArgs',
    'GetServiceCassandraUserConfigPrivateAccessArgs',
    'GetServiceCassandraUserConfigPublicAccessArgs',
    'GetServiceComponentArgs',
    'GetServiceElasticsearchArgs',
    'GetServiceElasticsearchUserConfigArgs',
    'GetServiceElasticsearchUserConfigElasticsearchArgs',
    'GetServiceElasticsearchUserConfigIndexPatternArgs',
    'GetServiceElasticsearchUserConfigIndexTemplateArgs',
    'GetServiceElasticsearchUserConfigKibanaArgs',
    'GetServiceElasticsearchUserConfigPrivateAccessArgs',
    'GetServiceElasticsearchUserConfigPublicAccessArgs',
    'GetServiceGrafanaArgs',
    'GetServiceGrafanaUserConfigArgs',
    'GetServiceGrafanaUserConfigAuthGenericOauthArgs',
    'GetServiceGrafanaUserConfigAuthGithubArgs',
    'GetServiceGrafanaUserConfigAuthGitlabArgs',
    'GetServiceGrafanaUserConfigAuthGoogleArgs',
    'GetServiceGrafanaUserConfigExternalImageStorageArgs',
    'GetServiceGrafanaUserConfigPrivateAccessArgs',
    'GetServiceGrafanaUserConfigPublicAccessArgs',
    'GetServiceGrafanaUserConfigSmtpServerArgs',
    'GetServiceInfluxdbArgs',
    'GetServiceInfluxdbUserConfigArgs',
    'GetServiceInfluxdbUserConfigInfluxdbArgs',
    'GetServiceInfluxdbUserConfigPrivateAccessArgs',
    'GetServiceInfluxdbUserConfigPublicAccessArgs',
    'GetServiceIntegrationDashboardUserConfigArgs',
    'GetServiceIntegrationDatadogUserConfigArgs',
    'GetServiceIntegrationEndpointDatadogUserConfigArgs',
    'GetServiceIntegrationEndpointExternalAwsCloudwatchLogsUserConfigArgs',
    'GetServiceIntegrationEndpointExternalElasticsearchLogsUserConfigArgs',
    'GetServiceIntegrationEndpointExternalGoogleCloudLoggingUserConfigArgs',
    'GetServiceIntegrationEndpointExternalKafkaUserConfigArgs',
    'GetServiceIntegrationEndpointExternalSchemaRegistryUserConfigArgs',
    'GetServiceIntegrationEndpointJolokiaUserConfigArgs',
    'GetServiceIntegrationEndpointPrometheusUserConfigArgs',
    'GetServiceIntegrationEndpointRsyslogUserConfigArgs',
    'GetServiceIntegrationEndpointSignalfxUserConfigArgs',
    'GetServiceIntegrationExternalAwsCloudwatchLogsUserConfigArgs',
    'GetServiceIntegrationExternalElasticsearchLogsUserConfigArgs',
    'GetServiceIntegrationExternalGoogleCloudLoggingUserConfigArgs',
    'GetServiceIntegrationKafkaConnectUserConfigArgs',
    'GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs',
    'GetServiceIntegrationKafkaLogsUserConfigArgs',
    'GetServiceIntegrationKafkaMirrormakerUserConfigArgs',
    'GetServiceIntegrationLogsUserConfigArgs',
    'GetServiceIntegrationM3aggregatorUserConfigArgs',
    'GetServiceIntegrationM3coordinatorUserConfigArgs',
    'GetServiceIntegrationMetricsUserConfigArgs',
    'GetServiceIntegrationMetricsUserConfigSourceMysqlArgs',
    'GetServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs',
    'GetServiceIntegrationMirrormakerUserConfigArgs',
    'GetServiceIntegrationPrometheusUserConfigArgs',
    'GetServiceIntegrationPrometheusUserConfigSourceMysqlArgs',
    'GetServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs',
    'GetServiceIntegrationReadReplicaUserConfigArgs',
    'GetServiceIntegrationRsyslogUserConfigArgs',
    'GetServiceIntegrationSchemaRegistryProxyUserConfigArgs',
    'GetServiceIntegrationSignalfxUserConfigArgs',
    'GetServiceKafkaArgs',
    'GetServiceKafkaConnectArgs',
    'GetServiceKafkaConnectUserConfigArgs',
    'GetServiceKafkaConnectUserConfigKafkaConnectArgs',
    'GetServiceKafkaConnectUserConfigPrivateAccessArgs',
    'GetServiceKafkaConnectUserConfigPublicAccessArgs',
    'GetServiceKafkaMirrormakerArgs',
    'GetServiceKafkaMirrormakerUserConfigArgs',
    'GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs',
    'GetServiceKafkaUserConfigArgs',
    'GetServiceKafkaUserConfigKafkaArgs',
    'GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs',
    'GetServiceKafkaUserConfigKafkaConnectConfigArgs',
    'GetServiceKafkaUserConfigKafkaRestConfigArgs',
    'GetServiceKafkaUserConfigPrivateAccessArgs',
    'GetServiceKafkaUserConfigPrivatelinkAccessArgs',
    'GetServiceKafkaUserConfigPublicAccessArgs',
    'GetServiceKafkaUserConfigSchemaRegistryConfigArgs',
    'GetServiceMysqlArgs',
    'GetServiceMysqlUserConfigArgs',
    'GetServiceMysqlUserConfigMysqlArgs',
    'GetServiceMysqlUserConfigPrivateAccessArgs',
    'GetServiceMysqlUserConfigPublicAccessArgs',
    'GetServicePgArgs',
    'GetServicePgUserConfigArgs',
    'GetServicePgUserConfigMigrationArgs',
    'GetServicePgUserConfigPgArgs',
    'GetServicePgUserConfigPgbouncerArgs',
    'GetServicePgUserConfigPglookoutArgs',
    'GetServicePgUserConfigPrivateAccessArgs',
    'GetServicePgUserConfigPrivatelinkAccessArgs',
    'GetServicePgUserConfigPublicAccessArgs',
    'GetServicePgUserConfigTimescaledbArgs',
    'GetServiceRedisArgs',
    'GetServiceRedisUserConfigArgs',
    'GetServiceRedisUserConfigMigrationArgs',
    'GetServiceRedisUserConfigPrivateAccessArgs',
    'GetServiceRedisUserConfigPublicAccessArgs',
    'GetServiceServiceIntegrationArgs',
]

@pulumi.input_type
class CassandraCassandraArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class CassandraCassandraUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 migrate_sstableloader: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['CassandraCassandraUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['CassandraCassandraUserConfigPublicAccessArgs']] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param pulumi.Input[str] migrate_sstableloader: sets the service into migration mode enabling the sstableloader 
               utility to be used to upload Cassandra data files. Available only on service create.
        :param pulumi.Input['CassandraCassandraUserConfigPrivateAccessArgs'] private_access: Allow access to selected service ports from private networks.
        :param pulumi.Input['CassandraCassandraUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet
        :param pulumi.Input[str] service_to_fork_from: Name of another service to fork from. This has effect only 
               when a new service is being created.
        """
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migrate_sstableloader is not None:
            pulumi.set(__self__, "migrate_sstableloader", migrate_sstableloader)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="migrateSstableloader")
    def migrate_sstableloader(self) -> Optional[pulumi.Input[str]]:
        """
        sets the service into migration mode enabling the sstableloader 
        utility to be used to upload Cassandra data files. Available only on service create.
        """
        return pulumi.get(self, "migrate_sstableloader")

    @migrate_sstableloader.setter
    def migrate_sstableloader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migrate_sstableloader", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['CassandraCassandraUserConfigPrivateAccessArgs']]:
        """
        Allow access to selected service ports from private networks.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['CassandraCassandraUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['CassandraCassandraUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['CassandraCassandraUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another service to fork from. This has effect only 
        when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class CassandraCassandraUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network.
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class CassandraCassandraUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network.
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class CassandraComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class CassandraServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class ElasticSearchAclAclArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['ElasticSearchAclAclRuleArgs']]],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ElasticSearchAclAclRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ElasticSearchAclAclRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ElasticSearchAclAclRuleArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 permission: pulumi.Input[str]):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "permission", permission)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)


@pulumi.input_type
class ElasticSearchComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class ElasticSearchElasticsearchArgs:
    def __init__(__self__, *,
                 kibana_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kibana_uri: URI for Kibana frontend.
        """
        if kibana_uri is not None:
            pulumi.set(__self__, "kibana_uri", kibana_uri)

    @property
    @pulumi.getter(name="kibanaUri")
    def kibana_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI for Kibana frontend.
        """
        return pulumi.get(self, "kibana_uri")

    @kibana_uri.setter
    def kibana_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_uri", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 disable_replication_factor_adjustment: Optional[pulumi.Input[str]] = None,
                 elasticsearch: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigElasticsearchArgs']] = None,
                 elasticsearch_version: Optional[pulumi.Input[str]] = None,
                 index_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexPatternArgs']]]] = None,
                 index_template: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexTemplateArgs']] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kibana: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigKibanaArgs']] = None,
                 max_index_count: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom_domain: Serve the web frontend using a custom CNAME pointing to the 
               Aiven DNS name.
        :param pulumi.Input[str] disable_replication_factor_adjustment: Disable automatic replication factor 
               adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at
               least to two nodes. Note: setting this to true increases a risk of data loss in case of
               virtual machine failure.
        :param pulumi.Input['ElasticSearchElasticsearchUserConfigElasticsearchArgs'] elasticsearch: Allow clients to connect to elasticsearch from the public 
               internet for service nodes that are in a project VPC or another type of private network.
        :param pulumi.Input[str] elasticsearch_version: Elasticsearch major version.
        :param pulumi.Input[Sequence[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexPatternArgs']]] index_patterns: Glob pattern and number of indexes matching that pattern to 
               be kept.
        :param pulumi.Input['ElasticSearchElasticsearchUserConfigIndexTemplateArgs'] index_template: Template settings for all new indexe.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param pulumi.Input['ElasticSearchElasticsearchUserConfigKibanaArgs'] kibana: Allow clients to connect to kibana from the public internet for 
               service nodes that are in a project VPC or another type of private network.
        :param pulumi.Input[str] max_index_count: Maximum number of indexes to keep before deleting the oldest one.
        :param pulumi.Input['ElasticSearchElasticsearchUserConfigPrivateAccessArgs'] private_access: Allow access to selected service ports from private networks.
        :param pulumi.Input[str] project_to_fork_from: Name of another project to fork a service from. This has 
               effect only when a new service is being created.
        :param pulumi.Input['ElasticSearchElasticsearchUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet.
        :param pulumi.Input[str] recovery_basebackup_name: Name of the basebackup to restore in forked service.
        :param pulumi.Input[str] service_to_fork_from: Name of another service to fork from. This has effect 
               only when a new service is being created.
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if disable_replication_factor_adjustment is not None:
            pulumi.set(__self__, "disable_replication_factor_adjustment", disable_replication_factor_adjustment)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_version is not None:
            pulumi.set(__self__, "elasticsearch_version", elasticsearch_version)
        if index_patterns is not None:
            pulumi.set(__self__, "index_patterns", index_patterns)
        if index_template is not None:
            pulumi.set(__self__, "index_template", index_template)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Serve the web frontend using a custom CNAME pointing to the 
        Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="disableReplicationFactorAdjustment")
    def disable_replication_factor_adjustment(self) -> Optional[pulumi.Input[str]]:
        """
        Disable automatic replication factor 
        adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at
        least to two nodes. Note: setting this to true increases a risk of data loss in case of
        virtual machine failure.
        """
        return pulumi.get(self, "disable_replication_factor_adjustment")

    @disable_replication_factor_adjustment.setter
    def disable_replication_factor_adjustment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_replication_factor_adjustment", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigElasticsearchArgs']]:
        """
        Allow clients to connect to elasticsearch from the public 
        internet for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigElasticsearchArgs']]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter(name="elasticsearchVersion")
    def elasticsearch_version(self) -> Optional[pulumi.Input[str]]:
        """
        Elasticsearch major version.
        """
        return pulumi.get(self, "elasticsearch_version")

    @elasticsearch_version.setter
    def elasticsearch_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_version", value)

    @property
    @pulumi.getter(name="indexPatterns")
    def index_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexPatternArgs']]]]:
        """
        Glob pattern and number of indexes matching that pattern to 
        be kept.
        """
        return pulumi.get(self, "index_patterns")

    @index_patterns.setter
    def index_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexPatternArgs']]]]):
        pulumi.set(self, "index_patterns", value)

    @property
    @pulumi.getter(name="indexTemplate")
    def index_template(self) -> Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexTemplateArgs']]:
        """
        Template settings for all new indexe.
        """
        return pulumi.get(self, "index_template")

    @index_template.setter
    def index_template(self, value: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexTemplateArgs']]):
        pulumi.set(self, "index_template", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigKibanaArgs']]:
        """
        Allow clients to connect to kibana from the public internet for 
        service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigKibanaArgs']]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of indexes to keep before deleting the oldest one.
        """
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPrivateAccessArgs']]:
        """
        Allow access to selected service ports from private networks.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another project to fork a service from. This has 
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet.
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the basebackup to restore in forked service.
        """
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another service to fork from. This has effect 
        only when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigElasticsearchArgs:
    def __init__(__self__, *,
                 action_auto_create_index_enabled: Optional[pulumi.Input[str]] = None,
                 action_destructive_requires_name: Optional[pulumi.Input[str]] = None,
                 cluster_max_shards_per_node: Optional[pulumi.Input[str]] = None,
                 http_max_content_length: Optional[pulumi.Input[str]] = None,
                 http_max_header_size: Optional[pulumi.Input[str]] = None,
                 http_max_initial_line_length: Optional[pulumi.Input[str]] = None,
                 indices_fielddata_cache_size: Optional[pulumi.Input[str]] = None,
                 indices_memory_index_buffer_size: Optional[pulumi.Input[str]] = None,
                 indices_queries_cache_size: Optional[pulumi.Input[str]] = None,
                 indices_query_bool_max_clause_count: Optional[pulumi.Input[str]] = None,
                 reindex_remote_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search_max_buckets: Optional[pulumi.Input[str]] = None,
                 thread_pool_analyze_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_analyze_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_force_merge_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_get_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_get_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_index_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_index_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_throttled_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_throttled_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_write_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_write_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action_auto_create_index_enabled: Explicitly allow or block automatic 
               creation of indices. Defaults to true
        :param pulumi.Input[str] action_destructive_requires_name: Require explicit index names when deleting
        :param pulumi.Input[str] cluster_max_shards_per_node: Controls the number of shards allowed in the 
               cluster per data node
        :param pulumi.Input[str] http_max_content_length: Maximum content length for HTTP requests to 
               the Elasticsearch HTTP API, in bytes.
        :param pulumi.Input[str] http_max_header_size: The max size of allowed headers, in bytes.
        :param pulumi.Input[str] http_max_initial_line_length: The max length of an HTTP URL, in bytes.
        :param pulumi.Input[str] indices_fielddata_cache_size: Relative amount. Maximum amount of 
               heap memory used for field data cache. This is an expert setting; decreasing the
               value too much will increase overhead of loading field data; too much memory used
               for field data cache will decrease amount of heap available for other operations.
        :param pulumi.Input[str] indices_memory_index_buffer_size: Percentage value. Default is 10%. 
               Total amount of heap used for indexing buffer, before writing segments to disk.
               This is an expert setting. Too low value will slow down indexing; too high value
               will increase indexing performance but causes performance issues for query performance.
        :param pulumi.Input[str] indices_queries_cache_size: Percentage value. Default is 10%. 
               Maximum amount of heap used for query cache. This is an expert setting.
               Too low value will decrease query performance and increase performance for other
               operations; too high value will cause issues with other Elasticsearch functionality.
        :param pulumi.Input[str] indices_query_bool_max_clause_count: Maximum number of clauses Lucene 
               BooleanQuery can have. The default value (1024) is relatively high, and increasing it
               may cause performance issues. Investigate other approaches first before increasing this value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reindex_remote_whitelists: Whitelisted addresses for reindexing. 
               Changing this value will cause all Elasticsearch instances to restart.
        :param pulumi.Input[str] search_max_buckets: Maximum number of aggregation buckets allowed 
               in a single response. Elasticsearch default value is used when this is not defined.
        :param pulumi.Input[str] thread_pool_analyze_queue_size: Size for the thread pool queue. 
               See documentation for exact details.
        :param pulumi.Input[str] thread_pool_analyze_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count -
               value is automatically lowered if set to higher than maximum value.
        :param pulumi.Input[str] thread_pool_force_merge_size: Size for the thread pool. See 
               documentation for exact details. Do note this may have maximum value depending on
               CPU count - value is automatically lowered if set to higher than maximum value.
        :param pulumi.Input[str] thread_pool_get_queue_size: Size for the thread pool queue. See 
               documentation for exact details.
        :param pulumi.Input[str] thread_pool_get_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count -
               value is automatically lowered if set to higher than maximum value.
        :param pulumi.Input[str] thread_pool_index_queue_size: Size for the thread pool queue. 
               See documentation for exact details.
        :param pulumi.Input[str] thread_pool_index_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count -
               value is automatically lowered if set to higher than maximum value.
        :param pulumi.Input[str] thread_pool_search_queue_size: Size for the thread pool queue. See 
               documentation for exact details.
        :param pulumi.Input[str] thread_pool_search_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count - value
               is automatically lowered if set to higher than maximum value.
        :param pulumi.Input[str] thread_pool_search_throttled_queue_size: Size for the thread pool queue. 
               See documentation for exact details.
        :param pulumi.Input[str] thread_pool_search_throttled_size: Size for the thread pool. See 
               documentation for exact details. Do note this may have maximum value depending on
               CPU count - value is automatically lowered if set to higher than maximum value.
        :param pulumi.Input[str] thread_pool_write_queue_size: Size for the thread pool queue. See 
               documentation for exact details.
        :param pulumi.Input[str] thread_pool_write_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count - value
               is automatically lowered if set to higher than maximum value.
        """
        if action_auto_create_index_enabled is not None:
            pulumi.set(__self__, "action_auto_create_index_enabled", action_auto_create_index_enabled)
        if action_destructive_requires_name is not None:
            pulumi.set(__self__, "action_destructive_requires_name", action_destructive_requires_name)
        if cluster_max_shards_per_node is not None:
            pulumi.set(__self__, "cluster_max_shards_per_node", cluster_max_shards_per_node)
        if http_max_content_length is not None:
            pulumi.set(__self__, "http_max_content_length", http_max_content_length)
        if http_max_header_size is not None:
            pulumi.set(__self__, "http_max_header_size", http_max_header_size)
        if http_max_initial_line_length is not None:
            pulumi.set(__self__, "http_max_initial_line_length", http_max_initial_line_length)
        if indices_fielddata_cache_size is not None:
            pulumi.set(__self__, "indices_fielddata_cache_size", indices_fielddata_cache_size)
        if indices_memory_index_buffer_size is not None:
            pulumi.set(__self__, "indices_memory_index_buffer_size", indices_memory_index_buffer_size)
        if indices_queries_cache_size is not None:
            pulumi.set(__self__, "indices_queries_cache_size", indices_queries_cache_size)
        if indices_query_bool_max_clause_count is not None:
            pulumi.set(__self__, "indices_query_bool_max_clause_count", indices_query_bool_max_clause_count)
        if reindex_remote_whitelists is not None:
            pulumi.set(__self__, "reindex_remote_whitelists", reindex_remote_whitelists)
        if search_max_buckets is not None:
            pulumi.set(__self__, "search_max_buckets", search_max_buckets)
        if thread_pool_analyze_queue_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_queue_size", thread_pool_analyze_queue_size)
        if thread_pool_analyze_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_size", thread_pool_analyze_size)
        if thread_pool_force_merge_size is not None:
            pulumi.set(__self__, "thread_pool_force_merge_size", thread_pool_force_merge_size)
        if thread_pool_get_queue_size is not None:
            pulumi.set(__self__, "thread_pool_get_queue_size", thread_pool_get_queue_size)
        if thread_pool_get_size is not None:
            pulumi.set(__self__, "thread_pool_get_size", thread_pool_get_size)
        if thread_pool_index_queue_size is not None:
            pulumi.set(__self__, "thread_pool_index_queue_size", thread_pool_index_queue_size)
        if thread_pool_index_size is not None:
            pulumi.set(__self__, "thread_pool_index_size", thread_pool_index_size)
        if thread_pool_search_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_queue_size", thread_pool_search_queue_size)
        if thread_pool_search_size is not None:
            pulumi.set(__self__, "thread_pool_search_size", thread_pool_search_size)
        if thread_pool_search_throttled_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_queue_size", thread_pool_search_throttled_queue_size)
        if thread_pool_search_throttled_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_size", thread_pool_search_throttled_size)
        if thread_pool_write_queue_size is not None:
            pulumi.set(__self__, "thread_pool_write_queue_size", thread_pool_write_queue_size)
        if thread_pool_write_size is not None:
            pulumi.set(__self__, "thread_pool_write_size", thread_pool_write_size)

    @property
    @pulumi.getter(name="actionAutoCreateIndexEnabled")
    def action_auto_create_index_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        Explicitly allow or block automatic 
        creation of indices. Defaults to true
        """
        return pulumi.get(self, "action_auto_create_index_enabled")

    @action_auto_create_index_enabled.setter
    def action_auto_create_index_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_auto_create_index_enabled", value)

    @property
    @pulumi.getter(name="actionDestructiveRequiresName")
    def action_destructive_requires_name(self) -> Optional[pulumi.Input[str]]:
        """
        Require explicit index names when deleting
        """
        return pulumi.get(self, "action_destructive_requires_name")

    @action_destructive_requires_name.setter
    def action_destructive_requires_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_destructive_requires_name", value)

    @property
    @pulumi.getter(name="clusterMaxShardsPerNode")
    def cluster_max_shards_per_node(self) -> Optional[pulumi.Input[str]]:
        """
        Controls the number of shards allowed in the 
        cluster per data node
        """
        return pulumi.get(self, "cluster_max_shards_per_node")

    @cluster_max_shards_per_node.setter
    def cluster_max_shards_per_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_max_shards_per_node", value)

    @property
    @pulumi.getter(name="httpMaxContentLength")
    def http_max_content_length(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum content length for HTTP requests to 
        the Elasticsearch HTTP API, in bytes.
        """
        return pulumi.get(self, "http_max_content_length")

    @http_max_content_length.setter
    def http_max_content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_content_length", value)

    @property
    @pulumi.getter(name="httpMaxHeaderSize")
    def http_max_header_size(self) -> Optional[pulumi.Input[str]]:
        """
        The max size of allowed headers, in bytes.
        """
        return pulumi.get(self, "http_max_header_size")

    @http_max_header_size.setter
    def http_max_header_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_header_size", value)

    @property
    @pulumi.getter(name="httpMaxInitialLineLength")
    def http_max_initial_line_length(self) -> Optional[pulumi.Input[str]]:
        """
        The max length of an HTTP URL, in bytes.
        """
        return pulumi.get(self, "http_max_initial_line_length")

    @http_max_initial_line_length.setter
    def http_max_initial_line_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_initial_line_length", value)

    @property
    @pulumi.getter(name="indicesFielddataCacheSize")
    def indices_fielddata_cache_size(self) -> Optional[pulumi.Input[str]]:
        """
        Relative amount. Maximum amount of 
        heap memory used for field data cache. This is an expert setting; decreasing the
        value too much will increase overhead of loading field data; too much memory used
        for field data cache will decrease amount of heap available for other operations.
        """
        return pulumi.get(self, "indices_fielddata_cache_size")

    @indices_fielddata_cache_size.setter
    def indices_fielddata_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_fielddata_cache_size", value)

    @property
    @pulumi.getter(name="indicesMemoryIndexBufferSize")
    def indices_memory_index_buffer_size(self) -> Optional[pulumi.Input[str]]:
        """
        Percentage value. Default is 10%. 
        Total amount of heap used for indexing buffer, before writing segments to disk.
        This is an expert setting. Too low value will slow down indexing; too high value
        will increase indexing performance but causes performance issues for query performance.
        """
        return pulumi.get(self, "indices_memory_index_buffer_size")

    @indices_memory_index_buffer_size.setter
    def indices_memory_index_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_memory_index_buffer_size", value)

    @property
    @pulumi.getter(name="indicesQueriesCacheSize")
    def indices_queries_cache_size(self) -> Optional[pulumi.Input[str]]:
        """
        Percentage value. Default is 10%. 
        Maximum amount of heap used for query cache. This is an expert setting.
        Too low value will decrease query performance and increase performance for other
        operations; too high value will cause issues with other Elasticsearch functionality.
        """
        return pulumi.get(self, "indices_queries_cache_size")

    @indices_queries_cache_size.setter
    def indices_queries_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_queries_cache_size", value)

    @property
    @pulumi.getter(name="indicesQueryBoolMaxClauseCount")
    def indices_query_bool_max_clause_count(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of clauses Lucene 
        BooleanQuery can have. The default value (1024) is relatively high, and increasing it
        may cause performance issues. Investigate other approaches first before increasing this value.
        """
        return pulumi.get(self, "indices_query_bool_max_clause_count")

    @indices_query_bool_max_clause_count.setter
    def indices_query_bool_max_clause_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_query_bool_max_clause_count", value)

    @property
    @pulumi.getter(name="reindexRemoteWhitelists")
    def reindex_remote_whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Whitelisted addresses for reindexing. 
        Changing this value will cause all Elasticsearch instances to restart.
        """
        return pulumi.get(self, "reindex_remote_whitelists")

    @reindex_remote_whitelists.setter
    def reindex_remote_whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reindex_remote_whitelists", value)

    @property
    @pulumi.getter(name="searchMaxBuckets")
    def search_max_buckets(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of aggregation buckets allowed 
        in a single response. Elasticsearch default value is used when this is not defined.
        """
        return pulumi.get(self, "search_max_buckets")

    @search_max_buckets.setter
    def search_max_buckets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_max_buckets", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeQueueSize")
    def thread_pool_analyze_queue_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool queue. 
        See documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_analyze_queue_size")

    @thread_pool_analyze_queue_size.setter
    def thread_pool_analyze_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_analyze_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeSize")
    def thread_pool_analyze_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count -
        value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_analyze_size")

    @thread_pool_analyze_size.setter
    def thread_pool_analyze_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_analyze_size", value)

    @property
    @pulumi.getter(name="threadPoolForceMergeSize")
    def thread_pool_force_merge_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool. See 
        documentation for exact details. Do note this may have maximum value depending on
        CPU count - value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_force_merge_size")

    @thread_pool_force_merge_size.setter
    def thread_pool_force_merge_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_force_merge_size", value)

    @property
    @pulumi.getter(name="threadPoolGetQueueSize")
    def thread_pool_get_queue_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool queue. See 
        documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_get_queue_size")

    @thread_pool_get_queue_size.setter
    def thread_pool_get_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_get_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolGetSize")
    def thread_pool_get_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count -
        value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_get_size")

    @thread_pool_get_size.setter
    def thread_pool_get_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_get_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexQueueSize")
    def thread_pool_index_queue_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool queue. 
        See documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_index_queue_size")

    @thread_pool_index_queue_size.setter
    def thread_pool_index_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_index_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexSize")
    def thread_pool_index_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count -
        value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_index_size")

    @thread_pool_index_size.setter
    def thread_pool_index_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_index_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchQueueSize")
    def thread_pool_search_queue_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool queue. See 
        documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_search_queue_size")

    @thread_pool_search_queue_size.setter
    def thread_pool_search_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchSize")
    def thread_pool_search_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count - value
        is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_search_size")

    @thread_pool_search_size.setter
    def thread_pool_search_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledQueueSize")
    def thread_pool_search_throttled_queue_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool queue. 
        See documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_search_throttled_queue_size")

    @thread_pool_search_throttled_queue_size.setter
    def thread_pool_search_throttled_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_throttled_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledSize")
    def thread_pool_search_throttled_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool. See 
        documentation for exact details. Do note this may have maximum value depending on
        CPU count - value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_search_throttled_size")

    @thread_pool_search_throttled_size.setter
    def thread_pool_search_throttled_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_throttled_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteQueueSize")
    def thread_pool_write_queue_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool queue. See 
        documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_write_queue_size")

    @thread_pool_write_queue_size.setter
    def thread_pool_write_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_write_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteSize")
    def thread_pool_write_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count - value
        is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_write_size")

    @thread_pool_write_size.setter
    def thread_pool_write_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_write_size", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigIndexPatternArgs:
    def __init__(__self__, *,
                 max_index_count: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] max_index_count: Maximum number of indexes to keep before deleting the oldest one.
        :param pulumi.Input[str] pattern: Must consist of alpha-numeric characters, dashes, underscores, 
               dots and glob characters (* and ?)
        """
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of indexes to keep before deleting the oldest one.
        """
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Must consist of alpha-numeric characters, dashes, underscores, 
        dots and glob characters (* and ?)
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigIndexTemplateArgs:
    def __init__(__self__, *,
                 mapping_nested_objects_limit: Optional[pulumi.Input[str]] = None,
                 number_of_replicas: Optional[pulumi.Input[str]] = None,
                 number_of_shards: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mapping_nested_objects_limit: The maximum number of nested JSON objects that 
               a single document can contain across all nested types. This limit helps to prevent out of
               memory errors when a document contains too many nested objects. Default is 10000.
        :param pulumi.Input[str] number_of_replicas: The number of replicas each primary shard has.
        :param pulumi.Input[str] number_of_shards: The number of primary shards that an index should have.
        """
        if mapping_nested_objects_limit is not None:
            pulumi.set(__self__, "mapping_nested_objects_limit", mapping_nested_objects_limit)
        if number_of_replicas is not None:
            pulumi.set(__self__, "number_of_replicas", number_of_replicas)
        if number_of_shards is not None:
            pulumi.set(__self__, "number_of_shards", number_of_shards)

    @property
    @pulumi.getter(name="mappingNestedObjectsLimit")
    def mapping_nested_objects_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of nested JSON objects that 
        a single document can contain across all nested types. This limit helps to prevent out of
        memory errors when a document contains too many nested objects. Default is 10000.
        """
        return pulumi.get(self, "mapping_nested_objects_limit")

    @mapping_nested_objects_limit.setter
    def mapping_nested_objects_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapping_nested_objects_limit", value)

    @property
    @pulumi.getter(name="numberOfReplicas")
    def number_of_replicas(self) -> Optional[pulumi.Input[str]]:
        """
        The number of replicas each primary shard has.
        """
        return pulumi.get(self, "number_of_replicas")

    @number_of_replicas.setter
    def number_of_replicas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number_of_replicas", value)

    @property
    @pulumi.getter(name="numberOfShards")
    def number_of_shards(self) -> Optional[pulumi.Input[str]]:
        """
        The number of primary shards that an index should have.
        """
        return pulumi.get(self, "number_of_shards")

    @number_of_shards.setter
    def number_of_shards(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number_of_shards", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigKibanaArgs:
    def __init__(__self__, *,
                 elasticsearch_request_timeout: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[str]] = None,
                 max_old_space_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] elasticsearch_request_timeout: Timeout in milliseconds for requests 
               made by Kibana towards Elasticsearch.
        :param pulumi.Input[str] enabled: Enable or disable Kibana.
        :param pulumi.Input[str] max_old_space_size: Limits the maximum amount of memory (in MiB) the 
               Kibana process can use. This sets the max_old_space_size option of the nodejs running
               the Kibana. Note: the memory reserved by Kibana is not available for Elasticsearch.
        """
        if elasticsearch_request_timeout is not None:
            pulumi.set(__self__, "elasticsearch_request_timeout", elasticsearch_request_timeout)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_old_space_size is not None:
            pulumi.set(__self__, "max_old_space_size", max_old_space_size)

    @property
    @pulumi.getter(name="elasticsearchRequestTimeout")
    def elasticsearch_request_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout in milliseconds for requests 
        made by Kibana towards Elasticsearch.
        """
        return pulumi.get(self, "elasticsearch_request_timeout")

    @elasticsearch_request_timeout.setter
    def elasticsearch_request_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_request_timeout", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable Kibana.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxOldSpaceSize")
    def max_old_space_size(self) -> Optional[pulumi.Input[str]]:
        """
        Limits the maximum amount of memory (in MiB) the 
        Kibana process can use. This sets the max_old_space_size option of the nodejs running
        the Kibana. Note: the memory reserved by Kibana is not available for Elasticsearch.
        """
        return pulumi.get(self, "max_old_space_size")

    @max_old_space_size.setter
    def max_old_space_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_old_space_size", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] elasticsearch: Allow clients to connect to elasticsearch from the public 
               internet for service nodes that are in a project VPC or another type of private network.
        :param pulumi.Input[str] kibana: Allow clients to connect to kibana from the public internet for 
               service nodes that are in a project VPC or another type of private network.
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public 
               internet for service nodes that are in a project VPC or another type of private network.
        """
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to elasticsearch from the public 
        internet for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to kibana from the public internet for 
        service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public 
        internet for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] elasticsearch: Allow clients to connect to elasticsearch from the public 
               internet for service nodes that are in a project VPC or another type of private network.
        :param pulumi.Input[str] kibana: Allow clients to connect to kibana from the public internet for 
               service nodes that are in a project VPC or another type of private network.
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public 
               internet for service nodes that are in a project VPC or another type of private network.
        """
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to elasticsearch from the public 
        internet for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to kibana from the public internet for 
        service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public 
        internet for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ElasticSearchServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GrafanaComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Server hostname or IP
        :param pulumi.Input[int] port: SMTP server port
        """
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Server hostname or IP
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        SMTP server port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GrafanaGrafanaArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GrafanaGrafanaUserConfigArgs:
    def __init__(__self__, *,
                 alerting_enabled: Optional[pulumi.Input[str]] = None,
                 alerting_error_or_timeout: Optional[pulumi.Input[str]] = None,
                 alerting_nodata_or_nullvalues: Optional[pulumi.Input[str]] = None,
                 allow_embedding: Optional[pulumi.Input[str]] = None,
                 auth_basic_enabled: Optional[pulumi.Input[str]] = None,
                 auth_generic_oauth: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGenericOauthArgs']] = None,
                 auth_github: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGithubArgs']] = None,
                 auth_gitlab: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGitlabArgs']] = None,
                 auth_google: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGoogleArgs']] = None,
                 cookie_samesite: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 dashboards_versions_to_keep: Optional[pulumi.Input[str]] = None,
                 dataproxy_send_user_header: Optional[pulumi.Input[str]] = None,
                 dataproxy_timeout: Optional[pulumi.Input[str]] = None,
                 disable_gravatar: Optional[pulumi.Input[str]] = None,
                 editors_can_admin: Optional[pulumi.Input[str]] = None,
                 external_image_storage: Optional[pulumi.Input['GrafanaGrafanaUserConfigExternalImageStorageArgs']] = None,
                 google_analytics_ua_id: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_enabled: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['GrafanaGrafanaUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['GrafanaGrafanaUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 smtp_server: Optional[pulumi.Input['GrafanaGrafanaUserConfigSmtpServerArgs']] = None,
                 user_auto_assign_org: Optional[pulumi.Input[str]] = None,
                 user_auto_assign_org_role: Optional[pulumi.Input[str]] = None,
                 viewers_can_edit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alerting_enabled: Enable or disable Grafana alerting functionality
        :param pulumi.Input[str] alerting_error_or_timeout: Default error or timeout setting for new alerting rules
        :param pulumi.Input[str] alerting_nodata_or_nullvalues: Default value for 'no data or null values' for
               new alerting rules
        :param pulumi.Input[str] allow_embedding: Allow embedding Grafana dashboards with iframe/frame/object/embed 
               tags. Disabled by default to limit impact of clickjacking
        :param pulumi.Input[str] auth_basic_enabled: Enable or disable basic authentication form, used by Grafana 
               built-in login.
        :param pulumi.Input['GrafanaGrafanaUserConfigAuthGenericOauthArgs'] auth_generic_oauth: Generic OAuth integration.
        :param pulumi.Input['GrafanaGrafanaUserConfigAuthGithubArgs'] auth_github: Automatically sign-up users on successful sign-in
        :param pulumi.Input['GrafanaGrafanaUserConfigAuthGitlabArgs'] auth_gitlab: GitLab Auth integration.
        :param pulumi.Input['GrafanaGrafanaUserConfigAuthGoogleArgs'] auth_google: Google Auth integration
        :param pulumi.Input[str] cookie_samesite: Cookie SameSite attribute: 'strict' prevents sending cookie for 
               cross-site requests, effectively disabling direct linking from other sites to Grafana. 'lax' is the default value.
        :param pulumi.Input[str] custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        :param pulumi.Input[str] dashboards_versions_to_keep: Dashboard versions to keep per dashboard.
        :param pulumi.Input[str] dataproxy_send_user_header: Send 'X-Grafana-User' header to data source.
        :param pulumi.Input[str] dataproxy_timeout: Timeout for data proxy requests in seconds.
        :param pulumi.Input[str] disable_gravatar: Set to true to disable gravatar. Defaults to false 
               (gravatar is enabled).
        :param pulumi.Input[str] editors_can_admin: Editors can manage folders, teams and dashboards created by them.
        :param pulumi.Input['GrafanaGrafanaUserConfigExternalImageStorageArgs'] external_image_storage: External image store settings
        :param pulumi.Input[str] google_analytics_ua_id: Google Analytics Universal Analytics ID for tracking Grafana usage
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        :param pulumi.Input[str] metrics_enabled: Enable Grafana /metrics endpoint
        :param pulumi.Input[str] project_to_fork_from: Name of another project to fork a service from. This has 
               effect only when a new service is being created.
        :param pulumi.Input['GrafanaGrafanaUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet.
        :param pulumi.Input[str] recovery_basebackup_name: Name of the basebackup to restore in forked service.
        :param pulumi.Input[str] service_to_fork_from: Name of another service to fork from. This has effect only 
               when a new service is being created.
        :param pulumi.Input['GrafanaGrafanaUserConfigSmtpServerArgs'] smtp_server: SMTP server settings.
        :param pulumi.Input[str] user_auto_assign_org: Auto-assign new users on signup to main organization. 
               Defaults to false.
        :param pulumi.Input[str] user_auto_assign_org_role: Set role for new signups. Defaults to Viewer.
        :param pulumi.Input[str] viewers_can_edit: Users with view-only permission can edit but not save dashboards.
        """
        if alerting_enabled is not None:
            pulumi.set(__self__, "alerting_enabled", alerting_enabled)
        if alerting_error_or_timeout is not None:
            pulumi.set(__self__, "alerting_error_or_timeout", alerting_error_or_timeout)
        if alerting_nodata_or_nullvalues is not None:
            pulumi.set(__self__, "alerting_nodata_or_nullvalues", alerting_nodata_or_nullvalues)
        if allow_embedding is not None:
            pulumi.set(__self__, "allow_embedding", allow_embedding)
        if auth_basic_enabled is not None:
            pulumi.set(__self__, "auth_basic_enabled", auth_basic_enabled)
        if auth_generic_oauth is not None:
            pulumi.set(__self__, "auth_generic_oauth", auth_generic_oauth)
        if auth_github is not None:
            pulumi.set(__self__, "auth_github", auth_github)
        if auth_gitlab is not None:
            pulumi.set(__self__, "auth_gitlab", auth_gitlab)
        if auth_google is not None:
            pulumi.set(__self__, "auth_google", auth_google)
        if cookie_samesite is not None:
            pulumi.set(__self__, "cookie_samesite", cookie_samesite)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if dashboards_versions_to_keep is not None:
            pulumi.set(__self__, "dashboards_versions_to_keep", dashboards_versions_to_keep)
        if dataproxy_send_user_header is not None:
            pulumi.set(__self__, "dataproxy_send_user_header", dataproxy_send_user_header)
        if dataproxy_timeout is not None:
            pulumi.set(__self__, "dataproxy_timeout", dataproxy_timeout)
        if disable_gravatar is not None:
            pulumi.set(__self__, "disable_gravatar", disable_gravatar)
        if editors_can_admin is not None:
            pulumi.set(__self__, "editors_can_admin", editors_can_admin)
        if external_image_storage is not None:
            pulumi.set(__self__, "external_image_storage", external_image_storage)
        if google_analytics_ua_id is not None:
            pulumi.set(__self__, "google_analytics_ua_id", google_analytics_ua_id)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if smtp_server is not None:
            pulumi.set(__self__, "smtp_server", smtp_server)
        if user_auto_assign_org is not None:
            pulumi.set(__self__, "user_auto_assign_org", user_auto_assign_org)
        if user_auto_assign_org_role is not None:
            pulumi.set(__self__, "user_auto_assign_org_role", user_auto_assign_org_role)
        if viewers_can_edit is not None:
            pulumi.set(__self__, "viewers_can_edit", viewers_can_edit)

    @property
    @pulumi.getter(name="alertingEnabled")
    def alerting_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable Grafana alerting functionality
        """
        return pulumi.get(self, "alerting_enabled")

    @alerting_enabled.setter
    def alerting_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_enabled", value)

    @property
    @pulumi.getter(name="alertingErrorOrTimeout")
    def alerting_error_or_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Default error or timeout setting for new alerting rules
        """
        return pulumi.get(self, "alerting_error_or_timeout")

    @alerting_error_or_timeout.setter
    def alerting_error_or_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_error_or_timeout", value)

    @property
    @pulumi.getter(name="alertingNodataOrNullvalues")
    def alerting_nodata_or_nullvalues(self) -> Optional[pulumi.Input[str]]:
        """
        Default value for 'no data or null values' for
        new alerting rules
        """
        return pulumi.get(self, "alerting_nodata_or_nullvalues")

    @alerting_nodata_or_nullvalues.setter
    def alerting_nodata_or_nullvalues(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_nodata_or_nullvalues", value)

    @property
    @pulumi.getter(name="allowEmbedding")
    def allow_embedding(self) -> Optional[pulumi.Input[str]]:
        """
        Allow embedding Grafana dashboards with iframe/frame/object/embed 
        tags. Disabled by default to limit impact of clickjacking
        """
        return pulumi.get(self, "allow_embedding")

    @allow_embedding.setter
    def allow_embedding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_embedding", value)

    @property
    @pulumi.getter(name="authBasicEnabled")
    def auth_basic_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable basic authentication form, used by Grafana 
        built-in login.
        """
        return pulumi.get(self, "auth_basic_enabled")

    @auth_basic_enabled.setter
    def auth_basic_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_basic_enabled", value)

    @property
    @pulumi.getter(name="authGenericOauth")
    def auth_generic_oauth(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGenericOauthArgs']]:
        """
        Generic OAuth integration.
        """
        return pulumi.get(self, "auth_generic_oauth")

    @auth_generic_oauth.setter
    def auth_generic_oauth(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGenericOauthArgs']]):
        pulumi.set(self, "auth_generic_oauth", value)

    @property
    @pulumi.getter(name="authGithub")
    def auth_github(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGithubArgs']]:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "auth_github")

    @auth_github.setter
    def auth_github(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGithubArgs']]):
        pulumi.set(self, "auth_github", value)

    @property
    @pulumi.getter(name="authGitlab")
    def auth_gitlab(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGitlabArgs']]:
        """
        GitLab Auth integration.
        """
        return pulumi.get(self, "auth_gitlab")

    @auth_gitlab.setter
    def auth_gitlab(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGitlabArgs']]):
        pulumi.set(self, "auth_gitlab", value)

    @property
    @pulumi.getter(name="authGoogle")
    def auth_google(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGoogleArgs']]:
        """
        Google Auth integration
        """
        return pulumi.get(self, "auth_google")

    @auth_google.setter
    def auth_google(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGoogleArgs']]):
        pulumi.set(self, "auth_google", value)

    @property
    @pulumi.getter(name="cookieSamesite")
    def cookie_samesite(self) -> Optional[pulumi.Input[str]]:
        """
        Cookie SameSite attribute: 'strict' prevents sending cookie for 
        cross-site requests, effectively disabling direct linking from other sites to Grafana. 'lax' is the default value.
        """
        return pulumi.get(self, "cookie_samesite")

    @cookie_samesite.setter
    def cookie_samesite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_samesite", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="dashboardsVersionsToKeep")
    def dashboards_versions_to_keep(self) -> Optional[pulumi.Input[str]]:
        """
        Dashboard versions to keep per dashboard.
        """
        return pulumi.get(self, "dashboards_versions_to_keep")

    @dashboards_versions_to_keep.setter
    def dashboards_versions_to_keep(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboards_versions_to_keep", value)

    @property
    @pulumi.getter(name="dataproxySendUserHeader")
    def dataproxy_send_user_header(self) -> Optional[pulumi.Input[str]]:
        """
        Send 'X-Grafana-User' header to data source.
        """
        return pulumi.get(self, "dataproxy_send_user_header")

    @dataproxy_send_user_header.setter
    def dataproxy_send_user_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproxy_send_user_header", value)

    @property
    @pulumi.getter(name="dataproxyTimeout")
    def dataproxy_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout for data proxy requests in seconds.
        """
        return pulumi.get(self, "dataproxy_timeout")

    @dataproxy_timeout.setter
    def dataproxy_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproxy_timeout", value)

    @property
    @pulumi.getter(name="disableGravatar")
    def disable_gravatar(self) -> Optional[pulumi.Input[str]]:
        """
        Set to true to disable gravatar. Defaults to false 
        (gravatar is enabled).
        """
        return pulumi.get(self, "disable_gravatar")

    @disable_gravatar.setter
    def disable_gravatar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_gravatar", value)

    @property
    @pulumi.getter(name="editorsCanAdmin")
    def editors_can_admin(self) -> Optional[pulumi.Input[str]]:
        """
        Editors can manage folders, teams and dashboards created by them.
        """
        return pulumi.get(self, "editors_can_admin")

    @editors_can_admin.setter
    def editors_can_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "editors_can_admin", value)

    @property
    @pulumi.getter(name="externalImageStorage")
    def external_image_storage(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigExternalImageStorageArgs']]:
        """
        External image store settings
        """
        return pulumi.get(self, "external_image_storage")

    @external_image_storage.setter
    def external_image_storage(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigExternalImageStorageArgs']]):
        pulumi.set(self, "external_image_storage", value)

    @property
    @pulumi.getter(name="googleAnalyticsUaId")
    def google_analytics_ua_id(self) -> Optional[pulumi.Input[str]]:
        """
        Google Analytics Universal Analytics ID for tracking Grafana usage
        """
        return pulumi.get(self, "google_analytics_ua_id")

    @google_analytics_ua_id.setter
    def google_analytics_ua_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_analytics_ua_id", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Grafana /metrics endpoint
        """
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another project to fork a service from. This has 
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet.
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the basebackup to restore in forked service.
        """
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another service to fork from. This has effect only 
        when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="smtpServer")
    def smtp_server(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigSmtpServerArgs']]:
        """
        SMTP server settings.
        """
        return pulumi.get(self, "smtp_server")

    @smtp_server.setter
    def smtp_server(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigSmtpServerArgs']]):
        pulumi.set(self, "smtp_server", value)

    @property
    @pulumi.getter(name="userAutoAssignOrg")
    def user_auto_assign_org(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-assign new users on signup to main organization. 
        Defaults to false.
        """
        return pulumi.get(self, "user_auto_assign_org")

    @user_auto_assign_org.setter
    def user_auto_assign_org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_auto_assign_org", value)

    @property
    @pulumi.getter(name="userAutoAssignOrgRole")
    def user_auto_assign_org_role(self) -> Optional[pulumi.Input[str]]:
        """
        Set role for new signups. Defaults to Viewer.
        """
        return pulumi.get(self, "user_auto_assign_org_role")

    @user_auto_assign_org_role.setter
    def user_auto_assign_org_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_auto_assign_org_role", value)

    @property
    @pulumi.getter(name="viewersCanEdit")
    def viewers_can_edit(self) -> Optional[pulumi.Input[str]]:
        """
        Users with view-only permission can edit but not save dashboards.
        """
        return pulumi.get(self, "viewers_can_edit")

    @viewers_can_edit.setter
    def viewers_can_edit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "viewers_can_edit", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigAuthGenericOauthArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_organizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] allow_sign_up: Automatically sign-up users on successful sign-in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_domains: Allowed domain
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_organizations: Must consist of alpha-numeric characters and dashes"
        :param pulumi.Input[str] api_url: API URL. This only needs to be set when using self hosted GitLab
        :param pulumi.Input[str] auth_url: Authorization URL. This only needs to be set when using self hosted GitLab
        :param pulumi.Input[str] client_id: Client ID from provider
        :param pulumi.Input[str] client_secret: Client secret from provider
        :param pulumi.Input[str] name: Name of the OAuth integration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: Scope must be non-empty string without whitespace
        :param pulumi.Input[str] token_url: Token URL. This only needs to be set when using self hosted GitLab
        """
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allowed domain
        """
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Must consist of alpha-numeric characters and dashes"
        """
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        """
        API URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID from provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Client secret from provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the OAuth integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Scope must be non-empty string without whitespace
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        """
        Token URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigAuthGithubArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_organizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 team_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] allow_sign_up: Automatically sign-up users on successful sign-in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_organizations: Must consist of alpha-numeric characters and dashes"
        :param pulumi.Input[str] client_id: Client ID from provider
        :param pulumi.Input[str] client_secret: Client secret from provider
        :param pulumi.Input[Sequence[pulumi.Input[str]]] team_ids: Require users to belong to one of given team IDs
        """
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if team_ids is not None:
            pulumi.set(__self__, "team_ids", team_ids)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Must consist of alpha-numeric characters and dashes"
        """
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID from provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Client secret from provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="teamIds")
    def team_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Require users to belong to one of given team IDs
        """
        return pulumi.get(self, "team_ids")

    @team_ids.setter
    def team_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "team_ids", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigAuthGitlabArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] allow_sign_up: Automatically sign-up users on successful sign-in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_groups: Require users to belong to one of given groups
        :param pulumi.Input[str] api_url: API URL. This only needs to be set when using self hosted GitLab
        :param pulumi.Input[str] auth_url: Authorization URL. This only needs to be set when using self hosted GitLab
        :param pulumi.Input[str] client_id: Client ID from provider
        :param pulumi.Input[str] client_secret: Client secret from provider
        :param pulumi.Input[str] token_url: Token URL. This only needs to be set when using self hosted GitLab
        """
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_groups is not None:
            pulumi.set(__self__, "allowed_groups", allowed_groups)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedGroups")
    def allowed_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Require users to belong to one of given groups
        """
        return pulumi.get(self, "allowed_groups")

    @allowed_groups.setter
    def allowed_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_groups", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        """
        API URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID from provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Client secret from provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        """
        Token URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigAuthGoogleArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] allow_sign_up: Automatically sign-up users on successful sign-in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_domains: Allowed domain
        :param pulumi.Input[str] client_id: Client ID from provider
        :param pulumi.Input[str] client_secret: Client secret from provider
        """
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allowed domain
        """
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID from provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Client secret from provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigExternalImageStorageArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket_url: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_key: S3 access key. Requires permissions to the S3 bucket for the 
               s3:PutObject and s3:PutObjectAcl actions
        :param pulumi.Input[str] bucket_url: Bucket URL for S3
        :param pulumi.Input[str] provider: Provider type
        :param pulumi.Input[str] secret_key: S3 secret key
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket_url is not None:
            pulumi.set(__self__, "bucket_url", bucket_url)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        S3 access key. Requires permissions to the S3 bucket for the 
        s3:PutObject and s3:PutObjectAcl actions
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket URL for S3
        """
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        Provider type
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        S3 secret key
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] grafana: Allow clients to connect to grafana from the public internet for service nodes that 
               are in a project VPC or another type of private network.
        """
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to grafana from the public internet for service nodes that 
        are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] grafana: Allow clients to connect to grafana from the public internet for service nodes that 
               are in a project VPC or another type of private network.
        """
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to grafana from the public internet for service nodes that 
        are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigSmtpServerArgs:
    def __init__(__self__, *,
                 from_address: Optional[pulumi.Input[str]] = None,
                 from_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 skip_verify: Optional[pulumi.Input[str]] = None,
                 starttls_policy: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: Address used for sending emails
        :param pulumi.Input[str] from_name: Name used in outgoing emails, defaults to Grafana
        :param pulumi.Input[str] host: Server hostname or IP
        :param pulumi.Input[str] password: Password for SMTP authentication
        :param pulumi.Input[str] port: SMTP server port
        :param pulumi.Input[str] skip_verify: Skip verifying server certificate. Defaults to false
        :param pulumi.Input[str] starttls_policy: Either OpportunisticStartTLS, MandatoryStartTLS or NoStartTLS. 
               Default is OpportunisticStartTLS.
        :param pulumi.Input[str] username: Username for SMTP authentication
        """
        if from_address is not None:
            pulumi.set(__self__, "from_address", from_address)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if starttls_policy is not None:
            pulumi.set(__self__, "starttls_policy", starttls_policy)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[pulumi.Input[str]]:
        """
        Address used for sending emails
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name used in outgoing emails, defaults to Grafana
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Server hostname or IP
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for SMTP authentication
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        SMTP server port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[pulumi.Input[str]]:
        """
        Skip verifying server certificate. Defaults to false
        """
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter(name="starttlsPolicy")
    def starttls_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Either OpportunisticStartTLS, MandatoryStartTLS or NoStartTLS. 
        Default is OpportunisticStartTLS.
        """
        return pulumi.get(self, "starttls_policy")

    @starttls_policy.setter
    def starttls_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starttls_policy", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for SMTP authentication
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GrafanaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class InfluxDbComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class InfluxDbInfluxdbArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None):
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)


@pulumi.input_type
class InfluxDbInfluxdbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 influxdb: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigInfluxdbArgs']] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_access: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name
        :param pulumi.Input['InfluxDbInfluxdbUserConfigInfluxdbArgs'] influxdb: influxdb.conf configuration values
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param pulumi.Input['InfluxDbInfluxdbUserConfigPrivateAccessArgs'] private_access: Allow access to selected service ports from private networks
        :param pulumi.Input[str] project_to_fork_from: Name of another project to fork a service from. This has 
               effect only when a new service is being created.
        :param pulumi.Input['InfluxDbInfluxdbUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet
        :param pulumi.Input[str] recovery_basebackup_name: Name of the basebackup to restore in forked service
        :param pulumi.Input[str] service_to_fork_from: Name of another service to fork from. This has effect 
               only when a new service is being created.
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input['InfluxDbInfluxdbUserConfigInfluxdbArgs']]:
        """
        influxdb.conf configuration values
        """
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigInfluxdbArgs']]):
        pulumi.set(self, "influxdb", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPrivateAccessArgs']]:
        """
        Allow access to selected service ports from private networks
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another project to fork a service from. This has 
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the basebackup to restore in forked service
        """
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another service to fork from. This has effect 
        only when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class InfluxDbInfluxdbUserConfigInfluxdbArgs:
    def __init__(__self__, *,
                 log_queries_after: Optional[pulumi.Input[str]] = None,
                 max_row_limit: Optional[pulumi.Input[str]] = None,
                 max_select_buckets: Optional[pulumi.Input[str]] = None,
                 max_select_point: Optional[pulumi.Input[str]] = None,
                 query_timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log_queries_after: The maximum duration in seconds before a query is 
               logged as a slow query. Setting this to 0 (the default) will never log slow queries.
        :param pulumi.Input[str] max_row_limit: The maximum number of rows returned in a non-chunked query. 
               Setting this to 0 (the default) allows an unlimited number to be returned.
        :param pulumi.Input[str] max_select_buckets: The maximum number of `GROUP BY time()` buckets that 
               can be processed in a query. Setting this to 0 (the default) allows an unlimited number to
               be processed.
        :param pulumi.Input[str] max_select_point: The maximum number of points that can be processed in a 
               SELECT statement. Setting this to 0 (the default) allows an unlimited number to be processed.
        :param pulumi.Input[str] query_timeout: The maximum duration in seconds before a query is killed. 
               Setting this to 0 (the default) will never kill slow queries.
        """
        if log_queries_after is not None:
            pulumi.set(__self__, "log_queries_after", log_queries_after)
        if max_row_limit is not None:
            pulumi.set(__self__, "max_row_limit", max_row_limit)
        if max_select_buckets is not None:
            pulumi.set(__self__, "max_select_buckets", max_select_buckets)
        if max_select_point is not None:
            pulumi.set(__self__, "max_select_point", max_select_point)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)

    @property
    @pulumi.getter(name="logQueriesAfter")
    def log_queries_after(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum duration in seconds before a query is 
        logged as a slow query. Setting this to 0 (the default) will never log slow queries.
        """
        return pulumi.get(self, "log_queries_after")

    @log_queries_after.setter
    def log_queries_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_queries_after", value)

    @property
    @pulumi.getter(name="maxRowLimit")
    def max_row_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of rows returned in a non-chunked query. 
        Setting this to 0 (the default) allows an unlimited number to be returned.
        """
        return pulumi.get(self, "max_row_limit")

    @max_row_limit.setter
    def max_row_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_row_limit", value)

    @property
    @pulumi.getter(name="maxSelectBuckets")
    def max_select_buckets(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of `GROUP BY time()` buckets that 
        can be processed in a query. Setting this to 0 (the default) allows an unlimited number to
        be processed.
        """
        return pulumi.get(self, "max_select_buckets")

    @max_select_buckets.setter
    def max_select_buckets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_select_buckets", value)

    @property
    @pulumi.getter(name="maxSelectPoint")
    def max_select_point(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of points that can be processed in a 
        SELECT statement. Setting this to 0 (the default) allows an unlimited number to be processed.
        """
        return pulumi.get(self, "max_select_point")

    @max_select_point.setter
    def max_select_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_select_point", value)

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum duration in seconds before a query is killed. 
        Setting this to 0 (the default) will never kill slow queries.
        """
        return pulumi.get(self, "query_timeout")

    @query_timeout.setter
    def query_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_timeout", value)


@pulumi.input_type
class InfluxDbInfluxdbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] influxdb: influxdb.conf configuration values
        """
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input[str]]:
        """
        influxdb.conf configuration values
        """
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class InfluxDbInfluxdbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] influxdb: influxdb.conf configuration values
        """
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input[str]]:
        """
        influxdb.conf configuration values
        """
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class InfluxDbServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class KafkaComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class KafkaConnectComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class KafkaConnectKafkaConnectArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KafkaConnectKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kafka_connect: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigKafkaConnectArgs']] = None,
                 private_access: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPublicAccessArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param pulumi.Input['KafkaConnectKafkaConnectUserConfigKafkaConnectArgs'] kafka_connect: Allow clients to connect to kafka_connect from the public internet for 
               service nodes that are in a project VPC or another type of private network.
        :param pulumi.Input['KafkaConnectKafkaConnectUserConfigPrivateAccessArgs'] private_access: Allow access to selected service ports from private networks.
        :param pulumi.Input['KafkaConnectKafkaConnectUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet.
        """
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigKafkaConnectArgs']]:
        """
        Allow clients to connect to kafka_connect from the public internet for 
        service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigKafkaConnectArgs']]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPrivateAccessArgs']]:
        """
        Allow access to selected service ports from private networks.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet.
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)


@pulumi.input_type
class KafkaConnectKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[pulumi.Input[str]] = None,
                 consumer_auto_offset_reset: Optional[pulumi.Input[str]] = None,
                 consumer_fetch_max_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_isolation_level: Optional[pulumi.Input[str]] = None,
                 consumer_max_partition_fetch_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_interval_ms: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_records: Optional[pulumi.Input[str]] = None,
                 offset_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 offset_flush_timeout_ms: Optional[pulumi.Input[str]] = None,
                 producer_max_request_size: Optional[pulumi.Input[str]] = None,
                 session_timeout_ms: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] connector_client_config_override_policy: Defines what client configurations can be 
               overridden by the connector. Default is None.
        :param pulumi.Input[str] consumer_auto_offset_reset: What to do when there is no initial offset in Kafka or 
               if the current offset does not exist any more on the server. Default is earliest.
        :param pulumi.Input[str] consumer_fetch_max_bytes: Records are fetched in batches by the consumer, and if 
               the first record batch in the first non-empty partition of the fetch is larger than this value,
               the record batch will still be returned to ensure that the consumer can make progress. As such,
               this is not a absolute maximum.
        :param pulumi.Input[str] consumer_isolation_level: Transaction read isolation level. read_uncommitted is 
               the default, but read_committed can be used if consume-exactly-once behavior is desired.
        :param pulumi.Input[str] consumer_max_partition_fetch_bytes: Records are fetched in batches by the consumer.If 
               the first record batch in the first non-empty partition of the fetch is larger than this limit,
               the batch will still be returned to ensure that the consumer can make progress.
        :param pulumi.Input[str] consumer_max_poll_interval_ms: The maximum delay in milliseconds between invocations 
               of poll() when using consumer group management (defaults to 300000).
        :param pulumi.Input[str] consumer_max_poll_records: The maximum number of records returned by a single poll.
        :param pulumi.Input[str] offset_flush_interval_ms: The interval at which to try committing offsets for tasks 
               (defaults to 60000).
        :param pulumi.Input[str] offset_flush_timeout_ms: Maximum number of milliseconds to wait for records to flush 
               and partition offset data to be committed to offset storage before cancelling the process and restoring
               the offset data to be committed in a future attempt (defaults to 5000).
        :param pulumi.Input[str] producer_max_request_size: This setting will limit the number of record batches the 
               producer will send in a single request to avoid sending huge requests.
        :param pulumi.Input[str] session_timeout_ms: The timeout in milliseconds used to detect failures when using Kafka’s 
               group management facilities (defaults to 10000).
        """
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_fetch_max_bytes is not None:
            pulumi.set(__self__, "consumer_fetch_max_bytes", consumer_fetch_max_bytes)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_partition_fetch_bytes is not None:
            pulumi.set(__self__, "consumer_max_partition_fetch_bytes", consumer_max_partition_fetch_bytes)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if producer_max_request_size is not None:
            pulumi.set(__self__, "producer_max_request_size", producer_max_request_size)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Defines what client configurations can be 
        overridden by the connector. Default is None.
        """
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[pulumi.Input[str]]:
        """
        What to do when there is no initial offset in Kafka or 
        if the current offset does not exist any more on the server. Default is earliest.
        """
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerFetchMaxBytes")
    def consumer_fetch_max_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        Records are fetched in batches by the consumer, and if 
        the first record batch in the first non-empty partition of the fetch is larger than this value,
        the record batch will still be returned to ensure that the consumer can make progress. As such,
        this is not a absolute maximum.
        """
        return pulumi.get(self, "consumer_fetch_max_bytes")

    @consumer_fetch_max_bytes.setter
    def consumer_fetch_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[pulumi.Input[str]]:
        """
        Transaction read isolation level. read_uncommitted is 
        the default, but read_committed can be used if consume-exactly-once behavior is desired.
        """
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPartitionFetchBytes")
    def consumer_max_partition_fetch_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        Records are fetched in batches by the consumer.If 
        the first record batch in the first non-empty partition of the fetch is larger than this limit,
        the batch will still be returned to ensure that the consumer can make progress.
        """
        return pulumi.get(self, "consumer_max_partition_fetch_bytes")

    @consumer_max_partition_fetch_bytes.setter
    def consumer_max_partition_fetch_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_partition_fetch_bytes", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum delay in milliseconds between invocations 
        of poll() when using consumer group management (defaults to 300000).
        """
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of records returned by a single poll.
        """
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The interval at which to try committing offsets for tasks 
        (defaults to 60000).
        """
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of milliseconds to wait for records to flush 
        and partition offset data to be committed to offset storage before cancelling the process and restoring
        the offset data to be committed in a future attempt (defaults to 5000).
        """
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="producerMaxRequestSize")
    def producer_max_request_size(self) -> Optional[pulumi.Input[str]]:
        """
        This setting will limit the number of record batches the 
        producer will send in a single request to avoid sending huge requests.
        """
        return pulumi.get(self, "producer_max_request_size")

    @producer_max_request_size.setter
    def producer_max_request_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_max_request_size", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The timeout in milliseconds used to detect failures when using Kafka’s 
        group management facilities (defaults to 10000).
        """
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class KafkaConnectKafkaConnectUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kafka_connect: Allow clients to connect to kafka_connect from the public internet for 
               service nodes that are in a project VPC or another type of private network.
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet for service 
               nodes that are in a project VPC or another type of private network.
        """
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to kafka_connect from the public internet for 
        service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet for service 
        nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class KafkaConnectKafkaConnectUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kafka_connect: Allow clients to connect to kafka_connect from the public internet for 
               service nodes that are in a project VPC or another type of private network.
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet for service 
               nodes that are in a project VPC or another type of private network.
        """
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to kafka_connect from the public internet for 
        service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet for service 
        nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class KafkaConnectServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class KafkaConnectorTaskArgs:
    def __init__(__self__, *,
                 connector: Optional[pulumi.Input[str]] = None,
                 task: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] task: List of tasks of a connector, each element contains `connector` 
               (Related connector name) and `task` (Task id / number).
        """
        if connector is not None:
            pulumi.set(__self__, "connector", connector)
        if task is not None:
            pulumi.set(__self__, "task", task)

    @property
    @pulumi.getter
    def connector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector")

    @connector.setter
    def connector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector", value)

    @property
    @pulumi.getter
    def task(self) -> Optional[pulumi.Input[int]]:
        """
        List of tasks of a connector, each element contains `connector` 
        (Related connector name) and `task` (Task id / number).
        """
        return pulumi.get(self, "task")

    @task.setter
    def task(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task", value)


@pulumi.input_type
class KafkaKafkaArgs:
    def __init__(__self__, *,
                 access_cert: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 connect_uri: Optional[pulumi.Input[str]] = None,
                 rest_uri: Optional[pulumi.Input[str]] = None,
                 schema_registry_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_cert: The Kafka client certificate
        :param pulumi.Input[str] access_key: The Kafka client certificate key
        :param pulumi.Input[str] connect_uri: The Kafka Connect URI, if any
        :param pulumi.Input[str] rest_uri: The Kafka REST URI, if any
        :param pulumi.Input[str] schema_registry_uri: The Schema Registry URI, if any
        """
        if access_cert is not None:
            pulumi.set(__self__, "access_cert", access_cert)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if connect_uri is not None:
            pulumi.set(__self__, "connect_uri", connect_uri)
        if rest_uri is not None:
            pulumi.set(__self__, "rest_uri", rest_uri)
        if schema_registry_uri is not None:
            pulumi.set(__self__, "schema_registry_uri", schema_registry_uri)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> Optional[pulumi.Input[str]]:
        """
        The Kafka client certificate
        """
        return pulumi.get(self, "access_cert")

    @access_cert.setter
    def access_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_cert", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        The Kafka client certificate key
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="connectUri")
    def connect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Kafka Connect URI, if any
        """
        return pulumi.get(self, "connect_uri")

    @connect_uri.setter
    def connect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_uri", value)

    @property
    @pulumi.getter(name="restUri")
    def rest_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Kafka REST URI, if any
        """
        return pulumi.get(self, "rest_uri")

    @rest_uri.setter
    def rest_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_uri", value)

    @property
    @pulumi.getter(name="schemaRegistryUri")
    def schema_registry_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Schema Registry URI, if any
        """
        return pulumi.get(self, "schema_registry_uri")

    @schema_registry_uri.setter
    def schema_registry_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry_uri", value)


@pulumi.input_type
class KafkaKafkaUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kafka: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaArgs']] = None,
                 kafka_authentication_methods: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_connect_config: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaConnectConfigArgs']] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 kafka_rest_config: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaRestConfigArgs']] = None,
                 kafka_version: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['KafkaKafkaUserConfigPrivateAccessArgs']] = None,
                 privatelink_access: Optional[pulumi.Input['KafkaKafkaUserConfigPrivatelinkAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['KafkaKafkaUserConfigPublicAccessArgs']] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None,
                 schema_registry_config: Optional[pulumi.Input['KafkaKafkaUserConfigSchemaRegistryConfigArgs']] = None):
        """
        :param pulumi.Input[str] custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        :param pulumi.Input['KafkaKafkaUserConfigKafkaArgs'] kafka: Enable kafka
        :param pulumi.Input['KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs'] kafka_authentication_methods: Kafka authentication methods
        :param pulumi.Input[str] kafka_connect: Enable kafka_connect
        :param pulumi.Input['KafkaKafkaUserConfigKafkaConnectConfigArgs'] kafka_connect_config: Kafka Connect configuration values
        :param pulumi.Input[str] kafka_rest: Enable kafka_rest
        :param pulumi.Input['KafkaKafkaUserConfigKafkaRestConfigArgs'] kafka_rest_config: Kafka-REST configuration
        :param pulumi.Input[str] kafka_version: Kafka major version
        :param pulumi.Input['KafkaKafkaUserConfigPrivateAccessArgs'] private_access: Allow access to selected service ports from private networks
        :param pulumi.Input['KafkaKafkaUserConfigPrivatelinkAccessArgs'] privatelink_access: Allow access to selected service components through Privatelink
        :param pulumi.Input['KafkaKafkaUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet
        :param pulumi.Input[str] schema_registry: Enable Schema-Registry service
        :param pulumi.Input['KafkaKafkaUserConfigSchemaRegistryConfigArgs'] schema_registry_config: Schema Registry configuration
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_authentication_methods is not None:
            pulumi.set(__self__, "kafka_authentication_methods", kafka_authentication_methods)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_connect_config is not None:
            pulumi.set(__self__, "kafka_connect_config", kafka_connect_config)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if kafka_rest_config is not None:
            pulumi.set(__self__, "kafka_rest_config", kafka_rest_config)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if privatelink_access is not None:
            pulumi.set(__self__, "privatelink_access", privatelink_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)
        if schema_registry_config is not None:
            pulumi.set(__self__, "schema_registry_config", schema_registry_config)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigKafkaArgs']]:
        """
        Enable kafka
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethods")
    def kafka_authentication_methods(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']]:
        """
        Kafka authentication methods
        """
        return pulumi.get(self, "kafka_authentication_methods")

    @kafka_authentication_methods.setter
    def kafka_authentication_methods(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']]):
        pulumi.set(self, "kafka_authentication_methods", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable kafka_connect
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaConnectConfig")
    def kafka_connect_config(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigKafkaConnectConfigArgs']]:
        """
        Kafka Connect configuration values
        """
        return pulumi.get(self, "kafka_connect_config")

    @kafka_connect_config.setter
    def kafka_connect_config(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaConnectConfigArgs']]):
        pulumi.set(self, "kafka_connect_config", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        """
        Enable kafka_rest
        """
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="kafkaRestConfig")
    def kafka_rest_config(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigKafkaRestConfigArgs']]:
        """
        Kafka-REST configuration
        """
        return pulumi.get(self, "kafka_rest_config")

    @kafka_rest_config.setter
    def kafka_rest_config(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaRestConfigArgs']]):
        pulumi.set(self, "kafka_rest_config", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[pulumi.Input[str]]:
        """
        Kafka major version
        """
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigPrivateAccessArgs']]:
        """
        Allow access to selected service ports from private networks
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="privatelinkAccess")
    def privatelink_access(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigPrivatelinkAccessArgs']]:
        """
        Allow access to selected service components through Privatelink
        """
        return pulumi.get(self, "privatelink_access")

    @privatelink_access.setter
    def privatelink_access(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigPrivatelinkAccessArgs']]):
        pulumi.set(self, "privatelink_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Schema-Registry service
        """
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)

    @property
    @pulumi.getter(name="schemaRegistryConfig")
    def schema_registry_config(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigSchemaRegistryConfigArgs']]:
        """
        Schema Registry configuration
        """
        return pulumi.get(self, "schema_registry_config")

    @schema_registry_config.setter
    def schema_registry_config(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigSchemaRegistryConfigArgs']]):
        pulumi.set(self, "schema_registry_config", value)


@pulumi.input_type
class KafkaKafkaUserConfigKafkaArgs:
    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[pulumi.Input[str]] = None,
                 compression_type: Optional[pulumi.Input[str]] = None,
                 connections_max_idle_ms: Optional[pulumi.Input[str]] = None,
                 default_replication_factor: Optional[pulumi.Input[str]] = None,
                 group_max_session_timeout_ms: Optional[pulumi.Input[str]] = None,
                 group_min_session_timeout_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_delete_retention_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_max_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_min_cleanable_ratio: Optional[pulumi.Input[str]] = None,
                 log_cleaner_min_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 log_cleanup_policy: Optional[pulumi.Input[str]] = None,
                 log_flush_interval_messages: Optional[pulumi.Input[str]] = None,
                 log_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 log_index_interval_bytes: Optional[pulumi.Input[str]] = None,
                 log_index_size_max_bytes: Optional[pulumi.Input[str]] = None,
                 log_message_downconversion_enable: Optional[pulumi.Input[str]] = None,
                 log_message_timestamp_difference_max_ms: Optional[pulumi.Input[str]] = None,
                 log_message_timestamp_type: Optional[pulumi.Input[str]] = None,
                 log_preallocate: Optional[pulumi.Input[str]] = None,
                 log_retention_bytes: Optional[pulumi.Input[str]] = None,
                 log_retention_hours: Optional[pulumi.Input[str]] = None,
                 log_retention_ms: Optional[pulumi.Input[str]] = None,
                 log_roll_jitter_ms: Optional[pulumi.Input[str]] = None,
                 log_roll_ms: Optional[pulumi.Input[str]] = None,
                 log_segment_bytes: Optional[pulumi.Input[str]] = None,
                 log_segment_delete_delay_ms: Optional[pulumi.Input[str]] = None,
                 max_connections_per_ip: Optional[pulumi.Input[str]] = None,
                 max_incremental_fetch_session_cache_slots: Optional[pulumi.Input[str]] = None,
                 message_max_bytes: Optional[pulumi.Input[str]] = None,
                 min_insync_replicas: Optional[pulumi.Input[str]] = None,
                 num_partitions: Optional[pulumi.Input[str]] = None,
                 offsets_retention_minutes: Optional[pulumi.Input[str]] = None,
                 producer_purgatory_purge_interval_requests: Optional[pulumi.Input[str]] = None,
                 replica_fetch_max_bytes: Optional[pulumi.Input[str]] = None,
                 replica_fetch_response_max_bytes: Optional[pulumi.Input[str]] = None,
                 socket_request_max_bytes: Optional[pulumi.Input[str]] = None,
                 transaction_remove_expired_transaction_cleanup_interval_ms: Optional[pulumi.Input[str]] = None,
                 transaction_state_log_segment_bytes: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auto_create_topics_enable: Enable auto creation of topics
        :param pulumi.Input[str] compression_type: Specify the final compression type for a given topic. This 
               configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd').
               It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer'
               which means retain the original compression codec set by the producer.
        :param pulumi.Input[str] connections_max_idle_ms: Idle connections timeout: the server socket processor 
               threads close the connections that idle for longer than this.
        :param pulumi.Input[str] default_replication_factor: Replication factor for autocreated topics
        :param pulumi.Input[str] group_max_session_timeout_ms: The maximum allowed session timeout for registered 
               consumers. Longer timeouts give consumers more time to process messages in between heartbeats
               at the cost of a longer time to detect failures.
        :param pulumi.Input[str] group_min_session_timeout_ms: The minimum allowed session timeout for registered 
               consumers. Longer timeouts give consumers more time to process messages in between heartbeats
               at the cost of a longer time to detect failures.
        :param pulumi.Input[str] log_cleaner_max_compaction_lag_ms: The maximum amount of time message will 
               remain uncompacted. Only applicable for logs that are being compacted
        :param pulumi.Input[str] log_cleaner_min_cleanable_ratio: Controls log compactor frequency. Larger 
               value means more frequent compactions but also more space wasted for logs. Consider setting
               log.cleaner.max.compaction.lag.ms to enforce compactions sooner, instead of setting a very
               high value for this option.
        :param pulumi.Input[str] log_cleaner_min_compaction_lag_ms: The minimum time a message will remain 
               uncompacted in the log. Only applicable for logs that are being compacted.
        :param pulumi.Input[str] log_cleanup_policy: The default cleanup policy for segments beyond the retention window.
        :param pulumi.Input[str] log_flush_interval_messages: The number of messages accumulated on a log partition 
               before messages are flushed to disk.
        :param pulumi.Input[str] log_flush_interval_ms: The maximum time in ms that a message in any topic is kept 
               in memory before flushed to disk. If not set, the value in log.flush.scheduler.interval.ms is used.
        :param pulumi.Input[str] log_index_interval_bytes: The interval with which Kafka adds an entry to the offset index.
        :param pulumi.Input[str] log_index_size_max_bytes: The maximum size in bytes of the offset index.
        :param pulumi.Input[str] log_message_downconversion_enable: This configuration controls whether down-conversion 
               of message formats is enabled to satisfy consume requests.
        :param pulumi.Input[str] log_message_timestamp_difference_max_ms: The maximum difference allowed between 
               the timestamp when a broker receives a message and the timestamp specified in the message
        :param pulumi.Input[str] log_message_timestamp_type: Define whether the timestamp in the message is 
               message create time or log append time.
        :param pulumi.Input[str] log_preallocate: Should pre allocate file when create new segment?
        :param pulumi.Input[str] log_retention_bytes: The maximum size of the log before deleting messages
        :param pulumi.Input[str] log_retention_hours: The number of hours to keep a log file before deleting it.
        :param pulumi.Input[str] log_retention_ms: The number of milliseconds to keep a log file before deleting it 
               (in milliseconds), If not set, the value in log.retention.minutes is used. If set to -1, no
               time limit is applied.
        :param pulumi.Input[str] log_roll_jitter_ms: The maximum jitter to subtract from logRollTimeMillis 
               (in milliseconds). If not set, the value in log.roll.jitter.hours is used.
        :param pulumi.Input[str] log_roll_ms: The maximum time before a new log segment is rolled out (in milliseconds).
        :param pulumi.Input[str] log_segment_bytes: The maximum size of a single log file
        :param pulumi.Input[str] log_segment_delete_delay_ms: The amount of time to wait before deleting a file 
               from the filesystem.
        :param pulumi.Input[str] max_connections_per_ip: The maximum number of connections allowed from each ip 
               address (defaults to 2147483647).
        :param pulumi.Input[str] max_incremental_fetch_session_cache_slots: The maximum number of incremental fetch 
               sessions that the broker will maintain.
        :param pulumi.Input[str] message_max_bytes: The maximum size of message that the server can receive.
        :param pulumi.Input[str] min_insync_replicas: When a producer sets acks to 'all' (or '-1'), 
               min.insync.replicas specifies the minimum number of replicas that must acknowledge a write for
               the write to be considered successful.
        :param pulumi.Input[str] num_partitions: Number of partitions for autocreated topics
        :param pulumi.Input[str] offsets_retention_minutes: Log retention window in minutes for offsets topic.
        :param pulumi.Input[str] producer_purgatory_purge_interval_requests: The purge interval (in number of 
               requests) of the producer request purgatory(defaults to 1000).
        :param pulumi.Input[str] replica_fetch_max_bytes: The number of bytes of messages to attempt to fetch 
               for each partition (defaults to 1048576). This is not an absolute maximum, if the first record
               batch in the first non-empty partition of the fetch is larger than this value, the record batch
               will still be returned to ensure that progress can be made.
        :param pulumi.Input[str] replica_fetch_response_max_bytes: Maximum bytes expected for the entire fetch 
               response (defaults to 10485760). Records are fetched in batches, and if the first record batch
               in the first non-empty partition of the fetch is larger than this value, the record batch will
               still be returned to ensure that progress can be made. As such, this is not an absolute maximum.
        :param pulumi.Input[str] socket_request_max_bytes: The maximum number of bytes in a socket request 
               (defaults to 104857600).
        :param pulumi.Input[str] transaction_remove_expired_transaction_cleanup_interval_ms: The interval at which 
               to remove transactions that have expired due to transactional.id.expiration.ms passing (defaults
               to 3600000 (1 hour)).
        :param pulumi.Input[str] transaction_state_log_segment_bytes: The transaction topic segment bytes should 
               be kept relatively small in order to facilitate faster log compaction and cache loads (defaults
               to 104857600 (100 mebibytes)).
        """
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if connections_max_idle_ms is not None:
            pulumi.set(__self__, "connections_max_idle_ms", connections_max_idle_ms)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if group_max_session_timeout_ms is not None:
            pulumi.set(__self__, "group_max_session_timeout_ms", group_max_session_timeout_ms)
        if group_min_session_timeout_ms is not None:
            pulumi.set(__self__, "group_min_session_timeout_ms", group_min_session_timeout_ms)
        if log_cleaner_delete_retention_ms is not None:
            pulumi.set(__self__, "log_cleaner_delete_retention_ms", log_cleaner_delete_retention_ms)
        if log_cleaner_max_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_max_compaction_lag_ms", log_cleaner_max_compaction_lag_ms)
        if log_cleaner_min_cleanable_ratio is not None:
            pulumi.set(__self__, "log_cleaner_min_cleanable_ratio", log_cleaner_min_cleanable_ratio)
        if log_cleaner_min_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_min_compaction_lag_ms", log_cleaner_min_compaction_lag_ms)
        if log_cleanup_policy is not None:
            pulumi.set(__self__, "log_cleanup_policy", log_cleanup_policy)
        if log_flush_interval_messages is not None:
            pulumi.set(__self__, "log_flush_interval_messages", log_flush_interval_messages)
        if log_flush_interval_ms is not None:
            pulumi.set(__self__, "log_flush_interval_ms", log_flush_interval_ms)
        if log_index_interval_bytes is not None:
            pulumi.set(__self__, "log_index_interval_bytes", log_index_interval_bytes)
        if log_index_size_max_bytes is not None:
            pulumi.set(__self__, "log_index_size_max_bytes", log_index_size_max_bytes)
        if log_message_downconversion_enable is not None:
            pulumi.set(__self__, "log_message_downconversion_enable", log_message_downconversion_enable)
        if log_message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "log_message_timestamp_difference_max_ms", log_message_timestamp_difference_max_ms)
        if log_message_timestamp_type is not None:
            pulumi.set(__self__, "log_message_timestamp_type", log_message_timestamp_type)
        if log_preallocate is not None:
            pulumi.set(__self__, "log_preallocate", log_preallocate)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_retention_ms is not None:
            pulumi.set(__self__, "log_retention_ms", log_retention_ms)
        if log_roll_jitter_ms is not None:
            pulumi.set(__self__, "log_roll_jitter_ms", log_roll_jitter_ms)
        if log_roll_ms is not None:
            pulumi.set(__self__, "log_roll_ms", log_roll_ms)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if log_segment_delete_delay_ms is not None:
            pulumi.set(__self__, "log_segment_delete_delay_ms", log_segment_delete_delay_ms)
        if max_connections_per_ip is not None:
            pulumi.set(__self__, "max_connections_per_ip", max_connections_per_ip)
        if max_incremental_fetch_session_cache_slots is not None:
            pulumi.set(__self__, "max_incremental_fetch_session_cache_slots", max_incremental_fetch_session_cache_slots)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if min_insync_replicas is not None:
            pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if producer_purgatory_purge_interval_requests is not None:
            pulumi.set(__self__, "producer_purgatory_purge_interval_requests", producer_purgatory_purge_interval_requests)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if replica_fetch_response_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_response_max_bytes", replica_fetch_response_max_bytes)
        if socket_request_max_bytes is not None:
            pulumi.set(__self__, "socket_request_max_bytes", socket_request_max_bytes)
        if transaction_remove_expired_transaction_cleanup_interval_ms is not None:
            pulumi.set(__self__, "transaction_remove_expired_transaction_cleanup_interval_ms", transaction_remove_expired_transaction_cleanup_interval_ms)
        if transaction_state_log_segment_bytes is not None:
            pulumi.set(__self__, "transaction_state_log_segment_bytes", transaction_state_log_segment_bytes)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Enable auto creation of topics
        """
        return pulumi.get(self, "auto_create_topics_enable")

    @auto_create_topics_enable.setter
    def auto_create_topics_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_create_topics_enable", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the final compression type for a given topic. This 
        configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd').
        It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer'
        which means retain the original compression codec set by the producer.
        """
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="connectionsMaxIdleMs")
    def connections_max_idle_ms(self) -> Optional[pulumi.Input[str]]:
        """
        Idle connections timeout: the server socket processor 
        threads close the connections that idle for longer than this.
        """
        return pulumi.get(self, "connections_max_idle_ms")

    @connections_max_idle_ms.setter
    def connections_max_idle_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connections_max_idle_ms", value)

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Replication factor for autocreated topics
        """
        return pulumi.get(self, "default_replication_factor")

    @default_replication_factor.setter
    def default_replication_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_replication_factor", value)

    @property
    @pulumi.getter(name="groupMaxSessionTimeoutMs")
    def group_max_session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum allowed session timeout for registered 
        consumers. Longer timeouts give consumers more time to process messages in between heartbeats
        at the cost of a longer time to detect failures.
        """
        return pulumi.get(self, "group_max_session_timeout_ms")

    @group_max_session_timeout_ms.setter
    def group_max_session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_max_session_timeout_ms", value)

    @property
    @pulumi.getter(name="groupMinSessionTimeoutMs")
    def group_min_session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum allowed session timeout for registered 
        consumers. Longer timeouts give consumers more time to process messages in between heartbeats
        at the cost of a longer time to detect failures.
        """
        return pulumi.get(self, "group_min_session_timeout_ms")

    @group_min_session_timeout_ms.setter
    def group_min_session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_min_session_timeout_ms", value)

    @property
    @pulumi.getter(name="logCleanerDeleteRetentionMs")
    def log_cleaner_delete_retention_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_delete_retention_ms")

    @log_cleaner_delete_retention_ms.setter
    def log_cleaner_delete_retention_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_delete_retention_ms", value)

    @property
    @pulumi.getter(name="logCleanerMaxCompactionLagMs")
    def log_cleaner_max_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum amount of time message will 
        remain uncompacted. Only applicable for logs that are being compacted
        """
        return pulumi.get(self, "log_cleaner_max_compaction_lag_ms")

    @log_cleaner_max_compaction_lag_ms.setter
    def log_cleaner_max_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanerMinCleanableRatio")
    def log_cleaner_min_cleanable_ratio(self) -> Optional[pulumi.Input[str]]:
        """
        Controls log compactor frequency. Larger 
        value means more frequent compactions but also more space wasted for logs. Consider setting
        log.cleaner.max.compaction.lag.ms to enforce compactions sooner, instead of setting a very
        high value for this option.
        """
        return pulumi.get(self, "log_cleaner_min_cleanable_ratio")

    @log_cleaner_min_cleanable_ratio.setter
    def log_cleaner_min_cleanable_ratio(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_min_cleanable_ratio", value)

    @property
    @pulumi.getter(name="logCleanerMinCompactionLagMs")
    def log_cleaner_min_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum time a message will remain 
        uncompacted in the log. Only applicable for logs that are being compacted.
        """
        return pulumi.get(self, "log_cleaner_min_compaction_lag_ms")

    @log_cleaner_min_compaction_lag_ms.setter
    def log_cleaner_min_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanupPolicy")
    def log_cleanup_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The default cleanup policy for segments beyond the retention window.
        """
        return pulumi.get(self, "log_cleanup_policy")

    @log_cleanup_policy.setter
    def log_cleanup_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleanup_policy", value)

    @property
    @pulumi.getter(name="logFlushIntervalMessages")
    def log_flush_interval_messages(self) -> Optional[pulumi.Input[str]]:
        """
        The number of messages accumulated on a log partition 
        before messages are flushed to disk.
        """
        return pulumi.get(self, "log_flush_interval_messages")

    @log_flush_interval_messages.setter
    def log_flush_interval_messages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_flush_interval_messages", value)

    @property
    @pulumi.getter(name="logFlushIntervalMs")
    def log_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum time in ms that a message in any topic is kept 
        in memory before flushed to disk. If not set, the value in log.flush.scheduler.interval.ms is used.
        """
        return pulumi.get(self, "log_flush_interval_ms")

    @log_flush_interval_ms.setter
    def log_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_flush_interval_ms", value)

    @property
    @pulumi.getter(name="logIndexIntervalBytes")
    def log_index_interval_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The interval with which Kafka adds an entry to the offset index.
        """
        return pulumi.get(self, "log_index_interval_bytes")

    @log_index_interval_bytes.setter
    def log_index_interval_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_index_interval_bytes", value)

    @property
    @pulumi.getter(name="logIndexSizeMaxBytes")
    def log_index_size_max_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum size in bytes of the offset index.
        """
        return pulumi.get(self, "log_index_size_max_bytes")

    @log_index_size_max_bytes.setter
    def log_index_size_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_index_size_max_bytes", value)

    @property
    @pulumi.getter(name="logMessageDownconversionEnable")
    def log_message_downconversion_enable(self) -> Optional[pulumi.Input[str]]:
        """
        This configuration controls whether down-conversion 
        of message formats is enabled to satisfy consume requests.
        """
        return pulumi.get(self, "log_message_downconversion_enable")

    @log_message_downconversion_enable.setter
    def log_message_downconversion_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_downconversion_enable", value)

    @property
    @pulumi.getter(name="logMessageTimestampDifferenceMaxMs")
    def log_message_timestamp_difference_max_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum difference allowed between 
        the timestamp when a broker receives a message and the timestamp specified in the message
        """
        return pulumi.get(self, "log_message_timestamp_difference_max_ms")

    @log_message_timestamp_difference_max_ms.setter
    def log_message_timestamp_difference_max_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="logMessageTimestampType")
    def log_message_timestamp_type(self) -> Optional[pulumi.Input[str]]:
        """
        Define whether the timestamp in the message is 
        message create time or log append time.
        """
        return pulumi.get(self, "log_message_timestamp_type")

    @log_message_timestamp_type.setter
    def log_message_timestamp_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_timestamp_type", value)

    @property
    @pulumi.getter(name="logPreallocate")
    def log_preallocate(self) -> Optional[pulumi.Input[str]]:
        """
        Should pre allocate file when create new segment?
        """
        return pulumi.get(self, "log_preallocate")

    @log_preallocate.setter
    def log_preallocate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_preallocate", value)

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum size of the log before deleting messages
        """
        return pulumi.get(self, "log_retention_bytes")

    @log_retention_bytes.setter
    def log_retention_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_bytes", value)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[pulumi.Input[str]]:
        """
        The number of hours to keep a log file before deleting it.
        """
        return pulumi.get(self, "log_retention_hours")

    @log_retention_hours.setter
    def log_retention_hours(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_hours", value)

    @property
    @pulumi.getter(name="logRetentionMs")
    def log_retention_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The number of milliseconds to keep a log file before deleting it 
        (in milliseconds), If not set, the value in log.retention.minutes is used. If set to -1, no
        time limit is applied.
        """
        return pulumi.get(self, "log_retention_ms")

    @log_retention_ms.setter
    def log_retention_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_ms", value)

    @property
    @pulumi.getter(name="logRollJitterMs")
    def log_roll_jitter_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum jitter to subtract from logRollTimeMillis 
        (in milliseconds). If not set, the value in log.roll.jitter.hours is used.
        """
        return pulumi.get(self, "log_roll_jitter_ms")

    @log_roll_jitter_ms.setter
    def log_roll_jitter_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_roll_jitter_ms", value)

    @property
    @pulumi.getter(name="logRollMs")
    def log_roll_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum time before a new log segment is rolled out (in milliseconds).
        """
        return pulumi.get(self, "log_roll_ms")

    @log_roll_ms.setter
    def log_roll_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_roll_ms", value)

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum size of a single log file
        """
        return pulumi.get(self, "log_segment_bytes")

    @log_segment_bytes.setter
    def log_segment_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_segment_bytes", value)

    @property
    @pulumi.getter(name="logSegmentDeleteDelayMs")
    def log_segment_delete_delay_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of time to wait before deleting a file 
        from the filesystem.
        """
        return pulumi.get(self, "log_segment_delete_delay_ms")

    @log_segment_delete_delay_ms.setter
    def log_segment_delete_delay_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_segment_delete_delay_ms", value)

    @property
    @pulumi.getter(name="maxConnectionsPerIp")
    def max_connections_per_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of connections allowed from each ip 
        address (defaults to 2147483647).
        """
        return pulumi.get(self, "max_connections_per_ip")

    @max_connections_per_ip.setter
    def max_connections_per_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_connections_per_ip", value)

    @property
    @pulumi.getter(name="maxIncrementalFetchSessionCacheSlots")
    def max_incremental_fetch_session_cache_slots(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of incremental fetch 
        sessions that the broker will maintain.
        """
        return pulumi.get(self, "max_incremental_fetch_session_cache_slots")

    @max_incremental_fetch_session_cache_slots.setter
    def max_incremental_fetch_session_cache_slots(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_incremental_fetch_session_cache_slots", value)

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum size of message that the server can receive.
        """
        return pulumi.get(self, "message_max_bytes")

    @message_max_bytes.setter
    def message_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_max_bytes", value)

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> Optional[pulumi.Input[str]]:
        """
        When a producer sets acks to 'all' (or '-1'), 
        min.insync.replicas specifies the minimum number of replicas that must acknowledge a write for
        the write to be considered successful.
        """
        return pulumi.get(self, "min_insync_replicas")

    @min_insync_replicas.setter
    def min_insync_replicas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_insync_replicas", value)

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[pulumi.Input[str]]:
        """
        Number of partitions for autocreated topics
        """
        return pulumi.get(self, "num_partitions")

    @num_partitions.setter
    def num_partitions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_partitions", value)

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[pulumi.Input[str]]:
        """
        Log retention window in minutes for offsets topic.
        """
        return pulumi.get(self, "offsets_retention_minutes")

    @offsets_retention_minutes.setter
    def offsets_retention_minutes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offsets_retention_minutes", value)

    @property
    @pulumi.getter(name="producerPurgatoryPurgeIntervalRequests")
    def producer_purgatory_purge_interval_requests(self) -> Optional[pulumi.Input[str]]:
        """
        The purge interval (in number of 
        requests) of the producer request purgatory(defaults to 1000).
        """
        return pulumi.get(self, "producer_purgatory_purge_interval_requests")

    @producer_purgatory_purge_interval_requests.setter
    def producer_purgatory_purge_interval_requests(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_purgatory_purge_interval_requests", value)

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The number of bytes of messages to attempt to fetch 
        for each partition (defaults to 1048576). This is not an absolute maximum, if the first record
        batch in the first non-empty partition of the fetch is larger than this value, the record batch
        will still be returned to ensure that progress can be made.
        """
        return pulumi.get(self, "replica_fetch_max_bytes")

    @replica_fetch_max_bytes.setter
    def replica_fetch_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="replicaFetchResponseMaxBytes")
    def replica_fetch_response_max_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum bytes expected for the entire fetch 
        response (defaults to 10485760). Records are fetched in batches, and if the first record batch
        in the first non-empty partition of the fetch is larger than this value, the record batch will
        still be returned to ensure that progress can be made. As such, this is not an absolute maximum.
        """
        return pulumi.get(self, "replica_fetch_response_max_bytes")

    @replica_fetch_response_max_bytes.setter
    def replica_fetch_response_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_fetch_response_max_bytes", value)

    @property
    @pulumi.getter(name="socketRequestMaxBytes")
    def socket_request_max_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of bytes in a socket request 
        (defaults to 104857600).
        """
        return pulumi.get(self, "socket_request_max_bytes")

    @socket_request_max_bytes.setter
    def socket_request_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socket_request_max_bytes", value)

    @property
    @pulumi.getter(name="transactionRemoveExpiredTransactionCleanupIntervalMs")
    def transaction_remove_expired_transaction_cleanup_interval_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The interval at which 
        to remove transactions that have expired due to transactional.id.expiration.ms passing (defaults
        to 3600000 (1 hour)).
        """
        return pulumi.get(self, "transaction_remove_expired_transaction_cleanup_interval_ms")

    @transaction_remove_expired_transaction_cleanup_interval_ms.setter
    def transaction_remove_expired_transaction_cleanup_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transaction_remove_expired_transaction_cleanup_interval_ms", value)

    @property
    @pulumi.getter(name="transactionStateLogSegmentBytes")
    def transaction_state_log_segment_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The transaction topic segment bytes should 
        be kept relatively small in order to facilitate faster log compaction and cache loads (defaults
        to 104857600 (100 mebibytes)).
        """
        return pulumi.get(self, "transaction_state_log_segment_bytes")

    @transaction_state_log_segment_bytes.setter
    def transaction_state_log_segment_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transaction_state_log_segment_bytes", value)


@pulumi.input_type
class KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 sasl: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] certificate: Enable certificate/SSL authentication
        :param pulumi.Input[str] sasl: Enable SASL authentication
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable certificate/SSL authentication
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def sasl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable SASL authentication
        """
        return pulumi.get(self, "sasl")

    @sasl.setter
    def sasl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl", value)


@pulumi.input_type
class KafkaKafkaUserConfigKafkaConnectConfigArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[pulumi.Input[str]] = None,
                 consumer_auto_offset_reset: Optional[pulumi.Input[str]] = None,
                 consumer_fetch_max_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_isolation_level: Optional[pulumi.Input[str]] = None,
                 consumer_max_partition_fetch_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_interval_ms: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_records: Optional[pulumi.Input[str]] = None,
                 offset_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 offset_flush_timeout_ms: Optional[pulumi.Input[str]] = None,
                 producer_max_request_size: Optional[pulumi.Input[str]] = None,
                 session_timeout_ms: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] connector_client_config_override_policy: Defines what client configurations can 
               be overridden by the connector. Default is None
        :param pulumi.Input[str] consumer_auto_offset_reset: What to do when there is no initial offset in Kafka or 
               if the current offset does not exist any more on the server. Default is earliest.
        :param pulumi.Input[str] consumer_fetch_max_bytes: Records are fetched in batches by the consumer, and 
               if the first record batch in the first non-empty partition of the fetch is larger than this value,
               the record batch will still be returned to ensure that the consumer can make progress. As such,
               this is not a absolute maximum.
        :param pulumi.Input[str] consumer_isolation_level: Transaction read isolation level. read_uncommitted is 
               the default, but read_committed can be used if consume-exactly-once behavior is desired.
        :param pulumi.Input[str] consumer_max_partition_fetch_bytes: Records are fetched in batches by the consumer.If 
               the first record batch in the first non-empty partition of the fetch is larger than this limit,
               the batch will still be returned to ensure that the consumer can make progress.
        :param pulumi.Input[str] consumer_max_poll_interval_ms: The maximum delay in milliseconds between invocations 
               of poll() when using consumer group management (defaults to 300000).
        :param pulumi.Input[str] consumer_max_poll_records: The maximum number of records returned in a single call 
               to poll() (defaults to 500).
        :param pulumi.Input[str] offset_flush_interval_ms: The interval at which to try committing offsets for 
               tasks (defaults to 60000).
        :param pulumi.Input[str] offset_flush_timeout_ms: Maximum number of milliseconds to wait for records to 
               flush and partition offset data to be committed to offset storage before cancelling the process
               and restoring the offset data to be committed in a future attempt (defaults to 5000).
        :param pulumi.Input[str] producer_max_request_size: This setting will limit the number of record batches 
               the producer will send in a single request to avoid sending huge requests.
        :param pulumi.Input[str] session_timeout_ms: The timeout in milliseconds used to detect failures when 
               using Kafka’s group management facilities (defaults to 10000).
        """
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_fetch_max_bytes is not None:
            pulumi.set(__self__, "consumer_fetch_max_bytes", consumer_fetch_max_bytes)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_partition_fetch_bytes is not None:
            pulumi.set(__self__, "consumer_max_partition_fetch_bytes", consumer_max_partition_fetch_bytes)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if producer_max_request_size is not None:
            pulumi.set(__self__, "producer_max_request_size", producer_max_request_size)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Defines what client configurations can 
        be overridden by the connector. Default is None
        """
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[pulumi.Input[str]]:
        """
        What to do when there is no initial offset in Kafka or 
        if the current offset does not exist any more on the server. Default is earliest.
        """
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerFetchMaxBytes")
    def consumer_fetch_max_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        Records are fetched in batches by the consumer, and 
        if the first record batch in the first non-empty partition of the fetch is larger than this value,
        the record batch will still be returned to ensure that the consumer can make progress. As such,
        this is not a absolute maximum.
        """
        return pulumi.get(self, "consumer_fetch_max_bytes")

    @consumer_fetch_max_bytes.setter
    def consumer_fetch_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[pulumi.Input[str]]:
        """
        Transaction read isolation level. read_uncommitted is 
        the default, but read_committed can be used if consume-exactly-once behavior is desired.
        """
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPartitionFetchBytes")
    def consumer_max_partition_fetch_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        Records are fetched in batches by the consumer.If 
        the first record batch in the first non-empty partition of the fetch is larger than this limit,
        the batch will still be returned to ensure that the consumer can make progress.
        """
        return pulumi.get(self, "consumer_max_partition_fetch_bytes")

    @consumer_max_partition_fetch_bytes.setter
    def consumer_max_partition_fetch_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_partition_fetch_bytes", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum delay in milliseconds between invocations 
        of poll() when using consumer group management (defaults to 300000).
        """
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of records returned in a single call 
        to poll() (defaults to 500).
        """
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The interval at which to try committing offsets for 
        tasks (defaults to 60000).
        """
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of milliseconds to wait for records to 
        flush and partition offset data to be committed to offset storage before cancelling the process
        and restoring the offset data to be committed in a future attempt (defaults to 5000).
        """
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="producerMaxRequestSize")
    def producer_max_request_size(self) -> Optional[pulumi.Input[str]]:
        """
        This setting will limit the number of record batches 
        the producer will send in a single request to avoid sending huge requests.
        """
        return pulumi.get(self, "producer_max_request_size")

    @producer_max_request_size.setter
    def producer_max_request_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_max_request_size", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The timeout in milliseconds used to detect failures when 
        using Kafka’s group management facilities (defaults to 10000).
        """
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class KafkaKafkaUserConfigKafkaRestConfigArgs:
    def __init__(__self__, *,
                 consumer_enable_auto_commit: Optional[pulumi.Input[str]] = None,
                 consumer_request_max_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_request_timeout_ms: Optional[pulumi.Input[str]] = None,
                 producer_acks: Optional[pulumi.Input[str]] = None,
                 producer_linger_ms: Optional[pulumi.Input[str]] = None,
                 simpleconsumer_pool_size_max: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] consumer_enable_auto_commit: If true the consumer's offset will be periodically 
               committed to Kafka in the background
        :param pulumi.Input[str] consumer_request_max_bytes: Maximum number of bytes in unencoded message keys and 
               values by a single request
        :param pulumi.Input[str] consumer_request_timeout_ms: The maximum total time to wait for messages for a 
               request if the maximum number of messages has not yet been reached
        :param pulumi.Input[str] producer_acks: The number of acknowledgments the producer requires the leader to 
               have received before considering a request complete. If set to 'all' or '-1', the leader will wait
               for the full set of in-sync replicas to acknowledge the record.
        :param pulumi.Input[str] producer_linger_ms: Wait for up to the given delay to allow batching records together
        :param pulumi.Input[str] simpleconsumer_pool_size_max: Maximum number of SimpleConsumers that can be 
               instantiated per broker.
        """
        if consumer_enable_auto_commit is not None:
            pulumi.set(__self__, "consumer_enable_auto_commit", consumer_enable_auto_commit)
        if consumer_request_max_bytes is not None:
            pulumi.set(__self__, "consumer_request_max_bytes", consumer_request_max_bytes)
        if consumer_request_timeout_ms is not None:
            pulumi.set(__self__, "consumer_request_timeout_ms", consumer_request_timeout_ms)
        if producer_acks is not None:
            pulumi.set(__self__, "producer_acks", producer_acks)
        if producer_linger_ms is not None:
            pulumi.set(__self__, "producer_linger_ms", producer_linger_ms)
        if simpleconsumer_pool_size_max is not None:
            pulumi.set(__self__, "simpleconsumer_pool_size_max", simpleconsumer_pool_size_max)

    @property
    @pulumi.getter(name="consumerEnableAutoCommit")
    def consumer_enable_auto_commit(self) -> Optional[pulumi.Input[str]]:
        """
        If true the consumer's offset will be periodically 
        committed to Kafka in the background
        """
        return pulumi.get(self, "consumer_enable_auto_commit")

    @consumer_enable_auto_commit.setter
    def consumer_enable_auto_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_enable_auto_commit", value)

    @property
    @pulumi.getter(name="consumerRequestMaxBytes")
    def consumer_request_max_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of bytes in unencoded message keys and 
        values by a single request
        """
        return pulumi.get(self, "consumer_request_max_bytes")

    @consumer_request_max_bytes.setter
    def consumer_request_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_request_max_bytes", value)

    @property
    @pulumi.getter(name="consumerRequestTimeoutMs")
    def consumer_request_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum total time to wait for messages for a 
        request if the maximum number of messages has not yet been reached
        """
        return pulumi.get(self, "consumer_request_timeout_ms")

    @consumer_request_timeout_ms.setter
    def consumer_request_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_request_timeout_ms", value)

    @property
    @pulumi.getter(name="producerAcks")
    def producer_acks(self) -> Optional[pulumi.Input[str]]:
        """
        The number of acknowledgments the producer requires the leader to 
        have received before considering a request complete. If set to 'all' or '-1', the leader will wait
        for the full set of in-sync replicas to acknowledge the record.
        """
        return pulumi.get(self, "producer_acks")

    @producer_acks.setter
    def producer_acks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_acks", value)

    @property
    @pulumi.getter(name="producerLingerMs")
    def producer_linger_ms(self) -> Optional[pulumi.Input[str]]:
        """
        Wait for up to the given delay to allow batching records together
        """
        return pulumi.get(self, "producer_linger_ms")

    @producer_linger_ms.setter
    def producer_linger_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_linger_ms", value)

    @property
    @pulumi.getter(name="simpleconsumerPoolSizeMax")
    def simpleconsumer_pool_size_max(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of SimpleConsumers that can be 
        instantiated per broker.
        """
        return pulumi.get(self, "simpleconsumer_pool_size_max")

    @simpleconsumer_pool_size_max.setter
    def simpleconsumer_pool_size_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simpleconsumer_pool_size_max", value)


@pulumi.input_type
class KafkaKafkaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet for 
               service nodes that are in a project VPC or another type of private network
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet for 
        service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class KafkaKafkaUserConfigPrivatelinkAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[pulumi.Input[str]] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kafka: Enable kafka
        :param pulumi.Input[str] kafka_connect: Enable kafka_connect
        :param pulumi.Input[str] kafka_rest: Enable kafka_rest
        :param pulumi.Input[str] schema_registry: Enable Schema-Registry service
        """
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input[str]]:
        """
        Enable kafka
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable kafka_connect
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        """
        Enable kafka_rest
        """
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Schema-Registry service
        """
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class KafkaKafkaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[pulumi.Input[str]] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kafka: Enable kafka
        :param pulumi.Input[str] kafka_connect: Enable kafka_connect
        :param pulumi.Input[str] kafka_rest: Enable kafka_rest
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet for 
               service nodes that are in a project VPC or another type of private network
        :param pulumi.Input[str] schema_registry: Enable Schema-Registry service
        """
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input[str]]:
        """
        Enable kafka
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable kafka_connect
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        """
        Enable kafka_rest
        """
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet for 
        service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Schema-Registry service
        """
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class KafkaKafkaUserConfigSchemaRegistryConfigArgs:
    def __init__(__self__, *,
                 leader_eligibility: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] leader_eligibility: If true, Karapace / Schema Registry on the service nodes can 
               participate in leader election. It might be needed to disable this when the schemas topic is replicated
               to a secondary cluster and Karapace / Schema Registry there must not participate in leader election.
               Defaults to 'true'.
        :param pulumi.Input[str] topic_name: The durable single partition topic that acts as the durable log for the 
               data. This topic must be compacted to avoid losing data due to retention policy. Please note that
               changing this configuration in an existing Schema Registry / Karapace setup leads to previous
               schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence
               put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled.
               Defaults to '_schemas'.
        """
        if leader_eligibility is not None:
            pulumi.set(__self__, "leader_eligibility", leader_eligibility)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="leaderEligibility")
    def leader_eligibility(self) -> Optional[pulumi.Input[str]]:
        """
        If true, Karapace / Schema Registry on the service nodes can 
        participate in leader election. It might be needed to disable this when the schemas topic is replicated
        to a secondary cluster and Karapace / Schema Registry there must not participate in leader election.
        Defaults to 'true'.
        """
        return pulumi.get(self, "leader_eligibility")

    @leader_eligibility.setter
    def leader_eligibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_eligibility", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        The durable single partition topic that acts as the durable log for the 
        data. This topic must be compacted to avoid losing data due to retention policy. Please note that
        changing this configuration in an existing Schema Registry / Karapace setup leads to previous
        schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence
        put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled.
        Defaults to '_schemas'.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class KafkaMirrorMakerComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class KafkaMirrorMakerKafkaMirrormakerArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KafkaMirrorMakerKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kafka_mirrormaker: Optional[pulumi.Input['KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param pulumi.Input['KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs'] kafka_mirrormaker: Kafka MirrorMaker configuration values
        """
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_mirrormaker is not None:
            pulumi.set(__self__, "kafka_mirrormaker", kafka_mirrormaker)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaMirrormaker")
    def kafka_mirrormaker(self) -> Optional[pulumi.Input['KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']]:
        """
        Kafka MirrorMaker configuration values
        """
        return pulumi.get(self, "kafka_mirrormaker")

    @kafka_mirrormaker.setter
    def kafka_mirrormaker(self, value: Optional[pulumi.Input['KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']]):
        pulumi.set(self, "kafka_mirrormaker", value)


@pulumi.input_type
class KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs:
    def __init__(__self__, *,
                 refresh_groups_enabled: Optional[pulumi.Input[str]] = None,
                 refresh_groups_interval_seconds: Optional[pulumi.Input[str]] = None,
                 refresh_topics_enabled: Optional[pulumi.Input[str]] = None,
                 refresh_topics_interval_seconds: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] refresh_groups_enabled: Whether to periodically check for new consumer groups. 
               Defaults to 'true'.
        :param pulumi.Input[str] refresh_groups_interval_seconds: Whether to periodically check for new topics and 
               partitions. Defaults to 'true'.
        :param pulumi.Input[str] refresh_topics_interval_seconds: Frequency of topic and partitions refresh in 
               seconds. Defaults to 600 seconds (10 minutes).
        """
        if refresh_groups_enabled is not None:
            pulumi.set(__self__, "refresh_groups_enabled", refresh_groups_enabled)
        if refresh_groups_interval_seconds is not None:
            pulumi.set(__self__, "refresh_groups_interval_seconds", refresh_groups_interval_seconds)
        if refresh_topics_enabled is not None:
            pulumi.set(__self__, "refresh_topics_enabled", refresh_topics_enabled)
        if refresh_topics_interval_seconds is not None:
            pulumi.set(__self__, "refresh_topics_interval_seconds", refresh_topics_interval_seconds)

    @property
    @pulumi.getter(name="refreshGroupsEnabled")
    def refresh_groups_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to periodically check for new consumer groups. 
        Defaults to 'true'.
        """
        return pulumi.get(self, "refresh_groups_enabled")

    @refresh_groups_enabled.setter
    def refresh_groups_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_groups_enabled", value)

    @property
    @pulumi.getter(name="refreshGroupsIntervalSeconds")
    def refresh_groups_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to periodically check for new topics and 
        partitions. Defaults to 'true'.
        """
        return pulumi.get(self, "refresh_groups_interval_seconds")

    @refresh_groups_interval_seconds.setter
    def refresh_groups_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_groups_interval_seconds", value)

    @property
    @pulumi.getter(name="refreshTopicsEnabled")
    def refresh_topics_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_topics_enabled")

    @refresh_topics_enabled.setter
    def refresh_topics_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_topics_enabled", value)

    @property
    @pulumi.getter(name="refreshTopicsIntervalSeconds")
    def refresh_topics_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Frequency of topic and partitions refresh in 
        seconds. Defaults to 600 seconds (10 minutes).
        """
        return pulumi.get(self, "refresh_topics_interval_seconds")

    @refresh_topics_interval_seconds.setter
    def refresh_topics_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_topics_interval_seconds", value)


@pulumi.input_type
class KafkaMirrorMakerServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class KafkaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class KafkaTopicConfigArgs:
    def __init__(__self__, *,
                 cleanup_policy: Optional[pulumi.Input[str]] = None,
                 compression_type: Optional[pulumi.Input[str]] = None,
                 delete_retention_ms: Optional[pulumi.Input[str]] = None,
                 file_delete_delay_ms: Optional[pulumi.Input[str]] = None,
                 flush_messages: Optional[pulumi.Input[str]] = None,
                 flush_ms: Optional[pulumi.Input[str]] = None,
                 index_interval_bytes: Optional[pulumi.Input[str]] = None,
                 max_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 max_message_bytes: Optional[pulumi.Input[str]] = None,
                 message_downconversion_enable: Optional[pulumi.Input[str]] = None,
                 message_format_version: Optional[pulumi.Input[str]] = None,
                 message_timestamp_difference_max_ms: Optional[pulumi.Input[str]] = None,
                 message_timestamp_type: Optional[pulumi.Input[str]] = None,
                 min_cleanable_dirty_ratio: Optional[pulumi.Input[str]] = None,
                 min_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 min_insync_replicas: Optional[pulumi.Input[str]] = None,
                 preallocate: Optional[pulumi.Input[str]] = None,
                 retention_bytes: Optional[pulumi.Input[str]] = None,
                 retention_ms: Optional[pulumi.Input[str]] = None,
                 segment_bytes: Optional[pulumi.Input[str]] = None,
                 segment_index_bytes: Optional[pulumi.Input[str]] = None,
                 segment_jitter_ms: Optional[pulumi.Input[str]] = None,
                 segment_ms: Optional[pulumi.Input[str]] = None,
                 unclean_leader_election_enable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cleanup_policy: cleanup.policy value, can be `create`, `delete` or `compact,delete`
        :param pulumi.Input[str] compression_type: compression.type value
        :param pulumi.Input[str] delete_retention_ms: delete.retention.ms value
        :param pulumi.Input[str] file_delete_delay_ms: file.delete.delay.ms value
        :param pulumi.Input[str] flush_messages: flush.messages value
        :param pulumi.Input[str] flush_ms: flush.ms value
        :param pulumi.Input[str] index_interval_bytes: index.interval.bytes value
        :param pulumi.Input[str] max_compaction_lag_ms: max.compaction.lag.ms value
        :param pulumi.Input[str] max_message_bytes: max.message.bytes value
        :param pulumi.Input[str] message_downconversion_enable: message.downconversion.enable value
        :param pulumi.Input[str] message_format_version: message.format.version value
        :param pulumi.Input[str] message_timestamp_difference_max_ms: message.timestamp.difference.max.ms value
        :param pulumi.Input[str] message_timestamp_type: message.timestamp.type value
        :param pulumi.Input[str] min_cleanable_dirty_ratio: min.cleanable.dirty.ratio value
        :param pulumi.Input[str] min_compaction_lag_ms: min.compaction.lag.ms value
        :param pulumi.Input[str] min_insync_replicas: min.insync.replicas value
        :param pulumi.Input[str] preallocate: preallocate value
        :param pulumi.Input[str] retention_bytes: retention.bytes value
        :param pulumi.Input[str] retention_ms: retention.ms value
        :param pulumi.Input[str] segment_bytes: segment.bytes value
        :param pulumi.Input[str] segment_index_bytes: segment.index.bytes value
        :param pulumi.Input[str] segment_jitter_ms: segment.jitter.ms value
        :param pulumi.Input[str] segment_ms: segment.ms value
        :param pulumi.Input[str] unclean_leader_election_enable: unclean.leader.election.enable value
        """
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if delete_retention_ms is not None:
            pulumi.set(__self__, "delete_retention_ms", delete_retention_ms)
        if file_delete_delay_ms is not None:
            pulumi.set(__self__, "file_delete_delay_ms", file_delete_delay_ms)
        if flush_messages is not None:
            pulumi.set(__self__, "flush_messages", flush_messages)
        if flush_ms is not None:
            pulumi.set(__self__, "flush_ms", flush_ms)
        if index_interval_bytes is not None:
            pulumi.set(__self__, "index_interval_bytes", index_interval_bytes)
        if max_compaction_lag_ms is not None:
            pulumi.set(__self__, "max_compaction_lag_ms", max_compaction_lag_ms)
        if max_message_bytes is not None:
            pulumi.set(__self__, "max_message_bytes", max_message_bytes)
        if message_downconversion_enable is not None:
            pulumi.set(__self__, "message_downconversion_enable", message_downconversion_enable)
        if message_format_version is not None:
            pulumi.set(__self__, "message_format_version", message_format_version)
        if message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "message_timestamp_difference_max_ms", message_timestamp_difference_max_ms)
        if message_timestamp_type is not None:
            pulumi.set(__self__, "message_timestamp_type", message_timestamp_type)
        if min_cleanable_dirty_ratio is not None:
            pulumi.set(__self__, "min_cleanable_dirty_ratio", min_cleanable_dirty_ratio)
        if min_compaction_lag_ms is not None:
            pulumi.set(__self__, "min_compaction_lag_ms", min_compaction_lag_ms)
        if min_insync_replicas is not None:
            pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        if preallocate is not None:
            pulumi.set(__self__, "preallocate", preallocate)
        if retention_bytes is not None:
            pulumi.set(__self__, "retention_bytes", retention_bytes)
        if retention_ms is not None:
            pulumi.set(__self__, "retention_ms", retention_ms)
        if segment_bytes is not None:
            pulumi.set(__self__, "segment_bytes", segment_bytes)
        if segment_index_bytes is not None:
            pulumi.set(__self__, "segment_index_bytes", segment_index_bytes)
        if segment_jitter_ms is not None:
            pulumi.set(__self__, "segment_jitter_ms", segment_jitter_ms)
        if segment_ms is not None:
            pulumi.set(__self__, "segment_ms", segment_ms)
        if unclean_leader_election_enable is not None:
            pulumi.set(__self__, "unclean_leader_election_enable", unclean_leader_election_enable)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[pulumi.Input[str]]:
        """
        cleanup.policy value, can be `create`, `delete` or `compact,delete`
        """
        return pulumi.get(self, "cleanup_policy")

    @cleanup_policy.setter
    def cleanup_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cleanup_policy", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        """
        compression.type value
        """
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="deleteRetentionMs")
    def delete_retention_ms(self) -> Optional[pulumi.Input[str]]:
        """
        delete.retention.ms value
        """
        return pulumi.get(self, "delete_retention_ms")

    @delete_retention_ms.setter
    def delete_retention_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_retention_ms", value)

    @property
    @pulumi.getter(name="fileDeleteDelayMs")
    def file_delete_delay_ms(self) -> Optional[pulumi.Input[str]]:
        """
        file.delete.delay.ms value
        """
        return pulumi.get(self, "file_delete_delay_ms")

    @file_delete_delay_ms.setter
    def file_delete_delay_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_delete_delay_ms", value)

    @property
    @pulumi.getter(name="flushMessages")
    def flush_messages(self) -> Optional[pulumi.Input[str]]:
        """
        flush.messages value
        """
        return pulumi.get(self, "flush_messages")

    @flush_messages.setter
    def flush_messages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flush_messages", value)

    @property
    @pulumi.getter(name="flushMs")
    def flush_ms(self) -> Optional[pulumi.Input[str]]:
        """
        flush.ms value
        """
        return pulumi.get(self, "flush_ms")

    @flush_ms.setter
    def flush_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flush_ms", value)

    @property
    @pulumi.getter(name="indexIntervalBytes")
    def index_interval_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        index.interval.bytes value
        """
        return pulumi.get(self, "index_interval_bytes")

    @index_interval_bytes.setter
    def index_interval_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_interval_bytes", value)

    @property
    @pulumi.getter(name="maxCompactionLagMs")
    def max_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        """
        max.compaction.lag.ms value
        """
        return pulumi.get(self, "max_compaction_lag_ms")

    @max_compaction_lag_ms.setter
    def max_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        max.message.bytes value
        """
        return pulumi.get(self, "max_message_bytes")

    @max_message_bytes.setter
    def max_message_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_message_bytes", value)

    @property
    @pulumi.getter(name="messageDownconversionEnable")
    def message_downconversion_enable(self) -> Optional[pulumi.Input[str]]:
        """
        message.downconversion.enable value
        """
        return pulumi.get(self, "message_downconversion_enable")

    @message_downconversion_enable.setter
    def message_downconversion_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_downconversion_enable", value)

    @property
    @pulumi.getter(name="messageFormatVersion")
    def message_format_version(self) -> Optional[pulumi.Input[str]]:
        """
        message.format.version value
        """
        return pulumi.get(self, "message_format_version")

    @message_format_version.setter
    def message_format_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_format_version", value)

    @property
    @pulumi.getter(name="messageTimestampDifferenceMaxMs")
    def message_timestamp_difference_max_ms(self) -> Optional[pulumi.Input[str]]:
        """
        message.timestamp.difference.max.ms value
        """
        return pulumi.get(self, "message_timestamp_difference_max_ms")

    @message_timestamp_difference_max_ms.setter
    def message_timestamp_difference_max_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="messageTimestampType")
    def message_timestamp_type(self) -> Optional[pulumi.Input[str]]:
        """
        message.timestamp.type value
        """
        return pulumi.get(self, "message_timestamp_type")

    @message_timestamp_type.setter
    def message_timestamp_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_timestamp_type", value)

    @property
    @pulumi.getter(name="minCleanableDirtyRatio")
    def min_cleanable_dirty_ratio(self) -> Optional[pulumi.Input[str]]:
        """
        min.cleanable.dirty.ratio value
        """
        return pulumi.get(self, "min_cleanable_dirty_ratio")

    @min_cleanable_dirty_ratio.setter
    def min_cleanable_dirty_ratio(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_cleanable_dirty_ratio", value)

    @property
    @pulumi.getter(name="minCompactionLagMs")
    def min_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        """
        min.compaction.lag.ms value
        """
        return pulumi.get(self, "min_compaction_lag_ms")

    @min_compaction_lag_ms.setter
    def min_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> Optional[pulumi.Input[str]]:
        """
        min.insync.replicas value
        """
        return pulumi.get(self, "min_insync_replicas")

    @min_insync_replicas.setter
    def min_insync_replicas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_insync_replicas", value)

    @property
    @pulumi.getter
    def preallocate(self) -> Optional[pulumi.Input[str]]:
        """
        preallocate value
        """
        return pulumi.get(self, "preallocate")

    @preallocate.setter
    def preallocate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preallocate", value)

    @property
    @pulumi.getter(name="retentionBytes")
    def retention_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        retention.bytes value
        """
        return pulumi.get(self, "retention_bytes")

    @retention_bytes.setter
    def retention_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention_bytes", value)

    @property
    @pulumi.getter(name="retentionMs")
    def retention_ms(self) -> Optional[pulumi.Input[str]]:
        """
        retention.ms value
        """
        return pulumi.get(self, "retention_ms")

    @retention_ms.setter
    def retention_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention_ms", value)

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        segment.bytes value
        """
        return pulumi.get(self, "segment_bytes")

    @segment_bytes.setter
    def segment_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_bytes", value)

    @property
    @pulumi.getter(name="segmentIndexBytes")
    def segment_index_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        segment.index.bytes value
        """
        return pulumi.get(self, "segment_index_bytes")

    @segment_index_bytes.setter
    def segment_index_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_index_bytes", value)

    @property
    @pulumi.getter(name="segmentJitterMs")
    def segment_jitter_ms(self) -> Optional[pulumi.Input[str]]:
        """
        segment.jitter.ms value
        """
        return pulumi.get(self, "segment_jitter_ms")

    @segment_jitter_ms.setter
    def segment_jitter_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_jitter_ms", value)

    @property
    @pulumi.getter(name="segmentMs")
    def segment_ms(self) -> Optional[pulumi.Input[str]]:
        """
        segment.ms value
        """
        return pulumi.get(self, "segment_ms")

    @segment_ms.setter
    def segment_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_ms", value)

    @property
    @pulumi.getter(name="uncleanLeaderElectionEnable")
    def unclean_leader_election_enable(self) -> Optional[pulumi.Input[str]]:
        """
        unclean.leader.election.enable value
        """
        return pulumi.get(self, "unclean_leader_election_enable")

    @unclean_leader_election_enable.setter
    def unclean_leader_election_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unclean_leader_election_enable", value)


@pulumi.input_type
class M3AggregatorComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class M3AggregatorM3aggregatorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class M3AggregatorM3aggregatorUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 m3_version: Optional[pulumi.Input[str]] = None,
                 m3aggregator_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        :param pulumi.Input[str] m3aggregator_version: M3 major version
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if m3_version is not None:
            pulumi.set(__self__, "m3_version", m3_version)
        if m3aggregator_version is not None:
            pulumi.set(__self__, "m3aggregator_version", m3aggregator_version)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="m3Version")
    def m3_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "m3_version")

    @m3_version.setter
    def m3_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "m3_version", value)

    @property
    @pulumi.getter(name="m3aggregatorVersion")
    def m3aggregator_version(self) -> Optional[pulumi.Input[str]]:
        """
        M3 major version
        """
        return pulumi.get(self, "m3aggregator_version")

    @m3aggregator_version.setter
    def m3aggregator_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "m3aggregator_version", value)


@pulumi.input_type
class M3AggregatorServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class M3DbComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class M3DbM3dbArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class M3DbM3dbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limits: Optional[pulumi.Input['M3DbM3dbUserConfigLimitsArgs']] = None,
                 m3_version: Optional[pulumi.Input[str]] = None,
                 m3coordinator_enable_graphite_carbon_ingest: Optional[pulumi.Input[str]] = None,
                 m3db_version: Optional[pulumi.Input[str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input['M3DbM3dbUserConfigNamespaceArgs']]]] = None,
                 private_access: Optional[pulumi.Input['M3DbM3dbUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['M3DbM3dbUserConfigPublicAccessArgs']] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        :param pulumi.Input['M3DbM3dbUserConfigLimitsArgs'] limits: M3 limits
        :param pulumi.Input[str] m3coordinator_enable_graphite_carbon_ingest: Enables access to Graphite Carbon 
               plaintext metrics ingestion. It can be enabled only for services inside VPCs. The
               metrics are written to aggregated namespaces only.
        :param pulumi.Input[str] m3db_version: M3 major version
        :param pulumi.Input[Sequence[pulumi.Input['M3DbM3dbUserConfigNamespaceArgs']]] namespaces: List of M3 namespaces
        :param pulumi.Input['M3DbM3dbUserConfigPrivateAccessArgs'] private_access: Allow access to selected service ports from private networks.
        :param pulumi.Input[str] project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param pulumi.Input['M3DbM3dbUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet.
        :param pulumi.Input[str] service_to_fork_from: Name of another service to fork from. This has effect only 
               when a new service is being created.
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if m3_version is not None:
            pulumi.set(__self__, "m3_version", m3_version)
        if m3coordinator_enable_graphite_carbon_ingest is not None:
            pulumi.set(__self__, "m3coordinator_enable_graphite_carbon_ingest", m3coordinator_enable_graphite_carbon_ingest)
        if m3db_version is not None:
            pulumi.set(__self__, "m3db_version", m3db_version)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['M3DbM3dbUserConfigLimitsArgs']]:
        """
        M3 limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['M3DbM3dbUserConfigLimitsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter(name="m3Version")
    def m3_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "m3_version")

    @m3_version.setter
    def m3_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "m3_version", value)

    @property
    @pulumi.getter(name="m3coordinatorEnableGraphiteCarbonIngest")
    def m3coordinator_enable_graphite_carbon_ingest(self) -> Optional[pulumi.Input[str]]:
        """
        Enables access to Graphite Carbon 
        plaintext metrics ingestion. It can be enabled only for services inside VPCs. The
        metrics are written to aggregated namespaces only.
        """
        return pulumi.get(self, "m3coordinator_enable_graphite_carbon_ingest")

    @m3coordinator_enable_graphite_carbon_ingest.setter
    def m3coordinator_enable_graphite_carbon_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "m3coordinator_enable_graphite_carbon_ingest", value)

    @property
    @pulumi.getter(name="m3dbVersion")
    def m3db_version(self) -> Optional[pulumi.Input[str]]:
        """
        M3 major version
        """
        return pulumi.get(self, "m3db_version")

    @m3db_version.setter
    def m3db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "m3db_version", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['M3DbM3dbUserConfigNamespaceArgs']]]]:
        """
        List of M3 namespaces
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['M3DbM3dbUserConfigNamespaceArgs']]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['M3DbM3dbUserConfigPrivateAccessArgs']]:
        """
        Allow access to selected service ports from private networks.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['M3DbM3dbUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['M3DbM3dbUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet.
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['M3DbM3dbUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another service to fork from. This has effect only 
        when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class M3DbM3dbUserConfigLimitsArgs:
    def __init__(__self__, *,
                 global_datapoints: Optional[pulumi.Input[str]] = None,
                 query_datapoints: Optional[pulumi.Input[str]] = None,
                 query_require_exhaustive: Optional[pulumi.Input[str]] = None,
                 query_series: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] global_datapoints: The maximum number of data points fetched during request
        :param pulumi.Input[str] query_datapoints: The maximum number of data points fetched in single query
        :param pulumi.Input[str] query_require_exhaustive: When query limits are exceeded, whether to return error 
               (if True) or return partial results (False)
        :param pulumi.Input[str] query_series: The maximum number of series fetched in single query
        """
        if global_datapoints is not None:
            pulumi.set(__self__, "global_datapoints", global_datapoints)
        if query_datapoints is not None:
            pulumi.set(__self__, "query_datapoints", query_datapoints)
        if query_require_exhaustive is not None:
            pulumi.set(__self__, "query_require_exhaustive", query_require_exhaustive)
        if query_series is not None:
            pulumi.set(__self__, "query_series", query_series)

    @property
    @pulumi.getter(name="globalDatapoints")
    def global_datapoints(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of data points fetched during request
        """
        return pulumi.get(self, "global_datapoints")

    @global_datapoints.setter
    def global_datapoints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_datapoints", value)

    @property
    @pulumi.getter(name="queryDatapoints")
    def query_datapoints(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of data points fetched in single query
        """
        return pulumi.get(self, "query_datapoints")

    @query_datapoints.setter
    def query_datapoints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_datapoints", value)

    @property
    @pulumi.getter(name="queryRequireExhaustive")
    def query_require_exhaustive(self) -> Optional[pulumi.Input[str]]:
        """
        When query limits are exceeded, whether to return error 
        (if True) or return partial results (False)
        """
        return pulumi.get(self, "query_require_exhaustive")

    @query_require_exhaustive.setter
    def query_require_exhaustive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_require_exhaustive", value)

    @property
    @pulumi.getter(name="querySeries")
    def query_series(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of series fetched in single query
        """
        return pulumi.get(self, "query_series")

    @query_series.setter
    def query_series(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_series", value)


@pulumi.input_type
class M3DbM3dbUserConfigNamespaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input['M3DbM3dbUserConfigNamespaceOptionsArgs']] = None,
                 resolution: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the namespace
        :param pulumi.Input['M3DbM3dbUserConfigNamespaceOptionsArgs'] options: Namespace options
        :param pulumi.Input[str] resolution: The resolution for an aggregated namespace
        :param pulumi.Input[str] type: The type of aggregation (aggregated/unaggregated)
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if resolution is not None:
            pulumi.set(__self__, "resolution", resolution)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the namespace
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['M3DbM3dbUserConfigNamespaceOptionsArgs']]:
        """
        Namespace options
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['M3DbM3dbUserConfigNamespaceOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def resolution(self) -> Optional[pulumi.Input[str]]:
        """
        The resolution for an aggregated namespace
        """
        return pulumi.get(self, "resolution")

    @resolution.setter
    def resolution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of aggregation (aggregated/unaggregated)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class M3DbM3dbUserConfigNamespaceOptionsArgs:
    def __init__(__self__, *,
                 retention_options: Optional[pulumi.Input['M3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs']] = None,
                 snapshot_enabled: Optional[pulumi.Input[str]] = None,
                 writes_to_commitlog: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['M3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs'] retention_options: Retention options
        :param pulumi.Input[str] snapshot_enabled: Controls whether M3DB will create snapshot files for 
               this namespace
        :param pulumi.Input[str] writes_to_commitlog: Controls whether M3DB will include writes to this 
               namespace in the commitlog.
        """
        if retention_options is not None:
            pulumi.set(__self__, "retention_options", retention_options)
        if snapshot_enabled is not None:
            pulumi.set(__self__, "snapshot_enabled", snapshot_enabled)
        if writes_to_commitlog is not None:
            pulumi.set(__self__, "writes_to_commitlog", writes_to_commitlog)

    @property
    @pulumi.getter(name="retentionOptions")
    def retention_options(self) -> Optional[pulumi.Input['M3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs']]:
        """
        Retention options
        """
        return pulumi.get(self, "retention_options")

    @retention_options.setter
    def retention_options(self, value: Optional[pulumi.Input['M3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs']]):
        pulumi.set(self, "retention_options", value)

    @property
    @pulumi.getter(name="snapshotEnabled")
    def snapshot_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        Controls whether M3DB will create snapshot files for 
        this namespace
        """
        return pulumi.get(self, "snapshot_enabled")

    @snapshot_enabled.setter
    def snapshot_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_enabled", value)

    @property
    @pulumi.getter(name="writesToCommitlog")
    def writes_to_commitlog(self) -> Optional[pulumi.Input[str]]:
        """
        Controls whether M3DB will include writes to this 
        namespace in the commitlog.
        """
        return pulumi.get(self, "writes_to_commitlog")

    @writes_to_commitlog.setter
    def writes_to_commitlog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "writes_to_commitlog", value)


@pulumi.input_type
class M3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs:
    def __init__(__self__, *,
                 block_data_expiry_duration: Optional[pulumi.Input[str]] = None,
                 blocksize_duration: Optional[pulumi.Input[str]] = None,
                 buffer_future_duration: Optional[pulumi.Input[str]] = None,
                 buffer_past_duration: Optional[pulumi.Input[str]] = None,
                 retention_period_duration: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] block_data_expiry_duration: Controls how long we wait before expiring stale data
        :param pulumi.Input[str] blocksize_duration: Controls how long to keep a block in memory before 
               flushing to a fileset on disk
        :param pulumi.Input[str] buffer_future_duration: Controls how far into the future writes to 
               the namespace will be accepted
        :param pulumi.Input[str] buffer_past_duration: Controls how far into the past writes to the 
               namespace will be accepted
        :param pulumi.Input[str] retention_period_duration: Controls the duration of time that M3DB will 
               retain data for the namespace
        """
        if block_data_expiry_duration is not None:
            pulumi.set(__self__, "block_data_expiry_duration", block_data_expiry_duration)
        if blocksize_duration is not None:
            pulumi.set(__self__, "blocksize_duration", blocksize_duration)
        if buffer_future_duration is not None:
            pulumi.set(__self__, "buffer_future_duration", buffer_future_duration)
        if buffer_past_duration is not None:
            pulumi.set(__self__, "buffer_past_duration", buffer_past_duration)
        if retention_period_duration is not None:
            pulumi.set(__self__, "retention_period_duration", retention_period_duration)

    @property
    @pulumi.getter(name="blockDataExpiryDuration")
    def block_data_expiry_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Controls how long we wait before expiring stale data
        """
        return pulumi.get(self, "block_data_expiry_duration")

    @block_data_expiry_duration.setter
    def block_data_expiry_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_data_expiry_duration", value)

    @property
    @pulumi.getter(name="blocksizeDuration")
    def blocksize_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Controls how long to keep a block in memory before 
        flushing to a fileset on disk
        """
        return pulumi.get(self, "blocksize_duration")

    @blocksize_duration.setter
    def blocksize_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocksize_duration", value)

    @property
    @pulumi.getter(name="bufferFutureDuration")
    def buffer_future_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Controls how far into the future writes to 
        the namespace will be accepted
        """
        return pulumi.get(self, "buffer_future_duration")

    @buffer_future_duration.setter
    def buffer_future_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer_future_duration", value)

    @property
    @pulumi.getter(name="bufferPastDuration")
    def buffer_past_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Controls how far into the past writes to the 
        namespace will be accepted
        """
        return pulumi.get(self, "buffer_past_duration")

    @buffer_past_duration.setter
    def buffer_past_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer_past_duration", value)

    @property
    @pulumi.getter(name="retentionPeriodDuration")
    def retention_period_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Controls the duration of time that M3DB will 
        retain data for the namespace
        """
        return pulumi.get(self, "retention_period_duration")

    @retention_period_duration.setter
    def retention_period_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention_period_duration", value)


@pulumi.input_type
class M3DbM3dbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 m3coordinator: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] m3coordinator: Allow clients to connect to m3coordinator from the public internet 
               for service nodes that are in a project VPC or another type of private network.
        """
        if m3coordinator is not None:
            pulumi.set(__self__, "m3coordinator", m3coordinator)

    @property
    @pulumi.getter
    def m3coordinator(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to m3coordinator from the public internet 
        for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "m3coordinator")

    @m3coordinator.setter
    def m3coordinator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "m3coordinator", value)


@pulumi.input_type
class M3DbM3dbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 m3coordinator: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] m3coordinator: Allow clients to connect to m3coordinator from the public internet 
               for service nodes that are in a project VPC or another type of private network.
        """
        if m3coordinator is not None:
            pulumi.set(__self__, "m3coordinator", m3coordinator)

    @property
    @pulumi.getter
    def m3coordinator(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to m3coordinator from the public internet 
        for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "m3coordinator")

    @m3coordinator.setter
    def m3coordinator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "m3coordinator", value)


@pulumi.input_type
class M3DbServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class MySqlComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class MySqlMysqlArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class MySqlMysqlUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 backup_hour: Optional[pulumi.Input[str]] = None,
                 backup_minute: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mysql: Optional[pulumi.Input['MySqlMysqlUserConfigMysqlArgs']] = None,
                 mysql_version: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['MySqlMysqlUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['MySqlMysqlUserConfigPublicAccessArgs']] = None,
                 recovery_target_time: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] admin_password: Custom password for admin user. Defaults to random string. 
               This must be set only when a new service is being created.
        :param pulumi.Input[str] admin_username: Custom username for admin user. This must be set only when a 
               new service is being created.
        :param pulumi.Input[str] backup_hour: The hour of day (in UTC) when backup for the service is started. 
               New backup is only started if previous backup has already completed.
        :param pulumi.Input[str] backup_minute: The minute of an hour when backup for the service is started. 
               New backup is only started if previous backup has already completed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        :param pulumi.Input['MySqlMysqlUserConfigMysqlArgs'] mysql: Allow clients to connect to mysql from the public internet for service 
               nodes that are in a project VPC or another type of private network
        :param pulumi.Input[str] mysql_version: MySQL major version
        :param pulumi.Input['MySqlMysqlUserConfigPrivateAccessArgs'] private_access: Allow access to selected service ports from private networks
        :param pulumi.Input[str] project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param pulumi.Input['MySqlMysqlUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet
        :param pulumi.Input[str] recovery_target_time: Recovery target time when forking a service. This has effect 
               only when a new service is being created.
        :param pulumi.Input[str] service_to_fork_from: Name of another service to fork from. This has effect only when 
               a new service is being created.
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if mysql_version is not None:
            pulumi.set(__self__, "mysql_version", mysql_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        Custom password for admin user. Defaults to random string. 
        This must be set only when a new service is being created.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        """
        Custom username for admin user. This must be set only when a 
        new service is being created.
        """
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[pulumi.Input[str]]:
        """
        The hour of day (in UTC) when backup for the service is started. 
        New backup is only started if previous backup has already completed.
        """
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[pulumi.Input[str]]:
        """
        The minute of an hour when backup for the service is started. 
        New backup is only started if previous backup has already completed.
        """
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['MySqlMysqlUserConfigMysqlArgs']]:
        """
        Allow clients to connect to mysql from the public internet for service 
        nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['MySqlMysqlUserConfigMysqlArgs']]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[pulumi.Input[str]]:
        """
        MySQL major version
        """
        return pulumi.get(self, "mysql_version")

    @mysql_version.setter
    def mysql_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['MySqlMysqlUserConfigPrivateAccessArgs']]:
        """
        Allow access to selected service ports from private networks
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['MySqlMysqlUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['MySqlMysqlUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['MySqlMysqlUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery target time when forking a service. This has effect 
        only when a new service is being created.
        """
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another service to fork from. This has effect only when 
        a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class MySqlMysqlUserConfigMysqlArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 default_time_zone: Optional[pulumi.Input[str]] = None,
                 group_concat_max_len: Optional[pulumi.Input[str]] = None,
                 information_schema_stats_expiry: Optional[pulumi.Input[str]] = None,
                 innodb_ft_min_token_size: Optional[pulumi.Input[str]] = None,
                 innodb_ft_server_stopword_table: Optional[pulumi.Input[str]] = None,
                 innodb_lock_wait_timeout: Optional[pulumi.Input[str]] = None,
                 innodb_log_buffer_size: Optional[pulumi.Input[str]] = None,
                 innodb_online_alter_log_max_size: Optional[pulumi.Input[str]] = None,
                 innodb_print_all_deadlocks: Optional[pulumi.Input[str]] = None,
                 innodb_rollback_on_timeout: Optional[pulumi.Input[str]] = None,
                 interactive_timeout: Optional[pulumi.Input[str]] = None,
                 max_allowed_packet: Optional[pulumi.Input[str]] = None,
                 max_heap_table_size: Optional[pulumi.Input[str]] = None,
                 net_read_timeout: Optional[pulumi.Input[str]] = None,
                 net_write_timeout: Optional[pulumi.Input[str]] = None,
                 sort_buffer_size: Optional[pulumi.Input[str]] = None,
                 sql_mode: Optional[pulumi.Input[str]] = None,
                 sql_require_primary_key: Optional[pulumi.Input[str]] = None,
                 tmp_table_size: Optional[pulumi.Input[str]] = None,
                 wait_timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] connect_timeout: The number of seconds that the mysqld server waits for a 
               connect packet before responding with Bad handshake
        :param pulumi.Input[str] default_time_zone: Default server time zone as an offset from UTC 
               (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
        :param pulumi.Input[str] group_concat_max_len: The maximum permitted result length in bytes for 
               the GROUP_CONCAT() function.
        :param pulumi.Input[str] information_schema_stats_expiry: The time, in seconds, before cached 
               statistics expire
        :param pulumi.Input[str] innodb_ft_min_token_size: Minimum length of words that are stored in 
               an InnoDB FULLTEXT index.
        :param pulumi.Input[str] innodb_ft_server_stopword_table: This option is used to specify your 
               own InnoDB FULLTEXT index stopword list for all InnoDB tables.
        :param pulumi.Input[str] innodb_lock_wait_timeout: The length of time in seconds an InnoDB 
               transaction waits for a row lock before giving up.
        :param pulumi.Input[str] innodb_log_buffer_size: The size in bytes of the buffer that InnoDB 
               uses to write to the log files on disk.
        :param pulumi.Input[str] innodb_online_alter_log_max_size: The upper limit in bytes on the 
               size of the temporary log files used during online DDL operations for InnoDB tables.
        :param pulumi.Input[str] innodb_print_all_deadlocks: When enabled, information about all 
               deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
        :param pulumi.Input[str] innodb_rollback_on_timeout: When enabled a transaction timeout 
               causes InnoDB to abort and roll back the entire transaction.
        :param pulumi.Input[str] interactive_timeout: The number of seconds the server waits for 
               activity on an interactive connection before closing it.
        :param pulumi.Input[str] max_allowed_packet: Size of the largest message in bytes that can 
               be received by the server. Default is 67108864 (64M)
        :param pulumi.Input[str] max_heap_table_size: Limits the size of internal in-memory tables. 
               Also set tmp_table_size. Default is 16777216 (16M)
        :param pulumi.Input[str] net_read_timeout: The number of seconds to wait for more data from 
               a connection before aborting the read.
        :param pulumi.Input[str] net_write_timeout: The number of seconds to wait for a block to be 
               written to a connection before aborting the write.
        :param pulumi.Input[str] sort_buffer_size: Sort buffer size in bytes for ORDER BY optimization. 
               Default is 262144 (256K)
        :param pulumi.Input[str] sql_mode: Global SQL mode. Set to empty to use MySQL server defaults. 
               When creating a new service and not setting this field Aiven default SQL mode (strict,
               SQL standard compliant) will be assigned.
        :param pulumi.Input[str] sql_require_primary_key: Require primary key to be defined for new 
               tables or old tables modified with ALTER TABLE and fail if missing. It is recommended
               to always have primary keys because various functionality may break if any large table
               is missing them.
        :param pulumi.Input[str] tmp_table_size: Limits the size of internal in-memory tables. Also set 
               max_heap_table_size. Default is 16777216 (16M)
        :param pulumi.Input[str] wait_timeout: The number of seconds the server waits for activity on 
               a noninteractive connection before closing it.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if group_concat_max_len is not None:
            pulumi.set(__self__, "group_concat_max_len", group_concat_max_len)
        if information_schema_stats_expiry is not None:
            pulumi.set(__self__, "information_schema_stats_expiry", information_schema_stats_expiry)
        if innodb_ft_min_token_size is not None:
            pulumi.set(__self__, "innodb_ft_min_token_size", innodb_ft_min_token_size)
        if innodb_ft_server_stopword_table is not None:
            pulumi.set(__self__, "innodb_ft_server_stopword_table", innodb_ft_server_stopword_table)
        if innodb_lock_wait_timeout is not None:
            pulumi.set(__self__, "innodb_lock_wait_timeout", innodb_lock_wait_timeout)
        if innodb_log_buffer_size is not None:
            pulumi.set(__self__, "innodb_log_buffer_size", innodb_log_buffer_size)
        if innodb_online_alter_log_max_size is not None:
            pulumi.set(__self__, "innodb_online_alter_log_max_size", innodb_online_alter_log_max_size)
        if innodb_print_all_deadlocks is not None:
            pulumi.set(__self__, "innodb_print_all_deadlocks", innodb_print_all_deadlocks)
        if innodb_rollback_on_timeout is not None:
            pulumi.set(__self__, "innodb_rollback_on_timeout", innodb_rollback_on_timeout)
        if interactive_timeout is not None:
            pulumi.set(__self__, "interactive_timeout", interactive_timeout)
        if max_allowed_packet is not None:
            pulumi.set(__self__, "max_allowed_packet", max_allowed_packet)
        if max_heap_table_size is not None:
            pulumi.set(__self__, "max_heap_table_size", max_heap_table_size)
        if net_read_timeout is not None:
            pulumi.set(__self__, "net_read_timeout", net_read_timeout)
        if net_write_timeout is not None:
            pulumi.set(__self__, "net_write_timeout", net_write_timeout)
        if sort_buffer_size is not None:
            pulumi.set(__self__, "sort_buffer_size", sort_buffer_size)
        if sql_mode is not None:
            pulumi.set(__self__, "sql_mode", sql_mode)
        if sql_require_primary_key is not None:
            pulumi.set(__self__, "sql_require_primary_key", sql_require_primary_key)
        if tmp_table_size is not None:
            pulumi.set(__self__, "tmp_table_size", tmp_table_size)
        if wait_timeout is not None:
            pulumi.set(__self__, "wait_timeout", wait_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The number of seconds that the mysqld server waits for a 
        connect packet before responding with Bad handshake
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Default server time zone as an offset from UTC 
        (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
        """
        return pulumi.get(self, "default_time_zone")

    @default_time_zone.setter
    def default_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_time_zone", value)

    @property
    @pulumi.getter(name="groupConcatMaxLen")
    def group_concat_max_len(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum permitted result length in bytes for 
        the GROUP_CONCAT() function.
        """
        return pulumi.get(self, "group_concat_max_len")

    @group_concat_max_len.setter
    def group_concat_max_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_concat_max_len", value)

    @property
    @pulumi.getter(name="informationSchemaStatsExpiry")
    def information_schema_stats_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        The time, in seconds, before cached 
        statistics expire
        """
        return pulumi.get(self, "information_schema_stats_expiry")

    @information_schema_stats_expiry.setter
    def information_schema_stats_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "information_schema_stats_expiry", value)

    @property
    @pulumi.getter(name="innodbFtMinTokenSize")
    def innodb_ft_min_token_size(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum length of words that are stored in 
        an InnoDB FULLTEXT index.
        """
        return pulumi.get(self, "innodb_ft_min_token_size")

    @innodb_ft_min_token_size.setter
    def innodb_ft_min_token_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_ft_min_token_size", value)

    @property
    @pulumi.getter(name="innodbFtServerStopwordTable")
    def innodb_ft_server_stopword_table(self) -> Optional[pulumi.Input[str]]:
        """
        This option is used to specify your 
        own InnoDB FULLTEXT index stopword list for all InnoDB tables.
        """
        return pulumi.get(self, "innodb_ft_server_stopword_table")

    @innodb_ft_server_stopword_table.setter
    def innodb_ft_server_stopword_table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_ft_server_stopword_table", value)

    @property
    @pulumi.getter(name="innodbLockWaitTimeout")
    def innodb_lock_wait_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The length of time in seconds an InnoDB 
        transaction waits for a row lock before giving up.
        """
        return pulumi.get(self, "innodb_lock_wait_timeout")

    @innodb_lock_wait_timeout.setter
    def innodb_lock_wait_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_lock_wait_timeout", value)

    @property
    @pulumi.getter(name="innodbLogBufferSize")
    def innodb_log_buffer_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size in bytes of the buffer that InnoDB 
        uses to write to the log files on disk.
        """
        return pulumi.get(self, "innodb_log_buffer_size")

    @innodb_log_buffer_size.setter
    def innodb_log_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_log_buffer_size", value)

    @property
    @pulumi.getter(name="innodbOnlineAlterLogMaxSize")
    def innodb_online_alter_log_max_size(self) -> Optional[pulumi.Input[str]]:
        """
        The upper limit in bytes on the 
        size of the temporary log files used during online DDL operations for InnoDB tables.
        """
        return pulumi.get(self, "innodb_online_alter_log_max_size")

    @innodb_online_alter_log_max_size.setter
    def innodb_online_alter_log_max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_online_alter_log_max_size", value)

    @property
    @pulumi.getter(name="innodbPrintAllDeadlocks")
    def innodb_print_all_deadlocks(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, information about all 
        deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
        """
        return pulumi.get(self, "innodb_print_all_deadlocks")

    @innodb_print_all_deadlocks.setter
    def innodb_print_all_deadlocks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_print_all_deadlocks", value)

    @property
    @pulumi.getter(name="innodbRollbackOnTimeout")
    def innodb_rollback_on_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled a transaction timeout 
        causes InnoDB to abort and roll back the entire transaction.
        """
        return pulumi.get(self, "innodb_rollback_on_timeout")

    @innodb_rollback_on_timeout.setter
    def innodb_rollback_on_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_rollback_on_timeout", value)

    @property
    @pulumi.getter(name="interactiveTimeout")
    def interactive_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The number of seconds the server waits for 
        activity on an interactive connection before closing it.
        """
        return pulumi.get(self, "interactive_timeout")

    @interactive_timeout.setter
    def interactive_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interactive_timeout", value)

    @property
    @pulumi.getter(name="maxAllowedPacket")
    def max_allowed_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Size of the largest message in bytes that can 
        be received by the server. Default is 67108864 (64M)
        """
        return pulumi.get(self, "max_allowed_packet")

    @max_allowed_packet.setter
    def max_allowed_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_allowed_packet", value)

    @property
    @pulumi.getter(name="maxHeapTableSize")
    def max_heap_table_size(self) -> Optional[pulumi.Input[str]]:
        """
        Limits the size of internal in-memory tables. 
        Also set tmp_table_size. Default is 16777216 (16M)
        """
        return pulumi.get(self, "max_heap_table_size")

    @max_heap_table_size.setter
    def max_heap_table_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_heap_table_size", value)

    @property
    @pulumi.getter(name="netReadTimeout")
    def net_read_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The number of seconds to wait for more data from 
        a connection before aborting the read.
        """
        return pulumi.get(self, "net_read_timeout")

    @net_read_timeout.setter
    def net_read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_read_timeout", value)

    @property
    @pulumi.getter(name="netWriteTimeout")
    def net_write_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The number of seconds to wait for a block to be 
        written to a connection before aborting the write.
        """
        return pulumi.get(self, "net_write_timeout")

    @net_write_timeout.setter
    def net_write_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_write_timeout", value)

    @property
    @pulumi.getter(name="sortBufferSize")
    def sort_buffer_size(self) -> Optional[pulumi.Input[str]]:
        """
        Sort buffer size in bytes for ORDER BY optimization. 
        Default is 262144 (256K)
        """
        return pulumi.get(self, "sort_buffer_size")

    @sort_buffer_size.setter
    def sort_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_buffer_size", value)

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Global SQL mode. Set to empty to use MySQL server defaults. 
        When creating a new service and not setting this field Aiven default SQL mode (strict,
        SQL standard compliant) will be assigned.
        """
        return pulumi.get(self, "sql_mode")

    @sql_mode.setter
    def sql_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_mode", value)

    @property
    @pulumi.getter(name="sqlRequirePrimaryKey")
    def sql_require_primary_key(self) -> Optional[pulumi.Input[str]]:
        """
        Require primary key to be defined for new 
        tables or old tables modified with ALTER TABLE and fail if missing. It is recommended
        to always have primary keys because various functionality may break if any large table
        is missing them.
        """
        return pulumi.get(self, "sql_require_primary_key")

    @sql_require_primary_key.setter
    def sql_require_primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_require_primary_key", value)

    @property
    @pulumi.getter(name="tmpTableSize")
    def tmp_table_size(self) -> Optional[pulumi.Input[str]]:
        """
        Limits the size of internal in-memory tables. Also set 
        max_heap_table_size. Default is 16777216 (16M)
        """
        return pulumi.get(self, "tmp_table_size")

    @tmp_table_size.setter
    def tmp_table_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmp_table_size", value)

    @property
    @pulumi.getter(name="waitTimeout")
    def wait_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The number of seconds the server waits for activity on 
        a noninteractive connection before closing it.
        """
        return pulumi.get(self, "wait_timeout")

    @wait_timeout.setter
    def wait_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wait_timeout", value)


@pulumi.input_type
class MySqlMysqlUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mysql: Allow clients to connect to mysql from the public internet for service 
               nodes that are in a project VPC or another type of private network
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network
        """
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to mysql from the public internet for service 
        nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class MySqlMysqlUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mysql: Allow clients to connect to mysql from the public internet for service 
               nodes that are in a project VPC or another type of private network
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network
        """
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to mysql from the public internet for service 
        nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class MySqlServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class PgComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: hostname or IP address of the server where to migrate data from.
        :param pulumi.Input[int] port: port number of the server where to migrate data from.
        :param pulumi.Input[bool] ssl: the server where to migrate data from is secured with SSL.
        """
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        hostname or IP address of the server where to migrate data from.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        port number of the server where to migrate data from.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        the server where to migrate data from is secured with SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class PgPgArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 replica_uri: Optional[pulumi.Input[str]] = None,
                 sslmode: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dbname: database name for bootstrapping the initial connection.
        :param pulumi.Input[str] host: hostname or IP address of the server where to migrate data from.
        :param pulumi.Input[str] password: password for authentication with the server where to migrate data from.
        :param pulumi.Input[int] port: port number of the server where to migrate data from.
        :param pulumi.Input[str] replica_uri: PostgreSQL replica URI for services with a replica
        :param pulumi.Input[str] sslmode: PostgreSQL sslmode setting (currently always `require`)
        :param pulumi.Input[str] uri: PostgreSQL master connection URI
        :param pulumi.Input[str] user: PostgreSQL admin user name
        """
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if replica_uri is not None:
            pulumi.set(__self__, "replica_uri", replica_uri)
        if sslmode is not None:
            pulumi.set(__self__, "sslmode", sslmode)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        """
        database name for bootstrapping the initial connection.
        """
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        hostname or IP address of the server where to migrate data from.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        password for authentication with the server where to migrate data from.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        port number of the server where to migrate data from.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicaUri")
    def replica_uri(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL replica URI for services with a replica
        """
        return pulumi.get(self, "replica_uri")

    @replica_uri.setter
    def replica_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_uri", value)

    @property
    @pulumi.getter
    def sslmode(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL sslmode setting (currently always `require`)
        """
        return pulumi.get(self, "sslmode")

    @sslmode.setter
    def sslmode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslmode", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL master connection URI
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL admin user name
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class PgPgUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 backup_hour: Optional[pulumi.Input[str]] = None,
                 backup_minute: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 migration: Optional[pulumi.Input['PgPgUserConfigMigrationArgs']] = None,
                 pg: Optional[pulumi.Input['PgPgUserConfigPgArgs']] = None,
                 pg_read_replica: Optional[pulumi.Input[str]] = None,
                 pg_service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 pg_version: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input['PgPgUserConfigPgbouncerArgs']] = None,
                 pglookout: Optional[pulumi.Input['PgPgUserConfigPglookoutArgs']] = None,
                 private_access: Optional[pulumi.Input['PgPgUserConfigPrivateAccessArgs']] = None,
                 privatelink_access: Optional[pulumi.Input['PgPgUserConfigPrivatelinkAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['PgPgUserConfigPublicAccessArgs']] = None,
                 recovery_target_time: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 shared_buffers_percentage: Optional[pulumi.Input[str]] = None,
                 synchronous_replication: Optional[pulumi.Input[str]] = None,
                 timescaledb: Optional[pulumi.Input['PgPgUserConfigTimescaledbArgs']] = None,
                 variant: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] admin_password: custom password for admin user. Defaults to random string. *This must
               be set only when a new service is being created.*
        :param pulumi.Input[str] admin_username: custom username for admin user. *This must be set only when a new service
               is being created.*
        :param pulumi.Input[str] backup_hour: the hour of day (in UTC) when backup for the service is started. New backup 
               is only started if previous backup has already completed.
        :param pulumi.Input[str] backup_minute: the minute of an hour when backup for the service is started. New backup 
               is only started if previous backup has already completed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param pulumi.Input['PgPgUserConfigMigrationArgs'] migration: migrate data from existing server, has the following options:
        :param pulumi.Input['PgPgUserConfigPgArgs'] pg: Enable pg.
        :param pulumi.Input[str] pg_read_replica: This setting is deprecated. Use read-replica service integration instead.
        :param pulumi.Input[str] pg_service_to_fork_from: Name of the PG Service from which to fork (deprecated, use service_to_fork_from). 
               This has effect only when a new service is being created.
        :param pulumi.Input[str] pg_version: PostgreSQL major version.
        :param pulumi.Input['PgPgUserConfigPgbouncerArgs'] pgbouncer: Enable pgbouncer.
        :param pulumi.Input['PgPgUserConfigPglookoutArgs'] pglookout: PGLookout settings.
        :param pulumi.Input['PgPgUserConfigPrivateAccessArgs'] private_access: Allow access to selected service ports from private networks.
        :param pulumi.Input['PgPgUserConfigPrivatelinkAccessArgs'] privatelink_access: Allow access to selected service components through Privatelink.
        :param pulumi.Input[str] project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param pulumi.Input['PgPgUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet
        :param pulumi.Input[str] recovery_target_time: Recovery target time when forking a service. This has effect 
               only when a new service is being created.
        :param pulumi.Input[str] service_to_fork_from: Name of another service to fork from. This has effect only 
               when a new service is being created.
        :param pulumi.Input[str] shared_buffers_percentage: Percentage of total RAM that the database server uses for 
               memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts
               the shared_buffers configuration value. The absolute maximum is 12 GB.
        :param pulumi.Input[str] synchronous_replication: Synchronous replication type. Note that the service plan 
               also needs to support synchronous replication.
        :param pulumi.Input['PgPgUserConfigTimescaledbArgs'] timescaledb: TimescaleDB extension configuration values.
        :param pulumi.Input[str] variant: Variant of the PostgreSQL service, may affect the features that are 
               exposed by default. Options: `aiven` or `timescale`.
        :param pulumi.Input[str] work_mem: Sets the maximum amount of memory to be used by a query operation (such 
               as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of
               total RAM (up to 32MB).
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pg_read_replica is not None:
            pulumi.set(__self__, "pg_read_replica", pg_read_replica)
        if pg_service_to_fork_from is not None:
            pulumi.set(__self__, "pg_service_to_fork_from", pg_service_to_fork_from)
        if pg_version is not None:
            pulumi.set(__self__, "pg_version", pg_version)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if pglookout is not None:
            pulumi.set(__self__, "pglookout", pglookout)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if privatelink_access is not None:
            pulumi.set(__self__, "privatelink_access", privatelink_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if shared_buffers_percentage is not None:
            pulumi.set(__self__, "shared_buffers_percentage", shared_buffers_percentage)
        if synchronous_replication is not None:
            pulumi.set(__self__, "synchronous_replication", synchronous_replication)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        custom password for admin user. Defaults to random string. *This must
        be set only when a new service is being created.*
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        """
        custom username for admin user. *This must be set only when a new service
        is being created.*
        """
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[pulumi.Input[str]]:
        """
        the hour of day (in UTC) when backup for the service is started. New backup 
        is only started if previous backup has already completed.
        """
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[pulumi.Input[str]]:
        """
        the minute of an hour when backup for the service is started. New backup 
        is only started if previous backup has already completed.
        """
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional[pulumi.Input['PgPgUserConfigMigrationArgs']]:
        """
        migrate data from existing server, has the following options:
        """
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional[pulumi.Input['PgPgUserConfigMigrationArgs']]):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input['PgPgUserConfigPgArgs']]:
        """
        Enable pg.
        """
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input['PgPgUserConfigPgArgs']]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter(name="pgReadReplica")
    def pg_read_replica(self) -> Optional[pulumi.Input[str]]:
        """
        This setting is deprecated. Use read-replica service integration instead.
        """
        return pulumi.get(self, "pg_read_replica")

    @pg_read_replica.setter
    def pg_read_replica(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_read_replica", value)

    @property
    @pulumi.getter(name="pgServiceToForkFrom")
    def pg_service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the PG Service from which to fork (deprecated, use service_to_fork_from). 
        This has effect only when a new service is being created.
        """
        return pulumi.get(self, "pg_service_to_fork_from")

    @pg_service_to_fork_from.setter
    def pg_service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_service_to_fork_from", value)

    @property
    @pulumi.getter(name="pgVersion")
    def pg_version(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL major version.
        """
        return pulumi.get(self, "pg_version")

    @pg_version.setter
    def pg_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_version", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input['PgPgUserConfigPgbouncerArgs']]:
        """
        Enable pgbouncer.
        """
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input['PgPgUserConfigPgbouncerArgs']]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def pglookout(self) -> Optional[pulumi.Input['PgPgUserConfigPglookoutArgs']]:
        """
        PGLookout settings.
        """
        return pulumi.get(self, "pglookout")

    @pglookout.setter
    def pglookout(self, value: Optional[pulumi.Input['PgPgUserConfigPglookoutArgs']]):
        pulumi.set(self, "pglookout", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['PgPgUserConfigPrivateAccessArgs']]:
        """
        Allow access to selected service ports from private networks.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['PgPgUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="privatelinkAccess")
    def privatelink_access(self) -> Optional[pulumi.Input['PgPgUserConfigPrivatelinkAccessArgs']]:
        """
        Allow access to selected service components through Privatelink.
        """
        return pulumi.get(self, "privatelink_access")

    @privatelink_access.setter
    def privatelink_access(self, value: Optional[pulumi.Input['PgPgUserConfigPrivatelinkAccessArgs']]):
        pulumi.set(self, "privatelink_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['PgPgUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['PgPgUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery target time when forking a service. This has effect 
        only when a new service is being created.
        """
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another service to fork from. This has effect only 
        when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="sharedBuffersPercentage")
    def shared_buffers_percentage(self) -> Optional[pulumi.Input[str]]:
        """
        Percentage of total RAM that the database server uses for 
        memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts
        the shared_buffers configuration value. The absolute maximum is 12 GB.
        """
        return pulumi.get(self, "shared_buffers_percentage")

    @shared_buffers_percentage.setter
    def shared_buffers_percentage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers_percentage", value)

    @property
    @pulumi.getter(name="synchronousReplication")
    def synchronous_replication(self) -> Optional[pulumi.Input[str]]:
        """
        Synchronous replication type. Note that the service plan 
        also needs to support synchronous replication.
        """
        return pulumi.get(self, "synchronous_replication")

    @synchronous_replication.setter
    def synchronous_replication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronous_replication", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional[pulumi.Input['PgPgUserConfigTimescaledbArgs']]:
        """
        TimescaleDB extension configuration values.
        """
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional[pulumi.Input['PgPgUserConfigTimescaledbArgs']]):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[pulumi.Input[str]]:
        """
        Variant of the PostgreSQL service, may affect the features that are 
        exposed by default. Options: `aiven` or `timescale`.
        """
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the maximum amount of memory to be used by a query operation (such 
        as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of
        total RAM (up to 32MB).
        """
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


@pulumi.input_type
class PgPgUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dbname: database name for bootstrapping the initial connection.
        :param pulumi.Input[str] host: hostname or IP address of the server where to migrate data from.
        :param pulumi.Input[str] password: password for authentication with the server where to migrate data from.
        :param pulumi.Input[str] port: port number of the server where to migrate data from.
        :param pulumi.Input[str] ssl: the server where to migrate data from is secured with SSL.
        :param pulumi.Input[str] username: user name for authentication with the server where to migrate data from.
        """
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        """
        database name for bootstrapping the initial connection.
        """
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        hostname or IP address of the server where to migrate data from.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        password for authentication with the server where to migrate data from.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        port number of the server where to migrate data from.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        the server where to migrate data from is secured with SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        user name for authentication with the server where to migrate data from.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class PgPgUserConfigPgArgs:
    def __init__(__self__, *,
                 autovacuum_analyze_scale_factor: Optional[pulumi.Input[str]] = None,
                 autovacuum_analyze_threshold: Optional[pulumi.Input[str]] = None,
                 autovacuum_freeze_max_age: Optional[pulumi.Input[str]] = None,
                 autovacuum_max_workers: Optional[pulumi.Input[str]] = None,
                 autovacuum_naptime: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_cost_delay: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_cost_limit: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_scale_factor: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_threshold: Optional[pulumi.Input[str]] = None,
                 deadlock_timeout: Optional[pulumi.Input[str]] = None,
                 idle_in_transaction_session_timeout: Optional[pulumi.Input[str]] = None,
                 jit: Optional[pulumi.Input[str]] = None,
                 log_autovacuum_min_duration: Optional[pulumi.Input[str]] = None,
                 log_error_verbosity: Optional[pulumi.Input[str]] = None,
                 log_min_duration_statement: Optional[pulumi.Input[str]] = None,
                 max_files_per_process: Optional[pulumi.Input[str]] = None,
                 max_locks_per_transaction: Optional[pulumi.Input[str]] = None,
                 max_logical_replication_workers: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_pred_locks_per_transaction: Optional[pulumi.Input[str]] = None,
                 max_prepared_transactions: Optional[pulumi.Input[str]] = None,
                 max_replication_slots: Optional[pulumi.Input[str]] = None,
                 max_stack_depth: Optional[pulumi.Input[str]] = None,
                 max_standby_archive_delay: Optional[pulumi.Input[str]] = None,
                 max_standby_streaming_delay: Optional[pulumi.Input[str]] = None,
                 max_wal_senders: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 pg_partman_bgw_dot_interval: Optional[pulumi.Input[str]] = None,
                 pg_partman_bgw_dot_role: Optional[pulumi.Input[str]] = None,
                 pg_stat_statements_dot_track: Optional[pulumi.Input[str]] = None,
                 temp_file_limit: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 track_activity_query_size: Optional[pulumi.Input[str]] = None,
                 track_commit_timestamp: Optional[pulumi.Input[str]] = None,
                 track_functions: Optional[pulumi.Input[str]] = None,
                 wal_sender_timeout: Optional[pulumi.Input[str]] = None,
                 wal_writer_delay: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] autovacuum_analyze_scale_factor: Specifies a fraction of the table size to add to 
               autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2
               (20% of table size).
        :param pulumi.Input[str] autovacuum_analyze_threshold: specifies the minimum number of inserted, updated 
               or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
        :param pulumi.Input[str] autovacuum_freeze_max_age: specifies the maximum age (in transactions) that a table's 
               pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID
               wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound
               even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
        :param pulumi.Input[str] autovacuum_max_workers: specifies the maximum number of autovacuum processes (other 
               than the autovacuum launcher) that may be running at any one time. The default is three. This parameter
               can only be set at server start.
        :param pulumi.Input[str] autovacuum_naptime: specifies the minimum delay between autovacuum runs on any 
               given database. The delay is measured in seconds, and the default is one minute.
        :param pulumi.Input[str] autovacuum_vacuum_cost_delay: specifies the cost delay value that will be used 
               in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be
               used. The default value is 20 milliseconds.
        :param pulumi.Input[str] autovacuum_vacuum_cost_limit: specifies the cost limit value that will be used in 
               automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit
               value will be used.
        :param pulumi.Input[str] autovacuum_vacuum_scale_factor: specifies a fraction of the table size to add to 
               autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
        :param pulumi.Input[str] autovacuum_vacuum_threshold: specifies the minimum number of updated or deleted tuples 
               needed to trigger a VACUUM in any one table. The default is 50 tuples
        :param pulumi.Input[str] deadlock_timeout: this is the amount of time, in milliseconds, to wait on a lock before 
               checking to see if there is a deadlock condition.
        :param pulumi.Input[str] idle_in_transaction_session_timeout: Time out sessions with open transactions after 
               this number of milliseconds.
        :param pulumi.Input[str] jit: Controls system-wide use of Just-in-Time Compilation (JIT).
        :param pulumi.Input[str] log_autovacuum_min_duration: Causes each action executed by autovacuum to be logged 
               if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum
               actions. Minus-one (the default) disables logging autovacuum actions.
        :param pulumi.Input[str] log_error_verbosity: Controls the amount of detail written in the server log for 
               each message that is logged. Possible values: `TERSE`, `DEFAULT` and `VERBOSE`.
        :param pulumi.Input[str] log_min_duration_statement: Log statements that take more than this number of 
               milliseconds to run, -1 disables
        :param pulumi.Input[str] max_files_per_process: PostgreSQL maximum number of files that can be open per process
        :param pulumi.Input[str] max_locks_per_transaction: PostgreSQL maximum locks per transaction
        :param pulumi.Input[str] max_logical_replication_workers: PostgreSQL maximum logical replication workers 
               (taken from the pool of max_parallel_workers)
        :param pulumi.Input[str] max_parallel_workers: Sets the maximum number of workers that the system can 
               support for parallel queries.
        :param pulumi.Input[str] max_parallel_workers_per_gather: Sets the maximum number of workers that can be 
               started by a single Gather or Gather Merge node.
        :param pulumi.Input[str] max_pred_locks_per_transaction: PostgreSQL maximum predicate locks per transaction
        :param pulumi.Input[str] max_prepared_transactions: PostgreSQL maximum prepared transactions
        :param pulumi.Input[str] max_replication_slots: PostgreSQL maximum replication slots
        :param pulumi.Input[str] max_stack_depth: Maximum depth of the stack in bytes
        :param pulumi.Input[str] max_standby_archive_delay: Max standby archive delay in milliseconds
        :param pulumi.Input[str] max_standby_streaming_delay: Max standby streaming delay in milliseconds
        :param pulumi.Input[str] max_wal_senders: PostgreSQL maximum WAL senders
        :param pulumi.Input[str] max_worker_processes: Sets the maximum number of background processes that the system
               can support
               * `pg_partman_bgw.interval` - (Optional) Sets the time interval to run pg_partman's scheduled tasks
               * `pg_partman_bgw.role` - (Optional) Controls which role to use for pg_partman's scheduled
               background tasks.
               * `pg_stat_statements.track` - (Optional) Controls which statements are counted. Specify top
               to track top-level statements (those issued directly by clients), all to also track nested
               statements (such as statements invoked within functions), or none to disable statement statistics
               collection. The default value is top.
        :param pulumi.Input[str] temp_file_limit: PostgreSQL temporary file limit in KiB, -1 for unlimited
        :param pulumi.Input[str] timezone: PostgreSQL service timezone
        :param pulumi.Input[str] track_activity_query_size: Specifies the number of bytes reserved to track the currently 
               executing command for each active session.
        :param pulumi.Input[str] track_commit_timestamp: Record commit time of transactions
        :param pulumi.Input[str] track_functions: Enables tracking of function call counts and time used.
        :param pulumi.Input[str] wal_sender_timeout: Terminate replication connections that are inactive for longer than 
               this amount of time, in milliseconds.
        :param pulumi.Input[str] wal_writer_delay: WAL flush interval in milliseconds. Note that setting this value 
               to lower than the default 200ms may negatively impact performance
        """
        if autovacuum_analyze_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_analyze_scale_factor", autovacuum_analyze_scale_factor)
        if autovacuum_analyze_threshold is not None:
            pulumi.set(__self__, "autovacuum_analyze_threshold", autovacuum_analyze_threshold)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_naptime is not None:
            pulumi.set(__self__, "autovacuum_naptime", autovacuum_naptime)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_cost_limit is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_limit", autovacuum_vacuum_cost_limit)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if deadlock_timeout is not None:
            pulumi.set(__self__, "deadlock_timeout", deadlock_timeout)
        if idle_in_transaction_session_timeout is not None:
            pulumi.set(__self__, "idle_in_transaction_session_timeout", idle_in_transaction_session_timeout)
        if jit is not None:
            pulumi.set(__self__, "jit", jit)
        if log_autovacuum_min_duration is not None:
            pulumi.set(__self__, "log_autovacuum_min_duration", log_autovacuum_min_duration)
        if log_error_verbosity is not None:
            pulumi.set(__self__, "log_error_verbosity", log_error_verbosity)
        if log_min_duration_statement is not None:
            pulumi.set(__self__, "log_min_duration_statement", log_min_duration_statement)
        if max_files_per_process is not None:
            pulumi.set(__self__, "max_files_per_process", max_files_per_process)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_logical_replication_workers is not None:
            pulumi.set(__self__, "max_logical_replication_workers", max_logical_replication_workers)
        if max_parallel_workers is not None:
            pulumi.set(__self__, "max_parallel_workers", max_parallel_workers)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_pred_locks_per_transaction is not None:
            pulumi.set(__self__, "max_pred_locks_per_transaction", max_pred_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_replication_slots is not None:
            pulumi.set(__self__, "max_replication_slots", max_replication_slots)
        if max_stack_depth is not None:
            pulumi.set(__self__, "max_stack_depth", max_stack_depth)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if max_wal_senders is not None:
            pulumi.set(__self__, "max_wal_senders", max_wal_senders)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if pg_partman_bgw_dot_interval is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_interval", pg_partman_bgw_dot_interval)
        if pg_partman_bgw_dot_role is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_role", pg_partman_bgw_dot_role)
        if pg_stat_statements_dot_track is not None:
            pulumi.set(__self__, "pg_stat_statements_dot_track", pg_stat_statements_dot_track)
        if temp_file_limit is not None:
            pulumi.set(__self__, "temp_file_limit", temp_file_limit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if track_activity_query_size is not None:
            pulumi.set(__self__, "track_activity_query_size", track_activity_query_size)
        if track_commit_timestamp is not None:
            pulumi.set(__self__, "track_commit_timestamp", track_commit_timestamp)
        if track_functions is not None:
            pulumi.set(__self__, "track_functions", track_functions)
        if wal_sender_timeout is not None:
            pulumi.set(__self__, "wal_sender_timeout", wal_sender_timeout)
        if wal_writer_delay is not None:
            pulumi.set(__self__, "wal_writer_delay", wal_writer_delay)

    @property
    @pulumi.getter(name="autovacuumAnalyzeScaleFactor")
    def autovacuum_analyze_scale_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a fraction of the table size to add to 
        autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2
        (20% of table size).
        """
        return pulumi.get(self, "autovacuum_analyze_scale_factor")

    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_analyze_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumAnalyzeThreshold")
    def autovacuum_analyze_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        specifies the minimum number of inserted, updated 
        or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
        """
        return pulumi.get(self, "autovacuum_analyze_threshold")

    @autovacuum_analyze_threshold.setter
    def autovacuum_analyze_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_analyze_threshold", value)

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[pulumi.Input[str]]:
        """
        specifies the maximum age (in transactions) that a table's 
        pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID
        wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound
        even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
        """
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @autovacuum_freeze_max_age.setter
    def autovacuum_freeze_max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_freeze_max_age", value)

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[pulumi.Input[str]]:
        """
        specifies the maximum number of autovacuum processes (other 
        than the autovacuum launcher) that may be running at any one time. The default is three. This parameter
        can only be set at server start.
        """
        return pulumi.get(self, "autovacuum_max_workers")

    @autovacuum_max_workers.setter
    def autovacuum_max_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_max_workers", value)

    @property
    @pulumi.getter(name="autovacuumNaptime")
    def autovacuum_naptime(self) -> Optional[pulumi.Input[str]]:
        """
        specifies the minimum delay between autovacuum runs on any 
        given database. The delay is measured in seconds, and the default is one minute.
        """
        return pulumi.get(self, "autovacuum_naptime")

    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_naptime", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[pulumi.Input[str]]:
        """
        specifies the cost delay value that will be used 
        in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be
        used. The default value is 20 milliseconds.
        """
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_cost_delay", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostLimit")
    def autovacuum_vacuum_cost_limit(self) -> Optional[pulumi.Input[str]]:
        """
        specifies the cost limit value that will be used in 
        automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit
        value will be used.
        """
        return pulumi.get(self, "autovacuum_vacuum_cost_limit")

    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_cost_limit", value)

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[pulumi.Input[str]]:
        """
        specifies a fraction of the table size to add to 
        autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
        """
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        specifies the minimum number of updated or deleted tuples 
        needed to trigger a VACUUM in any one table. The default is 50 tuples
        """
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @autovacuum_vacuum_threshold.setter
    def autovacuum_vacuum_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_threshold", value)

    @property
    @pulumi.getter(name="deadlockTimeout")
    def deadlock_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        this is the amount of time, in milliseconds, to wait on a lock before 
        checking to see if there is a deadlock condition.
        """
        return pulumi.get(self, "deadlock_timeout")

    @deadlock_timeout.setter
    def deadlock_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deadlock_timeout", value)

    @property
    @pulumi.getter(name="idleInTransactionSessionTimeout")
    def idle_in_transaction_session_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Time out sessions with open transactions after 
        this number of milliseconds.
        """
        return pulumi.get(self, "idle_in_transaction_session_timeout")

    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_in_transaction_session_timeout", value)

    @property
    @pulumi.getter
    def jit(self) -> Optional[pulumi.Input[str]]:
        """
        Controls system-wide use of Just-in-Time Compilation (JIT).
        """
        return pulumi.get(self, "jit")

    @jit.setter
    def jit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit", value)

    @property
    @pulumi.getter(name="logAutovacuumMinDuration")
    def log_autovacuum_min_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Causes each action executed by autovacuum to be logged 
        if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum
        actions. Minus-one (the default) disables logging autovacuum actions.
        """
        return pulumi.get(self, "log_autovacuum_min_duration")

    @log_autovacuum_min_duration.setter
    def log_autovacuum_min_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_autovacuum_min_duration", value)

    @property
    @pulumi.getter(name="logErrorVerbosity")
    def log_error_verbosity(self) -> Optional[pulumi.Input[str]]:
        """
        Controls the amount of detail written in the server log for 
        each message that is logged. Possible values: `TERSE`, `DEFAULT` and `VERBOSE`.
        """
        return pulumi.get(self, "log_error_verbosity")

    @log_error_verbosity.setter
    def log_error_verbosity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_error_verbosity", value)

    @property
    @pulumi.getter(name="logMinDurationStatement")
    def log_min_duration_statement(self) -> Optional[pulumi.Input[str]]:
        """
        Log statements that take more than this number of 
        milliseconds to run, -1 disables
        """
        return pulumi.get(self, "log_min_duration_statement")

    @log_min_duration_statement.setter
    def log_min_duration_statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_min_duration_statement", value)

    @property
    @pulumi.getter(name="maxFilesPerProcess")
    def max_files_per_process(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL maximum number of files that can be open per process
        """
        return pulumi.get(self, "max_files_per_process")

    @max_files_per_process.setter
    def max_files_per_process(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_files_per_process", value)

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL maximum locks per transaction
        """
        return pulumi.get(self, "max_locks_per_transaction")

    @max_locks_per_transaction.setter
    def max_locks_per_transaction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxLogicalReplicationWorkers")
    def max_logical_replication_workers(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL maximum logical replication workers 
        (taken from the pool of max_parallel_workers)
        """
        return pulumi.get(self, "max_logical_replication_workers")

    @max_logical_replication_workers.setter
    def max_logical_replication_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_logical_replication_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkers")
    def max_parallel_workers(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the maximum number of workers that the system can 
        support for parallel queries.
        """
        return pulumi.get(self, "max_parallel_workers")

    @max_parallel_workers.setter
    def max_parallel_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the maximum number of workers that can be 
        started by a single Gather or Gather Merge node.
        """
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxPredLocksPerTransaction")
    def max_pred_locks_per_transaction(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL maximum predicate locks per transaction
        """
        return pulumi.get(self, "max_pred_locks_per_transaction")

    @max_pred_locks_per_transaction.setter
    def max_pred_locks_per_transaction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_pred_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL maximum prepared transactions
        """
        return pulumi.get(self, "max_prepared_transactions")

    @max_prepared_transactions.setter
    def max_prepared_transactions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_prepared_transactions", value)

    @property
    @pulumi.getter(name="maxReplicationSlots")
    def max_replication_slots(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL maximum replication slots
        """
        return pulumi.get(self, "max_replication_slots")

    @max_replication_slots.setter
    def max_replication_slots(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_replication_slots", value)

    @property
    @pulumi.getter(name="maxStackDepth")
    def max_stack_depth(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum depth of the stack in bytes
        """
        return pulumi.get(self, "max_stack_depth")

    @max_stack_depth.setter
    def max_stack_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_stack_depth", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[pulumi.Input[str]]:
        """
        Max standby archive delay in milliseconds
        """
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[pulumi.Input[str]]:
        """
        Max standby streaming delay in milliseconds
        """
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter(name="maxWalSenders")
    def max_wal_senders(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL maximum WAL senders
        """
        return pulumi.get(self, "max_wal_senders")

    @max_wal_senders.setter
    def max_wal_senders(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_wal_senders", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the maximum number of background processes that the system
        can support
        * `pg_partman_bgw.interval` - (Optional) Sets the time interval to run pg_partman's scheduled tasks
        * `pg_partman_bgw.role` - (Optional) Controls which role to use for pg_partman's scheduled
        background tasks.
        * `pg_stat_statements.track` - (Optional) Controls which statements are counted. Specify top
        to track top-level statements (those issued directly by clients), all to also track nested
        statements (such as statements invoked within functions), or none to disable statement statistics
        collection. The default value is top.
        """
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotInterval")
    def pg_partman_bgw_dot_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_partman_bgw_dot_interval")

    @pg_partman_bgw_dot_interval.setter
    def pg_partman_bgw_dot_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_partman_bgw_dot_interval", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotRole")
    def pg_partman_bgw_dot_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_partman_bgw_dot_role")

    @pg_partman_bgw_dot_role.setter
    def pg_partman_bgw_dot_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_partman_bgw_dot_role", value)

    @property
    @pulumi.getter(name="pgStatStatementsDotTrack")
    def pg_stat_statements_dot_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_stat_statements_dot_track")

    @pg_stat_statements_dot_track.setter
    def pg_stat_statements_dot_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_stat_statements_dot_track", value)

    @property
    @pulumi.getter(name="tempFileLimit")
    def temp_file_limit(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL temporary file limit in KiB, -1 for unlimited
        """
        return pulumi.get(self, "temp_file_limit")

    @temp_file_limit.setter
    def temp_file_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temp_file_limit", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL service timezone
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="trackActivityQuerySize")
    def track_activity_query_size(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the number of bytes reserved to track the currently 
        executing command for each active session.
        """
        return pulumi.get(self, "track_activity_query_size")

    @track_activity_query_size.setter
    def track_activity_query_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_activity_query_size", value)

    @property
    @pulumi.getter(name="trackCommitTimestamp")
    def track_commit_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        Record commit time of transactions
        """
        return pulumi.get(self, "track_commit_timestamp")

    @track_commit_timestamp.setter
    def track_commit_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_commit_timestamp", value)

    @property
    @pulumi.getter(name="trackFunctions")
    def track_functions(self) -> Optional[pulumi.Input[str]]:
        """
        Enables tracking of function call counts and time used.
        """
        return pulumi.get(self, "track_functions")

    @track_functions.setter
    def track_functions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_functions", value)

    @property
    @pulumi.getter(name="walSenderTimeout")
    def wal_sender_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Terminate replication connections that are inactive for longer than 
        this amount of time, in milliseconds.
        """
        return pulumi.get(self, "wal_sender_timeout")

    @wal_sender_timeout.setter
    def wal_sender_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_sender_timeout", value)

    @property
    @pulumi.getter(name="walWriterDelay")
    def wal_writer_delay(self) -> Optional[pulumi.Input[str]]:
        """
        WAL flush interval in milliseconds. Note that setting this value 
        to lower than the default 200ms may negatively impact performance
        """
        return pulumi.get(self, "wal_writer_delay")

    @wal_writer_delay.setter
    def wal_writer_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_writer_delay", value)


@pulumi.input_type
class PgPgUserConfigPgbouncerArgs:
    def __init__(__self__, *,
                 autodb_idle_timeout: Optional[pulumi.Input[str]] = None,
                 autodb_max_db_connections: Optional[pulumi.Input[str]] = None,
                 autodb_pool_mode: Optional[pulumi.Input[str]] = None,
                 autodb_pool_size: Optional[pulumi.Input[str]] = None,
                 ignore_startup_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 min_pool_size: Optional[pulumi.Input[str]] = None,
                 server_idle_timeout: Optional[pulumi.Input[str]] = None,
                 server_lifetime: Optional[pulumi.Input[str]] = None,
                 server_reset_query_always: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] autodb_idle_timeout: If the automatically created database pools have been unused this 
               many seconds, they are freed. If 0 then timeout is disabled.
        :param pulumi.Input[str] autodb_max_db_connections: Do not allow more than this many server connections per database 
               (regardless of user). Setting it to 0 means unlimited.
        :param pulumi.Input[str] autodb_pool_mode: PGBouncer pool mode
        :param pulumi.Input[str] autodb_pool_size: If non-zero then create automatically a pool of that size per user 
               when a pool doesn't exist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignore_startup_parameters: Enum of parameters to ignore when given in startup packet.
        :param pulumi.Input[str] min_pool_size: Add more server connections to pool if below this number. Improves 
               behavior when usual load comes suddenly back after period of total inactivity. The value is
               effectively capped at the pool size.
        :param pulumi.Input[str] server_idle_timeout: If a server connection has been idle more than this many seconds 
               it will be dropped. If 0 then timeout is disabled.
        :param pulumi.Input[str] server_lifetime: The pooler will close an unused server connection that has been connected 
               longer than this.
        :param pulumi.Input[str] server_reset_query_always: Run server_reset_query (DISCARD ALL) in all pooling modes.
        """
        if autodb_idle_timeout is not None:
            pulumi.set(__self__, "autodb_idle_timeout", autodb_idle_timeout)
        if autodb_max_db_connections is not None:
            pulumi.set(__self__, "autodb_max_db_connections", autodb_max_db_connections)
        if autodb_pool_mode is not None:
            pulumi.set(__self__, "autodb_pool_mode", autodb_pool_mode)
        if autodb_pool_size is not None:
            pulumi.set(__self__, "autodb_pool_size", autodb_pool_size)
        if ignore_startup_parameters is not None:
            pulumi.set(__self__, "ignore_startup_parameters", ignore_startup_parameters)
        if min_pool_size is not None:
            pulumi.set(__self__, "min_pool_size", min_pool_size)
        if server_idle_timeout is not None:
            pulumi.set(__self__, "server_idle_timeout", server_idle_timeout)
        if server_lifetime is not None:
            pulumi.set(__self__, "server_lifetime", server_lifetime)
        if server_reset_query_always is not None:
            pulumi.set(__self__, "server_reset_query_always", server_reset_query_always)

    @property
    @pulumi.getter(name="autodbIdleTimeout")
    def autodb_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        If the automatically created database pools have been unused this 
        many seconds, they are freed. If 0 then timeout is disabled.
        """
        return pulumi.get(self, "autodb_idle_timeout")

    @autodb_idle_timeout.setter
    def autodb_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autodb_idle_timeout", value)

    @property
    @pulumi.getter(name="autodbMaxDbConnections")
    def autodb_max_db_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Do not allow more than this many server connections per database 
        (regardless of user). Setting it to 0 means unlimited.
        """
        return pulumi.get(self, "autodb_max_db_connections")

    @autodb_max_db_connections.setter
    def autodb_max_db_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autodb_max_db_connections", value)

    @property
    @pulumi.getter(name="autodbPoolMode")
    def autodb_pool_mode(self) -> Optional[pulumi.Input[str]]:
        """
        PGBouncer pool mode
        """
        return pulumi.get(self, "autodb_pool_mode")

    @autodb_pool_mode.setter
    def autodb_pool_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autodb_pool_mode", value)

    @property
    @pulumi.getter(name="autodbPoolSize")
    def autodb_pool_size(self) -> Optional[pulumi.Input[str]]:
        """
        If non-zero then create automatically a pool of that size per user 
        when a pool doesn't exist.
        """
        return pulumi.get(self, "autodb_pool_size")

    @autodb_pool_size.setter
    def autodb_pool_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autodb_pool_size", value)

    @property
    @pulumi.getter(name="ignoreStartupParameters")
    def ignore_startup_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Enum of parameters to ignore when given in startup packet.
        """
        return pulumi.get(self, "ignore_startup_parameters")

    @ignore_startup_parameters.setter
    def ignore_startup_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore_startup_parameters", value)

    @property
    @pulumi.getter(name="minPoolSize")
    def min_pool_size(self) -> Optional[pulumi.Input[str]]:
        """
        Add more server connections to pool if below this number. Improves 
        behavior when usual load comes suddenly back after period of total inactivity. The value is
        effectively capped at the pool size.
        """
        return pulumi.get(self, "min_pool_size")

    @min_pool_size.setter
    def min_pool_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_pool_size", value)

    @property
    @pulumi.getter(name="serverIdleTimeout")
    def server_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        If a server connection has been idle more than this many seconds 
        it will be dropped. If 0 then timeout is disabled.
        """
        return pulumi.get(self, "server_idle_timeout")

    @server_idle_timeout.setter
    def server_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_idle_timeout", value)

    @property
    @pulumi.getter(name="serverLifetime")
    def server_lifetime(self) -> Optional[pulumi.Input[str]]:
        """
        The pooler will close an unused server connection that has been connected 
        longer than this.
        """
        return pulumi.get(self, "server_lifetime")

    @server_lifetime.setter
    def server_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_lifetime", value)

    @property
    @pulumi.getter(name="serverResetQueryAlways")
    def server_reset_query_always(self) -> Optional[pulumi.Input[str]]:
        """
        Run server_reset_query (DISCARD ALL) in all pooling modes.
        """
        return pulumi.get(self, "server_reset_query_always")

    @server_reset_query_always.setter
    def server_reset_query_always(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_reset_query_always", value)


@pulumi.input_type
class PgPgUserConfigPglookoutArgs:
    def __init__(__self__, *,
                 max_failover_replication_time_lag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] max_failover_replication_time_lag: Number of seconds of master unavailability before 
               triggering database failover to standby
        """
        if max_failover_replication_time_lag is not None:
            pulumi.set(__self__, "max_failover_replication_time_lag", max_failover_replication_time_lag)

    @property
    @pulumi.getter(name="maxFailoverReplicationTimeLag")
    def max_failover_replication_time_lag(self) -> Optional[pulumi.Input[str]]:
        """
        Number of seconds of master unavailability before 
        triggering database failover to standby
        """
        return pulumi.get(self, "max_failover_replication_time_lag")

    @max_failover_replication_time_lag.setter
    def max_failover_replication_time_lag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_failover_replication_time_lag", value)


@pulumi.input_type
class PgPgUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] pg: Enable pg.
        :param pulumi.Input[str] pgbouncer: Enable pgbouncer.
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet for 
               service nodes that are in a project VPC or another type of private network
        """
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        """
        Enable pg.
        """
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable pgbouncer.
        """
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet for 
        service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class PgPgUserConfigPrivatelinkAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] pg: Enable pg.
        :param pulumi.Input[str] pgbouncer: Enable pgbouncer.
        """
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        """
        Enable pg.
        """
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable pgbouncer.
        """
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)


@pulumi.input_type
class PgPgUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] pg: Enable pg.
        :param pulumi.Input[str] pgbouncer: Enable pgbouncer.
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet for 
               service nodes that are in a project VPC or another type of private network
        """
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        """
        Enable pg.
        """
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable pgbouncer.
        """
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet for 
        service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class PgPgUserConfigTimescaledbArgs:
    def __init__(__self__, *,
                 max_background_workers: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] max_background_workers: The number of background workers for timescaledb 
               operations. You should configure this setting to the sum of your number of databases and the
               total number of concurrent background workers you want running at any given point in time.
        """
        if max_background_workers is not None:
            pulumi.set(__self__, "max_background_workers", max_background_workers)

    @property
    @pulumi.getter(name="maxBackgroundWorkers")
    def max_background_workers(self) -> Optional[pulumi.Input[str]]:
        """
        The number of background workers for timescaledb 
        operations. You should configure this setting to the sum of your number of databases and the
        total number of concurrent background workers you want running at any given point in time.
        """
        return pulumi.get(self, "max_background_workers")

    @max_background_workers.setter
    def max_background_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_background_workers", value)


@pulumi.input_type
class PgServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class RedisComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Hostname or IP address of the server where to migrate data from
        :param pulumi.Input[int] port: Port number of the server where to migrate data from
        :param pulumi.Input[bool] ssl: The server where to migrate data from is secured with SSL
        """
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname or IP address of the server where to migrate data from
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number of the server where to migrate data from
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        The server where to migrate data from is secured with SSL
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class RedisRedisArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class RedisRedisUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 migration: Optional[pulumi.Input['RedisRedisUserConfigMigrationArgs']] = None,
                 private_access: Optional[pulumi.Input['RedisRedisUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['RedisRedisUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 redis_io_threads: Optional[pulumi.Input[str]] = None,
                 redis_lfu_decay_time: Optional[pulumi.Input[str]] = None,
                 redis_lfu_log_factor: Optional[pulumi.Input[str]] = None,
                 redis_maxmemory_policy: Optional[pulumi.Input[str]] = None,
                 redis_notify_keyspace_events: Optional[pulumi.Input[str]] = None,
                 redis_ssl: Optional[pulumi.Input[str]] = None,
                 redis_timeout: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_filters: Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param pulumi.Input['RedisRedisUserConfigMigrationArgs'] migration: Migrate data from existing server
        :param pulumi.Input['RedisRedisUserConfigPrivateAccessArgs'] private_access: Allow access to selected service ports from private networks
        :param pulumi.Input[str] project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param pulumi.Input['RedisRedisUserConfigPublicAccessArgs'] public_access: Allow access to selected service ports from the public Internet
        :param pulumi.Input[str] recovery_basebackup_name: Name of the basebackup to restore in forked service
        :param pulumi.Input[str] redis_io_threads: Redis IO thread count
               * `redis_lfu_decay_time"` - (Optional) LFU maxmemory-policy counter decay time in minutes
        :param pulumi.Input[str] redis_lfu_log_factor: Counter logarithm factor for volatile-lfu and allkeys-lfu 
               maxmemory-policies
        :param pulumi.Input[str] redis_maxmemory_policy: Redis maxmemory-policy
        :param pulumi.Input[str] redis_notify_keyspace_events: Set notify-keyspace-events option
        :param pulumi.Input[str] redis_ssl: Require SSL to access Redis
        :param pulumi.Input[str] redis_timeout: Redis idle connection timeout
               * `service_to_fork_from"` - (Optional) Name of another service to fork from. This has effect only
               when a new service is being created.
        """
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if redis_io_threads is not None:
            pulumi.set(__self__, "redis_io_threads", redis_io_threads)
        if redis_lfu_decay_time is not None:
            pulumi.set(__self__, "redis_lfu_decay_time", redis_lfu_decay_time)
        if redis_lfu_log_factor is not None:
            pulumi.set(__self__, "redis_lfu_log_factor", redis_lfu_log_factor)
        if redis_maxmemory_policy is not None:
            pulumi.set(__self__, "redis_maxmemory_policy", redis_maxmemory_policy)
        if redis_notify_keyspace_events is not None:
            pulumi.set(__self__, "redis_notify_keyspace_events", redis_notify_keyspace_events)
        if redis_ssl is not None:
            pulumi.set(__self__, "redis_ssl", redis_ssl)
        if redis_timeout is not None:
            pulumi.set(__self__, "redis_timeout", redis_timeout)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional[pulumi.Input['RedisRedisUserConfigMigrationArgs']]:
        """
        Migrate data from existing server
        """
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional[pulumi.Input['RedisRedisUserConfigMigrationArgs']]):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['RedisRedisUserConfigPrivateAccessArgs']]:
        """
        Allow access to selected service ports from private networks
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['RedisRedisUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['RedisRedisUserConfigPublicAccessArgs']]:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['RedisRedisUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the basebackup to restore in forked service
        """
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="redisIoThreads")
    def redis_io_threads(self) -> Optional[pulumi.Input[str]]:
        """
        Redis IO thread count
        * `redis_lfu_decay_time"` - (Optional) LFU maxmemory-policy counter decay time in minutes
        """
        return pulumi.get(self, "redis_io_threads")

    @redis_io_threads.setter
    def redis_io_threads(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_io_threads", value)

    @property
    @pulumi.getter(name="redisLfuDecayTime")
    def redis_lfu_decay_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_lfu_decay_time")

    @redis_lfu_decay_time.setter
    def redis_lfu_decay_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_lfu_decay_time", value)

    @property
    @pulumi.getter(name="redisLfuLogFactor")
    def redis_lfu_log_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Counter logarithm factor for volatile-lfu and allkeys-lfu 
        maxmemory-policies
        """
        return pulumi.get(self, "redis_lfu_log_factor")

    @redis_lfu_log_factor.setter
    def redis_lfu_log_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_lfu_log_factor", value)

    @property
    @pulumi.getter(name="redisMaxmemoryPolicy")
    def redis_maxmemory_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Redis maxmemory-policy
        """
        return pulumi.get(self, "redis_maxmemory_policy")

    @redis_maxmemory_policy.setter
    def redis_maxmemory_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_maxmemory_policy", value)

    @property
    @pulumi.getter(name="redisNotifyKeyspaceEvents")
    def redis_notify_keyspace_events(self) -> Optional[pulumi.Input[str]]:
        """
        Set notify-keyspace-events option
        """
        return pulumi.get(self, "redis_notify_keyspace_events")

    @redis_notify_keyspace_events.setter
    def redis_notify_keyspace_events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_notify_keyspace_events", value)

    @property
    @pulumi.getter(name="redisSsl")
    def redis_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Require SSL to access Redis
        """
        return pulumi.get(self, "redis_ssl")

    @redis_ssl.setter
    def redis_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_ssl", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Redis idle connection timeout
        * `service_to_fork_from"` - (Optional) Name of another service to fork from. This has effect only
        when a new service is being created.
        """
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_timeout", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class RedisRedisUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dbname: Database name for bootstrapping the initial connection
        :param pulumi.Input[str] host: Hostname or IP address of the server where to migrate data from
        :param pulumi.Input[str] password: Password for authentication with the server where to migrate data from
        :param pulumi.Input[str] port: Port number of the server where to migrate data from
        :param pulumi.Input[str] ssl: The server where to migrate data from is secured with SSL
        :param pulumi.Input[str] username: User name for authentication with the server where to migrate data from
        """
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        """
        Database name for bootstrapping the initial connection
        """
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname or IP address of the server where to migrate data from
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authentication with the server where to migrate data from
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port number of the server where to migrate data from
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        The server where to migrate data from is secured with SSL
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        User name for authentication with the server where to migrate data from
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class RedisRedisUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network
        :param pulumi.Input[str] redis: Allow clients to connect to redis from the public internet for service 
               nodes that are in a project VPC or another type of private network
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to redis from the public internet for service 
        nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class RedisRedisUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network
        :param pulumi.Input[str] redis: Allow clients to connect to redis from the public internet for service 
               nodes that are in a project VPC or another type of private network
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input[str]]:
        """
        Allow clients to connect to redis from the public internet for service 
        nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class RedisServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class ServiceCassandraArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceCassandraUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 migrate_sstableloader: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceCassandraUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['ServiceCassandraUserConfigPublicAccessArgs']] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migrate_sstableloader is not None:
            pulumi.set(__self__, "migrate_sstableloader", migrate_sstableloader)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="migrateSstableloader")
    def migrate_sstableloader(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migrate_sstableloader")

    @migrate_sstableloader.setter
    def migrate_sstableloader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migrate_sstableloader", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceCassandraUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceCassandraUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceCassandraUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceCassandraUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceCassandraUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceCassandraUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class ServiceElasticsearchArgs:
    def __init__(__self__, *,
                 kibana_uri: Optional[pulumi.Input[str]] = None):
        if kibana_uri is not None:
            pulumi.set(__self__, "kibana_uri", kibana_uri)

    @property
    @pulumi.getter(name="kibanaUri")
    def kibana_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kibana_uri")

    @kibana_uri.setter
    def kibana_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_uri", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 disable_replication_factor_adjustment: Optional[pulumi.Input[str]] = None,
                 elasticsearch: Optional[pulumi.Input['ServiceElasticsearchUserConfigElasticsearchArgs']] = None,
                 elasticsearch_version: Optional[pulumi.Input[str]] = None,
                 index_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceElasticsearchUserConfigIndexPatternArgs']]]] = None,
                 index_template: Optional[pulumi.Input['ServiceElasticsearchUserConfigIndexTemplateArgs']] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kibana: Optional[pulumi.Input['ServiceElasticsearchUserConfigKibanaArgs']] = None,
                 max_index_count: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceElasticsearchUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['ServiceElasticsearchUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if disable_replication_factor_adjustment is not None:
            pulumi.set(__self__, "disable_replication_factor_adjustment", disable_replication_factor_adjustment)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_version is not None:
            pulumi.set(__self__, "elasticsearch_version", elasticsearch_version)
        if index_patterns is not None:
            pulumi.set(__self__, "index_patterns", index_patterns)
        if index_template is not None:
            pulumi.set(__self__, "index_template", index_template)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="disableReplicationFactorAdjustment")
    def disable_replication_factor_adjustment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_replication_factor_adjustment")

    @disable_replication_factor_adjustment.setter
    def disable_replication_factor_adjustment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_replication_factor_adjustment", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['ServiceElasticsearchUserConfigElasticsearchArgs']]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['ServiceElasticsearchUserConfigElasticsearchArgs']]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter(name="elasticsearchVersion")
    def elasticsearch_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_version")

    @elasticsearch_version.setter
    def elasticsearch_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_version", value)

    @property
    @pulumi.getter(name="indexPatterns")
    def index_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceElasticsearchUserConfigIndexPatternArgs']]]]:
        return pulumi.get(self, "index_patterns")

    @index_patterns.setter
    def index_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceElasticsearchUserConfigIndexPatternArgs']]]]):
        pulumi.set(self, "index_patterns", value)

    @property
    @pulumi.getter(name="indexTemplate")
    def index_template(self) -> Optional[pulumi.Input['ServiceElasticsearchUserConfigIndexTemplateArgs']]:
        return pulumi.get(self, "index_template")

    @index_template.setter
    def index_template(self, value: Optional[pulumi.Input['ServiceElasticsearchUserConfigIndexTemplateArgs']]):
        pulumi.set(self, "index_template", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input['ServiceElasticsearchUserConfigKibanaArgs']]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input['ServiceElasticsearchUserConfigKibanaArgs']]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceElasticsearchUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceElasticsearchUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceElasticsearchUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceElasticsearchUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigElasticsearchArgs:
    def __init__(__self__, *,
                 action_auto_create_index_enabled: Optional[pulumi.Input[str]] = None,
                 action_destructive_requires_name: Optional[pulumi.Input[str]] = None,
                 cluster_max_shards_per_node: Optional[pulumi.Input[str]] = None,
                 http_max_content_length: Optional[pulumi.Input[str]] = None,
                 http_max_header_size: Optional[pulumi.Input[str]] = None,
                 http_max_initial_line_length: Optional[pulumi.Input[str]] = None,
                 indices_fielddata_cache_size: Optional[pulumi.Input[str]] = None,
                 indices_memory_index_buffer_size: Optional[pulumi.Input[str]] = None,
                 indices_queries_cache_size: Optional[pulumi.Input[str]] = None,
                 indices_query_bool_max_clause_count: Optional[pulumi.Input[str]] = None,
                 reindex_remote_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search_max_buckets: Optional[pulumi.Input[str]] = None,
                 thread_pool_analyze_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_analyze_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_force_merge_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_get_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_get_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_index_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_index_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_throttled_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_throttled_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_write_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_write_size: Optional[pulumi.Input[str]] = None):
        if action_auto_create_index_enabled is not None:
            pulumi.set(__self__, "action_auto_create_index_enabled", action_auto_create_index_enabled)
        if action_destructive_requires_name is not None:
            pulumi.set(__self__, "action_destructive_requires_name", action_destructive_requires_name)
        if cluster_max_shards_per_node is not None:
            pulumi.set(__self__, "cluster_max_shards_per_node", cluster_max_shards_per_node)
        if http_max_content_length is not None:
            pulumi.set(__self__, "http_max_content_length", http_max_content_length)
        if http_max_header_size is not None:
            pulumi.set(__self__, "http_max_header_size", http_max_header_size)
        if http_max_initial_line_length is not None:
            pulumi.set(__self__, "http_max_initial_line_length", http_max_initial_line_length)
        if indices_fielddata_cache_size is not None:
            pulumi.set(__self__, "indices_fielddata_cache_size", indices_fielddata_cache_size)
        if indices_memory_index_buffer_size is not None:
            pulumi.set(__self__, "indices_memory_index_buffer_size", indices_memory_index_buffer_size)
        if indices_queries_cache_size is not None:
            pulumi.set(__self__, "indices_queries_cache_size", indices_queries_cache_size)
        if indices_query_bool_max_clause_count is not None:
            pulumi.set(__self__, "indices_query_bool_max_clause_count", indices_query_bool_max_clause_count)
        if reindex_remote_whitelists is not None:
            pulumi.set(__self__, "reindex_remote_whitelists", reindex_remote_whitelists)
        if search_max_buckets is not None:
            pulumi.set(__self__, "search_max_buckets", search_max_buckets)
        if thread_pool_analyze_queue_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_queue_size", thread_pool_analyze_queue_size)
        if thread_pool_analyze_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_size", thread_pool_analyze_size)
        if thread_pool_force_merge_size is not None:
            pulumi.set(__self__, "thread_pool_force_merge_size", thread_pool_force_merge_size)
        if thread_pool_get_queue_size is not None:
            pulumi.set(__self__, "thread_pool_get_queue_size", thread_pool_get_queue_size)
        if thread_pool_get_size is not None:
            pulumi.set(__self__, "thread_pool_get_size", thread_pool_get_size)
        if thread_pool_index_queue_size is not None:
            pulumi.set(__self__, "thread_pool_index_queue_size", thread_pool_index_queue_size)
        if thread_pool_index_size is not None:
            pulumi.set(__self__, "thread_pool_index_size", thread_pool_index_size)
        if thread_pool_search_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_queue_size", thread_pool_search_queue_size)
        if thread_pool_search_size is not None:
            pulumi.set(__self__, "thread_pool_search_size", thread_pool_search_size)
        if thread_pool_search_throttled_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_queue_size", thread_pool_search_throttled_queue_size)
        if thread_pool_search_throttled_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_size", thread_pool_search_throttled_size)
        if thread_pool_write_queue_size is not None:
            pulumi.set(__self__, "thread_pool_write_queue_size", thread_pool_write_queue_size)
        if thread_pool_write_size is not None:
            pulumi.set(__self__, "thread_pool_write_size", thread_pool_write_size)

    @property
    @pulumi.getter(name="actionAutoCreateIndexEnabled")
    def action_auto_create_index_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_auto_create_index_enabled")

    @action_auto_create_index_enabled.setter
    def action_auto_create_index_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_auto_create_index_enabled", value)

    @property
    @pulumi.getter(name="actionDestructiveRequiresName")
    def action_destructive_requires_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_destructive_requires_name")

    @action_destructive_requires_name.setter
    def action_destructive_requires_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_destructive_requires_name", value)

    @property
    @pulumi.getter(name="clusterMaxShardsPerNode")
    def cluster_max_shards_per_node(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_max_shards_per_node")

    @cluster_max_shards_per_node.setter
    def cluster_max_shards_per_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_max_shards_per_node", value)

    @property
    @pulumi.getter(name="httpMaxContentLength")
    def http_max_content_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_max_content_length")

    @http_max_content_length.setter
    def http_max_content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_content_length", value)

    @property
    @pulumi.getter(name="httpMaxHeaderSize")
    def http_max_header_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_max_header_size")

    @http_max_header_size.setter
    def http_max_header_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_header_size", value)

    @property
    @pulumi.getter(name="httpMaxInitialLineLength")
    def http_max_initial_line_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_max_initial_line_length")

    @http_max_initial_line_length.setter
    def http_max_initial_line_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_initial_line_length", value)

    @property
    @pulumi.getter(name="indicesFielddataCacheSize")
    def indices_fielddata_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_fielddata_cache_size")

    @indices_fielddata_cache_size.setter
    def indices_fielddata_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_fielddata_cache_size", value)

    @property
    @pulumi.getter(name="indicesMemoryIndexBufferSize")
    def indices_memory_index_buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_memory_index_buffer_size")

    @indices_memory_index_buffer_size.setter
    def indices_memory_index_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_memory_index_buffer_size", value)

    @property
    @pulumi.getter(name="indicesQueriesCacheSize")
    def indices_queries_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_queries_cache_size")

    @indices_queries_cache_size.setter
    def indices_queries_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_queries_cache_size", value)

    @property
    @pulumi.getter(name="indicesQueryBoolMaxClauseCount")
    def indices_query_bool_max_clause_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_query_bool_max_clause_count")

    @indices_query_bool_max_clause_count.setter
    def indices_query_bool_max_clause_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_query_bool_max_clause_count", value)

    @property
    @pulumi.getter(name="reindexRemoteWhitelists")
    def reindex_remote_whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reindex_remote_whitelists")

    @reindex_remote_whitelists.setter
    def reindex_remote_whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reindex_remote_whitelists", value)

    @property
    @pulumi.getter(name="searchMaxBuckets")
    def search_max_buckets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_max_buckets")

    @search_max_buckets.setter
    def search_max_buckets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_max_buckets", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeQueueSize")
    def thread_pool_analyze_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_analyze_queue_size")

    @thread_pool_analyze_queue_size.setter
    def thread_pool_analyze_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_analyze_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeSize")
    def thread_pool_analyze_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_analyze_size")

    @thread_pool_analyze_size.setter
    def thread_pool_analyze_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_analyze_size", value)

    @property
    @pulumi.getter(name="threadPoolForceMergeSize")
    def thread_pool_force_merge_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_force_merge_size")

    @thread_pool_force_merge_size.setter
    def thread_pool_force_merge_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_force_merge_size", value)

    @property
    @pulumi.getter(name="threadPoolGetQueueSize")
    def thread_pool_get_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_get_queue_size")

    @thread_pool_get_queue_size.setter
    def thread_pool_get_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_get_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolGetSize")
    def thread_pool_get_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_get_size")

    @thread_pool_get_size.setter
    def thread_pool_get_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_get_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexQueueSize")
    def thread_pool_index_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_index_queue_size")

    @thread_pool_index_queue_size.setter
    def thread_pool_index_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_index_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexSize")
    def thread_pool_index_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_index_size")

    @thread_pool_index_size.setter
    def thread_pool_index_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_index_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchQueueSize")
    def thread_pool_search_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_queue_size")

    @thread_pool_search_queue_size.setter
    def thread_pool_search_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchSize")
    def thread_pool_search_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_size")

    @thread_pool_search_size.setter
    def thread_pool_search_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledQueueSize")
    def thread_pool_search_throttled_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_throttled_queue_size")

    @thread_pool_search_throttled_queue_size.setter
    def thread_pool_search_throttled_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_throttled_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledSize")
    def thread_pool_search_throttled_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_throttled_size")

    @thread_pool_search_throttled_size.setter
    def thread_pool_search_throttled_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_throttled_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteQueueSize")
    def thread_pool_write_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_write_queue_size")

    @thread_pool_write_queue_size.setter
    def thread_pool_write_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_write_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteSize")
    def thread_pool_write_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_write_size")

    @thread_pool_write_size.setter
    def thread_pool_write_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_write_size", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigIndexPatternArgs:
    def __init__(__self__, *,
                 max_index_count: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigIndexTemplateArgs:
    def __init__(__self__, *,
                 mapping_nested_objects_limit: Optional[pulumi.Input[str]] = None,
                 number_of_replicas: Optional[pulumi.Input[str]] = None,
                 number_of_shards: Optional[pulumi.Input[str]] = None):
        if mapping_nested_objects_limit is not None:
            pulumi.set(__self__, "mapping_nested_objects_limit", mapping_nested_objects_limit)
        if number_of_replicas is not None:
            pulumi.set(__self__, "number_of_replicas", number_of_replicas)
        if number_of_shards is not None:
            pulumi.set(__self__, "number_of_shards", number_of_shards)

    @property
    @pulumi.getter(name="mappingNestedObjectsLimit")
    def mapping_nested_objects_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mapping_nested_objects_limit")

    @mapping_nested_objects_limit.setter
    def mapping_nested_objects_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapping_nested_objects_limit", value)

    @property
    @pulumi.getter(name="numberOfReplicas")
    def number_of_replicas(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "number_of_replicas")

    @number_of_replicas.setter
    def number_of_replicas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number_of_replicas", value)

    @property
    @pulumi.getter(name="numberOfShards")
    def number_of_shards(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "number_of_shards")

    @number_of_shards.setter
    def number_of_shards(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number_of_shards", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigKibanaArgs:
    def __init__(__self__, *,
                 elasticsearch_request_timeout: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[str]] = None,
                 max_old_space_size: Optional[pulumi.Input[str]] = None):
        if elasticsearch_request_timeout is not None:
            pulumi.set(__self__, "elasticsearch_request_timeout", elasticsearch_request_timeout)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_old_space_size is not None:
            pulumi.set(__self__, "max_old_space_size", max_old_space_size)

    @property
    @pulumi.getter(name="elasticsearchRequestTimeout")
    def elasticsearch_request_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_request_timeout")

    @elasticsearch_request_timeout.setter
    def elasticsearch_request_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_request_timeout", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxOldSpaceSize")
    def max_old_space_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_old_space_size")

    @max_old_space_size.setter
    def max_old_space_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_old_space_size", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceGrafanaArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceGrafanaUserConfigArgs:
    def __init__(__self__, *,
                 alerting_enabled: Optional[pulumi.Input[str]] = None,
                 alerting_error_or_timeout: Optional[pulumi.Input[str]] = None,
                 alerting_nodata_or_nullvalues: Optional[pulumi.Input[str]] = None,
                 allow_embedding: Optional[pulumi.Input[str]] = None,
                 auth_basic_enabled: Optional[pulumi.Input[str]] = None,
                 auth_generic_oauth: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGenericOauthArgs']] = None,
                 auth_github: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGithubArgs']] = None,
                 auth_gitlab: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGitlabArgs']] = None,
                 auth_google: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGoogleArgs']] = None,
                 cookie_samesite: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 dashboards_versions_to_keep: Optional[pulumi.Input[str]] = None,
                 dataproxy_send_user_header: Optional[pulumi.Input[str]] = None,
                 dataproxy_timeout: Optional[pulumi.Input[str]] = None,
                 disable_gravatar: Optional[pulumi.Input[str]] = None,
                 editors_can_admin: Optional[pulumi.Input[str]] = None,
                 external_image_storage: Optional[pulumi.Input['ServiceGrafanaUserConfigExternalImageStorageArgs']] = None,
                 google_analytics_ua_id: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_enabled: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceGrafanaUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['ServiceGrafanaUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 smtp_server: Optional[pulumi.Input['ServiceGrafanaUserConfigSmtpServerArgs']] = None,
                 user_auto_assign_org: Optional[pulumi.Input[str]] = None,
                 user_auto_assign_org_role: Optional[pulumi.Input[str]] = None,
                 viewers_can_edit: Optional[pulumi.Input[str]] = None):
        if alerting_enabled is not None:
            pulumi.set(__self__, "alerting_enabled", alerting_enabled)
        if alerting_error_or_timeout is not None:
            pulumi.set(__self__, "alerting_error_or_timeout", alerting_error_or_timeout)
        if alerting_nodata_or_nullvalues is not None:
            pulumi.set(__self__, "alerting_nodata_or_nullvalues", alerting_nodata_or_nullvalues)
        if allow_embedding is not None:
            pulumi.set(__self__, "allow_embedding", allow_embedding)
        if auth_basic_enabled is not None:
            pulumi.set(__self__, "auth_basic_enabled", auth_basic_enabled)
        if auth_generic_oauth is not None:
            pulumi.set(__self__, "auth_generic_oauth", auth_generic_oauth)
        if auth_github is not None:
            pulumi.set(__self__, "auth_github", auth_github)
        if auth_gitlab is not None:
            pulumi.set(__self__, "auth_gitlab", auth_gitlab)
        if auth_google is not None:
            pulumi.set(__self__, "auth_google", auth_google)
        if cookie_samesite is not None:
            pulumi.set(__self__, "cookie_samesite", cookie_samesite)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if dashboards_versions_to_keep is not None:
            pulumi.set(__self__, "dashboards_versions_to_keep", dashboards_versions_to_keep)
        if dataproxy_send_user_header is not None:
            pulumi.set(__self__, "dataproxy_send_user_header", dataproxy_send_user_header)
        if dataproxy_timeout is not None:
            pulumi.set(__self__, "dataproxy_timeout", dataproxy_timeout)
        if disable_gravatar is not None:
            pulumi.set(__self__, "disable_gravatar", disable_gravatar)
        if editors_can_admin is not None:
            pulumi.set(__self__, "editors_can_admin", editors_can_admin)
        if external_image_storage is not None:
            pulumi.set(__self__, "external_image_storage", external_image_storage)
        if google_analytics_ua_id is not None:
            pulumi.set(__self__, "google_analytics_ua_id", google_analytics_ua_id)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if smtp_server is not None:
            pulumi.set(__self__, "smtp_server", smtp_server)
        if user_auto_assign_org is not None:
            pulumi.set(__self__, "user_auto_assign_org", user_auto_assign_org)
        if user_auto_assign_org_role is not None:
            pulumi.set(__self__, "user_auto_assign_org_role", user_auto_assign_org_role)
        if viewers_can_edit is not None:
            pulumi.set(__self__, "viewers_can_edit", viewers_can_edit)

    @property
    @pulumi.getter(name="alertingEnabled")
    def alerting_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alerting_enabled")

    @alerting_enabled.setter
    def alerting_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_enabled", value)

    @property
    @pulumi.getter(name="alertingErrorOrTimeout")
    def alerting_error_or_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alerting_error_or_timeout")

    @alerting_error_or_timeout.setter
    def alerting_error_or_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_error_or_timeout", value)

    @property
    @pulumi.getter(name="alertingNodataOrNullvalues")
    def alerting_nodata_or_nullvalues(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alerting_nodata_or_nullvalues")

    @alerting_nodata_or_nullvalues.setter
    def alerting_nodata_or_nullvalues(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_nodata_or_nullvalues", value)

    @property
    @pulumi.getter(name="allowEmbedding")
    def allow_embedding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_embedding")

    @allow_embedding.setter
    def allow_embedding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_embedding", value)

    @property
    @pulumi.getter(name="authBasicEnabled")
    def auth_basic_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_basic_enabled")

    @auth_basic_enabled.setter
    def auth_basic_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_basic_enabled", value)

    @property
    @pulumi.getter(name="authGenericOauth")
    def auth_generic_oauth(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGenericOauthArgs']]:
        return pulumi.get(self, "auth_generic_oauth")

    @auth_generic_oauth.setter
    def auth_generic_oauth(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGenericOauthArgs']]):
        pulumi.set(self, "auth_generic_oauth", value)

    @property
    @pulumi.getter(name="authGithub")
    def auth_github(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGithubArgs']]:
        return pulumi.get(self, "auth_github")

    @auth_github.setter
    def auth_github(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGithubArgs']]):
        pulumi.set(self, "auth_github", value)

    @property
    @pulumi.getter(name="authGitlab")
    def auth_gitlab(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGitlabArgs']]:
        return pulumi.get(self, "auth_gitlab")

    @auth_gitlab.setter
    def auth_gitlab(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGitlabArgs']]):
        pulumi.set(self, "auth_gitlab", value)

    @property
    @pulumi.getter(name="authGoogle")
    def auth_google(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGoogleArgs']]:
        return pulumi.get(self, "auth_google")

    @auth_google.setter
    def auth_google(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGoogleArgs']]):
        pulumi.set(self, "auth_google", value)

    @property
    @pulumi.getter(name="cookieSamesite")
    def cookie_samesite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie_samesite")

    @cookie_samesite.setter
    def cookie_samesite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_samesite", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="dashboardsVersionsToKeep")
    def dashboards_versions_to_keep(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dashboards_versions_to_keep")

    @dashboards_versions_to_keep.setter
    def dashboards_versions_to_keep(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboards_versions_to_keep", value)

    @property
    @pulumi.getter(name="dataproxySendUserHeader")
    def dataproxy_send_user_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataproxy_send_user_header")

    @dataproxy_send_user_header.setter
    def dataproxy_send_user_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproxy_send_user_header", value)

    @property
    @pulumi.getter(name="dataproxyTimeout")
    def dataproxy_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataproxy_timeout")

    @dataproxy_timeout.setter
    def dataproxy_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproxy_timeout", value)

    @property
    @pulumi.getter(name="disableGravatar")
    def disable_gravatar(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_gravatar")

    @disable_gravatar.setter
    def disable_gravatar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_gravatar", value)

    @property
    @pulumi.getter(name="editorsCanAdmin")
    def editors_can_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "editors_can_admin")

    @editors_can_admin.setter
    def editors_can_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "editors_can_admin", value)

    @property
    @pulumi.getter(name="externalImageStorage")
    def external_image_storage(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigExternalImageStorageArgs']]:
        return pulumi.get(self, "external_image_storage")

    @external_image_storage.setter
    def external_image_storage(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigExternalImageStorageArgs']]):
        pulumi.set(self, "external_image_storage", value)

    @property
    @pulumi.getter(name="googleAnalyticsUaId")
    def google_analytics_ua_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "google_analytics_ua_id")

    @google_analytics_ua_id.setter
    def google_analytics_ua_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_analytics_ua_id", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="smtpServer")
    def smtp_server(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigSmtpServerArgs']]:
        return pulumi.get(self, "smtp_server")

    @smtp_server.setter
    def smtp_server(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigSmtpServerArgs']]):
        pulumi.set(self, "smtp_server", value)

    @property
    @pulumi.getter(name="userAutoAssignOrg")
    def user_auto_assign_org(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_auto_assign_org")

    @user_auto_assign_org.setter
    def user_auto_assign_org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_auto_assign_org", value)

    @property
    @pulumi.getter(name="userAutoAssignOrgRole")
    def user_auto_assign_org_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_auto_assign_org_role")

    @user_auto_assign_org_role.setter
    def user_auto_assign_org_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_auto_assign_org_role", value)

    @property
    @pulumi.getter(name="viewersCanEdit")
    def viewers_can_edit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "viewers_can_edit")

    @viewers_can_edit.setter
    def viewers_can_edit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "viewers_can_edit", value)


@pulumi.input_type
class ServiceGrafanaUserConfigAuthGenericOauthArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_organizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class ServiceGrafanaUserConfigAuthGithubArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_organizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 team_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if team_ids is not None:
            pulumi.set(__self__, "team_ids", team_ids)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="teamIds")
    def team_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "team_ids")

    @team_ids.setter
    def team_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "team_ids", value)


@pulumi.input_type
class ServiceGrafanaUserConfigAuthGitlabArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_groups is not None:
            pulumi.set(__self__, "allowed_groups", allowed_groups)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedGroups")
    def allowed_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_groups")

    @allowed_groups.setter
    def allowed_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_groups", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class ServiceGrafanaUserConfigAuthGoogleArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class ServiceGrafanaUserConfigExternalImageStorageArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket_url: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket_url is not None:
            pulumi.set(__self__, "bucket_url", bucket_url)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ServiceGrafanaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[pulumi.Input[str]] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class ServiceGrafanaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[pulumi.Input[str]] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class ServiceGrafanaUserConfigSmtpServerArgs:
    def __init__(__self__, *,
                 from_address: Optional[pulumi.Input[str]] = None,
                 from_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 skip_verify: Optional[pulumi.Input[str]] = None,
                 starttls_policy: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if from_address is not None:
            pulumi.set(__self__, "from_address", from_address)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if starttls_policy is not None:
            pulumi.set(__self__, "starttls_policy", starttls_policy)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter(name="starttlsPolicy")
    def starttls_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "starttls_policy")

    @starttls_policy.setter
    def starttls_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starttls_policy", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ServiceInfluxdbArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None):
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)


@pulumi.input_type
class ServiceInfluxdbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 influxdb: Optional[pulumi.Input['ServiceInfluxdbUserConfigInfluxdbArgs']] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_access: Optional[pulumi.Input['ServiceInfluxdbUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['ServiceInfluxdbUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input['ServiceInfluxdbUserConfigInfluxdbArgs']]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input['ServiceInfluxdbUserConfigInfluxdbArgs']]):
        pulumi.set(self, "influxdb", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceInfluxdbUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceInfluxdbUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceInfluxdbUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceInfluxdbUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceInfluxdbUserConfigInfluxdbArgs:
    def __init__(__self__, *,
                 log_queries_after: Optional[pulumi.Input[str]] = None,
                 max_row_limit: Optional[pulumi.Input[str]] = None,
                 max_select_buckets: Optional[pulumi.Input[str]] = None,
                 max_select_point: Optional[pulumi.Input[str]] = None,
                 query_timeout: Optional[pulumi.Input[str]] = None):
        if log_queries_after is not None:
            pulumi.set(__self__, "log_queries_after", log_queries_after)
        if max_row_limit is not None:
            pulumi.set(__self__, "max_row_limit", max_row_limit)
        if max_select_buckets is not None:
            pulumi.set(__self__, "max_select_buckets", max_select_buckets)
        if max_select_point is not None:
            pulumi.set(__self__, "max_select_point", max_select_point)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)

    @property
    @pulumi.getter(name="logQueriesAfter")
    def log_queries_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_queries_after")

    @log_queries_after.setter
    def log_queries_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_queries_after", value)

    @property
    @pulumi.getter(name="maxRowLimit")
    def max_row_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_row_limit")

    @max_row_limit.setter
    def max_row_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_row_limit", value)

    @property
    @pulumi.getter(name="maxSelectBuckets")
    def max_select_buckets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_select_buckets")

    @max_select_buckets.setter
    def max_select_buckets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_select_buckets", value)

    @property
    @pulumi.getter(name="maxSelectPoint")
    def max_select_point(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_select_point")

    @max_select_point.setter
    def max_select_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_select_point", value)

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_timeout")

    @query_timeout.setter
    def query_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_timeout", value)


@pulumi.input_type
class ServiceInfluxdbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[pulumi.Input[str]] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class ServiceInfluxdbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[pulumi.Input[str]] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class ServiceIntegrationDashboardUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceIntegrationDatadogUserConfigArgs:
    def __init__(__self__, *,
                 exclude_consumer_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_consumer_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kafka_custom_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if exclude_consumer_groups is not None:
            pulumi.set(__self__, "exclude_consumer_groups", exclude_consumer_groups)
        if exclude_topics is not None:
            pulumi.set(__self__, "exclude_topics", exclude_topics)
        if include_consumer_groups is not None:
            pulumi.set(__self__, "include_consumer_groups", include_consumer_groups)
        if include_topics is not None:
            pulumi.set(__self__, "include_topics", include_topics)
        if kafka_custom_metrics is not None:
            pulumi.set(__self__, "kafka_custom_metrics", kafka_custom_metrics)

    @property
    @pulumi.getter(name="excludeConsumerGroups")
    def exclude_consumer_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_consumer_groups")

    @exclude_consumer_groups.setter
    def exclude_consumer_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_consumer_groups", value)

    @property
    @pulumi.getter(name="excludeTopics")
    def exclude_topics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_topics")

    @exclude_topics.setter
    def exclude_topics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_topics", value)

    @property
    @pulumi.getter(name="includeConsumerGroups")
    def include_consumer_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "include_consumer_groups")

    @include_consumer_groups.setter
    def include_consumer_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_consumer_groups", value)

    @property
    @pulumi.getter(name="includeTopics")
    def include_topics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "include_topics")

    @include_topics.setter
    def include_topics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_topics", value)

    @property
    @pulumi.getter(name="kafkaCustomMetrics")
    def kafka_custom_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kafka_custom_metrics")

    @kafka_custom_metrics.setter
    def kafka_custom_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kafka_custom_metrics", value)


@pulumi.input_type
class ServiceIntegrationEndpointDatadogUserConfigArgs:
    def __init__(__self__, *,
                 datadog_api_key: Optional[pulumi.Input[str]] = None,
                 disable_consumer_stats: Optional[pulumi.Input[str]] = None,
                 max_partition_contexts: Optional[pulumi.Input[str]] = None,
                 site: Optional[pulumi.Input[str]] = None):
        if datadog_api_key is not None:
            pulumi.set(__self__, "datadog_api_key", datadog_api_key)
        if disable_consumer_stats is not None:
            pulumi.set(__self__, "disable_consumer_stats", disable_consumer_stats)
        if max_partition_contexts is not None:
            pulumi.set(__self__, "max_partition_contexts", max_partition_contexts)
        if site is not None:
            pulumi.set(__self__, "site", site)

    @property
    @pulumi.getter(name="datadogApiKey")
    def datadog_api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datadog_api_key")

    @datadog_api_key.setter
    def datadog_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datadog_api_key", value)

    @property
    @pulumi.getter(name="disableConsumerStats")
    def disable_consumer_stats(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_consumer_stats")

    @disable_consumer_stats.setter
    def disable_consumer_stats(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_consumer_stats", value)

    @property
    @pulumi.getter(name="maxPartitionContexts")
    def max_partition_contexts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_partition_contexts")

    @max_partition_contexts.setter
    def max_partition_contexts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_partition_contexts", value)

    @property
    @pulumi.getter
    def site(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site", value)


@pulumi.input_type
class ServiceIntegrationEndpointExternalAwsCloudwatchLogsUserConfigArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 log_group_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if log_group_name is not None:
            pulumi.set(__self__, "log_group_name", log_group_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_group_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ServiceIntegrationEndpointExternalElasticsearchLogsUserConfigArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input[str]] = None,
                 index_days_max: Optional[pulumi.Input[str]] = None,
                 index_prefix: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if index_days_max is not None:
            pulumi.set(__self__, "index_days_max", index_days_max)
        if index_prefix is not None:
            pulumi.set(__self__, "index_prefix", index_prefix)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="indexDaysMax")
    def index_days_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_days_max")

    @index_days_max.setter
    def index_days_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_days_max", value)

    @property
    @pulumi.getter(name="indexPrefix")
    def index_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_prefix")

    @index_prefix.setter
    def index_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_prefix", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ServiceIntegrationEndpointExternalGoogleCloudLoggingUserConfigArgs:
    def __init__(__self__, *,
                 log_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 service_account_credentials: Optional[pulumi.Input[str]] = None):
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if service_account_credentials is not None:
            pulumi.set(__self__, "service_account_credentials", service_account_credentials)

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_id")

    @log_id.setter
    def log_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="serviceAccountCredentials")
    def service_account_credentials(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_credentials")

    @service_account_credentials.setter
    def service_account_credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_credentials", value)


@pulumi.input_type
class ServiceIntegrationEndpointExternalKafkaUserConfigArgs:
    def __init__(__self__, *,
                 bootstrap_servers: Optional[pulumi.Input[str]] = None,
                 sasl_mechanism: Optional[pulumi.Input[str]] = None,
                 sasl_plain_password: Optional[pulumi.Input[str]] = None,
                 sasl_plain_username: Optional[pulumi.Input[str]] = None,
                 security_protocol: Optional[pulumi.Input[str]] = None,
                 ssl_ca_cert: Optional[pulumi.Input[str]] = None,
                 ssl_client_cert: Optional[pulumi.Input[str]] = None,
                 ssl_client_key: Optional[pulumi.Input[str]] = None,
                 ssl_endpoint_identification_algorithm: Optional[pulumi.Input[str]] = None):
        if bootstrap_servers is not None:
            pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if sasl_plain_password is not None:
            pulumi.set(__self__, "sasl_plain_password", sasl_plain_password)
        if sasl_plain_username is not None:
            pulumi.set(__self__, "sasl_plain_username", sasl_plain_username)
        if security_protocol is not None:
            pulumi.set(__self__, "security_protocol", security_protocol)
        if ssl_ca_cert is not None:
            pulumi.set(__self__, "ssl_ca_cert", ssl_ca_cert)
        if ssl_client_cert is not None:
            pulumi.set(__self__, "ssl_client_cert", ssl_client_cert)
        if ssl_client_key is not None:
            pulumi.set(__self__, "ssl_client_key", ssl_client_key)
        if ssl_endpoint_identification_algorithm is not None:
            pulumi.set(__self__, "ssl_endpoint_identification_algorithm", ssl_endpoint_identification_algorithm)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bootstrap_servers")

    @bootstrap_servers.setter
    def bootstrap_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_servers", value)

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sasl_mechanism")

    @sasl_mechanism.setter
    def sasl_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl_mechanism", value)

    @property
    @pulumi.getter(name="saslPlainPassword")
    def sasl_plain_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sasl_plain_password")

    @sasl_plain_password.setter
    def sasl_plain_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl_plain_password", value)

    @property
    @pulumi.getter(name="saslPlainUsername")
    def sasl_plain_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sasl_plain_username")

    @sasl_plain_username.setter
    def sasl_plain_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl_plain_username", value)

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_protocol")

    @security_protocol.setter
    def security_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_protocol", value)

    @property
    @pulumi.getter(name="sslCaCert")
    def ssl_ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_ca_cert")

    @ssl_ca_cert.setter
    def ssl_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ca_cert", value)

    @property
    @pulumi.getter(name="sslClientCert")
    def ssl_client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_cert")

    @ssl_client_cert.setter
    def ssl_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_cert", value)

    @property
    @pulumi.getter(name="sslClientKey")
    def ssl_client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_key")

    @ssl_client_key.setter
    def ssl_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_key", value)

    @property
    @pulumi.getter(name="sslEndpointIdentificationAlgorithm")
    def ssl_endpoint_identification_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_endpoint_identification_algorithm")

    @ssl_endpoint_identification_algorithm.setter
    def ssl_endpoint_identification_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_endpoint_identification_algorithm", value)


@pulumi.input_type
class ServiceIntegrationEndpointExternalSchemaRegistryUserConfigArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 basic_auth_password: Optional[pulumi.Input[str]] = None,
                 basic_auth_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ServiceIntegrationEndpointJolokiaUserConfigArgs:
    def __init__(__self__, *,
                 basic_auth_password: Optional[pulumi.Input[str]] = None,
                 basic_auth_username: Optional[pulumi.Input[str]] = None):
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_username", value)


@pulumi.input_type
class ServiceIntegrationEndpointPrometheusUserConfigArgs:
    def __init__(__self__, *,
                 basic_auth_password: Optional[pulumi.Input[str]] = None,
                 basic_auth_username: Optional[pulumi.Input[str]] = None):
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_username", value)


@pulumi.input_type
class ServiceIntegrationEndpointRsyslogUserConfigArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 logline: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 sd: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[str]] = None):
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if logline is not None:
            pulumi.set(__self__, "logline", logline)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if sd is not None:
            pulumi.set(__self__, "sd", sd)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def logline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logline")

    @logline.setter
    def logline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logline", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sd")

    @sd.setter
    def sd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sd", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceIntegrationEndpointSignalfxUserConfigArgs:
    def __init__(__self__, *,
                 enabled_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 signalfx_api_key: Optional[pulumi.Input[str]] = None,
                 signalfx_realm: Optional[pulumi.Input[str]] = None):
        if enabled_metrics is not None:
            pulumi.set(__self__, "enabled_metrics", enabled_metrics)
        if signalfx_api_key is not None:
            pulumi.set(__self__, "signalfx_api_key", signalfx_api_key)
        if signalfx_realm is not None:
            pulumi.set(__self__, "signalfx_realm", signalfx_realm)

    @property
    @pulumi.getter(name="enabledMetrics")
    def enabled_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enabled_metrics")

    @enabled_metrics.setter
    def enabled_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enabled_metrics", value)

    @property
    @pulumi.getter(name="signalfxApiKey")
    def signalfx_api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signalfx_api_key")

    @signalfx_api_key.setter
    def signalfx_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signalfx_api_key", value)

    @property
    @pulumi.getter(name="signalfxRealm")
    def signalfx_realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signalfx_realm")

    @signalfx_realm.setter
    def signalfx_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signalfx_realm", value)


@pulumi.input_type
class ServiceIntegrationExternalAwsCloudwatchLogsUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceIntegrationExternalElasticsearchLogsUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceIntegrationExternalGoogleCloudLoggingUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceIntegrationKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input['ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input['ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input['ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']]):
        pulumi.set(self, "kafka_connect", value)


@pulumi.input_type
class ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 config_storage_topic: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 offset_storage_topic: Optional[pulumi.Input[str]] = None,
                 status_storage_topic: Optional[pulumi.Input[str]] = None):
        if config_storage_topic is not None:
            pulumi.set(__self__, "config_storage_topic", config_storage_topic)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if offset_storage_topic is not None:
            pulumi.set(__self__, "offset_storage_topic", offset_storage_topic)
        if status_storage_topic is not None:
            pulumi.set(__self__, "status_storage_topic", status_storage_topic)

    @property
    @pulumi.getter(name="configStorageTopic")
    def config_storage_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_storage_topic")

    @config_storage_topic.setter
    def config_storage_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_storage_topic", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="offsetStorageTopic")
    def offset_storage_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_storage_topic")

    @offset_storage_topic.setter
    def offset_storage_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_storage_topic", value)

    @property
    @pulumi.getter(name="statusStorageTopic")
    def status_storage_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_storage_topic")

    @status_storage_topic.setter
    def status_storage_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_storage_topic", value)


@pulumi.input_type
class ServiceIntegrationKafkaLogsUserConfigArgs:
    def __init__(__self__, *,
                 kafka_topic: Optional[pulumi.Input[str]] = None):
        if kafka_topic is not None:
            pulumi.set(__self__, "kafka_topic", kafka_topic)

    @property
    @pulumi.getter(name="kafkaTopic")
    def kafka_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_topic")

    @kafka_topic.setter
    def kafka_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_topic", value)


@pulumi.input_type
class ServiceIntegrationKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 cluster_alias: Optional[pulumi.Input[str]] = None):
        if cluster_alias is not None:
            pulumi.set(__self__, "cluster_alias", cluster_alias)

    @property
    @pulumi.getter(name="clusterAlias")
    def cluster_alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_alias")

    @cluster_alias.setter
    def cluster_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_alias", value)


@pulumi.input_type
class ServiceIntegrationLogsUserConfigArgs:
    def __init__(__self__, *,
                 elasticsearch_index_days_max: Optional[pulumi.Input[str]] = None,
                 elasticsearch_index_prefix: Optional[pulumi.Input[str]] = None):
        if elasticsearch_index_days_max is not None:
            pulumi.set(__self__, "elasticsearch_index_days_max", elasticsearch_index_days_max)
        if elasticsearch_index_prefix is not None:
            pulumi.set(__self__, "elasticsearch_index_prefix", elasticsearch_index_prefix)

    @property
    @pulumi.getter(name="elasticsearchIndexDaysMax")
    def elasticsearch_index_days_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_index_days_max")

    @elasticsearch_index_days_max.setter
    def elasticsearch_index_days_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_index_days_max", value)

    @property
    @pulumi.getter(name="elasticsearchIndexPrefix")
    def elasticsearch_index_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_index_prefix")

    @elasticsearch_index_prefix.setter
    def elasticsearch_index_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_index_prefix", value)


@pulumi.input_type
class ServiceIntegrationM3aggregatorUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceIntegrationM3coordinatorUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceIntegrationMetricsUserConfigArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input[str]] = None,
                 retention_days: Optional[pulumi.Input[str]] = None,
                 ro_username: Optional[pulumi.Input[str]] = None,
                 source_mysql: Optional[pulumi.Input['ServiceIntegrationMetricsUserConfigSourceMysqlArgs']] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if database is not None:
            pulumi.set(__self__, "database", database)
        if retention_days is not None:
            pulumi.set(__self__, "retention_days", retention_days)
        if ro_username is not None:
            pulumi.set(__self__, "ro_username", ro_username)
        if source_mysql is not None:
            pulumi.set(__self__, "source_mysql", source_mysql)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention_days", value)

    @property
    @pulumi.getter(name="roUsername")
    def ro_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ro_username")

    @ro_username.setter
    def ro_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ro_username", value)

    @property
    @pulumi.getter(name="sourceMysql")
    def source_mysql(self) -> Optional[pulumi.Input['ServiceIntegrationMetricsUserConfigSourceMysqlArgs']]:
        return pulumi.get(self, "source_mysql")

    @source_mysql.setter
    def source_mysql(self, value: Optional[pulumi.Input['ServiceIntegrationMetricsUserConfigSourceMysqlArgs']]):
        pulumi.set(self, "source_mysql", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ServiceIntegrationMetricsUserConfigSourceMysqlArgs:
    def __init__(__self__, *,
                 telegraf: Optional[pulumi.Input['ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs']] = None):
        if telegraf is not None:
            pulumi.set(__self__, "telegraf", telegraf)

    @property
    @pulumi.getter
    def telegraf(self) -> Optional[pulumi.Input['ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs']]:
        return pulumi.get(self, "telegraf")

    @telegraf.setter
    def telegraf(self, value: Optional[pulumi.Input['ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs']]):
        pulumi.set(self, "telegraf", value)


@pulumi.input_type
class ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs:
    def __init__(__self__, *,
                 gather_event_waits: Optional[pulumi.Input[str]] = None,
                 gather_file_events_stats: Optional[pulumi.Input[str]] = None,
                 gather_index_io_waits: Optional[pulumi.Input[str]] = None,
                 gather_info_schema_auto_inc: Optional[pulumi.Input[str]] = None,
                 gather_innodb_metrics: Optional[pulumi.Input[str]] = None,
                 gather_perf_events_statements: Optional[pulumi.Input[str]] = None,
                 gather_process_list: Optional[pulumi.Input[str]] = None,
                 gather_slave_status: Optional[pulumi.Input[str]] = None,
                 gather_table_io_waits: Optional[pulumi.Input[str]] = None,
                 gather_table_lock_waits: Optional[pulumi.Input[str]] = None,
                 gather_table_schema: Optional[pulumi.Input[str]] = None,
                 perf_events_statements_digest_text_limit: Optional[pulumi.Input[str]] = None,
                 perf_events_statements_limit: Optional[pulumi.Input[str]] = None,
                 perf_events_statements_time_limit: Optional[pulumi.Input[str]] = None):
        if gather_event_waits is not None:
            pulumi.set(__self__, "gather_event_waits", gather_event_waits)
        if gather_file_events_stats is not None:
            pulumi.set(__self__, "gather_file_events_stats", gather_file_events_stats)
        if gather_index_io_waits is not None:
            pulumi.set(__self__, "gather_index_io_waits", gather_index_io_waits)
        if gather_info_schema_auto_inc is not None:
            pulumi.set(__self__, "gather_info_schema_auto_inc", gather_info_schema_auto_inc)
        if gather_innodb_metrics is not None:
            pulumi.set(__self__, "gather_innodb_metrics", gather_innodb_metrics)
        if gather_perf_events_statements is not None:
            pulumi.set(__self__, "gather_perf_events_statements", gather_perf_events_statements)
        if gather_process_list is not None:
            pulumi.set(__self__, "gather_process_list", gather_process_list)
        if gather_slave_status is not None:
            pulumi.set(__self__, "gather_slave_status", gather_slave_status)
        if gather_table_io_waits is not None:
            pulumi.set(__self__, "gather_table_io_waits", gather_table_io_waits)
        if gather_table_lock_waits is not None:
            pulumi.set(__self__, "gather_table_lock_waits", gather_table_lock_waits)
        if gather_table_schema is not None:
            pulumi.set(__self__, "gather_table_schema", gather_table_schema)
        if perf_events_statements_digest_text_limit is not None:
            pulumi.set(__self__, "perf_events_statements_digest_text_limit", perf_events_statements_digest_text_limit)
        if perf_events_statements_limit is not None:
            pulumi.set(__self__, "perf_events_statements_limit", perf_events_statements_limit)
        if perf_events_statements_time_limit is not None:
            pulumi.set(__self__, "perf_events_statements_time_limit", perf_events_statements_time_limit)

    @property
    @pulumi.getter(name="gatherEventWaits")
    def gather_event_waits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_event_waits")

    @gather_event_waits.setter
    def gather_event_waits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_event_waits", value)

    @property
    @pulumi.getter(name="gatherFileEventsStats")
    def gather_file_events_stats(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_file_events_stats")

    @gather_file_events_stats.setter
    def gather_file_events_stats(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_file_events_stats", value)

    @property
    @pulumi.getter(name="gatherIndexIoWaits")
    def gather_index_io_waits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_index_io_waits")

    @gather_index_io_waits.setter
    def gather_index_io_waits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_index_io_waits", value)

    @property
    @pulumi.getter(name="gatherInfoSchemaAutoInc")
    def gather_info_schema_auto_inc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_info_schema_auto_inc")

    @gather_info_schema_auto_inc.setter
    def gather_info_schema_auto_inc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_info_schema_auto_inc", value)

    @property
    @pulumi.getter(name="gatherInnodbMetrics")
    def gather_innodb_metrics(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_innodb_metrics")

    @gather_innodb_metrics.setter
    def gather_innodb_metrics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_innodb_metrics", value)

    @property
    @pulumi.getter(name="gatherPerfEventsStatements")
    def gather_perf_events_statements(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_perf_events_statements")

    @gather_perf_events_statements.setter
    def gather_perf_events_statements(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_perf_events_statements", value)

    @property
    @pulumi.getter(name="gatherProcessList")
    def gather_process_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_process_list")

    @gather_process_list.setter
    def gather_process_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_process_list", value)

    @property
    @pulumi.getter(name="gatherSlaveStatus")
    def gather_slave_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_slave_status")

    @gather_slave_status.setter
    def gather_slave_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_slave_status", value)

    @property
    @pulumi.getter(name="gatherTableIoWaits")
    def gather_table_io_waits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_table_io_waits")

    @gather_table_io_waits.setter
    def gather_table_io_waits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_table_io_waits", value)

    @property
    @pulumi.getter(name="gatherTableLockWaits")
    def gather_table_lock_waits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_table_lock_waits")

    @gather_table_lock_waits.setter
    def gather_table_lock_waits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_table_lock_waits", value)

    @property
    @pulumi.getter(name="gatherTableSchema")
    def gather_table_schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_table_schema")

    @gather_table_schema.setter
    def gather_table_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_table_schema", value)

    @property
    @pulumi.getter(name="perfEventsStatementsDigestTextLimit")
    def perf_events_statements_digest_text_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "perf_events_statements_digest_text_limit")

    @perf_events_statements_digest_text_limit.setter
    def perf_events_statements_digest_text_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_events_statements_digest_text_limit", value)

    @property
    @pulumi.getter(name="perfEventsStatementsLimit")
    def perf_events_statements_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "perf_events_statements_limit")

    @perf_events_statements_limit.setter
    def perf_events_statements_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_events_statements_limit", value)

    @property
    @pulumi.getter(name="perfEventsStatementsTimeLimit")
    def perf_events_statements_time_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "perf_events_statements_time_limit")

    @perf_events_statements_time_limit.setter
    def perf_events_statements_time_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_events_statements_time_limit", value)


@pulumi.input_type
class ServiceIntegrationMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 mirrormaker_whitelist: Optional[pulumi.Input[str]] = None):
        if mirrormaker_whitelist is not None:
            pulumi.set(__self__, "mirrormaker_whitelist", mirrormaker_whitelist)

    @property
    @pulumi.getter(name="mirrormakerWhitelist")
    def mirrormaker_whitelist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mirrormaker_whitelist")

    @mirrormaker_whitelist.setter
    def mirrormaker_whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mirrormaker_whitelist", value)


@pulumi.input_type
class ServiceIntegrationPrometheusUserConfigArgs:
    def __init__(__self__, *,
                 source_mysql: Optional[pulumi.Input['ServiceIntegrationPrometheusUserConfigSourceMysqlArgs']] = None):
        if source_mysql is not None:
            pulumi.set(__self__, "source_mysql", source_mysql)

    @property
    @pulumi.getter(name="sourceMysql")
    def source_mysql(self) -> Optional[pulumi.Input['ServiceIntegrationPrometheusUserConfigSourceMysqlArgs']]:
        return pulumi.get(self, "source_mysql")

    @source_mysql.setter
    def source_mysql(self, value: Optional[pulumi.Input['ServiceIntegrationPrometheusUserConfigSourceMysqlArgs']]):
        pulumi.set(self, "source_mysql", value)


@pulumi.input_type
class ServiceIntegrationPrometheusUserConfigSourceMysqlArgs:
    def __init__(__self__, *,
                 telegraf: Optional[pulumi.Input['ServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs']] = None):
        if telegraf is not None:
            pulumi.set(__self__, "telegraf", telegraf)

    @property
    @pulumi.getter
    def telegraf(self) -> Optional[pulumi.Input['ServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs']]:
        return pulumi.get(self, "telegraf")

    @telegraf.setter
    def telegraf(self, value: Optional[pulumi.Input['ServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs']]):
        pulumi.set(self, "telegraf", value)


@pulumi.input_type
class ServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs:
    def __init__(__self__, *,
                 gather_event_waits: Optional[pulumi.Input[str]] = None,
                 gather_file_events_stats: Optional[pulumi.Input[str]] = None,
                 gather_index_io_waits: Optional[pulumi.Input[str]] = None,
                 gather_info_schema_auto_inc: Optional[pulumi.Input[str]] = None,
                 gather_innodb_metrics: Optional[pulumi.Input[str]] = None,
                 gather_perf_events_statements: Optional[pulumi.Input[str]] = None,
                 gather_process_list: Optional[pulumi.Input[str]] = None,
                 gather_slave_status: Optional[pulumi.Input[str]] = None,
                 gather_table_io_waits: Optional[pulumi.Input[str]] = None,
                 gather_table_lock_waits: Optional[pulumi.Input[str]] = None,
                 gather_table_schema: Optional[pulumi.Input[str]] = None,
                 perf_events_statements_digest_text_limit: Optional[pulumi.Input[str]] = None,
                 perf_events_statements_limit: Optional[pulumi.Input[str]] = None,
                 perf_events_statements_time_limit: Optional[pulumi.Input[str]] = None):
        if gather_event_waits is not None:
            pulumi.set(__self__, "gather_event_waits", gather_event_waits)
        if gather_file_events_stats is not None:
            pulumi.set(__self__, "gather_file_events_stats", gather_file_events_stats)
        if gather_index_io_waits is not None:
            pulumi.set(__self__, "gather_index_io_waits", gather_index_io_waits)
        if gather_info_schema_auto_inc is not None:
            pulumi.set(__self__, "gather_info_schema_auto_inc", gather_info_schema_auto_inc)
        if gather_innodb_metrics is not None:
            pulumi.set(__self__, "gather_innodb_metrics", gather_innodb_metrics)
        if gather_perf_events_statements is not None:
            pulumi.set(__self__, "gather_perf_events_statements", gather_perf_events_statements)
        if gather_process_list is not None:
            pulumi.set(__self__, "gather_process_list", gather_process_list)
        if gather_slave_status is not None:
            pulumi.set(__self__, "gather_slave_status", gather_slave_status)
        if gather_table_io_waits is not None:
            pulumi.set(__self__, "gather_table_io_waits", gather_table_io_waits)
        if gather_table_lock_waits is not None:
            pulumi.set(__self__, "gather_table_lock_waits", gather_table_lock_waits)
        if gather_table_schema is not None:
            pulumi.set(__self__, "gather_table_schema", gather_table_schema)
        if perf_events_statements_digest_text_limit is not None:
            pulumi.set(__self__, "perf_events_statements_digest_text_limit", perf_events_statements_digest_text_limit)
        if perf_events_statements_limit is not None:
            pulumi.set(__self__, "perf_events_statements_limit", perf_events_statements_limit)
        if perf_events_statements_time_limit is not None:
            pulumi.set(__self__, "perf_events_statements_time_limit", perf_events_statements_time_limit)

    @property
    @pulumi.getter(name="gatherEventWaits")
    def gather_event_waits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_event_waits")

    @gather_event_waits.setter
    def gather_event_waits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_event_waits", value)

    @property
    @pulumi.getter(name="gatherFileEventsStats")
    def gather_file_events_stats(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_file_events_stats")

    @gather_file_events_stats.setter
    def gather_file_events_stats(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_file_events_stats", value)

    @property
    @pulumi.getter(name="gatherIndexIoWaits")
    def gather_index_io_waits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_index_io_waits")

    @gather_index_io_waits.setter
    def gather_index_io_waits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_index_io_waits", value)

    @property
    @pulumi.getter(name="gatherInfoSchemaAutoInc")
    def gather_info_schema_auto_inc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_info_schema_auto_inc")

    @gather_info_schema_auto_inc.setter
    def gather_info_schema_auto_inc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_info_schema_auto_inc", value)

    @property
    @pulumi.getter(name="gatherInnodbMetrics")
    def gather_innodb_metrics(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_innodb_metrics")

    @gather_innodb_metrics.setter
    def gather_innodb_metrics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_innodb_metrics", value)

    @property
    @pulumi.getter(name="gatherPerfEventsStatements")
    def gather_perf_events_statements(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_perf_events_statements")

    @gather_perf_events_statements.setter
    def gather_perf_events_statements(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_perf_events_statements", value)

    @property
    @pulumi.getter(name="gatherProcessList")
    def gather_process_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_process_list")

    @gather_process_list.setter
    def gather_process_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_process_list", value)

    @property
    @pulumi.getter(name="gatherSlaveStatus")
    def gather_slave_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_slave_status")

    @gather_slave_status.setter
    def gather_slave_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_slave_status", value)

    @property
    @pulumi.getter(name="gatherTableIoWaits")
    def gather_table_io_waits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_table_io_waits")

    @gather_table_io_waits.setter
    def gather_table_io_waits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_table_io_waits", value)

    @property
    @pulumi.getter(name="gatherTableLockWaits")
    def gather_table_lock_waits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_table_lock_waits")

    @gather_table_lock_waits.setter
    def gather_table_lock_waits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_table_lock_waits", value)

    @property
    @pulumi.getter(name="gatherTableSchema")
    def gather_table_schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gather_table_schema")

    @gather_table_schema.setter
    def gather_table_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gather_table_schema", value)

    @property
    @pulumi.getter(name="perfEventsStatementsDigestTextLimit")
    def perf_events_statements_digest_text_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "perf_events_statements_digest_text_limit")

    @perf_events_statements_digest_text_limit.setter
    def perf_events_statements_digest_text_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_events_statements_digest_text_limit", value)

    @property
    @pulumi.getter(name="perfEventsStatementsLimit")
    def perf_events_statements_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "perf_events_statements_limit")

    @perf_events_statements_limit.setter
    def perf_events_statements_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_events_statements_limit", value)

    @property
    @pulumi.getter(name="perfEventsStatementsTimeLimit")
    def perf_events_statements_time_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "perf_events_statements_time_limit")

    @perf_events_statements_time_limit.setter
    def perf_events_statements_time_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_events_statements_time_limit", value)


@pulumi.input_type
class ServiceIntegrationReadReplicaUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceIntegrationRsyslogUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceIntegrationSchemaRegistryProxyUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceIntegrationSignalfxUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceKafkaArgs:
    def __init__(__self__, *,
                 access_cert: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 connect_uri: Optional[pulumi.Input[str]] = None,
                 rest_uri: Optional[pulumi.Input[str]] = None,
                 schema_registry_uri: Optional[pulumi.Input[str]] = None):
        if access_cert is not None:
            pulumi.set(__self__, "access_cert", access_cert)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if connect_uri is not None:
            pulumi.set(__self__, "connect_uri", connect_uri)
        if rest_uri is not None:
            pulumi.set(__self__, "rest_uri", rest_uri)
        if schema_registry_uri is not None:
            pulumi.set(__self__, "schema_registry_uri", schema_registry_uri)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_cert")

    @access_cert.setter
    def access_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_cert", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="connectUri")
    def connect_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_uri")

    @connect_uri.setter
    def connect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_uri", value)

    @property
    @pulumi.getter(name="restUri")
    def rest_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rest_uri")

    @rest_uri.setter
    def rest_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_uri", value)

    @property
    @pulumi.getter(name="schemaRegistryUri")
    def schema_registry_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry_uri")

    @schema_registry_uri.setter
    def schema_registry_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry_uri", value)


@pulumi.input_type
class ServiceKafkaConnectArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kafka_connect: Optional[pulumi.Input['ServiceKafkaConnectUserConfigKafkaConnectArgs']] = None,
                 private_access: Optional[pulumi.Input['ServiceKafkaConnectUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceKafkaConnectUserConfigPublicAccessArgs']] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input['ServiceKafkaConnectUserConfigKafkaConnectArgs']]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input['ServiceKafkaConnectUserConfigKafkaConnectArgs']]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceKafkaConnectUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceKafkaConnectUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceKafkaConnectUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceKafkaConnectUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)


@pulumi.input_type
class ServiceKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[pulumi.Input[str]] = None,
                 consumer_auto_offset_reset: Optional[pulumi.Input[str]] = None,
                 consumer_fetch_max_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_isolation_level: Optional[pulumi.Input[str]] = None,
                 consumer_max_partition_fetch_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_interval_ms: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_records: Optional[pulumi.Input[str]] = None,
                 offset_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 offset_flush_timeout_ms: Optional[pulumi.Input[str]] = None,
                 producer_max_request_size: Optional[pulumi.Input[str]] = None,
                 session_timeout_ms: Optional[pulumi.Input[str]] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_fetch_max_bytes is not None:
            pulumi.set(__self__, "consumer_fetch_max_bytes", consumer_fetch_max_bytes)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_partition_fetch_bytes is not None:
            pulumi.set(__self__, "consumer_max_partition_fetch_bytes", consumer_max_partition_fetch_bytes)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if producer_max_request_size is not None:
            pulumi.set(__self__, "producer_max_request_size", producer_max_request_size)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerFetchMaxBytes")
    def consumer_fetch_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_fetch_max_bytes")

    @consumer_fetch_max_bytes.setter
    def consumer_fetch_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPartitionFetchBytes")
    def consumer_max_partition_fetch_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_partition_fetch_bytes")

    @consumer_max_partition_fetch_bytes.setter
    def consumer_max_partition_fetch_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_partition_fetch_bytes", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="producerMaxRequestSize")
    def producer_max_request_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_max_request_size")

    @producer_max_request_size.setter
    def producer_max_request_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_max_request_size", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class ServiceKafkaConnectUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceKafkaConnectUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceKafkaMirrormakerArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kafka_mirrormaker: Optional[pulumi.Input['ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_mirrormaker is not None:
            pulumi.set(__self__, "kafka_mirrormaker", kafka_mirrormaker)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaMirrormaker")
    def kafka_mirrormaker(self) -> Optional[pulumi.Input['ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']]:
        return pulumi.get(self, "kafka_mirrormaker")

    @kafka_mirrormaker.setter
    def kafka_mirrormaker(self, value: Optional[pulumi.Input['ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']]):
        pulumi.set(self, "kafka_mirrormaker", value)


@pulumi.input_type
class ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs:
    def __init__(__self__, *,
                 refresh_groups_enabled: Optional[pulumi.Input[str]] = None,
                 refresh_groups_interval_seconds: Optional[pulumi.Input[str]] = None,
                 refresh_topics_enabled: Optional[pulumi.Input[str]] = None,
                 refresh_topics_interval_seconds: Optional[pulumi.Input[str]] = None):
        if refresh_groups_enabled is not None:
            pulumi.set(__self__, "refresh_groups_enabled", refresh_groups_enabled)
        if refresh_groups_interval_seconds is not None:
            pulumi.set(__self__, "refresh_groups_interval_seconds", refresh_groups_interval_seconds)
        if refresh_topics_enabled is not None:
            pulumi.set(__self__, "refresh_topics_enabled", refresh_topics_enabled)
        if refresh_topics_interval_seconds is not None:
            pulumi.set(__self__, "refresh_topics_interval_seconds", refresh_topics_interval_seconds)

    @property
    @pulumi.getter(name="refreshGroupsEnabled")
    def refresh_groups_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_groups_enabled")

    @refresh_groups_enabled.setter
    def refresh_groups_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_groups_enabled", value)

    @property
    @pulumi.getter(name="refreshGroupsIntervalSeconds")
    def refresh_groups_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_groups_interval_seconds")

    @refresh_groups_interval_seconds.setter
    def refresh_groups_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_groups_interval_seconds", value)

    @property
    @pulumi.getter(name="refreshTopicsEnabled")
    def refresh_topics_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_topics_enabled")

    @refresh_topics_enabled.setter
    def refresh_topics_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_topics_enabled", value)

    @property
    @pulumi.getter(name="refreshTopicsIntervalSeconds")
    def refresh_topics_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_topics_interval_seconds")

    @refresh_topics_interval_seconds.setter
    def refresh_topics_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_topics_interval_seconds", value)


@pulumi.input_type
class ServiceKafkaUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kafka: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaArgs']] = None,
                 kafka_authentication_methods: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_connect_config: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaConnectConfigArgs']] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 kafka_rest_config: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaRestConfigArgs']] = None,
                 kafka_version: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceKafkaUserConfigPrivateAccessArgs']] = None,
                 privatelink_access: Optional[pulumi.Input['ServiceKafkaUserConfigPrivatelinkAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceKafkaUserConfigPublicAccessArgs']] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None,
                 schema_registry_config: Optional[pulumi.Input['ServiceKafkaUserConfigSchemaRegistryConfigArgs']] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_authentication_methods is not None:
            pulumi.set(__self__, "kafka_authentication_methods", kafka_authentication_methods)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_connect_config is not None:
            pulumi.set(__self__, "kafka_connect_config", kafka_connect_config)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if kafka_rest_config is not None:
            pulumi.set(__self__, "kafka_rest_config", kafka_rest_config)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if privatelink_access is not None:
            pulumi.set(__self__, "privatelink_access", privatelink_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)
        if schema_registry_config is not None:
            pulumi.set(__self__, "schema_registry_config", schema_registry_config)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigKafkaArgs']]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethods")
    def kafka_authentication_methods(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']]:
        return pulumi.get(self, "kafka_authentication_methods")

    @kafka_authentication_methods.setter
    def kafka_authentication_methods(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']]):
        pulumi.set(self, "kafka_authentication_methods", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaConnectConfig")
    def kafka_connect_config(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigKafkaConnectConfigArgs']]:
        return pulumi.get(self, "kafka_connect_config")

    @kafka_connect_config.setter
    def kafka_connect_config(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaConnectConfigArgs']]):
        pulumi.set(self, "kafka_connect_config", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="kafkaRestConfig")
    def kafka_rest_config(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigKafkaRestConfigArgs']]:
        return pulumi.get(self, "kafka_rest_config")

    @kafka_rest_config.setter
    def kafka_rest_config(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaRestConfigArgs']]):
        pulumi.set(self, "kafka_rest_config", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="privatelinkAccess")
    def privatelink_access(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigPrivatelinkAccessArgs']]:
        return pulumi.get(self, "privatelink_access")

    @privatelink_access.setter
    def privatelink_access(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigPrivatelinkAccessArgs']]):
        pulumi.set(self, "privatelink_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)

    @property
    @pulumi.getter(name="schemaRegistryConfig")
    def schema_registry_config(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigSchemaRegistryConfigArgs']]:
        return pulumi.get(self, "schema_registry_config")

    @schema_registry_config.setter
    def schema_registry_config(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigSchemaRegistryConfigArgs']]):
        pulumi.set(self, "schema_registry_config", value)


@pulumi.input_type
class ServiceKafkaUserConfigKafkaArgs:
    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[pulumi.Input[str]] = None,
                 compression_type: Optional[pulumi.Input[str]] = None,
                 connections_max_idle_ms: Optional[pulumi.Input[str]] = None,
                 default_replication_factor: Optional[pulumi.Input[str]] = None,
                 group_max_session_timeout_ms: Optional[pulumi.Input[str]] = None,
                 group_min_session_timeout_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_delete_retention_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_max_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_min_cleanable_ratio: Optional[pulumi.Input[str]] = None,
                 log_cleaner_min_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 log_cleanup_policy: Optional[pulumi.Input[str]] = None,
                 log_flush_interval_messages: Optional[pulumi.Input[str]] = None,
                 log_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 log_index_interval_bytes: Optional[pulumi.Input[str]] = None,
                 log_index_size_max_bytes: Optional[pulumi.Input[str]] = None,
                 log_message_downconversion_enable: Optional[pulumi.Input[str]] = None,
                 log_message_timestamp_difference_max_ms: Optional[pulumi.Input[str]] = None,
                 log_message_timestamp_type: Optional[pulumi.Input[str]] = None,
                 log_preallocate: Optional[pulumi.Input[str]] = None,
                 log_retention_bytes: Optional[pulumi.Input[str]] = None,
                 log_retention_hours: Optional[pulumi.Input[str]] = None,
                 log_retention_ms: Optional[pulumi.Input[str]] = None,
                 log_roll_jitter_ms: Optional[pulumi.Input[str]] = None,
                 log_roll_ms: Optional[pulumi.Input[str]] = None,
                 log_segment_bytes: Optional[pulumi.Input[str]] = None,
                 log_segment_delete_delay_ms: Optional[pulumi.Input[str]] = None,
                 max_connections_per_ip: Optional[pulumi.Input[str]] = None,
                 max_incremental_fetch_session_cache_slots: Optional[pulumi.Input[str]] = None,
                 message_max_bytes: Optional[pulumi.Input[str]] = None,
                 min_insync_replicas: Optional[pulumi.Input[str]] = None,
                 num_partitions: Optional[pulumi.Input[str]] = None,
                 offsets_retention_minutes: Optional[pulumi.Input[str]] = None,
                 producer_purgatory_purge_interval_requests: Optional[pulumi.Input[str]] = None,
                 replica_fetch_max_bytes: Optional[pulumi.Input[str]] = None,
                 replica_fetch_response_max_bytes: Optional[pulumi.Input[str]] = None,
                 socket_request_max_bytes: Optional[pulumi.Input[str]] = None,
                 transaction_remove_expired_transaction_cleanup_interval_ms: Optional[pulumi.Input[str]] = None,
                 transaction_state_log_segment_bytes: Optional[pulumi.Input[str]] = None):
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if connections_max_idle_ms is not None:
            pulumi.set(__self__, "connections_max_idle_ms", connections_max_idle_ms)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if group_max_session_timeout_ms is not None:
            pulumi.set(__self__, "group_max_session_timeout_ms", group_max_session_timeout_ms)
        if group_min_session_timeout_ms is not None:
            pulumi.set(__self__, "group_min_session_timeout_ms", group_min_session_timeout_ms)
        if log_cleaner_delete_retention_ms is not None:
            pulumi.set(__self__, "log_cleaner_delete_retention_ms", log_cleaner_delete_retention_ms)
        if log_cleaner_max_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_max_compaction_lag_ms", log_cleaner_max_compaction_lag_ms)
        if log_cleaner_min_cleanable_ratio is not None:
            pulumi.set(__self__, "log_cleaner_min_cleanable_ratio", log_cleaner_min_cleanable_ratio)
        if log_cleaner_min_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_min_compaction_lag_ms", log_cleaner_min_compaction_lag_ms)
        if log_cleanup_policy is not None:
            pulumi.set(__self__, "log_cleanup_policy", log_cleanup_policy)
        if log_flush_interval_messages is not None:
            pulumi.set(__self__, "log_flush_interval_messages", log_flush_interval_messages)
        if log_flush_interval_ms is not None:
            pulumi.set(__self__, "log_flush_interval_ms", log_flush_interval_ms)
        if log_index_interval_bytes is not None:
            pulumi.set(__self__, "log_index_interval_bytes", log_index_interval_bytes)
        if log_index_size_max_bytes is not None:
            pulumi.set(__self__, "log_index_size_max_bytes", log_index_size_max_bytes)
        if log_message_downconversion_enable is not None:
            pulumi.set(__self__, "log_message_downconversion_enable", log_message_downconversion_enable)
        if log_message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "log_message_timestamp_difference_max_ms", log_message_timestamp_difference_max_ms)
        if log_message_timestamp_type is not None:
            pulumi.set(__self__, "log_message_timestamp_type", log_message_timestamp_type)
        if log_preallocate is not None:
            pulumi.set(__self__, "log_preallocate", log_preallocate)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_retention_ms is not None:
            pulumi.set(__self__, "log_retention_ms", log_retention_ms)
        if log_roll_jitter_ms is not None:
            pulumi.set(__self__, "log_roll_jitter_ms", log_roll_jitter_ms)
        if log_roll_ms is not None:
            pulumi.set(__self__, "log_roll_ms", log_roll_ms)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if log_segment_delete_delay_ms is not None:
            pulumi.set(__self__, "log_segment_delete_delay_ms", log_segment_delete_delay_ms)
        if max_connections_per_ip is not None:
            pulumi.set(__self__, "max_connections_per_ip", max_connections_per_ip)
        if max_incremental_fetch_session_cache_slots is not None:
            pulumi.set(__self__, "max_incremental_fetch_session_cache_slots", max_incremental_fetch_session_cache_slots)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if min_insync_replicas is not None:
            pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if producer_purgatory_purge_interval_requests is not None:
            pulumi.set(__self__, "producer_purgatory_purge_interval_requests", producer_purgatory_purge_interval_requests)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if replica_fetch_response_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_response_max_bytes", replica_fetch_response_max_bytes)
        if socket_request_max_bytes is not None:
            pulumi.set(__self__, "socket_request_max_bytes", socket_request_max_bytes)
        if transaction_remove_expired_transaction_cleanup_interval_ms is not None:
            pulumi.set(__self__, "transaction_remove_expired_transaction_cleanup_interval_ms", transaction_remove_expired_transaction_cleanup_interval_ms)
        if transaction_state_log_segment_bytes is not None:
            pulumi.set(__self__, "transaction_state_log_segment_bytes", transaction_state_log_segment_bytes)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_create_topics_enable")

    @auto_create_topics_enable.setter
    def auto_create_topics_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_create_topics_enable", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="connectionsMaxIdleMs")
    def connections_max_idle_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connections_max_idle_ms")

    @connections_max_idle_ms.setter
    def connections_max_idle_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connections_max_idle_ms", value)

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_replication_factor")

    @default_replication_factor.setter
    def default_replication_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_replication_factor", value)

    @property
    @pulumi.getter(name="groupMaxSessionTimeoutMs")
    def group_max_session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_max_session_timeout_ms")

    @group_max_session_timeout_ms.setter
    def group_max_session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_max_session_timeout_ms", value)

    @property
    @pulumi.getter(name="groupMinSessionTimeoutMs")
    def group_min_session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_min_session_timeout_ms")

    @group_min_session_timeout_ms.setter
    def group_min_session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_min_session_timeout_ms", value)

    @property
    @pulumi.getter(name="logCleanerDeleteRetentionMs")
    def log_cleaner_delete_retention_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_delete_retention_ms")

    @log_cleaner_delete_retention_ms.setter
    def log_cleaner_delete_retention_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_delete_retention_ms", value)

    @property
    @pulumi.getter(name="logCleanerMaxCompactionLagMs")
    def log_cleaner_max_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_max_compaction_lag_ms")

    @log_cleaner_max_compaction_lag_ms.setter
    def log_cleaner_max_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanerMinCleanableRatio")
    def log_cleaner_min_cleanable_ratio(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_min_cleanable_ratio")

    @log_cleaner_min_cleanable_ratio.setter
    def log_cleaner_min_cleanable_ratio(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_min_cleanable_ratio", value)

    @property
    @pulumi.getter(name="logCleanerMinCompactionLagMs")
    def log_cleaner_min_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_min_compaction_lag_ms")

    @log_cleaner_min_compaction_lag_ms.setter
    def log_cleaner_min_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanupPolicy")
    def log_cleanup_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleanup_policy")

    @log_cleanup_policy.setter
    def log_cleanup_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleanup_policy", value)

    @property
    @pulumi.getter(name="logFlushIntervalMessages")
    def log_flush_interval_messages(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_flush_interval_messages")

    @log_flush_interval_messages.setter
    def log_flush_interval_messages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_flush_interval_messages", value)

    @property
    @pulumi.getter(name="logFlushIntervalMs")
    def log_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_flush_interval_ms")

    @log_flush_interval_ms.setter
    def log_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_flush_interval_ms", value)

    @property
    @pulumi.getter(name="logIndexIntervalBytes")
    def log_index_interval_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_index_interval_bytes")

    @log_index_interval_bytes.setter
    def log_index_interval_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_index_interval_bytes", value)

    @property
    @pulumi.getter(name="logIndexSizeMaxBytes")
    def log_index_size_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_index_size_max_bytes")

    @log_index_size_max_bytes.setter
    def log_index_size_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_index_size_max_bytes", value)

    @property
    @pulumi.getter(name="logMessageDownconversionEnable")
    def log_message_downconversion_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_message_downconversion_enable")

    @log_message_downconversion_enable.setter
    def log_message_downconversion_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_downconversion_enable", value)

    @property
    @pulumi.getter(name="logMessageTimestampDifferenceMaxMs")
    def log_message_timestamp_difference_max_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_message_timestamp_difference_max_ms")

    @log_message_timestamp_difference_max_ms.setter
    def log_message_timestamp_difference_max_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="logMessageTimestampType")
    def log_message_timestamp_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_message_timestamp_type")

    @log_message_timestamp_type.setter
    def log_message_timestamp_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_timestamp_type", value)

    @property
    @pulumi.getter(name="logPreallocate")
    def log_preallocate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_preallocate")

    @log_preallocate.setter
    def log_preallocate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_preallocate", value)

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_retention_bytes")

    @log_retention_bytes.setter
    def log_retention_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_bytes", value)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_retention_hours")

    @log_retention_hours.setter
    def log_retention_hours(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_hours", value)

    @property
    @pulumi.getter(name="logRetentionMs")
    def log_retention_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_retention_ms")

    @log_retention_ms.setter
    def log_retention_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_ms", value)

    @property
    @pulumi.getter(name="logRollJitterMs")
    def log_roll_jitter_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_roll_jitter_ms")

    @log_roll_jitter_ms.setter
    def log_roll_jitter_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_roll_jitter_ms", value)

    @property
    @pulumi.getter(name="logRollMs")
    def log_roll_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_roll_ms")

    @log_roll_ms.setter
    def log_roll_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_roll_ms", value)

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_segment_bytes")

    @log_segment_bytes.setter
    def log_segment_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_segment_bytes", value)

    @property
    @pulumi.getter(name="logSegmentDeleteDelayMs")
    def log_segment_delete_delay_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_segment_delete_delay_ms")

    @log_segment_delete_delay_ms.setter
    def log_segment_delete_delay_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_segment_delete_delay_ms", value)

    @property
    @pulumi.getter(name="maxConnectionsPerIp")
    def max_connections_per_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_connections_per_ip")

    @max_connections_per_ip.setter
    def max_connections_per_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_connections_per_ip", value)

    @property
    @pulumi.getter(name="maxIncrementalFetchSessionCacheSlots")
    def max_incremental_fetch_session_cache_slots(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_incremental_fetch_session_cache_slots")

    @max_incremental_fetch_session_cache_slots.setter
    def max_incremental_fetch_session_cache_slots(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_incremental_fetch_session_cache_slots", value)

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_max_bytes")

    @message_max_bytes.setter
    def message_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_max_bytes", value)

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_insync_replicas")

    @min_insync_replicas.setter
    def min_insync_replicas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_insync_replicas", value)

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_partitions")

    @num_partitions.setter
    def num_partitions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_partitions", value)

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offsets_retention_minutes")

    @offsets_retention_minutes.setter
    def offsets_retention_minutes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offsets_retention_minutes", value)

    @property
    @pulumi.getter(name="producerPurgatoryPurgeIntervalRequests")
    def producer_purgatory_purge_interval_requests(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_purgatory_purge_interval_requests")

    @producer_purgatory_purge_interval_requests.setter
    def producer_purgatory_purge_interval_requests(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_purgatory_purge_interval_requests", value)

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_fetch_max_bytes")

    @replica_fetch_max_bytes.setter
    def replica_fetch_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="replicaFetchResponseMaxBytes")
    def replica_fetch_response_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_fetch_response_max_bytes")

    @replica_fetch_response_max_bytes.setter
    def replica_fetch_response_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_fetch_response_max_bytes", value)

    @property
    @pulumi.getter(name="socketRequestMaxBytes")
    def socket_request_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "socket_request_max_bytes")

    @socket_request_max_bytes.setter
    def socket_request_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socket_request_max_bytes", value)

    @property
    @pulumi.getter(name="transactionRemoveExpiredTransactionCleanupIntervalMs")
    def transaction_remove_expired_transaction_cleanup_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transaction_remove_expired_transaction_cleanup_interval_ms")

    @transaction_remove_expired_transaction_cleanup_interval_ms.setter
    def transaction_remove_expired_transaction_cleanup_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transaction_remove_expired_transaction_cleanup_interval_ms", value)

    @property
    @pulumi.getter(name="transactionStateLogSegmentBytes")
    def transaction_state_log_segment_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transaction_state_log_segment_bytes")

    @transaction_state_log_segment_bytes.setter
    def transaction_state_log_segment_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transaction_state_log_segment_bytes", value)


@pulumi.input_type
class ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 sasl: Optional[pulumi.Input[str]] = None):
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def sasl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sasl")

    @sasl.setter
    def sasl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl", value)


@pulumi.input_type
class ServiceKafkaUserConfigKafkaConnectConfigArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[pulumi.Input[str]] = None,
                 consumer_auto_offset_reset: Optional[pulumi.Input[str]] = None,
                 consumer_fetch_max_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_isolation_level: Optional[pulumi.Input[str]] = None,
                 consumer_max_partition_fetch_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_interval_ms: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_records: Optional[pulumi.Input[str]] = None,
                 offset_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 offset_flush_timeout_ms: Optional[pulumi.Input[str]] = None,
                 producer_max_request_size: Optional[pulumi.Input[str]] = None,
                 session_timeout_ms: Optional[pulumi.Input[str]] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_fetch_max_bytes is not None:
            pulumi.set(__self__, "consumer_fetch_max_bytes", consumer_fetch_max_bytes)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_partition_fetch_bytes is not None:
            pulumi.set(__self__, "consumer_max_partition_fetch_bytes", consumer_max_partition_fetch_bytes)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if producer_max_request_size is not None:
            pulumi.set(__self__, "producer_max_request_size", producer_max_request_size)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerFetchMaxBytes")
    def consumer_fetch_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_fetch_max_bytes")

    @consumer_fetch_max_bytes.setter
    def consumer_fetch_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPartitionFetchBytes")
    def consumer_max_partition_fetch_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_partition_fetch_bytes")

    @consumer_max_partition_fetch_bytes.setter
    def consumer_max_partition_fetch_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_partition_fetch_bytes", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="producerMaxRequestSize")
    def producer_max_request_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_max_request_size")

    @producer_max_request_size.setter
    def producer_max_request_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_max_request_size", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class ServiceKafkaUserConfigKafkaRestConfigArgs:
    def __init__(__self__, *,
                 consumer_enable_auto_commit: Optional[pulumi.Input[str]] = None,
                 consumer_request_max_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_request_timeout_ms: Optional[pulumi.Input[str]] = None,
                 producer_acks: Optional[pulumi.Input[str]] = None,
                 producer_linger_ms: Optional[pulumi.Input[str]] = None,
                 simpleconsumer_pool_size_max: Optional[pulumi.Input[str]] = None):
        if consumer_enable_auto_commit is not None:
            pulumi.set(__self__, "consumer_enable_auto_commit", consumer_enable_auto_commit)
        if consumer_request_max_bytes is not None:
            pulumi.set(__self__, "consumer_request_max_bytes", consumer_request_max_bytes)
        if consumer_request_timeout_ms is not None:
            pulumi.set(__self__, "consumer_request_timeout_ms", consumer_request_timeout_ms)
        if producer_acks is not None:
            pulumi.set(__self__, "producer_acks", producer_acks)
        if producer_linger_ms is not None:
            pulumi.set(__self__, "producer_linger_ms", producer_linger_ms)
        if simpleconsumer_pool_size_max is not None:
            pulumi.set(__self__, "simpleconsumer_pool_size_max", simpleconsumer_pool_size_max)

    @property
    @pulumi.getter(name="consumerEnableAutoCommit")
    def consumer_enable_auto_commit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_enable_auto_commit")

    @consumer_enable_auto_commit.setter
    def consumer_enable_auto_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_enable_auto_commit", value)

    @property
    @pulumi.getter(name="consumerRequestMaxBytes")
    def consumer_request_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_request_max_bytes")

    @consumer_request_max_bytes.setter
    def consumer_request_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_request_max_bytes", value)

    @property
    @pulumi.getter(name="consumerRequestTimeoutMs")
    def consumer_request_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_request_timeout_ms")

    @consumer_request_timeout_ms.setter
    def consumer_request_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_request_timeout_ms", value)

    @property
    @pulumi.getter(name="producerAcks")
    def producer_acks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_acks")

    @producer_acks.setter
    def producer_acks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_acks", value)

    @property
    @pulumi.getter(name="producerLingerMs")
    def producer_linger_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_linger_ms")

    @producer_linger_ms.setter
    def producer_linger_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_linger_ms", value)

    @property
    @pulumi.getter(name="simpleconsumerPoolSizeMax")
    def simpleconsumer_pool_size_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "simpleconsumer_pool_size_max")

    @simpleconsumer_pool_size_max.setter
    def simpleconsumer_pool_size_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simpleconsumer_pool_size_max", value)


@pulumi.input_type
class ServiceKafkaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceKafkaUserConfigPrivatelinkAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[pulumi.Input[str]] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None):
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class ServiceKafkaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[pulumi.Input[str]] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None):
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class ServiceKafkaUserConfigSchemaRegistryConfigArgs:
    def __init__(__self__, *,
                 leader_eligibility: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        if leader_eligibility is not None:
            pulumi.set(__self__, "leader_eligibility", leader_eligibility)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="leaderEligibility")
    def leader_eligibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_eligibility")

    @leader_eligibility.setter
    def leader_eligibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_eligibility", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class ServiceMysqlArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMysqlUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 backup_hour: Optional[pulumi.Input[str]] = None,
                 backup_minute: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mysql: Optional[pulumi.Input['ServiceMysqlUserConfigMysqlArgs']] = None,
                 mysql_version: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceMysqlUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['ServiceMysqlUserConfigPublicAccessArgs']] = None,
                 recovery_target_time: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if mysql_version is not None:
            pulumi.set(__self__, "mysql_version", mysql_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['ServiceMysqlUserConfigMysqlArgs']]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['ServiceMysqlUserConfigMysqlArgs']]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql_version")

    @mysql_version.setter
    def mysql_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceMysqlUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceMysqlUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceMysqlUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceMysqlUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceMysqlUserConfigMysqlArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 default_time_zone: Optional[pulumi.Input[str]] = None,
                 group_concat_max_len: Optional[pulumi.Input[str]] = None,
                 information_schema_stats_expiry: Optional[pulumi.Input[str]] = None,
                 innodb_ft_min_token_size: Optional[pulumi.Input[str]] = None,
                 innodb_ft_server_stopword_table: Optional[pulumi.Input[str]] = None,
                 innodb_lock_wait_timeout: Optional[pulumi.Input[str]] = None,
                 innodb_log_buffer_size: Optional[pulumi.Input[str]] = None,
                 innodb_online_alter_log_max_size: Optional[pulumi.Input[str]] = None,
                 innodb_print_all_deadlocks: Optional[pulumi.Input[str]] = None,
                 innodb_rollback_on_timeout: Optional[pulumi.Input[str]] = None,
                 interactive_timeout: Optional[pulumi.Input[str]] = None,
                 max_allowed_packet: Optional[pulumi.Input[str]] = None,
                 max_heap_table_size: Optional[pulumi.Input[str]] = None,
                 net_read_timeout: Optional[pulumi.Input[str]] = None,
                 net_write_timeout: Optional[pulumi.Input[str]] = None,
                 sort_buffer_size: Optional[pulumi.Input[str]] = None,
                 sql_mode: Optional[pulumi.Input[str]] = None,
                 sql_require_primary_key: Optional[pulumi.Input[str]] = None,
                 tmp_table_size: Optional[pulumi.Input[str]] = None,
                 wait_timeout: Optional[pulumi.Input[str]] = None):
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if group_concat_max_len is not None:
            pulumi.set(__self__, "group_concat_max_len", group_concat_max_len)
        if information_schema_stats_expiry is not None:
            pulumi.set(__self__, "information_schema_stats_expiry", information_schema_stats_expiry)
        if innodb_ft_min_token_size is not None:
            pulumi.set(__self__, "innodb_ft_min_token_size", innodb_ft_min_token_size)
        if innodb_ft_server_stopword_table is not None:
            pulumi.set(__self__, "innodb_ft_server_stopword_table", innodb_ft_server_stopword_table)
        if innodb_lock_wait_timeout is not None:
            pulumi.set(__self__, "innodb_lock_wait_timeout", innodb_lock_wait_timeout)
        if innodb_log_buffer_size is not None:
            pulumi.set(__self__, "innodb_log_buffer_size", innodb_log_buffer_size)
        if innodb_online_alter_log_max_size is not None:
            pulumi.set(__self__, "innodb_online_alter_log_max_size", innodb_online_alter_log_max_size)
        if innodb_print_all_deadlocks is not None:
            pulumi.set(__self__, "innodb_print_all_deadlocks", innodb_print_all_deadlocks)
        if innodb_rollback_on_timeout is not None:
            pulumi.set(__self__, "innodb_rollback_on_timeout", innodb_rollback_on_timeout)
        if interactive_timeout is not None:
            pulumi.set(__self__, "interactive_timeout", interactive_timeout)
        if max_allowed_packet is not None:
            pulumi.set(__self__, "max_allowed_packet", max_allowed_packet)
        if max_heap_table_size is not None:
            pulumi.set(__self__, "max_heap_table_size", max_heap_table_size)
        if net_read_timeout is not None:
            pulumi.set(__self__, "net_read_timeout", net_read_timeout)
        if net_write_timeout is not None:
            pulumi.set(__self__, "net_write_timeout", net_write_timeout)
        if sort_buffer_size is not None:
            pulumi.set(__self__, "sort_buffer_size", sort_buffer_size)
        if sql_mode is not None:
            pulumi.set(__self__, "sql_mode", sql_mode)
        if sql_require_primary_key is not None:
            pulumi.set(__self__, "sql_require_primary_key", sql_require_primary_key)
        if tmp_table_size is not None:
            pulumi.set(__self__, "tmp_table_size", tmp_table_size)
        if wait_timeout is not None:
            pulumi.set(__self__, "wait_timeout", wait_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_time_zone")

    @default_time_zone.setter
    def default_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_time_zone", value)

    @property
    @pulumi.getter(name="groupConcatMaxLen")
    def group_concat_max_len(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_concat_max_len")

    @group_concat_max_len.setter
    def group_concat_max_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_concat_max_len", value)

    @property
    @pulumi.getter(name="informationSchemaStatsExpiry")
    def information_schema_stats_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "information_schema_stats_expiry")

    @information_schema_stats_expiry.setter
    def information_schema_stats_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "information_schema_stats_expiry", value)

    @property
    @pulumi.getter(name="innodbFtMinTokenSize")
    def innodb_ft_min_token_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_ft_min_token_size")

    @innodb_ft_min_token_size.setter
    def innodb_ft_min_token_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_ft_min_token_size", value)

    @property
    @pulumi.getter(name="innodbFtServerStopwordTable")
    def innodb_ft_server_stopword_table(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_ft_server_stopword_table")

    @innodb_ft_server_stopword_table.setter
    def innodb_ft_server_stopword_table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_ft_server_stopword_table", value)

    @property
    @pulumi.getter(name="innodbLockWaitTimeout")
    def innodb_lock_wait_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_lock_wait_timeout")

    @innodb_lock_wait_timeout.setter
    def innodb_lock_wait_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_lock_wait_timeout", value)

    @property
    @pulumi.getter(name="innodbLogBufferSize")
    def innodb_log_buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_log_buffer_size")

    @innodb_log_buffer_size.setter
    def innodb_log_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_log_buffer_size", value)

    @property
    @pulumi.getter(name="innodbOnlineAlterLogMaxSize")
    def innodb_online_alter_log_max_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_online_alter_log_max_size")

    @innodb_online_alter_log_max_size.setter
    def innodb_online_alter_log_max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_online_alter_log_max_size", value)

    @property
    @pulumi.getter(name="innodbPrintAllDeadlocks")
    def innodb_print_all_deadlocks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_print_all_deadlocks")

    @innodb_print_all_deadlocks.setter
    def innodb_print_all_deadlocks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_print_all_deadlocks", value)

    @property
    @pulumi.getter(name="innodbRollbackOnTimeout")
    def innodb_rollback_on_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_rollback_on_timeout")

    @innodb_rollback_on_timeout.setter
    def innodb_rollback_on_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_rollback_on_timeout", value)

    @property
    @pulumi.getter(name="interactiveTimeout")
    def interactive_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interactive_timeout")

    @interactive_timeout.setter
    def interactive_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interactive_timeout", value)

    @property
    @pulumi.getter(name="maxAllowedPacket")
    def max_allowed_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_allowed_packet")

    @max_allowed_packet.setter
    def max_allowed_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_allowed_packet", value)

    @property
    @pulumi.getter(name="maxHeapTableSize")
    def max_heap_table_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_heap_table_size")

    @max_heap_table_size.setter
    def max_heap_table_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_heap_table_size", value)

    @property
    @pulumi.getter(name="netReadTimeout")
    def net_read_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_read_timeout")

    @net_read_timeout.setter
    def net_read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_read_timeout", value)

    @property
    @pulumi.getter(name="netWriteTimeout")
    def net_write_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_write_timeout")

    @net_write_timeout.setter
    def net_write_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_write_timeout", value)

    @property
    @pulumi.getter(name="sortBufferSize")
    def sort_buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort_buffer_size")

    @sort_buffer_size.setter
    def sort_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_buffer_size", value)

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sql_mode")

    @sql_mode.setter
    def sql_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_mode", value)

    @property
    @pulumi.getter(name="sqlRequirePrimaryKey")
    def sql_require_primary_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sql_require_primary_key")

    @sql_require_primary_key.setter
    def sql_require_primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_require_primary_key", value)

    @property
    @pulumi.getter(name="tmpTableSize")
    def tmp_table_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tmp_table_size")

    @tmp_table_size.setter
    def tmp_table_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmp_table_size", value)

    @property
    @pulumi.getter(name="waitTimeout")
    def wait_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wait_timeout")

    @wait_timeout.setter
    def wait_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wait_timeout", value)


@pulumi.input_type
class ServiceMysqlUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceMysqlUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServicePgArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 replica_uri: Optional[pulumi.Input[str]] = None,
                 sslmode: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if replica_uri is not None:
            pulumi.set(__self__, "replica_uri", replica_uri)
        if sslmode is not None:
            pulumi.set(__self__, "sslmode", sslmode)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicaUri")
    def replica_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_uri")

    @replica_uri.setter
    def replica_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_uri", value)

    @property
    @pulumi.getter
    def sslmode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslmode")

    @sslmode.setter
    def sslmode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslmode", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ServicePgUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 backup_hour: Optional[pulumi.Input[str]] = None,
                 backup_minute: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 migration: Optional[pulumi.Input['ServicePgUserConfigMigrationArgs']] = None,
                 pg: Optional[pulumi.Input['ServicePgUserConfigPgArgs']] = None,
                 pg_read_replica: Optional[pulumi.Input[str]] = None,
                 pg_service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 pg_version: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input['ServicePgUserConfigPgbouncerArgs']] = None,
                 pglookout: Optional[pulumi.Input['ServicePgUserConfigPglookoutArgs']] = None,
                 private_access: Optional[pulumi.Input['ServicePgUserConfigPrivateAccessArgs']] = None,
                 privatelink_access: Optional[pulumi.Input['ServicePgUserConfigPrivatelinkAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['ServicePgUserConfigPublicAccessArgs']] = None,
                 recovery_target_time: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 shared_buffers_percentage: Optional[pulumi.Input[str]] = None,
                 synchronous_replication: Optional[pulumi.Input[str]] = None,
                 timescaledb: Optional[pulumi.Input['ServicePgUserConfigTimescaledbArgs']] = None,
                 variant: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pg_read_replica is not None:
            pulumi.set(__self__, "pg_read_replica", pg_read_replica)
        if pg_service_to_fork_from is not None:
            pulumi.set(__self__, "pg_service_to_fork_from", pg_service_to_fork_from)
        if pg_version is not None:
            pulumi.set(__self__, "pg_version", pg_version)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if pglookout is not None:
            pulumi.set(__self__, "pglookout", pglookout)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if privatelink_access is not None:
            pulumi.set(__self__, "privatelink_access", privatelink_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if shared_buffers_percentage is not None:
            pulumi.set(__self__, "shared_buffers_percentage", shared_buffers_percentage)
        if synchronous_replication is not None:
            pulumi.set(__self__, "synchronous_replication", synchronous_replication)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional[pulumi.Input['ServicePgUserConfigMigrationArgs']]:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional[pulumi.Input['ServicePgUserConfigMigrationArgs']]):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input['ServicePgUserConfigPgArgs']]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input['ServicePgUserConfigPgArgs']]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter(name="pgReadReplica")
    def pg_read_replica(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_read_replica")

    @pg_read_replica.setter
    def pg_read_replica(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_read_replica", value)

    @property
    @pulumi.getter(name="pgServiceToForkFrom")
    def pg_service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_service_to_fork_from")

    @pg_service_to_fork_from.setter
    def pg_service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_service_to_fork_from", value)

    @property
    @pulumi.getter(name="pgVersion")
    def pg_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_version")

    @pg_version.setter
    def pg_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_version", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input['ServicePgUserConfigPgbouncerArgs']]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input['ServicePgUserConfigPgbouncerArgs']]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def pglookout(self) -> Optional[pulumi.Input['ServicePgUserConfigPglookoutArgs']]:
        return pulumi.get(self, "pglookout")

    @pglookout.setter
    def pglookout(self, value: Optional[pulumi.Input['ServicePgUserConfigPglookoutArgs']]):
        pulumi.set(self, "pglookout", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServicePgUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServicePgUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="privatelinkAccess")
    def privatelink_access(self) -> Optional[pulumi.Input['ServicePgUserConfigPrivatelinkAccessArgs']]:
        return pulumi.get(self, "privatelink_access")

    @privatelink_access.setter
    def privatelink_access(self, value: Optional[pulumi.Input['ServicePgUserConfigPrivatelinkAccessArgs']]):
        pulumi.set(self, "privatelink_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServicePgUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServicePgUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="sharedBuffersPercentage")
    def shared_buffers_percentage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_buffers_percentage")

    @shared_buffers_percentage.setter
    def shared_buffers_percentage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers_percentage", value)

    @property
    @pulumi.getter(name="synchronousReplication")
    def synchronous_replication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "synchronous_replication")

    @synchronous_replication.setter
    def synchronous_replication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronous_replication", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional[pulumi.Input['ServicePgUserConfigTimescaledbArgs']]:
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional[pulumi.Input['ServicePgUserConfigTimescaledbArgs']]):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


@pulumi.input_type
class ServicePgUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ServicePgUserConfigPgArgs:
    def __init__(__self__, *,
                 autovacuum_analyze_scale_factor: Optional[pulumi.Input[str]] = None,
                 autovacuum_analyze_threshold: Optional[pulumi.Input[str]] = None,
                 autovacuum_freeze_max_age: Optional[pulumi.Input[str]] = None,
                 autovacuum_max_workers: Optional[pulumi.Input[str]] = None,
                 autovacuum_naptime: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_cost_delay: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_cost_limit: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_scale_factor: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_threshold: Optional[pulumi.Input[str]] = None,
                 deadlock_timeout: Optional[pulumi.Input[str]] = None,
                 idle_in_transaction_session_timeout: Optional[pulumi.Input[str]] = None,
                 jit: Optional[pulumi.Input[str]] = None,
                 log_autovacuum_min_duration: Optional[pulumi.Input[str]] = None,
                 log_error_verbosity: Optional[pulumi.Input[str]] = None,
                 log_min_duration_statement: Optional[pulumi.Input[str]] = None,
                 max_files_per_process: Optional[pulumi.Input[str]] = None,
                 max_locks_per_transaction: Optional[pulumi.Input[str]] = None,
                 max_logical_replication_workers: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_pred_locks_per_transaction: Optional[pulumi.Input[str]] = None,
                 max_prepared_transactions: Optional[pulumi.Input[str]] = None,
                 max_replication_slots: Optional[pulumi.Input[str]] = None,
                 max_stack_depth: Optional[pulumi.Input[str]] = None,
                 max_standby_archive_delay: Optional[pulumi.Input[str]] = None,
                 max_standby_streaming_delay: Optional[pulumi.Input[str]] = None,
                 max_wal_senders: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 pg_partman_bgw_dot_interval: Optional[pulumi.Input[str]] = None,
                 pg_partman_bgw_dot_role: Optional[pulumi.Input[str]] = None,
                 pg_stat_statements_track: Optional[pulumi.Input[str]] = None,
                 temp_file_limit: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 track_activity_query_size: Optional[pulumi.Input[str]] = None,
                 track_commit_timestamp: Optional[pulumi.Input[str]] = None,
                 track_functions: Optional[pulumi.Input[str]] = None,
                 wal_sender_timeout: Optional[pulumi.Input[str]] = None,
                 wal_writer_delay: Optional[pulumi.Input[str]] = None):
        if autovacuum_analyze_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_analyze_scale_factor", autovacuum_analyze_scale_factor)
        if autovacuum_analyze_threshold is not None:
            pulumi.set(__self__, "autovacuum_analyze_threshold", autovacuum_analyze_threshold)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_naptime is not None:
            pulumi.set(__self__, "autovacuum_naptime", autovacuum_naptime)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_cost_limit is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_limit", autovacuum_vacuum_cost_limit)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if deadlock_timeout is not None:
            pulumi.set(__self__, "deadlock_timeout", deadlock_timeout)
        if idle_in_transaction_session_timeout is not None:
            pulumi.set(__self__, "idle_in_transaction_session_timeout", idle_in_transaction_session_timeout)
        if jit is not None:
            pulumi.set(__self__, "jit", jit)
        if log_autovacuum_min_duration is not None:
            pulumi.set(__self__, "log_autovacuum_min_duration", log_autovacuum_min_duration)
        if log_error_verbosity is not None:
            pulumi.set(__self__, "log_error_verbosity", log_error_verbosity)
        if log_min_duration_statement is not None:
            pulumi.set(__self__, "log_min_duration_statement", log_min_duration_statement)
        if max_files_per_process is not None:
            pulumi.set(__self__, "max_files_per_process", max_files_per_process)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_logical_replication_workers is not None:
            pulumi.set(__self__, "max_logical_replication_workers", max_logical_replication_workers)
        if max_parallel_workers is not None:
            pulumi.set(__self__, "max_parallel_workers", max_parallel_workers)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_pred_locks_per_transaction is not None:
            pulumi.set(__self__, "max_pred_locks_per_transaction", max_pred_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_replication_slots is not None:
            pulumi.set(__self__, "max_replication_slots", max_replication_slots)
        if max_stack_depth is not None:
            pulumi.set(__self__, "max_stack_depth", max_stack_depth)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if max_wal_senders is not None:
            pulumi.set(__self__, "max_wal_senders", max_wal_senders)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if pg_partman_bgw_dot_interval is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_interval", pg_partman_bgw_dot_interval)
        if pg_partman_bgw_dot_role is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_role", pg_partman_bgw_dot_role)
        if pg_stat_statements_track is not None:
            pulumi.set(__self__, "pg_stat_statements_track", pg_stat_statements_track)
        if temp_file_limit is not None:
            pulumi.set(__self__, "temp_file_limit", temp_file_limit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if track_activity_query_size is not None:
            pulumi.set(__self__, "track_activity_query_size", track_activity_query_size)
        if track_commit_timestamp is not None:
            pulumi.set(__self__, "track_commit_timestamp", track_commit_timestamp)
        if track_functions is not None:
            pulumi.set(__self__, "track_functions", track_functions)
        if wal_sender_timeout is not None:
            pulumi.set(__self__, "wal_sender_timeout", wal_sender_timeout)
        if wal_writer_delay is not None:
            pulumi.set(__self__, "wal_writer_delay", wal_writer_delay)

    @property
    @pulumi.getter(name="autovacuumAnalyzeScaleFactor")
    def autovacuum_analyze_scale_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_analyze_scale_factor")

    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_analyze_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumAnalyzeThreshold")
    def autovacuum_analyze_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_analyze_threshold")

    @autovacuum_analyze_threshold.setter
    def autovacuum_analyze_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_analyze_threshold", value)

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @autovacuum_freeze_max_age.setter
    def autovacuum_freeze_max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_freeze_max_age", value)

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_max_workers")

    @autovacuum_max_workers.setter
    def autovacuum_max_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_max_workers", value)

    @property
    @pulumi.getter(name="autovacuumNaptime")
    def autovacuum_naptime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_naptime")

    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_naptime", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_cost_delay", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostLimit")
    def autovacuum_vacuum_cost_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_cost_limit")

    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_cost_limit", value)

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @autovacuum_vacuum_threshold.setter
    def autovacuum_vacuum_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_threshold", value)

    @property
    @pulumi.getter(name="deadlockTimeout")
    def deadlock_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deadlock_timeout")

    @deadlock_timeout.setter
    def deadlock_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deadlock_timeout", value)

    @property
    @pulumi.getter(name="idleInTransactionSessionTimeout")
    def idle_in_transaction_session_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idle_in_transaction_session_timeout")

    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_in_transaction_session_timeout", value)

    @property
    @pulumi.getter
    def jit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jit")

    @jit.setter
    def jit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit", value)

    @property
    @pulumi.getter(name="logAutovacuumMinDuration")
    def log_autovacuum_min_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_autovacuum_min_duration")

    @log_autovacuum_min_duration.setter
    def log_autovacuum_min_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_autovacuum_min_duration", value)

    @property
    @pulumi.getter(name="logErrorVerbosity")
    def log_error_verbosity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_error_verbosity")

    @log_error_verbosity.setter
    def log_error_verbosity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_error_verbosity", value)

    @property
    @pulumi.getter(name="logMinDurationStatement")
    def log_min_duration_statement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_min_duration_statement")

    @log_min_duration_statement.setter
    def log_min_duration_statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_min_duration_statement", value)

    @property
    @pulumi.getter(name="maxFilesPerProcess")
    def max_files_per_process(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_files_per_process")

    @max_files_per_process.setter
    def max_files_per_process(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_files_per_process", value)

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_locks_per_transaction")

    @max_locks_per_transaction.setter
    def max_locks_per_transaction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxLogicalReplicationWorkers")
    def max_logical_replication_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_logical_replication_workers")

    @max_logical_replication_workers.setter
    def max_logical_replication_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_logical_replication_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkers")
    def max_parallel_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers")

    @max_parallel_workers.setter
    def max_parallel_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxPredLocksPerTransaction")
    def max_pred_locks_per_transaction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_pred_locks_per_transaction")

    @max_pred_locks_per_transaction.setter
    def max_pred_locks_per_transaction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_pred_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_prepared_transactions")

    @max_prepared_transactions.setter
    def max_prepared_transactions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_prepared_transactions", value)

    @property
    @pulumi.getter(name="maxReplicationSlots")
    def max_replication_slots(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_replication_slots")

    @max_replication_slots.setter
    def max_replication_slots(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_replication_slots", value)

    @property
    @pulumi.getter(name="maxStackDepth")
    def max_stack_depth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_stack_depth")

    @max_stack_depth.setter
    def max_stack_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_stack_depth", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter(name="maxWalSenders")
    def max_wal_senders(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_wal_senders")

    @max_wal_senders.setter
    def max_wal_senders(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_wal_senders", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotInterval")
    def pg_partman_bgw_dot_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_partman_bgw_dot_interval")

    @pg_partman_bgw_dot_interval.setter
    def pg_partman_bgw_dot_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_partman_bgw_dot_interval", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotRole")
    def pg_partman_bgw_dot_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_partman_bgw_dot_role")

    @pg_partman_bgw_dot_role.setter
    def pg_partman_bgw_dot_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_partman_bgw_dot_role", value)

    @property
    @pulumi.getter(name="pgStatStatementsTrack")
    def pg_stat_statements_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_stat_statements_track")

    @pg_stat_statements_track.setter
    def pg_stat_statements_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_stat_statements_track", value)

    @property
    @pulumi.getter(name="tempFileLimit")
    def temp_file_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "temp_file_limit")

    @temp_file_limit.setter
    def temp_file_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temp_file_limit", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="trackActivityQuerySize")
    def track_activity_query_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "track_activity_query_size")

    @track_activity_query_size.setter
    def track_activity_query_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_activity_query_size", value)

    @property
    @pulumi.getter(name="trackCommitTimestamp")
    def track_commit_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "track_commit_timestamp")

    @track_commit_timestamp.setter
    def track_commit_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_commit_timestamp", value)

    @property
    @pulumi.getter(name="trackFunctions")
    def track_functions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "track_functions")

    @track_functions.setter
    def track_functions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_functions", value)

    @property
    @pulumi.getter(name="walSenderTimeout")
    def wal_sender_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wal_sender_timeout")

    @wal_sender_timeout.setter
    def wal_sender_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_sender_timeout", value)

    @property
    @pulumi.getter(name="walWriterDelay")
    def wal_writer_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wal_writer_delay")

    @wal_writer_delay.setter
    def wal_writer_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_writer_delay", value)


@pulumi.input_type
class ServicePgUserConfigPgbouncerArgs:
    def __init__(__self__, *,
                 autodb_idle_timeout: Optional[pulumi.Input[str]] = None,
                 autodb_max_db_connections: Optional[pulumi.Input[str]] = None,
                 autodb_pool_mode: Optional[pulumi.Input[str]] = None,
                 autodb_pool_size: Optional[pulumi.Input[str]] = None,
                 ignore_startup_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 min_pool_size: Optional[pulumi.Input[str]] = None,
                 server_idle_timeout: Optional[pulumi.Input[str]] = None,
                 server_lifetime: Optional[pulumi.Input[str]] = None,
                 server_reset_query_always: Optional[pulumi.Input[str]] = None):
        if autodb_idle_timeout is not None:
            pulumi.set(__self__, "autodb_idle_timeout", autodb_idle_timeout)
        if autodb_max_db_connections is not None:
            pulumi.set(__self__, "autodb_max_db_connections", autodb_max_db_connections)
        if autodb_pool_mode is not None:
            pulumi.set(__self__, "autodb_pool_mode", autodb_pool_mode)
        if autodb_pool_size is not None:
            pulumi.set(__self__, "autodb_pool_size", autodb_pool_size)
        if ignore_startup_parameters is not None:
            pulumi.set(__self__, "ignore_startup_parameters", ignore_startup_parameters)
        if min_pool_size is not None:
            pulumi.set(__self__, "min_pool_size", min_pool_size)
        if server_idle_timeout is not None:
            pulumi.set(__self__, "server_idle_timeout", server_idle_timeout)
        if server_lifetime is not None:
            pulumi.set(__self__, "server_lifetime", server_lifetime)
        if server_reset_query_always is not None:
            pulumi.set(__self__, "server_reset_query_always", server_reset_query_always)

    @property
    @pulumi.getter(name="autodbIdleTimeout")
    def autodb_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autodb_idle_timeout")

    @autodb_idle_timeout.setter
    def autodb_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autodb_idle_timeout", value)

    @property
    @pulumi.getter(name="autodbMaxDbConnections")
    def autodb_max_db_connections(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autodb_max_db_connections")

    @autodb_max_db_connections.setter
    def autodb_max_db_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autodb_max_db_connections", value)

    @property
    @pulumi.getter(name="autodbPoolMode")
    def autodb_pool_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autodb_pool_mode")

    @autodb_pool_mode.setter
    def autodb_pool_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autodb_pool_mode", value)

    @property
    @pulumi.getter(name="autodbPoolSize")
    def autodb_pool_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autodb_pool_size")

    @autodb_pool_size.setter
    def autodb_pool_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autodb_pool_size", value)

    @property
    @pulumi.getter(name="ignoreStartupParameters")
    def ignore_startup_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore_startup_parameters")

    @ignore_startup_parameters.setter
    def ignore_startup_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore_startup_parameters", value)

    @property
    @pulumi.getter(name="minPoolSize")
    def min_pool_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_pool_size")

    @min_pool_size.setter
    def min_pool_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_pool_size", value)

    @property
    @pulumi.getter(name="serverIdleTimeout")
    def server_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_idle_timeout")

    @server_idle_timeout.setter
    def server_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_idle_timeout", value)

    @property
    @pulumi.getter(name="serverLifetime")
    def server_lifetime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_lifetime")

    @server_lifetime.setter
    def server_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_lifetime", value)

    @property
    @pulumi.getter(name="serverResetQueryAlways")
    def server_reset_query_always(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_reset_query_always")

    @server_reset_query_always.setter
    def server_reset_query_always(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_reset_query_always", value)


@pulumi.input_type
class ServicePgUserConfigPglookoutArgs:
    def __init__(__self__, *,
                 max_failover_replication_time_lag: Optional[pulumi.Input[str]] = None):
        if max_failover_replication_time_lag is not None:
            pulumi.set(__self__, "max_failover_replication_time_lag", max_failover_replication_time_lag)

    @property
    @pulumi.getter(name="maxFailoverReplicationTimeLag")
    def max_failover_replication_time_lag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_failover_replication_time_lag")

    @max_failover_replication_time_lag.setter
    def max_failover_replication_time_lag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_failover_replication_time_lag", value)


@pulumi.input_type
class ServicePgUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServicePgUserConfigPrivatelinkAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)


@pulumi.input_type
class ServicePgUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServicePgUserConfigTimescaledbArgs:
    def __init__(__self__, *,
                 max_background_workers: Optional[pulumi.Input[str]] = None):
        if max_background_workers is not None:
            pulumi.set(__self__, "max_background_workers", max_background_workers)

    @property
    @pulumi.getter(name="maxBackgroundWorkers")
    def max_background_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_background_workers")

    @max_background_workers.setter
    def max_background_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_background_workers", value)


@pulumi.input_type
class ServiceRedisArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceRedisUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 migration: Optional[pulumi.Input['ServiceRedisUserConfigMigrationArgs']] = None,
                 private_access: Optional[pulumi.Input['ServiceRedisUserConfigPrivateAccessArgs']] = None,
                 project_to_fork_from: Optional[pulumi.Input[str]] = None,
                 public_access: Optional[pulumi.Input['ServiceRedisUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 redis_io_threads: Optional[pulumi.Input[str]] = None,
                 redis_lfu_decay_time: Optional[pulumi.Input[str]] = None,
                 redis_lfu_log_factor: Optional[pulumi.Input[str]] = None,
                 redis_maxmemory_policy: Optional[pulumi.Input[str]] = None,
                 redis_notify_keyspace_events: Optional[pulumi.Input[str]] = None,
                 redis_ssl: Optional[pulumi.Input[str]] = None,
                 redis_timeout: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if redis_io_threads is not None:
            pulumi.set(__self__, "redis_io_threads", redis_io_threads)
        if redis_lfu_decay_time is not None:
            pulumi.set(__self__, "redis_lfu_decay_time", redis_lfu_decay_time)
        if redis_lfu_log_factor is not None:
            pulumi.set(__self__, "redis_lfu_log_factor", redis_lfu_log_factor)
        if redis_maxmemory_policy is not None:
            pulumi.set(__self__, "redis_maxmemory_policy", redis_maxmemory_policy)
        if redis_notify_keyspace_events is not None:
            pulumi.set(__self__, "redis_notify_keyspace_events", redis_notify_keyspace_events)
        if redis_ssl is not None:
            pulumi.set(__self__, "redis_ssl", redis_ssl)
        if redis_timeout is not None:
            pulumi.set(__self__, "redis_timeout", redis_timeout)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional[pulumi.Input['ServiceRedisUserConfigMigrationArgs']]:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional[pulumi.Input['ServiceRedisUserConfigMigrationArgs']]):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceRedisUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceRedisUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceRedisUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceRedisUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="redisIoThreads")
    def redis_io_threads(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_io_threads")

    @redis_io_threads.setter
    def redis_io_threads(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_io_threads", value)

    @property
    @pulumi.getter(name="redisLfuDecayTime")
    def redis_lfu_decay_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_lfu_decay_time")

    @redis_lfu_decay_time.setter
    def redis_lfu_decay_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_lfu_decay_time", value)

    @property
    @pulumi.getter(name="redisLfuLogFactor")
    def redis_lfu_log_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_lfu_log_factor")

    @redis_lfu_log_factor.setter
    def redis_lfu_log_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_lfu_log_factor", value)

    @property
    @pulumi.getter(name="redisMaxmemoryPolicy")
    def redis_maxmemory_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_maxmemory_policy")

    @redis_maxmemory_policy.setter
    def redis_maxmemory_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_maxmemory_policy", value)

    @property
    @pulumi.getter(name="redisNotifyKeyspaceEvents")
    def redis_notify_keyspace_events(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_notify_keyspace_events")

    @redis_notify_keyspace_events.setter
    def redis_notify_keyspace_events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_notify_keyspace_events", value)

    @property
    @pulumi.getter(name="redisSsl")
    def redis_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_ssl")

    @redis_ssl.setter
    def redis_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_ssl", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_timeout", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceRedisUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ServiceRedisUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class ServiceRedisUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class ServiceServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetCassandaCassandraArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetCassandaCassandraUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[Sequence[str]] = None,
                 migrate_sstableloader: Optional[str] = None,
                 private_access: Optional['GetCassandaCassandraUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetCassandaCassandraUserConfigPublicAccessArgs'] = None,
                 service_to_fork_from: Optional[str] = None):
        """
        :param Sequence[str] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param str migrate_sstableloader: sets the service into migration mode enabling the sstableloader 
               utility to be used to upload Cassandra data files. Available only on service create.
        :param 'GetCassandaCassandraUserConfigPrivateAccessArgs' private_access: Allow access to selected service ports from private networks.
        :param 'GetCassandaCassandraUserConfigPublicAccessArgs' public_access: Allow access to selected service ports from the public Internet
        :param str service_to_fork_from: Name of another service to fork from. This has effect only 
               when a new service is being created.
        """
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migrate_sstableloader is not None:
            pulumi.set(__self__, "migrate_sstableloader", migrate_sstableloader)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="migrateSstableloader")
    def migrate_sstableloader(self) -> Optional[str]:
        """
        sets the service into migration mode enabling the sstableloader 
        utility to be used to upload Cassandra data files. Available only on service create.
        """
        return pulumi.get(self, "migrate_sstableloader")

    @migrate_sstableloader.setter
    def migrate_sstableloader(self, value: Optional[str]):
        pulumi.set(self, "migrate_sstableloader", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetCassandaCassandraUserConfigPrivateAccessArgs']:
        """
        Allow access to selected service ports from private networks.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetCassandaCassandraUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetCassandaCassandraUserConfigPublicAccessArgs']:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetCassandaCassandraUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        """
        Name of another service to fork from. This has effect only 
        when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetCassandaCassandraUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        """
        :param str prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network.
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetCassandaCassandraUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        """
        :param str prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network.
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetCassandaComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetCassandaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetElasticSearchAclAclArgs:
    def __init__(__self__, *,
                 rules: Sequence['GetElasticSearchAclAclRuleArgs'],
                 username: str):
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['GetElasticSearchAclAclRuleArgs']:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Sequence['GetElasticSearchAclAclRuleArgs']):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: str):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetElasticSearchAclAclRuleArgs:
    def __init__(__self__, *,
                 index: str,
                 permission: str):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "permission", permission)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: str):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: str):
        pulumi.set(self, "permission", value)


@pulumi.input_type
class GetElasticSearchComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetElasticSearchElasticsearchArgs:
    def __init__(__self__, *,
                 kibana_uri: str):
        """
        :param str kibana_uri: URI for Kibana frontend.
        """
        pulumi.set(__self__, "kibana_uri", kibana_uri)

    @property
    @pulumi.getter(name="kibanaUri")
    def kibana_uri(self) -> str:
        """
        URI for Kibana frontend.
        """
        return pulumi.get(self, "kibana_uri")

    @kibana_uri.setter
    def kibana_uri(self, value: str):
        pulumi.set(self, "kibana_uri", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 disable_replication_factor_adjustment: Optional[str] = None,
                 elasticsearch: Optional['GetElasticSearchElasticsearchUserConfigElasticsearchArgs'] = None,
                 elasticsearch_version: Optional[str] = None,
                 index_patterns: Optional[Sequence['GetElasticSearchElasticsearchUserConfigIndexPatternArgs']] = None,
                 index_template: Optional['GetElasticSearchElasticsearchUserConfigIndexTemplateArgs'] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 kibana: Optional['GetElasticSearchElasticsearchUserConfigKibanaArgs'] = None,
                 max_index_count: Optional[str] = None,
                 private_access: Optional['GetElasticSearchElasticsearchUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetElasticSearchElasticsearchUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        """
        :param str custom_domain: Serve the web frontend using a custom CNAME pointing to the 
               Aiven DNS name.
        :param str disable_replication_factor_adjustment: Disable automatic replication factor 
               adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at
               least to two nodes. Note: setting this to true increases a risk of data loss in case of
               virtual machine failure.
        :param 'GetElasticSearchElasticsearchUserConfigElasticsearchArgs' elasticsearch: Elasticsearch specific server provided values.
        :param str elasticsearch_version: Elasticsearch major version.
        :param Sequence['GetElasticSearchElasticsearchUserConfigIndexPatternArgs'] index_patterns: Glob pattern and number of indexes matching that pattern to 
               be kept.
        :param 'GetElasticSearchElasticsearchUserConfigIndexTemplateArgs' index_template: Template settings for all new indexe.
        :param Sequence[str] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param 'GetElasticSearchElasticsearchUserConfigKibanaArgs' kibana: Allow clients to connect to kibana from the public internet for 
               service nodes that are in a project VPC or another type of private network.
        :param str max_index_count: Maximum number of indexes to keep before deleting the oldest one.
        :param 'GetElasticSearchElasticsearchUserConfigPrivateAccessArgs' private_access: Allow access to selected service ports from private networks.
        :param str project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param 'GetElasticSearchElasticsearchUserConfigPublicAccessArgs' public_access: Allow access to selected service ports from the public Internet.
        :param str recovery_basebackup_name: Name of the basebackup to restore in forked service.
        :param str service_to_fork_from: Name of another service to fork from. This has effect 
               only when a new service is being created.
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if disable_replication_factor_adjustment is not None:
            pulumi.set(__self__, "disable_replication_factor_adjustment", disable_replication_factor_adjustment)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_version is not None:
            pulumi.set(__self__, "elasticsearch_version", elasticsearch_version)
        if index_patterns is not None:
            pulumi.set(__self__, "index_patterns", index_patterns)
        if index_template is not None:
            pulumi.set(__self__, "index_template", index_template)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        """
        Serve the web frontend using a custom CNAME pointing to the 
        Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="disableReplicationFactorAdjustment")
    def disable_replication_factor_adjustment(self) -> Optional[str]:
        """
        Disable automatic replication factor 
        adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at
        least to two nodes. Note: setting this to true increases a risk of data loss in case of
        virtual machine failure.
        """
        return pulumi.get(self, "disable_replication_factor_adjustment")

    @disable_replication_factor_adjustment.setter
    def disable_replication_factor_adjustment(self, value: Optional[str]):
        pulumi.set(self, "disable_replication_factor_adjustment", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional['GetElasticSearchElasticsearchUserConfigElasticsearchArgs']:
        """
        Elasticsearch specific server provided values.
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional['GetElasticSearchElasticsearchUserConfigElasticsearchArgs']):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter(name="elasticsearchVersion")
    def elasticsearch_version(self) -> Optional[str]:
        """
        Elasticsearch major version.
        """
        return pulumi.get(self, "elasticsearch_version")

    @elasticsearch_version.setter
    def elasticsearch_version(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_version", value)

    @property
    @pulumi.getter(name="indexPatterns")
    def index_patterns(self) -> Optional[Sequence['GetElasticSearchElasticsearchUserConfigIndexPatternArgs']]:
        """
        Glob pattern and number of indexes matching that pattern to 
        be kept.
        """
        return pulumi.get(self, "index_patterns")

    @index_patterns.setter
    def index_patterns(self, value: Optional[Sequence['GetElasticSearchElasticsearchUserConfigIndexPatternArgs']]):
        pulumi.set(self, "index_patterns", value)

    @property
    @pulumi.getter(name="indexTemplate")
    def index_template(self) -> Optional['GetElasticSearchElasticsearchUserConfigIndexTemplateArgs']:
        """
        Template settings for all new indexe.
        """
        return pulumi.get(self, "index_template")

    @index_template.setter
    def index_template(self, value: Optional['GetElasticSearchElasticsearchUserConfigIndexTemplateArgs']):
        pulumi.set(self, "index_template", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional['GetElasticSearchElasticsearchUserConfigKibanaArgs']:
        """
        Allow clients to connect to kibana from the public internet for 
        service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional['GetElasticSearchElasticsearchUserConfigKibanaArgs']):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[str]:
        """
        Maximum number of indexes to keep before deleting the oldest one.
        """
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[str]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetElasticSearchElasticsearchUserConfigPrivateAccessArgs']:
        """
        Allow access to selected service ports from private networks.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetElasticSearchElasticsearchUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetElasticSearchElasticsearchUserConfigPublicAccessArgs']:
        """
        Allow access to selected service ports from the public Internet.
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetElasticSearchElasticsearchUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        """
        Name of the basebackup to restore in forked service.
        """
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        """
        Name of another service to fork from. This has effect 
        only when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigElasticsearchArgs:
    def __init__(__self__, *,
                 action_auto_create_index_enabled: Optional[str] = None,
                 action_destructive_requires_name: Optional[str] = None,
                 cluster_max_shards_per_node: Optional[str] = None,
                 http_max_content_length: Optional[str] = None,
                 http_max_header_size: Optional[str] = None,
                 http_max_initial_line_length: Optional[str] = None,
                 indices_fielddata_cache_size: Optional[str] = None,
                 indices_memory_index_buffer_size: Optional[str] = None,
                 indices_queries_cache_size: Optional[str] = None,
                 indices_query_bool_max_clause_count: Optional[str] = None,
                 reindex_remote_whitelists: Optional[Sequence[str]] = None,
                 search_max_buckets: Optional[str] = None,
                 thread_pool_analyze_queue_size: Optional[str] = None,
                 thread_pool_analyze_size: Optional[str] = None,
                 thread_pool_force_merge_size: Optional[str] = None,
                 thread_pool_get_queue_size: Optional[str] = None,
                 thread_pool_get_size: Optional[str] = None,
                 thread_pool_index_queue_size: Optional[str] = None,
                 thread_pool_index_size: Optional[str] = None,
                 thread_pool_search_queue_size: Optional[str] = None,
                 thread_pool_search_size: Optional[str] = None,
                 thread_pool_search_throttled_queue_size: Optional[str] = None,
                 thread_pool_search_throttled_size: Optional[str] = None,
                 thread_pool_write_queue_size: Optional[str] = None,
                 thread_pool_write_size: Optional[str] = None):
        """
        :param str action_auto_create_index_enabled: Explicitly allow or block automatic 
               creation of indices. Defaults to true
        :param str action_destructive_requires_name: Require explicit index names when deleting
        :param str cluster_max_shards_per_node: Controls the number of shards allowed in the 
               cluster per data node
        :param str http_max_content_length: Maximum content length for HTTP requests to 
               the Elasticsearch HTTP API, in bytes.
        :param str http_max_header_size: The max size of allowed headers, in bytes.
        :param str http_max_initial_line_length: The max length of an HTTP URL, in bytes.
        :param str indices_fielddata_cache_size: Relative amount. Maximum amount of 
               heap memory used for field data cache. This is an expert setting; decreasing the
               value too much will increase overhead of loading field data; too much memory used
               for field data cache will decrease amount of heap available for other operations.
        :param str indices_memory_index_buffer_size: Percentage value. Default is 10%. 
               Total amount of heap used for indexing buffer, before writing segments to disk.
               This is an expert setting. Too low value will slow down indexing; too high value
               will increase indexing performance but causes performance issues for query performance.
        :param str indices_queries_cache_size: Percentage value. Default is 10%. 
               Maximum amount of heap used for query cache. This is an expert setting.
               Too low value will decrease query performance and increase performance for other
               operations; too high value will cause issues with other Elasticsearch functionality.
        :param str indices_query_bool_max_clause_count: Maximum number of clauses Lucene 
               BooleanQuery can have. The default value (1024) is relatively high, and increasing it
               may cause performance issues. Investigate other approaches first before increasing this value.
        :param Sequence[str] reindex_remote_whitelists: Whitelisted addresses for reindexing. 
               Changing this value will cause all Elasticsearch instances to restart.
        :param str search_max_buckets: Maximum number of aggregation buckets allowed 
               in a single response. Elasticsearch default value is used when this is not defined.
        :param str thread_pool_analyze_queue_size: Size for the thread pool queue. 
               See documentation for exact details.
        :param str thread_pool_analyze_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count -
               value is automatically lowered if set to higher than maximum value.
        :param str thread_pool_force_merge_size: Size for the thread pool. See 
               documentation for exact details. Do note this may have maximum value depending on
               CPU count - value is automatically lowered if set to higher than maximum value.
        :param str thread_pool_get_queue_size: Size for the thread pool queue. See 
               documentation for exact details.
        :param str thread_pool_get_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count -
               value is automatically lowered if set to higher than maximum value.
        :param str thread_pool_index_queue_size: Size for the thread pool queue. 
               See documentation for exact details.
        :param str thread_pool_index_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count -
               value is automatically lowered if set to higher than maximum value.
        :param str thread_pool_search_queue_size: Size for the thread pool queue. See 
               documentation for exact details.
        :param str thread_pool_search_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count - value
               is automatically lowered if set to higher than maximum value.
        :param str thread_pool_search_throttled_queue_size: Size for the thread pool queue. 
               See documentation for exact details.
        :param str thread_pool_search_throttled_size: Size for the thread pool. See 
               documentation for exact details. Do note this may have maximum value depending on
               CPU count - value is automatically lowered if set to higher than maximum value.
        :param str thread_pool_write_queue_size: Size for the thread pool queue. See 
               documentation for exact details.
        :param str thread_pool_write_size: Size for the thread pool. See documentation 
               for exact details. Do note this may have maximum value depending on CPU count - value
               is automatically lowered if set to higher than maximum value.
        """
        if action_auto_create_index_enabled is not None:
            pulumi.set(__self__, "action_auto_create_index_enabled", action_auto_create_index_enabled)
        if action_destructive_requires_name is not None:
            pulumi.set(__self__, "action_destructive_requires_name", action_destructive_requires_name)
        if cluster_max_shards_per_node is not None:
            pulumi.set(__self__, "cluster_max_shards_per_node", cluster_max_shards_per_node)
        if http_max_content_length is not None:
            pulumi.set(__self__, "http_max_content_length", http_max_content_length)
        if http_max_header_size is not None:
            pulumi.set(__self__, "http_max_header_size", http_max_header_size)
        if http_max_initial_line_length is not None:
            pulumi.set(__self__, "http_max_initial_line_length", http_max_initial_line_length)
        if indices_fielddata_cache_size is not None:
            pulumi.set(__self__, "indices_fielddata_cache_size", indices_fielddata_cache_size)
        if indices_memory_index_buffer_size is not None:
            pulumi.set(__self__, "indices_memory_index_buffer_size", indices_memory_index_buffer_size)
        if indices_queries_cache_size is not None:
            pulumi.set(__self__, "indices_queries_cache_size", indices_queries_cache_size)
        if indices_query_bool_max_clause_count is not None:
            pulumi.set(__self__, "indices_query_bool_max_clause_count", indices_query_bool_max_clause_count)
        if reindex_remote_whitelists is not None:
            pulumi.set(__self__, "reindex_remote_whitelists", reindex_remote_whitelists)
        if search_max_buckets is not None:
            pulumi.set(__self__, "search_max_buckets", search_max_buckets)
        if thread_pool_analyze_queue_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_queue_size", thread_pool_analyze_queue_size)
        if thread_pool_analyze_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_size", thread_pool_analyze_size)
        if thread_pool_force_merge_size is not None:
            pulumi.set(__self__, "thread_pool_force_merge_size", thread_pool_force_merge_size)
        if thread_pool_get_queue_size is not None:
            pulumi.set(__self__, "thread_pool_get_queue_size", thread_pool_get_queue_size)
        if thread_pool_get_size is not None:
            pulumi.set(__self__, "thread_pool_get_size", thread_pool_get_size)
        if thread_pool_index_queue_size is not None:
            pulumi.set(__self__, "thread_pool_index_queue_size", thread_pool_index_queue_size)
        if thread_pool_index_size is not None:
            pulumi.set(__self__, "thread_pool_index_size", thread_pool_index_size)
        if thread_pool_search_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_queue_size", thread_pool_search_queue_size)
        if thread_pool_search_size is not None:
            pulumi.set(__self__, "thread_pool_search_size", thread_pool_search_size)
        if thread_pool_search_throttled_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_queue_size", thread_pool_search_throttled_queue_size)
        if thread_pool_search_throttled_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_size", thread_pool_search_throttled_size)
        if thread_pool_write_queue_size is not None:
            pulumi.set(__self__, "thread_pool_write_queue_size", thread_pool_write_queue_size)
        if thread_pool_write_size is not None:
            pulumi.set(__self__, "thread_pool_write_size", thread_pool_write_size)

    @property
    @pulumi.getter(name="actionAutoCreateIndexEnabled")
    def action_auto_create_index_enabled(self) -> Optional[str]:
        """
        Explicitly allow or block automatic 
        creation of indices. Defaults to true
        """
        return pulumi.get(self, "action_auto_create_index_enabled")

    @action_auto_create_index_enabled.setter
    def action_auto_create_index_enabled(self, value: Optional[str]):
        pulumi.set(self, "action_auto_create_index_enabled", value)

    @property
    @pulumi.getter(name="actionDestructiveRequiresName")
    def action_destructive_requires_name(self) -> Optional[str]:
        """
        Require explicit index names when deleting
        """
        return pulumi.get(self, "action_destructive_requires_name")

    @action_destructive_requires_name.setter
    def action_destructive_requires_name(self, value: Optional[str]):
        pulumi.set(self, "action_destructive_requires_name", value)

    @property
    @pulumi.getter(name="clusterMaxShardsPerNode")
    def cluster_max_shards_per_node(self) -> Optional[str]:
        """
        Controls the number of shards allowed in the 
        cluster per data node
        """
        return pulumi.get(self, "cluster_max_shards_per_node")

    @cluster_max_shards_per_node.setter
    def cluster_max_shards_per_node(self, value: Optional[str]):
        pulumi.set(self, "cluster_max_shards_per_node", value)

    @property
    @pulumi.getter(name="httpMaxContentLength")
    def http_max_content_length(self) -> Optional[str]:
        """
        Maximum content length for HTTP requests to 
        the Elasticsearch HTTP API, in bytes.
        """
        return pulumi.get(self, "http_max_content_length")

    @http_max_content_length.setter
    def http_max_content_length(self, value: Optional[str]):
        pulumi.set(self, "http_max_content_length", value)

    @property
    @pulumi.getter(name="httpMaxHeaderSize")
    def http_max_header_size(self) -> Optional[str]:
        """
        The max size of allowed headers, in bytes.
        """
        return pulumi.get(self, "http_max_header_size")

    @http_max_header_size.setter
    def http_max_header_size(self, value: Optional[str]):
        pulumi.set(self, "http_max_header_size", value)

    @property
    @pulumi.getter(name="httpMaxInitialLineLength")
    def http_max_initial_line_length(self) -> Optional[str]:
        """
        The max length of an HTTP URL, in bytes.
        """
        return pulumi.get(self, "http_max_initial_line_length")

    @http_max_initial_line_length.setter
    def http_max_initial_line_length(self, value: Optional[str]):
        pulumi.set(self, "http_max_initial_line_length", value)

    @property
    @pulumi.getter(name="indicesFielddataCacheSize")
    def indices_fielddata_cache_size(self) -> Optional[str]:
        """
        Relative amount. Maximum amount of 
        heap memory used for field data cache. This is an expert setting; decreasing the
        value too much will increase overhead of loading field data; too much memory used
        for field data cache will decrease amount of heap available for other operations.
        """
        return pulumi.get(self, "indices_fielddata_cache_size")

    @indices_fielddata_cache_size.setter
    def indices_fielddata_cache_size(self, value: Optional[str]):
        pulumi.set(self, "indices_fielddata_cache_size", value)

    @property
    @pulumi.getter(name="indicesMemoryIndexBufferSize")
    def indices_memory_index_buffer_size(self) -> Optional[str]:
        """
        Percentage value. Default is 10%. 
        Total amount of heap used for indexing buffer, before writing segments to disk.
        This is an expert setting. Too low value will slow down indexing; too high value
        will increase indexing performance but causes performance issues for query performance.
        """
        return pulumi.get(self, "indices_memory_index_buffer_size")

    @indices_memory_index_buffer_size.setter
    def indices_memory_index_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "indices_memory_index_buffer_size", value)

    @property
    @pulumi.getter(name="indicesQueriesCacheSize")
    def indices_queries_cache_size(self) -> Optional[str]:
        """
        Percentage value. Default is 10%. 
        Maximum amount of heap used for query cache. This is an expert setting.
        Too low value will decrease query performance and increase performance for other
        operations; too high value will cause issues with other Elasticsearch functionality.
        """
        return pulumi.get(self, "indices_queries_cache_size")

    @indices_queries_cache_size.setter
    def indices_queries_cache_size(self, value: Optional[str]):
        pulumi.set(self, "indices_queries_cache_size", value)

    @property
    @pulumi.getter(name="indicesQueryBoolMaxClauseCount")
    def indices_query_bool_max_clause_count(self) -> Optional[str]:
        """
        Maximum number of clauses Lucene 
        BooleanQuery can have. The default value (1024) is relatively high, and increasing it
        may cause performance issues. Investigate other approaches first before increasing this value.
        """
        return pulumi.get(self, "indices_query_bool_max_clause_count")

    @indices_query_bool_max_clause_count.setter
    def indices_query_bool_max_clause_count(self, value: Optional[str]):
        pulumi.set(self, "indices_query_bool_max_clause_count", value)

    @property
    @pulumi.getter(name="reindexRemoteWhitelists")
    def reindex_remote_whitelists(self) -> Optional[Sequence[str]]:
        """
        Whitelisted addresses for reindexing. 
        Changing this value will cause all Elasticsearch instances to restart.
        """
        return pulumi.get(self, "reindex_remote_whitelists")

    @reindex_remote_whitelists.setter
    def reindex_remote_whitelists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "reindex_remote_whitelists", value)

    @property
    @pulumi.getter(name="searchMaxBuckets")
    def search_max_buckets(self) -> Optional[str]:
        """
        Maximum number of aggregation buckets allowed 
        in a single response. Elasticsearch default value is used when this is not defined.
        """
        return pulumi.get(self, "search_max_buckets")

    @search_max_buckets.setter
    def search_max_buckets(self, value: Optional[str]):
        pulumi.set(self, "search_max_buckets", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeQueueSize")
    def thread_pool_analyze_queue_size(self) -> Optional[str]:
        """
        Size for the thread pool queue. 
        See documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_analyze_queue_size")

    @thread_pool_analyze_queue_size.setter
    def thread_pool_analyze_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_analyze_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeSize")
    def thread_pool_analyze_size(self) -> Optional[str]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count -
        value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_analyze_size")

    @thread_pool_analyze_size.setter
    def thread_pool_analyze_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_analyze_size", value)

    @property
    @pulumi.getter(name="threadPoolForceMergeSize")
    def thread_pool_force_merge_size(self) -> Optional[str]:
        """
        Size for the thread pool. See 
        documentation for exact details. Do note this may have maximum value depending on
        CPU count - value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_force_merge_size")

    @thread_pool_force_merge_size.setter
    def thread_pool_force_merge_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_force_merge_size", value)

    @property
    @pulumi.getter(name="threadPoolGetQueueSize")
    def thread_pool_get_queue_size(self) -> Optional[str]:
        """
        Size for the thread pool queue. See 
        documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_get_queue_size")

    @thread_pool_get_queue_size.setter
    def thread_pool_get_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_get_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolGetSize")
    def thread_pool_get_size(self) -> Optional[str]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count -
        value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_get_size")

    @thread_pool_get_size.setter
    def thread_pool_get_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_get_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexQueueSize")
    def thread_pool_index_queue_size(self) -> Optional[str]:
        """
        Size for the thread pool queue. 
        See documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_index_queue_size")

    @thread_pool_index_queue_size.setter
    def thread_pool_index_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_index_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexSize")
    def thread_pool_index_size(self) -> Optional[str]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count -
        value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_index_size")

    @thread_pool_index_size.setter
    def thread_pool_index_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_index_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchQueueSize")
    def thread_pool_search_queue_size(self) -> Optional[str]:
        """
        Size for the thread pool queue. See 
        documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_search_queue_size")

    @thread_pool_search_queue_size.setter
    def thread_pool_search_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchSize")
    def thread_pool_search_size(self) -> Optional[str]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count - value
        is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_search_size")

    @thread_pool_search_size.setter
    def thread_pool_search_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledQueueSize")
    def thread_pool_search_throttled_queue_size(self) -> Optional[str]:
        """
        Size for the thread pool queue. 
        See documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_search_throttled_queue_size")

    @thread_pool_search_throttled_queue_size.setter
    def thread_pool_search_throttled_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_throttled_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledSize")
    def thread_pool_search_throttled_size(self) -> Optional[str]:
        """
        Size for the thread pool. See 
        documentation for exact details. Do note this may have maximum value depending on
        CPU count - value is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_search_throttled_size")

    @thread_pool_search_throttled_size.setter
    def thread_pool_search_throttled_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_throttled_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteQueueSize")
    def thread_pool_write_queue_size(self) -> Optional[str]:
        """
        Size for the thread pool queue. See 
        documentation for exact details.
        """
        return pulumi.get(self, "thread_pool_write_queue_size")

    @thread_pool_write_queue_size.setter
    def thread_pool_write_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_write_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteSize")
    def thread_pool_write_size(self) -> Optional[str]:
        """
        Size for the thread pool. See documentation 
        for exact details. Do note this may have maximum value depending on CPU count - value
        is automatically lowered if set to higher than maximum value.
        """
        return pulumi.get(self, "thread_pool_write_size")

    @thread_pool_write_size.setter
    def thread_pool_write_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_write_size", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigIndexPatternArgs:
    def __init__(__self__, *,
                 max_index_count: Optional[str] = None,
                 pattern: Optional[str] = None):
        """
        :param str max_index_count: Maximum number of indexes to keep before deleting the oldest one.
        :param str pattern: Must consist of alpha-numeric characters, dashes, underscores, 
               dots and glob characters (* and ?)
        """
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[str]:
        """
        Maximum number of indexes to keep before deleting the oldest one.
        """
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[str]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        Must consist of alpha-numeric characters, dashes, underscores, 
        dots and glob characters (* and ?)
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[str]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigIndexTemplateArgs:
    def __init__(__self__, *,
                 mapping_nested_objects_limit: Optional[str] = None,
                 number_of_replicas: Optional[str] = None,
                 number_of_shards: Optional[str] = None):
        """
        :param str mapping_nested_objects_limit: The maximum number of nested JSON objects that
               a single document can contain across all nested types. This limit helps to prevent out of
               memory errors when a document contains too many nested objects. Default is 10000.
        :param str number_of_replicas: The number of replicas each primary shard has.
        :param str number_of_shards: The number of primary shards that an index should have.
        """
        if mapping_nested_objects_limit is not None:
            pulumi.set(__self__, "mapping_nested_objects_limit", mapping_nested_objects_limit)
        if number_of_replicas is not None:
            pulumi.set(__self__, "number_of_replicas", number_of_replicas)
        if number_of_shards is not None:
            pulumi.set(__self__, "number_of_shards", number_of_shards)

    @property
    @pulumi.getter(name="mappingNestedObjectsLimit")
    def mapping_nested_objects_limit(self) -> Optional[str]:
        """
        The maximum number of nested JSON objects that
        a single document can contain across all nested types. This limit helps to prevent out of
        memory errors when a document contains too many nested objects. Default is 10000.
        """
        return pulumi.get(self, "mapping_nested_objects_limit")

    @mapping_nested_objects_limit.setter
    def mapping_nested_objects_limit(self, value: Optional[str]):
        pulumi.set(self, "mapping_nested_objects_limit", value)

    @property
    @pulumi.getter(name="numberOfReplicas")
    def number_of_replicas(self) -> Optional[str]:
        """
        The number of replicas each primary shard has.
        """
        return pulumi.get(self, "number_of_replicas")

    @number_of_replicas.setter
    def number_of_replicas(self, value: Optional[str]):
        pulumi.set(self, "number_of_replicas", value)

    @property
    @pulumi.getter(name="numberOfShards")
    def number_of_shards(self) -> Optional[str]:
        """
        The number of primary shards that an index should have.
        """
        return pulumi.get(self, "number_of_shards")

    @number_of_shards.setter
    def number_of_shards(self, value: Optional[str]):
        pulumi.set(self, "number_of_shards", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigKibanaArgs:
    def __init__(__self__, *,
                 elasticsearch_request_timeout: Optional[str] = None,
                 enabled: Optional[str] = None,
                 max_old_space_size: Optional[str] = None):
        """
        :param str elasticsearch_request_timeout: Timeout in milliseconds for requests 
               made by Kibana towards Elasticsearch.
        :param str enabled: Enable or disable Kibana.
        :param str max_old_space_size: Limits the maximum amount of memory (in MiB) the 
               Kibana process can use. This sets the max_old_space_size option of the nodejs running
               the Kibana. Note: the memory reserved by Kibana is not available for Elasticsearch.
        """
        if elasticsearch_request_timeout is not None:
            pulumi.set(__self__, "elasticsearch_request_timeout", elasticsearch_request_timeout)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_old_space_size is not None:
            pulumi.set(__self__, "max_old_space_size", max_old_space_size)

    @property
    @pulumi.getter(name="elasticsearchRequestTimeout")
    def elasticsearch_request_timeout(self) -> Optional[str]:
        """
        Timeout in milliseconds for requests 
        made by Kibana towards Elasticsearch.
        """
        return pulumi.get(self, "elasticsearch_request_timeout")

    @elasticsearch_request_timeout.setter
    def elasticsearch_request_timeout(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_request_timeout", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        """
        Enable or disable Kibana.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxOldSpaceSize")
    def max_old_space_size(self) -> Optional[str]:
        """
        Limits the maximum amount of memory (in MiB) the 
        Kibana process can use. This sets the max_old_space_size option of the nodejs running
        the Kibana. Note: the memory reserved by Kibana is not available for Elasticsearch.
        """
        return pulumi.get(self, "max_old_space_size")

    @max_old_space_size.setter
    def max_old_space_size(self, value: Optional[str]):
        pulumi.set(self, "max_old_space_size", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[str] = None,
                 kibana: Optional[str] = None,
                 prometheus: Optional[str] = None):
        """
        :param str elasticsearch: Elasticsearch specific server provided values.
        :param str kibana: Allow clients to connect to kibana from the public internet for 
               service nodes that are in a project VPC or another type of private network.
        :param str prometheus: Allow clients to connect to prometheus from the public 
               internet for service nodes that are in a project VPC or another type of private network.
        """
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[str]:
        """
        Elasticsearch specific server provided values.
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[str]:
        """
        Allow clients to connect to kibana from the public internet for 
        service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[str]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public 
        internet for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[str] = None,
                 kibana: Optional[str] = None,
                 prometheus: Optional[str] = None):
        """
        :param str elasticsearch: Elasticsearch specific server provided values.
        :param str kibana: Allow clients to connect to kibana from the public internet for 
               service nodes that are in a project VPC or another type of private network.
        :param str prometheus: Allow clients to connect to prometheus from the public 
               internet for service nodes that are in a project VPC or another type of private network.
        """
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[str]:
        """
        Elasticsearch specific server provided values.
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[str]:
        """
        Allow clients to connect to kibana from the public internet for 
        service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[str]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public 
        internet for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetElasticSearchServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetGrafanaComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        """
        :param str host: Server hostname or IP
        :param int port: SMTP server port
        """
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Server hostname or IP
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        SMTP server port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetGrafanaGrafanaArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetGrafanaGrafanaUserConfigArgs:
    def __init__(__self__, *,
                 alerting_enabled: Optional[str] = None,
                 alerting_error_or_timeout: Optional[str] = None,
                 alerting_nodata_or_nullvalues: Optional[str] = None,
                 allow_embedding: Optional[str] = None,
                 auth_basic_enabled: Optional[str] = None,
                 auth_generic_oauth: Optional['GetGrafanaGrafanaUserConfigAuthGenericOauthArgs'] = None,
                 auth_github: Optional['GetGrafanaGrafanaUserConfigAuthGithubArgs'] = None,
                 auth_gitlab: Optional['GetGrafanaGrafanaUserConfigAuthGitlabArgs'] = None,
                 auth_google: Optional['GetGrafanaGrafanaUserConfigAuthGoogleArgs'] = None,
                 cookie_samesite: Optional[str] = None,
                 custom_domain: Optional[str] = None,
                 dashboards_versions_to_keep: Optional[str] = None,
                 dataproxy_send_user_header: Optional[str] = None,
                 dataproxy_timeout: Optional[str] = None,
                 disable_gravatar: Optional[str] = None,
                 editors_can_admin: Optional[str] = None,
                 external_image_storage: Optional['GetGrafanaGrafanaUserConfigExternalImageStorageArgs'] = None,
                 google_analytics_ua_id: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 metrics_enabled: Optional[str] = None,
                 private_access: Optional['GetGrafanaGrafanaUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetGrafanaGrafanaUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None,
                 smtp_server: Optional['GetGrafanaGrafanaUserConfigSmtpServerArgs'] = None,
                 user_auto_assign_org: Optional[str] = None,
                 user_auto_assign_org_role: Optional[str] = None,
                 viewers_can_edit: Optional[str] = None):
        """
        :param str alerting_enabled: Enable or disable Grafana alerting functionality
        :param str alerting_error_or_timeout: Default error or timeout setting for new alerting rules
        :param str alerting_nodata_or_nullvalues: Default value for 'no data or null values' for
               new alerting rules
        :param str allow_embedding: Allow embedding Grafana dashboards with iframe/frame/object/embed 
               tags. Disabled by default to limit impact of clickjacking
        :param str auth_basic_enabled: Enable or disable basic authentication form, used by Grafana 
               built-in login.
        :param 'GetGrafanaGrafanaUserConfigAuthGenericOauthArgs' auth_generic_oauth: Generic OAuth integration.
        :param 'GetGrafanaGrafanaUserConfigAuthGithubArgs' auth_github: Automatically sign-up users on successful sign-in
        :param 'GetGrafanaGrafanaUserConfigAuthGitlabArgs' auth_gitlab: GitLab Auth integration.
        :param 'GetGrafanaGrafanaUserConfigAuthGoogleArgs' auth_google: Google Auth integration
        :param str cookie_samesite: Cookie SameSite attribute: 'strict' prevents sending cookie for 
               cross-site requests, effectively disabling direct linking from other sites to Grafana. 'lax' is the default value.
        :param str custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        :param str dashboards_versions_to_keep: Dashboard versions to keep per dashboard.
        :param str dataproxy_send_user_header: Send 'X-Grafana-User' header to data source.
        :param str dataproxy_timeout: Timeout for data proxy requests in seconds.
        :param str disable_gravatar: Set to true to disable gravatar. Defaults to false 
               (gravatar is enabled).
        :param str editors_can_admin: Editors can manage folders, teams and dashboards created by them.
        :param 'GetGrafanaGrafanaUserConfigExternalImageStorageArgs' external_image_storage: External image store settings
        :param str google_analytics_ua_id: Google Analytics Universal Analytics ID for tracking Grafana usage
        :param Sequence[str] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        :param str metrics_enabled: Enable Grafana /metrics endpoint
        :param str project_to_fork_from: Name of another project to fork a service from. This has 
               effect only when a new service is being created.
        :param 'GetGrafanaGrafanaUserConfigPublicAccessArgs' public_access: Allow access to selected service ports from the public Internet.
        :param str recovery_basebackup_name: Name of the basebackup to restore in forked service.
        :param str service_to_fork_from: Name of another service to fork from. This has effect only 
               when a new service is being created.
        :param 'GetGrafanaGrafanaUserConfigSmtpServerArgs' smtp_server: SMTP server settings.
        :param str user_auto_assign_org: Auto-assign new users on signup to main organization. 
               Defaults to false.
        :param str user_auto_assign_org_role: Set role for new signups. Defaults to Viewer.
        :param str viewers_can_edit: Users with view-only permission can edit but not save dashboards.
        """
        if alerting_enabled is not None:
            pulumi.set(__self__, "alerting_enabled", alerting_enabled)
        if alerting_error_or_timeout is not None:
            pulumi.set(__self__, "alerting_error_or_timeout", alerting_error_or_timeout)
        if alerting_nodata_or_nullvalues is not None:
            pulumi.set(__self__, "alerting_nodata_or_nullvalues", alerting_nodata_or_nullvalues)
        if allow_embedding is not None:
            pulumi.set(__self__, "allow_embedding", allow_embedding)
        if auth_basic_enabled is not None:
            pulumi.set(__self__, "auth_basic_enabled", auth_basic_enabled)
        if auth_generic_oauth is not None:
            pulumi.set(__self__, "auth_generic_oauth", auth_generic_oauth)
        if auth_github is not None:
            pulumi.set(__self__, "auth_github", auth_github)
        if auth_gitlab is not None:
            pulumi.set(__self__, "auth_gitlab", auth_gitlab)
        if auth_google is not None:
            pulumi.set(__self__, "auth_google", auth_google)
        if cookie_samesite is not None:
            pulumi.set(__self__, "cookie_samesite", cookie_samesite)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if dashboards_versions_to_keep is not None:
            pulumi.set(__self__, "dashboards_versions_to_keep", dashboards_versions_to_keep)
        if dataproxy_send_user_header is not None:
            pulumi.set(__self__, "dataproxy_send_user_header", dataproxy_send_user_header)
        if dataproxy_timeout is not None:
            pulumi.set(__self__, "dataproxy_timeout", dataproxy_timeout)
        if disable_gravatar is not None:
            pulumi.set(__self__, "disable_gravatar", disable_gravatar)
        if editors_can_admin is not None:
            pulumi.set(__self__, "editors_can_admin", editors_can_admin)
        if external_image_storage is not None:
            pulumi.set(__self__, "external_image_storage", external_image_storage)
        if google_analytics_ua_id is not None:
            pulumi.set(__self__, "google_analytics_ua_id", google_analytics_ua_id)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if smtp_server is not None:
            pulumi.set(__self__, "smtp_server", smtp_server)
        if user_auto_assign_org is not None:
            pulumi.set(__self__, "user_auto_assign_org", user_auto_assign_org)
        if user_auto_assign_org_role is not None:
            pulumi.set(__self__, "user_auto_assign_org_role", user_auto_assign_org_role)
        if viewers_can_edit is not None:
            pulumi.set(__self__, "viewers_can_edit", viewers_can_edit)

    @property
    @pulumi.getter(name="alertingEnabled")
    def alerting_enabled(self) -> Optional[str]:
        """
        Enable or disable Grafana alerting functionality
        """
        return pulumi.get(self, "alerting_enabled")

    @alerting_enabled.setter
    def alerting_enabled(self, value: Optional[str]):
        pulumi.set(self, "alerting_enabled", value)

    @property
    @pulumi.getter(name="alertingErrorOrTimeout")
    def alerting_error_or_timeout(self) -> Optional[str]:
        """
        Default error or timeout setting for new alerting rules
        """
        return pulumi.get(self, "alerting_error_or_timeout")

    @alerting_error_or_timeout.setter
    def alerting_error_or_timeout(self, value: Optional[str]):
        pulumi.set(self, "alerting_error_or_timeout", value)

    @property
    @pulumi.getter(name="alertingNodataOrNullvalues")
    def alerting_nodata_or_nullvalues(self) -> Optional[str]:
        """
        Default value for 'no data or null values' for
        new alerting rules
        """
        return pulumi.get(self, "alerting_nodata_or_nullvalues")

    @alerting_nodata_or_nullvalues.setter
    def alerting_nodata_or_nullvalues(self, value: Optional[str]):
        pulumi.set(self, "alerting_nodata_or_nullvalues", value)

    @property
    @pulumi.getter(name="allowEmbedding")
    def allow_embedding(self) -> Optional[str]:
        """
        Allow embedding Grafana dashboards with iframe/frame/object/embed 
        tags. Disabled by default to limit impact of clickjacking
        """
        return pulumi.get(self, "allow_embedding")

    @allow_embedding.setter
    def allow_embedding(self, value: Optional[str]):
        pulumi.set(self, "allow_embedding", value)

    @property
    @pulumi.getter(name="authBasicEnabled")
    def auth_basic_enabled(self) -> Optional[str]:
        """
        Enable or disable basic authentication form, used by Grafana 
        built-in login.
        """
        return pulumi.get(self, "auth_basic_enabled")

    @auth_basic_enabled.setter
    def auth_basic_enabled(self, value: Optional[str]):
        pulumi.set(self, "auth_basic_enabled", value)

    @property
    @pulumi.getter(name="authGenericOauth")
    def auth_generic_oauth(self) -> Optional['GetGrafanaGrafanaUserConfigAuthGenericOauthArgs']:
        """
        Generic OAuth integration.
        """
        return pulumi.get(self, "auth_generic_oauth")

    @auth_generic_oauth.setter
    def auth_generic_oauth(self, value: Optional['GetGrafanaGrafanaUserConfigAuthGenericOauthArgs']):
        pulumi.set(self, "auth_generic_oauth", value)

    @property
    @pulumi.getter(name="authGithub")
    def auth_github(self) -> Optional['GetGrafanaGrafanaUserConfigAuthGithubArgs']:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "auth_github")

    @auth_github.setter
    def auth_github(self, value: Optional['GetGrafanaGrafanaUserConfigAuthGithubArgs']):
        pulumi.set(self, "auth_github", value)

    @property
    @pulumi.getter(name="authGitlab")
    def auth_gitlab(self) -> Optional['GetGrafanaGrafanaUserConfigAuthGitlabArgs']:
        """
        GitLab Auth integration.
        """
        return pulumi.get(self, "auth_gitlab")

    @auth_gitlab.setter
    def auth_gitlab(self, value: Optional['GetGrafanaGrafanaUserConfigAuthGitlabArgs']):
        pulumi.set(self, "auth_gitlab", value)

    @property
    @pulumi.getter(name="authGoogle")
    def auth_google(self) -> Optional['GetGrafanaGrafanaUserConfigAuthGoogleArgs']:
        """
        Google Auth integration
        """
        return pulumi.get(self, "auth_google")

    @auth_google.setter
    def auth_google(self, value: Optional['GetGrafanaGrafanaUserConfigAuthGoogleArgs']):
        pulumi.set(self, "auth_google", value)

    @property
    @pulumi.getter(name="cookieSamesite")
    def cookie_samesite(self) -> Optional[str]:
        """
        Cookie SameSite attribute: 'strict' prevents sending cookie for 
        cross-site requests, effectively disabling direct linking from other sites to Grafana. 'lax' is the default value.
        """
        return pulumi.get(self, "cookie_samesite")

    @cookie_samesite.setter
    def cookie_samesite(self, value: Optional[str]):
        pulumi.set(self, "cookie_samesite", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="dashboardsVersionsToKeep")
    def dashboards_versions_to_keep(self) -> Optional[str]:
        """
        Dashboard versions to keep per dashboard.
        """
        return pulumi.get(self, "dashboards_versions_to_keep")

    @dashboards_versions_to_keep.setter
    def dashboards_versions_to_keep(self, value: Optional[str]):
        pulumi.set(self, "dashboards_versions_to_keep", value)

    @property
    @pulumi.getter(name="dataproxySendUserHeader")
    def dataproxy_send_user_header(self) -> Optional[str]:
        """
        Send 'X-Grafana-User' header to data source.
        """
        return pulumi.get(self, "dataproxy_send_user_header")

    @dataproxy_send_user_header.setter
    def dataproxy_send_user_header(self, value: Optional[str]):
        pulumi.set(self, "dataproxy_send_user_header", value)

    @property
    @pulumi.getter(name="dataproxyTimeout")
    def dataproxy_timeout(self) -> Optional[str]:
        """
        Timeout for data proxy requests in seconds.
        """
        return pulumi.get(self, "dataproxy_timeout")

    @dataproxy_timeout.setter
    def dataproxy_timeout(self, value: Optional[str]):
        pulumi.set(self, "dataproxy_timeout", value)

    @property
    @pulumi.getter(name="disableGravatar")
    def disable_gravatar(self) -> Optional[str]:
        """
        Set to true to disable gravatar. Defaults to false 
        (gravatar is enabled).
        """
        return pulumi.get(self, "disable_gravatar")

    @disable_gravatar.setter
    def disable_gravatar(self, value: Optional[str]):
        pulumi.set(self, "disable_gravatar", value)

    @property
    @pulumi.getter(name="editorsCanAdmin")
    def editors_can_admin(self) -> Optional[str]:
        """
        Editors can manage folders, teams and dashboards created by them.
        """
        return pulumi.get(self, "editors_can_admin")

    @editors_can_admin.setter
    def editors_can_admin(self, value: Optional[str]):
        pulumi.set(self, "editors_can_admin", value)

    @property
    @pulumi.getter(name="externalImageStorage")
    def external_image_storage(self) -> Optional['GetGrafanaGrafanaUserConfigExternalImageStorageArgs']:
        """
        External image store settings
        """
        return pulumi.get(self, "external_image_storage")

    @external_image_storage.setter
    def external_image_storage(self, value: Optional['GetGrafanaGrafanaUserConfigExternalImageStorageArgs']):
        pulumi.set(self, "external_image_storage", value)

    @property
    @pulumi.getter(name="googleAnalyticsUaId")
    def google_analytics_ua_id(self) -> Optional[str]:
        """
        Google Analytics Universal Analytics ID for tracking Grafana usage
        """
        return pulumi.get(self, "google_analytics_ua_id")

    @google_analytics_ua_id.setter
    def google_analytics_ua_id(self, value: Optional[str]):
        pulumi.set(self, "google_analytics_ua_id", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[str]:
        """
        Enable Grafana /metrics endpoint
        """
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[str]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetGrafanaGrafanaUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetGrafanaGrafanaUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        """
        Name of another project to fork a service from. This has 
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetGrafanaGrafanaUserConfigPublicAccessArgs']:
        """
        Allow access to selected service ports from the public Internet.
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetGrafanaGrafanaUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        """
        Name of the basebackup to restore in forked service.
        """
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        """
        Name of another service to fork from. This has effect only 
        when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="smtpServer")
    def smtp_server(self) -> Optional['GetGrafanaGrafanaUserConfigSmtpServerArgs']:
        """
        SMTP server settings.
        """
        return pulumi.get(self, "smtp_server")

    @smtp_server.setter
    def smtp_server(self, value: Optional['GetGrafanaGrafanaUserConfigSmtpServerArgs']):
        pulumi.set(self, "smtp_server", value)

    @property
    @pulumi.getter(name="userAutoAssignOrg")
    def user_auto_assign_org(self) -> Optional[str]:
        """
        Auto-assign new users on signup to main organization. 
        Defaults to false.
        """
        return pulumi.get(self, "user_auto_assign_org")

    @user_auto_assign_org.setter
    def user_auto_assign_org(self, value: Optional[str]):
        pulumi.set(self, "user_auto_assign_org", value)

    @property
    @pulumi.getter(name="userAutoAssignOrgRole")
    def user_auto_assign_org_role(self) -> Optional[str]:
        """
        Set role for new signups. Defaults to Viewer.
        """
        return pulumi.get(self, "user_auto_assign_org_role")

    @user_auto_assign_org_role.setter
    def user_auto_assign_org_role(self, value: Optional[str]):
        pulumi.set(self, "user_auto_assign_org_role", value)

    @property
    @pulumi.getter(name="viewersCanEdit")
    def viewers_can_edit(self) -> Optional[str]:
        """
        Users with view-only permission can edit but not save dashboards.
        """
        return pulumi.get(self, "viewers_can_edit")

    @viewers_can_edit.setter
    def viewers_can_edit(self, value: Optional[str]):
        pulumi.set(self, "viewers_can_edit", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigAuthGenericOauthArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_domains: Optional[Sequence[str]] = None,
                 allowed_organizations: Optional[Sequence[str]] = None,
                 api_url: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 name: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 token_url: Optional[str] = None):
        """
        :param str allow_sign_up: Automatically sign-up users on successful sign-in
        :param Sequence[str] allowed_domains: Allowed domain
        :param Sequence[str] allowed_organizations: Must consist of alpha-numeric characters and dashes"
        :param str api_url: API URL. This only needs to be set when using self hosted GitLab
        :param str auth_url: Authorization URL. This only needs to be set when using self hosted GitLab
        :param str client_id: Client ID from provider
        :param str client_secret: Client secret from provider
        :param str name: Name of the OAuth integration
        :param Sequence[str] scopes: Scope must be non-empty string without whitespace
        :param str token_url: Token URL. This only needs to be set when using self hosted GitLab
        """
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[Sequence[str]]:
        """
        Allowed domain
        """
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[Sequence[str]]:
        """
        Must consist of alpha-numeric characters and dashes"
        """
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        """
        API URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        """
        Authorization URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        Client ID from provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        """
        Client secret from provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the OAuth integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        """
        Scope must be non-empty string without whitespace
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[str]:
        """
        Token URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigAuthGithubArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_organizations: Optional[Sequence[str]] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 team_ids: Optional[Sequence[str]] = None):
        """
        :param str allow_sign_up: Automatically sign-up users on successful sign-in
        :param Sequence[str] allowed_organizations: Must consist of alpha-numeric characters and dashes"
        :param str client_id: Client ID from provider
        :param str client_secret: Client secret from provider
        :param Sequence[str] team_ids: Require users to belong to one of given team IDs
        """
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if team_ids is not None:
            pulumi.set(__self__, "team_ids", team_ids)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[Sequence[str]]:
        """
        Must consist of alpha-numeric characters and dashes"
        """
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        Client ID from provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        """
        Client secret from provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="teamIds")
    def team_ids(self) -> Optional[Sequence[str]]:
        """
        Require users to belong to one of given team IDs
        """
        return pulumi.get(self, "team_ids")

    @team_ids.setter
    def team_ids(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "team_ids", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigAuthGitlabArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_groups: Optional[Sequence[str]] = None,
                 api_url: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 token_url: Optional[str] = None):
        """
        :param str allow_sign_up: Automatically sign-up users on successful sign-in
        :param Sequence[str] allowed_groups: Require users to belong to one of given groups
        :param str api_url: API URL. This only needs to be set when using self hosted GitLab
        :param str auth_url: Authorization URL. This only needs to be set when using self hosted GitLab
        :param str client_id: Client ID from provider
        :param str client_secret: Client secret from provider
        :param str token_url: Token URL. This only needs to be set when using self hosted GitLab
        """
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_groups is not None:
            pulumi.set(__self__, "allowed_groups", allowed_groups)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedGroups")
    def allowed_groups(self) -> Optional[Sequence[str]]:
        """
        Require users to belong to one of given groups
        """
        return pulumi.get(self, "allowed_groups")

    @allowed_groups.setter
    def allowed_groups(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_groups", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        """
        API URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        """
        Authorization URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        Client ID from provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        """
        Client secret from provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[str]:
        """
        Token URL. This only needs to be set when using self hosted GitLab
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigAuthGoogleArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_domains: Optional[Sequence[str]] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        """
        :param str allow_sign_up: Automatically sign-up users on successful sign-in
        :param Sequence[str] allowed_domains: Allowed domain
        :param str client_id: Client ID from provider
        :param str client_secret: Client secret from provider
        """
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        """
        Automatically sign-up users on successful sign-in
        """
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[Sequence[str]]:
        """
        Allowed domain
        """
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        Client ID from provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        """
        Client secret from provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigExternalImageStorageArgs:
    def __init__(__self__, *,
                 access_key: Optional[str] = None,
                 bucket_url: Optional[str] = None,
                 provider: Optional[str] = None,
                 secret_key: Optional[str] = None):
        """
        :param str access_key: S3 access key. Requires permissions to the S3 bucket for the 
               s3:PutObject and s3:PutObjectAcl actions
        :param str bucket_url: Bucket URL for S3
        :param str provider: Provider type
        :param str secret_key: S3 secret key
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket_url is not None:
            pulumi.set(__self__, "bucket_url", bucket_url)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        S3 access key. Requires permissions to the S3 bucket for the 
        s3:PutObject and s3:PutObjectAcl actions
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> Optional[str]:
        """
        Bucket URL for S3
        """
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: Optional[str]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        """
        Provider type
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[str]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        S3 secret key
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[str] = None):
        """
        :param str grafana: Grafana specific server provided values.
        """
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[str]:
        """
        Grafana specific server provided values.
        """
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[str]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[str] = None):
        """
        :param str grafana: Grafana specific server provided values.
        """
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[str]:
        """
        Grafana specific server provided values.
        """
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[str]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigSmtpServerArgs:
    def __init__(__self__, *,
                 from_address: Optional[str] = None,
                 from_name: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 skip_verify: Optional[str] = None,
                 starttls_policy: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str from_address: Address used for sending emails
        :param str from_name: Name used in outgoing emails, defaults to Grafana
        :param str host: Server hostname or IP
        :param str password: Password for SMTP authentication
        :param str port: SMTP server port
        :param str skip_verify: Skip verifying server certificate. Defaults to false
        :param str starttls_policy: Either OpportunisticStartTLS, MandatoryStartTLS or NoStartTLS. 
               Default is OpportunisticStartTLS.
        :param str username: Username for SMTP authentication
        """
        if from_address is not None:
            pulumi.set(__self__, "from_address", from_address)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if starttls_policy is not None:
            pulumi.set(__self__, "starttls_policy", starttls_policy)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[str]:
        """
        Address used for sending emails
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[str]:
        """
        Name used in outgoing emails, defaults to Grafana
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Server hostname or IP
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password for SMTP authentication
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        SMTP server port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[str]:
        """
        Skip verifying server certificate. Defaults to false
        """
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[str]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter(name="starttlsPolicy")
    def starttls_policy(self) -> Optional[str]:
        """
        Either OpportunisticStartTLS, MandatoryStartTLS or NoStartTLS. 
        Default is OpportunisticStartTLS.
        """
        return pulumi.get(self, "starttls_policy")

    @starttls_policy.setter
    def starttls_policy(self, value: Optional[str]):
        pulumi.set(self, "starttls_policy", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for SMTP authentication
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetGrafanaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetInfluxDbComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetInfluxDbInfluxdbArgs:
    def __init__(__self__, *,
                 database_name: str):
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: str):
        pulumi.set(self, "database_name", value)


@pulumi.input_type
class GetInfluxDbInfluxdbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 influxdb: Optional['GetInfluxDbInfluxdbUserConfigInfluxdbArgs'] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 private_access: Optional['GetInfluxDbInfluxdbUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetInfluxDbInfluxdbUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        """
        :param str custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name
        :param 'GetInfluxDbInfluxdbUserConfigInfluxdbArgs' influxdb: InfluxDB specific server provided values.
        :param Sequence[str] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param 'GetInfluxDbInfluxdbUserConfigPrivateAccessArgs' private_access: Allow access to selected service ports from private networks
        :param str project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param 'GetInfluxDbInfluxdbUserConfigPublicAccessArgs' public_access: Allow access to selected service ports from the public Internet
        :param str recovery_basebackup_name: Name of the basebackup to restore in forked service
        :param str service_to_fork_from: Name of another service to fork from. This has effect 
               only when a new service is being created.
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional['GetInfluxDbInfluxdbUserConfigInfluxdbArgs']:
        """
        InfluxDB specific server provided values.
        """
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional['GetInfluxDbInfluxdbUserConfigInfluxdbArgs']):
        pulumi.set(self, "influxdb", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetInfluxDbInfluxdbUserConfigPrivateAccessArgs']:
        """
        Allow access to selected service ports from private networks
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetInfluxDbInfluxdbUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetInfluxDbInfluxdbUserConfigPublicAccessArgs']:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetInfluxDbInfluxdbUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        """
        Name of the basebackup to restore in forked service
        """
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        """
        Name of another service to fork from. This has effect 
        only when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetInfluxDbInfluxdbUserConfigInfluxdbArgs:
    def __init__(__self__, *,
                 log_queries_after: Optional[str] = None,
                 max_row_limit: Optional[str] = None,
                 max_select_buckets: Optional[str] = None,
                 max_select_point: Optional[str] = None,
                 query_timeout: Optional[str] = None):
        """
        :param str log_queries_after: The maximum duration in seconds before a query is 
               logged as a slow query. Setting this to 0 (the default) will never log slow queries.
        :param str max_row_limit: The maximum number of rows returned in a non-chunked query. 
               Setting this to 0 (the default) allows an unlimited number to be returned.
        :param str max_select_buckets: The maximum number of `GROUP BY time()` buckets that 
               can be processed in a query. Setting this to 0 (the default) allows an unlimited number to
               be processed.
        :param str max_select_point: The maximum number of points that can be processed in a 
               SELECT statement. Setting this to 0 (the default) allows an unlimited number to be processed.
        :param str query_timeout: The maximum duration in seconds before a query is killed. 
               Setting this to 0 (the default) will never kill slow queries.
        """
        if log_queries_after is not None:
            pulumi.set(__self__, "log_queries_after", log_queries_after)
        if max_row_limit is not None:
            pulumi.set(__self__, "max_row_limit", max_row_limit)
        if max_select_buckets is not None:
            pulumi.set(__self__, "max_select_buckets", max_select_buckets)
        if max_select_point is not None:
            pulumi.set(__self__, "max_select_point", max_select_point)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)

    @property
    @pulumi.getter(name="logQueriesAfter")
    def log_queries_after(self) -> Optional[str]:
        """
        The maximum duration in seconds before a query is 
        logged as a slow query. Setting this to 0 (the default) will never log slow queries.
        """
        return pulumi.get(self, "log_queries_after")

    @log_queries_after.setter
    def log_queries_after(self, value: Optional[str]):
        pulumi.set(self, "log_queries_after", value)

    @property
    @pulumi.getter(name="maxRowLimit")
    def max_row_limit(self) -> Optional[str]:
        """
        The maximum number of rows returned in a non-chunked query. 
        Setting this to 0 (the default) allows an unlimited number to be returned.
        """
        return pulumi.get(self, "max_row_limit")

    @max_row_limit.setter
    def max_row_limit(self, value: Optional[str]):
        pulumi.set(self, "max_row_limit", value)

    @property
    @pulumi.getter(name="maxSelectBuckets")
    def max_select_buckets(self) -> Optional[str]:
        """
        The maximum number of `GROUP BY time()` buckets that 
        can be processed in a query. Setting this to 0 (the default) allows an unlimited number to
        be processed.
        """
        return pulumi.get(self, "max_select_buckets")

    @max_select_buckets.setter
    def max_select_buckets(self, value: Optional[str]):
        pulumi.set(self, "max_select_buckets", value)

    @property
    @pulumi.getter(name="maxSelectPoint")
    def max_select_point(self) -> Optional[str]:
        """
        The maximum number of points that can be processed in a 
        SELECT statement. Setting this to 0 (the default) allows an unlimited number to be processed.
        """
        return pulumi.get(self, "max_select_point")

    @max_select_point.setter
    def max_select_point(self, value: Optional[str]):
        pulumi.set(self, "max_select_point", value)

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[str]:
        """
        The maximum duration in seconds before a query is killed. 
        Setting this to 0 (the default) will never kill slow queries.
        """
        return pulumi.get(self, "query_timeout")

    @query_timeout.setter
    def query_timeout(self, value: Optional[str]):
        pulumi.set(self, "query_timeout", value)


@pulumi.input_type
class GetInfluxDbInfluxdbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[str] = None):
        """
        :param str influxdb: InfluxDB specific server provided values.
        """
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[str]:
        """
        InfluxDB specific server provided values.
        """
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[str]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class GetInfluxDbInfluxdbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[str] = None):
        """
        :param str influxdb: InfluxDB specific server provided values.
        """
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[str]:
        """
        InfluxDB specific server provided values.
        """
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[str]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class GetInfluxDbServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetKafkaComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetKafkaConnectComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetKafkaConnectKafkaConnectArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetKafkaConnectKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[Sequence[str]] = None,
                 kafka_connect: Optional['GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs'] = None,
                 private_access: Optional['GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs'] = None):
        """
        :param Sequence[str] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param 'GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs' kafka_connect: Kafka Connect specific server provided values.
        """
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional['GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs']:
        """
        Kafka Connect specific server provided values.
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional['GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs']):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)


@pulumi.input_type
class GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[str] = None,
                 consumer_auto_offset_reset: Optional[str] = None,
                 consumer_fetch_max_bytes: Optional[str] = None,
                 consumer_isolation_level: Optional[str] = None,
                 consumer_max_partition_fetch_bytes: Optional[str] = None,
                 consumer_max_poll_interval_ms: Optional[str] = None,
                 consumer_max_poll_records: Optional[str] = None,
                 offset_flush_interval_ms: Optional[str] = None,
                 offset_flush_timeout_ms: Optional[str] = None,
                 producer_max_request_size: Optional[str] = None,
                 session_timeout_ms: Optional[str] = None):
        """
        :param str connector_client_config_override_policy: Defines what client configurations can be 
               overridden by the connector. Default is None.
        :param str consumer_auto_offset_reset: What to do when there is no initial offset in Kafka or 
               if the current offset does not exist any more on the server. Default is earliest.
        :param str consumer_fetch_max_bytes: Records are fetched in batches by the consumer, and if 
               the first record batch in the first non-empty partition of the fetch is larger than this value,
               the record batch will still be returned to ensure that the consumer can make progress. As such,
               this is not a absolute maximum.
        :param str consumer_isolation_level: Transaction read isolation level. read_uncommitted is 
               the default, but read_committed can be used if consume-exactly-once behavior is desired.
        :param str consumer_max_partition_fetch_bytes: Records are fetched in batches by the consumer.If 
               the first record batch in the first non-empty partition of the fetch is larger than this limit,
               the batch will still be returned to ensure that the consumer can make progress.
        :param str consumer_max_poll_interval_ms: The maximum delay in milliseconds between invocations 
               of poll() when using consumer group management (defaults to 300000).
               * `consumer_max_poll_records` The maximum number of records returned by a single poll.
        :param str offset_flush_interval_ms: The interval at which to try committing offsets for tasks 
               (defaults to 60000).
        :param str offset_flush_timeout_ms: Maximum number of milliseconds to wait for records to flush 
               and partition offset data to be committed to offset storage before cancelling the process and restoring
               the offset data to be committed in a future attempt (defaults to 5000).
        :param str producer_max_request_size: This setting will limit the number of record batches the 
               producer will send in a single request to avoid sending huge requests.
        :param str session_timeout_ms: The timeout in milliseconds used to detect failures when using Kafka’s 
               group management facilities (defaults to 10000).
        """
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_fetch_max_bytes is not None:
            pulumi.set(__self__, "consumer_fetch_max_bytes", consumer_fetch_max_bytes)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_partition_fetch_bytes is not None:
            pulumi.set(__self__, "consumer_max_partition_fetch_bytes", consumer_max_partition_fetch_bytes)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if producer_max_request_size is not None:
            pulumi.set(__self__, "producer_max_request_size", producer_max_request_size)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[str]:
        """
        Defines what client configurations can be 
        overridden by the connector. Default is None.
        """
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[str]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[str]:
        """
        What to do when there is no initial offset in Kafka or 
        if the current offset does not exist any more on the server. Default is earliest.
        """
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[str]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerFetchMaxBytes")
    def consumer_fetch_max_bytes(self) -> Optional[str]:
        """
        Records are fetched in batches by the consumer, and if 
        the first record batch in the first non-empty partition of the fetch is larger than this value,
        the record batch will still be returned to ensure that the consumer can make progress. As such,
        this is not a absolute maximum.
        """
        return pulumi.get(self, "consumer_fetch_max_bytes")

    @consumer_fetch_max_bytes.setter
    def consumer_fetch_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[str]:
        """
        Transaction read isolation level. read_uncommitted is 
        the default, but read_committed can be used if consume-exactly-once behavior is desired.
        """
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[str]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPartitionFetchBytes")
    def consumer_max_partition_fetch_bytes(self) -> Optional[str]:
        """
        Records are fetched in batches by the consumer.If 
        the first record batch in the first non-empty partition of the fetch is larger than this limit,
        the batch will still be returned to ensure that the consumer can make progress.
        """
        return pulumi.get(self, "consumer_max_partition_fetch_bytes")

    @consumer_max_partition_fetch_bytes.setter
    def consumer_max_partition_fetch_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_partition_fetch_bytes", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[str]:
        """
        The maximum delay in milliseconds between invocations 
        of poll() when using consumer group management (defaults to 300000).
        * `consumer_max_poll_records` The maximum number of records returned by a single poll.
        """
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[str]:
        """
        The interval at which to try committing offsets for tasks 
        (defaults to 60000).
        """
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[str]:
        """
        Maximum number of milliseconds to wait for records to flush 
        and partition offset data to be committed to offset storage before cancelling the process and restoring
        the offset data to be committed in a future attempt (defaults to 5000).
        """
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="producerMaxRequestSize")
    def producer_max_request_size(self) -> Optional[str]:
        """
        This setting will limit the number of record batches the 
        producer will send in a single request to avoid sending huge requests.
        """
        return pulumi.get(self, "producer_max_request_size")

    @producer_max_request_size.setter
    def producer_max_request_size(self, value: Optional[str]):
        pulumi.set(self, "producer_max_request_size", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[str]:
        """
        The timeout in milliseconds used to detect failures when using Kafka’s 
        group management facilities (defaults to 10000).
        """
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[str] = None,
                 prometheus: Optional[str] = None):
        """
        :param str kafka_connect: Kafka Connect specific server provided values.
        """
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        """
        Kafka Connect specific server provided values.
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[str] = None,
                 prometheus: Optional[str] = None):
        """
        :param str kafka_connect: Kafka Connect specific server provided values.
        """
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        """
        Kafka Connect specific server provided values.
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetKafkaConnectServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetKafkaConnectorTaskArgs:
    def __init__(__self__, *,
                 connector: str,
                 task: int):
        """
        :param int task: List of tasks of a connector, each element contains `connector` 
               (Related connector name) and `task` (Task id / number).
        """
        pulumi.set(__self__, "connector", connector)
        pulumi.set(__self__, "task", task)

    @property
    @pulumi.getter
    def connector(self) -> str:
        return pulumi.get(self, "connector")

    @connector.setter
    def connector(self, value: str):
        pulumi.set(self, "connector", value)

    @property
    @pulumi.getter
    def task(self) -> int:
        """
        List of tasks of a connector, each element contains `connector` 
        (Related connector name) and `task` (Task id / number).
        """
        return pulumi.get(self, "task")

    @task.setter
    def task(self, value: int):
        pulumi.set(self, "task", value)


@pulumi.input_type
class GetKafkaKafkaArgs:
    def __init__(__self__, *,
                 access_cert: str,
                 access_key: str,
                 connect_uri: str,
                 rest_uri: str,
                 schema_registry_uri: str):
        """
        :param str access_cert: The Kafka client certificate
        :param str access_key: The Kafka client certificate key
        :param str connect_uri: The Kafka Connect URI, if any
        :param str rest_uri: The Kafka REST URI, if any
        :param str schema_registry_uri: The Schema Registry URI, if any
        """
        pulumi.set(__self__, "access_cert", access_cert)
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "connect_uri", connect_uri)
        pulumi.set(__self__, "rest_uri", rest_uri)
        pulumi.set(__self__, "schema_registry_uri", schema_registry_uri)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> str:
        """
        The Kafka client certificate
        """
        return pulumi.get(self, "access_cert")

    @access_cert.setter
    def access_cert(self, value: str):
        pulumi.set(self, "access_cert", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        """
        The Kafka client certificate key
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: str):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="connectUri")
    def connect_uri(self) -> str:
        """
        The Kafka Connect URI, if any
        """
        return pulumi.get(self, "connect_uri")

    @connect_uri.setter
    def connect_uri(self, value: str):
        pulumi.set(self, "connect_uri", value)

    @property
    @pulumi.getter(name="restUri")
    def rest_uri(self) -> str:
        """
        The Kafka REST URI, if any
        """
        return pulumi.get(self, "rest_uri")

    @rest_uri.setter
    def rest_uri(self, value: str):
        pulumi.set(self, "rest_uri", value)

    @property
    @pulumi.getter(name="schemaRegistryUri")
    def schema_registry_uri(self) -> str:
        """
        The Schema Registry URI, if any
        """
        return pulumi.get(self, "schema_registry_uri")

    @schema_registry_uri.setter
    def schema_registry_uri(self, value: str):
        pulumi.set(self, "schema_registry_uri", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 kafka: Optional['GetKafkaKafkaUserConfigKafkaArgs'] = None,
                 kafka_authentication_methods: Optional['GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs'] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_connect_config: Optional['GetKafkaKafkaUserConfigKafkaConnectConfigArgs'] = None,
                 kafka_rest: Optional[str] = None,
                 kafka_rest_config: Optional['GetKafkaKafkaUserConfigKafkaRestConfigArgs'] = None,
                 kafka_version: Optional[str] = None,
                 private_access: Optional['GetKafkaKafkaUserConfigPrivateAccessArgs'] = None,
                 privatelink_access: Optional['GetKafkaKafkaUserConfigPrivatelinkAccessArgs'] = None,
                 public_access: Optional['GetKafkaKafkaUserConfigPublicAccessArgs'] = None,
                 schema_registry: Optional[str] = None,
                 schema_registry_config: Optional['GetKafkaKafkaUserConfigSchemaRegistryConfigArgs'] = None):
        """
        :param str custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        :param Sequence[str] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        :param 'GetKafkaKafkaUserConfigKafkaArgs' kafka: Kafka server provided values:
        :param 'GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs' kafka_authentication_methods: Kafka authentication methods
        :param str kafka_connect: Enable kafka_connect
        :param 'GetKafkaKafkaUserConfigKafkaConnectConfigArgs' kafka_connect_config: Kafka Connect configuration values
        :param str kafka_rest: Enable kafka_rest
        :param 'GetKafkaKafkaUserConfigKafkaRestConfigArgs' kafka_rest_config: Kafka-REST configuration
        :param str kafka_version: Kafka major version
        :param 'GetKafkaKafkaUserConfigPrivateAccessArgs' private_access: Allow access to selected service ports from private networks
        :param 'GetKafkaKafkaUserConfigPrivatelinkAccessArgs' privatelink_access: Allow access to selected service components through Privatelink
        :param 'GetKafkaKafkaUserConfigPublicAccessArgs' public_access: Allow access to selected service ports from the public Internet
        :param str schema_registry: Enable schema_registry
        :param 'GetKafkaKafkaUserConfigSchemaRegistryConfigArgs' schema_registry_config: Schema Registry configuration
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_authentication_methods is not None:
            pulumi.set(__self__, "kafka_authentication_methods", kafka_authentication_methods)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_connect_config is not None:
            pulumi.set(__self__, "kafka_connect_config", kafka_connect_config)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if kafka_rest_config is not None:
            pulumi.set(__self__, "kafka_rest_config", kafka_rest_config)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if privatelink_access is not None:
            pulumi.set(__self__, "privatelink_access", privatelink_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)
        if schema_registry_config is not None:
            pulumi.set(__self__, "schema_registry_config", schema_registry_config)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional['GetKafkaKafkaUserConfigKafkaArgs']:
        """
        Kafka server provided values:
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional['GetKafkaKafkaUserConfigKafkaArgs']):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethods")
    def kafka_authentication_methods(self) -> Optional['GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']:
        """
        Kafka authentication methods
        """
        return pulumi.get(self, "kafka_authentication_methods")

    @kafka_authentication_methods.setter
    def kafka_authentication_methods(self, value: Optional['GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']):
        pulumi.set(self, "kafka_authentication_methods", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        """
        Enable kafka_connect
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaConnectConfig")
    def kafka_connect_config(self) -> Optional['GetKafkaKafkaUserConfigKafkaConnectConfigArgs']:
        """
        Kafka Connect configuration values
        """
        return pulumi.get(self, "kafka_connect_config")

    @kafka_connect_config.setter
    def kafka_connect_config(self, value: Optional['GetKafkaKafkaUserConfigKafkaConnectConfigArgs']):
        pulumi.set(self, "kafka_connect_config", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        """
        Enable kafka_rest
        """
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="kafkaRestConfig")
    def kafka_rest_config(self) -> Optional['GetKafkaKafkaUserConfigKafkaRestConfigArgs']:
        """
        Kafka-REST configuration
        """
        return pulumi.get(self, "kafka_rest_config")

    @kafka_rest_config.setter
    def kafka_rest_config(self, value: Optional['GetKafkaKafkaUserConfigKafkaRestConfigArgs']):
        pulumi.set(self, "kafka_rest_config", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[str]:
        """
        Kafka major version
        """
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[str]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetKafkaKafkaUserConfigPrivateAccessArgs']:
        """
        Allow access to selected service ports from private networks
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetKafkaKafkaUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="privatelinkAccess")
    def privatelink_access(self) -> Optional['GetKafkaKafkaUserConfigPrivatelinkAccessArgs']:
        """
        Allow access to selected service components through Privatelink
        """
        return pulumi.get(self, "privatelink_access")

    @privatelink_access.setter
    def privatelink_access(self, value: Optional['GetKafkaKafkaUserConfigPrivatelinkAccessArgs']):
        pulumi.set(self, "privatelink_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetKafkaKafkaUserConfigPublicAccessArgs']:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetKafkaKafkaUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        """
        Enable schema_registry
        """
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)

    @property
    @pulumi.getter(name="schemaRegistryConfig")
    def schema_registry_config(self) -> Optional['GetKafkaKafkaUserConfigSchemaRegistryConfigArgs']:
        """
        Schema Registry configuration
        """
        return pulumi.get(self, "schema_registry_config")

    @schema_registry_config.setter
    def schema_registry_config(self, value: Optional['GetKafkaKafkaUserConfigSchemaRegistryConfigArgs']):
        pulumi.set(self, "schema_registry_config", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigKafkaArgs:
    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[str] = None,
                 compression_type: Optional[str] = None,
                 connections_max_idle_ms: Optional[str] = None,
                 default_replication_factor: Optional[str] = None,
                 group_max_session_timeout_ms: Optional[str] = None,
                 group_min_session_timeout_ms: Optional[str] = None,
                 log_cleaner_delete_retention_ms: Optional[str] = None,
                 log_cleaner_max_compaction_lag_ms: Optional[str] = None,
                 log_cleaner_min_cleanable_ratio: Optional[str] = None,
                 log_cleaner_min_compaction_lag_ms: Optional[str] = None,
                 log_cleanup_policy: Optional[str] = None,
                 log_flush_interval_messages: Optional[str] = None,
                 log_flush_interval_ms: Optional[str] = None,
                 log_index_interval_bytes: Optional[str] = None,
                 log_index_size_max_bytes: Optional[str] = None,
                 log_message_downconversion_enable: Optional[str] = None,
                 log_message_timestamp_difference_max_ms: Optional[str] = None,
                 log_message_timestamp_type: Optional[str] = None,
                 log_preallocate: Optional[str] = None,
                 log_retention_bytes: Optional[str] = None,
                 log_retention_hours: Optional[str] = None,
                 log_retention_ms: Optional[str] = None,
                 log_roll_jitter_ms: Optional[str] = None,
                 log_roll_ms: Optional[str] = None,
                 log_segment_bytes: Optional[str] = None,
                 log_segment_delete_delay_ms: Optional[str] = None,
                 max_connections_per_ip: Optional[str] = None,
                 max_incremental_fetch_session_cache_slots: Optional[str] = None,
                 message_max_bytes: Optional[str] = None,
                 min_insync_replicas: Optional[str] = None,
                 num_partitions: Optional[str] = None,
                 offsets_retention_minutes: Optional[str] = None,
                 producer_purgatory_purge_interval_requests: Optional[str] = None,
                 replica_fetch_max_bytes: Optional[str] = None,
                 replica_fetch_response_max_bytes: Optional[str] = None,
                 socket_request_max_bytes: Optional[str] = None,
                 transaction_remove_expired_transaction_cleanup_interval_ms: Optional[str] = None,
                 transaction_state_log_segment_bytes: Optional[str] = None):
        """
        :param str auto_create_topics_enable: Enable auto creation of topics
        :param str compression_type: Specify the final compression type for a given topic. This 
               configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd').
               It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer'
               which means retain the original compression codec set by the producer.
        :param str connections_max_idle_ms: Idle connections timeout: the server socket processor 
               threads close the connections that idle for longer than this.
        :param str default_replication_factor: Replication factor for autocreated topics
        :param str group_max_session_timeout_ms: The maximum allowed session timeout for registered 
               consumers. Longer timeouts give consumers more time to process messages in between heartbeats
               at the cost of a longer time to detect failures.
        :param str group_min_session_timeout_ms: The minimum allowed session timeout for registered 
               consumers. Longer timeouts give consumers more time to process messages in between heartbeats
               at the cost of a longer time to detect failures.
        :param str log_cleaner_max_compaction_lag_ms: The maximum amount of time message will 
               remain uncompacted. Only applicable for logs that are being compacted
        :param str log_cleaner_min_cleanable_ratio: Controls log compactor frequency. Larger 
               value means more frequent compactions but also more space wasted for logs. Consider setting
               log.cleaner.max.compaction.lag.ms to enforce compactions sooner, instead of setting a very
               high value for this option.
        :param str log_cleaner_min_compaction_lag_ms: The minimum time a message will remain 
               uncompacted in the log. Only applicable for logs that are being compacted.
        :param str log_cleanup_policy: The default cleanup policy for segments beyond the retention window.
        :param str log_flush_interval_messages: The number of messages accumulated on a log partition 
               before messages are flushed to disk.
        :param str log_flush_interval_ms: The maximum time in ms that a message in any topic is kept 
               in memory before flushed to disk. If not set, the value in log.flush.scheduler.interval.ms is used.
        :param str log_index_interval_bytes: The interval with which Kafka adds an entry to the offset index.
        :param str log_index_size_max_bytes: The maximum size in bytes of the offset index.
        :param str log_message_downconversion_enable: This configuration controls whether down-conversion 
               of message formats is enabled to satisfy consume requests.
        :param str log_message_timestamp_difference_max_ms: The maximum difference allowed between 
               the timestamp when a broker receives a message and the timestamp specified in the message
        :param str log_message_timestamp_type: Define whether the timestamp in the message is 
               message create time or log append time.
        :param str log_preallocate: Should pre allocate file when create new segment?
        :param str log_retention_bytes: The maximum size of the log before deleting messages
        :param str log_retention_hours: The number of hours to keep a log file before deleting it.
        :param str log_retention_ms: The number of milliseconds to keep a log file before deleting it 
               (in milliseconds), If not set, the value in log.retention.minutes is used. If set to -1, no
               time limit is applied.
        :param str log_roll_jitter_ms: The maximum jitter to subtract from logRollTimeMillis 
               (in milliseconds). If not set, the value in log.roll.jitter.hours is used.
        :param str log_roll_ms: The maximum time before a new log segment is rolled out (in milliseconds).
        :param str log_segment_bytes: The maximum size of a single log file
        :param str log_segment_delete_delay_ms: The amount of time to wait before deleting a file 
               from the filesystem.
        :param str max_connections_per_ip: The maximum number of connections allowed from each ip 
               address (defaults to 2147483647).
        :param str max_incremental_fetch_session_cache_slots: The maximum number of incremental fetch 
               sessions that the broker will maintain.
        :param str message_max_bytes: The maximum size of message that the server can receive.
        :param str min_insync_replicas: When a producer sets acks to 'all' (or '-1'), 
               min.insync.replicas specifies the minimum number of replicas that must acknowledge a write for
               the write to be considered successful.
        :param str num_partitions: Number of partitions for autocreated topics
        :param str offsets_retention_minutes: Log retention window in minutes for offsets topic.
        :param str producer_purgatory_purge_interval_requests: The purge interval (in number of 
               requests) of the producer request purgatory(defaults to 1000).
        :param str replica_fetch_max_bytes: The number of bytes of messages to attempt to fetch 
               for each partition (defaults to 1048576). This is not an absolute maximum, if the first record
               batch in the first non-empty partition of the fetch is larger than this value, the record batch
               will still be returned to ensure that progress can be made.
        :param str replica_fetch_response_max_bytes: Maximum bytes expected for the entire fetch 
               response (defaults to 10485760). Records are fetched in batches, and if the first record batch
               in the first non-empty partition of the fetch is larger than this value, the record batch will
               still be returned to ensure that progress can be made. As such, this is not an absolute maximum.
        :param str socket_request_max_bytes: The maximum number of bytes in a socket request 
               (defaults to 104857600).
        :param str transaction_remove_expired_transaction_cleanup_interval_ms: The interval at which 
               to remove transactions that have expired due to transactional.id.expiration.ms passing (defaults
               to 3600000 (1 hour)).
        :param str transaction_state_log_segment_bytes: The transaction topic segment bytes should 
               be kept relatively small in order to facilitate faster log compaction and cache loads (defaults
               to 104857600 (100 mebibytes)).
        """
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if connections_max_idle_ms is not None:
            pulumi.set(__self__, "connections_max_idle_ms", connections_max_idle_ms)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if group_max_session_timeout_ms is not None:
            pulumi.set(__self__, "group_max_session_timeout_ms", group_max_session_timeout_ms)
        if group_min_session_timeout_ms is not None:
            pulumi.set(__self__, "group_min_session_timeout_ms", group_min_session_timeout_ms)
        if log_cleaner_delete_retention_ms is not None:
            pulumi.set(__self__, "log_cleaner_delete_retention_ms", log_cleaner_delete_retention_ms)
        if log_cleaner_max_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_max_compaction_lag_ms", log_cleaner_max_compaction_lag_ms)
        if log_cleaner_min_cleanable_ratio is not None:
            pulumi.set(__self__, "log_cleaner_min_cleanable_ratio", log_cleaner_min_cleanable_ratio)
        if log_cleaner_min_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_min_compaction_lag_ms", log_cleaner_min_compaction_lag_ms)
        if log_cleanup_policy is not None:
            pulumi.set(__self__, "log_cleanup_policy", log_cleanup_policy)
        if log_flush_interval_messages is not None:
            pulumi.set(__self__, "log_flush_interval_messages", log_flush_interval_messages)
        if log_flush_interval_ms is not None:
            pulumi.set(__self__, "log_flush_interval_ms", log_flush_interval_ms)
        if log_index_interval_bytes is not None:
            pulumi.set(__self__, "log_index_interval_bytes", log_index_interval_bytes)
        if log_index_size_max_bytes is not None:
            pulumi.set(__self__, "log_index_size_max_bytes", log_index_size_max_bytes)
        if log_message_downconversion_enable is not None:
            pulumi.set(__self__, "log_message_downconversion_enable", log_message_downconversion_enable)
        if log_message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "log_message_timestamp_difference_max_ms", log_message_timestamp_difference_max_ms)
        if log_message_timestamp_type is not None:
            pulumi.set(__self__, "log_message_timestamp_type", log_message_timestamp_type)
        if log_preallocate is not None:
            pulumi.set(__self__, "log_preallocate", log_preallocate)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_retention_ms is not None:
            pulumi.set(__self__, "log_retention_ms", log_retention_ms)
        if log_roll_jitter_ms is not None:
            pulumi.set(__self__, "log_roll_jitter_ms", log_roll_jitter_ms)
        if log_roll_ms is not None:
            pulumi.set(__self__, "log_roll_ms", log_roll_ms)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if log_segment_delete_delay_ms is not None:
            pulumi.set(__self__, "log_segment_delete_delay_ms", log_segment_delete_delay_ms)
        if max_connections_per_ip is not None:
            pulumi.set(__self__, "max_connections_per_ip", max_connections_per_ip)
        if max_incremental_fetch_session_cache_slots is not None:
            pulumi.set(__self__, "max_incremental_fetch_session_cache_slots", max_incremental_fetch_session_cache_slots)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if min_insync_replicas is not None:
            pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if producer_purgatory_purge_interval_requests is not None:
            pulumi.set(__self__, "producer_purgatory_purge_interval_requests", producer_purgatory_purge_interval_requests)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if replica_fetch_response_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_response_max_bytes", replica_fetch_response_max_bytes)
        if socket_request_max_bytes is not None:
            pulumi.set(__self__, "socket_request_max_bytes", socket_request_max_bytes)
        if transaction_remove_expired_transaction_cleanup_interval_ms is not None:
            pulumi.set(__self__, "transaction_remove_expired_transaction_cleanup_interval_ms", transaction_remove_expired_transaction_cleanup_interval_ms)
        if transaction_state_log_segment_bytes is not None:
            pulumi.set(__self__, "transaction_state_log_segment_bytes", transaction_state_log_segment_bytes)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[str]:
        """
        Enable auto creation of topics
        """
        return pulumi.get(self, "auto_create_topics_enable")

    @auto_create_topics_enable.setter
    def auto_create_topics_enable(self, value: Optional[str]):
        pulumi.set(self, "auto_create_topics_enable", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        """
        Specify the final compression type for a given topic. This 
        configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd').
        It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer'
        which means retain the original compression codec set by the producer.
        """
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[str]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="connectionsMaxIdleMs")
    def connections_max_idle_ms(self) -> Optional[str]:
        """
        Idle connections timeout: the server socket processor 
        threads close the connections that idle for longer than this.
        """
        return pulumi.get(self, "connections_max_idle_ms")

    @connections_max_idle_ms.setter
    def connections_max_idle_ms(self, value: Optional[str]):
        pulumi.set(self, "connections_max_idle_ms", value)

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[str]:
        """
        Replication factor for autocreated topics
        """
        return pulumi.get(self, "default_replication_factor")

    @default_replication_factor.setter
    def default_replication_factor(self, value: Optional[str]):
        pulumi.set(self, "default_replication_factor", value)

    @property
    @pulumi.getter(name="groupMaxSessionTimeoutMs")
    def group_max_session_timeout_ms(self) -> Optional[str]:
        """
        The maximum allowed session timeout for registered 
        consumers. Longer timeouts give consumers more time to process messages in between heartbeats
        at the cost of a longer time to detect failures.
        """
        return pulumi.get(self, "group_max_session_timeout_ms")

    @group_max_session_timeout_ms.setter
    def group_max_session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "group_max_session_timeout_ms", value)

    @property
    @pulumi.getter(name="groupMinSessionTimeoutMs")
    def group_min_session_timeout_ms(self) -> Optional[str]:
        """
        The minimum allowed session timeout for registered 
        consumers. Longer timeouts give consumers more time to process messages in between heartbeats
        at the cost of a longer time to detect failures.
        """
        return pulumi.get(self, "group_min_session_timeout_ms")

    @group_min_session_timeout_ms.setter
    def group_min_session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "group_min_session_timeout_ms", value)

    @property
    @pulumi.getter(name="logCleanerDeleteRetentionMs")
    def log_cleaner_delete_retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_delete_retention_ms")

    @log_cleaner_delete_retention_ms.setter
    def log_cleaner_delete_retention_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_delete_retention_ms", value)

    @property
    @pulumi.getter(name="logCleanerMaxCompactionLagMs")
    def log_cleaner_max_compaction_lag_ms(self) -> Optional[str]:
        """
        The maximum amount of time message will 
        remain uncompacted. Only applicable for logs that are being compacted
        """
        return pulumi.get(self, "log_cleaner_max_compaction_lag_ms")

    @log_cleaner_max_compaction_lag_ms.setter
    def log_cleaner_max_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanerMinCleanableRatio")
    def log_cleaner_min_cleanable_ratio(self) -> Optional[str]:
        """
        Controls log compactor frequency. Larger 
        value means more frequent compactions but also more space wasted for logs. Consider setting
        log.cleaner.max.compaction.lag.ms to enforce compactions sooner, instead of setting a very
        high value for this option.
        """
        return pulumi.get(self, "log_cleaner_min_cleanable_ratio")

    @log_cleaner_min_cleanable_ratio.setter
    def log_cleaner_min_cleanable_ratio(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_min_cleanable_ratio", value)

    @property
    @pulumi.getter(name="logCleanerMinCompactionLagMs")
    def log_cleaner_min_compaction_lag_ms(self) -> Optional[str]:
        """
        The minimum time a message will remain 
        uncompacted in the log. Only applicable for logs that are being compacted.
        """
        return pulumi.get(self, "log_cleaner_min_compaction_lag_ms")

    @log_cleaner_min_compaction_lag_ms.setter
    def log_cleaner_min_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanupPolicy")
    def log_cleanup_policy(self) -> Optional[str]:
        """
        The default cleanup policy for segments beyond the retention window.
        """
        return pulumi.get(self, "log_cleanup_policy")

    @log_cleanup_policy.setter
    def log_cleanup_policy(self, value: Optional[str]):
        pulumi.set(self, "log_cleanup_policy", value)

    @property
    @pulumi.getter(name="logFlushIntervalMessages")
    def log_flush_interval_messages(self) -> Optional[str]:
        """
        The number of messages accumulated on a log partition 
        before messages are flushed to disk.
        """
        return pulumi.get(self, "log_flush_interval_messages")

    @log_flush_interval_messages.setter
    def log_flush_interval_messages(self, value: Optional[str]):
        pulumi.set(self, "log_flush_interval_messages", value)

    @property
    @pulumi.getter(name="logFlushIntervalMs")
    def log_flush_interval_ms(self) -> Optional[str]:
        """
        The maximum time in ms that a message in any topic is kept 
        in memory before flushed to disk. If not set, the value in log.flush.scheduler.interval.ms is used.
        """
        return pulumi.get(self, "log_flush_interval_ms")

    @log_flush_interval_ms.setter
    def log_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "log_flush_interval_ms", value)

    @property
    @pulumi.getter(name="logIndexIntervalBytes")
    def log_index_interval_bytes(self) -> Optional[str]:
        """
        The interval with which Kafka adds an entry to the offset index.
        """
        return pulumi.get(self, "log_index_interval_bytes")

    @log_index_interval_bytes.setter
    def log_index_interval_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_index_interval_bytes", value)

    @property
    @pulumi.getter(name="logIndexSizeMaxBytes")
    def log_index_size_max_bytes(self) -> Optional[str]:
        """
        The maximum size in bytes of the offset index.
        """
        return pulumi.get(self, "log_index_size_max_bytes")

    @log_index_size_max_bytes.setter
    def log_index_size_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_index_size_max_bytes", value)

    @property
    @pulumi.getter(name="logMessageDownconversionEnable")
    def log_message_downconversion_enable(self) -> Optional[str]:
        """
        This configuration controls whether down-conversion 
        of message formats is enabled to satisfy consume requests.
        """
        return pulumi.get(self, "log_message_downconversion_enable")

    @log_message_downconversion_enable.setter
    def log_message_downconversion_enable(self, value: Optional[str]):
        pulumi.set(self, "log_message_downconversion_enable", value)

    @property
    @pulumi.getter(name="logMessageTimestampDifferenceMaxMs")
    def log_message_timestamp_difference_max_ms(self) -> Optional[str]:
        """
        The maximum difference allowed between 
        the timestamp when a broker receives a message and the timestamp specified in the message
        """
        return pulumi.get(self, "log_message_timestamp_difference_max_ms")

    @log_message_timestamp_difference_max_ms.setter
    def log_message_timestamp_difference_max_ms(self, value: Optional[str]):
        pulumi.set(self, "log_message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="logMessageTimestampType")
    def log_message_timestamp_type(self) -> Optional[str]:
        """
        Define whether the timestamp in the message is 
        message create time or log append time.
        """
        return pulumi.get(self, "log_message_timestamp_type")

    @log_message_timestamp_type.setter
    def log_message_timestamp_type(self, value: Optional[str]):
        pulumi.set(self, "log_message_timestamp_type", value)

    @property
    @pulumi.getter(name="logPreallocate")
    def log_preallocate(self) -> Optional[str]:
        """
        Should pre allocate file when create new segment?
        """
        return pulumi.get(self, "log_preallocate")

    @log_preallocate.setter
    def log_preallocate(self, value: Optional[str]):
        pulumi.set(self, "log_preallocate", value)

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[str]:
        """
        The maximum size of the log before deleting messages
        """
        return pulumi.get(self, "log_retention_bytes")

    @log_retention_bytes.setter
    def log_retention_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_retention_bytes", value)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[str]:
        """
        The number of hours to keep a log file before deleting it.
        """
        return pulumi.get(self, "log_retention_hours")

    @log_retention_hours.setter
    def log_retention_hours(self, value: Optional[str]):
        pulumi.set(self, "log_retention_hours", value)

    @property
    @pulumi.getter(name="logRetentionMs")
    def log_retention_ms(self) -> Optional[str]:
        """
        The number of milliseconds to keep a log file before deleting it 
        (in milliseconds), If not set, the value in log.retention.minutes is used. If set to -1, no
        time limit is applied.
        """
        return pulumi.get(self, "log_retention_ms")

    @log_retention_ms.setter
    def log_retention_ms(self, value: Optional[str]):
        pulumi.set(self, "log_retention_ms", value)

    @property
    @pulumi.getter(name="logRollJitterMs")
    def log_roll_jitter_ms(self) -> Optional[str]:
        """
        The maximum jitter to subtract from logRollTimeMillis 
        (in milliseconds). If not set, the value in log.roll.jitter.hours is used.
        """
        return pulumi.get(self, "log_roll_jitter_ms")

    @log_roll_jitter_ms.setter
    def log_roll_jitter_ms(self, value: Optional[str]):
        pulumi.set(self, "log_roll_jitter_ms", value)

    @property
    @pulumi.getter(name="logRollMs")
    def log_roll_ms(self) -> Optional[str]:
        """
        The maximum time before a new log segment is rolled out (in milliseconds).
        """
        return pulumi.get(self, "log_roll_ms")

    @log_roll_ms.setter
    def log_roll_ms(self, value: Optional[str]):
        pulumi.set(self, "log_roll_ms", value)

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[str]:
        """
        The maximum size of a single log file
        """
        return pulumi.get(self, "log_segment_bytes")

    @log_segment_bytes.setter
    def log_segment_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_segment_bytes", value)

    @property
    @pulumi.getter(name="logSegmentDeleteDelayMs")
    def log_segment_delete_delay_ms(self) -> Optional[str]:
        """
        The amount of time to wait before deleting a file 
        from the filesystem.
        """
        return pulumi.get(self, "log_segment_delete_delay_ms")

    @log_segment_delete_delay_ms.setter
    def log_segment_delete_delay_ms(self, value: Optional[str]):
        pulumi.set(self, "log_segment_delete_delay_ms", value)

    @property
    @pulumi.getter(name="maxConnectionsPerIp")
    def max_connections_per_ip(self) -> Optional[str]:
        """
        The maximum number of connections allowed from each ip 
        address (defaults to 2147483647).
        """
        return pulumi.get(self, "max_connections_per_ip")

    @max_connections_per_ip.setter
    def max_connections_per_ip(self, value: Optional[str]):
        pulumi.set(self, "max_connections_per_ip", value)

    @property
    @pulumi.getter(name="maxIncrementalFetchSessionCacheSlots")
    def max_incremental_fetch_session_cache_slots(self) -> Optional[str]:
        """
        The maximum number of incremental fetch 
        sessions that the broker will maintain.
        """
        return pulumi.get(self, "max_incremental_fetch_session_cache_slots")

    @max_incremental_fetch_session_cache_slots.setter
    def max_incremental_fetch_session_cache_slots(self, value: Optional[str]):
        pulumi.set(self, "max_incremental_fetch_session_cache_slots", value)

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[str]:
        """
        The maximum size of message that the server can receive.
        """
        return pulumi.get(self, "message_max_bytes")

    @message_max_bytes.setter
    def message_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "message_max_bytes", value)

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> Optional[str]:
        """
        When a producer sets acks to 'all' (or '-1'), 
        min.insync.replicas specifies the minimum number of replicas that must acknowledge a write for
        the write to be considered successful.
        """
        return pulumi.get(self, "min_insync_replicas")

    @min_insync_replicas.setter
    def min_insync_replicas(self, value: Optional[str]):
        pulumi.set(self, "min_insync_replicas", value)

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[str]:
        """
        Number of partitions for autocreated topics
        """
        return pulumi.get(self, "num_partitions")

    @num_partitions.setter
    def num_partitions(self, value: Optional[str]):
        pulumi.set(self, "num_partitions", value)

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[str]:
        """
        Log retention window in minutes for offsets topic.
        """
        return pulumi.get(self, "offsets_retention_minutes")

    @offsets_retention_minutes.setter
    def offsets_retention_minutes(self, value: Optional[str]):
        pulumi.set(self, "offsets_retention_minutes", value)

    @property
    @pulumi.getter(name="producerPurgatoryPurgeIntervalRequests")
    def producer_purgatory_purge_interval_requests(self) -> Optional[str]:
        """
        The purge interval (in number of 
        requests) of the producer request purgatory(defaults to 1000).
        """
        return pulumi.get(self, "producer_purgatory_purge_interval_requests")

    @producer_purgatory_purge_interval_requests.setter
    def producer_purgatory_purge_interval_requests(self, value: Optional[str]):
        pulumi.set(self, "producer_purgatory_purge_interval_requests", value)

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[str]:
        """
        The number of bytes of messages to attempt to fetch 
        for each partition (defaults to 1048576). This is not an absolute maximum, if the first record
        batch in the first non-empty partition of the fetch is larger than this value, the record batch
        will still be returned to ensure that progress can be made.
        """
        return pulumi.get(self, "replica_fetch_max_bytes")

    @replica_fetch_max_bytes.setter
    def replica_fetch_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "replica_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="replicaFetchResponseMaxBytes")
    def replica_fetch_response_max_bytes(self) -> Optional[str]:
        """
        Maximum bytes expected for the entire fetch 
        response (defaults to 10485760). Records are fetched in batches, and if the first record batch
        in the first non-empty partition of the fetch is larger than this value, the record batch will
        still be returned to ensure that progress can be made. As such, this is not an absolute maximum.
        """
        return pulumi.get(self, "replica_fetch_response_max_bytes")

    @replica_fetch_response_max_bytes.setter
    def replica_fetch_response_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "replica_fetch_response_max_bytes", value)

    @property
    @pulumi.getter(name="socketRequestMaxBytes")
    def socket_request_max_bytes(self) -> Optional[str]:
        """
        The maximum number of bytes in a socket request 
        (defaults to 104857600).
        """
        return pulumi.get(self, "socket_request_max_bytes")

    @socket_request_max_bytes.setter
    def socket_request_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "socket_request_max_bytes", value)

    @property
    @pulumi.getter(name="transactionRemoveExpiredTransactionCleanupIntervalMs")
    def transaction_remove_expired_transaction_cleanup_interval_ms(self) -> Optional[str]:
        """
        The interval at which 
        to remove transactions that have expired due to transactional.id.expiration.ms passing (defaults
        to 3600000 (1 hour)).
        """
        return pulumi.get(self, "transaction_remove_expired_transaction_cleanup_interval_ms")

    @transaction_remove_expired_transaction_cleanup_interval_ms.setter
    def transaction_remove_expired_transaction_cleanup_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "transaction_remove_expired_transaction_cleanup_interval_ms", value)

    @property
    @pulumi.getter(name="transactionStateLogSegmentBytes")
    def transaction_state_log_segment_bytes(self) -> Optional[str]:
        """
        The transaction topic segment bytes should 
        be kept relatively small in order to facilitate faster log compaction and cache loads (defaults
        to 104857600 (100 mebibytes)).
        """
        return pulumi.get(self, "transaction_state_log_segment_bytes")

    @transaction_state_log_segment_bytes.setter
    def transaction_state_log_segment_bytes(self, value: Optional[str]):
        pulumi.set(self, "transaction_state_log_segment_bytes", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs:
    def __init__(__self__, *,
                 certificate: Optional[str] = None,
                 sasl: Optional[str] = None):
        """
        :param str certificate: Enable certificate/SSL authentication
        :param str sasl: Enable SASL authentication
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        Enable certificate/SSL authentication
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def sasl(self) -> Optional[str]:
        """
        Enable SASL authentication
        """
        return pulumi.get(self, "sasl")

    @sasl.setter
    def sasl(self, value: Optional[str]):
        pulumi.set(self, "sasl", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigKafkaConnectConfigArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[str] = None,
                 consumer_auto_offset_reset: Optional[str] = None,
                 consumer_fetch_max_bytes: Optional[str] = None,
                 consumer_isolation_level: Optional[str] = None,
                 consumer_max_partition_fetch_bytes: Optional[str] = None,
                 consumer_max_poll_interval_ms: Optional[str] = None,
                 consumer_max_poll_records: Optional[str] = None,
                 offset_flush_interval_ms: Optional[str] = None,
                 offset_flush_timeout_ms: Optional[str] = None,
                 producer_max_request_size: Optional[str] = None,
                 session_timeout_ms: Optional[str] = None):
        """
        :param str connector_client_config_override_policy: Defines what client configurations can 
               be overridden by the connector. Default is None
        :param str consumer_auto_offset_reset: What to do when there is no initial offset in Kafka or 
               if the current offset does not exist any more on the server. Default is earliest.
        :param str consumer_fetch_max_bytes: Records are fetched in batches by the consumer, and 
               if the first record batch in the first non-empty partition of the fetch is larger than this value,
               the record batch will still be returned to ensure that the consumer can make progress. As such,
               this is not a absolute maximum.
        :param str consumer_isolation_level: Transaction read isolation level. read_uncommitted is 
               the default, but read_committed can be used if consume-exactly-once behavior is desired.
        :param str consumer_max_partition_fetch_bytes: Records are fetched in batches by the consumer.If 
               the first record batch in the first non-empty partition of the fetch is larger than this limit,
               the batch will still be returned to ensure that the consumer can make progress.
        :param str consumer_max_poll_interval_ms: The maximum delay in milliseconds between invocations 
               of poll() when using consumer group management (defaults to 300000).
        :param str consumer_max_poll_records: The maximum number of records returned in a single call 
               to poll() (defaults to 500).
        :param str offset_flush_interval_ms: The interval at which to try committing offsets for 
               tasks (defaults to 60000).
        :param str offset_flush_timeout_ms: Maximum number of milliseconds to wait for records to 
               flush and partition offset data to be committed to offset storage before cancelling the process
               and restoring the offset data to be committed in a future attempt (defaults to 5000).
        :param str producer_max_request_size: This setting will limit the number of record batches 
               the producer will send in a single request to avoid sending huge requests.
        :param str session_timeout_ms: The timeout in milliseconds used to detect failures when 
               using Kafka’s group management facilities (defaults to 10000).
        """
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_fetch_max_bytes is not None:
            pulumi.set(__self__, "consumer_fetch_max_bytes", consumer_fetch_max_bytes)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_partition_fetch_bytes is not None:
            pulumi.set(__self__, "consumer_max_partition_fetch_bytes", consumer_max_partition_fetch_bytes)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if producer_max_request_size is not None:
            pulumi.set(__self__, "producer_max_request_size", producer_max_request_size)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[str]:
        """
        Defines what client configurations can 
        be overridden by the connector. Default is None
        """
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[str]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[str]:
        """
        What to do when there is no initial offset in Kafka or 
        if the current offset does not exist any more on the server. Default is earliest.
        """
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[str]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerFetchMaxBytes")
    def consumer_fetch_max_bytes(self) -> Optional[str]:
        """
        Records are fetched in batches by the consumer, and 
        if the first record batch in the first non-empty partition of the fetch is larger than this value,
        the record batch will still be returned to ensure that the consumer can make progress. As such,
        this is not a absolute maximum.
        """
        return pulumi.get(self, "consumer_fetch_max_bytes")

    @consumer_fetch_max_bytes.setter
    def consumer_fetch_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[str]:
        """
        Transaction read isolation level. read_uncommitted is 
        the default, but read_committed can be used if consume-exactly-once behavior is desired.
        """
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[str]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPartitionFetchBytes")
    def consumer_max_partition_fetch_bytes(self) -> Optional[str]:
        """
        Records are fetched in batches by the consumer.If 
        the first record batch in the first non-empty partition of the fetch is larger than this limit,
        the batch will still be returned to ensure that the consumer can make progress.
        """
        return pulumi.get(self, "consumer_max_partition_fetch_bytes")

    @consumer_max_partition_fetch_bytes.setter
    def consumer_max_partition_fetch_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_partition_fetch_bytes", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[str]:
        """
        The maximum delay in milliseconds between invocations 
        of poll() when using consumer group management (defaults to 300000).
        """
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[str]:
        """
        The maximum number of records returned in a single call 
        to poll() (defaults to 500).
        """
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[str]:
        """
        The interval at which to try committing offsets for 
        tasks (defaults to 60000).
        """
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[str]:
        """
        Maximum number of milliseconds to wait for records to 
        flush and partition offset data to be committed to offset storage before cancelling the process
        and restoring the offset data to be committed in a future attempt (defaults to 5000).
        """
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="producerMaxRequestSize")
    def producer_max_request_size(self) -> Optional[str]:
        """
        This setting will limit the number of record batches 
        the producer will send in a single request to avoid sending huge requests.
        """
        return pulumi.get(self, "producer_max_request_size")

    @producer_max_request_size.setter
    def producer_max_request_size(self, value: Optional[str]):
        pulumi.set(self, "producer_max_request_size", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[str]:
        """
        The timeout in milliseconds used to detect failures when 
        using Kafka’s group management facilities (defaults to 10000).
        """
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigKafkaRestConfigArgs:
    def __init__(__self__, *,
                 consumer_enable_auto_commit: Optional[str] = None,
                 consumer_request_max_bytes: Optional[str] = None,
                 consumer_request_timeout_ms: Optional[str] = None,
                 producer_acks: Optional[str] = None,
                 producer_linger_ms: Optional[str] = None,
                 simpleconsumer_pool_size_max: Optional[str] = None):
        """
        :param str consumer_enable_auto_commit: If true the consumer's offset will be periodically 
               committed to Kafka in the background
        :param str consumer_request_max_bytes: Maximum number of bytes in unencoded message keys and 
               values by a single request
        :param str consumer_request_timeout_ms: The maximum total time to wait for messages for a 
               request if the maximum number of messages has not yet been reached
        :param str producer_acks: The number of acknowledgments the producer requires the leader to 
               have received before considering a request complete. If set to 'all' or '-1', the leader will wait
               for the full set of in-sync replicas to acknowledge the record.
        :param str producer_linger_ms: Wait for up to the given delay to allow batching records together
        :param str simpleconsumer_pool_size_max: Maximum number of SimpleConsumers that can be 
               instantiated per broker.
        """
        if consumer_enable_auto_commit is not None:
            pulumi.set(__self__, "consumer_enable_auto_commit", consumer_enable_auto_commit)
        if consumer_request_max_bytes is not None:
            pulumi.set(__self__, "consumer_request_max_bytes", consumer_request_max_bytes)
        if consumer_request_timeout_ms is not None:
            pulumi.set(__self__, "consumer_request_timeout_ms", consumer_request_timeout_ms)
        if producer_acks is not None:
            pulumi.set(__self__, "producer_acks", producer_acks)
        if producer_linger_ms is not None:
            pulumi.set(__self__, "producer_linger_ms", producer_linger_ms)
        if simpleconsumer_pool_size_max is not None:
            pulumi.set(__self__, "simpleconsumer_pool_size_max", simpleconsumer_pool_size_max)

    @property
    @pulumi.getter(name="consumerEnableAutoCommit")
    def consumer_enable_auto_commit(self) -> Optional[str]:
        """
        If true the consumer's offset will be periodically 
        committed to Kafka in the background
        """
        return pulumi.get(self, "consumer_enable_auto_commit")

    @consumer_enable_auto_commit.setter
    def consumer_enable_auto_commit(self, value: Optional[str]):
        pulumi.set(self, "consumer_enable_auto_commit", value)

    @property
    @pulumi.getter(name="consumerRequestMaxBytes")
    def consumer_request_max_bytes(self) -> Optional[str]:
        """
        Maximum number of bytes in unencoded message keys and 
        values by a single request
        """
        return pulumi.get(self, "consumer_request_max_bytes")

    @consumer_request_max_bytes.setter
    def consumer_request_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_request_max_bytes", value)

    @property
    @pulumi.getter(name="consumerRequestTimeoutMs")
    def consumer_request_timeout_ms(self) -> Optional[str]:
        """
        The maximum total time to wait for messages for a 
        request if the maximum number of messages has not yet been reached
        """
        return pulumi.get(self, "consumer_request_timeout_ms")

    @consumer_request_timeout_ms.setter
    def consumer_request_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_request_timeout_ms", value)

    @property
    @pulumi.getter(name="producerAcks")
    def producer_acks(self) -> Optional[str]:
        """
        The number of acknowledgments the producer requires the leader to 
        have received before considering a request complete. If set to 'all' or '-1', the leader will wait
        for the full set of in-sync replicas to acknowledge the record.
        """
        return pulumi.get(self, "producer_acks")

    @producer_acks.setter
    def producer_acks(self, value: Optional[str]):
        pulumi.set(self, "producer_acks", value)

    @property
    @pulumi.getter(name="producerLingerMs")
    def producer_linger_ms(self) -> Optional[str]:
        """
        Wait for up to the given delay to allow batching records together
        """
        return pulumi.get(self, "producer_linger_ms")

    @producer_linger_ms.setter
    def producer_linger_ms(self, value: Optional[str]):
        pulumi.set(self, "producer_linger_ms", value)

    @property
    @pulumi.getter(name="simpleconsumerPoolSizeMax")
    def simpleconsumer_pool_size_max(self) -> Optional[str]:
        """
        Maximum number of SimpleConsumers that can be 
        instantiated per broker.
        """
        return pulumi.get(self, "simpleconsumer_pool_size_max")

    @simpleconsumer_pool_size_max.setter
    def simpleconsumer_pool_size_max(self, value: Optional[str]):
        pulumi.set(self, "simpleconsumer_pool_size_max", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        """
        :param str prometheus: Allow clients to connect to prometheus from the public internet for 
               service nodes that are in a project VPC or another type of private network
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet for 
        service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigPrivatelinkAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[str] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_rest: Optional[str] = None,
                 schema_registry: Optional[str] = None):
        """
        :param str kafka: Kafka server provided values:
        :param str kafka_connect: Enable kafka_connect
        :param str kafka_rest: Enable kafka_rest
        :param str schema_registry: Enable schema_registry
        """
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[str]:
        """
        Kafka server provided values:
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[str]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        """
        Enable kafka_connect
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        """
        Enable kafka_rest
        """
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        """
        Enable schema_registry
        """
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[str] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_rest: Optional[str] = None,
                 prometheus: Optional[str] = None,
                 schema_registry: Optional[str] = None):
        """
        :param str kafka: Kafka server provided values:
        :param str kafka_connect: Enable kafka_connect
        :param str kafka_rest: Enable kafka_rest
        :param str prometheus: Allow clients to connect to prometheus from the public internet for 
               service nodes that are in a project VPC or another type of private network
        :param str schema_registry: Enable schema_registry
        """
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[str]:
        """
        Kafka server provided values:
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[str]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        """
        Enable kafka_connect
        """
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        """
        Enable kafka_rest
        """
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet for 
        service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        """
        Enable schema_registry
        """
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigSchemaRegistryConfigArgs:
    def __init__(__self__, *,
                 leader_eligibility: Optional[str] = None,
                 topic_name: Optional[str] = None):
        """
        :param str leader_eligibility: If true, Karapace / Schema Registry on the service nodes can 
               participate in leader election. It might be needed to disable this when the schemas topic is replicated
               to a secondary cluster and Karapace / Schema Registry there must not participate in leader election.
               Defaults to 'true'.
        :param str topic_name: The durable single partition topic that acts as the durable log for the 
               data. This topic must be compacted to avoid losing data due to retention policy. Please note that
               changing this configuration in an existing Schema Registry / Karapace setup leads to previous
               schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence
               put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled.
               Defaults to '_schemas'.
        """
        if leader_eligibility is not None:
            pulumi.set(__self__, "leader_eligibility", leader_eligibility)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="leaderEligibility")
    def leader_eligibility(self) -> Optional[str]:
        """
        If true, Karapace / Schema Registry on the service nodes can 
        participate in leader election. It might be needed to disable this when the schemas topic is replicated
        to a secondary cluster and Karapace / Schema Registry there must not participate in leader election.
        Defaults to 'true'.
        """
        return pulumi.get(self, "leader_eligibility")

    @leader_eligibility.setter
    def leader_eligibility(self, value: Optional[str]):
        pulumi.set(self, "leader_eligibility", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        The durable single partition topic that acts as the durable log for the 
        data. This topic must be compacted to avoid losing data due to retention policy. Please note that
        changing this configuration in an existing Schema Registry / Karapace setup leads to previous
        schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence
        put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled.
        Defaults to '_schemas'.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[str]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class GetKafkaMirrorMakerComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetKafkaMirrorMakerKafkaMirrormakerArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetKafkaMirrorMakerKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[Sequence[str]] = None,
                 kafka_mirrormaker: Optional['GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs'] = None):
        """
        :param Sequence[str] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param 'GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs' kafka_mirrormaker: Kafka MirrorMaker 2 specific server provided values.
        """
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_mirrormaker is not None:
            pulumi.set(__self__, "kafka_mirrormaker", kafka_mirrormaker)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaMirrormaker")
    def kafka_mirrormaker(self) -> Optional['GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']:
        """
        Kafka MirrorMaker 2 specific server provided values.
        """
        return pulumi.get(self, "kafka_mirrormaker")

    @kafka_mirrormaker.setter
    def kafka_mirrormaker(self, value: Optional['GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']):
        pulumi.set(self, "kafka_mirrormaker", value)


@pulumi.input_type
class GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs:
    def __init__(__self__, *,
                 refresh_groups_enabled: Optional[str] = None,
                 refresh_groups_interval_seconds: Optional[str] = None,
                 refresh_topics_enabled: Optional[str] = None,
                 refresh_topics_interval_seconds: Optional[str] = None):
        """
        :param str refresh_groups_enabled: Whether to periodically check for new consumer groups. 
               Defaults to 'true'.
        :param str refresh_groups_interval_seconds: Whether to periodically check for new topics and 
               partitions. Defaults to 'true'.
        :param str refresh_topics_interval_seconds: Frequency of topic and partitions refresh in 
               seconds. Defaults to 600 seconds (10 minutes).
        """
        if refresh_groups_enabled is not None:
            pulumi.set(__self__, "refresh_groups_enabled", refresh_groups_enabled)
        if refresh_groups_interval_seconds is not None:
            pulumi.set(__self__, "refresh_groups_interval_seconds", refresh_groups_interval_seconds)
        if refresh_topics_enabled is not None:
            pulumi.set(__self__, "refresh_topics_enabled", refresh_topics_enabled)
        if refresh_topics_interval_seconds is not None:
            pulumi.set(__self__, "refresh_topics_interval_seconds", refresh_topics_interval_seconds)

    @property
    @pulumi.getter(name="refreshGroupsEnabled")
    def refresh_groups_enabled(self) -> Optional[str]:
        """
        Whether to periodically check for new consumer groups. 
        Defaults to 'true'.
        """
        return pulumi.get(self, "refresh_groups_enabled")

    @refresh_groups_enabled.setter
    def refresh_groups_enabled(self, value: Optional[str]):
        pulumi.set(self, "refresh_groups_enabled", value)

    @property
    @pulumi.getter(name="refreshGroupsIntervalSeconds")
    def refresh_groups_interval_seconds(self) -> Optional[str]:
        """
        Whether to periodically check for new topics and 
        partitions. Defaults to 'true'.
        """
        return pulumi.get(self, "refresh_groups_interval_seconds")

    @refresh_groups_interval_seconds.setter
    def refresh_groups_interval_seconds(self, value: Optional[str]):
        pulumi.set(self, "refresh_groups_interval_seconds", value)

    @property
    @pulumi.getter(name="refreshTopicsEnabled")
    def refresh_topics_enabled(self) -> Optional[str]:
        return pulumi.get(self, "refresh_topics_enabled")

    @refresh_topics_enabled.setter
    def refresh_topics_enabled(self, value: Optional[str]):
        pulumi.set(self, "refresh_topics_enabled", value)

    @property
    @pulumi.getter(name="refreshTopicsIntervalSeconds")
    def refresh_topics_interval_seconds(self) -> Optional[str]:
        """
        Frequency of topic and partitions refresh in 
        seconds. Defaults to 600 seconds (10 minutes).
        """
        return pulumi.get(self, "refresh_topics_interval_seconds")

    @refresh_topics_interval_seconds.setter
    def refresh_topics_interval_seconds(self, value: Optional[str]):
        pulumi.set(self, "refresh_topics_interval_seconds", value)


@pulumi.input_type
class GetKafkaMirrorMakerServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetKafkaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetKafkaTopicConfigArgs:
    def __init__(__self__, *,
                 cleanup_policy: Optional[str] = None,
                 compression_type: Optional[str] = None,
                 delete_retention_ms: Optional[str] = None,
                 file_delete_delay_ms: Optional[str] = None,
                 flush_messages: Optional[str] = None,
                 flush_ms: Optional[str] = None,
                 index_interval_bytes: Optional[str] = None,
                 max_compaction_lag_ms: Optional[str] = None,
                 max_message_bytes: Optional[str] = None,
                 message_downconversion_enable: Optional[str] = None,
                 message_format_version: Optional[str] = None,
                 message_timestamp_difference_max_ms: Optional[str] = None,
                 message_timestamp_type: Optional[str] = None,
                 min_cleanable_dirty_ratio: Optional[str] = None,
                 min_compaction_lag_ms: Optional[str] = None,
                 min_insync_replicas: Optional[str] = None,
                 preallocate: Optional[str] = None,
                 retention_bytes: Optional[str] = None,
                 retention_ms: Optional[str] = None,
                 segment_bytes: Optional[str] = None,
                 segment_index_bytes: Optional[str] = None,
                 segment_jitter_ms: Optional[str] = None,
                 segment_ms: Optional[str] = None,
                 unclean_leader_election_enable: Optional[str] = None):
        """
        :param str cleanup_policy: cleanup.policy value, can be `create`, `delete` or `compact,delete`
        :param str compression_type: compression.type value
        :param str delete_retention_ms: delete.retention.ms value
        :param str file_delete_delay_ms: file.delete.delay.ms value
        :param str flush_messages: flush.messages value
        :param str flush_ms: flush.ms value
        :param str index_interval_bytes: index.interval.bytes value
        :param str max_compaction_lag_ms: max.compaction.lag.ms value
        :param str max_message_bytes: max.message.bytes value
        :param str message_downconversion_enable: message.downconversion.enable value
        :param str message_format_version: message.format.version value
        :param str message_timestamp_difference_max_ms: message.timestamp.difference.max.ms value
        :param str message_timestamp_type: message.timestamp.type value
        :param str min_cleanable_dirty_ratio: min.cleanable.dirty.ratio value
        :param str min_compaction_lag_ms: min.compaction.lag.ms value
        :param str min_insync_replicas: min.insync.replicas value
        :param str preallocate: preallocate value
        :param str retention_bytes: retention.bytes value
        :param str retention_ms: retention.ms value
        :param str segment_bytes: segment.bytes value
        :param str segment_index_bytes: segment.index.bytes value
        :param str segment_jitter_ms: segment.jitter.ms value
        :param str segment_ms: segment.ms value
        :param str unclean_leader_election_enable: unclean.leader.election.enable value
        """
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if delete_retention_ms is not None:
            pulumi.set(__self__, "delete_retention_ms", delete_retention_ms)
        if file_delete_delay_ms is not None:
            pulumi.set(__self__, "file_delete_delay_ms", file_delete_delay_ms)
        if flush_messages is not None:
            pulumi.set(__self__, "flush_messages", flush_messages)
        if flush_ms is not None:
            pulumi.set(__self__, "flush_ms", flush_ms)
        if index_interval_bytes is not None:
            pulumi.set(__self__, "index_interval_bytes", index_interval_bytes)
        if max_compaction_lag_ms is not None:
            pulumi.set(__self__, "max_compaction_lag_ms", max_compaction_lag_ms)
        if max_message_bytes is not None:
            pulumi.set(__self__, "max_message_bytes", max_message_bytes)
        if message_downconversion_enable is not None:
            pulumi.set(__self__, "message_downconversion_enable", message_downconversion_enable)
        if message_format_version is not None:
            pulumi.set(__self__, "message_format_version", message_format_version)
        if message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "message_timestamp_difference_max_ms", message_timestamp_difference_max_ms)
        if message_timestamp_type is not None:
            pulumi.set(__self__, "message_timestamp_type", message_timestamp_type)
        if min_cleanable_dirty_ratio is not None:
            pulumi.set(__self__, "min_cleanable_dirty_ratio", min_cleanable_dirty_ratio)
        if min_compaction_lag_ms is not None:
            pulumi.set(__self__, "min_compaction_lag_ms", min_compaction_lag_ms)
        if min_insync_replicas is not None:
            pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        if preallocate is not None:
            pulumi.set(__self__, "preallocate", preallocate)
        if retention_bytes is not None:
            pulumi.set(__self__, "retention_bytes", retention_bytes)
        if retention_ms is not None:
            pulumi.set(__self__, "retention_ms", retention_ms)
        if segment_bytes is not None:
            pulumi.set(__self__, "segment_bytes", segment_bytes)
        if segment_index_bytes is not None:
            pulumi.set(__self__, "segment_index_bytes", segment_index_bytes)
        if segment_jitter_ms is not None:
            pulumi.set(__self__, "segment_jitter_ms", segment_jitter_ms)
        if segment_ms is not None:
            pulumi.set(__self__, "segment_ms", segment_ms)
        if unclean_leader_election_enable is not None:
            pulumi.set(__self__, "unclean_leader_election_enable", unclean_leader_election_enable)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[str]:
        """
        cleanup.policy value, can be `create`, `delete` or `compact,delete`
        """
        return pulumi.get(self, "cleanup_policy")

    @cleanup_policy.setter
    def cleanup_policy(self, value: Optional[str]):
        pulumi.set(self, "cleanup_policy", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        """
        compression.type value
        """
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[str]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="deleteRetentionMs")
    def delete_retention_ms(self) -> Optional[str]:
        """
        delete.retention.ms value
        """
        return pulumi.get(self, "delete_retention_ms")

    @delete_retention_ms.setter
    def delete_retention_ms(self, value: Optional[str]):
        pulumi.set(self, "delete_retention_ms", value)

    @property
    @pulumi.getter(name="fileDeleteDelayMs")
    def file_delete_delay_ms(self) -> Optional[str]:
        """
        file.delete.delay.ms value
        """
        return pulumi.get(self, "file_delete_delay_ms")

    @file_delete_delay_ms.setter
    def file_delete_delay_ms(self, value: Optional[str]):
        pulumi.set(self, "file_delete_delay_ms", value)

    @property
    @pulumi.getter(name="flushMessages")
    def flush_messages(self) -> Optional[str]:
        """
        flush.messages value
        """
        return pulumi.get(self, "flush_messages")

    @flush_messages.setter
    def flush_messages(self, value: Optional[str]):
        pulumi.set(self, "flush_messages", value)

    @property
    @pulumi.getter(name="flushMs")
    def flush_ms(self) -> Optional[str]:
        """
        flush.ms value
        """
        return pulumi.get(self, "flush_ms")

    @flush_ms.setter
    def flush_ms(self, value: Optional[str]):
        pulumi.set(self, "flush_ms", value)

    @property
    @pulumi.getter(name="indexIntervalBytes")
    def index_interval_bytes(self) -> Optional[str]:
        """
        index.interval.bytes value
        """
        return pulumi.get(self, "index_interval_bytes")

    @index_interval_bytes.setter
    def index_interval_bytes(self, value: Optional[str]):
        pulumi.set(self, "index_interval_bytes", value)

    @property
    @pulumi.getter(name="maxCompactionLagMs")
    def max_compaction_lag_ms(self) -> Optional[str]:
        """
        max.compaction.lag.ms value
        """
        return pulumi.get(self, "max_compaction_lag_ms")

    @max_compaction_lag_ms.setter
    def max_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> Optional[str]:
        """
        max.message.bytes value
        """
        return pulumi.get(self, "max_message_bytes")

    @max_message_bytes.setter
    def max_message_bytes(self, value: Optional[str]):
        pulumi.set(self, "max_message_bytes", value)

    @property
    @pulumi.getter(name="messageDownconversionEnable")
    def message_downconversion_enable(self) -> Optional[str]:
        """
        message.downconversion.enable value
        """
        return pulumi.get(self, "message_downconversion_enable")

    @message_downconversion_enable.setter
    def message_downconversion_enable(self, value: Optional[str]):
        pulumi.set(self, "message_downconversion_enable", value)

    @property
    @pulumi.getter(name="messageFormatVersion")
    def message_format_version(self) -> Optional[str]:
        """
        message.format.version value
        """
        return pulumi.get(self, "message_format_version")

    @message_format_version.setter
    def message_format_version(self, value: Optional[str]):
        pulumi.set(self, "message_format_version", value)

    @property
    @pulumi.getter(name="messageTimestampDifferenceMaxMs")
    def message_timestamp_difference_max_ms(self) -> Optional[str]:
        """
        message.timestamp.difference.max.ms value
        """
        return pulumi.get(self, "message_timestamp_difference_max_ms")

    @message_timestamp_difference_max_ms.setter
    def message_timestamp_difference_max_ms(self, value: Optional[str]):
        pulumi.set(self, "message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="messageTimestampType")
    def message_timestamp_type(self) -> Optional[str]:
        """
        message.timestamp.type value
        """
        return pulumi.get(self, "message_timestamp_type")

    @message_timestamp_type.setter
    def message_timestamp_type(self, value: Optional[str]):
        pulumi.set(self, "message_timestamp_type", value)

    @property
    @pulumi.getter(name="minCleanableDirtyRatio")
    def min_cleanable_dirty_ratio(self) -> Optional[str]:
        """
        min.cleanable.dirty.ratio value
        """
        return pulumi.get(self, "min_cleanable_dirty_ratio")

    @min_cleanable_dirty_ratio.setter
    def min_cleanable_dirty_ratio(self, value: Optional[str]):
        pulumi.set(self, "min_cleanable_dirty_ratio", value)

    @property
    @pulumi.getter(name="minCompactionLagMs")
    def min_compaction_lag_ms(self) -> Optional[str]:
        """
        min.compaction.lag.ms value
        """
        return pulumi.get(self, "min_compaction_lag_ms")

    @min_compaction_lag_ms.setter
    def min_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> Optional[str]:
        """
        min.insync.replicas value
        """
        return pulumi.get(self, "min_insync_replicas")

    @min_insync_replicas.setter
    def min_insync_replicas(self, value: Optional[str]):
        pulumi.set(self, "min_insync_replicas", value)

    @property
    @pulumi.getter
    def preallocate(self) -> Optional[str]:
        """
        preallocate value
        """
        return pulumi.get(self, "preallocate")

    @preallocate.setter
    def preallocate(self, value: Optional[str]):
        pulumi.set(self, "preallocate", value)

    @property
    @pulumi.getter(name="retentionBytes")
    def retention_bytes(self) -> Optional[str]:
        """
        retention.bytes value
        """
        return pulumi.get(self, "retention_bytes")

    @retention_bytes.setter
    def retention_bytes(self, value: Optional[str]):
        pulumi.set(self, "retention_bytes", value)

    @property
    @pulumi.getter(name="retentionMs")
    def retention_ms(self) -> Optional[str]:
        """
        retention.ms value
        """
        return pulumi.get(self, "retention_ms")

    @retention_ms.setter
    def retention_ms(self, value: Optional[str]):
        pulumi.set(self, "retention_ms", value)

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> Optional[str]:
        """
        segment.bytes value
        """
        return pulumi.get(self, "segment_bytes")

    @segment_bytes.setter
    def segment_bytes(self, value: Optional[str]):
        pulumi.set(self, "segment_bytes", value)

    @property
    @pulumi.getter(name="segmentIndexBytes")
    def segment_index_bytes(self) -> Optional[str]:
        """
        segment.index.bytes value
        """
        return pulumi.get(self, "segment_index_bytes")

    @segment_index_bytes.setter
    def segment_index_bytes(self, value: Optional[str]):
        pulumi.set(self, "segment_index_bytes", value)

    @property
    @pulumi.getter(name="segmentJitterMs")
    def segment_jitter_ms(self) -> Optional[str]:
        """
        segment.jitter.ms value
        """
        return pulumi.get(self, "segment_jitter_ms")

    @segment_jitter_ms.setter
    def segment_jitter_ms(self, value: Optional[str]):
        pulumi.set(self, "segment_jitter_ms", value)

    @property
    @pulumi.getter(name="segmentMs")
    def segment_ms(self) -> Optional[str]:
        """
        segment.ms value
        """
        return pulumi.get(self, "segment_ms")

    @segment_ms.setter
    def segment_ms(self, value: Optional[str]):
        pulumi.set(self, "segment_ms", value)

    @property
    @pulumi.getter(name="uncleanLeaderElectionEnable")
    def unclean_leader_election_enable(self) -> Optional[str]:
        """
        unclean.leader.election.enable value
        """
        return pulumi.get(self, "unclean_leader_election_enable")

    @unclean_leader_election_enable.setter
    def unclean_leader_election_enable(self, value: Optional[str]):
        pulumi.set(self, "unclean_leader_election_enable", value)


@pulumi.input_type
class GetM3AggregatorComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetM3AggregatorM3aggregatorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetM3AggregatorM3aggregatorUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 m3_version: Optional[str] = None,
                 m3aggregator_version: Optional[str] = None):
        """
        :param str custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        :param Sequence[str] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        :param str m3aggregator_version: M3 major version
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if m3_version is not None:
            pulumi.set(__self__, "m3_version", m3_version)
        if m3aggregator_version is not None:
            pulumi.set(__self__, "m3aggregator_version", m3aggregator_version)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="m3Version")
    def m3_version(self) -> Optional[str]:
        return pulumi.get(self, "m3_version")

    @m3_version.setter
    def m3_version(self, value: Optional[str]):
        pulumi.set(self, "m3_version", value)

    @property
    @pulumi.getter(name="m3aggregatorVersion")
    def m3aggregator_version(self) -> Optional[str]:
        """
        M3 major version
        """
        return pulumi.get(self, "m3aggregator_version")

    @m3aggregator_version.setter
    def m3aggregator_version(self, value: Optional[str]):
        pulumi.set(self, "m3aggregator_version", value)


@pulumi.input_type
class GetM3AggregatorServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetM3DbComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetM3DbM3dbArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetM3DbM3dbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 limits: Optional['GetM3DbM3dbUserConfigLimitsArgs'] = None,
                 m3_version: Optional[str] = None,
                 m3coordinator_enable_graphite_carbon_ingest: Optional[str] = None,
                 m3db_version: Optional[str] = None,
                 namespaces: Optional[Sequence['GetM3DbM3dbUserConfigNamespaceArgs']] = None,
                 private_access: Optional['GetM3DbM3dbUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetM3DbM3dbUserConfigPublicAccessArgs'] = None,
                 service_to_fork_from: Optional[str] = None):
        """
        :param str custom_domain: Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        :param Sequence[str] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        :param 'GetM3DbM3dbUserConfigLimitsArgs' limits: M3 limits
        :param str m3coordinator_enable_graphite_carbon_ingest: Enables access to Graphite Carbon 
               plaintext metrics ingestion. It can be enabled only for services inside VPCs. The
               metrics are written to aggregated namespaces only.
        :param str m3db_version: M3 major version
        :param Sequence['GetM3DbM3dbUserConfigNamespaceArgs'] namespaces: List of M3 namespaces
        :param 'GetM3DbM3dbUserConfigPrivateAccessArgs' private_access: Allow access to selected service ports from private networks.
        :param str project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param 'GetM3DbM3dbUserConfigPublicAccessArgs' public_access: Allow access to selected service ports from the public Internet.
        :param str service_to_fork_from: Name of another service to fork from. This has effect only 
               when a new service is being created.
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if m3_version is not None:
            pulumi.set(__self__, "m3_version", m3_version)
        if m3coordinator_enable_graphite_carbon_ingest is not None:
            pulumi.set(__self__, "m3coordinator_enable_graphite_carbon_ingest", m3coordinator_enable_graphite_carbon_ingest)
        if m3db_version is not None:
            pulumi.set(__self__, "m3db_version", m3db_version)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        """
        Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional['GetM3DbM3dbUserConfigLimitsArgs']:
        """
        M3 limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional['GetM3DbM3dbUserConfigLimitsArgs']):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter(name="m3Version")
    def m3_version(self) -> Optional[str]:
        return pulumi.get(self, "m3_version")

    @m3_version.setter
    def m3_version(self, value: Optional[str]):
        pulumi.set(self, "m3_version", value)

    @property
    @pulumi.getter(name="m3coordinatorEnableGraphiteCarbonIngest")
    def m3coordinator_enable_graphite_carbon_ingest(self) -> Optional[str]:
        """
        Enables access to Graphite Carbon 
        plaintext metrics ingestion. It can be enabled only for services inside VPCs. The
        metrics are written to aggregated namespaces only.
        """
        return pulumi.get(self, "m3coordinator_enable_graphite_carbon_ingest")

    @m3coordinator_enable_graphite_carbon_ingest.setter
    def m3coordinator_enable_graphite_carbon_ingest(self, value: Optional[str]):
        pulumi.set(self, "m3coordinator_enable_graphite_carbon_ingest", value)

    @property
    @pulumi.getter(name="m3dbVersion")
    def m3db_version(self) -> Optional[str]:
        """
        M3 major version
        """
        return pulumi.get(self, "m3db_version")

    @m3db_version.setter
    def m3db_version(self, value: Optional[str]):
        pulumi.set(self, "m3db_version", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence['GetM3DbM3dbUserConfigNamespaceArgs']]:
        """
        List of M3 namespaces
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[Sequence['GetM3DbM3dbUserConfigNamespaceArgs']]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetM3DbM3dbUserConfigPrivateAccessArgs']:
        """
        Allow access to selected service ports from private networks.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetM3DbM3dbUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetM3DbM3dbUserConfigPublicAccessArgs']:
        """
        Allow access to selected service ports from the public Internet.
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetM3DbM3dbUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        """
        Name of another service to fork from. This has effect only 
        when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetM3DbM3dbUserConfigLimitsArgs:
    def __init__(__self__, *,
                 global_datapoints: Optional[str] = None,
                 query_datapoints: Optional[str] = None,
                 query_require_exhaustive: Optional[str] = None,
                 query_series: Optional[str] = None):
        """
        :param str global_datapoints: The maximum number of data points fetched during request
        :param str query_datapoints: The maximum number of data points fetched in single query
        :param str query_require_exhaustive: When query limits are exceeded, whether to return error 
               (if True) or return partial results (False)
        :param str query_series: The maximum number of series fetched in single query
        """
        if global_datapoints is not None:
            pulumi.set(__self__, "global_datapoints", global_datapoints)
        if query_datapoints is not None:
            pulumi.set(__self__, "query_datapoints", query_datapoints)
        if query_require_exhaustive is not None:
            pulumi.set(__self__, "query_require_exhaustive", query_require_exhaustive)
        if query_series is not None:
            pulumi.set(__self__, "query_series", query_series)

    @property
    @pulumi.getter(name="globalDatapoints")
    def global_datapoints(self) -> Optional[str]:
        """
        The maximum number of data points fetched during request
        """
        return pulumi.get(self, "global_datapoints")

    @global_datapoints.setter
    def global_datapoints(self, value: Optional[str]):
        pulumi.set(self, "global_datapoints", value)

    @property
    @pulumi.getter(name="queryDatapoints")
    def query_datapoints(self) -> Optional[str]:
        """
        The maximum number of data points fetched in single query
        """
        return pulumi.get(self, "query_datapoints")

    @query_datapoints.setter
    def query_datapoints(self, value: Optional[str]):
        pulumi.set(self, "query_datapoints", value)

    @property
    @pulumi.getter(name="queryRequireExhaustive")
    def query_require_exhaustive(self) -> Optional[str]:
        """
        When query limits are exceeded, whether to return error 
        (if True) or return partial results (False)
        """
        return pulumi.get(self, "query_require_exhaustive")

    @query_require_exhaustive.setter
    def query_require_exhaustive(self, value: Optional[str]):
        pulumi.set(self, "query_require_exhaustive", value)

    @property
    @pulumi.getter(name="querySeries")
    def query_series(self) -> Optional[str]:
        """
        The maximum number of series fetched in single query
        """
        return pulumi.get(self, "query_series")

    @query_series.setter
    def query_series(self, value: Optional[str]):
        pulumi.set(self, "query_series", value)


@pulumi.input_type
class GetM3DbM3dbUserConfigNamespaceArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 options: Optional['GetM3DbM3dbUserConfigNamespaceOptionsArgs'] = None,
                 resolution: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: The name of the namespace
        :param 'GetM3DbM3dbUserConfigNamespaceOptionsArgs' options: Namespace options
        :param str resolution: The resolution for an aggregated namespace
        :param str type: The type of aggregation (aggregated/unaggregated)
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if resolution is not None:
            pulumi.set(__self__, "resolution", resolution)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the namespace
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetM3DbM3dbUserConfigNamespaceOptionsArgs']:
        """
        Namespace options
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetM3DbM3dbUserConfigNamespaceOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def resolution(self) -> Optional[str]:
        """
        The resolution for an aggregated namespace
        """
        return pulumi.get(self, "resolution")

    @resolution.setter
    def resolution(self, value: Optional[str]):
        pulumi.set(self, "resolution", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of aggregation (aggregated/unaggregated)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetM3DbM3dbUserConfigNamespaceOptionsArgs:
    def __init__(__self__, *,
                 retention_options: Optional['GetM3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs'] = None,
                 snapshot_enabled: Optional[str] = None,
                 writes_to_commitlog: Optional[str] = None):
        """
        :param 'GetM3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs' retention_options: Retention options
        :param str snapshot_enabled: Controls whether M3DB will create snapshot files for 
               this namespace
        :param str writes_to_commitlog: Controls whether M3DB will include writes to this 
               namespace in the commitlog.
        """
        if retention_options is not None:
            pulumi.set(__self__, "retention_options", retention_options)
        if snapshot_enabled is not None:
            pulumi.set(__self__, "snapshot_enabled", snapshot_enabled)
        if writes_to_commitlog is not None:
            pulumi.set(__self__, "writes_to_commitlog", writes_to_commitlog)

    @property
    @pulumi.getter(name="retentionOptions")
    def retention_options(self) -> Optional['GetM3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs']:
        """
        Retention options
        """
        return pulumi.get(self, "retention_options")

    @retention_options.setter
    def retention_options(self, value: Optional['GetM3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs']):
        pulumi.set(self, "retention_options", value)

    @property
    @pulumi.getter(name="snapshotEnabled")
    def snapshot_enabled(self) -> Optional[str]:
        """
        Controls whether M3DB will create snapshot files for 
        this namespace
        """
        return pulumi.get(self, "snapshot_enabled")

    @snapshot_enabled.setter
    def snapshot_enabled(self, value: Optional[str]):
        pulumi.set(self, "snapshot_enabled", value)

    @property
    @pulumi.getter(name="writesToCommitlog")
    def writes_to_commitlog(self) -> Optional[str]:
        """
        Controls whether M3DB will include writes to this 
        namespace in the commitlog.
        """
        return pulumi.get(self, "writes_to_commitlog")

    @writes_to_commitlog.setter
    def writes_to_commitlog(self, value: Optional[str]):
        pulumi.set(self, "writes_to_commitlog", value)


@pulumi.input_type
class GetM3DbM3dbUserConfigNamespaceOptionsRetentionOptionsArgs:
    def __init__(__self__, *,
                 block_data_expiry_duration: Optional[str] = None,
                 blocksize_duration: Optional[str] = None,
                 buffer_future_duration: Optional[str] = None,
                 buffer_past_duration: Optional[str] = None,
                 retention_period_duration: Optional[str] = None):
        """
        :param str block_data_expiry_duration: Controls how long we wait before expiring stale data
        :param str blocksize_duration: Controls how long to keep a block in memory before 
               flushing to a fileset on disk
        :param str buffer_future_duration: Controls how far into the future writes to 
               the namespace will be accepted
        :param str buffer_past_duration: Controls how far into the past writes to the 
               namespace will be accepted
        :param str retention_period_duration: Controls the duration of time that M3DB will 
               retain data for the namespace
        """
        if block_data_expiry_duration is not None:
            pulumi.set(__self__, "block_data_expiry_duration", block_data_expiry_duration)
        if blocksize_duration is not None:
            pulumi.set(__self__, "blocksize_duration", blocksize_duration)
        if buffer_future_duration is not None:
            pulumi.set(__self__, "buffer_future_duration", buffer_future_duration)
        if buffer_past_duration is not None:
            pulumi.set(__self__, "buffer_past_duration", buffer_past_duration)
        if retention_period_duration is not None:
            pulumi.set(__self__, "retention_period_duration", retention_period_duration)

    @property
    @pulumi.getter(name="blockDataExpiryDuration")
    def block_data_expiry_duration(self) -> Optional[str]:
        """
        Controls how long we wait before expiring stale data
        """
        return pulumi.get(self, "block_data_expiry_duration")

    @block_data_expiry_duration.setter
    def block_data_expiry_duration(self, value: Optional[str]):
        pulumi.set(self, "block_data_expiry_duration", value)

    @property
    @pulumi.getter(name="blocksizeDuration")
    def blocksize_duration(self) -> Optional[str]:
        """
        Controls how long to keep a block in memory before 
        flushing to a fileset on disk
        """
        return pulumi.get(self, "blocksize_duration")

    @blocksize_duration.setter
    def blocksize_duration(self, value: Optional[str]):
        pulumi.set(self, "blocksize_duration", value)

    @property
    @pulumi.getter(name="bufferFutureDuration")
    def buffer_future_duration(self) -> Optional[str]:
        """
        Controls how far into the future writes to 
        the namespace will be accepted
        """
        return pulumi.get(self, "buffer_future_duration")

    @buffer_future_duration.setter
    def buffer_future_duration(self, value: Optional[str]):
        pulumi.set(self, "buffer_future_duration", value)

    @property
    @pulumi.getter(name="bufferPastDuration")
    def buffer_past_duration(self) -> Optional[str]:
        """
        Controls how far into the past writes to the 
        namespace will be accepted
        """
        return pulumi.get(self, "buffer_past_duration")

    @buffer_past_duration.setter
    def buffer_past_duration(self, value: Optional[str]):
        pulumi.set(self, "buffer_past_duration", value)

    @property
    @pulumi.getter(name="retentionPeriodDuration")
    def retention_period_duration(self) -> Optional[str]:
        """
        Controls the duration of time that M3DB will 
        retain data for the namespace
        """
        return pulumi.get(self, "retention_period_duration")

    @retention_period_duration.setter
    def retention_period_duration(self, value: Optional[str]):
        pulumi.set(self, "retention_period_duration", value)


@pulumi.input_type
class GetM3DbM3dbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 m3coordinator: Optional[str] = None):
        """
        :param str m3coordinator: Allow clients to connect to m3coordinator from the public internet 
               for service nodes that are in a project VPC or another type of private network.
        """
        if m3coordinator is not None:
            pulumi.set(__self__, "m3coordinator", m3coordinator)

    @property
    @pulumi.getter
    def m3coordinator(self) -> Optional[str]:
        """
        Allow clients to connect to m3coordinator from the public internet 
        for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "m3coordinator")

    @m3coordinator.setter
    def m3coordinator(self, value: Optional[str]):
        pulumi.set(self, "m3coordinator", value)


@pulumi.input_type
class GetM3DbM3dbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 m3coordinator: Optional[str] = None):
        """
        :param str m3coordinator: Allow clients to connect to m3coordinator from the public internet 
               for service nodes that are in a project VPC or another type of private network.
        """
        if m3coordinator is not None:
            pulumi.set(__self__, "m3coordinator", m3coordinator)

    @property
    @pulumi.getter
    def m3coordinator(self) -> Optional[str]:
        """
        Allow clients to connect to m3coordinator from the public internet 
        for service nodes that are in a project VPC or another type of private network.
        """
        return pulumi.get(self, "m3coordinator")

    @m3coordinator.setter
    def m3coordinator(self, value: Optional[str]):
        pulumi.set(self, "m3coordinator", value)


@pulumi.input_type
class GetM3DbServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetMySqlComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetMySqlMysqlArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetMySqlMysqlUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 backup_hour: Optional[str] = None,
                 backup_minute: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 mysql: Optional['GetMySqlMysqlUserConfigMysqlArgs'] = None,
                 mysql_version: Optional[str] = None,
                 private_access: Optional['GetMySqlMysqlUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetMySqlMysqlUserConfigPublicAccessArgs'] = None,
                 recovery_target_time: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        """
        :param str admin_password: Custom password for admin user. Defaults to random string. 
               This must be set only when a new service is being created.
        :param str admin_username: Custom username for admin user. This must be set only when a 
               new service is being created.
        :param str backup_hour: The hour of day (in UTC) when backup for the service is started. 
               New backup is only started if previous backup has already completed.
        :param str backup_minute: The minute of an hour when backup for the service is started. 
               New backup is only started if previous backup has already completed.
        :param Sequence[str] ip_filters: Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        :param 'GetMySqlMysqlUserConfigMysqlArgs' mysql: MySQL specific server provided values.
        :param str mysql_version: MySQL major version
        :param 'GetMySqlMysqlUserConfigPrivateAccessArgs' private_access: Allow access to selected service ports from private networks
        :param str project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param 'GetMySqlMysqlUserConfigPublicAccessArgs' public_access: Allow access to selected service ports from the public Internet
        :param str recovery_target_time: Recovery target time when forking a service. This has effect 
               only when a new service is being created.
        :param str service_to_fork_from: Name of another service to fork from. This has effect only when 
               a new service is being created.
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if mysql_version is not None:
            pulumi.set(__self__, "mysql_version", mysql_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        """
        Custom password for admin user. Defaults to random string. 
        This must be set only when a new service is being created.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        """
        Custom username for admin user. This must be set only when a 
        new service is being created.
        """
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[str]:
        """
        The hour of day (in UTC) when backup for the service is started. 
        New backup is only started if previous backup has already completed.
        """
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[str]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[str]:
        """
        The minute of an hour when backup for the service is started. 
        New backup is only started if previous backup has already completed.
        """
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[str]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional['GetMySqlMysqlUserConfigMysqlArgs']:
        """
        MySQL specific server provided values.
        """
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional['GetMySqlMysqlUserConfigMysqlArgs']):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[str]:
        """
        MySQL major version
        """
        return pulumi.get(self, "mysql_version")

    @mysql_version.setter
    def mysql_version(self, value: Optional[str]):
        pulumi.set(self, "mysql_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetMySqlMysqlUserConfigPrivateAccessArgs']:
        """
        Allow access to selected service ports from private networks
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetMySqlMysqlUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetMySqlMysqlUserConfigPublicAccessArgs']:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetMySqlMysqlUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        """
        Recovery target time when forking a service. This has effect 
        only when a new service is being created.
        """
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[str]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        """
        Name of another service to fork from. This has effect only when 
        a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetMySqlMysqlUserConfigMysqlArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[str] = None,
                 default_time_zone: Optional[str] = None,
                 group_concat_max_len: Optional[str] = None,
                 information_schema_stats_expiry: Optional[str] = None,
                 innodb_ft_min_token_size: Optional[str] = None,
                 innodb_ft_server_stopword_table: Optional[str] = None,
                 innodb_lock_wait_timeout: Optional[str] = None,
                 innodb_log_buffer_size: Optional[str] = None,
                 innodb_online_alter_log_max_size: Optional[str] = None,
                 innodb_print_all_deadlocks: Optional[str] = None,
                 innodb_rollback_on_timeout: Optional[str] = None,
                 interactive_timeout: Optional[str] = None,
                 max_allowed_packet: Optional[str] = None,
                 max_heap_table_size: Optional[str] = None,
                 net_read_timeout: Optional[str] = None,
                 net_write_timeout: Optional[str] = None,
                 sort_buffer_size: Optional[str] = None,
                 sql_mode: Optional[str] = None,
                 sql_require_primary_key: Optional[str] = None,
                 tmp_table_size: Optional[str] = None,
                 wait_timeout: Optional[str] = None):
        """
        :param str connect_timeout: The number of seconds that the mysqld server waits for a 
               connect packet before responding with Bad handshake
        :param str default_time_zone: Default server time zone as an offset from UTC 
               (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
        :param str group_concat_max_len: The maximum permitted result length in bytes for 
               the GROUP_CONCAT() function.
        :param str information_schema_stats_expiry: The time, in seconds, before cached 
               statistics expire
        :param str innodb_ft_min_token_size: Minimum length of words that are stored in 
               an InnoDB FULLTEXT index.
        :param str innodb_ft_server_stopword_table: This option is used to specify your 
               own InnoDB FULLTEXT index stopword list for all InnoDB tables.
        :param str innodb_lock_wait_timeout: The length of time in seconds an InnoDB 
               transaction waits for a row lock before giving up.
        :param str innodb_log_buffer_size: The size in bytes of the buffer that InnoDB 
               uses to write to the log files on disk.
        :param str innodb_online_alter_log_max_size: The upper limit in bytes on the 
               size of the temporary log files used during online DDL operations for InnoDB tables.
        :param str innodb_print_all_deadlocks: When enabled, information about all 
               deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
        :param str innodb_rollback_on_timeout: When enabled a transaction timeout 
               causes InnoDB to abort and roll back the entire transaction.
        :param str interactive_timeout: The number of seconds the server waits for 
               activity on an interactive connection before closing it.
        :param str max_allowed_packet: Size of the largest message in bytes that can 
               be received by the server. Default is 67108864 (64M)
        :param str max_heap_table_size: Limits the size of internal in-memory tables. 
               Also set tmp_table_size. Default is 16777216 (16M)
        :param str net_read_timeout: The number of seconds to wait for more data from 
               a connection before aborting the read.
        :param str net_write_timeout: The number of seconds to wait for a block to be 
               written to a connection before aborting the write.
        :param str sort_buffer_size: Sort buffer size in bytes for ORDER BY optimization. 
               Default is 262144 (256K)
        :param str sql_mode: Global SQL mode. Set to empty to use MySQL server defaults. 
               When creating a new service and not setting this field Aiven default SQL mode (strict,
               SQL standard compliant) will be assigned.
        :param str sql_require_primary_key: Require primary key to be defined for new 
               tables or old tables modified with ALTER TABLE and fail if missing. It is recommended
               to always have primary keys because various functionality may break if any large table
               is missing them.
        :param str tmp_table_size: Limits the size of internal in-memory tables. Also set 
               max_heap_table_size. Default is 16777216 (16M)
        :param str wait_timeout: The number of seconds the server waits for activity on 
               a noninteractive connection before closing it.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if group_concat_max_len is not None:
            pulumi.set(__self__, "group_concat_max_len", group_concat_max_len)
        if information_schema_stats_expiry is not None:
            pulumi.set(__self__, "information_schema_stats_expiry", information_schema_stats_expiry)
        if innodb_ft_min_token_size is not None:
            pulumi.set(__self__, "innodb_ft_min_token_size", innodb_ft_min_token_size)
        if innodb_ft_server_stopword_table is not None:
            pulumi.set(__self__, "innodb_ft_server_stopword_table", innodb_ft_server_stopword_table)
        if innodb_lock_wait_timeout is not None:
            pulumi.set(__self__, "innodb_lock_wait_timeout", innodb_lock_wait_timeout)
        if innodb_log_buffer_size is not None:
            pulumi.set(__self__, "innodb_log_buffer_size", innodb_log_buffer_size)
        if innodb_online_alter_log_max_size is not None:
            pulumi.set(__self__, "innodb_online_alter_log_max_size", innodb_online_alter_log_max_size)
        if innodb_print_all_deadlocks is not None:
            pulumi.set(__self__, "innodb_print_all_deadlocks", innodb_print_all_deadlocks)
        if innodb_rollback_on_timeout is not None:
            pulumi.set(__self__, "innodb_rollback_on_timeout", innodb_rollback_on_timeout)
        if interactive_timeout is not None:
            pulumi.set(__self__, "interactive_timeout", interactive_timeout)
        if max_allowed_packet is not None:
            pulumi.set(__self__, "max_allowed_packet", max_allowed_packet)
        if max_heap_table_size is not None:
            pulumi.set(__self__, "max_heap_table_size", max_heap_table_size)
        if net_read_timeout is not None:
            pulumi.set(__self__, "net_read_timeout", net_read_timeout)
        if net_write_timeout is not None:
            pulumi.set(__self__, "net_write_timeout", net_write_timeout)
        if sort_buffer_size is not None:
            pulumi.set(__self__, "sort_buffer_size", sort_buffer_size)
        if sql_mode is not None:
            pulumi.set(__self__, "sql_mode", sql_mode)
        if sql_require_primary_key is not None:
            pulumi.set(__self__, "sql_require_primary_key", sql_require_primary_key)
        if tmp_table_size is not None:
            pulumi.set(__self__, "tmp_table_size", tmp_table_size)
        if wait_timeout is not None:
            pulumi.set(__self__, "wait_timeout", wait_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[str]:
        """
        The number of seconds that the mysqld server waits for a 
        connect packet before responding with Bad handshake
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[str]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[str]:
        """
        Default server time zone as an offset from UTC 
        (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
        """
        return pulumi.get(self, "default_time_zone")

    @default_time_zone.setter
    def default_time_zone(self, value: Optional[str]):
        pulumi.set(self, "default_time_zone", value)

    @property
    @pulumi.getter(name="groupConcatMaxLen")
    def group_concat_max_len(self) -> Optional[str]:
        """
        The maximum permitted result length in bytes for 
        the GROUP_CONCAT() function.
        """
        return pulumi.get(self, "group_concat_max_len")

    @group_concat_max_len.setter
    def group_concat_max_len(self, value: Optional[str]):
        pulumi.set(self, "group_concat_max_len", value)

    @property
    @pulumi.getter(name="informationSchemaStatsExpiry")
    def information_schema_stats_expiry(self) -> Optional[str]:
        """
        The time, in seconds, before cached 
        statistics expire
        """
        return pulumi.get(self, "information_schema_stats_expiry")

    @information_schema_stats_expiry.setter
    def information_schema_stats_expiry(self, value: Optional[str]):
        pulumi.set(self, "information_schema_stats_expiry", value)

    @property
    @pulumi.getter(name="innodbFtMinTokenSize")
    def innodb_ft_min_token_size(self) -> Optional[str]:
        """
        Minimum length of words that are stored in 
        an InnoDB FULLTEXT index.
        """
        return pulumi.get(self, "innodb_ft_min_token_size")

    @innodb_ft_min_token_size.setter
    def innodb_ft_min_token_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_ft_min_token_size", value)

    @property
    @pulumi.getter(name="innodbFtServerStopwordTable")
    def innodb_ft_server_stopword_table(self) -> Optional[str]:
        """
        This option is used to specify your 
        own InnoDB FULLTEXT index stopword list for all InnoDB tables.
        """
        return pulumi.get(self, "innodb_ft_server_stopword_table")

    @innodb_ft_server_stopword_table.setter
    def innodb_ft_server_stopword_table(self, value: Optional[str]):
        pulumi.set(self, "innodb_ft_server_stopword_table", value)

    @property
    @pulumi.getter(name="innodbLockWaitTimeout")
    def innodb_lock_wait_timeout(self) -> Optional[str]:
        """
        The length of time in seconds an InnoDB 
        transaction waits for a row lock before giving up.
        """
        return pulumi.get(self, "innodb_lock_wait_timeout")

    @innodb_lock_wait_timeout.setter
    def innodb_lock_wait_timeout(self, value: Optional[str]):
        pulumi.set(self, "innodb_lock_wait_timeout", value)

    @property
    @pulumi.getter(name="innodbLogBufferSize")
    def innodb_log_buffer_size(self) -> Optional[str]:
        """
        The size in bytes of the buffer that InnoDB 
        uses to write to the log files on disk.
        """
        return pulumi.get(self, "innodb_log_buffer_size")

    @innodb_log_buffer_size.setter
    def innodb_log_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_log_buffer_size", value)

    @property
    @pulumi.getter(name="innodbOnlineAlterLogMaxSize")
    def innodb_online_alter_log_max_size(self) -> Optional[str]:
        """
        The upper limit in bytes on the 
        size of the temporary log files used during online DDL operations for InnoDB tables.
        """
        return pulumi.get(self, "innodb_online_alter_log_max_size")

    @innodb_online_alter_log_max_size.setter
    def innodb_online_alter_log_max_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_online_alter_log_max_size", value)

    @property
    @pulumi.getter(name="innodbPrintAllDeadlocks")
    def innodb_print_all_deadlocks(self) -> Optional[str]:
        """
        When enabled, information about all 
        deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
        """
        return pulumi.get(self, "innodb_print_all_deadlocks")

    @innodb_print_all_deadlocks.setter
    def innodb_print_all_deadlocks(self, value: Optional[str]):
        pulumi.set(self, "innodb_print_all_deadlocks", value)

    @property
    @pulumi.getter(name="innodbRollbackOnTimeout")
    def innodb_rollback_on_timeout(self) -> Optional[str]:
        """
        When enabled a transaction timeout 
        causes InnoDB to abort and roll back the entire transaction.
        """
        return pulumi.get(self, "innodb_rollback_on_timeout")

    @innodb_rollback_on_timeout.setter
    def innodb_rollback_on_timeout(self, value: Optional[str]):
        pulumi.set(self, "innodb_rollback_on_timeout", value)

    @property
    @pulumi.getter(name="interactiveTimeout")
    def interactive_timeout(self) -> Optional[str]:
        """
        The number of seconds the server waits for 
        activity on an interactive connection before closing it.
        """
        return pulumi.get(self, "interactive_timeout")

    @interactive_timeout.setter
    def interactive_timeout(self, value: Optional[str]):
        pulumi.set(self, "interactive_timeout", value)

    @property
    @pulumi.getter(name="maxAllowedPacket")
    def max_allowed_packet(self) -> Optional[str]:
        """
        Size of the largest message in bytes that can 
        be received by the server. Default is 67108864 (64M)
        """
        return pulumi.get(self, "max_allowed_packet")

    @max_allowed_packet.setter
    def max_allowed_packet(self, value: Optional[str]):
        pulumi.set(self, "max_allowed_packet", value)

    @property
    @pulumi.getter(name="maxHeapTableSize")
    def max_heap_table_size(self) -> Optional[str]:
        """
        Limits the size of internal in-memory tables. 
        Also set tmp_table_size. Default is 16777216 (16M)
        """
        return pulumi.get(self, "max_heap_table_size")

    @max_heap_table_size.setter
    def max_heap_table_size(self, value: Optional[str]):
        pulumi.set(self, "max_heap_table_size", value)

    @property
    @pulumi.getter(name="netReadTimeout")
    def net_read_timeout(self) -> Optional[str]:
        """
        The number of seconds to wait for more data from 
        a connection before aborting the read.
        """
        return pulumi.get(self, "net_read_timeout")

    @net_read_timeout.setter
    def net_read_timeout(self, value: Optional[str]):
        pulumi.set(self, "net_read_timeout", value)

    @property
    @pulumi.getter(name="netWriteTimeout")
    def net_write_timeout(self) -> Optional[str]:
        """
        The number of seconds to wait for a block to be 
        written to a connection before aborting the write.
        """
        return pulumi.get(self, "net_write_timeout")

    @net_write_timeout.setter
    def net_write_timeout(self, value: Optional[str]):
        pulumi.set(self, "net_write_timeout", value)

    @property
    @pulumi.getter(name="sortBufferSize")
    def sort_buffer_size(self) -> Optional[str]:
        """
        Sort buffer size in bytes for ORDER BY optimization. 
        Default is 262144 (256K)
        """
        return pulumi.get(self, "sort_buffer_size")

    @sort_buffer_size.setter
    def sort_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "sort_buffer_size", value)

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> Optional[str]:
        """
        Global SQL mode. Set to empty to use MySQL server defaults. 
        When creating a new service and not setting this field Aiven default SQL mode (strict,
        SQL standard compliant) will be assigned.
        """
        return pulumi.get(self, "sql_mode")

    @sql_mode.setter
    def sql_mode(self, value: Optional[str]):
        pulumi.set(self, "sql_mode", value)

    @property
    @pulumi.getter(name="sqlRequirePrimaryKey")
    def sql_require_primary_key(self) -> Optional[str]:
        """
        Require primary key to be defined for new 
        tables or old tables modified with ALTER TABLE and fail if missing. It is recommended
        to always have primary keys because various functionality may break if any large table
        is missing them.
        """
        return pulumi.get(self, "sql_require_primary_key")

    @sql_require_primary_key.setter
    def sql_require_primary_key(self, value: Optional[str]):
        pulumi.set(self, "sql_require_primary_key", value)

    @property
    @pulumi.getter(name="tmpTableSize")
    def tmp_table_size(self) -> Optional[str]:
        """
        Limits the size of internal in-memory tables. Also set 
        max_heap_table_size. Default is 16777216 (16M)
        """
        return pulumi.get(self, "tmp_table_size")

    @tmp_table_size.setter
    def tmp_table_size(self, value: Optional[str]):
        pulumi.set(self, "tmp_table_size", value)

    @property
    @pulumi.getter(name="waitTimeout")
    def wait_timeout(self) -> Optional[str]:
        """
        The number of seconds the server waits for activity on 
        a noninteractive connection before closing it.
        """
        return pulumi.get(self, "wait_timeout")

    @wait_timeout.setter
    def wait_timeout(self, value: Optional[str]):
        pulumi.set(self, "wait_timeout", value)


@pulumi.input_type
class GetMySqlMysqlUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[str] = None,
                 prometheus: Optional[str] = None):
        """
        :param str mysql: MySQL specific server provided values.
        :param str prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network
        """
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[str]:
        """
        MySQL specific server provided values.
        """
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[str]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetMySqlMysqlUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[str] = None,
                 prometheus: Optional[str] = None):
        """
        :param str mysql: MySQL specific server provided values.
        :param str prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network
        """
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[str]:
        """
        MySQL specific server provided values.
        """
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[str]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetMySqlServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetPgComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        """
        :param str host: PostgreSQL master node host IP or name
        :param int port: PostgreSQL port
        :param bool ssl: the server where to migrate data from is secured with SSL.
        """
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        PostgreSQL master node host IP or name
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        PostgreSQL port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        """
        the server where to migrate data from is secured with SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetPgPgArgs:
    def __init__(__self__, *,
                 dbname: str,
                 host: str,
                 password: str,
                 port: int,
                 replica_uri: str,
                 sslmode: str,
                 uri: str,
                 user: str):
        """
        :param str dbname: Primary PostgreSQL database name
        :param str host: PostgreSQL master node host IP or name
        :param str password: PostgreSQL admin user password
        :param int port: PostgreSQL port
        :param str replica_uri: PostgreSQL replica URI for services with a replica
        :param str sslmode: PostgreSQL sslmode setting (currently always `require`)
        :param str uri: PostgreSQL master connection URI
        :param str user: PostgreSQL admin user name
        """
        pulumi.set(__self__, "dbname", dbname)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replica_uri", replica_uri)
        pulumi.set(__self__, "sslmode", sslmode)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def dbname(self) -> str:
        """
        Primary PostgreSQL database name
        """
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: str):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        PostgreSQL master node host IP or name
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        PostgreSQL admin user password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        PostgreSQL port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicaUri")
    def replica_uri(self) -> str:
        """
        PostgreSQL replica URI for services with a replica
        """
        return pulumi.get(self, "replica_uri")

    @replica_uri.setter
    def replica_uri(self, value: str):
        pulumi.set(self, "replica_uri", value)

    @property
    @pulumi.getter
    def sslmode(self) -> str:
        """
        PostgreSQL sslmode setting (currently always `require`)
        """
        return pulumi.get(self, "sslmode")

    @sslmode.setter
    def sslmode(self, value: str):
        pulumi.set(self, "sslmode", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        PostgreSQL master connection URI
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        PostgreSQL admin user name
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: str):
        pulumi.set(self, "user", value)


@pulumi.input_type
class GetPgPgUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 backup_hour: Optional[str] = None,
                 backup_minute: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 migration: Optional['GetPgPgUserConfigMigrationArgs'] = None,
                 pg: Optional['GetPgPgUserConfigPgArgs'] = None,
                 pg_read_replica: Optional[str] = None,
                 pg_service_to_fork_from: Optional[str] = None,
                 pg_version: Optional[str] = None,
                 pgbouncer: Optional['GetPgPgUserConfigPgbouncerArgs'] = None,
                 pglookout: Optional['GetPgPgUserConfigPglookoutArgs'] = None,
                 private_access: Optional['GetPgPgUserConfigPrivateAccessArgs'] = None,
                 privatelink_access: Optional['GetPgPgUserConfigPrivatelinkAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetPgPgUserConfigPublicAccessArgs'] = None,
                 recovery_target_time: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None,
                 shared_buffers_percentage: Optional[str] = None,
                 synchronous_replication: Optional[str] = None,
                 timescaledb: Optional['GetPgPgUserConfigTimescaledbArgs'] = None,
                 variant: Optional[str] = None,
                 work_mem: Optional[str] = None):
        """
        :param str admin_password: custom password for admin user. Defaults to random string. *This must
               be set only when a new service is being created.*
        :param str admin_username: custom username for admin user. *This must be set only when a new service
               is being created.*
        :param str backup_hour: the hour of day (in UTC) when backup for the service is started. New backup 
               is only started if previous backup has already completed.
        :param str backup_minute: the minute of an hour when backup for the service is started. New backup 
               is only started if previous backup has already completed.
        :param Sequence[str] ip_filters: allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param 'GetPgPgUserConfigMigrationArgs' migration: migrate data from existing server, has the following options:
        :param 'GetPgPgUserConfigPgArgs' pg: PostgreSQL specific server provided values.
        :param str pg_read_replica: This setting is deprecated. Use read-replica service integration instead.
        :param str pg_service_to_fork_from: Name of the PG Service from which to fork (deprecated, use service_to_fork_from). 
               This has effect only when a new service is being created.
        :param str pg_version: PostgreSQL major version.
        :param 'GetPgPgUserConfigPgbouncerArgs' pgbouncer: Enable pgbouncer.
        :param 'GetPgPgUserConfigPglookoutArgs' pglookout: PGLookout settings.
        :param 'GetPgPgUserConfigPrivateAccessArgs' private_access: Allow access to selected service ports from private networks.
        :param 'GetPgPgUserConfigPrivatelinkAccessArgs' privatelink_access: Allow access to selected service components through Privatelink.
        :param str project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param 'GetPgPgUserConfigPublicAccessArgs' public_access: Allow access to selected service ports from the public Internet
        :param str recovery_target_time: Recovery target time when forking a service. This has effect 
               only when a new service is being created.
        :param str service_to_fork_from: Name of another service to fork from. This has effect only 
               when a new service is being created.
        :param str shared_buffers_percentage: Percentage of total RAM that the database server uses for 
               memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts
               the shared_buffers configuration value. The absolute maximum is 12 GB.
        :param str synchronous_replication: Synchronous replication type. Note that the service plan 
               also needs to support synchronous replication.
        :param 'GetPgPgUserConfigTimescaledbArgs' timescaledb: TimescaleDB extension configuration values.
        :param str variant: Variant of the PostgreSQL service, may affect the features that are 
               exposed by default. Options: `aiven` or `timescale`.
        :param str work_mem: Sets the maximum amount of memory to be used by a query operation (such 
               as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of
               total RAM (up to 32MB).
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pg_read_replica is not None:
            pulumi.set(__self__, "pg_read_replica", pg_read_replica)
        if pg_service_to_fork_from is not None:
            pulumi.set(__self__, "pg_service_to_fork_from", pg_service_to_fork_from)
        if pg_version is not None:
            pulumi.set(__self__, "pg_version", pg_version)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if pglookout is not None:
            pulumi.set(__self__, "pglookout", pglookout)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if privatelink_access is not None:
            pulumi.set(__self__, "privatelink_access", privatelink_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if shared_buffers_percentage is not None:
            pulumi.set(__self__, "shared_buffers_percentage", shared_buffers_percentage)
        if synchronous_replication is not None:
            pulumi.set(__self__, "synchronous_replication", synchronous_replication)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        """
        custom password for admin user. Defaults to random string. *This must
        be set only when a new service is being created.*
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        """
        custom username for admin user. *This must be set only when a new service
        is being created.*
        """
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[str]:
        """
        the hour of day (in UTC) when backup for the service is started. New backup 
        is only started if previous backup has already completed.
        """
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[str]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[str]:
        """
        the minute of an hour when backup for the service is started. New backup 
        is only started if previous backup has already completed.
        """
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[str]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional['GetPgPgUserConfigMigrationArgs']:
        """
        migrate data from existing server, has the following options:
        """
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional['GetPgPgUserConfigMigrationArgs']):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter
    def pg(self) -> Optional['GetPgPgUserConfigPgArgs']:
        """
        PostgreSQL specific server provided values.
        """
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional['GetPgPgUserConfigPgArgs']):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter(name="pgReadReplica")
    def pg_read_replica(self) -> Optional[str]:
        """
        This setting is deprecated. Use read-replica service integration instead.
        """
        return pulumi.get(self, "pg_read_replica")

    @pg_read_replica.setter
    def pg_read_replica(self, value: Optional[str]):
        pulumi.set(self, "pg_read_replica", value)

    @property
    @pulumi.getter(name="pgServiceToForkFrom")
    def pg_service_to_fork_from(self) -> Optional[str]:
        """
        Name of the PG Service from which to fork (deprecated, use service_to_fork_from). 
        This has effect only when a new service is being created.
        """
        return pulumi.get(self, "pg_service_to_fork_from")

    @pg_service_to_fork_from.setter
    def pg_service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "pg_service_to_fork_from", value)

    @property
    @pulumi.getter(name="pgVersion")
    def pg_version(self) -> Optional[str]:
        """
        PostgreSQL major version.
        """
        return pulumi.get(self, "pg_version")

    @pg_version.setter
    def pg_version(self, value: Optional[str]):
        pulumi.set(self, "pg_version", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional['GetPgPgUserConfigPgbouncerArgs']:
        """
        Enable pgbouncer.
        """
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional['GetPgPgUserConfigPgbouncerArgs']):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def pglookout(self) -> Optional['GetPgPgUserConfigPglookoutArgs']:
        """
        PGLookout settings.
        """
        return pulumi.get(self, "pglookout")

    @pglookout.setter
    def pglookout(self, value: Optional['GetPgPgUserConfigPglookoutArgs']):
        pulumi.set(self, "pglookout", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetPgPgUserConfigPrivateAccessArgs']:
        """
        Allow access to selected service ports from private networks.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetPgPgUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="privatelinkAccess")
    def privatelink_access(self) -> Optional['GetPgPgUserConfigPrivatelinkAccessArgs']:
        """
        Allow access to selected service components through Privatelink.
        """
        return pulumi.get(self, "privatelink_access")

    @privatelink_access.setter
    def privatelink_access(self, value: Optional['GetPgPgUserConfigPrivatelinkAccessArgs']):
        pulumi.set(self, "privatelink_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetPgPgUserConfigPublicAccessArgs']:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetPgPgUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        """
        Recovery target time when forking a service. This has effect 
        only when a new service is being created.
        """
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[str]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        """
        Name of another service to fork from. This has effect only 
        when a new service is being created.
        """
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="sharedBuffersPercentage")
    def shared_buffers_percentage(self) -> Optional[str]:
        """
        Percentage of total RAM that the database server uses for 
        memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts
        the shared_buffers configuration value. The absolute maximum is 12 GB.
        """
        return pulumi.get(self, "shared_buffers_percentage")

    @shared_buffers_percentage.setter
    def shared_buffers_percentage(self, value: Optional[str]):
        pulumi.set(self, "shared_buffers_percentage", value)

    @property
    @pulumi.getter(name="synchronousReplication")
    def synchronous_replication(self) -> Optional[str]:
        """
        Synchronous replication type. Note that the service plan 
        also needs to support synchronous replication.
        """
        return pulumi.get(self, "synchronous_replication")

    @synchronous_replication.setter
    def synchronous_replication(self, value: Optional[str]):
        pulumi.set(self, "synchronous_replication", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional['GetPgPgUserConfigTimescaledbArgs']:
        """
        TimescaleDB extension configuration values.
        """
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional['GetPgPgUserConfigTimescaledbArgs']):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[str]:
        """
        Variant of the PostgreSQL service, may affect the features that are 
        exposed by default. Options: `aiven` or `timescale`.
        """
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[str]):
        pulumi.set(self, "variant", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        """
        Sets the maximum amount of memory to be used by a query operation (such 
        as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of
        total RAM (up to 32MB).
        """
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[str]):
        pulumi.set(self, "work_mem", value)


@pulumi.input_type
class GetPgPgUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 ssl: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str dbname: Primary PostgreSQL database name
        :param str host: PostgreSQL master node host IP or name
        :param str password: PostgreSQL admin user password
        :param str port: PostgreSQL port
        :param str ssl: the server where to migrate data from is secured with SSL.
        :param str username: user name for authentication with the server where to migrate data from.
        """
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[str]:
        """
        Primary PostgreSQL database name
        """
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[str]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        PostgreSQL master node host IP or name
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        PostgreSQL admin user password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        PostgreSQL port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        """
        the server where to migrate data from is secured with SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[str]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        user name for authentication with the server where to migrate data from.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetPgPgUserConfigPgArgs:
    def __init__(__self__, *,
                 autovacuum_analyze_scale_factor: Optional[str] = None,
                 autovacuum_analyze_threshold: Optional[str] = None,
                 autovacuum_freeze_max_age: Optional[str] = None,
                 autovacuum_max_workers: Optional[str] = None,
                 autovacuum_naptime: Optional[str] = None,
                 autovacuum_vacuum_cost_delay: Optional[str] = None,
                 autovacuum_vacuum_cost_limit: Optional[str] = None,
                 autovacuum_vacuum_scale_factor: Optional[str] = None,
                 autovacuum_vacuum_threshold: Optional[str] = None,
                 deadlock_timeout: Optional[str] = None,
                 idle_in_transaction_session_timeout: Optional[str] = None,
                 jit: Optional[str] = None,
                 log_autovacuum_min_duration: Optional[str] = None,
                 log_error_verbosity: Optional[str] = None,
                 log_min_duration_statement: Optional[str] = None,
                 max_files_per_process: Optional[str] = None,
                 max_locks_per_transaction: Optional[str] = None,
                 max_logical_replication_workers: Optional[str] = None,
                 max_parallel_workers: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_pred_locks_per_transaction: Optional[str] = None,
                 max_prepared_transactions: Optional[str] = None,
                 max_replication_slots: Optional[str] = None,
                 max_stack_depth: Optional[str] = None,
                 max_standby_archive_delay: Optional[str] = None,
                 max_standby_streaming_delay: Optional[str] = None,
                 max_wal_senders: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 pg_partman_bgw_dot_interval: Optional[str] = None,
                 pg_partman_bgw_dot_role: Optional[str] = None,
                 pg_stat_statements_dot_track: Optional[str] = None,
                 temp_file_limit: Optional[str] = None,
                 timezone: Optional[str] = None,
                 track_activity_query_size: Optional[str] = None,
                 track_commit_timestamp: Optional[str] = None,
                 track_functions: Optional[str] = None,
                 wal_sender_timeout: Optional[str] = None,
                 wal_writer_delay: Optional[str] = None):
        """
        :param str autovacuum_analyze_scale_factor: Specifies a fraction of the table size to add to 
               autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2
               (20% of table size).
        :param str autovacuum_analyze_threshold: specifies the minimum number of inserted, updated 
               or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
        :param str autovacuum_freeze_max_age: specifies the maximum age (in transactions) that a table's 
               pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID
               wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound
               even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
        :param str autovacuum_max_workers: specifies the maximum number of autovacuum processes (other 
               than the autovacuum launcher) that may be running at any one time. The default is three. This parameter
               can only be set at server start.
        :param str autovacuum_naptime: specifies the minimum delay between autovacuum runs on any 
               given database. The delay is measured in seconds, and the default is one minute.
        :param str autovacuum_vacuum_cost_delay: specifies the cost delay value that will be used 
               in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be
               used. The default value is 20 milliseconds.
        :param str autovacuum_vacuum_cost_limit: specifies the cost limit value that will be used in 
               automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit
               value will be used.
        :param str autovacuum_vacuum_scale_factor: specifies a fraction of the table size to add to 
               autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
        :param str autovacuum_vacuum_threshold: specifies the minimum number of updated or deleted tuples 
               needed to trigger a VACUUM in any one table. The default is 50 tuples
        :param str deadlock_timeout: this is the amount of time, in milliseconds, to wait on a lock before 
               checking to see if there is a deadlock condition.
        :param str idle_in_transaction_session_timeout: Time out sessions with open transactions after 
               this number of milliseconds.
        :param str jit: Controls system-wide use of Just-in-Time Compilation (JIT).
        :param str log_autovacuum_min_duration: Causes each action executed by autovacuum to be logged 
               if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum
               actions. Minus-one (the default) disables logging autovacuum actions.
        :param str log_error_verbosity: Controls the amount of detail written in the server log for 
               each message that is logged. Possible values: `TERSE`, `DEFAULT` and `VERBOSE`.
        :param str log_min_duration_statement: Log statements that take more than this number of 
               milliseconds to run, -1 disables
        :param str max_files_per_process: PostgreSQL maximum number of files that can be open per process
        :param str max_locks_per_transaction: PostgreSQL maximum locks per transaction
        :param str max_logical_replication_workers: PostgreSQL maximum logical replication workers 
               (taken from the pool of max_parallel_workers)
        :param str max_parallel_workers: Sets the maximum number of workers that the system can 
               support for parallel queries.
        :param str max_parallel_workers_per_gather: Sets the maximum number of workers that can be 
               started by a single Gather or Gather Merge node.
        :param str max_pred_locks_per_transaction: PostgreSQL maximum predicate locks per transaction
        :param str max_prepared_transactions: PostgreSQL maximum prepared transactions
        :param str max_replication_slots: PostgreSQL maximum replication slots
        :param str max_stack_depth: Maximum depth of the stack in bytes
        :param str max_standby_archive_delay: Max standby archive delay in milliseconds
        :param str max_standby_streaming_delay: Max standby streaming delay in milliseconds
        :param str max_wal_senders: PostgreSQL maximum WAL senders
        :param str max_worker_processes: Sets the maximum number of background processes that the system
               can support
               * `pg_partman_bgw.interval` - Sets the time interval to run pg_partman's scheduled tasks
               * `pg_partman_bgw.role` - Controls which role to use for pg_partman's scheduled
               background tasks.
               * `pg_stat_statements.track` - Controls which statements are counted. Specify top
               to track top-level statements (those issued directly by clients), all to also track nested
               statements (such as statements invoked within functions), or none to disable statement statistics
               collection. The default value is top.
        :param str temp_file_limit: PostgreSQL temporary file limit in KiB, -1 for unlimited
        :param str timezone: PostgreSQL service timezone
        :param str track_activity_query_size: Specifies the number of bytes reserved to track the currently 
               executing command for each active session.
        :param str track_commit_timestamp: Record commit time of transactions
        :param str track_functions: Enables tracking of function call counts and time used.
        :param str wal_sender_timeout: Terminate replication connections that are inactive for longer than 
               this amount of time, in milliseconds.
        :param str wal_writer_delay: WAL flush interval in milliseconds. Note that setting this value 
               to lower than the default 200ms may negatively impact performance
        """
        if autovacuum_analyze_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_analyze_scale_factor", autovacuum_analyze_scale_factor)
        if autovacuum_analyze_threshold is not None:
            pulumi.set(__self__, "autovacuum_analyze_threshold", autovacuum_analyze_threshold)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_naptime is not None:
            pulumi.set(__self__, "autovacuum_naptime", autovacuum_naptime)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_cost_limit is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_limit", autovacuum_vacuum_cost_limit)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if deadlock_timeout is not None:
            pulumi.set(__self__, "deadlock_timeout", deadlock_timeout)
        if idle_in_transaction_session_timeout is not None:
            pulumi.set(__self__, "idle_in_transaction_session_timeout", idle_in_transaction_session_timeout)
        if jit is not None:
            pulumi.set(__self__, "jit", jit)
        if log_autovacuum_min_duration is not None:
            pulumi.set(__self__, "log_autovacuum_min_duration", log_autovacuum_min_duration)
        if log_error_verbosity is not None:
            pulumi.set(__self__, "log_error_verbosity", log_error_verbosity)
        if log_min_duration_statement is not None:
            pulumi.set(__self__, "log_min_duration_statement", log_min_duration_statement)
        if max_files_per_process is not None:
            pulumi.set(__self__, "max_files_per_process", max_files_per_process)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_logical_replication_workers is not None:
            pulumi.set(__self__, "max_logical_replication_workers", max_logical_replication_workers)
        if max_parallel_workers is not None:
            pulumi.set(__self__, "max_parallel_workers", max_parallel_workers)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_pred_locks_per_transaction is not None:
            pulumi.set(__self__, "max_pred_locks_per_transaction", max_pred_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_replication_slots is not None:
            pulumi.set(__self__, "max_replication_slots", max_replication_slots)
        if max_stack_depth is not None:
            pulumi.set(__self__, "max_stack_depth", max_stack_depth)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if max_wal_senders is not None:
            pulumi.set(__self__, "max_wal_senders", max_wal_senders)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if pg_partman_bgw_dot_interval is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_interval", pg_partman_bgw_dot_interval)
        if pg_partman_bgw_dot_role is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_role", pg_partman_bgw_dot_role)
        if pg_stat_statements_dot_track is not None:
            pulumi.set(__self__, "pg_stat_statements_dot_track", pg_stat_statements_dot_track)
        if temp_file_limit is not None:
            pulumi.set(__self__, "temp_file_limit", temp_file_limit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if track_activity_query_size is not None:
            pulumi.set(__self__, "track_activity_query_size", track_activity_query_size)
        if track_commit_timestamp is not None:
            pulumi.set(__self__, "track_commit_timestamp", track_commit_timestamp)
        if track_functions is not None:
            pulumi.set(__self__, "track_functions", track_functions)
        if wal_sender_timeout is not None:
            pulumi.set(__self__, "wal_sender_timeout", wal_sender_timeout)
        if wal_writer_delay is not None:
            pulumi.set(__self__, "wal_writer_delay", wal_writer_delay)

    @property
    @pulumi.getter(name="autovacuumAnalyzeScaleFactor")
    def autovacuum_analyze_scale_factor(self) -> Optional[str]:
        """
        Specifies a fraction of the table size to add to 
        autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2
        (20% of table size).
        """
        return pulumi.get(self, "autovacuum_analyze_scale_factor")

    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_analyze_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumAnalyzeThreshold")
    def autovacuum_analyze_threshold(self) -> Optional[str]:
        """
        specifies the minimum number of inserted, updated 
        or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
        """
        return pulumi.get(self, "autovacuum_analyze_threshold")

    @autovacuum_analyze_threshold.setter
    def autovacuum_analyze_threshold(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_analyze_threshold", value)

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[str]:
        """
        specifies the maximum age (in transactions) that a table's 
        pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID
        wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound
        even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
        """
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @autovacuum_freeze_max_age.setter
    def autovacuum_freeze_max_age(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_freeze_max_age", value)

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[str]:
        """
        specifies the maximum number of autovacuum processes (other 
        than the autovacuum launcher) that may be running at any one time. The default is three. This parameter
        can only be set at server start.
        """
        return pulumi.get(self, "autovacuum_max_workers")

    @autovacuum_max_workers.setter
    def autovacuum_max_workers(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_max_workers", value)

    @property
    @pulumi.getter(name="autovacuumNaptime")
    def autovacuum_naptime(self) -> Optional[str]:
        """
        specifies the minimum delay between autovacuum runs on any 
        given database. The delay is measured in seconds, and the default is one minute.
        """
        return pulumi.get(self, "autovacuum_naptime")

    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_naptime", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[str]:
        """
        specifies the cost delay value that will be used 
        in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be
        used. The default value is 20 milliseconds.
        """
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_cost_delay", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostLimit")
    def autovacuum_vacuum_cost_limit(self) -> Optional[str]:
        """
        specifies the cost limit value that will be used in 
        automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit
        value will be used.
        """
        return pulumi.get(self, "autovacuum_vacuum_cost_limit")

    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_cost_limit", value)

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[str]:
        """
        specifies a fraction of the table size to add to 
        autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
        """
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[str]:
        """
        specifies the minimum number of updated or deleted tuples 
        needed to trigger a VACUUM in any one table. The default is 50 tuples
        """
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @autovacuum_vacuum_threshold.setter
    def autovacuum_vacuum_threshold(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_threshold", value)

    @property
    @pulumi.getter(name="deadlockTimeout")
    def deadlock_timeout(self) -> Optional[str]:
        """
        this is the amount of time, in milliseconds, to wait on a lock before 
        checking to see if there is a deadlock condition.
        """
        return pulumi.get(self, "deadlock_timeout")

    @deadlock_timeout.setter
    def deadlock_timeout(self, value: Optional[str]):
        pulumi.set(self, "deadlock_timeout", value)

    @property
    @pulumi.getter(name="idleInTransactionSessionTimeout")
    def idle_in_transaction_session_timeout(self) -> Optional[str]:
        """
        Time out sessions with open transactions after 
        this number of milliseconds.
        """
        return pulumi.get(self, "idle_in_transaction_session_timeout")

    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: Optional[str]):
        pulumi.set(self, "idle_in_transaction_session_timeout", value)

    @property
    @pulumi.getter
    def jit(self) -> Optional[str]:
        """
        Controls system-wide use of Just-in-Time Compilation (JIT).
        """
        return pulumi.get(self, "jit")

    @jit.setter
    def jit(self, value: Optional[str]):
        pulumi.set(self, "jit", value)

    @property
    @pulumi.getter(name="logAutovacuumMinDuration")
    def log_autovacuum_min_duration(self) -> Optional[str]:
        """
        Causes each action executed by autovacuum to be logged 
        if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum
        actions. Minus-one (the default) disables logging autovacuum actions.
        """
        return pulumi.get(self, "log_autovacuum_min_duration")

    @log_autovacuum_min_duration.setter
    def log_autovacuum_min_duration(self, value: Optional[str]):
        pulumi.set(self, "log_autovacuum_min_duration", value)

    @property
    @pulumi.getter(name="logErrorVerbosity")
    def log_error_verbosity(self) -> Optional[str]:
        """
        Controls the amount of detail written in the server log for 
        each message that is logged. Possible values: `TERSE`, `DEFAULT` and `VERBOSE`.
        """
        return pulumi.get(self, "log_error_verbosity")

    @log_error_verbosity.setter
    def log_error_verbosity(self, value: Optional[str]):
        pulumi.set(self, "log_error_verbosity", value)

    @property
    @pulumi.getter(name="logMinDurationStatement")
    def log_min_duration_statement(self) -> Optional[str]:
        """
        Log statements that take more than this number of 
        milliseconds to run, -1 disables
        """
        return pulumi.get(self, "log_min_duration_statement")

    @log_min_duration_statement.setter
    def log_min_duration_statement(self, value: Optional[str]):
        pulumi.set(self, "log_min_duration_statement", value)

    @property
    @pulumi.getter(name="maxFilesPerProcess")
    def max_files_per_process(self) -> Optional[str]:
        """
        PostgreSQL maximum number of files that can be open per process
        """
        return pulumi.get(self, "max_files_per_process")

    @max_files_per_process.setter
    def max_files_per_process(self, value: Optional[str]):
        pulumi.set(self, "max_files_per_process", value)

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[str]:
        """
        PostgreSQL maximum locks per transaction
        """
        return pulumi.get(self, "max_locks_per_transaction")

    @max_locks_per_transaction.setter
    def max_locks_per_transaction(self, value: Optional[str]):
        pulumi.set(self, "max_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxLogicalReplicationWorkers")
    def max_logical_replication_workers(self) -> Optional[str]:
        """
        PostgreSQL maximum logical replication workers 
        (taken from the pool of max_parallel_workers)
        """
        return pulumi.get(self, "max_logical_replication_workers")

    @max_logical_replication_workers.setter
    def max_logical_replication_workers(self, value: Optional[str]):
        pulumi.set(self, "max_logical_replication_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkers")
    def max_parallel_workers(self) -> Optional[str]:
        """
        Sets the maximum number of workers that the system can 
        support for parallel queries.
        """
        return pulumi.get(self, "max_parallel_workers")

    @max_parallel_workers.setter
    def max_parallel_workers(self, value: Optional[str]):
        pulumi.set(self, "max_parallel_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        """
        Sets the maximum number of workers that can be 
        started by a single Gather or Gather Merge node.
        """
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[str]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxPredLocksPerTransaction")
    def max_pred_locks_per_transaction(self) -> Optional[str]:
        """
        PostgreSQL maximum predicate locks per transaction
        """
        return pulumi.get(self, "max_pred_locks_per_transaction")

    @max_pred_locks_per_transaction.setter
    def max_pred_locks_per_transaction(self, value: Optional[str]):
        pulumi.set(self, "max_pred_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[str]:
        """
        PostgreSQL maximum prepared transactions
        """
        return pulumi.get(self, "max_prepared_transactions")

    @max_prepared_transactions.setter
    def max_prepared_transactions(self, value: Optional[str]):
        pulumi.set(self, "max_prepared_transactions", value)

    @property
    @pulumi.getter(name="maxReplicationSlots")
    def max_replication_slots(self) -> Optional[str]:
        """
        PostgreSQL maximum replication slots
        """
        return pulumi.get(self, "max_replication_slots")

    @max_replication_slots.setter
    def max_replication_slots(self, value: Optional[str]):
        pulumi.set(self, "max_replication_slots", value)

    @property
    @pulumi.getter(name="maxStackDepth")
    def max_stack_depth(self) -> Optional[str]:
        """
        Maximum depth of the stack in bytes
        """
        return pulumi.get(self, "max_stack_depth")

    @max_stack_depth.setter
    def max_stack_depth(self, value: Optional[str]):
        pulumi.set(self, "max_stack_depth", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[str]:
        """
        Max standby archive delay in milliseconds
        """
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[str]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[str]:
        """
        Max standby streaming delay in milliseconds
        """
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[str]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter(name="maxWalSenders")
    def max_wal_senders(self) -> Optional[str]:
        """
        PostgreSQL maximum WAL senders
        """
        return pulumi.get(self, "max_wal_senders")

    @max_wal_senders.setter
    def max_wal_senders(self, value: Optional[str]):
        pulumi.set(self, "max_wal_senders", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        """
        Sets the maximum number of background processes that the system
        can support
        * `pg_partman_bgw.interval` - Sets the time interval to run pg_partman's scheduled tasks
        * `pg_partman_bgw.role` - Controls which role to use for pg_partman's scheduled
        background tasks.
        * `pg_stat_statements.track` - Controls which statements are counted. Specify top
        to track top-level statements (those issued directly by clients), all to also track nested
        statements (such as statements invoked within functions), or none to disable statement statistics
        collection. The default value is top.
        """
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[str]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotInterval")
    def pg_partman_bgw_dot_interval(self) -> Optional[str]:
        return pulumi.get(self, "pg_partman_bgw_dot_interval")

    @pg_partman_bgw_dot_interval.setter
    def pg_partman_bgw_dot_interval(self, value: Optional[str]):
        pulumi.set(self, "pg_partman_bgw_dot_interval", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotRole")
    def pg_partman_bgw_dot_role(self) -> Optional[str]:
        return pulumi.get(self, "pg_partman_bgw_dot_role")

    @pg_partman_bgw_dot_role.setter
    def pg_partman_bgw_dot_role(self, value: Optional[str]):
        pulumi.set(self, "pg_partman_bgw_dot_role", value)

    @property
    @pulumi.getter(name="pgStatStatementsDotTrack")
    def pg_stat_statements_dot_track(self) -> Optional[str]:
        return pulumi.get(self, "pg_stat_statements_dot_track")

    @pg_stat_statements_dot_track.setter
    def pg_stat_statements_dot_track(self, value: Optional[str]):
        pulumi.set(self, "pg_stat_statements_dot_track", value)

    @property
    @pulumi.getter(name="tempFileLimit")
    def temp_file_limit(self) -> Optional[str]:
        """
        PostgreSQL temporary file limit in KiB, -1 for unlimited
        """
        return pulumi.get(self, "temp_file_limit")

    @temp_file_limit.setter
    def temp_file_limit(self, value: Optional[str]):
        pulumi.set(self, "temp_file_limit", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        PostgreSQL service timezone
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[str]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="trackActivityQuerySize")
    def track_activity_query_size(self) -> Optional[str]:
        """
        Specifies the number of bytes reserved to track the currently 
        executing command for each active session.
        """
        return pulumi.get(self, "track_activity_query_size")

    @track_activity_query_size.setter
    def track_activity_query_size(self, value: Optional[str]):
        pulumi.set(self, "track_activity_query_size", value)

    @property
    @pulumi.getter(name="trackCommitTimestamp")
    def track_commit_timestamp(self) -> Optional[str]:
        """
        Record commit time of transactions
        """
        return pulumi.get(self, "track_commit_timestamp")

    @track_commit_timestamp.setter
    def track_commit_timestamp(self, value: Optional[str]):
        pulumi.set(self, "track_commit_timestamp", value)

    @property
    @pulumi.getter(name="trackFunctions")
    def track_functions(self) -> Optional[str]:
        """
        Enables tracking of function call counts and time used.
        """
        return pulumi.get(self, "track_functions")

    @track_functions.setter
    def track_functions(self, value: Optional[str]):
        pulumi.set(self, "track_functions", value)

    @property
    @pulumi.getter(name="walSenderTimeout")
    def wal_sender_timeout(self) -> Optional[str]:
        """
        Terminate replication connections that are inactive for longer than 
        this amount of time, in milliseconds.
        """
        return pulumi.get(self, "wal_sender_timeout")

    @wal_sender_timeout.setter
    def wal_sender_timeout(self, value: Optional[str]):
        pulumi.set(self, "wal_sender_timeout", value)

    @property
    @pulumi.getter(name="walWriterDelay")
    def wal_writer_delay(self) -> Optional[str]:
        """
        WAL flush interval in milliseconds. Note that setting this value 
        to lower than the default 200ms may negatively impact performance
        """
        return pulumi.get(self, "wal_writer_delay")

    @wal_writer_delay.setter
    def wal_writer_delay(self, value: Optional[str]):
        pulumi.set(self, "wal_writer_delay", value)


@pulumi.input_type
class GetPgPgUserConfigPgbouncerArgs:
    def __init__(__self__, *,
                 autodb_idle_timeout: Optional[str] = None,
                 autodb_max_db_connections: Optional[str] = None,
                 autodb_pool_mode: Optional[str] = None,
                 autodb_pool_size: Optional[str] = None,
                 ignore_startup_parameters: Optional[Sequence[str]] = None,
                 min_pool_size: Optional[str] = None,
                 server_idle_timeout: Optional[str] = None,
                 server_lifetime: Optional[str] = None,
                 server_reset_query_always: Optional[str] = None):
        """
        :param str autodb_idle_timeout: If the automatically created database pools have been unused this 
               many seconds, they are freed. If 0 then timeout is disabled.
        :param str autodb_max_db_connections: Do not allow more than this many server connections per database 
               (regardless of user). Setting it to 0 means unlimited.
        :param str autodb_pool_mode: PGBouncer pool mode
        :param str autodb_pool_size: If non-zero then create automatically a pool of that size per user 
               when a pool doesn't exist.
        :param Sequence[str] ignore_startup_parameters: Enum of parameters to ignore when given in startup packet.
        :param str min_pool_size: Add more server connections to pool if below this number. Improves 
               behavior when usual load comes suddenly back after period of total inactivity. The value is
               effectively capped at the pool size.
        :param str server_idle_timeout: If a server connection has been idle more than this many seconds 
               it will be dropped. If 0 then timeout is disabled.
        :param str server_lifetime: The pooler will close an unused server connection that has been connected 
               longer than this.
        :param str server_reset_query_always: Run server_reset_query (DISCARD ALL) in all pooling modes.
        """
        if autodb_idle_timeout is not None:
            pulumi.set(__self__, "autodb_idle_timeout", autodb_idle_timeout)
        if autodb_max_db_connections is not None:
            pulumi.set(__self__, "autodb_max_db_connections", autodb_max_db_connections)
        if autodb_pool_mode is not None:
            pulumi.set(__self__, "autodb_pool_mode", autodb_pool_mode)
        if autodb_pool_size is not None:
            pulumi.set(__self__, "autodb_pool_size", autodb_pool_size)
        if ignore_startup_parameters is not None:
            pulumi.set(__self__, "ignore_startup_parameters", ignore_startup_parameters)
        if min_pool_size is not None:
            pulumi.set(__self__, "min_pool_size", min_pool_size)
        if server_idle_timeout is not None:
            pulumi.set(__self__, "server_idle_timeout", server_idle_timeout)
        if server_lifetime is not None:
            pulumi.set(__self__, "server_lifetime", server_lifetime)
        if server_reset_query_always is not None:
            pulumi.set(__self__, "server_reset_query_always", server_reset_query_always)

    @property
    @pulumi.getter(name="autodbIdleTimeout")
    def autodb_idle_timeout(self) -> Optional[str]:
        """
        If the automatically created database pools have been unused this 
        many seconds, they are freed. If 0 then timeout is disabled.
        """
        return pulumi.get(self, "autodb_idle_timeout")

    @autodb_idle_timeout.setter
    def autodb_idle_timeout(self, value: Optional[str]):
        pulumi.set(self, "autodb_idle_timeout", value)

    @property
    @pulumi.getter(name="autodbMaxDbConnections")
    def autodb_max_db_connections(self) -> Optional[str]:
        """
        Do not allow more than this many server connections per database 
        (regardless of user). Setting it to 0 means unlimited.
        """
        return pulumi.get(self, "autodb_max_db_connections")

    @autodb_max_db_connections.setter
    def autodb_max_db_connections(self, value: Optional[str]):
        pulumi.set(self, "autodb_max_db_connections", value)

    @property
    @pulumi.getter(name="autodbPoolMode")
    def autodb_pool_mode(self) -> Optional[str]:
        """
        PGBouncer pool mode
        """
        return pulumi.get(self, "autodb_pool_mode")

    @autodb_pool_mode.setter
    def autodb_pool_mode(self, value: Optional[str]):
        pulumi.set(self, "autodb_pool_mode", value)

    @property
    @pulumi.getter(name="autodbPoolSize")
    def autodb_pool_size(self) -> Optional[str]:
        """
        If non-zero then create automatically a pool of that size per user 
        when a pool doesn't exist.
        """
        return pulumi.get(self, "autodb_pool_size")

    @autodb_pool_size.setter
    def autodb_pool_size(self, value: Optional[str]):
        pulumi.set(self, "autodb_pool_size", value)

    @property
    @pulumi.getter(name="ignoreStartupParameters")
    def ignore_startup_parameters(self) -> Optional[Sequence[str]]:
        """
        Enum of parameters to ignore when given in startup packet.
        """
        return pulumi.get(self, "ignore_startup_parameters")

    @ignore_startup_parameters.setter
    def ignore_startup_parameters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ignore_startup_parameters", value)

    @property
    @pulumi.getter(name="minPoolSize")
    def min_pool_size(self) -> Optional[str]:
        """
        Add more server connections to pool if below this number. Improves 
        behavior when usual load comes suddenly back after period of total inactivity. The value is
        effectively capped at the pool size.
        """
        return pulumi.get(self, "min_pool_size")

    @min_pool_size.setter
    def min_pool_size(self, value: Optional[str]):
        pulumi.set(self, "min_pool_size", value)

    @property
    @pulumi.getter(name="serverIdleTimeout")
    def server_idle_timeout(self) -> Optional[str]:
        """
        If a server connection has been idle more than this many seconds 
        it will be dropped. If 0 then timeout is disabled.
        """
        return pulumi.get(self, "server_idle_timeout")

    @server_idle_timeout.setter
    def server_idle_timeout(self, value: Optional[str]):
        pulumi.set(self, "server_idle_timeout", value)

    @property
    @pulumi.getter(name="serverLifetime")
    def server_lifetime(self) -> Optional[str]:
        """
        The pooler will close an unused server connection that has been connected 
        longer than this.
        """
        return pulumi.get(self, "server_lifetime")

    @server_lifetime.setter
    def server_lifetime(self, value: Optional[str]):
        pulumi.set(self, "server_lifetime", value)

    @property
    @pulumi.getter(name="serverResetQueryAlways")
    def server_reset_query_always(self) -> Optional[str]:
        """
        Run server_reset_query (DISCARD ALL) in all pooling modes.
        """
        return pulumi.get(self, "server_reset_query_always")

    @server_reset_query_always.setter
    def server_reset_query_always(self, value: Optional[str]):
        pulumi.set(self, "server_reset_query_always", value)


@pulumi.input_type
class GetPgPgUserConfigPglookoutArgs:
    def __init__(__self__, *,
                 max_failover_replication_time_lag: Optional[str] = None):
        """
        :param str max_failover_replication_time_lag: Number of seconds of master unavailability before 
               triggering database failover to standby
        """
        if max_failover_replication_time_lag is not None:
            pulumi.set(__self__, "max_failover_replication_time_lag", max_failover_replication_time_lag)

    @property
    @pulumi.getter(name="maxFailoverReplicationTimeLag")
    def max_failover_replication_time_lag(self) -> Optional[str]:
        """
        Number of seconds of master unavailability before 
        triggering database failover to standby
        """
        return pulumi.get(self, "max_failover_replication_time_lag")

    @max_failover_replication_time_lag.setter
    def max_failover_replication_time_lag(self, value: Optional[str]):
        pulumi.set(self, "max_failover_replication_time_lag", value)


@pulumi.input_type
class GetPgPgUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None,
                 prometheus: Optional[str] = None):
        """
        :param str pg: PostgreSQL specific server provided values.
        :param str pgbouncer: Enable pgbouncer.
        :param str prometheus: Allow clients to connect to prometheus from the public internet for 
               service nodes that are in a project VPC or another type of private network
        """
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        """
        PostgreSQL specific server provided values.
        """
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        """
        Enable pgbouncer.
        """
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet for 
        service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetPgPgUserConfigPrivatelinkAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None):
        """
        :param str pg: PostgreSQL specific server provided values.
        :param str pgbouncer: Enable pgbouncer.
        """
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        """
        PostgreSQL specific server provided values.
        """
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        """
        Enable pgbouncer.
        """
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)


@pulumi.input_type
class GetPgPgUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None,
                 prometheus: Optional[str] = None):
        """
        :param str pg: PostgreSQL specific server provided values.
        :param str pgbouncer: Enable pgbouncer.
        :param str prometheus: Allow clients to connect to prometheus from the public internet for 
               service nodes that are in a project VPC or another type of private network
        """
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        """
        PostgreSQL specific server provided values.
        """
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        """
        Enable pgbouncer.
        """
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet for 
        service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetPgPgUserConfigTimescaledbArgs:
    def __init__(__self__, *,
                 max_background_workers: Optional[str] = None):
        """
        :param str max_background_workers: The number of background workers for timescaledb 
               operations. You should configure this setting to the sum of your number of databases and the
               total number of concurrent background workers you want running at any given point in time.
        """
        if max_background_workers is not None:
            pulumi.set(__self__, "max_background_workers", max_background_workers)

    @property
    @pulumi.getter(name="maxBackgroundWorkers")
    def max_background_workers(self) -> Optional[str]:
        """
        The number of background workers for timescaledb 
        operations. You should configure this setting to the sum of your number of databases and the
        total number of concurrent background workers you want running at any given point in time.
        """
        return pulumi.get(self, "max_background_workers")

    @max_background_workers.setter
    def max_background_workers(self, value: Optional[str]):
        pulumi.set(self, "max_background_workers", value)


@pulumi.input_type
class GetPgServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetRedisComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        """
        :param str host: (Required) Hostname or IP address of the server where to migrate data from
        :param int port: (Required) Port number of the server where to migrate data from
        :param bool ssl: The server where to migrate data from is secured with SSL
        """
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        (Required) Hostname or IP address of the server where to migrate data from
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        (Required) Port number of the server where to migrate data from
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        """
        The server where to migrate data from is secured with SSL
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetRedisRedisArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetRedisRedisUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[Sequence[str]] = None,
                 migration: Optional['GetRedisRedisUserConfigMigrationArgs'] = None,
                 private_access: Optional['GetRedisRedisUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetRedisRedisUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 redis_io_threads: Optional[str] = None,
                 redis_lfu_decay_time: Optional[str] = None,
                 redis_lfu_log_factor: Optional[str] = None,
                 redis_maxmemory_policy: Optional[str] = None,
                 redis_notify_keyspace_events: Optional[str] = None,
                 redis_ssl: Optional[str] = None,
                 redis_timeout: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        """
        :param Sequence[str] ip_filters: Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        :param 'GetRedisRedisUserConfigMigrationArgs' migration: Migrate data from existing server
        :param 'GetRedisRedisUserConfigPrivateAccessArgs' private_access: Allow access to selected service ports from private networks
        :param str project_to_fork_from: Name of another project to fork a service from. This has
               effect only when a new service is being created.
        :param 'GetRedisRedisUserConfigPublicAccessArgs' public_access: Allow access to selected service ports from the public Internet
        :param str recovery_basebackup_name: Name of the basebackup to restore in forked service
        :param str redis_io_threads: Redis IO thread count
               * `redis_lfu_decay_time"` - LFU maxmemory-policy counter decay time in minutes
        :param str redis_lfu_log_factor: Counter logarithm factor for volatile-lfu and allkeys-lfu 
               maxmemory-policies
        :param str redis_maxmemory_policy: Redis maxmemory-policy
        :param str redis_notify_keyspace_events: Set notify-keyspace-events option
        :param str redis_ssl: Require SSL to access Redis
        :param str redis_timeout: Redis idle connection timeout
               * `service_to_fork_from"` - Name of another service to fork from. This has effect only
               when a new service is being created.
        """
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if redis_io_threads is not None:
            pulumi.set(__self__, "redis_io_threads", redis_io_threads)
        if redis_lfu_decay_time is not None:
            pulumi.set(__self__, "redis_lfu_decay_time", redis_lfu_decay_time)
        if redis_lfu_log_factor is not None:
            pulumi.set(__self__, "redis_lfu_log_factor", redis_lfu_log_factor)
        if redis_maxmemory_policy is not None:
            pulumi.set(__self__, "redis_maxmemory_policy", redis_maxmemory_policy)
        if redis_notify_keyspace_events is not None:
            pulumi.set(__self__, "redis_notify_keyspace_events", redis_notify_keyspace_events)
        if redis_ssl is not None:
            pulumi.set(__self__, "redis_ssl", redis_ssl)
        if redis_timeout is not None:
            pulumi.set(__self__, "redis_timeout", redis_timeout)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        """
        Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        """
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional['GetRedisRedisUserConfigMigrationArgs']:
        """
        Migrate data from existing server
        """
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional['GetRedisRedisUserConfigMigrationArgs']):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetRedisRedisUserConfigPrivateAccessArgs']:
        """
        Allow access to selected service ports from private networks
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetRedisRedisUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        """
        Name of another project to fork a service from. This has
        effect only when a new service is being created.
        """
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetRedisRedisUserConfigPublicAccessArgs']:
        """
        Allow access to selected service ports from the public Internet
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetRedisRedisUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        """
        Name of the basebackup to restore in forked service
        """
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="redisIoThreads")
    def redis_io_threads(self) -> Optional[str]:
        """
        Redis IO thread count
        * `redis_lfu_decay_time"` - LFU maxmemory-policy counter decay time in minutes
        """
        return pulumi.get(self, "redis_io_threads")

    @redis_io_threads.setter
    def redis_io_threads(self, value: Optional[str]):
        pulumi.set(self, "redis_io_threads", value)

    @property
    @pulumi.getter(name="redisLfuDecayTime")
    def redis_lfu_decay_time(self) -> Optional[str]:
        return pulumi.get(self, "redis_lfu_decay_time")

    @redis_lfu_decay_time.setter
    def redis_lfu_decay_time(self, value: Optional[str]):
        pulumi.set(self, "redis_lfu_decay_time", value)

    @property
    @pulumi.getter(name="redisLfuLogFactor")
    def redis_lfu_log_factor(self) -> Optional[str]:
        """
        Counter logarithm factor for volatile-lfu and allkeys-lfu 
        maxmemory-policies
        """
        return pulumi.get(self, "redis_lfu_log_factor")

    @redis_lfu_log_factor.setter
    def redis_lfu_log_factor(self, value: Optional[str]):
        pulumi.set(self, "redis_lfu_log_factor", value)

    @property
    @pulumi.getter(name="redisMaxmemoryPolicy")
    def redis_maxmemory_policy(self) -> Optional[str]:
        """
        Redis maxmemory-policy
        """
        return pulumi.get(self, "redis_maxmemory_policy")

    @redis_maxmemory_policy.setter
    def redis_maxmemory_policy(self, value: Optional[str]):
        pulumi.set(self, "redis_maxmemory_policy", value)

    @property
    @pulumi.getter(name="redisNotifyKeyspaceEvents")
    def redis_notify_keyspace_events(self) -> Optional[str]:
        """
        Set notify-keyspace-events option
        """
        return pulumi.get(self, "redis_notify_keyspace_events")

    @redis_notify_keyspace_events.setter
    def redis_notify_keyspace_events(self, value: Optional[str]):
        pulumi.set(self, "redis_notify_keyspace_events", value)

    @property
    @pulumi.getter(name="redisSsl")
    def redis_ssl(self) -> Optional[str]:
        """
        Require SSL to access Redis
        """
        return pulumi.get(self, "redis_ssl")

    @redis_ssl.setter
    def redis_ssl(self, value: Optional[str]):
        pulumi.set(self, "redis_ssl", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> Optional[str]:
        """
        Redis idle connection timeout
        * `service_to_fork_from"` - Name of another service to fork from. This has effect only
        when a new service is being created.
        """
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: Optional[str]):
        pulumi.set(self, "redis_timeout", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetRedisRedisUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 ssl: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str dbname: Database name for bootstrapping the initial connection
        :param str host: (Required) Hostname or IP address of the server where to migrate data from
        :param str password: Password for authentication with the server where to migrate data from
        :param str port: (Required) Port number of the server where to migrate data from
        :param str ssl: The server where to migrate data from is secured with SSL
        :param str username: User name for authentication with the server where to migrate data from
        """
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[str]:
        """
        Database name for bootstrapping the initial connection
        """
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[str]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        (Required) Hostname or IP address of the server where to migrate data from
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password for authentication with the server where to migrate data from
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        (Required) Port number of the server where to migrate data from
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        """
        The server where to migrate data from is secured with SSL
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[str]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        User name for authentication with the server where to migrate data from
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetRedisRedisUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None,
                 redis: Optional[str] = None):
        """
        :param str prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network
        :param str redis: Redis specific server provided values.
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[str]:
        """
        Redis specific server provided values.
        """
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[str]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class GetRedisRedisUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None,
                 redis: Optional[str] = None):
        """
        :param str prometheus: Allow clients to connect to prometheus from the public internet 
               for service nodes that are in a project VPC or another type of private network
        :param str redis: Redis specific server provided values.
        """
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        """
        Allow clients to connect to prometheus from the public internet 
        for service nodes that are in a project VPC or another type of private network
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[str]:
        """
        Redis specific server provided values.
        """
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[str]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class GetRedisServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetServiceCassandraArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceCassandraUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[Sequence[str]] = None,
                 migrate_sstableloader: Optional[str] = None,
                 private_access: Optional['GetServiceCassandraUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetServiceCassandraUserConfigPublicAccessArgs'] = None,
                 service_to_fork_from: Optional[str] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migrate_sstableloader is not None:
            pulumi.set(__self__, "migrate_sstableloader", migrate_sstableloader)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="migrateSstableloader")
    def migrate_sstableloader(self) -> Optional[str]:
        return pulumi.get(self, "migrate_sstableloader")

    @migrate_sstableloader.setter
    def migrate_sstableloader(self, value: Optional[str]):
        pulumi.set(self, "migrate_sstableloader", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceCassandraUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceCassandraUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceCassandraUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceCassandraUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceCassandraUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceCassandraUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: int,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetServiceElasticsearchArgs:
    def __init__(__self__, *,
                 kibana_uri: str):
        pulumi.set(__self__, "kibana_uri", kibana_uri)

    @property
    @pulumi.getter(name="kibanaUri")
    def kibana_uri(self) -> str:
        return pulumi.get(self, "kibana_uri")

    @kibana_uri.setter
    def kibana_uri(self, value: str):
        pulumi.set(self, "kibana_uri", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 disable_replication_factor_adjustment: Optional[str] = None,
                 elasticsearch: Optional['GetServiceElasticsearchUserConfigElasticsearchArgs'] = None,
                 elasticsearch_version: Optional[str] = None,
                 index_patterns: Optional[Sequence['GetServiceElasticsearchUserConfigIndexPatternArgs']] = None,
                 index_template: Optional['GetServiceElasticsearchUserConfigIndexTemplateArgs'] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 kibana: Optional['GetServiceElasticsearchUserConfigKibanaArgs'] = None,
                 max_index_count: Optional[str] = None,
                 private_access: Optional['GetServiceElasticsearchUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetServiceElasticsearchUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if disable_replication_factor_adjustment is not None:
            pulumi.set(__self__, "disable_replication_factor_adjustment", disable_replication_factor_adjustment)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_version is not None:
            pulumi.set(__self__, "elasticsearch_version", elasticsearch_version)
        if index_patterns is not None:
            pulumi.set(__self__, "index_patterns", index_patterns)
        if index_template is not None:
            pulumi.set(__self__, "index_template", index_template)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="disableReplicationFactorAdjustment")
    def disable_replication_factor_adjustment(self) -> Optional[str]:
        return pulumi.get(self, "disable_replication_factor_adjustment")

    @disable_replication_factor_adjustment.setter
    def disable_replication_factor_adjustment(self, value: Optional[str]):
        pulumi.set(self, "disable_replication_factor_adjustment", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional['GetServiceElasticsearchUserConfigElasticsearchArgs']:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional['GetServiceElasticsearchUserConfigElasticsearchArgs']):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter(name="elasticsearchVersion")
    def elasticsearch_version(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_version")

    @elasticsearch_version.setter
    def elasticsearch_version(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_version", value)

    @property
    @pulumi.getter(name="indexPatterns")
    def index_patterns(self) -> Optional[Sequence['GetServiceElasticsearchUserConfigIndexPatternArgs']]:
        return pulumi.get(self, "index_patterns")

    @index_patterns.setter
    def index_patterns(self, value: Optional[Sequence['GetServiceElasticsearchUserConfigIndexPatternArgs']]):
        pulumi.set(self, "index_patterns", value)

    @property
    @pulumi.getter(name="indexTemplate")
    def index_template(self) -> Optional['GetServiceElasticsearchUserConfigIndexTemplateArgs']:
        return pulumi.get(self, "index_template")

    @index_template.setter
    def index_template(self, value: Optional['GetServiceElasticsearchUserConfigIndexTemplateArgs']):
        pulumi.set(self, "index_template", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional['GetServiceElasticsearchUserConfigKibanaArgs']:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional['GetServiceElasticsearchUserConfigKibanaArgs']):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[str]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[str]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceElasticsearchUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceElasticsearchUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceElasticsearchUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceElasticsearchUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigElasticsearchArgs:
    def __init__(__self__, *,
                 action_auto_create_index_enabled: Optional[str] = None,
                 action_destructive_requires_name: Optional[str] = None,
                 cluster_max_shards_per_node: Optional[str] = None,
                 http_max_content_length: Optional[str] = None,
                 http_max_header_size: Optional[str] = None,
                 http_max_initial_line_length: Optional[str] = None,
                 indices_fielddata_cache_size: Optional[str] = None,
                 indices_memory_index_buffer_size: Optional[str] = None,
                 indices_queries_cache_size: Optional[str] = None,
                 indices_query_bool_max_clause_count: Optional[str] = None,
                 reindex_remote_whitelists: Optional[Sequence[str]] = None,
                 search_max_buckets: Optional[str] = None,
                 thread_pool_analyze_queue_size: Optional[str] = None,
                 thread_pool_analyze_size: Optional[str] = None,
                 thread_pool_force_merge_size: Optional[str] = None,
                 thread_pool_get_queue_size: Optional[str] = None,
                 thread_pool_get_size: Optional[str] = None,
                 thread_pool_index_queue_size: Optional[str] = None,
                 thread_pool_index_size: Optional[str] = None,
                 thread_pool_search_queue_size: Optional[str] = None,
                 thread_pool_search_size: Optional[str] = None,
                 thread_pool_search_throttled_queue_size: Optional[str] = None,
                 thread_pool_search_throttled_size: Optional[str] = None,
                 thread_pool_write_queue_size: Optional[str] = None,
                 thread_pool_write_size: Optional[str] = None):
        if action_auto_create_index_enabled is not None:
            pulumi.set(__self__, "action_auto_create_index_enabled", action_auto_create_index_enabled)
        if action_destructive_requires_name is not None:
            pulumi.set(__self__, "action_destructive_requires_name", action_destructive_requires_name)
        if cluster_max_shards_per_node is not None:
            pulumi.set(__self__, "cluster_max_shards_per_node", cluster_max_shards_per_node)
        if http_max_content_length is not None:
            pulumi.set(__self__, "http_max_content_length", http_max_content_length)
        if http_max_header_size is not None:
            pulumi.set(__self__, "http_max_header_size", http_max_header_size)
        if http_max_initial_line_length is not None:
            pulumi.set(__self__, "http_max_initial_line_length", http_max_initial_line_length)
        if indices_fielddata_cache_size is not None:
            pulumi.set(__self__, "indices_fielddata_cache_size", indices_fielddata_cache_size)
        if indices_memory_index_buffer_size is not None:
            pulumi.set(__self__, "indices_memory_index_buffer_size", indices_memory_index_buffer_size)
        if indices_queries_cache_size is not None:
            pulumi.set(__self__, "indices_queries_cache_size", indices_queries_cache_size)
        if indices_query_bool_max_clause_count is not None:
            pulumi.set(__self__, "indices_query_bool_max_clause_count", indices_query_bool_max_clause_count)
        if reindex_remote_whitelists is not None:
            pulumi.set(__self__, "reindex_remote_whitelists", reindex_remote_whitelists)
        if search_max_buckets is not None:
            pulumi.set(__self__, "search_max_buckets", search_max_buckets)
        if thread_pool_analyze_queue_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_queue_size", thread_pool_analyze_queue_size)
        if thread_pool_analyze_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_size", thread_pool_analyze_size)
        if thread_pool_force_merge_size is not None:
            pulumi.set(__self__, "thread_pool_force_merge_size", thread_pool_force_merge_size)
        if thread_pool_get_queue_size is not None:
            pulumi.set(__self__, "thread_pool_get_queue_size", thread_pool_get_queue_size)
        if thread_pool_get_size is not None:
            pulumi.set(__self__, "thread_pool_get_size", thread_pool_get_size)
        if thread_pool_index_queue_size is not None:
            pulumi.set(__self__, "thread_pool_index_queue_size", thread_pool_index_queue_size)
        if thread_pool_index_size is not None:
            pulumi.set(__self__, "thread_pool_index_size", thread_pool_index_size)
        if thread_pool_search_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_queue_size", thread_pool_search_queue_size)
        if thread_pool_search_size is not None:
            pulumi.set(__self__, "thread_pool_search_size", thread_pool_search_size)
        if thread_pool_search_throttled_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_queue_size", thread_pool_search_throttled_queue_size)
        if thread_pool_search_throttled_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_size", thread_pool_search_throttled_size)
        if thread_pool_write_queue_size is not None:
            pulumi.set(__self__, "thread_pool_write_queue_size", thread_pool_write_queue_size)
        if thread_pool_write_size is not None:
            pulumi.set(__self__, "thread_pool_write_size", thread_pool_write_size)

    @property
    @pulumi.getter(name="actionAutoCreateIndexEnabled")
    def action_auto_create_index_enabled(self) -> Optional[str]:
        return pulumi.get(self, "action_auto_create_index_enabled")

    @action_auto_create_index_enabled.setter
    def action_auto_create_index_enabled(self, value: Optional[str]):
        pulumi.set(self, "action_auto_create_index_enabled", value)

    @property
    @pulumi.getter(name="actionDestructiveRequiresName")
    def action_destructive_requires_name(self) -> Optional[str]:
        return pulumi.get(self, "action_destructive_requires_name")

    @action_destructive_requires_name.setter
    def action_destructive_requires_name(self, value: Optional[str]):
        pulumi.set(self, "action_destructive_requires_name", value)

    @property
    @pulumi.getter(name="clusterMaxShardsPerNode")
    def cluster_max_shards_per_node(self) -> Optional[str]:
        return pulumi.get(self, "cluster_max_shards_per_node")

    @cluster_max_shards_per_node.setter
    def cluster_max_shards_per_node(self, value: Optional[str]):
        pulumi.set(self, "cluster_max_shards_per_node", value)

    @property
    @pulumi.getter(name="httpMaxContentLength")
    def http_max_content_length(self) -> Optional[str]:
        return pulumi.get(self, "http_max_content_length")

    @http_max_content_length.setter
    def http_max_content_length(self, value: Optional[str]):
        pulumi.set(self, "http_max_content_length", value)

    @property
    @pulumi.getter(name="httpMaxHeaderSize")
    def http_max_header_size(self) -> Optional[str]:
        return pulumi.get(self, "http_max_header_size")

    @http_max_header_size.setter
    def http_max_header_size(self, value: Optional[str]):
        pulumi.set(self, "http_max_header_size", value)

    @property
    @pulumi.getter(name="httpMaxInitialLineLength")
    def http_max_initial_line_length(self) -> Optional[str]:
        return pulumi.get(self, "http_max_initial_line_length")

    @http_max_initial_line_length.setter
    def http_max_initial_line_length(self, value: Optional[str]):
        pulumi.set(self, "http_max_initial_line_length", value)

    @property
    @pulumi.getter(name="indicesFielddataCacheSize")
    def indices_fielddata_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "indices_fielddata_cache_size")

    @indices_fielddata_cache_size.setter
    def indices_fielddata_cache_size(self, value: Optional[str]):
        pulumi.set(self, "indices_fielddata_cache_size", value)

    @property
    @pulumi.getter(name="indicesMemoryIndexBufferSize")
    def indices_memory_index_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "indices_memory_index_buffer_size")

    @indices_memory_index_buffer_size.setter
    def indices_memory_index_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "indices_memory_index_buffer_size", value)

    @property
    @pulumi.getter(name="indicesQueriesCacheSize")
    def indices_queries_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "indices_queries_cache_size")

    @indices_queries_cache_size.setter
    def indices_queries_cache_size(self, value: Optional[str]):
        pulumi.set(self, "indices_queries_cache_size", value)

    @property
    @pulumi.getter(name="indicesQueryBoolMaxClauseCount")
    def indices_query_bool_max_clause_count(self) -> Optional[str]:
        return pulumi.get(self, "indices_query_bool_max_clause_count")

    @indices_query_bool_max_clause_count.setter
    def indices_query_bool_max_clause_count(self, value: Optional[str]):
        pulumi.set(self, "indices_query_bool_max_clause_count", value)

    @property
    @pulumi.getter(name="reindexRemoteWhitelists")
    def reindex_remote_whitelists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reindex_remote_whitelists")

    @reindex_remote_whitelists.setter
    def reindex_remote_whitelists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "reindex_remote_whitelists", value)

    @property
    @pulumi.getter(name="searchMaxBuckets")
    def search_max_buckets(self) -> Optional[str]:
        return pulumi.get(self, "search_max_buckets")

    @search_max_buckets.setter
    def search_max_buckets(self, value: Optional[str]):
        pulumi.set(self, "search_max_buckets", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeQueueSize")
    def thread_pool_analyze_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_analyze_queue_size")

    @thread_pool_analyze_queue_size.setter
    def thread_pool_analyze_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_analyze_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeSize")
    def thread_pool_analyze_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_analyze_size")

    @thread_pool_analyze_size.setter
    def thread_pool_analyze_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_analyze_size", value)

    @property
    @pulumi.getter(name="threadPoolForceMergeSize")
    def thread_pool_force_merge_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_force_merge_size")

    @thread_pool_force_merge_size.setter
    def thread_pool_force_merge_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_force_merge_size", value)

    @property
    @pulumi.getter(name="threadPoolGetQueueSize")
    def thread_pool_get_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_get_queue_size")

    @thread_pool_get_queue_size.setter
    def thread_pool_get_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_get_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolGetSize")
    def thread_pool_get_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_get_size")

    @thread_pool_get_size.setter
    def thread_pool_get_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_get_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexQueueSize")
    def thread_pool_index_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_index_queue_size")

    @thread_pool_index_queue_size.setter
    def thread_pool_index_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_index_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexSize")
    def thread_pool_index_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_index_size")

    @thread_pool_index_size.setter
    def thread_pool_index_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_index_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchQueueSize")
    def thread_pool_search_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_queue_size")

    @thread_pool_search_queue_size.setter
    def thread_pool_search_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchSize")
    def thread_pool_search_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_size")

    @thread_pool_search_size.setter
    def thread_pool_search_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledQueueSize")
    def thread_pool_search_throttled_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_throttled_queue_size")

    @thread_pool_search_throttled_queue_size.setter
    def thread_pool_search_throttled_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_throttled_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledSize")
    def thread_pool_search_throttled_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_throttled_size")

    @thread_pool_search_throttled_size.setter
    def thread_pool_search_throttled_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_throttled_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteQueueSize")
    def thread_pool_write_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_write_queue_size")

    @thread_pool_write_queue_size.setter
    def thread_pool_write_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_write_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteSize")
    def thread_pool_write_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_write_size")

    @thread_pool_write_size.setter
    def thread_pool_write_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_write_size", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigIndexPatternArgs:
    def __init__(__self__, *,
                 max_index_count: Optional[str] = None,
                 pattern: Optional[str] = None):
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[str]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[str]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[str]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigIndexTemplateArgs:
    def __init__(__self__, *,
                 mapping_nested_objects_limit: Optional[str] = None,
                 number_of_replicas: Optional[str] = None,
                 number_of_shards: Optional[str] = None):
        if mapping_nested_objects_limit is not None:
            pulumi.set(__self__, "mapping_nested_objects_limit", mapping_nested_objects_limit)
        if number_of_replicas is not None:
            pulumi.set(__self__, "number_of_replicas", number_of_replicas)
        if number_of_shards is not None:
            pulumi.set(__self__, "number_of_shards", number_of_shards)

    @property
    @pulumi.getter(name="mappingNestedObjectsLimit")
    def mapping_nested_objects_limit(self) -> Optional[str]:
        return pulumi.get(self, "mapping_nested_objects_limit")

    @mapping_nested_objects_limit.setter
    def mapping_nested_objects_limit(self, value: Optional[str]):
        pulumi.set(self, "mapping_nested_objects_limit", value)

    @property
    @pulumi.getter(name="numberOfReplicas")
    def number_of_replicas(self) -> Optional[str]:
        return pulumi.get(self, "number_of_replicas")

    @number_of_replicas.setter
    def number_of_replicas(self, value: Optional[str]):
        pulumi.set(self, "number_of_replicas", value)

    @property
    @pulumi.getter(name="numberOfShards")
    def number_of_shards(self) -> Optional[str]:
        return pulumi.get(self, "number_of_shards")

    @number_of_shards.setter
    def number_of_shards(self, value: Optional[str]):
        pulumi.set(self, "number_of_shards", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigKibanaArgs:
    def __init__(__self__, *,
                 elasticsearch_request_timeout: Optional[str] = None,
                 enabled: Optional[str] = None,
                 max_old_space_size: Optional[str] = None):
        if elasticsearch_request_timeout is not None:
            pulumi.set(__self__, "elasticsearch_request_timeout", elasticsearch_request_timeout)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_old_space_size is not None:
            pulumi.set(__self__, "max_old_space_size", max_old_space_size)

    @property
    @pulumi.getter(name="elasticsearchRequestTimeout")
    def elasticsearch_request_timeout(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_request_timeout")

    @elasticsearch_request_timeout.setter
    def elasticsearch_request_timeout(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_request_timeout", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxOldSpaceSize")
    def max_old_space_size(self) -> Optional[str]:
        return pulumi.get(self, "max_old_space_size")

    @max_old_space_size.setter
    def max_old_space_size(self, value: Optional[str]):
        pulumi.set(self, "max_old_space_size", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[str] = None,
                 kibana: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[str]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[str]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[str] = None,
                 kibana: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[str]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[str]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceGrafanaArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceGrafanaUserConfigArgs:
    def __init__(__self__, *,
                 alerting_enabled: Optional[str] = None,
                 alerting_error_or_timeout: Optional[str] = None,
                 alerting_nodata_or_nullvalues: Optional[str] = None,
                 allow_embedding: Optional[str] = None,
                 auth_basic_enabled: Optional[str] = None,
                 auth_generic_oauth: Optional['GetServiceGrafanaUserConfigAuthGenericOauthArgs'] = None,
                 auth_github: Optional['GetServiceGrafanaUserConfigAuthGithubArgs'] = None,
                 auth_gitlab: Optional['GetServiceGrafanaUserConfigAuthGitlabArgs'] = None,
                 auth_google: Optional['GetServiceGrafanaUserConfigAuthGoogleArgs'] = None,
                 cookie_samesite: Optional[str] = None,
                 custom_domain: Optional[str] = None,
                 dashboards_versions_to_keep: Optional[str] = None,
                 dataproxy_send_user_header: Optional[str] = None,
                 dataproxy_timeout: Optional[str] = None,
                 disable_gravatar: Optional[str] = None,
                 editors_can_admin: Optional[str] = None,
                 external_image_storage: Optional['GetServiceGrafanaUserConfigExternalImageStorageArgs'] = None,
                 google_analytics_ua_id: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 metrics_enabled: Optional[str] = None,
                 private_access: Optional['GetServiceGrafanaUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetServiceGrafanaUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None,
                 smtp_server: Optional['GetServiceGrafanaUserConfigSmtpServerArgs'] = None,
                 user_auto_assign_org: Optional[str] = None,
                 user_auto_assign_org_role: Optional[str] = None,
                 viewers_can_edit: Optional[str] = None):
        if alerting_enabled is not None:
            pulumi.set(__self__, "alerting_enabled", alerting_enabled)
        if alerting_error_or_timeout is not None:
            pulumi.set(__self__, "alerting_error_or_timeout", alerting_error_or_timeout)
        if alerting_nodata_or_nullvalues is not None:
            pulumi.set(__self__, "alerting_nodata_or_nullvalues", alerting_nodata_or_nullvalues)
        if allow_embedding is not None:
            pulumi.set(__self__, "allow_embedding", allow_embedding)
        if auth_basic_enabled is not None:
            pulumi.set(__self__, "auth_basic_enabled", auth_basic_enabled)
        if auth_generic_oauth is not None:
            pulumi.set(__self__, "auth_generic_oauth", auth_generic_oauth)
        if auth_github is not None:
            pulumi.set(__self__, "auth_github", auth_github)
        if auth_gitlab is not None:
            pulumi.set(__self__, "auth_gitlab", auth_gitlab)
        if auth_google is not None:
            pulumi.set(__self__, "auth_google", auth_google)
        if cookie_samesite is not None:
            pulumi.set(__self__, "cookie_samesite", cookie_samesite)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if dashboards_versions_to_keep is not None:
            pulumi.set(__self__, "dashboards_versions_to_keep", dashboards_versions_to_keep)
        if dataproxy_send_user_header is not None:
            pulumi.set(__self__, "dataproxy_send_user_header", dataproxy_send_user_header)
        if dataproxy_timeout is not None:
            pulumi.set(__self__, "dataproxy_timeout", dataproxy_timeout)
        if disable_gravatar is not None:
            pulumi.set(__self__, "disable_gravatar", disable_gravatar)
        if editors_can_admin is not None:
            pulumi.set(__self__, "editors_can_admin", editors_can_admin)
        if external_image_storage is not None:
            pulumi.set(__self__, "external_image_storage", external_image_storage)
        if google_analytics_ua_id is not None:
            pulumi.set(__self__, "google_analytics_ua_id", google_analytics_ua_id)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if smtp_server is not None:
            pulumi.set(__self__, "smtp_server", smtp_server)
        if user_auto_assign_org is not None:
            pulumi.set(__self__, "user_auto_assign_org", user_auto_assign_org)
        if user_auto_assign_org_role is not None:
            pulumi.set(__self__, "user_auto_assign_org_role", user_auto_assign_org_role)
        if viewers_can_edit is not None:
            pulumi.set(__self__, "viewers_can_edit", viewers_can_edit)

    @property
    @pulumi.getter(name="alertingEnabled")
    def alerting_enabled(self) -> Optional[str]:
        return pulumi.get(self, "alerting_enabled")

    @alerting_enabled.setter
    def alerting_enabled(self, value: Optional[str]):
        pulumi.set(self, "alerting_enabled", value)

    @property
    @pulumi.getter(name="alertingErrorOrTimeout")
    def alerting_error_or_timeout(self) -> Optional[str]:
        return pulumi.get(self, "alerting_error_or_timeout")

    @alerting_error_or_timeout.setter
    def alerting_error_or_timeout(self, value: Optional[str]):
        pulumi.set(self, "alerting_error_or_timeout", value)

    @property
    @pulumi.getter(name="alertingNodataOrNullvalues")
    def alerting_nodata_or_nullvalues(self) -> Optional[str]:
        return pulumi.get(self, "alerting_nodata_or_nullvalues")

    @alerting_nodata_or_nullvalues.setter
    def alerting_nodata_or_nullvalues(self, value: Optional[str]):
        pulumi.set(self, "alerting_nodata_or_nullvalues", value)

    @property
    @pulumi.getter(name="allowEmbedding")
    def allow_embedding(self) -> Optional[str]:
        return pulumi.get(self, "allow_embedding")

    @allow_embedding.setter
    def allow_embedding(self, value: Optional[str]):
        pulumi.set(self, "allow_embedding", value)

    @property
    @pulumi.getter(name="authBasicEnabled")
    def auth_basic_enabled(self) -> Optional[str]:
        return pulumi.get(self, "auth_basic_enabled")

    @auth_basic_enabled.setter
    def auth_basic_enabled(self, value: Optional[str]):
        pulumi.set(self, "auth_basic_enabled", value)

    @property
    @pulumi.getter(name="authGenericOauth")
    def auth_generic_oauth(self) -> Optional['GetServiceGrafanaUserConfigAuthGenericOauthArgs']:
        return pulumi.get(self, "auth_generic_oauth")

    @auth_generic_oauth.setter
    def auth_generic_oauth(self, value: Optional['GetServiceGrafanaUserConfigAuthGenericOauthArgs']):
        pulumi.set(self, "auth_generic_oauth", value)

    @property
    @pulumi.getter(name="authGithub")
    def auth_github(self) -> Optional['GetServiceGrafanaUserConfigAuthGithubArgs']:
        return pulumi.get(self, "auth_github")

    @auth_github.setter
    def auth_github(self, value: Optional['GetServiceGrafanaUserConfigAuthGithubArgs']):
        pulumi.set(self, "auth_github", value)

    @property
    @pulumi.getter(name="authGitlab")
    def auth_gitlab(self) -> Optional['GetServiceGrafanaUserConfigAuthGitlabArgs']:
        return pulumi.get(self, "auth_gitlab")

    @auth_gitlab.setter
    def auth_gitlab(self, value: Optional['GetServiceGrafanaUserConfigAuthGitlabArgs']):
        pulumi.set(self, "auth_gitlab", value)

    @property
    @pulumi.getter(name="authGoogle")
    def auth_google(self) -> Optional['GetServiceGrafanaUserConfigAuthGoogleArgs']:
        return pulumi.get(self, "auth_google")

    @auth_google.setter
    def auth_google(self, value: Optional['GetServiceGrafanaUserConfigAuthGoogleArgs']):
        pulumi.set(self, "auth_google", value)

    @property
    @pulumi.getter(name="cookieSamesite")
    def cookie_samesite(self) -> Optional[str]:
        return pulumi.get(self, "cookie_samesite")

    @cookie_samesite.setter
    def cookie_samesite(self, value: Optional[str]):
        pulumi.set(self, "cookie_samesite", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="dashboardsVersionsToKeep")
    def dashboards_versions_to_keep(self) -> Optional[str]:
        return pulumi.get(self, "dashboards_versions_to_keep")

    @dashboards_versions_to_keep.setter
    def dashboards_versions_to_keep(self, value: Optional[str]):
        pulumi.set(self, "dashboards_versions_to_keep", value)

    @property
    @pulumi.getter(name="dataproxySendUserHeader")
    def dataproxy_send_user_header(self) -> Optional[str]:
        return pulumi.get(self, "dataproxy_send_user_header")

    @dataproxy_send_user_header.setter
    def dataproxy_send_user_header(self, value: Optional[str]):
        pulumi.set(self, "dataproxy_send_user_header", value)

    @property
    @pulumi.getter(name="dataproxyTimeout")
    def dataproxy_timeout(self) -> Optional[str]:
        return pulumi.get(self, "dataproxy_timeout")

    @dataproxy_timeout.setter
    def dataproxy_timeout(self, value: Optional[str]):
        pulumi.set(self, "dataproxy_timeout", value)

    @property
    @pulumi.getter(name="disableGravatar")
    def disable_gravatar(self) -> Optional[str]:
        return pulumi.get(self, "disable_gravatar")

    @disable_gravatar.setter
    def disable_gravatar(self, value: Optional[str]):
        pulumi.set(self, "disable_gravatar", value)

    @property
    @pulumi.getter(name="editorsCanAdmin")
    def editors_can_admin(self) -> Optional[str]:
        return pulumi.get(self, "editors_can_admin")

    @editors_can_admin.setter
    def editors_can_admin(self, value: Optional[str]):
        pulumi.set(self, "editors_can_admin", value)

    @property
    @pulumi.getter(name="externalImageStorage")
    def external_image_storage(self) -> Optional['GetServiceGrafanaUserConfigExternalImageStorageArgs']:
        return pulumi.get(self, "external_image_storage")

    @external_image_storage.setter
    def external_image_storage(self, value: Optional['GetServiceGrafanaUserConfigExternalImageStorageArgs']):
        pulumi.set(self, "external_image_storage", value)

    @property
    @pulumi.getter(name="googleAnalyticsUaId")
    def google_analytics_ua_id(self) -> Optional[str]:
        return pulumi.get(self, "google_analytics_ua_id")

    @google_analytics_ua_id.setter
    def google_analytics_ua_id(self, value: Optional[str]):
        pulumi.set(self, "google_analytics_ua_id", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[str]:
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[str]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceGrafanaUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceGrafanaUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceGrafanaUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceGrafanaUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="smtpServer")
    def smtp_server(self) -> Optional['GetServiceGrafanaUserConfigSmtpServerArgs']:
        return pulumi.get(self, "smtp_server")

    @smtp_server.setter
    def smtp_server(self, value: Optional['GetServiceGrafanaUserConfigSmtpServerArgs']):
        pulumi.set(self, "smtp_server", value)

    @property
    @pulumi.getter(name="userAutoAssignOrg")
    def user_auto_assign_org(self) -> Optional[str]:
        return pulumi.get(self, "user_auto_assign_org")

    @user_auto_assign_org.setter
    def user_auto_assign_org(self, value: Optional[str]):
        pulumi.set(self, "user_auto_assign_org", value)

    @property
    @pulumi.getter(name="userAutoAssignOrgRole")
    def user_auto_assign_org_role(self) -> Optional[str]:
        return pulumi.get(self, "user_auto_assign_org_role")

    @user_auto_assign_org_role.setter
    def user_auto_assign_org_role(self, value: Optional[str]):
        pulumi.set(self, "user_auto_assign_org_role", value)

    @property
    @pulumi.getter(name="viewersCanEdit")
    def viewers_can_edit(self) -> Optional[str]:
        return pulumi.get(self, "viewers_can_edit")

    @viewers_can_edit.setter
    def viewers_can_edit(self, value: Optional[str]):
        pulumi.set(self, "viewers_can_edit", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigAuthGenericOauthArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_domains: Optional[Sequence[str]] = None,
                 allowed_organizations: Optional[Sequence[str]] = None,
                 api_url: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 name: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 token_url: Optional[str] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[str]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigAuthGithubArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_organizations: Optional[Sequence[str]] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 team_ids: Optional[Sequence[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if team_ids is not None:
            pulumi.set(__self__, "team_ids", team_ids)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="teamIds")
    def team_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "team_ids")

    @team_ids.setter
    def team_ids(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "team_ids", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigAuthGitlabArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_groups: Optional[Sequence[str]] = None,
                 api_url: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 token_url: Optional[str] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_groups is not None:
            pulumi.set(__self__, "allowed_groups", allowed_groups)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedGroups")
    def allowed_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_groups")

    @allowed_groups.setter
    def allowed_groups(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_groups", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[str]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigAuthGoogleArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_domains: Optional[Sequence[str]] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigExternalImageStorageArgs:
    def __init__(__self__, *,
                 access_key: Optional[str] = None,
                 bucket_url: Optional[str] = None,
                 provider: Optional[str] = None,
                 secret_key: Optional[str] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket_url is not None:
            pulumi.set(__self__, "bucket_url", bucket_url)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> Optional[str]:
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: Optional[str]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[str]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[str] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[str]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[str]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[str] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[str]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[str]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigSmtpServerArgs:
    def __init__(__self__, *,
                 from_address: Optional[str] = None,
                 from_name: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 skip_verify: Optional[str] = None,
                 starttls_policy: Optional[str] = None,
                 username: Optional[str] = None):
        if from_address is not None:
            pulumi.set(__self__, "from_address", from_address)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if starttls_policy is not None:
            pulumi.set(__self__, "starttls_policy", starttls_policy)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[str]:
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[str]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter(name="starttlsPolicy")
    def starttls_policy(self) -> Optional[str]:
        return pulumi.get(self, "starttls_policy")

    @starttls_policy.setter
    def starttls_policy(self, value: Optional[str]):
        pulumi.set(self, "starttls_policy", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetServiceInfluxdbArgs:
    def __init__(__self__, *,
                 database_name: str):
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: str):
        pulumi.set(self, "database_name", value)


@pulumi.input_type
class GetServiceInfluxdbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 influxdb: Optional['GetServiceInfluxdbUserConfigInfluxdbArgs'] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 private_access: Optional['GetServiceInfluxdbUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetServiceInfluxdbUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional['GetServiceInfluxdbUserConfigInfluxdbArgs']:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional['GetServiceInfluxdbUserConfigInfluxdbArgs']):
        pulumi.set(self, "influxdb", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceInfluxdbUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceInfluxdbUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceInfluxdbUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceInfluxdbUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceInfluxdbUserConfigInfluxdbArgs:
    def __init__(__self__, *,
                 log_queries_after: Optional[str] = None,
                 max_row_limit: Optional[str] = None,
                 max_select_buckets: Optional[str] = None,
                 max_select_point: Optional[str] = None,
                 query_timeout: Optional[str] = None):
        if log_queries_after is not None:
            pulumi.set(__self__, "log_queries_after", log_queries_after)
        if max_row_limit is not None:
            pulumi.set(__self__, "max_row_limit", max_row_limit)
        if max_select_buckets is not None:
            pulumi.set(__self__, "max_select_buckets", max_select_buckets)
        if max_select_point is not None:
            pulumi.set(__self__, "max_select_point", max_select_point)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)

    @property
    @pulumi.getter(name="logQueriesAfter")
    def log_queries_after(self) -> Optional[str]:
        return pulumi.get(self, "log_queries_after")

    @log_queries_after.setter
    def log_queries_after(self, value: Optional[str]):
        pulumi.set(self, "log_queries_after", value)

    @property
    @pulumi.getter(name="maxRowLimit")
    def max_row_limit(self) -> Optional[str]:
        return pulumi.get(self, "max_row_limit")

    @max_row_limit.setter
    def max_row_limit(self, value: Optional[str]):
        pulumi.set(self, "max_row_limit", value)

    @property
    @pulumi.getter(name="maxSelectBuckets")
    def max_select_buckets(self) -> Optional[str]:
        return pulumi.get(self, "max_select_buckets")

    @max_select_buckets.setter
    def max_select_buckets(self, value: Optional[str]):
        pulumi.set(self, "max_select_buckets", value)

    @property
    @pulumi.getter(name="maxSelectPoint")
    def max_select_point(self) -> Optional[str]:
        return pulumi.get(self, "max_select_point")

    @max_select_point.setter
    def max_select_point(self, value: Optional[str]):
        pulumi.set(self, "max_select_point", value)

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[str]:
        return pulumi.get(self, "query_timeout")

    @query_timeout.setter
    def query_timeout(self, value: Optional[str]):
        pulumi.set(self, "query_timeout", value)


@pulumi.input_type
class GetServiceInfluxdbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[str] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[str]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[str]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class GetServiceInfluxdbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[str] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[str]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[str]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class GetServiceIntegrationDashboardUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceIntegrationDatadogUserConfigArgs:
    def __init__(__self__, *,
                 exclude_consumer_groups: Optional[Sequence[str]] = None,
                 exclude_topics: Optional[Sequence[str]] = None,
                 include_consumer_groups: Optional[Sequence[str]] = None,
                 include_topics: Optional[Sequence[str]] = None,
                 kafka_custom_metrics: Optional[Sequence[str]] = None):
        if exclude_consumer_groups is not None:
            pulumi.set(__self__, "exclude_consumer_groups", exclude_consumer_groups)
        if exclude_topics is not None:
            pulumi.set(__self__, "exclude_topics", exclude_topics)
        if include_consumer_groups is not None:
            pulumi.set(__self__, "include_consumer_groups", include_consumer_groups)
        if include_topics is not None:
            pulumi.set(__self__, "include_topics", include_topics)
        if kafka_custom_metrics is not None:
            pulumi.set(__self__, "kafka_custom_metrics", kafka_custom_metrics)

    @property
    @pulumi.getter(name="excludeConsumerGroups")
    def exclude_consumer_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_consumer_groups")

    @exclude_consumer_groups.setter
    def exclude_consumer_groups(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exclude_consumer_groups", value)

    @property
    @pulumi.getter(name="excludeTopics")
    def exclude_topics(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_topics")

    @exclude_topics.setter
    def exclude_topics(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exclude_topics", value)

    @property
    @pulumi.getter(name="includeConsumerGroups")
    def include_consumer_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "include_consumer_groups")

    @include_consumer_groups.setter
    def include_consumer_groups(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "include_consumer_groups", value)

    @property
    @pulumi.getter(name="includeTopics")
    def include_topics(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "include_topics")

    @include_topics.setter
    def include_topics(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "include_topics", value)

    @property
    @pulumi.getter(name="kafkaCustomMetrics")
    def kafka_custom_metrics(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "kafka_custom_metrics")

    @kafka_custom_metrics.setter
    def kafka_custom_metrics(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "kafka_custom_metrics", value)


@pulumi.input_type
class GetServiceIntegrationEndpointDatadogUserConfigArgs:
    def __init__(__self__, *,
                 datadog_api_key: Optional[str] = None,
                 disable_consumer_stats: Optional[str] = None,
                 max_partition_contexts: Optional[str] = None,
                 site: Optional[str] = None):
        if datadog_api_key is not None:
            pulumi.set(__self__, "datadog_api_key", datadog_api_key)
        if disable_consumer_stats is not None:
            pulumi.set(__self__, "disable_consumer_stats", disable_consumer_stats)
        if max_partition_contexts is not None:
            pulumi.set(__self__, "max_partition_contexts", max_partition_contexts)
        if site is not None:
            pulumi.set(__self__, "site", site)

    @property
    @pulumi.getter(name="datadogApiKey")
    def datadog_api_key(self) -> Optional[str]:
        return pulumi.get(self, "datadog_api_key")

    @datadog_api_key.setter
    def datadog_api_key(self, value: Optional[str]):
        pulumi.set(self, "datadog_api_key", value)

    @property
    @pulumi.getter(name="disableConsumerStats")
    def disable_consumer_stats(self) -> Optional[str]:
        return pulumi.get(self, "disable_consumer_stats")

    @disable_consumer_stats.setter
    def disable_consumer_stats(self, value: Optional[str]):
        pulumi.set(self, "disable_consumer_stats", value)

    @property
    @pulumi.getter(name="maxPartitionContexts")
    def max_partition_contexts(self) -> Optional[str]:
        return pulumi.get(self, "max_partition_contexts")

    @max_partition_contexts.setter
    def max_partition_contexts(self, value: Optional[str]):
        pulumi.set(self, "max_partition_contexts", value)

    @property
    @pulumi.getter
    def site(self) -> Optional[str]:
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: Optional[str]):
        pulumi.set(self, "site", value)


@pulumi.input_type
class GetServiceIntegrationEndpointExternalAwsCloudwatchLogsUserConfigArgs:
    def __init__(__self__, *,
                 access_key: Optional[str] = None,
                 log_group_name: Optional[str] = None,
                 region: Optional[str] = None,
                 secret_key: Optional[str] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if log_group_name is not None:
            pulumi.set(__self__, "log_group_name", log_group_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[str]:
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: Optional[str]):
        pulumi.set(self, "log_group_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class GetServiceIntegrationEndpointExternalElasticsearchLogsUserConfigArgs:
    def __init__(__self__, *,
                 ca: Optional[str] = None,
                 index_days_max: Optional[str] = None,
                 index_prefix: Optional[str] = None,
                 timeout: Optional[str] = None,
                 url: Optional[str] = None):
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if index_days_max is not None:
            pulumi.set(__self__, "index_days_max", index_days_max)
        if index_prefix is not None:
            pulumi.set(__self__, "index_prefix", index_prefix)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[str]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[str]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="indexDaysMax")
    def index_days_max(self) -> Optional[str]:
        return pulumi.get(self, "index_days_max")

    @index_days_max.setter
    def index_days_max(self, value: Optional[str]):
        pulumi.set(self, "index_days_max", value)

    @property
    @pulumi.getter(name="indexPrefix")
    def index_prefix(self) -> Optional[str]:
        return pulumi.get(self, "index_prefix")

    @index_prefix.setter
    def index_prefix(self, value: Optional[str]):
        pulumi.set(self, "index_prefix", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GetServiceIntegrationEndpointExternalGoogleCloudLoggingUserConfigArgs:
    def __init__(__self__, *,
                 log_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 service_account_credentials: Optional[str] = None):
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if service_account_credentials is not None:
            pulumi.set(__self__, "service_account_credentials", service_account_credentials)

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")

    @log_id.setter
    def log_id(self, value: Optional[str]):
        pulumi.set(self, "log_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="serviceAccountCredentials")
    def service_account_credentials(self) -> Optional[str]:
        return pulumi.get(self, "service_account_credentials")

    @service_account_credentials.setter
    def service_account_credentials(self, value: Optional[str]):
        pulumi.set(self, "service_account_credentials", value)


@pulumi.input_type
class GetServiceIntegrationEndpointExternalKafkaUserConfigArgs:
    def __init__(__self__, *,
                 bootstrap_servers: Optional[str] = None,
                 sasl_mechanism: Optional[str] = None,
                 sasl_plain_password: Optional[str] = None,
                 sasl_plain_username: Optional[str] = None,
                 security_protocol: Optional[str] = None,
                 ssl_ca_cert: Optional[str] = None,
                 ssl_client_cert: Optional[str] = None,
                 ssl_client_key: Optional[str] = None,
                 ssl_endpoint_identification_algorithm: Optional[str] = None):
        if bootstrap_servers is not None:
            pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if sasl_plain_password is not None:
            pulumi.set(__self__, "sasl_plain_password", sasl_plain_password)
        if sasl_plain_username is not None:
            pulumi.set(__self__, "sasl_plain_username", sasl_plain_username)
        if security_protocol is not None:
            pulumi.set(__self__, "security_protocol", security_protocol)
        if ssl_ca_cert is not None:
            pulumi.set(__self__, "ssl_ca_cert", ssl_ca_cert)
        if ssl_client_cert is not None:
            pulumi.set(__self__, "ssl_client_cert", ssl_client_cert)
        if ssl_client_key is not None:
            pulumi.set(__self__, "ssl_client_key", ssl_client_key)
        if ssl_endpoint_identification_algorithm is not None:
            pulumi.set(__self__, "ssl_endpoint_identification_algorithm", ssl_endpoint_identification_algorithm)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> Optional[str]:
        return pulumi.get(self, "bootstrap_servers")

    @bootstrap_servers.setter
    def bootstrap_servers(self, value: Optional[str]):
        pulumi.set(self, "bootstrap_servers", value)

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "sasl_mechanism")

    @sasl_mechanism.setter
    def sasl_mechanism(self, value: Optional[str]):
        pulumi.set(self, "sasl_mechanism", value)

    @property
    @pulumi.getter(name="saslPlainPassword")
    def sasl_plain_password(self) -> Optional[str]:
        return pulumi.get(self, "sasl_plain_password")

    @sasl_plain_password.setter
    def sasl_plain_password(self, value: Optional[str]):
        pulumi.set(self, "sasl_plain_password", value)

    @property
    @pulumi.getter(name="saslPlainUsername")
    def sasl_plain_username(self) -> Optional[str]:
        return pulumi.get(self, "sasl_plain_username")

    @sasl_plain_username.setter
    def sasl_plain_username(self, value: Optional[str]):
        pulumi.set(self, "sasl_plain_username", value)

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[str]:
        return pulumi.get(self, "security_protocol")

    @security_protocol.setter
    def security_protocol(self, value: Optional[str]):
        pulumi.set(self, "security_protocol", value)

    @property
    @pulumi.getter(name="sslCaCert")
    def ssl_ca_cert(self) -> Optional[str]:
        return pulumi.get(self, "ssl_ca_cert")

    @ssl_ca_cert.setter
    def ssl_ca_cert(self, value: Optional[str]):
        pulumi.set(self, "ssl_ca_cert", value)

    @property
    @pulumi.getter(name="sslClientCert")
    def ssl_client_cert(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_cert")

    @ssl_client_cert.setter
    def ssl_client_cert(self, value: Optional[str]):
        pulumi.set(self, "ssl_client_cert", value)

    @property
    @pulumi.getter(name="sslClientKey")
    def ssl_client_key(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_key")

    @ssl_client_key.setter
    def ssl_client_key(self, value: Optional[str]):
        pulumi.set(self, "ssl_client_key", value)

    @property
    @pulumi.getter(name="sslEndpointIdentificationAlgorithm")
    def ssl_endpoint_identification_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "ssl_endpoint_identification_algorithm")

    @ssl_endpoint_identification_algorithm.setter
    def ssl_endpoint_identification_algorithm(self, value: Optional[str]):
        pulumi.set(self, "ssl_endpoint_identification_algorithm", value)


@pulumi.input_type
class GetServiceIntegrationEndpointExternalSchemaRegistryUserConfigArgs:
    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 basic_auth_password: Optional[str] = None,
                 basic_auth_username: Optional[str] = None,
                 url: Optional[str] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[str]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[str]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[str]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[str]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[str]):
        pulumi.set(self, "basic_auth_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GetServiceIntegrationEndpointJolokiaUserConfigArgs:
    def __init__(__self__, *,
                 basic_auth_password: Optional[str] = None,
                 basic_auth_username: Optional[str] = None):
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[str]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[str]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[str]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[str]):
        pulumi.set(self, "basic_auth_username", value)


@pulumi.input_type
class GetServiceIntegrationEndpointPrometheusUserConfigArgs:
    def __init__(__self__, *,
                 basic_auth_password: Optional[str] = None,
                 basic_auth_username: Optional[str] = None):
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[str]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[str]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[str]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[str]):
        pulumi.set(self, "basic_auth_username", value)


@pulumi.input_type
class GetServiceIntegrationEndpointRsyslogUserConfigArgs:
    def __init__(__self__, *,
                 ca: Optional[str] = None,
                 cert: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 logline: Optional[str] = None,
                 port: Optional[str] = None,
                 sd: Optional[str] = None,
                 server: Optional[str] = None,
                 tls: Optional[str] = None):
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if logline is not None:
            pulumi.set(__self__, "logline", logline)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if sd is not None:
            pulumi.set(__self__, "sd", sd)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def ca(self) -> Optional[str]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[str]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[str]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[str]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def logline(self) -> Optional[str]:
        return pulumi.get(self, "logline")

    @logline.setter
    def logline(self, value: Optional[str]):
        pulumi.set(self, "logline", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sd(self) -> Optional[str]:
        return pulumi.get(self, "sd")

    @sd.setter
    def sd(self, value: Optional[str]):
        pulumi.set(self, "sd", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[str]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[str]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class GetServiceIntegrationEndpointSignalfxUserConfigArgs:
    def __init__(__self__, *,
                 enabled_metrics: Optional[Sequence[str]] = None,
                 signalfx_api_key: Optional[str] = None,
                 signalfx_realm: Optional[str] = None):
        if enabled_metrics is not None:
            pulumi.set(__self__, "enabled_metrics", enabled_metrics)
        if signalfx_api_key is not None:
            pulumi.set(__self__, "signalfx_api_key", signalfx_api_key)
        if signalfx_realm is not None:
            pulumi.set(__self__, "signalfx_realm", signalfx_realm)

    @property
    @pulumi.getter(name="enabledMetrics")
    def enabled_metrics(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enabled_metrics")

    @enabled_metrics.setter
    def enabled_metrics(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "enabled_metrics", value)

    @property
    @pulumi.getter(name="signalfxApiKey")
    def signalfx_api_key(self) -> Optional[str]:
        return pulumi.get(self, "signalfx_api_key")

    @signalfx_api_key.setter
    def signalfx_api_key(self, value: Optional[str]):
        pulumi.set(self, "signalfx_api_key", value)

    @property
    @pulumi.getter(name="signalfxRealm")
    def signalfx_realm(self) -> Optional[str]:
        return pulumi.get(self, "signalfx_realm")

    @signalfx_realm.setter
    def signalfx_realm(self, value: Optional[str]):
        pulumi.set(self, "signalfx_realm", value)


@pulumi.input_type
class GetServiceIntegrationExternalAwsCloudwatchLogsUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceIntegrationExternalElasticsearchLogsUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceIntegrationExternalGoogleCloudLoggingUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceIntegrationKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional['GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs'] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional['GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional['GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']):
        pulumi.set(self, "kafka_connect", value)


@pulumi.input_type
class GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 config_storage_topic: Optional[str] = None,
                 group_id: Optional[str] = None,
                 offset_storage_topic: Optional[str] = None,
                 status_storage_topic: Optional[str] = None):
        if config_storage_topic is not None:
            pulumi.set(__self__, "config_storage_topic", config_storage_topic)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if offset_storage_topic is not None:
            pulumi.set(__self__, "offset_storage_topic", offset_storage_topic)
        if status_storage_topic is not None:
            pulumi.set(__self__, "status_storage_topic", status_storage_topic)

    @property
    @pulumi.getter(name="configStorageTopic")
    def config_storage_topic(self) -> Optional[str]:
        return pulumi.get(self, "config_storage_topic")

    @config_storage_topic.setter
    def config_storage_topic(self, value: Optional[str]):
        pulumi.set(self, "config_storage_topic", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="offsetStorageTopic")
    def offset_storage_topic(self) -> Optional[str]:
        return pulumi.get(self, "offset_storage_topic")

    @offset_storage_topic.setter
    def offset_storage_topic(self, value: Optional[str]):
        pulumi.set(self, "offset_storage_topic", value)

    @property
    @pulumi.getter(name="statusStorageTopic")
    def status_storage_topic(self) -> Optional[str]:
        return pulumi.get(self, "status_storage_topic")

    @status_storage_topic.setter
    def status_storage_topic(self, value: Optional[str]):
        pulumi.set(self, "status_storage_topic", value)


@pulumi.input_type
class GetServiceIntegrationKafkaLogsUserConfigArgs:
    def __init__(__self__, *,
                 kafka_topic: Optional[str] = None):
        if kafka_topic is not None:
            pulumi.set(__self__, "kafka_topic", kafka_topic)

    @property
    @pulumi.getter(name="kafkaTopic")
    def kafka_topic(self) -> Optional[str]:
        return pulumi.get(self, "kafka_topic")

    @kafka_topic.setter
    def kafka_topic(self, value: Optional[str]):
        pulumi.set(self, "kafka_topic", value)


@pulumi.input_type
class GetServiceIntegrationKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 cluster_alias: Optional[str] = None):
        if cluster_alias is not None:
            pulumi.set(__self__, "cluster_alias", cluster_alias)

    @property
    @pulumi.getter(name="clusterAlias")
    def cluster_alias(self) -> Optional[str]:
        return pulumi.get(self, "cluster_alias")

    @cluster_alias.setter
    def cluster_alias(self, value: Optional[str]):
        pulumi.set(self, "cluster_alias", value)


@pulumi.input_type
class GetServiceIntegrationLogsUserConfigArgs:
    def __init__(__self__, *,
                 elasticsearch_index_days_max: Optional[str] = None,
                 elasticsearch_index_prefix: Optional[str] = None):
        if elasticsearch_index_days_max is not None:
            pulumi.set(__self__, "elasticsearch_index_days_max", elasticsearch_index_days_max)
        if elasticsearch_index_prefix is not None:
            pulumi.set(__self__, "elasticsearch_index_prefix", elasticsearch_index_prefix)

    @property
    @pulumi.getter(name="elasticsearchIndexDaysMax")
    def elasticsearch_index_days_max(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_index_days_max")

    @elasticsearch_index_days_max.setter
    def elasticsearch_index_days_max(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_index_days_max", value)

    @property
    @pulumi.getter(name="elasticsearchIndexPrefix")
    def elasticsearch_index_prefix(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_index_prefix")

    @elasticsearch_index_prefix.setter
    def elasticsearch_index_prefix(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_index_prefix", value)


@pulumi.input_type
class GetServiceIntegrationM3aggregatorUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceIntegrationM3coordinatorUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceIntegrationMetricsUserConfigArgs:
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 retention_days: Optional[str] = None,
                 ro_username: Optional[str] = None,
                 source_mysql: Optional['GetServiceIntegrationMetricsUserConfigSourceMysqlArgs'] = None,
                 username: Optional[str] = None):
        if database is not None:
            pulumi.set(__self__, "database", database)
        if retention_days is not None:
            pulumi.set(__self__, "retention_days", retention_days)
        if ro_username is not None:
            pulumi.set(__self__, "ro_username", ro_username)
        if source_mysql is not None:
            pulumi.set(__self__, "source_mysql", source_mysql)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[str]:
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[str]):
        pulumi.set(self, "retention_days", value)

    @property
    @pulumi.getter(name="roUsername")
    def ro_username(self) -> Optional[str]:
        return pulumi.get(self, "ro_username")

    @ro_username.setter
    def ro_username(self, value: Optional[str]):
        pulumi.set(self, "ro_username", value)

    @property
    @pulumi.getter(name="sourceMysql")
    def source_mysql(self) -> Optional['GetServiceIntegrationMetricsUserConfigSourceMysqlArgs']:
        return pulumi.get(self, "source_mysql")

    @source_mysql.setter
    def source_mysql(self, value: Optional['GetServiceIntegrationMetricsUserConfigSourceMysqlArgs']):
        pulumi.set(self, "source_mysql", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetServiceIntegrationMetricsUserConfigSourceMysqlArgs:
    def __init__(__self__, *,
                 telegraf: Optional['GetServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs'] = None):
        if telegraf is not None:
            pulumi.set(__self__, "telegraf", telegraf)

    @property
    @pulumi.getter
    def telegraf(self) -> Optional['GetServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs']:
        return pulumi.get(self, "telegraf")

    @telegraf.setter
    def telegraf(self, value: Optional['GetServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs']):
        pulumi.set(self, "telegraf", value)


@pulumi.input_type
class GetServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs:
    def __init__(__self__, *,
                 gather_event_waits: Optional[str] = None,
                 gather_file_events_stats: Optional[str] = None,
                 gather_index_io_waits: Optional[str] = None,
                 gather_info_schema_auto_inc: Optional[str] = None,
                 gather_innodb_metrics: Optional[str] = None,
                 gather_perf_events_statements: Optional[str] = None,
                 gather_process_list: Optional[str] = None,
                 gather_slave_status: Optional[str] = None,
                 gather_table_io_waits: Optional[str] = None,
                 gather_table_lock_waits: Optional[str] = None,
                 gather_table_schema: Optional[str] = None,
                 perf_events_statements_digest_text_limit: Optional[str] = None,
                 perf_events_statements_limit: Optional[str] = None,
                 perf_events_statements_time_limit: Optional[str] = None):
        if gather_event_waits is not None:
            pulumi.set(__self__, "gather_event_waits", gather_event_waits)
        if gather_file_events_stats is not None:
            pulumi.set(__self__, "gather_file_events_stats", gather_file_events_stats)
        if gather_index_io_waits is not None:
            pulumi.set(__self__, "gather_index_io_waits", gather_index_io_waits)
        if gather_info_schema_auto_inc is not None:
            pulumi.set(__self__, "gather_info_schema_auto_inc", gather_info_schema_auto_inc)
        if gather_innodb_metrics is not None:
            pulumi.set(__self__, "gather_innodb_metrics", gather_innodb_metrics)
        if gather_perf_events_statements is not None:
            pulumi.set(__self__, "gather_perf_events_statements", gather_perf_events_statements)
        if gather_process_list is not None:
            pulumi.set(__self__, "gather_process_list", gather_process_list)
        if gather_slave_status is not None:
            pulumi.set(__self__, "gather_slave_status", gather_slave_status)
        if gather_table_io_waits is not None:
            pulumi.set(__self__, "gather_table_io_waits", gather_table_io_waits)
        if gather_table_lock_waits is not None:
            pulumi.set(__self__, "gather_table_lock_waits", gather_table_lock_waits)
        if gather_table_schema is not None:
            pulumi.set(__self__, "gather_table_schema", gather_table_schema)
        if perf_events_statements_digest_text_limit is not None:
            pulumi.set(__self__, "perf_events_statements_digest_text_limit", perf_events_statements_digest_text_limit)
        if perf_events_statements_limit is not None:
            pulumi.set(__self__, "perf_events_statements_limit", perf_events_statements_limit)
        if perf_events_statements_time_limit is not None:
            pulumi.set(__self__, "perf_events_statements_time_limit", perf_events_statements_time_limit)

    @property
    @pulumi.getter(name="gatherEventWaits")
    def gather_event_waits(self) -> Optional[str]:
        return pulumi.get(self, "gather_event_waits")

    @gather_event_waits.setter
    def gather_event_waits(self, value: Optional[str]):
        pulumi.set(self, "gather_event_waits", value)

    @property
    @pulumi.getter(name="gatherFileEventsStats")
    def gather_file_events_stats(self) -> Optional[str]:
        return pulumi.get(self, "gather_file_events_stats")

    @gather_file_events_stats.setter
    def gather_file_events_stats(self, value: Optional[str]):
        pulumi.set(self, "gather_file_events_stats", value)

    @property
    @pulumi.getter(name="gatherIndexIoWaits")
    def gather_index_io_waits(self) -> Optional[str]:
        return pulumi.get(self, "gather_index_io_waits")

    @gather_index_io_waits.setter
    def gather_index_io_waits(self, value: Optional[str]):
        pulumi.set(self, "gather_index_io_waits", value)

    @property
    @pulumi.getter(name="gatherInfoSchemaAutoInc")
    def gather_info_schema_auto_inc(self) -> Optional[str]:
        return pulumi.get(self, "gather_info_schema_auto_inc")

    @gather_info_schema_auto_inc.setter
    def gather_info_schema_auto_inc(self, value: Optional[str]):
        pulumi.set(self, "gather_info_schema_auto_inc", value)

    @property
    @pulumi.getter(name="gatherInnodbMetrics")
    def gather_innodb_metrics(self) -> Optional[str]:
        return pulumi.get(self, "gather_innodb_metrics")

    @gather_innodb_metrics.setter
    def gather_innodb_metrics(self, value: Optional[str]):
        pulumi.set(self, "gather_innodb_metrics", value)

    @property
    @pulumi.getter(name="gatherPerfEventsStatements")
    def gather_perf_events_statements(self) -> Optional[str]:
        return pulumi.get(self, "gather_perf_events_statements")

    @gather_perf_events_statements.setter
    def gather_perf_events_statements(self, value: Optional[str]):
        pulumi.set(self, "gather_perf_events_statements", value)

    @property
    @pulumi.getter(name="gatherProcessList")
    def gather_process_list(self) -> Optional[str]:
        return pulumi.get(self, "gather_process_list")

    @gather_process_list.setter
    def gather_process_list(self, value: Optional[str]):
        pulumi.set(self, "gather_process_list", value)

    @property
    @pulumi.getter(name="gatherSlaveStatus")
    def gather_slave_status(self) -> Optional[str]:
        return pulumi.get(self, "gather_slave_status")

    @gather_slave_status.setter
    def gather_slave_status(self, value: Optional[str]):
        pulumi.set(self, "gather_slave_status", value)

    @property
    @pulumi.getter(name="gatherTableIoWaits")
    def gather_table_io_waits(self) -> Optional[str]:
        return pulumi.get(self, "gather_table_io_waits")

    @gather_table_io_waits.setter
    def gather_table_io_waits(self, value: Optional[str]):
        pulumi.set(self, "gather_table_io_waits", value)

    @property
    @pulumi.getter(name="gatherTableLockWaits")
    def gather_table_lock_waits(self) -> Optional[str]:
        return pulumi.get(self, "gather_table_lock_waits")

    @gather_table_lock_waits.setter
    def gather_table_lock_waits(self, value: Optional[str]):
        pulumi.set(self, "gather_table_lock_waits", value)

    @property
    @pulumi.getter(name="gatherTableSchema")
    def gather_table_schema(self) -> Optional[str]:
        return pulumi.get(self, "gather_table_schema")

    @gather_table_schema.setter
    def gather_table_schema(self, value: Optional[str]):
        pulumi.set(self, "gather_table_schema", value)

    @property
    @pulumi.getter(name="perfEventsStatementsDigestTextLimit")
    def perf_events_statements_digest_text_limit(self) -> Optional[str]:
        return pulumi.get(self, "perf_events_statements_digest_text_limit")

    @perf_events_statements_digest_text_limit.setter
    def perf_events_statements_digest_text_limit(self, value: Optional[str]):
        pulumi.set(self, "perf_events_statements_digest_text_limit", value)

    @property
    @pulumi.getter(name="perfEventsStatementsLimit")
    def perf_events_statements_limit(self) -> Optional[str]:
        return pulumi.get(self, "perf_events_statements_limit")

    @perf_events_statements_limit.setter
    def perf_events_statements_limit(self, value: Optional[str]):
        pulumi.set(self, "perf_events_statements_limit", value)

    @property
    @pulumi.getter(name="perfEventsStatementsTimeLimit")
    def perf_events_statements_time_limit(self) -> Optional[str]:
        return pulumi.get(self, "perf_events_statements_time_limit")

    @perf_events_statements_time_limit.setter
    def perf_events_statements_time_limit(self, value: Optional[str]):
        pulumi.set(self, "perf_events_statements_time_limit", value)


@pulumi.input_type
class GetServiceIntegrationMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 mirrormaker_whitelist: Optional[str] = None):
        if mirrormaker_whitelist is not None:
            pulumi.set(__self__, "mirrormaker_whitelist", mirrormaker_whitelist)

    @property
    @pulumi.getter(name="mirrormakerWhitelist")
    def mirrormaker_whitelist(self) -> Optional[str]:
        return pulumi.get(self, "mirrormaker_whitelist")

    @mirrormaker_whitelist.setter
    def mirrormaker_whitelist(self, value: Optional[str]):
        pulumi.set(self, "mirrormaker_whitelist", value)


@pulumi.input_type
class GetServiceIntegrationPrometheusUserConfigArgs:
    def __init__(__self__, *,
                 source_mysql: Optional['GetServiceIntegrationPrometheusUserConfigSourceMysqlArgs'] = None):
        if source_mysql is not None:
            pulumi.set(__self__, "source_mysql", source_mysql)

    @property
    @pulumi.getter(name="sourceMysql")
    def source_mysql(self) -> Optional['GetServiceIntegrationPrometheusUserConfigSourceMysqlArgs']:
        return pulumi.get(self, "source_mysql")

    @source_mysql.setter
    def source_mysql(self, value: Optional['GetServiceIntegrationPrometheusUserConfigSourceMysqlArgs']):
        pulumi.set(self, "source_mysql", value)


@pulumi.input_type
class GetServiceIntegrationPrometheusUserConfigSourceMysqlArgs:
    def __init__(__self__, *,
                 telegraf: Optional['GetServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs'] = None):
        if telegraf is not None:
            pulumi.set(__self__, "telegraf", telegraf)

    @property
    @pulumi.getter
    def telegraf(self) -> Optional['GetServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs']:
        return pulumi.get(self, "telegraf")

    @telegraf.setter
    def telegraf(self, value: Optional['GetServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs']):
        pulumi.set(self, "telegraf", value)


@pulumi.input_type
class GetServiceIntegrationPrometheusUserConfigSourceMysqlTelegrafArgs:
    def __init__(__self__, *,
                 gather_event_waits: Optional[str] = None,
                 gather_file_events_stats: Optional[str] = None,
                 gather_index_io_waits: Optional[str] = None,
                 gather_info_schema_auto_inc: Optional[str] = None,
                 gather_innodb_metrics: Optional[str] = None,
                 gather_perf_events_statements: Optional[str] = None,
                 gather_process_list: Optional[str] = None,
                 gather_slave_status: Optional[str] = None,
                 gather_table_io_waits: Optional[str] = None,
                 gather_table_lock_waits: Optional[str] = None,
                 gather_table_schema: Optional[str] = None,
                 perf_events_statements_digest_text_limit: Optional[str] = None,
                 perf_events_statements_limit: Optional[str] = None,
                 perf_events_statements_time_limit: Optional[str] = None):
        if gather_event_waits is not None:
            pulumi.set(__self__, "gather_event_waits", gather_event_waits)
        if gather_file_events_stats is not None:
            pulumi.set(__self__, "gather_file_events_stats", gather_file_events_stats)
        if gather_index_io_waits is not None:
            pulumi.set(__self__, "gather_index_io_waits", gather_index_io_waits)
        if gather_info_schema_auto_inc is not None:
            pulumi.set(__self__, "gather_info_schema_auto_inc", gather_info_schema_auto_inc)
        if gather_innodb_metrics is not None:
            pulumi.set(__self__, "gather_innodb_metrics", gather_innodb_metrics)
        if gather_perf_events_statements is not None:
            pulumi.set(__self__, "gather_perf_events_statements", gather_perf_events_statements)
        if gather_process_list is not None:
            pulumi.set(__self__, "gather_process_list", gather_process_list)
        if gather_slave_status is not None:
            pulumi.set(__self__, "gather_slave_status", gather_slave_status)
        if gather_table_io_waits is not None:
            pulumi.set(__self__, "gather_table_io_waits", gather_table_io_waits)
        if gather_table_lock_waits is not None:
            pulumi.set(__self__, "gather_table_lock_waits", gather_table_lock_waits)
        if gather_table_schema is not None:
            pulumi.set(__self__, "gather_table_schema", gather_table_schema)
        if perf_events_statements_digest_text_limit is not None:
            pulumi.set(__self__, "perf_events_statements_digest_text_limit", perf_events_statements_digest_text_limit)
        if perf_events_statements_limit is not None:
            pulumi.set(__self__, "perf_events_statements_limit", perf_events_statements_limit)
        if perf_events_statements_time_limit is not None:
            pulumi.set(__self__, "perf_events_statements_time_limit", perf_events_statements_time_limit)

    @property
    @pulumi.getter(name="gatherEventWaits")
    def gather_event_waits(self) -> Optional[str]:
        return pulumi.get(self, "gather_event_waits")

    @gather_event_waits.setter
    def gather_event_waits(self, value: Optional[str]):
        pulumi.set(self, "gather_event_waits", value)

    @property
    @pulumi.getter(name="gatherFileEventsStats")
    def gather_file_events_stats(self) -> Optional[str]:
        return pulumi.get(self, "gather_file_events_stats")

    @gather_file_events_stats.setter
    def gather_file_events_stats(self, value: Optional[str]):
        pulumi.set(self, "gather_file_events_stats", value)

    @property
    @pulumi.getter(name="gatherIndexIoWaits")
    def gather_index_io_waits(self) -> Optional[str]:
        return pulumi.get(self, "gather_index_io_waits")

    @gather_index_io_waits.setter
    def gather_index_io_waits(self, value: Optional[str]):
        pulumi.set(self, "gather_index_io_waits", value)

    @property
    @pulumi.getter(name="gatherInfoSchemaAutoInc")
    def gather_info_schema_auto_inc(self) -> Optional[str]:
        return pulumi.get(self, "gather_info_schema_auto_inc")

    @gather_info_schema_auto_inc.setter
    def gather_info_schema_auto_inc(self, value: Optional[str]):
        pulumi.set(self, "gather_info_schema_auto_inc", value)

    @property
    @pulumi.getter(name="gatherInnodbMetrics")
    def gather_innodb_metrics(self) -> Optional[str]:
        return pulumi.get(self, "gather_innodb_metrics")

    @gather_innodb_metrics.setter
    def gather_innodb_metrics(self, value: Optional[str]):
        pulumi.set(self, "gather_innodb_metrics", value)

    @property
    @pulumi.getter(name="gatherPerfEventsStatements")
    def gather_perf_events_statements(self) -> Optional[str]:
        return pulumi.get(self, "gather_perf_events_statements")

    @gather_perf_events_statements.setter
    def gather_perf_events_statements(self, value: Optional[str]):
        pulumi.set(self, "gather_perf_events_statements", value)

    @property
    @pulumi.getter(name="gatherProcessList")
    def gather_process_list(self) -> Optional[str]:
        return pulumi.get(self, "gather_process_list")

    @gather_process_list.setter
    def gather_process_list(self, value: Optional[str]):
        pulumi.set(self, "gather_process_list", value)

    @property
    @pulumi.getter(name="gatherSlaveStatus")
    def gather_slave_status(self) -> Optional[str]:
        return pulumi.get(self, "gather_slave_status")

    @gather_slave_status.setter
    def gather_slave_status(self, value: Optional[str]):
        pulumi.set(self, "gather_slave_status", value)

    @property
    @pulumi.getter(name="gatherTableIoWaits")
    def gather_table_io_waits(self) -> Optional[str]:
        return pulumi.get(self, "gather_table_io_waits")

    @gather_table_io_waits.setter
    def gather_table_io_waits(self, value: Optional[str]):
        pulumi.set(self, "gather_table_io_waits", value)

    @property
    @pulumi.getter(name="gatherTableLockWaits")
    def gather_table_lock_waits(self) -> Optional[str]:
        return pulumi.get(self, "gather_table_lock_waits")

    @gather_table_lock_waits.setter
    def gather_table_lock_waits(self, value: Optional[str]):
        pulumi.set(self, "gather_table_lock_waits", value)

    @property
    @pulumi.getter(name="gatherTableSchema")
    def gather_table_schema(self) -> Optional[str]:
        return pulumi.get(self, "gather_table_schema")

    @gather_table_schema.setter
    def gather_table_schema(self, value: Optional[str]):
        pulumi.set(self, "gather_table_schema", value)

    @property
    @pulumi.getter(name="perfEventsStatementsDigestTextLimit")
    def perf_events_statements_digest_text_limit(self) -> Optional[str]:
        return pulumi.get(self, "perf_events_statements_digest_text_limit")

    @perf_events_statements_digest_text_limit.setter
    def perf_events_statements_digest_text_limit(self, value: Optional[str]):
        pulumi.set(self, "perf_events_statements_digest_text_limit", value)

    @property
    @pulumi.getter(name="perfEventsStatementsLimit")
    def perf_events_statements_limit(self) -> Optional[str]:
        return pulumi.get(self, "perf_events_statements_limit")

    @perf_events_statements_limit.setter
    def perf_events_statements_limit(self, value: Optional[str]):
        pulumi.set(self, "perf_events_statements_limit", value)

    @property
    @pulumi.getter(name="perfEventsStatementsTimeLimit")
    def perf_events_statements_time_limit(self) -> Optional[str]:
        return pulumi.get(self, "perf_events_statements_time_limit")

    @perf_events_statements_time_limit.setter
    def perf_events_statements_time_limit(self, value: Optional[str]):
        pulumi.set(self, "perf_events_statements_time_limit", value)


@pulumi.input_type
class GetServiceIntegrationReadReplicaUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceIntegrationRsyslogUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceIntegrationSchemaRegistryProxyUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceIntegrationSignalfxUserConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceKafkaArgs:
    def __init__(__self__, *,
                 access_cert: str,
                 access_key: str,
                 connect_uri: str,
                 rest_uri: str,
                 schema_registry_uri: str):
        pulumi.set(__self__, "access_cert", access_cert)
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "connect_uri", connect_uri)
        pulumi.set(__self__, "rest_uri", rest_uri)
        pulumi.set(__self__, "schema_registry_uri", schema_registry_uri)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> str:
        return pulumi.get(self, "access_cert")

    @access_cert.setter
    def access_cert(self, value: str):
        pulumi.set(self, "access_cert", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: str):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="connectUri")
    def connect_uri(self) -> str:
        return pulumi.get(self, "connect_uri")

    @connect_uri.setter
    def connect_uri(self, value: str):
        pulumi.set(self, "connect_uri", value)

    @property
    @pulumi.getter(name="restUri")
    def rest_uri(self) -> str:
        return pulumi.get(self, "rest_uri")

    @rest_uri.setter
    def rest_uri(self, value: str):
        pulumi.set(self, "rest_uri", value)

    @property
    @pulumi.getter(name="schemaRegistryUri")
    def schema_registry_uri(self) -> str:
        return pulumi.get(self, "schema_registry_uri")

    @schema_registry_uri.setter
    def schema_registry_uri(self, value: str):
        pulumi.set(self, "schema_registry_uri", value)


@pulumi.input_type
class GetServiceKafkaConnectArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[Sequence[str]] = None,
                 kafka_connect: Optional['GetServiceKafkaConnectUserConfigKafkaConnectArgs'] = None,
                 private_access: Optional['GetServiceKafkaConnectUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServiceKafkaConnectUserConfigPublicAccessArgs'] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional['GetServiceKafkaConnectUserConfigKafkaConnectArgs']:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional['GetServiceKafkaConnectUserConfigKafkaConnectArgs']):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceKafkaConnectUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceKafkaConnectUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceKafkaConnectUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceKafkaConnectUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)


@pulumi.input_type
class GetServiceKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[str] = None,
                 consumer_auto_offset_reset: Optional[str] = None,
                 consumer_fetch_max_bytes: Optional[str] = None,
                 consumer_isolation_level: Optional[str] = None,
                 consumer_max_partition_fetch_bytes: Optional[str] = None,
                 consumer_max_poll_interval_ms: Optional[str] = None,
                 consumer_max_poll_records: Optional[str] = None,
                 offset_flush_interval_ms: Optional[str] = None,
                 offset_flush_timeout_ms: Optional[str] = None,
                 producer_max_request_size: Optional[str] = None,
                 session_timeout_ms: Optional[str] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_fetch_max_bytes is not None:
            pulumi.set(__self__, "consumer_fetch_max_bytes", consumer_fetch_max_bytes)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_partition_fetch_bytes is not None:
            pulumi.set(__self__, "consumer_max_partition_fetch_bytes", consumer_max_partition_fetch_bytes)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if producer_max_request_size is not None:
            pulumi.set(__self__, "producer_max_request_size", producer_max_request_size)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[str]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[str]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[str]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[str]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerFetchMaxBytes")
    def consumer_fetch_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "consumer_fetch_max_bytes")

    @consumer_fetch_max_bytes.setter
    def consumer_fetch_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[str]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[str]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPartitionFetchBytes")
    def consumer_max_partition_fetch_bytes(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_partition_fetch_bytes")

    @consumer_max_partition_fetch_bytes.setter
    def consumer_max_partition_fetch_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_partition_fetch_bytes", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="producerMaxRequestSize")
    def producer_max_request_size(self) -> Optional[str]:
        return pulumi.get(self, "producer_max_request_size")

    @producer_max_request_size.setter
    def producer_max_request_size(self, value: Optional[str]):
        pulumi.set(self, "producer_max_request_size", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class GetServiceKafkaConnectUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceKafkaConnectUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceKafkaMirrormakerArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[Sequence[str]] = None,
                 kafka_mirrormaker: Optional['GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs'] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_mirrormaker is not None:
            pulumi.set(__self__, "kafka_mirrormaker", kafka_mirrormaker)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaMirrormaker")
    def kafka_mirrormaker(self) -> Optional['GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']:
        return pulumi.get(self, "kafka_mirrormaker")

    @kafka_mirrormaker.setter
    def kafka_mirrormaker(self, value: Optional['GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']):
        pulumi.set(self, "kafka_mirrormaker", value)


@pulumi.input_type
class GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs:
    def __init__(__self__, *,
                 refresh_groups_enabled: Optional[str] = None,
                 refresh_groups_interval_seconds: Optional[str] = None,
                 refresh_topics_enabled: Optional[str] = None,
                 refresh_topics_interval_seconds: Optional[str] = None):
        if refresh_groups_enabled is not None:
            pulumi.set(__self__, "refresh_groups_enabled", refresh_groups_enabled)
        if refresh_groups_interval_seconds is not None:
            pulumi.set(__self__, "refresh_groups_interval_seconds", refresh_groups_interval_seconds)
        if refresh_topics_enabled is not None:
            pulumi.set(__self__, "refresh_topics_enabled", refresh_topics_enabled)
        if refresh_topics_interval_seconds is not None:
            pulumi.set(__self__, "refresh_topics_interval_seconds", refresh_topics_interval_seconds)

    @property
    @pulumi.getter(name="refreshGroupsEnabled")
    def refresh_groups_enabled(self) -> Optional[str]:
        return pulumi.get(self, "refresh_groups_enabled")

    @refresh_groups_enabled.setter
    def refresh_groups_enabled(self, value: Optional[str]):
        pulumi.set(self, "refresh_groups_enabled", value)

    @property
    @pulumi.getter(name="refreshGroupsIntervalSeconds")
    def refresh_groups_interval_seconds(self) -> Optional[str]:
        return pulumi.get(self, "refresh_groups_interval_seconds")

    @refresh_groups_interval_seconds.setter
    def refresh_groups_interval_seconds(self, value: Optional[str]):
        pulumi.set(self, "refresh_groups_interval_seconds", value)

    @property
    @pulumi.getter(name="refreshTopicsEnabled")
    def refresh_topics_enabled(self) -> Optional[str]:
        return pulumi.get(self, "refresh_topics_enabled")

    @refresh_topics_enabled.setter
    def refresh_topics_enabled(self, value: Optional[str]):
        pulumi.set(self, "refresh_topics_enabled", value)

    @property
    @pulumi.getter(name="refreshTopicsIntervalSeconds")
    def refresh_topics_interval_seconds(self) -> Optional[str]:
        return pulumi.get(self, "refresh_topics_interval_seconds")

    @refresh_topics_interval_seconds.setter
    def refresh_topics_interval_seconds(self, value: Optional[str]):
        pulumi.set(self, "refresh_topics_interval_seconds", value)


@pulumi.input_type
class GetServiceKafkaUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 kafka: Optional['GetServiceKafkaUserConfigKafkaArgs'] = None,
                 kafka_authentication_methods: Optional['GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs'] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_connect_config: Optional['GetServiceKafkaUserConfigKafkaConnectConfigArgs'] = None,
                 kafka_rest: Optional[str] = None,
                 kafka_rest_config: Optional['GetServiceKafkaUserConfigKafkaRestConfigArgs'] = None,
                 kafka_version: Optional[str] = None,
                 private_access: Optional['GetServiceKafkaUserConfigPrivateAccessArgs'] = None,
                 privatelink_access: Optional['GetServiceKafkaUserConfigPrivatelinkAccessArgs'] = None,
                 public_access: Optional['GetServiceKafkaUserConfigPublicAccessArgs'] = None,
                 schema_registry: Optional[str] = None,
                 schema_registry_config: Optional['GetServiceKafkaUserConfigSchemaRegistryConfigArgs'] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_authentication_methods is not None:
            pulumi.set(__self__, "kafka_authentication_methods", kafka_authentication_methods)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_connect_config is not None:
            pulumi.set(__self__, "kafka_connect_config", kafka_connect_config)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if kafka_rest_config is not None:
            pulumi.set(__self__, "kafka_rest_config", kafka_rest_config)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if privatelink_access is not None:
            pulumi.set(__self__, "privatelink_access", privatelink_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)
        if schema_registry_config is not None:
            pulumi.set(__self__, "schema_registry_config", schema_registry_config)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional['GetServiceKafkaUserConfigKafkaArgs']:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional['GetServiceKafkaUserConfigKafkaArgs']):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethods")
    def kafka_authentication_methods(self) -> Optional['GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']:
        return pulumi.get(self, "kafka_authentication_methods")

    @kafka_authentication_methods.setter
    def kafka_authentication_methods(self, value: Optional['GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']):
        pulumi.set(self, "kafka_authentication_methods", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaConnectConfig")
    def kafka_connect_config(self) -> Optional['GetServiceKafkaUserConfigKafkaConnectConfigArgs']:
        return pulumi.get(self, "kafka_connect_config")

    @kafka_connect_config.setter
    def kafka_connect_config(self, value: Optional['GetServiceKafkaUserConfigKafkaConnectConfigArgs']):
        pulumi.set(self, "kafka_connect_config", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="kafkaRestConfig")
    def kafka_rest_config(self) -> Optional['GetServiceKafkaUserConfigKafkaRestConfigArgs']:
        return pulumi.get(self, "kafka_rest_config")

    @kafka_rest_config.setter
    def kafka_rest_config(self, value: Optional['GetServiceKafkaUserConfigKafkaRestConfigArgs']):
        pulumi.set(self, "kafka_rest_config", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[str]:
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[str]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceKafkaUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceKafkaUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="privatelinkAccess")
    def privatelink_access(self) -> Optional['GetServiceKafkaUserConfigPrivatelinkAccessArgs']:
        return pulumi.get(self, "privatelink_access")

    @privatelink_access.setter
    def privatelink_access(self, value: Optional['GetServiceKafkaUserConfigPrivatelinkAccessArgs']):
        pulumi.set(self, "privatelink_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceKafkaUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceKafkaUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)

    @property
    @pulumi.getter(name="schemaRegistryConfig")
    def schema_registry_config(self) -> Optional['GetServiceKafkaUserConfigSchemaRegistryConfigArgs']:
        return pulumi.get(self, "schema_registry_config")

    @schema_registry_config.setter
    def schema_registry_config(self, value: Optional['GetServiceKafkaUserConfigSchemaRegistryConfigArgs']):
        pulumi.set(self, "schema_registry_config", value)


@pulumi.input_type
class GetServiceKafkaUserConfigKafkaArgs:
    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[str] = None,
                 compression_type: Optional[str] = None,
                 connections_max_idle_ms: Optional[str] = None,
                 default_replication_factor: Optional[str] = None,
                 group_max_session_timeout_ms: Optional[str] = None,
                 group_min_session_timeout_ms: Optional[str] = None,
                 log_cleaner_delete_retention_ms: Optional[str] = None,
                 log_cleaner_max_compaction_lag_ms: Optional[str] = None,
                 log_cleaner_min_cleanable_ratio: Optional[str] = None,
                 log_cleaner_min_compaction_lag_ms: Optional[str] = None,
                 log_cleanup_policy: Optional[str] = None,
                 log_flush_interval_messages: Optional[str] = None,
                 log_flush_interval_ms: Optional[str] = None,
                 log_index_interval_bytes: Optional[str] = None,
                 log_index_size_max_bytes: Optional[str] = None,
                 log_message_downconversion_enable: Optional[str] = None,
                 log_message_timestamp_difference_max_ms: Optional[str] = None,
                 log_message_timestamp_type: Optional[str] = None,
                 log_preallocate: Optional[str] = None,
                 log_retention_bytes: Optional[str] = None,
                 log_retention_hours: Optional[str] = None,
                 log_retention_ms: Optional[str] = None,
                 log_roll_jitter_ms: Optional[str] = None,
                 log_roll_ms: Optional[str] = None,
                 log_segment_bytes: Optional[str] = None,
                 log_segment_delete_delay_ms: Optional[str] = None,
                 max_connections_per_ip: Optional[str] = None,
                 max_incremental_fetch_session_cache_slots: Optional[str] = None,
                 message_max_bytes: Optional[str] = None,
                 min_insync_replicas: Optional[str] = None,
                 num_partitions: Optional[str] = None,
                 offsets_retention_minutes: Optional[str] = None,
                 producer_purgatory_purge_interval_requests: Optional[str] = None,
                 replica_fetch_max_bytes: Optional[str] = None,
                 replica_fetch_response_max_bytes: Optional[str] = None,
                 socket_request_max_bytes: Optional[str] = None,
                 transaction_remove_expired_transaction_cleanup_interval_ms: Optional[str] = None,
                 transaction_state_log_segment_bytes: Optional[str] = None):
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if connections_max_idle_ms is not None:
            pulumi.set(__self__, "connections_max_idle_ms", connections_max_idle_ms)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if group_max_session_timeout_ms is not None:
            pulumi.set(__self__, "group_max_session_timeout_ms", group_max_session_timeout_ms)
        if group_min_session_timeout_ms is not None:
            pulumi.set(__self__, "group_min_session_timeout_ms", group_min_session_timeout_ms)
        if log_cleaner_delete_retention_ms is not None:
            pulumi.set(__self__, "log_cleaner_delete_retention_ms", log_cleaner_delete_retention_ms)
        if log_cleaner_max_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_max_compaction_lag_ms", log_cleaner_max_compaction_lag_ms)
        if log_cleaner_min_cleanable_ratio is not None:
            pulumi.set(__self__, "log_cleaner_min_cleanable_ratio", log_cleaner_min_cleanable_ratio)
        if log_cleaner_min_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_min_compaction_lag_ms", log_cleaner_min_compaction_lag_ms)
        if log_cleanup_policy is not None:
            pulumi.set(__self__, "log_cleanup_policy", log_cleanup_policy)
        if log_flush_interval_messages is not None:
            pulumi.set(__self__, "log_flush_interval_messages", log_flush_interval_messages)
        if log_flush_interval_ms is not None:
            pulumi.set(__self__, "log_flush_interval_ms", log_flush_interval_ms)
        if log_index_interval_bytes is not None:
            pulumi.set(__self__, "log_index_interval_bytes", log_index_interval_bytes)
        if log_index_size_max_bytes is not None:
            pulumi.set(__self__, "log_index_size_max_bytes", log_index_size_max_bytes)
        if log_message_downconversion_enable is not None:
            pulumi.set(__self__, "log_message_downconversion_enable", log_message_downconversion_enable)
        if log_message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "log_message_timestamp_difference_max_ms", log_message_timestamp_difference_max_ms)
        if log_message_timestamp_type is not None:
            pulumi.set(__self__, "log_message_timestamp_type", log_message_timestamp_type)
        if log_preallocate is not None:
            pulumi.set(__self__, "log_preallocate", log_preallocate)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_retention_ms is not None:
            pulumi.set(__self__, "log_retention_ms", log_retention_ms)
        if log_roll_jitter_ms is not None:
            pulumi.set(__self__, "log_roll_jitter_ms", log_roll_jitter_ms)
        if log_roll_ms is not None:
            pulumi.set(__self__, "log_roll_ms", log_roll_ms)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if log_segment_delete_delay_ms is not None:
            pulumi.set(__self__, "log_segment_delete_delay_ms", log_segment_delete_delay_ms)
        if max_connections_per_ip is not None:
            pulumi.set(__self__, "max_connections_per_ip", max_connections_per_ip)
        if max_incremental_fetch_session_cache_slots is not None:
            pulumi.set(__self__, "max_incremental_fetch_session_cache_slots", max_incremental_fetch_session_cache_slots)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if min_insync_replicas is not None:
            pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if producer_purgatory_purge_interval_requests is not None:
            pulumi.set(__self__, "producer_purgatory_purge_interval_requests", producer_purgatory_purge_interval_requests)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if replica_fetch_response_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_response_max_bytes", replica_fetch_response_max_bytes)
        if socket_request_max_bytes is not None:
            pulumi.set(__self__, "socket_request_max_bytes", socket_request_max_bytes)
        if transaction_remove_expired_transaction_cleanup_interval_ms is not None:
            pulumi.set(__self__, "transaction_remove_expired_transaction_cleanup_interval_ms", transaction_remove_expired_transaction_cleanup_interval_ms)
        if transaction_state_log_segment_bytes is not None:
            pulumi.set(__self__, "transaction_state_log_segment_bytes", transaction_state_log_segment_bytes)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[str]:
        return pulumi.get(self, "auto_create_topics_enable")

    @auto_create_topics_enable.setter
    def auto_create_topics_enable(self, value: Optional[str]):
        pulumi.set(self, "auto_create_topics_enable", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[str]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="connectionsMaxIdleMs")
    def connections_max_idle_ms(self) -> Optional[str]:
        return pulumi.get(self, "connections_max_idle_ms")

    @connections_max_idle_ms.setter
    def connections_max_idle_ms(self, value: Optional[str]):
        pulumi.set(self, "connections_max_idle_ms", value)

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[str]:
        return pulumi.get(self, "default_replication_factor")

    @default_replication_factor.setter
    def default_replication_factor(self, value: Optional[str]):
        pulumi.set(self, "default_replication_factor", value)

    @property
    @pulumi.getter(name="groupMaxSessionTimeoutMs")
    def group_max_session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "group_max_session_timeout_ms")

    @group_max_session_timeout_ms.setter
    def group_max_session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "group_max_session_timeout_ms", value)

    @property
    @pulumi.getter(name="groupMinSessionTimeoutMs")
    def group_min_session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "group_min_session_timeout_ms")

    @group_min_session_timeout_ms.setter
    def group_min_session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "group_min_session_timeout_ms", value)

    @property
    @pulumi.getter(name="logCleanerDeleteRetentionMs")
    def log_cleaner_delete_retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_delete_retention_ms")

    @log_cleaner_delete_retention_ms.setter
    def log_cleaner_delete_retention_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_delete_retention_ms", value)

    @property
    @pulumi.getter(name="logCleanerMaxCompactionLagMs")
    def log_cleaner_max_compaction_lag_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_max_compaction_lag_ms")

    @log_cleaner_max_compaction_lag_ms.setter
    def log_cleaner_max_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanerMinCleanableRatio")
    def log_cleaner_min_cleanable_ratio(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_min_cleanable_ratio")

    @log_cleaner_min_cleanable_ratio.setter
    def log_cleaner_min_cleanable_ratio(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_min_cleanable_ratio", value)

    @property
    @pulumi.getter(name="logCleanerMinCompactionLagMs")
    def log_cleaner_min_compaction_lag_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_min_compaction_lag_ms")

    @log_cleaner_min_compaction_lag_ms.setter
    def log_cleaner_min_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanupPolicy")
    def log_cleanup_policy(self) -> Optional[str]:
        return pulumi.get(self, "log_cleanup_policy")

    @log_cleanup_policy.setter
    def log_cleanup_policy(self, value: Optional[str]):
        pulumi.set(self, "log_cleanup_policy", value)

    @property
    @pulumi.getter(name="logFlushIntervalMessages")
    def log_flush_interval_messages(self) -> Optional[str]:
        return pulumi.get(self, "log_flush_interval_messages")

    @log_flush_interval_messages.setter
    def log_flush_interval_messages(self, value: Optional[str]):
        pulumi.set(self, "log_flush_interval_messages", value)

    @property
    @pulumi.getter(name="logFlushIntervalMs")
    def log_flush_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_flush_interval_ms")

    @log_flush_interval_ms.setter
    def log_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "log_flush_interval_ms", value)

    @property
    @pulumi.getter(name="logIndexIntervalBytes")
    def log_index_interval_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_index_interval_bytes")

    @log_index_interval_bytes.setter
    def log_index_interval_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_index_interval_bytes", value)

    @property
    @pulumi.getter(name="logIndexSizeMaxBytes")
    def log_index_size_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_index_size_max_bytes")

    @log_index_size_max_bytes.setter
    def log_index_size_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_index_size_max_bytes", value)

    @property
    @pulumi.getter(name="logMessageDownconversionEnable")
    def log_message_downconversion_enable(self) -> Optional[str]:
        return pulumi.get(self, "log_message_downconversion_enable")

    @log_message_downconversion_enable.setter
    def log_message_downconversion_enable(self, value: Optional[str]):
        pulumi.set(self, "log_message_downconversion_enable", value)

    @property
    @pulumi.getter(name="logMessageTimestampDifferenceMaxMs")
    def log_message_timestamp_difference_max_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_message_timestamp_difference_max_ms")

    @log_message_timestamp_difference_max_ms.setter
    def log_message_timestamp_difference_max_ms(self, value: Optional[str]):
        pulumi.set(self, "log_message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="logMessageTimestampType")
    def log_message_timestamp_type(self) -> Optional[str]:
        return pulumi.get(self, "log_message_timestamp_type")

    @log_message_timestamp_type.setter
    def log_message_timestamp_type(self, value: Optional[str]):
        pulumi.set(self, "log_message_timestamp_type", value)

    @property
    @pulumi.getter(name="logPreallocate")
    def log_preallocate(self) -> Optional[str]:
        return pulumi.get(self, "log_preallocate")

    @log_preallocate.setter
    def log_preallocate(self, value: Optional[str]):
        pulumi.set(self, "log_preallocate", value)

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_bytes")

    @log_retention_bytes.setter
    def log_retention_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_retention_bytes", value)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_hours")

    @log_retention_hours.setter
    def log_retention_hours(self, value: Optional[str]):
        pulumi.set(self, "log_retention_hours", value)

    @property
    @pulumi.getter(name="logRetentionMs")
    def log_retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_ms")

    @log_retention_ms.setter
    def log_retention_ms(self, value: Optional[str]):
        pulumi.set(self, "log_retention_ms", value)

    @property
    @pulumi.getter(name="logRollJitterMs")
    def log_roll_jitter_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_roll_jitter_ms")

    @log_roll_jitter_ms.setter
    def log_roll_jitter_ms(self, value: Optional[str]):
        pulumi.set(self, "log_roll_jitter_ms", value)

    @property
    @pulumi.getter(name="logRollMs")
    def log_roll_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_roll_ms")

    @log_roll_ms.setter
    def log_roll_ms(self, value: Optional[str]):
        pulumi.set(self, "log_roll_ms", value)

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_segment_bytes")

    @log_segment_bytes.setter
    def log_segment_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_segment_bytes", value)

    @property
    @pulumi.getter(name="logSegmentDeleteDelayMs")
    def log_segment_delete_delay_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_segment_delete_delay_ms")

    @log_segment_delete_delay_ms.setter
    def log_segment_delete_delay_ms(self, value: Optional[str]):
        pulumi.set(self, "log_segment_delete_delay_ms", value)

    @property
    @pulumi.getter(name="maxConnectionsPerIp")
    def max_connections_per_ip(self) -> Optional[str]:
        return pulumi.get(self, "max_connections_per_ip")

    @max_connections_per_ip.setter
    def max_connections_per_ip(self, value: Optional[str]):
        pulumi.set(self, "max_connections_per_ip", value)

    @property
    @pulumi.getter(name="maxIncrementalFetchSessionCacheSlots")
    def max_incremental_fetch_session_cache_slots(self) -> Optional[str]:
        return pulumi.get(self, "max_incremental_fetch_session_cache_slots")

    @max_incremental_fetch_session_cache_slots.setter
    def max_incremental_fetch_session_cache_slots(self, value: Optional[str]):
        pulumi.set(self, "max_incremental_fetch_session_cache_slots", value)

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "message_max_bytes")

    @message_max_bytes.setter
    def message_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "message_max_bytes", value)

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> Optional[str]:
        return pulumi.get(self, "min_insync_replicas")

    @min_insync_replicas.setter
    def min_insync_replicas(self, value: Optional[str]):
        pulumi.set(self, "min_insync_replicas", value)

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[str]:
        return pulumi.get(self, "num_partitions")

    @num_partitions.setter
    def num_partitions(self, value: Optional[str]):
        pulumi.set(self, "num_partitions", value)

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[str]:
        return pulumi.get(self, "offsets_retention_minutes")

    @offsets_retention_minutes.setter
    def offsets_retention_minutes(self, value: Optional[str]):
        pulumi.set(self, "offsets_retention_minutes", value)

    @property
    @pulumi.getter(name="producerPurgatoryPurgeIntervalRequests")
    def producer_purgatory_purge_interval_requests(self) -> Optional[str]:
        return pulumi.get(self, "producer_purgatory_purge_interval_requests")

    @producer_purgatory_purge_interval_requests.setter
    def producer_purgatory_purge_interval_requests(self, value: Optional[str]):
        pulumi.set(self, "producer_purgatory_purge_interval_requests", value)

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "replica_fetch_max_bytes")

    @replica_fetch_max_bytes.setter
    def replica_fetch_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "replica_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="replicaFetchResponseMaxBytes")
    def replica_fetch_response_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "replica_fetch_response_max_bytes")

    @replica_fetch_response_max_bytes.setter
    def replica_fetch_response_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "replica_fetch_response_max_bytes", value)

    @property
    @pulumi.getter(name="socketRequestMaxBytes")
    def socket_request_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "socket_request_max_bytes")

    @socket_request_max_bytes.setter
    def socket_request_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "socket_request_max_bytes", value)

    @property
    @pulumi.getter(name="transactionRemoveExpiredTransactionCleanupIntervalMs")
    def transaction_remove_expired_transaction_cleanup_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "transaction_remove_expired_transaction_cleanup_interval_ms")

    @transaction_remove_expired_transaction_cleanup_interval_ms.setter
    def transaction_remove_expired_transaction_cleanup_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "transaction_remove_expired_transaction_cleanup_interval_ms", value)

    @property
    @pulumi.getter(name="transactionStateLogSegmentBytes")
    def transaction_state_log_segment_bytes(self) -> Optional[str]:
        return pulumi.get(self, "transaction_state_log_segment_bytes")

    @transaction_state_log_segment_bytes.setter
    def transaction_state_log_segment_bytes(self, value: Optional[str]):
        pulumi.set(self, "transaction_state_log_segment_bytes", value)


@pulumi.input_type
class GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs:
    def __init__(__self__, *,
                 certificate: Optional[str] = None,
                 sasl: Optional[str] = None):
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def sasl(self) -> Optional[str]:
        return pulumi.get(self, "sasl")

    @sasl.setter
    def sasl(self, value: Optional[str]):
        pulumi.set(self, "sasl", value)


@pulumi.input_type
class GetServiceKafkaUserConfigKafkaConnectConfigArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[str] = None,
                 consumer_auto_offset_reset: Optional[str] = None,
                 consumer_fetch_max_bytes: Optional[str] = None,
                 consumer_isolation_level: Optional[str] = None,
                 consumer_max_partition_fetch_bytes: Optional[str] = None,
                 consumer_max_poll_interval_ms: Optional[str] = None,
                 consumer_max_poll_records: Optional[str] = None,
                 offset_flush_interval_ms: Optional[str] = None,
                 offset_flush_timeout_ms: Optional[str] = None,
                 producer_max_request_size: Optional[str] = None,
                 session_timeout_ms: Optional[str] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_fetch_max_bytes is not None:
            pulumi.set(__self__, "consumer_fetch_max_bytes", consumer_fetch_max_bytes)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_partition_fetch_bytes is not None:
            pulumi.set(__self__, "consumer_max_partition_fetch_bytes", consumer_max_partition_fetch_bytes)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if producer_max_request_size is not None:
            pulumi.set(__self__, "producer_max_request_size", producer_max_request_size)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[str]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[str]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[str]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[str]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerFetchMaxBytes")
    def consumer_fetch_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "consumer_fetch_max_bytes")

    @consumer_fetch_max_bytes.setter
    def consumer_fetch_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[str]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[str]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPartitionFetchBytes")
    def consumer_max_partition_fetch_bytes(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_partition_fetch_bytes")

    @consumer_max_partition_fetch_bytes.setter
    def consumer_max_partition_fetch_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_partition_fetch_bytes", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="producerMaxRequestSize")
    def producer_max_request_size(self) -> Optional[str]:
        return pulumi.get(self, "producer_max_request_size")

    @producer_max_request_size.setter
    def producer_max_request_size(self, value: Optional[str]):
        pulumi.set(self, "producer_max_request_size", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class GetServiceKafkaUserConfigKafkaRestConfigArgs:
    def __init__(__self__, *,
                 consumer_enable_auto_commit: Optional[str] = None,
                 consumer_request_max_bytes: Optional[str] = None,
                 consumer_request_timeout_ms: Optional[str] = None,
                 producer_acks: Optional[str] = None,
                 producer_linger_ms: Optional[str] = None,
                 simpleconsumer_pool_size_max: Optional[str] = None):
        if consumer_enable_auto_commit is not None:
            pulumi.set(__self__, "consumer_enable_auto_commit", consumer_enable_auto_commit)
        if consumer_request_max_bytes is not None:
            pulumi.set(__self__, "consumer_request_max_bytes", consumer_request_max_bytes)
        if consumer_request_timeout_ms is not None:
            pulumi.set(__self__, "consumer_request_timeout_ms", consumer_request_timeout_ms)
        if producer_acks is not None:
            pulumi.set(__self__, "producer_acks", producer_acks)
        if producer_linger_ms is not None:
            pulumi.set(__self__, "producer_linger_ms", producer_linger_ms)
        if simpleconsumer_pool_size_max is not None:
            pulumi.set(__self__, "simpleconsumer_pool_size_max", simpleconsumer_pool_size_max)

    @property
    @pulumi.getter(name="consumerEnableAutoCommit")
    def consumer_enable_auto_commit(self) -> Optional[str]:
        return pulumi.get(self, "consumer_enable_auto_commit")

    @consumer_enable_auto_commit.setter
    def consumer_enable_auto_commit(self, value: Optional[str]):
        pulumi.set(self, "consumer_enable_auto_commit", value)

    @property
    @pulumi.getter(name="consumerRequestMaxBytes")
    def consumer_request_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "consumer_request_max_bytes")

    @consumer_request_max_bytes.setter
    def consumer_request_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_request_max_bytes", value)

    @property
    @pulumi.getter(name="consumerRequestTimeoutMs")
    def consumer_request_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "consumer_request_timeout_ms")

    @consumer_request_timeout_ms.setter
    def consumer_request_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_request_timeout_ms", value)

    @property
    @pulumi.getter(name="producerAcks")
    def producer_acks(self) -> Optional[str]:
        return pulumi.get(self, "producer_acks")

    @producer_acks.setter
    def producer_acks(self, value: Optional[str]):
        pulumi.set(self, "producer_acks", value)

    @property
    @pulumi.getter(name="producerLingerMs")
    def producer_linger_ms(self) -> Optional[str]:
        return pulumi.get(self, "producer_linger_ms")

    @producer_linger_ms.setter
    def producer_linger_ms(self, value: Optional[str]):
        pulumi.set(self, "producer_linger_ms", value)

    @property
    @pulumi.getter(name="simpleconsumerPoolSizeMax")
    def simpleconsumer_pool_size_max(self) -> Optional[str]:
        return pulumi.get(self, "simpleconsumer_pool_size_max")

    @simpleconsumer_pool_size_max.setter
    def simpleconsumer_pool_size_max(self, value: Optional[str]):
        pulumi.set(self, "simpleconsumer_pool_size_max", value)


@pulumi.input_type
class GetServiceKafkaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceKafkaUserConfigPrivatelinkAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[str] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_rest: Optional[str] = None,
                 schema_registry: Optional[str] = None):
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[str]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[str]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class GetServiceKafkaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[str] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_rest: Optional[str] = None,
                 prometheus: Optional[str] = None,
                 schema_registry: Optional[str] = None):
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[str]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[str]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class GetServiceKafkaUserConfigSchemaRegistryConfigArgs:
    def __init__(__self__, *,
                 leader_eligibility: Optional[str] = None,
                 topic_name: Optional[str] = None):
        if leader_eligibility is not None:
            pulumi.set(__self__, "leader_eligibility", leader_eligibility)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="leaderEligibility")
    def leader_eligibility(self) -> Optional[str]:
        return pulumi.get(self, "leader_eligibility")

    @leader_eligibility.setter
    def leader_eligibility(self, value: Optional[str]):
        pulumi.set(self, "leader_eligibility", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[str]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class GetServiceMysqlArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceMysqlUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 backup_hour: Optional[str] = None,
                 backup_minute: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 mysql: Optional['GetServiceMysqlUserConfigMysqlArgs'] = None,
                 mysql_version: Optional[str] = None,
                 private_access: Optional['GetServiceMysqlUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetServiceMysqlUserConfigPublicAccessArgs'] = None,
                 recovery_target_time: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if mysql_version is not None:
            pulumi.set(__self__, "mysql_version", mysql_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[str]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[str]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[str]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[str]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional['GetServiceMysqlUserConfigMysqlArgs']:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional['GetServiceMysqlUserConfigMysqlArgs']):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[str]:
        return pulumi.get(self, "mysql_version")

    @mysql_version.setter
    def mysql_version(self, value: Optional[str]):
        pulumi.set(self, "mysql_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceMysqlUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceMysqlUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceMysqlUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceMysqlUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[str]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceMysqlUserConfigMysqlArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[str] = None,
                 default_time_zone: Optional[str] = None,
                 group_concat_max_len: Optional[str] = None,
                 information_schema_stats_expiry: Optional[str] = None,
                 innodb_ft_min_token_size: Optional[str] = None,
                 innodb_ft_server_stopword_table: Optional[str] = None,
                 innodb_lock_wait_timeout: Optional[str] = None,
                 innodb_log_buffer_size: Optional[str] = None,
                 innodb_online_alter_log_max_size: Optional[str] = None,
                 innodb_print_all_deadlocks: Optional[str] = None,
                 innodb_rollback_on_timeout: Optional[str] = None,
                 interactive_timeout: Optional[str] = None,
                 max_allowed_packet: Optional[str] = None,
                 max_heap_table_size: Optional[str] = None,
                 net_read_timeout: Optional[str] = None,
                 net_write_timeout: Optional[str] = None,
                 sort_buffer_size: Optional[str] = None,
                 sql_mode: Optional[str] = None,
                 sql_require_primary_key: Optional[str] = None,
                 tmp_table_size: Optional[str] = None,
                 wait_timeout: Optional[str] = None):
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if group_concat_max_len is not None:
            pulumi.set(__self__, "group_concat_max_len", group_concat_max_len)
        if information_schema_stats_expiry is not None:
            pulumi.set(__self__, "information_schema_stats_expiry", information_schema_stats_expiry)
        if innodb_ft_min_token_size is not None:
            pulumi.set(__self__, "innodb_ft_min_token_size", innodb_ft_min_token_size)
        if innodb_ft_server_stopword_table is not None:
            pulumi.set(__self__, "innodb_ft_server_stopword_table", innodb_ft_server_stopword_table)
        if innodb_lock_wait_timeout is not None:
            pulumi.set(__self__, "innodb_lock_wait_timeout", innodb_lock_wait_timeout)
        if innodb_log_buffer_size is not None:
            pulumi.set(__self__, "innodb_log_buffer_size", innodb_log_buffer_size)
        if innodb_online_alter_log_max_size is not None:
            pulumi.set(__self__, "innodb_online_alter_log_max_size", innodb_online_alter_log_max_size)
        if innodb_print_all_deadlocks is not None:
            pulumi.set(__self__, "innodb_print_all_deadlocks", innodb_print_all_deadlocks)
        if innodb_rollback_on_timeout is not None:
            pulumi.set(__self__, "innodb_rollback_on_timeout", innodb_rollback_on_timeout)
        if interactive_timeout is not None:
            pulumi.set(__self__, "interactive_timeout", interactive_timeout)
        if max_allowed_packet is not None:
            pulumi.set(__self__, "max_allowed_packet", max_allowed_packet)
        if max_heap_table_size is not None:
            pulumi.set(__self__, "max_heap_table_size", max_heap_table_size)
        if net_read_timeout is not None:
            pulumi.set(__self__, "net_read_timeout", net_read_timeout)
        if net_write_timeout is not None:
            pulumi.set(__self__, "net_write_timeout", net_write_timeout)
        if sort_buffer_size is not None:
            pulumi.set(__self__, "sort_buffer_size", sort_buffer_size)
        if sql_mode is not None:
            pulumi.set(__self__, "sql_mode", sql_mode)
        if sql_require_primary_key is not None:
            pulumi.set(__self__, "sql_require_primary_key", sql_require_primary_key)
        if tmp_table_size is not None:
            pulumi.set(__self__, "tmp_table_size", tmp_table_size)
        if wait_timeout is not None:
            pulumi.set(__self__, "wait_timeout", wait_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[str]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[str]:
        return pulumi.get(self, "default_time_zone")

    @default_time_zone.setter
    def default_time_zone(self, value: Optional[str]):
        pulumi.set(self, "default_time_zone", value)

    @property
    @pulumi.getter(name="groupConcatMaxLen")
    def group_concat_max_len(self) -> Optional[str]:
        return pulumi.get(self, "group_concat_max_len")

    @group_concat_max_len.setter
    def group_concat_max_len(self, value: Optional[str]):
        pulumi.set(self, "group_concat_max_len", value)

    @property
    @pulumi.getter(name="informationSchemaStatsExpiry")
    def information_schema_stats_expiry(self) -> Optional[str]:
        return pulumi.get(self, "information_schema_stats_expiry")

    @information_schema_stats_expiry.setter
    def information_schema_stats_expiry(self, value: Optional[str]):
        pulumi.set(self, "information_schema_stats_expiry", value)

    @property
    @pulumi.getter(name="innodbFtMinTokenSize")
    def innodb_ft_min_token_size(self) -> Optional[str]:
        return pulumi.get(self, "innodb_ft_min_token_size")

    @innodb_ft_min_token_size.setter
    def innodb_ft_min_token_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_ft_min_token_size", value)

    @property
    @pulumi.getter(name="innodbFtServerStopwordTable")
    def innodb_ft_server_stopword_table(self) -> Optional[str]:
        return pulumi.get(self, "innodb_ft_server_stopword_table")

    @innodb_ft_server_stopword_table.setter
    def innodb_ft_server_stopword_table(self, value: Optional[str]):
        pulumi.set(self, "innodb_ft_server_stopword_table", value)

    @property
    @pulumi.getter(name="innodbLockWaitTimeout")
    def innodb_lock_wait_timeout(self) -> Optional[str]:
        return pulumi.get(self, "innodb_lock_wait_timeout")

    @innodb_lock_wait_timeout.setter
    def innodb_lock_wait_timeout(self, value: Optional[str]):
        pulumi.set(self, "innodb_lock_wait_timeout", value)

    @property
    @pulumi.getter(name="innodbLogBufferSize")
    def innodb_log_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "innodb_log_buffer_size")

    @innodb_log_buffer_size.setter
    def innodb_log_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_log_buffer_size", value)

    @property
    @pulumi.getter(name="innodbOnlineAlterLogMaxSize")
    def innodb_online_alter_log_max_size(self) -> Optional[str]:
        return pulumi.get(self, "innodb_online_alter_log_max_size")

    @innodb_online_alter_log_max_size.setter
    def innodb_online_alter_log_max_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_online_alter_log_max_size", value)

    @property
    @pulumi.getter(name="innodbPrintAllDeadlocks")
    def innodb_print_all_deadlocks(self) -> Optional[str]:
        return pulumi.get(self, "innodb_print_all_deadlocks")

    @innodb_print_all_deadlocks.setter
    def innodb_print_all_deadlocks(self, value: Optional[str]):
        pulumi.set(self, "innodb_print_all_deadlocks", value)

    @property
    @pulumi.getter(name="innodbRollbackOnTimeout")
    def innodb_rollback_on_timeout(self) -> Optional[str]:
        return pulumi.get(self, "innodb_rollback_on_timeout")

    @innodb_rollback_on_timeout.setter
    def innodb_rollback_on_timeout(self, value: Optional[str]):
        pulumi.set(self, "innodb_rollback_on_timeout", value)

    @property
    @pulumi.getter(name="interactiveTimeout")
    def interactive_timeout(self) -> Optional[str]:
        return pulumi.get(self, "interactive_timeout")

    @interactive_timeout.setter
    def interactive_timeout(self, value: Optional[str]):
        pulumi.set(self, "interactive_timeout", value)

    @property
    @pulumi.getter(name="maxAllowedPacket")
    def max_allowed_packet(self) -> Optional[str]:
        return pulumi.get(self, "max_allowed_packet")

    @max_allowed_packet.setter
    def max_allowed_packet(self, value: Optional[str]):
        pulumi.set(self, "max_allowed_packet", value)

    @property
    @pulumi.getter(name="maxHeapTableSize")
    def max_heap_table_size(self) -> Optional[str]:
        return pulumi.get(self, "max_heap_table_size")

    @max_heap_table_size.setter
    def max_heap_table_size(self, value: Optional[str]):
        pulumi.set(self, "max_heap_table_size", value)

    @property
    @pulumi.getter(name="netReadTimeout")
    def net_read_timeout(self) -> Optional[str]:
        return pulumi.get(self, "net_read_timeout")

    @net_read_timeout.setter
    def net_read_timeout(self, value: Optional[str]):
        pulumi.set(self, "net_read_timeout", value)

    @property
    @pulumi.getter(name="netWriteTimeout")
    def net_write_timeout(self) -> Optional[str]:
        return pulumi.get(self, "net_write_timeout")

    @net_write_timeout.setter
    def net_write_timeout(self, value: Optional[str]):
        pulumi.set(self, "net_write_timeout", value)

    @property
    @pulumi.getter(name="sortBufferSize")
    def sort_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "sort_buffer_size")

    @sort_buffer_size.setter
    def sort_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "sort_buffer_size", value)

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> Optional[str]:
        return pulumi.get(self, "sql_mode")

    @sql_mode.setter
    def sql_mode(self, value: Optional[str]):
        pulumi.set(self, "sql_mode", value)

    @property
    @pulumi.getter(name="sqlRequirePrimaryKey")
    def sql_require_primary_key(self) -> Optional[str]:
        return pulumi.get(self, "sql_require_primary_key")

    @sql_require_primary_key.setter
    def sql_require_primary_key(self, value: Optional[str]):
        pulumi.set(self, "sql_require_primary_key", value)

    @property
    @pulumi.getter(name="tmpTableSize")
    def tmp_table_size(self) -> Optional[str]:
        return pulumi.get(self, "tmp_table_size")

    @tmp_table_size.setter
    def tmp_table_size(self, value: Optional[str]):
        pulumi.set(self, "tmp_table_size", value)

    @property
    @pulumi.getter(name="waitTimeout")
    def wait_timeout(self) -> Optional[str]:
        return pulumi.get(self, "wait_timeout")

    @wait_timeout.setter
    def wait_timeout(self, value: Optional[str]):
        pulumi.set(self, "wait_timeout", value)


@pulumi.input_type
class GetServiceMysqlUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[str]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[str]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceMysqlUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[str]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[str]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServicePgArgs:
    def __init__(__self__, *,
                 dbname: str,
                 host: str,
                 password: str,
                 port: int,
                 replica_uri: str,
                 sslmode: str,
                 uri: str,
                 user: str):
        pulumi.set(__self__, "dbname", dbname)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replica_uri", replica_uri)
        pulumi.set(__self__, "sslmode", sslmode)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def dbname(self) -> str:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: str):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicaUri")
    def replica_uri(self) -> str:
        return pulumi.get(self, "replica_uri")

    @replica_uri.setter
    def replica_uri(self, value: str):
        pulumi.set(self, "replica_uri", value)

    @property
    @pulumi.getter
    def sslmode(self) -> str:
        return pulumi.get(self, "sslmode")

    @sslmode.setter
    def sslmode(self, value: str):
        pulumi.set(self, "sslmode", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: str):
        pulumi.set(self, "user", value)


@pulumi.input_type
class GetServicePgUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 backup_hour: Optional[str] = None,
                 backup_minute: Optional[str] = None,
                 ip_filters: Optional[Sequence[str]] = None,
                 migration: Optional['GetServicePgUserConfigMigrationArgs'] = None,
                 pg: Optional['GetServicePgUserConfigPgArgs'] = None,
                 pg_read_replica: Optional[str] = None,
                 pg_service_to_fork_from: Optional[str] = None,
                 pg_version: Optional[str] = None,
                 pgbouncer: Optional['GetServicePgUserConfigPgbouncerArgs'] = None,
                 pglookout: Optional['GetServicePgUserConfigPglookoutArgs'] = None,
                 private_access: Optional['GetServicePgUserConfigPrivateAccessArgs'] = None,
                 privatelink_access: Optional['GetServicePgUserConfigPrivatelinkAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetServicePgUserConfigPublicAccessArgs'] = None,
                 recovery_target_time: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None,
                 shared_buffers_percentage: Optional[str] = None,
                 synchronous_replication: Optional[str] = None,
                 timescaledb: Optional['GetServicePgUserConfigTimescaledbArgs'] = None,
                 variant: Optional[str] = None,
                 work_mem: Optional[str] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pg_read_replica is not None:
            pulumi.set(__self__, "pg_read_replica", pg_read_replica)
        if pg_service_to_fork_from is not None:
            pulumi.set(__self__, "pg_service_to_fork_from", pg_service_to_fork_from)
        if pg_version is not None:
            pulumi.set(__self__, "pg_version", pg_version)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if pglookout is not None:
            pulumi.set(__self__, "pglookout", pglookout)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if privatelink_access is not None:
            pulumi.set(__self__, "privatelink_access", privatelink_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if shared_buffers_percentage is not None:
            pulumi.set(__self__, "shared_buffers_percentage", shared_buffers_percentage)
        if synchronous_replication is not None:
            pulumi.set(__self__, "synchronous_replication", synchronous_replication)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[str]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[str]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[str]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[str]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional['GetServicePgUserConfigMigrationArgs']:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional['GetServicePgUserConfigMigrationArgs']):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter
    def pg(self) -> Optional['GetServicePgUserConfigPgArgs']:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional['GetServicePgUserConfigPgArgs']):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter(name="pgReadReplica")
    def pg_read_replica(self) -> Optional[str]:
        return pulumi.get(self, "pg_read_replica")

    @pg_read_replica.setter
    def pg_read_replica(self, value: Optional[str]):
        pulumi.set(self, "pg_read_replica", value)

    @property
    @pulumi.getter(name="pgServiceToForkFrom")
    def pg_service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "pg_service_to_fork_from")

    @pg_service_to_fork_from.setter
    def pg_service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "pg_service_to_fork_from", value)

    @property
    @pulumi.getter(name="pgVersion")
    def pg_version(self) -> Optional[str]:
        return pulumi.get(self, "pg_version")

    @pg_version.setter
    def pg_version(self, value: Optional[str]):
        pulumi.set(self, "pg_version", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional['GetServicePgUserConfigPgbouncerArgs']:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional['GetServicePgUserConfigPgbouncerArgs']):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def pglookout(self) -> Optional['GetServicePgUserConfigPglookoutArgs']:
        return pulumi.get(self, "pglookout")

    @pglookout.setter
    def pglookout(self, value: Optional['GetServicePgUserConfigPglookoutArgs']):
        pulumi.set(self, "pglookout", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServicePgUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServicePgUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="privatelinkAccess")
    def privatelink_access(self) -> Optional['GetServicePgUserConfigPrivatelinkAccessArgs']:
        return pulumi.get(self, "privatelink_access")

    @privatelink_access.setter
    def privatelink_access(self, value: Optional['GetServicePgUserConfigPrivatelinkAccessArgs']):
        pulumi.set(self, "privatelink_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServicePgUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServicePgUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[str]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="sharedBuffersPercentage")
    def shared_buffers_percentage(self) -> Optional[str]:
        return pulumi.get(self, "shared_buffers_percentage")

    @shared_buffers_percentage.setter
    def shared_buffers_percentage(self, value: Optional[str]):
        pulumi.set(self, "shared_buffers_percentage", value)

    @property
    @pulumi.getter(name="synchronousReplication")
    def synchronous_replication(self) -> Optional[str]:
        return pulumi.get(self, "synchronous_replication")

    @synchronous_replication.setter
    def synchronous_replication(self, value: Optional[str]):
        pulumi.set(self, "synchronous_replication", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional['GetServicePgUserConfigTimescaledbArgs']:
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional['GetServicePgUserConfigTimescaledbArgs']):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[str]:
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[str]):
        pulumi.set(self, "variant", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[str]):
        pulumi.set(self, "work_mem", value)


@pulumi.input_type
class GetServicePgUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 ssl: Optional[str] = None,
                 username: Optional[str] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[str]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[str]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[str]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetServicePgUserConfigPgArgs:
    def __init__(__self__, *,
                 autovacuum_analyze_scale_factor: Optional[str] = None,
                 autovacuum_analyze_threshold: Optional[str] = None,
                 autovacuum_freeze_max_age: Optional[str] = None,
                 autovacuum_max_workers: Optional[str] = None,
                 autovacuum_naptime: Optional[str] = None,
                 autovacuum_vacuum_cost_delay: Optional[str] = None,
                 autovacuum_vacuum_cost_limit: Optional[str] = None,
                 autovacuum_vacuum_scale_factor: Optional[str] = None,
                 autovacuum_vacuum_threshold: Optional[str] = None,
                 deadlock_timeout: Optional[str] = None,
                 idle_in_transaction_session_timeout: Optional[str] = None,
                 jit: Optional[str] = None,
                 log_autovacuum_min_duration: Optional[str] = None,
                 log_error_verbosity: Optional[str] = None,
                 log_min_duration_statement: Optional[str] = None,
                 max_files_per_process: Optional[str] = None,
                 max_locks_per_transaction: Optional[str] = None,
                 max_logical_replication_workers: Optional[str] = None,
                 max_parallel_workers: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_pred_locks_per_transaction: Optional[str] = None,
                 max_prepared_transactions: Optional[str] = None,
                 max_replication_slots: Optional[str] = None,
                 max_stack_depth: Optional[str] = None,
                 max_standby_archive_delay: Optional[str] = None,
                 max_standby_streaming_delay: Optional[str] = None,
                 max_wal_senders: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 pg_partman_bgw_dot_interval: Optional[str] = None,
                 pg_partman_bgw_dot_role: Optional[str] = None,
                 pg_stat_statements_track: Optional[str] = None,
                 temp_file_limit: Optional[str] = None,
                 timezone: Optional[str] = None,
                 track_activity_query_size: Optional[str] = None,
                 track_commit_timestamp: Optional[str] = None,
                 track_functions: Optional[str] = None,
                 wal_sender_timeout: Optional[str] = None,
                 wal_writer_delay: Optional[str] = None):
        if autovacuum_analyze_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_analyze_scale_factor", autovacuum_analyze_scale_factor)
        if autovacuum_analyze_threshold is not None:
            pulumi.set(__self__, "autovacuum_analyze_threshold", autovacuum_analyze_threshold)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_naptime is not None:
            pulumi.set(__self__, "autovacuum_naptime", autovacuum_naptime)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_cost_limit is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_limit", autovacuum_vacuum_cost_limit)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if deadlock_timeout is not None:
            pulumi.set(__self__, "deadlock_timeout", deadlock_timeout)
        if idle_in_transaction_session_timeout is not None:
            pulumi.set(__self__, "idle_in_transaction_session_timeout", idle_in_transaction_session_timeout)
        if jit is not None:
            pulumi.set(__self__, "jit", jit)
        if log_autovacuum_min_duration is not None:
            pulumi.set(__self__, "log_autovacuum_min_duration", log_autovacuum_min_duration)
        if log_error_verbosity is not None:
            pulumi.set(__self__, "log_error_verbosity", log_error_verbosity)
        if log_min_duration_statement is not None:
            pulumi.set(__self__, "log_min_duration_statement", log_min_duration_statement)
        if max_files_per_process is not None:
            pulumi.set(__self__, "max_files_per_process", max_files_per_process)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_logical_replication_workers is not None:
            pulumi.set(__self__, "max_logical_replication_workers", max_logical_replication_workers)
        if max_parallel_workers is not None:
            pulumi.set(__self__, "max_parallel_workers", max_parallel_workers)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_pred_locks_per_transaction is not None:
            pulumi.set(__self__, "max_pred_locks_per_transaction", max_pred_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_replication_slots is not None:
            pulumi.set(__self__, "max_replication_slots", max_replication_slots)
        if max_stack_depth is not None:
            pulumi.set(__self__, "max_stack_depth", max_stack_depth)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if max_wal_senders is not None:
            pulumi.set(__self__, "max_wal_senders", max_wal_senders)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if pg_partman_bgw_dot_interval is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_interval", pg_partman_bgw_dot_interval)
        if pg_partman_bgw_dot_role is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_role", pg_partman_bgw_dot_role)
        if pg_stat_statements_track is not None:
            pulumi.set(__self__, "pg_stat_statements_track", pg_stat_statements_track)
        if temp_file_limit is not None:
            pulumi.set(__self__, "temp_file_limit", temp_file_limit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if track_activity_query_size is not None:
            pulumi.set(__self__, "track_activity_query_size", track_activity_query_size)
        if track_commit_timestamp is not None:
            pulumi.set(__self__, "track_commit_timestamp", track_commit_timestamp)
        if track_functions is not None:
            pulumi.set(__self__, "track_functions", track_functions)
        if wal_sender_timeout is not None:
            pulumi.set(__self__, "wal_sender_timeout", wal_sender_timeout)
        if wal_writer_delay is not None:
            pulumi.set(__self__, "wal_writer_delay", wal_writer_delay)

    @property
    @pulumi.getter(name="autovacuumAnalyzeScaleFactor")
    def autovacuum_analyze_scale_factor(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_analyze_scale_factor")

    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_analyze_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumAnalyzeThreshold")
    def autovacuum_analyze_threshold(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_analyze_threshold")

    @autovacuum_analyze_threshold.setter
    def autovacuum_analyze_threshold(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_analyze_threshold", value)

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @autovacuum_freeze_max_age.setter
    def autovacuum_freeze_max_age(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_freeze_max_age", value)

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_max_workers")

    @autovacuum_max_workers.setter
    def autovacuum_max_workers(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_max_workers", value)

    @property
    @pulumi.getter(name="autovacuumNaptime")
    def autovacuum_naptime(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_naptime")

    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_naptime", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_cost_delay", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostLimit")
    def autovacuum_vacuum_cost_limit(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_cost_limit")

    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_cost_limit", value)

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @autovacuum_vacuum_threshold.setter
    def autovacuum_vacuum_threshold(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_threshold", value)

    @property
    @pulumi.getter(name="deadlockTimeout")
    def deadlock_timeout(self) -> Optional[str]:
        return pulumi.get(self, "deadlock_timeout")

    @deadlock_timeout.setter
    def deadlock_timeout(self, value: Optional[str]):
        pulumi.set(self, "deadlock_timeout", value)

    @property
    @pulumi.getter(name="idleInTransactionSessionTimeout")
    def idle_in_transaction_session_timeout(self) -> Optional[str]:
        return pulumi.get(self, "idle_in_transaction_session_timeout")

    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: Optional[str]):
        pulumi.set(self, "idle_in_transaction_session_timeout", value)

    @property
    @pulumi.getter
    def jit(self) -> Optional[str]:
        return pulumi.get(self, "jit")

    @jit.setter
    def jit(self, value: Optional[str]):
        pulumi.set(self, "jit", value)

    @property
    @pulumi.getter(name="logAutovacuumMinDuration")
    def log_autovacuum_min_duration(self) -> Optional[str]:
        return pulumi.get(self, "log_autovacuum_min_duration")

    @log_autovacuum_min_duration.setter
    def log_autovacuum_min_duration(self, value: Optional[str]):
        pulumi.set(self, "log_autovacuum_min_duration", value)

    @property
    @pulumi.getter(name="logErrorVerbosity")
    def log_error_verbosity(self) -> Optional[str]:
        return pulumi.get(self, "log_error_verbosity")

    @log_error_verbosity.setter
    def log_error_verbosity(self, value: Optional[str]):
        pulumi.set(self, "log_error_verbosity", value)

    @property
    @pulumi.getter(name="logMinDurationStatement")
    def log_min_duration_statement(self) -> Optional[str]:
        return pulumi.get(self, "log_min_duration_statement")

    @log_min_duration_statement.setter
    def log_min_duration_statement(self, value: Optional[str]):
        pulumi.set(self, "log_min_duration_statement", value)

    @property
    @pulumi.getter(name="maxFilesPerProcess")
    def max_files_per_process(self) -> Optional[str]:
        return pulumi.get(self, "max_files_per_process")

    @max_files_per_process.setter
    def max_files_per_process(self, value: Optional[str]):
        pulumi.set(self, "max_files_per_process", value)

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[str]:
        return pulumi.get(self, "max_locks_per_transaction")

    @max_locks_per_transaction.setter
    def max_locks_per_transaction(self, value: Optional[str]):
        pulumi.set(self, "max_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxLogicalReplicationWorkers")
    def max_logical_replication_workers(self) -> Optional[str]:
        return pulumi.get(self, "max_logical_replication_workers")

    @max_logical_replication_workers.setter
    def max_logical_replication_workers(self, value: Optional[str]):
        pulumi.set(self, "max_logical_replication_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkers")
    def max_parallel_workers(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers")

    @max_parallel_workers.setter
    def max_parallel_workers(self, value: Optional[str]):
        pulumi.set(self, "max_parallel_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[str]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxPredLocksPerTransaction")
    def max_pred_locks_per_transaction(self) -> Optional[str]:
        return pulumi.get(self, "max_pred_locks_per_transaction")

    @max_pred_locks_per_transaction.setter
    def max_pred_locks_per_transaction(self, value: Optional[str]):
        pulumi.set(self, "max_pred_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[str]:
        return pulumi.get(self, "max_prepared_transactions")

    @max_prepared_transactions.setter
    def max_prepared_transactions(self, value: Optional[str]):
        pulumi.set(self, "max_prepared_transactions", value)

    @property
    @pulumi.getter(name="maxReplicationSlots")
    def max_replication_slots(self) -> Optional[str]:
        return pulumi.get(self, "max_replication_slots")

    @max_replication_slots.setter
    def max_replication_slots(self, value: Optional[str]):
        pulumi.set(self, "max_replication_slots", value)

    @property
    @pulumi.getter(name="maxStackDepth")
    def max_stack_depth(self) -> Optional[str]:
        return pulumi.get(self, "max_stack_depth")

    @max_stack_depth.setter
    def max_stack_depth(self, value: Optional[str]):
        pulumi.set(self, "max_stack_depth", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[str]:
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[str]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[str]:
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[str]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter(name="maxWalSenders")
    def max_wal_senders(self) -> Optional[str]:
        return pulumi.get(self, "max_wal_senders")

    @max_wal_senders.setter
    def max_wal_senders(self, value: Optional[str]):
        pulumi.set(self, "max_wal_senders", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[str]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotInterval")
    def pg_partman_bgw_dot_interval(self) -> Optional[str]:
        return pulumi.get(self, "pg_partman_bgw_dot_interval")

    @pg_partman_bgw_dot_interval.setter
    def pg_partman_bgw_dot_interval(self, value: Optional[str]):
        pulumi.set(self, "pg_partman_bgw_dot_interval", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotRole")
    def pg_partman_bgw_dot_role(self) -> Optional[str]:
        return pulumi.get(self, "pg_partman_bgw_dot_role")

    @pg_partman_bgw_dot_role.setter
    def pg_partman_bgw_dot_role(self, value: Optional[str]):
        pulumi.set(self, "pg_partman_bgw_dot_role", value)

    @property
    @pulumi.getter(name="pgStatStatementsTrack")
    def pg_stat_statements_track(self) -> Optional[str]:
        return pulumi.get(self, "pg_stat_statements_track")

    @pg_stat_statements_track.setter
    def pg_stat_statements_track(self, value: Optional[str]):
        pulumi.set(self, "pg_stat_statements_track", value)

    @property
    @pulumi.getter(name="tempFileLimit")
    def temp_file_limit(self) -> Optional[str]:
        return pulumi.get(self, "temp_file_limit")

    @temp_file_limit.setter
    def temp_file_limit(self, value: Optional[str]):
        pulumi.set(self, "temp_file_limit", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[str]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="trackActivityQuerySize")
    def track_activity_query_size(self) -> Optional[str]:
        return pulumi.get(self, "track_activity_query_size")

    @track_activity_query_size.setter
    def track_activity_query_size(self, value: Optional[str]):
        pulumi.set(self, "track_activity_query_size", value)

    @property
    @pulumi.getter(name="trackCommitTimestamp")
    def track_commit_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "track_commit_timestamp")

    @track_commit_timestamp.setter
    def track_commit_timestamp(self, value: Optional[str]):
        pulumi.set(self, "track_commit_timestamp", value)

    @property
    @pulumi.getter(name="trackFunctions")
    def track_functions(self) -> Optional[str]:
        return pulumi.get(self, "track_functions")

    @track_functions.setter
    def track_functions(self, value: Optional[str]):
        pulumi.set(self, "track_functions", value)

    @property
    @pulumi.getter(name="walSenderTimeout")
    def wal_sender_timeout(self) -> Optional[str]:
        return pulumi.get(self, "wal_sender_timeout")

    @wal_sender_timeout.setter
    def wal_sender_timeout(self, value: Optional[str]):
        pulumi.set(self, "wal_sender_timeout", value)

    @property
    @pulumi.getter(name="walWriterDelay")
    def wal_writer_delay(self) -> Optional[str]:
        return pulumi.get(self, "wal_writer_delay")

    @wal_writer_delay.setter
    def wal_writer_delay(self, value: Optional[str]):
        pulumi.set(self, "wal_writer_delay", value)


@pulumi.input_type
class GetServicePgUserConfigPgbouncerArgs:
    def __init__(__self__, *,
                 autodb_idle_timeout: Optional[str] = None,
                 autodb_max_db_connections: Optional[str] = None,
                 autodb_pool_mode: Optional[str] = None,
                 autodb_pool_size: Optional[str] = None,
                 ignore_startup_parameters: Optional[Sequence[str]] = None,
                 min_pool_size: Optional[str] = None,
                 server_idle_timeout: Optional[str] = None,
                 server_lifetime: Optional[str] = None,
                 server_reset_query_always: Optional[str] = None):
        if autodb_idle_timeout is not None:
            pulumi.set(__self__, "autodb_idle_timeout", autodb_idle_timeout)
        if autodb_max_db_connections is not None:
            pulumi.set(__self__, "autodb_max_db_connections", autodb_max_db_connections)
        if autodb_pool_mode is not None:
            pulumi.set(__self__, "autodb_pool_mode", autodb_pool_mode)
        if autodb_pool_size is not None:
            pulumi.set(__self__, "autodb_pool_size", autodb_pool_size)
        if ignore_startup_parameters is not None:
            pulumi.set(__self__, "ignore_startup_parameters", ignore_startup_parameters)
        if min_pool_size is not None:
            pulumi.set(__self__, "min_pool_size", min_pool_size)
        if server_idle_timeout is not None:
            pulumi.set(__self__, "server_idle_timeout", server_idle_timeout)
        if server_lifetime is not None:
            pulumi.set(__self__, "server_lifetime", server_lifetime)
        if server_reset_query_always is not None:
            pulumi.set(__self__, "server_reset_query_always", server_reset_query_always)

    @property
    @pulumi.getter(name="autodbIdleTimeout")
    def autodb_idle_timeout(self) -> Optional[str]:
        return pulumi.get(self, "autodb_idle_timeout")

    @autodb_idle_timeout.setter
    def autodb_idle_timeout(self, value: Optional[str]):
        pulumi.set(self, "autodb_idle_timeout", value)

    @property
    @pulumi.getter(name="autodbMaxDbConnections")
    def autodb_max_db_connections(self) -> Optional[str]:
        return pulumi.get(self, "autodb_max_db_connections")

    @autodb_max_db_connections.setter
    def autodb_max_db_connections(self, value: Optional[str]):
        pulumi.set(self, "autodb_max_db_connections", value)

    @property
    @pulumi.getter(name="autodbPoolMode")
    def autodb_pool_mode(self) -> Optional[str]:
        return pulumi.get(self, "autodb_pool_mode")

    @autodb_pool_mode.setter
    def autodb_pool_mode(self, value: Optional[str]):
        pulumi.set(self, "autodb_pool_mode", value)

    @property
    @pulumi.getter(name="autodbPoolSize")
    def autodb_pool_size(self) -> Optional[str]:
        return pulumi.get(self, "autodb_pool_size")

    @autodb_pool_size.setter
    def autodb_pool_size(self, value: Optional[str]):
        pulumi.set(self, "autodb_pool_size", value)

    @property
    @pulumi.getter(name="ignoreStartupParameters")
    def ignore_startup_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignore_startup_parameters")

    @ignore_startup_parameters.setter
    def ignore_startup_parameters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ignore_startup_parameters", value)

    @property
    @pulumi.getter(name="minPoolSize")
    def min_pool_size(self) -> Optional[str]:
        return pulumi.get(self, "min_pool_size")

    @min_pool_size.setter
    def min_pool_size(self, value: Optional[str]):
        pulumi.set(self, "min_pool_size", value)

    @property
    @pulumi.getter(name="serverIdleTimeout")
    def server_idle_timeout(self) -> Optional[str]:
        return pulumi.get(self, "server_idle_timeout")

    @server_idle_timeout.setter
    def server_idle_timeout(self, value: Optional[str]):
        pulumi.set(self, "server_idle_timeout", value)

    @property
    @pulumi.getter(name="serverLifetime")
    def server_lifetime(self) -> Optional[str]:
        return pulumi.get(self, "server_lifetime")

    @server_lifetime.setter
    def server_lifetime(self, value: Optional[str]):
        pulumi.set(self, "server_lifetime", value)

    @property
    @pulumi.getter(name="serverResetQueryAlways")
    def server_reset_query_always(self) -> Optional[str]:
        return pulumi.get(self, "server_reset_query_always")

    @server_reset_query_always.setter
    def server_reset_query_always(self, value: Optional[str]):
        pulumi.set(self, "server_reset_query_always", value)


@pulumi.input_type
class GetServicePgUserConfigPglookoutArgs:
    def __init__(__self__, *,
                 max_failover_replication_time_lag: Optional[str] = None):
        if max_failover_replication_time_lag is not None:
            pulumi.set(__self__, "max_failover_replication_time_lag", max_failover_replication_time_lag)

    @property
    @pulumi.getter(name="maxFailoverReplicationTimeLag")
    def max_failover_replication_time_lag(self) -> Optional[str]:
        return pulumi.get(self, "max_failover_replication_time_lag")

    @max_failover_replication_time_lag.setter
    def max_failover_replication_time_lag(self, value: Optional[str]):
        pulumi.set(self, "max_failover_replication_time_lag", value)


@pulumi.input_type
class GetServicePgUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServicePgUserConfigPrivatelinkAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)


@pulumi.input_type
class GetServicePgUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServicePgUserConfigTimescaledbArgs:
    def __init__(__self__, *,
                 max_background_workers: Optional[str] = None):
        if max_background_workers is not None:
            pulumi.set(__self__, "max_background_workers", max_background_workers)

    @property
    @pulumi.getter(name="maxBackgroundWorkers")
    def max_background_workers(self) -> Optional[str]:
        return pulumi.get(self, "max_background_workers")

    @max_background_workers.setter
    def max_background_workers(self, value: Optional[str]):
        pulumi.set(self, "max_background_workers", value)


@pulumi.input_type
class GetServiceRedisArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceRedisUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[Sequence[str]] = None,
                 migration: Optional['GetServiceRedisUserConfigMigrationArgs'] = None,
                 private_access: Optional['GetServiceRedisUserConfigPrivateAccessArgs'] = None,
                 project_to_fork_from: Optional[str] = None,
                 public_access: Optional['GetServiceRedisUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 redis_io_threads: Optional[str] = None,
                 redis_lfu_decay_time: Optional[str] = None,
                 redis_lfu_log_factor: Optional[str] = None,
                 redis_maxmemory_policy: Optional[str] = None,
                 redis_notify_keyspace_events: Optional[str] = None,
                 redis_ssl: Optional[str] = None,
                 redis_timeout: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if project_to_fork_from is not None:
            pulumi.set(__self__, "project_to_fork_from", project_to_fork_from)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if redis_io_threads is not None:
            pulumi.set(__self__, "redis_io_threads", redis_io_threads)
        if redis_lfu_decay_time is not None:
            pulumi.set(__self__, "redis_lfu_decay_time", redis_lfu_decay_time)
        if redis_lfu_log_factor is not None:
            pulumi.set(__self__, "redis_lfu_log_factor", redis_lfu_log_factor)
        if redis_maxmemory_policy is not None:
            pulumi.set(__self__, "redis_maxmemory_policy", redis_maxmemory_policy)
        if redis_notify_keyspace_events is not None:
            pulumi.set(__self__, "redis_notify_keyspace_events", redis_notify_keyspace_events)
        if redis_ssl is not None:
            pulumi.set(__self__, "redis_ssl", redis_ssl)
        if redis_timeout is not None:
            pulumi.set(__self__, "redis_timeout", redis_timeout)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional['GetServiceRedisUserConfigMigrationArgs']:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional['GetServiceRedisUserConfigMigrationArgs']):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceRedisUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceRedisUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="projectToForkFrom")
    def project_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "project_to_fork_from")

    @project_to_fork_from.setter
    def project_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "project_to_fork_from", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceRedisUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceRedisUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="redisIoThreads")
    def redis_io_threads(self) -> Optional[str]:
        return pulumi.get(self, "redis_io_threads")

    @redis_io_threads.setter
    def redis_io_threads(self, value: Optional[str]):
        pulumi.set(self, "redis_io_threads", value)

    @property
    @pulumi.getter(name="redisLfuDecayTime")
    def redis_lfu_decay_time(self) -> Optional[str]:
        return pulumi.get(self, "redis_lfu_decay_time")

    @redis_lfu_decay_time.setter
    def redis_lfu_decay_time(self, value: Optional[str]):
        pulumi.set(self, "redis_lfu_decay_time", value)

    @property
    @pulumi.getter(name="redisLfuLogFactor")
    def redis_lfu_log_factor(self) -> Optional[str]:
        return pulumi.get(self, "redis_lfu_log_factor")

    @redis_lfu_log_factor.setter
    def redis_lfu_log_factor(self, value: Optional[str]):
        pulumi.set(self, "redis_lfu_log_factor", value)

    @property
    @pulumi.getter(name="redisMaxmemoryPolicy")
    def redis_maxmemory_policy(self) -> Optional[str]:
        return pulumi.get(self, "redis_maxmemory_policy")

    @redis_maxmemory_policy.setter
    def redis_maxmemory_policy(self, value: Optional[str]):
        pulumi.set(self, "redis_maxmemory_policy", value)

    @property
    @pulumi.getter(name="redisNotifyKeyspaceEvents")
    def redis_notify_keyspace_events(self) -> Optional[str]:
        return pulumi.get(self, "redis_notify_keyspace_events")

    @redis_notify_keyspace_events.setter
    def redis_notify_keyspace_events(self, value: Optional[str]):
        pulumi.set(self, "redis_notify_keyspace_events", value)

    @property
    @pulumi.getter(name="redisSsl")
    def redis_ssl(self) -> Optional[str]:
        return pulumi.get(self, "redis_ssl")

    @redis_ssl.setter
    def redis_ssl(self, value: Optional[str]):
        pulumi.set(self, "redis_ssl", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> Optional[str]:
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: Optional[str]):
        pulumi.set(self, "redis_timeout", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceRedisUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 ssl: Optional[str] = None,
                 username: Optional[str] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[str]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[str]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[str]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetServiceRedisUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None,
                 redis: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[str]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[str]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class GetServiceRedisUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None,
                 redis: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[str]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[str]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class GetServiceServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


