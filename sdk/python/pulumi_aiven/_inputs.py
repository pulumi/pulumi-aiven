# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables

__all__ = [
    'CassandraCassandraArgs',
    'CassandraCassandraUserConfigArgs',
    'CassandraCassandraUserConfigPrivateAccessArgs',
    'CassandraCassandraUserConfigPublicAccessArgs',
    'CassandraComponentArgs',
    'CassandraServiceIntegrationArgs',
    'ElasticSearchAclAclArgs',
    'ElasticSearchAclAclRuleArgs',
    'ElasticSearchComponentArgs',
    'ElasticSearchElasticsearchArgs',
    'ElasticSearchElasticsearchUserConfigArgs',
    'ElasticSearchElasticsearchUserConfigElasticsearchArgs',
    'ElasticSearchElasticsearchUserConfigIndexPatternArgs',
    'ElasticSearchElasticsearchUserConfigKibanaArgs',
    'ElasticSearchElasticsearchUserConfigPrivateAccessArgs',
    'ElasticSearchElasticsearchUserConfigPublicAccessArgs',
    'ElasticSearchServiceIntegrationArgs',
    'GrafanaComponentArgs',
    'GrafanaGrafanaArgs',
    'GrafanaGrafanaUserConfigArgs',
    'GrafanaGrafanaUserConfigAuthGenericOauthArgs',
    'GrafanaGrafanaUserConfigAuthGithubArgs',
    'GrafanaGrafanaUserConfigAuthGitlabArgs',
    'GrafanaGrafanaUserConfigAuthGoogleArgs',
    'GrafanaGrafanaUserConfigExternalImageStorageArgs',
    'GrafanaGrafanaUserConfigPrivateAccessArgs',
    'GrafanaGrafanaUserConfigPublicAccessArgs',
    'GrafanaGrafanaUserConfigSmtpServerArgs',
    'GrafanaServiceIntegrationArgs',
    'InfluxDbComponentArgs',
    'InfluxDbInfluxdbArgs',
    'InfluxDbInfluxdbUserConfigArgs',
    'InfluxDbInfluxdbUserConfigPrivateAccessArgs',
    'InfluxDbInfluxdbUserConfigPublicAccessArgs',
    'InfluxDbServiceIntegrationArgs',
    'KafkaComponentArgs',
    'KafkaConnectComponentArgs',
    'KafkaConnectKafkaConnectArgs',
    'KafkaConnectKafkaConnectUserConfigArgs',
    'KafkaConnectKafkaConnectUserConfigKafkaConnectArgs',
    'KafkaConnectKafkaConnectUserConfigPrivateAccessArgs',
    'KafkaConnectKafkaConnectUserConfigPublicAccessArgs',
    'KafkaConnectServiceIntegrationArgs',
    'KafkaConnectorTaskArgs',
    'KafkaKafkaArgs',
    'KafkaKafkaUserConfigArgs',
    'KafkaKafkaUserConfigKafkaArgs',
    'KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs',
    'KafkaKafkaUserConfigKafkaConnectConfigArgs',
    'KafkaKafkaUserConfigKafkaRestConfigArgs',
    'KafkaKafkaUserConfigPrivateAccessArgs',
    'KafkaKafkaUserConfigPublicAccessArgs',
    'KafkaMirrorMakerComponentArgs',
    'KafkaMirrorMakerKafkaMirrormakerArgs',
    'KafkaMirrorMakerKafkaMirrormakerUserConfigArgs',
    'KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs',
    'KafkaMirrorMakerServiceIntegrationArgs',
    'KafkaServiceIntegrationArgs',
    'MySqlComponentArgs',
    'MySqlMysqlArgs',
    'MySqlMysqlUserConfigArgs',
    'MySqlMysqlUserConfigMysqlArgs',
    'MySqlMysqlUserConfigPrivateAccessArgs',
    'MySqlMysqlUserConfigPublicAccessArgs',
    'MySqlServiceIntegrationArgs',
    'PgComponentArgs',
    'PgPgArgs',
    'PgPgUserConfigArgs',
    'PgPgUserConfigMigrationArgs',
    'PgPgUserConfigPgArgs',
    'PgPgUserConfigPgbouncerArgs',
    'PgPgUserConfigPglookoutArgs',
    'PgPgUserConfigPrivateAccessArgs',
    'PgPgUserConfigPublicAccessArgs',
    'PgPgUserConfigTimescaledbArgs',
    'PgServiceIntegrationArgs',
    'RedisComponentArgs',
    'RedisRedisArgs',
    'RedisRedisUserConfigArgs',
    'RedisRedisUserConfigMigrationArgs',
    'RedisRedisUserConfigPrivateAccessArgs',
    'RedisRedisUserConfigPublicAccessArgs',
    'RedisServiceIntegrationArgs',
    'ServiceCassandraArgs',
    'ServiceCassandraUserConfigArgs',
    'ServiceCassandraUserConfigPrivateAccessArgs',
    'ServiceCassandraUserConfigPublicAccessArgs',
    'ServiceComponentArgs',
    'ServiceElasticsearchArgs',
    'ServiceElasticsearchUserConfigArgs',
    'ServiceElasticsearchUserConfigElasticsearchArgs',
    'ServiceElasticsearchUserConfigIndexPatternArgs',
    'ServiceElasticsearchUserConfigKibanaArgs',
    'ServiceElasticsearchUserConfigPrivateAccessArgs',
    'ServiceElasticsearchUserConfigPublicAccessArgs',
    'ServiceGrafanaArgs',
    'ServiceGrafanaUserConfigArgs',
    'ServiceGrafanaUserConfigAuthGenericOauthArgs',
    'ServiceGrafanaUserConfigAuthGithubArgs',
    'ServiceGrafanaUserConfigAuthGitlabArgs',
    'ServiceGrafanaUserConfigAuthGoogleArgs',
    'ServiceGrafanaUserConfigExternalImageStorageArgs',
    'ServiceGrafanaUserConfigPrivateAccessArgs',
    'ServiceGrafanaUserConfigPublicAccessArgs',
    'ServiceGrafanaUserConfigSmtpServerArgs',
    'ServiceInfluxdbArgs',
    'ServiceInfluxdbUserConfigArgs',
    'ServiceInfluxdbUserConfigPrivateAccessArgs',
    'ServiceInfluxdbUserConfigPublicAccessArgs',
    'ServiceIntegrationEndpointDatadogUserConfigArgs',
    'ServiceIntegrationEndpointExternalElasticsearchLogsUserConfigArgs',
    'ServiceIntegrationEndpointPrometheusUserConfigArgs',
    'ServiceIntegrationEndpointRsyslogUserConfigArgs',
    'ServiceIntegrationKafkaConnectUserConfigArgs',
    'ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs',
    'ServiceIntegrationKafkaMirrormakerUserConfigArgs',
    'ServiceIntegrationLogsUserConfigArgs',
    'ServiceIntegrationMirrormakerUserConfigArgs',
    'ServiceKafkaArgs',
    'ServiceKafkaConnectArgs',
    'ServiceKafkaConnectUserConfigArgs',
    'ServiceKafkaConnectUserConfigKafkaConnectArgs',
    'ServiceKafkaConnectUserConfigPrivateAccessArgs',
    'ServiceKafkaConnectUserConfigPublicAccessArgs',
    'ServiceKafkaMirrormakerArgs',
    'ServiceKafkaMirrormakerUserConfigArgs',
    'ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs',
    'ServiceKafkaUserConfigArgs',
    'ServiceKafkaUserConfigKafkaArgs',
    'ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs',
    'ServiceKafkaUserConfigKafkaConnectConfigArgs',
    'ServiceKafkaUserConfigKafkaRestConfigArgs',
    'ServiceKafkaUserConfigPrivateAccessArgs',
    'ServiceKafkaUserConfigPublicAccessArgs',
    'ServiceMysqlArgs',
    'ServiceMysqlUserConfigArgs',
    'ServiceMysqlUserConfigMysqlArgs',
    'ServiceMysqlUserConfigPrivateAccessArgs',
    'ServiceMysqlUserConfigPublicAccessArgs',
    'ServicePgArgs',
    'ServicePgUserConfigArgs',
    'ServicePgUserConfigMigrationArgs',
    'ServicePgUserConfigPgArgs',
    'ServicePgUserConfigPgbouncerArgs',
    'ServicePgUserConfigPglookoutArgs',
    'ServicePgUserConfigPrivateAccessArgs',
    'ServicePgUserConfigPublicAccessArgs',
    'ServicePgUserConfigTimescaledbArgs',
    'ServiceRedisArgs',
    'ServiceRedisUserConfigArgs',
    'ServiceRedisUserConfigMigrationArgs',
    'ServiceRedisUserConfigPrivateAccessArgs',
    'ServiceRedisUserConfigPublicAccessArgs',
    'ServiceServiceIntegrationArgs',
    'GetCassandaCassandraArgs',
    'GetCassandaCassandraUserConfigArgs',
    'GetCassandaCassandraUserConfigPrivateAccessArgs',
    'GetCassandaCassandraUserConfigPublicAccessArgs',
    'GetCassandaComponentArgs',
    'GetCassandaServiceIntegrationArgs',
    'GetElasticSearchAclAclArgs',
    'GetElasticSearchAclAclRuleArgs',
    'GetElasticSearchComponentArgs',
    'GetElasticSearchElasticsearchArgs',
    'GetElasticSearchElasticsearchUserConfigArgs',
    'GetElasticSearchElasticsearchUserConfigElasticsearchArgs',
    'GetElasticSearchElasticsearchUserConfigIndexPatternArgs',
    'GetElasticSearchElasticsearchUserConfigKibanaArgs',
    'GetElasticSearchElasticsearchUserConfigPrivateAccessArgs',
    'GetElasticSearchElasticsearchUserConfigPublicAccessArgs',
    'GetElasticSearchServiceIntegrationArgs',
    'GetGrafanaComponentArgs',
    'GetGrafanaGrafanaArgs',
    'GetGrafanaGrafanaUserConfigArgs',
    'GetGrafanaGrafanaUserConfigAuthGenericOauthArgs',
    'GetGrafanaGrafanaUserConfigAuthGithubArgs',
    'GetGrafanaGrafanaUserConfigAuthGitlabArgs',
    'GetGrafanaGrafanaUserConfigAuthGoogleArgs',
    'GetGrafanaGrafanaUserConfigExternalImageStorageArgs',
    'GetGrafanaGrafanaUserConfigPrivateAccessArgs',
    'GetGrafanaGrafanaUserConfigPublicAccessArgs',
    'GetGrafanaGrafanaUserConfigSmtpServerArgs',
    'GetGrafanaServiceIntegrationArgs',
    'GetInfluxDbComponentArgs',
    'GetInfluxDbInfluxdbArgs',
    'GetInfluxDbInfluxdbUserConfigArgs',
    'GetInfluxDbInfluxdbUserConfigPrivateAccessArgs',
    'GetInfluxDbInfluxdbUserConfigPublicAccessArgs',
    'GetInfluxDbServiceIntegrationArgs',
    'GetKafkaComponentArgs',
    'GetKafkaConnectComponentArgs',
    'GetKafkaConnectKafkaConnectArgs',
    'GetKafkaConnectKafkaConnectUserConfigArgs',
    'GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs',
    'GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs',
    'GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs',
    'GetKafkaConnectServiceIntegrationArgs',
    'GetKafkaConnectorTaskArgs',
    'GetKafkaKafkaArgs',
    'GetKafkaKafkaUserConfigArgs',
    'GetKafkaKafkaUserConfigKafkaArgs',
    'GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs',
    'GetKafkaKafkaUserConfigKafkaConnectConfigArgs',
    'GetKafkaKafkaUserConfigKafkaRestConfigArgs',
    'GetKafkaKafkaUserConfigPrivateAccessArgs',
    'GetKafkaKafkaUserConfigPublicAccessArgs',
    'GetKafkaMirrorMakerComponentArgs',
    'GetKafkaMirrorMakerKafkaMirrormakerArgs',
    'GetKafkaMirrorMakerKafkaMirrormakerUserConfigArgs',
    'GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs',
    'GetKafkaMirrorMakerServiceIntegrationArgs',
    'GetKafkaServiceIntegrationArgs',
    'GetMySqlComponentArgs',
    'GetMySqlMysqlArgs',
    'GetMySqlMysqlUserConfigArgs',
    'GetMySqlMysqlUserConfigMysqlArgs',
    'GetMySqlMysqlUserConfigPrivateAccessArgs',
    'GetMySqlMysqlUserConfigPublicAccessArgs',
    'GetMySqlServiceIntegrationArgs',
    'GetPgComponentArgs',
    'GetPgPgArgs',
    'GetPgPgUserConfigArgs',
    'GetPgPgUserConfigMigrationArgs',
    'GetPgPgUserConfigPgArgs',
    'GetPgPgUserConfigPgbouncerArgs',
    'GetPgPgUserConfigPglookoutArgs',
    'GetPgPgUserConfigPrivateAccessArgs',
    'GetPgPgUserConfigPublicAccessArgs',
    'GetPgPgUserConfigTimescaledbArgs',
    'GetPgServiceIntegrationArgs',
    'GetRedisComponentArgs',
    'GetRedisRedisArgs',
    'GetRedisRedisUserConfigArgs',
    'GetRedisRedisUserConfigMigrationArgs',
    'GetRedisRedisUserConfigPrivateAccessArgs',
    'GetRedisRedisUserConfigPublicAccessArgs',
    'GetRedisServiceIntegrationArgs',
    'GetServiceCassandraArgs',
    'GetServiceCassandraUserConfigArgs',
    'GetServiceCassandraUserConfigPrivateAccessArgs',
    'GetServiceCassandraUserConfigPublicAccessArgs',
    'GetServiceComponentArgs',
    'GetServiceElasticsearchArgs',
    'GetServiceElasticsearchUserConfigArgs',
    'GetServiceElasticsearchUserConfigElasticsearchArgs',
    'GetServiceElasticsearchUserConfigIndexPatternArgs',
    'GetServiceElasticsearchUserConfigKibanaArgs',
    'GetServiceElasticsearchUserConfigPrivateAccessArgs',
    'GetServiceElasticsearchUserConfigPublicAccessArgs',
    'GetServiceGrafanaArgs',
    'GetServiceGrafanaUserConfigArgs',
    'GetServiceGrafanaUserConfigAuthGenericOauthArgs',
    'GetServiceGrafanaUserConfigAuthGithubArgs',
    'GetServiceGrafanaUserConfigAuthGitlabArgs',
    'GetServiceGrafanaUserConfigAuthGoogleArgs',
    'GetServiceGrafanaUserConfigExternalImageStorageArgs',
    'GetServiceGrafanaUserConfigPrivateAccessArgs',
    'GetServiceGrafanaUserConfigPublicAccessArgs',
    'GetServiceGrafanaUserConfigSmtpServerArgs',
    'GetServiceInfluxdbArgs',
    'GetServiceInfluxdbUserConfigArgs',
    'GetServiceInfluxdbUserConfigPrivateAccessArgs',
    'GetServiceInfluxdbUserConfigPublicAccessArgs',
    'GetServiceIntegrationEndpointDatadogUserConfigArgs',
    'GetServiceIntegrationEndpointExternalElasticsearchLogsUserConfigArgs',
    'GetServiceIntegrationEndpointPrometheusUserConfigArgs',
    'GetServiceIntegrationEndpointRsyslogUserConfigArgs',
    'GetServiceIntegrationKafkaConnectUserConfigArgs',
    'GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs',
    'GetServiceIntegrationKafkaMirrormakerUserConfigArgs',
    'GetServiceIntegrationLogsUserConfigArgs',
    'GetServiceIntegrationMirrormakerUserConfigArgs',
    'GetServiceKafkaArgs',
    'GetServiceKafkaConnectArgs',
    'GetServiceKafkaConnectUserConfigArgs',
    'GetServiceKafkaConnectUserConfigKafkaConnectArgs',
    'GetServiceKafkaConnectUserConfigPrivateAccessArgs',
    'GetServiceKafkaConnectUserConfigPublicAccessArgs',
    'GetServiceKafkaMirrormakerArgs',
    'GetServiceKafkaMirrormakerUserConfigArgs',
    'GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs',
    'GetServiceKafkaUserConfigArgs',
    'GetServiceKafkaUserConfigKafkaArgs',
    'GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs',
    'GetServiceKafkaUserConfigKafkaConnectConfigArgs',
    'GetServiceKafkaUserConfigKafkaRestConfigArgs',
    'GetServiceKafkaUserConfigPrivateAccessArgs',
    'GetServiceKafkaUserConfigPublicAccessArgs',
    'GetServiceMysqlArgs',
    'GetServiceMysqlUserConfigArgs',
    'GetServiceMysqlUserConfigMysqlArgs',
    'GetServiceMysqlUserConfigPrivateAccessArgs',
    'GetServiceMysqlUserConfigPublicAccessArgs',
    'GetServicePgArgs',
    'GetServicePgUserConfigArgs',
    'GetServicePgUserConfigMigrationArgs',
    'GetServicePgUserConfigPgArgs',
    'GetServicePgUserConfigPgbouncerArgs',
    'GetServicePgUserConfigPglookoutArgs',
    'GetServicePgUserConfigPrivateAccessArgs',
    'GetServicePgUserConfigPublicAccessArgs',
    'GetServicePgUserConfigTimescaledbArgs',
    'GetServiceRedisArgs',
    'GetServiceRedisUserConfigArgs',
    'GetServiceRedisUserConfigMigrationArgs',
    'GetServiceRedisUserConfigPrivateAccessArgs',
    'GetServiceRedisUserConfigPublicAccessArgs',
    'GetServiceServiceIntegrationArgs',
]

@pulumi.input_type
class CassandraCassandraArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class CassandraCassandraUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 migrate_sstableloader: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['CassandraCassandraUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['CassandraCassandraUserConfigPublicAccessArgs']] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migrate_sstableloader is not None:
            pulumi.set(__self__, "migrate_sstableloader", migrate_sstableloader)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="migrateSstableloader")
    def migrate_sstableloader(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migrate_sstableloader")

    @migrate_sstableloader.setter
    def migrate_sstableloader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migrate_sstableloader", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['CassandraCassandraUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['CassandraCassandraUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['CassandraCassandraUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['CassandraCassandraUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class CassandraCassandraUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class CassandraCassandraUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class CassandraComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class CassandraServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class ElasticSearchAclAclArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[List[pulumi.Input['ElasticSearchAclAclRuleArgs']]],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[List[pulumi.Input['ElasticSearchAclAclRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[List[pulumi.Input['ElasticSearchAclAclRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ElasticSearchAclAclRuleArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 permission: pulumi.Input[str]):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "permission", permission)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)


@pulumi.input_type
class ElasticSearchComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class ElasticSearchElasticsearchArgs:
    def __init__(__self__, *,
                 kibana_uri: Optional[pulumi.Input[str]] = None):
        if kibana_uri is not None:
            pulumi.set(__self__, "kibana_uri", kibana_uri)

    @property
    @pulumi.getter(name="kibanaUri")
    def kibana_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kibana_uri")

    @kibana_uri.setter
    def kibana_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_uri", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 disable_replication_factor_adjustment: Optional[pulumi.Input[str]] = None,
                 elasticsearch: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigElasticsearchArgs']] = None,
                 elasticsearch_version: Optional[pulumi.Input[str]] = None,
                 index_patterns: Optional[pulumi.Input[List[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexPatternArgs']]]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 kibana: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigKibanaArgs']] = None,
                 max_index_count: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if disable_replication_factor_adjustment is not None:
            pulumi.set(__self__, "disable_replication_factor_adjustment", disable_replication_factor_adjustment)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_version is not None:
            pulumi.set(__self__, "elasticsearch_version", elasticsearch_version)
        if index_patterns is not None:
            pulumi.set(__self__, "index_patterns", index_patterns)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="disableReplicationFactorAdjustment")
    def disable_replication_factor_adjustment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_replication_factor_adjustment")

    @disable_replication_factor_adjustment.setter
    def disable_replication_factor_adjustment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_replication_factor_adjustment", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigElasticsearchArgs']]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigElasticsearchArgs']]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter(name="elasticsearchVersion")
    def elasticsearch_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_version")

    @elasticsearch_version.setter
    def elasticsearch_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_version", value)

    @property
    @pulumi.getter(name="indexPatterns")
    def index_patterns(self) -> Optional[pulumi.Input[List[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexPatternArgs']]]]:
        return pulumi.get(self, "index_patterns")

    @index_patterns.setter
    def index_patterns(self, value: Optional[pulumi.Input[List[pulumi.Input['ElasticSearchElasticsearchUserConfigIndexPatternArgs']]]]):
        pulumi.set(self, "index_patterns", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigKibanaArgs']]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigKibanaArgs']]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ElasticSearchElasticsearchUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigElasticsearchArgs:
    def __init__(__self__, *,
                 action_auto_create_index_enabled: Optional[pulumi.Input[str]] = None,
                 action_destructive_requires_name: Optional[pulumi.Input[str]] = None,
                 http_max_content_length: Optional[pulumi.Input[str]] = None,
                 http_max_header_size: Optional[pulumi.Input[str]] = None,
                 http_max_initial_line_length: Optional[pulumi.Input[str]] = None,
                 indices_fielddata_cache_size: Optional[pulumi.Input[str]] = None,
                 indices_memory_index_buffer_size: Optional[pulumi.Input[str]] = None,
                 indices_queries_cache_size: Optional[pulumi.Input[str]] = None,
                 indices_query_bool_max_clause_count: Optional[pulumi.Input[str]] = None,
                 reindex_remote_whitelists: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 search_max_buckets: Optional[pulumi.Input[str]] = None,
                 thread_pool_analyze_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_analyze_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_force_merge_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_get_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_get_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_index_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_index_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_throttled_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_throttled_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_write_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_write_size: Optional[pulumi.Input[str]] = None):
        if action_auto_create_index_enabled is not None:
            pulumi.set(__self__, "action_auto_create_index_enabled", action_auto_create_index_enabled)
        if action_destructive_requires_name is not None:
            pulumi.set(__self__, "action_destructive_requires_name", action_destructive_requires_name)
        if http_max_content_length is not None:
            pulumi.set(__self__, "http_max_content_length", http_max_content_length)
        if http_max_header_size is not None:
            pulumi.set(__self__, "http_max_header_size", http_max_header_size)
        if http_max_initial_line_length is not None:
            pulumi.set(__self__, "http_max_initial_line_length", http_max_initial_line_length)
        if indices_fielddata_cache_size is not None:
            pulumi.set(__self__, "indices_fielddata_cache_size", indices_fielddata_cache_size)
        if indices_memory_index_buffer_size is not None:
            pulumi.set(__self__, "indices_memory_index_buffer_size", indices_memory_index_buffer_size)
        if indices_queries_cache_size is not None:
            pulumi.set(__self__, "indices_queries_cache_size", indices_queries_cache_size)
        if indices_query_bool_max_clause_count is not None:
            pulumi.set(__self__, "indices_query_bool_max_clause_count", indices_query_bool_max_clause_count)
        if reindex_remote_whitelists is not None:
            pulumi.set(__self__, "reindex_remote_whitelists", reindex_remote_whitelists)
        if search_max_buckets is not None:
            pulumi.set(__self__, "search_max_buckets", search_max_buckets)
        if thread_pool_analyze_queue_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_queue_size", thread_pool_analyze_queue_size)
        if thread_pool_analyze_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_size", thread_pool_analyze_size)
        if thread_pool_force_merge_size is not None:
            pulumi.set(__self__, "thread_pool_force_merge_size", thread_pool_force_merge_size)
        if thread_pool_get_queue_size is not None:
            pulumi.set(__self__, "thread_pool_get_queue_size", thread_pool_get_queue_size)
        if thread_pool_get_size is not None:
            pulumi.set(__self__, "thread_pool_get_size", thread_pool_get_size)
        if thread_pool_index_queue_size is not None:
            pulumi.set(__self__, "thread_pool_index_queue_size", thread_pool_index_queue_size)
        if thread_pool_index_size is not None:
            pulumi.set(__self__, "thread_pool_index_size", thread_pool_index_size)
        if thread_pool_search_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_queue_size", thread_pool_search_queue_size)
        if thread_pool_search_size is not None:
            pulumi.set(__self__, "thread_pool_search_size", thread_pool_search_size)
        if thread_pool_search_throttled_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_queue_size", thread_pool_search_throttled_queue_size)
        if thread_pool_search_throttled_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_size", thread_pool_search_throttled_size)
        if thread_pool_write_queue_size is not None:
            pulumi.set(__self__, "thread_pool_write_queue_size", thread_pool_write_queue_size)
        if thread_pool_write_size is not None:
            pulumi.set(__self__, "thread_pool_write_size", thread_pool_write_size)

    @property
    @pulumi.getter(name="actionAutoCreateIndexEnabled")
    def action_auto_create_index_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_auto_create_index_enabled")

    @action_auto_create_index_enabled.setter
    def action_auto_create_index_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_auto_create_index_enabled", value)

    @property
    @pulumi.getter(name="actionDestructiveRequiresName")
    def action_destructive_requires_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_destructive_requires_name")

    @action_destructive_requires_name.setter
    def action_destructive_requires_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_destructive_requires_name", value)

    @property
    @pulumi.getter(name="httpMaxContentLength")
    def http_max_content_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_max_content_length")

    @http_max_content_length.setter
    def http_max_content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_content_length", value)

    @property
    @pulumi.getter(name="httpMaxHeaderSize")
    def http_max_header_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_max_header_size")

    @http_max_header_size.setter
    def http_max_header_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_header_size", value)

    @property
    @pulumi.getter(name="httpMaxInitialLineLength")
    def http_max_initial_line_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_max_initial_line_length")

    @http_max_initial_line_length.setter
    def http_max_initial_line_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_initial_line_length", value)

    @property
    @pulumi.getter(name="indicesFielddataCacheSize")
    def indices_fielddata_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_fielddata_cache_size")

    @indices_fielddata_cache_size.setter
    def indices_fielddata_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_fielddata_cache_size", value)

    @property
    @pulumi.getter(name="indicesMemoryIndexBufferSize")
    def indices_memory_index_buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_memory_index_buffer_size")

    @indices_memory_index_buffer_size.setter
    def indices_memory_index_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_memory_index_buffer_size", value)

    @property
    @pulumi.getter(name="indicesQueriesCacheSize")
    def indices_queries_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_queries_cache_size")

    @indices_queries_cache_size.setter
    def indices_queries_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_queries_cache_size", value)

    @property
    @pulumi.getter(name="indicesQueryBoolMaxClauseCount")
    def indices_query_bool_max_clause_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_query_bool_max_clause_count")

    @indices_query_bool_max_clause_count.setter
    def indices_query_bool_max_clause_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_query_bool_max_clause_count", value)

    @property
    @pulumi.getter(name="reindexRemoteWhitelists")
    def reindex_remote_whitelists(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "reindex_remote_whitelists")

    @reindex_remote_whitelists.setter
    def reindex_remote_whitelists(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "reindex_remote_whitelists", value)

    @property
    @pulumi.getter(name="searchMaxBuckets")
    def search_max_buckets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_max_buckets")

    @search_max_buckets.setter
    def search_max_buckets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_max_buckets", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeQueueSize")
    def thread_pool_analyze_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_analyze_queue_size")

    @thread_pool_analyze_queue_size.setter
    def thread_pool_analyze_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_analyze_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeSize")
    def thread_pool_analyze_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_analyze_size")

    @thread_pool_analyze_size.setter
    def thread_pool_analyze_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_analyze_size", value)

    @property
    @pulumi.getter(name="threadPoolForceMergeSize")
    def thread_pool_force_merge_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_force_merge_size")

    @thread_pool_force_merge_size.setter
    def thread_pool_force_merge_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_force_merge_size", value)

    @property
    @pulumi.getter(name="threadPoolGetQueueSize")
    def thread_pool_get_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_get_queue_size")

    @thread_pool_get_queue_size.setter
    def thread_pool_get_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_get_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolGetSize")
    def thread_pool_get_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_get_size")

    @thread_pool_get_size.setter
    def thread_pool_get_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_get_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexQueueSize")
    def thread_pool_index_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_index_queue_size")

    @thread_pool_index_queue_size.setter
    def thread_pool_index_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_index_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexSize")
    def thread_pool_index_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_index_size")

    @thread_pool_index_size.setter
    def thread_pool_index_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_index_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchQueueSize")
    def thread_pool_search_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_queue_size")

    @thread_pool_search_queue_size.setter
    def thread_pool_search_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchSize")
    def thread_pool_search_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_size")

    @thread_pool_search_size.setter
    def thread_pool_search_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledQueueSize")
    def thread_pool_search_throttled_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_throttled_queue_size")

    @thread_pool_search_throttled_queue_size.setter
    def thread_pool_search_throttled_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_throttled_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledSize")
    def thread_pool_search_throttled_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_throttled_size")

    @thread_pool_search_throttled_size.setter
    def thread_pool_search_throttled_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_throttled_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteQueueSize")
    def thread_pool_write_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_write_queue_size")

    @thread_pool_write_queue_size.setter
    def thread_pool_write_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_write_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteSize")
    def thread_pool_write_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_write_size")

    @thread_pool_write_size.setter
    def thread_pool_write_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_write_size", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigIndexPatternArgs:
    def __init__(__self__, *,
                 max_index_count: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigKibanaArgs:
    def __init__(__self__, *,
                 elasticsearch_request_timeout: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[str]] = None,
                 max_old_space_size: Optional[pulumi.Input[str]] = None):
        if elasticsearch_request_timeout is not None:
            pulumi.set(__self__, "elasticsearch_request_timeout", elasticsearch_request_timeout)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_old_space_size is not None:
            pulumi.set(__self__, "max_old_space_size", max_old_space_size)

    @property
    @pulumi.getter(name="elasticsearchRequestTimeout")
    def elasticsearch_request_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_request_timeout")

    @elasticsearch_request_timeout.setter
    def elasticsearch_request_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_request_timeout", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxOldSpaceSize")
    def max_old_space_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_old_space_size")

    @max_old_space_size.setter
    def max_old_space_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_old_space_size", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ElasticSearchElasticsearchUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ElasticSearchServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GrafanaComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GrafanaGrafanaArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GrafanaGrafanaUserConfigArgs:
    def __init__(__self__, *,
                 alerting_enabled: Optional[pulumi.Input[str]] = None,
                 alerting_error_or_timeout: Optional[pulumi.Input[str]] = None,
                 alerting_nodata_or_nullvalues: Optional[pulumi.Input[str]] = None,
                 allow_embedding: Optional[pulumi.Input[str]] = None,
                 auth_basic_enabled: Optional[pulumi.Input[str]] = None,
                 auth_generic_oauth: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGenericOauthArgs']] = None,
                 auth_github: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGithubArgs']] = None,
                 auth_gitlab: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGitlabArgs']] = None,
                 auth_google: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGoogleArgs']] = None,
                 cookie_samesite: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 dashboards_versions_to_keep: Optional[pulumi.Input[str]] = None,
                 dataproxy_send_user_header: Optional[pulumi.Input[str]] = None,
                 dataproxy_timeout: Optional[pulumi.Input[str]] = None,
                 disable_gravatar: Optional[pulumi.Input[str]] = None,
                 editors_can_admin: Optional[pulumi.Input[str]] = None,
                 external_image_storage: Optional[pulumi.Input['GrafanaGrafanaUserConfigExternalImageStorageArgs']] = None,
                 google_analytics_ua_id: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 metrics_enabled: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['GrafanaGrafanaUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['GrafanaGrafanaUserConfigPublicAccessArgs']] = None,
                 smtp_server: Optional[pulumi.Input['GrafanaGrafanaUserConfigSmtpServerArgs']] = None,
                 user_auto_assign_org: Optional[pulumi.Input[str]] = None,
                 user_auto_assign_org_role: Optional[pulumi.Input[str]] = None,
                 viewers_can_edit: Optional[pulumi.Input[str]] = None):
        if alerting_enabled is not None:
            pulumi.set(__self__, "alerting_enabled", alerting_enabled)
        if alerting_error_or_timeout is not None:
            pulumi.set(__self__, "alerting_error_or_timeout", alerting_error_or_timeout)
        if alerting_nodata_or_nullvalues is not None:
            pulumi.set(__self__, "alerting_nodata_or_nullvalues", alerting_nodata_or_nullvalues)
        if allow_embedding is not None:
            pulumi.set(__self__, "allow_embedding", allow_embedding)
        if auth_basic_enabled is not None:
            pulumi.set(__self__, "auth_basic_enabled", auth_basic_enabled)
        if auth_generic_oauth is not None:
            pulumi.set(__self__, "auth_generic_oauth", auth_generic_oauth)
        if auth_github is not None:
            pulumi.set(__self__, "auth_github", auth_github)
        if auth_gitlab is not None:
            pulumi.set(__self__, "auth_gitlab", auth_gitlab)
        if auth_google is not None:
            pulumi.set(__self__, "auth_google", auth_google)
        if cookie_samesite is not None:
            pulumi.set(__self__, "cookie_samesite", cookie_samesite)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if dashboards_versions_to_keep is not None:
            pulumi.set(__self__, "dashboards_versions_to_keep", dashboards_versions_to_keep)
        if dataproxy_send_user_header is not None:
            pulumi.set(__self__, "dataproxy_send_user_header", dataproxy_send_user_header)
        if dataproxy_timeout is not None:
            pulumi.set(__self__, "dataproxy_timeout", dataproxy_timeout)
        if disable_gravatar is not None:
            pulumi.set(__self__, "disable_gravatar", disable_gravatar)
        if editors_can_admin is not None:
            pulumi.set(__self__, "editors_can_admin", editors_can_admin)
        if external_image_storage is not None:
            pulumi.set(__self__, "external_image_storage", external_image_storage)
        if google_analytics_ua_id is not None:
            pulumi.set(__self__, "google_analytics_ua_id", google_analytics_ua_id)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if smtp_server is not None:
            pulumi.set(__self__, "smtp_server", smtp_server)
        if user_auto_assign_org is not None:
            pulumi.set(__self__, "user_auto_assign_org", user_auto_assign_org)
        if user_auto_assign_org_role is not None:
            pulumi.set(__self__, "user_auto_assign_org_role", user_auto_assign_org_role)
        if viewers_can_edit is not None:
            pulumi.set(__self__, "viewers_can_edit", viewers_can_edit)

    @property
    @pulumi.getter(name="alertingEnabled")
    def alerting_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alerting_enabled")

    @alerting_enabled.setter
    def alerting_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_enabled", value)

    @property
    @pulumi.getter(name="alertingErrorOrTimeout")
    def alerting_error_or_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alerting_error_or_timeout")

    @alerting_error_or_timeout.setter
    def alerting_error_or_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_error_or_timeout", value)

    @property
    @pulumi.getter(name="alertingNodataOrNullvalues")
    def alerting_nodata_or_nullvalues(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alerting_nodata_or_nullvalues")

    @alerting_nodata_or_nullvalues.setter
    def alerting_nodata_or_nullvalues(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_nodata_or_nullvalues", value)

    @property
    @pulumi.getter(name="allowEmbedding")
    def allow_embedding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_embedding")

    @allow_embedding.setter
    def allow_embedding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_embedding", value)

    @property
    @pulumi.getter(name="authBasicEnabled")
    def auth_basic_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_basic_enabled")

    @auth_basic_enabled.setter
    def auth_basic_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_basic_enabled", value)

    @property
    @pulumi.getter(name="authGenericOauth")
    def auth_generic_oauth(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGenericOauthArgs']]:
        return pulumi.get(self, "auth_generic_oauth")

    @auth_generic_oauth.setter
    def auth_generic_oauth(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGenericOauthArgs']]):
        pulumi.set(self, "auth_generic_oauth", value)

    @property
    @pulumi.getter(name="authGithub")
    def auth_github(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGithubArgs']]:
        return pulumi.get(self, "auth_github")

    @auth_github.setter
    def auth_github(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGithubArgs']]):
        pulumi.set(self, "auth_github", value)

    @property
    @pulumi.getter(name="authGitlab")
    def auth_gitlab(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGitlabArgs']]:
        return pulumi.get(self, "auth_gitlab")

    @auth_gitlab.setter
    def auth_gitlab(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGitlabArgs']]):
        pulumi.set(self, "auth_gitlab", value)

    @property
    @pulumi.getter(name="authGoogle")
    def auth_google(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGoogleArgs']]:
        return pulumi.get(self, "auth_google")

    @auth_google.setter
    def auth_google(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigAuthGoogleArgs']]):
        pulumi.set(self, "auth_google", value)

    @property
    @pulumi.getter(name="cookieSamesite")
    def cookie_samesite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie_samesite")

    @cookie_samesite.setter
    def cookie_samesite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_samesite", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="dashboardsVersionsToKeep")
    def dashboards_versions_to_keep(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dashboards_versions_to_keep")

    @dashboards_versions_to_keep.setter
    def dashboards_versions_to_keep(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboards_versions_to_keep", value)

    @property
    @pulumi.getter(name="dataproxySendUserHeader")
    def dataproxy_send_user_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataproxy_send_user_header")

    @dataproxy_send_user_header.setter
    def dataproxy_send_user_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproxy_send_user_header", value)

    @property
    @pulumi.getter(name="dataproxyTimeout")
    def dataproxy_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataproxy_timeout")

    @dataproxy_timeout.setter
    def dataproxy_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproxy_timeout", value)

    @property
    @pulumi.getter(name="disableGravatar")
    def disable_gravatar(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_gravatar")

    @disable_gravatar.setter
    def disable_gravatar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_gravatar", value)

    @property
    @pulumi.getter(name="editorsCanAdmin")
    def editors_can_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "editors_can_admin")

    @editors_can_admin.setter
    def editors_can_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "editors_can_admin", value)

    @property
    @pulumi.getter(name="externalImageStorage")
    def external_image_storage(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigExternalImageStorageArgs']]:
        return pulumi.get(self, "external_image_storage")

    @external_image_storage.setter
    def external_image_storage(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigExternalImageStorageArgs']]):
        pulumi.set(self, "external_image_storage", value)

    @property
    @pulumi.getter(name="googleAnalyticsUaId")
    def google_analytics_ua_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "google_analytics_ua_id")

    @google_analytics_ua_id.setter
    def google_analytics_ua_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_analytics_ua_id", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="smtpServer")
    def smtp_server(self) -> Optional[pulumi.Input['GrafanaGrafanaUserConfigSmtpServerArgs']]:
        return pulumi.get(self, "smtp_server")

    @smtp_server.setter
    def smtp_server(self, value: Optional[pulumi.Input['GrafanaGrafanaUserConfigSmtpServerArgs']]):
        pulumi.set(self, "smtp_server", value)

    @property
    @pulumi.getter(name="userAutoAssignOrg")
    def user_auto_assign_org(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_auto_assign_org")

    @user_auto_assign_org.setter
    def user_auto_assign_org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_auto_assign_org", value)

    @property
    @pulumi.getter(name="userAutoAssignOrgRole")
    def user_auto_assign_org_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_auto_assign_org_role")

    @user_auto_assign_org_role.setter
    def user_auto_assign_org_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_auto_assign_org_role", value)

    @property
    @pulumi.getter(name="viewersCanEdit")
    def viewers_can_edit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "viewers_can_edit")

    @viewers_can_edit.setter
    def viewers_can_edit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "viewers_can_edit", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigAuthGenericOauthArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_domains: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allowed_organizations: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigAuthGithubArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_organizations: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 team_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if team_ids is not None:
            pulumi.set(__self__, "team_ids", team_ids)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="teamIds")
    def team_ids(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "team_ids")

    @team_ids.setter
    def team_ids(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "team_ids", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigAuthGitlabArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_groups: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_groups is not None:
            pulumi.set(__self__, "allowed_groups", allowed_groups)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedGroups")
    def allowed_groups(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_groups")

    @allowed_groups.setter
    def allowed_groups(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_groups", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigAuthGoogleArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_domains: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigExternalImageStorageArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket_url: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket_url is not None:
            pulumi.set(__self__, "bucket_url", bucket_url)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[pulumi.Input[str]] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[pulumi.Input[str]] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GrafanaGrafanaUserConfigSmtpServerArgs:
    def __init__(__self__, *,
                 from_address: Optional[pulumi.Input[str]] = None,
                 from_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 skip_verify: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if from_address is not None:
            pulumi.set(__self__, "from_address", from_address)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GrafanaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class InfluxDbComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class InfluxDbInfluxdbArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None):
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)


@pulumi.input_type
class InfluxDbInfluxdbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 private_access: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPublicAccessArgs']] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['InfluxDbInfluxdbUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class InfluxDbInfluxdbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[pulumi.Input[str]] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class InfluxDbInfluxdbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[pulumi.Input[str]] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class InfluxDbServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class KafkaComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class KafkaConnectComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class KafkaConnectKafkaConnectArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KafkaConnectKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 kafka_connect: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigKafkaConnectArgs']] = None,
                 private_access: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPublicAccessArgs']] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigKafkaConnectArgs']]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigKafkaConnectArgs']]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['KafkaConnectKafkaConnectUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)


@pulumi.input_type
class KafkaConnectKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[pulumi.Input[str]] = None,
                 consumer_auto_offset_reset: Optional[pulumi.Input[str]] = None,
                 consumer_isolation_level: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_interval_ms: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_records: Optional[pulumi.Input[str]] = None,
                 offset_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 offset_flush_timeout_ms: Optional[pulumi.Input[str]] = None,
                 session_timeout_ms: Optional[pulumi.Input[str]] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class KafkaConnectKafkaConnectUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class KafkaConnectKafkaConnectUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class KafkaConnectServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class KafkaConnectorTaskArgs:
    def __init__(__self__, *,
                 connector: Optional[pulumi.Input[str]] = None,
                 task: Optional[pulumi.Input[float]] = None):
        if connector is not None:
            pulumi.set(__self__, "connector", connector)
        if task is not None:
            pulumi.set(__self__, "task", task)

    @property
    @pulumi.getter
    def connector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector")

    @connector.setter
    def connector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector", value)

    @property
    @pulumi.getter
    def task(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "task")

    @task.setter
    def task(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "task", value)


@pulumi.input_type
class KafkaKafkaArgs:
    def __init__(__self__, *,
                 access_cert: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 connect_uri: Optional[pulumi.Input[str]] = None,
                 rest_uri: Optional[pulumi.Input[str]] = None,
                 schema_registry_uri: Optional[pulumi.Input[str]] = None):
        if access_cert is not None:
            pulumi.set(__self__, "access_cert", access_cert)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if connect_uri is not None:
            pulumi.set(__self__, "connect_uri", connect_uri)
        if rest_uri is not None:
            pulumi.set(__self__, "rest_uri", rest_uri)
        if schema_registry_uri is not None:
            pulumi.set(__self__, "schema_registry_uri", schema_registry_uri)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_cert")

    @access_cert.setter
    def access_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_cert", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="connectUri")
    def connect_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_uri")

    @connect_uri.setter
    def connect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_uri", value)

    @property
    @pulumi.getter(name="restUri")
    def rest_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rest_uri")

    @rest_uri.setter
    def rest_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_uri", value)

    @property
    @pulumi.getter(name="schemaRegistryUri")
    def schema_registry_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry_uri")

    @schema_registry_uri.setter
    def schema_registry_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry_uri", value)


@pulumi.input_type
class KafkaKafkaUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 kafka: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaArgs']] = None,
                 kafka_authentication_methods: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_connect_config: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaConnectConfigArgs']] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 kafka_rest_config: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaRestConfigArgs']] = None,
                 kafka_version: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['KafkaKafkaUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['KafkaKafkaUserConfigPublicAccessArgs']] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_authentication_methods is not None:
            pulumi.set(__self__, "kafka_authentication_methods", kafka_authentication_methods)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_connect_config is not None:
            pulumi.set(__self__, "kafka_connect_config", kafka_connect_config)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if kafka_rest_config is not None:
            pulumi.set(__self__, "kafka_rest_config", kafka_rest_config)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigKafkaArgs']]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethods")
    def kafka_authentication_methods(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']]:
        return pulumi.get(self, "kafka_authentication_methods")

    @kafka_authentication_methods.setter
    def kafka_authentication_methods(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']]):
        pulumi.set(self, "kafka_authentication_methods", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaConnectConfig")
    def kafka_connect_config(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigKafkaConnectConfigArgs']]:
        return pulumi.get(self, "kafka_connect_config")

    @kafka_connect_config.setter
    def kafka_connect_config(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaConnectConfigArgs']]):
        pulumi.set(self, "kafka_connect_config", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="kafkaRestConfig")
    def kafka_rest_config(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigKafkaRestConfigArgs']]:
        return pulumi.get(self, "kafka_rest_config")

    @kafka_rest_config.setter
    def kafka_rest_config(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigKafkaRestConfigArgs']]):
        pulumi.set(self, "kafka_rest_config", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['KafkaKafkaUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['KafkaKafkaUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class KafkaKafkaUserConfigKafkaArgs:
    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[pulumi.Input[str]] = None,
                 compression_type: Optional[pulumi.Input[str]] = None,
                 connections_max_idle_ms: Optional[pulumi.Input[str]] = None,
                 default_replication_factor: Optional[pulumi.Input[str]] = None,
                 group_max_session_timeout_ms: Optional[pulumi.Input[str]] = None,
                 group_min_session_timeout_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_max_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_min_cleanable_ratio: Optional[pulumi.Input[str]] = None,
                 log_cleaner_min_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 log_cleanup_policy: Optional[pulumi.Input[str]] = None,
                 log_message_timestamp_difference_max_ms: Optional[pulumi.Input[str]] = None,
                 log_message_timestamp_type: Optional[pulumi.Input[str]] = None,
                 log_retention_bytes: Optional[pulumi.Input[str]] = None,
                 log_retention_hours: Optional[pulumi.Input[str]] = None,
                 log_segment_bytes: Optional[pulumi.Input[str]] = None,
                 max_connections_per_ip: Optional[pulumi.Input[str]] = None,
                 max_incremental_fetch_session_cache_slots: Optional[pulumi.Input[str]] = None,
                 message_max_bytes: Optional[pulumi.Input[str]] = None,
                 num_partitions: Optional[pulumi.Input[str]] = None,
                 offsets_retention_minutes: Optional[pulumi.Input[str]] = None,
                 producer_purgatory_purge_interval_requests: Optional[pulumi.Input[str]] = None,
                 replica_fetch_max_bytes: Optional[pulumi.Input[str]] = None,
                 replica_fetch_response_max_bytes: Optional[pulumi.Input[str]] = None,
                 socket_request_max_bytes: Optional[pulumi.Input[str]] = None):
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if connections_max_idle_ms is not None:
            pulumi.set(__self__, "connections_max_idle_ms", connections_max_idle_ms)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if group_max_session_timeout_ms is not None:
            pulumi.set(__self__, "group_max_session_timeout_ms", group_max_session_timeout_ms)
        if group_min_session_timeout_ms is not None:
            pulumi.set(__self__, "group_min_session_timeout_ms", group_min_session_timeout_ms)
        if log_cleaner_max_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_max_compaction_lag_ms", log_cleaner_max_compaction_lag_ms)
        if log_cleaner_min_cleanable_ratio is not None:
            pulumi.set(__self__, "log_cleaner_min_cleanable_ratio", log_cleaner_min_cleanable_ratio)
        if log_cleaner_min_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_min_compaction_lag_ms", log_cleaner_min_compaction_lag_ms)
        if log_cleanup_policy is not None:
            pulumi.set(__self__, "log_cleanup_policy", log_cleanup_policy)
        if log_message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "log_message_timestamp_difference_max_ms", log_message_timestamp_difference_max_ms)
        if log_message_timestamp_type is not None:
            pulumi.set(__self__, "log_message_timestamp_type", log_message_timestamp_type)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if max_connections_per_ip is not None:
            pulumi.set(__self__, "max_connections_per_ip", max_connections_per_ip)
        if max_incremental_fetch_session_cache_slots is not None:
            pulumi.set(__self__, "max_incremental_fetch_session_cache_slots", max_incremental_fetch_session_cache_slots)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if producer_purgatory_purge_interval_requests is not None:
            pulumi.set(__self__, "producer_purgatory_purge_interval_requests", producer_purgatory_purge_interval_requests)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if replica_fetch_response_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_response_max_bytes", replica_fetch_response_max_bytes)
        if socket_request_max_bytes is not None:
            pulumi.set(__self__, "socket_request_max_bytes", socket_request_max_bytes)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_create_topics_enable")

    @auto_create_topics_enable.setter
    def auto_create_topics_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_create_topics_enable", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="connectionsMaxIdleMs")
    def connections_max_idle_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connections_max_idle_ms")

    @connections_max_idle_ms.setter
    def connections_max_idle_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connections_max_idle_ms", value)

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_replication_factor")

    @default_replication_factor.setter
    def default_replication_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_replication_factor", value)

    @property
    @pulumi.getter(name="groupMaxSessionTimeoutMs")
    def group_max_session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_max_session_timeout_ms")

    @group_max_session_timeout_ms.setter
    def group_max_session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_max_session_timeout_ms", value)

    @property
    @pulumi.getter(name="groupMinSessionTimeoutMs")
    def group_min_session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_min_session_timeout_ms")

    @group_min_session_timeout_ms.setter
    def group_min_session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_min_session_timeout_ms", value)

    @property
    @pulumi.getter(name="logCleanerMaxCompactionLagMs")
    def log_cleaner_max_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_max_compaction_lag_ms")

    @log_cleaner_max_compaction_lag_ms.setter
    def log_cleaner_max_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanerMinCleanableRatio")
    def log_cleaner_min_cleanable_ratio(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_min_cleanable_ratio")

    @log_cleaner_min_cleanable_ratio.setter
    def log_cleaner_min_cleanable_ratio(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_min_cleanable_ratio", value)

    @property
    @pulumi.getter(name="logCleanerMinCompactionLagMs")
    def log_cleaner_min_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_min_compaction_lag_ms")

    @log_cleaner_min_compaction_lag_ms.setter
    def log_cleaner_min_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanupPolicy")
    def log_cleanup_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleanup_policy")

    @log_cleanup_policy.setter
    def log_cleanup_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleanup_policy", value)

    @property
    @pulumi.getter(name="logMessageTimestampDifferenceMaxMs")
    def log_message_timestamp_difference_max_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_message_timestamp_difference_max_ms")

    @log_message_timestamp_difference_max_ms.setter
    def log_message_timestamp_difference_max_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="logMessageTimestampType")
    def log_message_timestamp_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_message_timestamp_type")

    @log_message_timestamp_type.setter
    def log_message_timestamp_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_timestamp_type", value)

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_retention_bytes")

    @log_retention_bytes.setter
    def log_retention_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_bytes", value)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_retention_hours")

    @log_retention_hours.setter
    def log_retention_hours(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_hours", value)

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_segment_bytes")

    @log_segment_bytes.setter
    def log_segment_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_segment_bytes", value)

    @property
    @pulumi.getter(name="maxConnectionsPerIp")
    def max_connections_per_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_connections_per_ip")

    @max_connections_per_ip.setter
    def max_connections_per_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_connections_per_ip", value)

    @property
    @pulumi.getter(name="maxIncrementalFetchSessionCacheSlots")
    def max_incremental_fetch_session_cache_slots(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_incremental_fetch_session_cache_slots")

    @max_incremental_fetch_session_cache_slots.setter
    def max_incremental_fetch_session_cache_slots(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_incremental_fetch_session_cache_slots", value)

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_max_bytes")

    @message_max_bytes.setter
    def message_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_max_bytes", value)

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_partitions")

    @num_partitions.setter
    def num_partitions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_partitions", value)

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offsets_retention_minutes")

    @offsets_retention_minutes.setter
    def offsets_retention_minutes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offsets_retention_minutes", value)

    @property
    @pulumi.getter(name="producerPurgatoryPurgeIntervalRequests")
    def producer_purgatory_purge_interval_requests(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_purgatory_purge_interval_requests")

    @producer_purgatory_purge_interval_requests.setter
    def producer_purgatory_purge_interval_requests(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_purgatory_purge_interval_requests", value)

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_fetch_max_bytes")

    @replica_fetch_max_bytes.setter
    def replica_fetch_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="replicaFetchResponseMaxBytes")
    def replica_fetch_response_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_fetch_response_max_bytes")

    @replica_fetch_response_max_bytes.setter
    def replica_fetch_response_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_fetch_response_max_bytes", value)

    @property
    @pulumi.getter(name="socketRequestMaxBytes")
    def socket_request_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "socket_request_max_bytes")

    @socket_request_max_bytes.setter
    def socket_request_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socket_request_max_bytes", value)


@pulumi.input_type
class KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 sasl: Optional[pulumi.Input[str]] = None):
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def sasl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sasl")

    @sasl.setter
    def sasl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl", value)


@pulumi.input_type
class KafkaKafkaUserConfigKafkaConnectConfigArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[pulumi.Input[str]] = None,
                 consumer_auto_offset_reset: Optional[pulumi.Input[str]] = None,
                 consumer_isolation_level: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_interval_ms: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_records: Optional[pulumi.Input[str]] = None,
                 offset_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 offset_flush_timeout_ms: Optional[pulumi.Input[str]] = None,
                 session_timeout_ms: Optional[pulumi.Input[str]] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class KafkaKafkaUserConfigKafkaRestConfigArgs:
    def __init__(__self__, *,
                 consumer_enable_auto_commit: Optional[pulumi.Input[str]] = None,
                 consumer_request_max_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_request_timeout_ms: Optional[pulumi.Input[str]] = None,
                 producer_acks: Optional[pulumi.Input[str]] = None,
                 producer_linger_ms: Optional[pulumi.Input[str]] = None,
                 simpleconsumer_pool_size_max: Optional[pulumi.Input[str]] = None):
        if consumer_enable_auto_commit is not None:
            pulumi.set(__self__, "consumer_enable_auto_commit", consumer_enable_auto_commit)
        if consumer_request_max_bytes is not None:
            pulumi.set(__self__, "consumer_request_max_bytes", consumer_request_max_bytes)
        if consumer_request_timeout_ms is not None:
            pulumi.set(__self__, "consumer_request_timeout_ms", consumer_request_timeout_ms)
        if producer_acks is not None:
            pulumi.set(__self__, "producer_acks", producer_acks)
        if producer_linger_ms is not None:
            pulumi.set(__self__, "producer_linger_ms", producer_linger_ms)
        if simpleconsumer_pool_size_max is not None:
            pulumi.set(__self__, "simpleconsumer_pool_size_max", simpleconsumer_pool_size_max)

    @property
    @pulumi.getter(name="consumerEnableAutoCommit")
    def consumer_enable_auto_commit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_enable_auto_commit")

    @consumer_enable_auto_commit.setter
    def consumer_enable_auto_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_enable_auto_commit", value)

    @property
    @pulumi.getter(name="consumerRequestMaxBytes")
    def consumer_request_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_request_max_bytes")

    @consumer_request_max_bytes.setter
    def consumer_request_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_request_max_bytes", value)

    @property
    @pulumi.getter(name="consumerRequestTimeoutMs")
    def consumer_request_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_request_timeout_ms")

    @consumer_request_timeout_ms.setter
    def consumer_request_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_request_timeout_ms", value)

    @property
    @pulumi.getter(name="producerAcks")
    def producer_acks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_acks")

    @producer_acks.setter
    def producer_acks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_acks", value)

    @property
    @pulumi.getter(name="producerLingerMs")
    def producer_linger_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_linger_ms")

    @producer_linger_ms.setter
    def producer_linger_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_linger_ms", value)

    @property
    @pulumi.getter(name="simpleconsumerPoolSizeMax")
    def simpleconsumer_pool_size_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "simpleconsumer_pool_size_max")

    @simpleconsumer_pool_size_max.setter
    def simpleconsumer_pool_size_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simpleconsumer_pool_size_max", value)


@pulumi.input_type
class KafkaKafkaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class KafkaKafkaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[pulumi.Input[str]] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None):
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class KafkaMirrorMakerComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class KafkaMirrorMakerKafkaMirrormakerArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KafkaMirrorMakerKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 kafka_mirrormaker: Optional[pulumi.Input['KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_mirrormaker is not None:
            pulumi.set(__self__, "kafka_mirrormaker", kafka_mirrormaker)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaMirrormaker")
    def kafka_mirrormaker(self) -> Optional[pulumi.Input['KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']]:
        return pulumi.get(self, "kafka_mirrormaker")

    @kafka_mirrormaker.setter
    def kafka_mirrormaker(self, value: Optional[pulumi.Input['KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']]):
        pulumi.set(self, "kafka_mirrormaker", value)


@pulumi.input_type
class KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs:
    def __init__(__self__, *,
                 refresh_groups_enabled: Optional[pulumi.Input[str]] = None,
                 refresh_groups_interval_seconds: Optional[pulumi.Input[str]] = None,
                 refresh_topics_enabled: Optional[pulumi.Input[str]] = None,
                 refresh_topics_interval_seconds: Optional[pulumi.Input[str]] = None):
        if refresh_groups_enabled is not None:
            pulumi.set(__self__, "refresh_groups_enabled", refresh_groups_enabled)
        if refresh_groups_interval_seconds is not None:
            pulumi.set(__self__, "refresh_groups_interval_seconds", refresh_groups_interval_seconds)
        if refresh_topics_enabled is not None:
            pulumi.set(__self__, "refresh_topics_enabled", refresh_topics_enabled)
        if refresh_topics_interval_seconds is not None:
            pulumi.set(__self__, "refresh_topics_interval_seconds", refresh_topics_interval_seconds)

    @property
    @pulumi.getter(name="refreshGroupsEnabled")
    def refresh_groups_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_groups_enabled")

    @refresh_groups_enabled.setter
    def refresh_groups_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_groups_enabled", value)

    @property
    @pulumi.getter(name="refreshGroupsIntervalSeconds")
    def refresh_groups_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_groups_interval_seconds")

    @refresh_groups_interval_seconds.setter
    def refresh_groups_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_groups_interval_seconds", value)

    @property
    @pulumi.getter(name="refreshTopicsEnabled")
    def refresh_topics_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_topics_enabled")

    @refresh_topics_enabled.setter
    def refresh_topics_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_topics_enabled", value)

    @property
    @pulumi.getter(name="refreshTopicsIntervalSeconds")
    def refresh_topics_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_topics_interval_seconds")

    @refresh_topics_interval_seconds.setter
    def refresh_topics_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_topics_interval_seconds", value)


@pulumi.input_type
class KafkaMirrorMakerServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class KafkaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class MySqlComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class MySqlMysqlArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class MySqlMysqlUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 backup_hour: Optional[pulumi.Input[str]] = None,
                 backup_minute: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 mysql: Optional[pulumi.Input['MySqlMysqlUserConfigMysqlArgs']] = None,
                 mysql_version: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['MySqlMysqlUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['MySqlMysqlUserConfigPublicAccessArgs']] = None,
                 recovery_target_time: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if mysql_version is not None:
            pulumi.set(__self__, "mysql_version", mysql_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['MySqlMysqlUserConfigMysqlArgs']]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['MySqlMysqlUserConfigMysqlArgs']]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql_version")

    @mysql_version.setter
    def mysql_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['MySqlMysqlUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['MySqlMysqlUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['MySqlMysqlUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['MySqlMysqlUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class MySqlMysqlUserConfigMysqlArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 default_time_zone: Optional[pulumi.Input[str]] = None,
                 group_concat_max_len: Optional[pulumi.Input[str]] = None,
                 information_schema_stats_expiry: Optional[pulumi.Input[str]] = None,
                 innodb_ft_min_token_size: Optional[pulumi.Input[str]] = None,
                 innodb_ft_server_stopword_table: Optional[pulumi.Input[str]] = None,
                 innodb_lock_wait_timeout: Optional[pulumi.Input[str]] = None,
                 innodb_log_buffer_size: Optional[pulumi.Input[str]] = None,
                 innodb_online_alter_log_max_size: Optional[pulumi.Input[str]] = None,
                 innodb_print_all_deadlocks: Optional[pulumi.Input[str]] = None,
                 innodb_rollback_on_timeout: Optional[pulumi.Input[str]] = None,
                 interactive_timeout: Optional[pulumi.Input[str]] = None,
                 max_allowed_packet: Optional[pulumi.Input[str]] = None,
                 max_heap_table_size: Optional[pulumi.Input[str]] = None,
                 net_read_timeout: Optional[pulumi.Input[str]] = None,
                 net_write_timeout: Optional[pulumi.Input[str]] = None,
                 sort_buffer_size: Optional[pulumi.Input[str]] = None,
                 sql_mode: Optional[pulumi.Input[str]] = None,
                 sql_require_primary_key: Optional[pulumi.Input[str]] = None,
                 tmp_table_size: Optional[pulumi.Input[str]] = None,
                 wait_timeout: Optional[pulumi.Input[str]] = None):
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if group_concat_max_len is not None:
            pulumi.set(__self__, "group_concat_max_len", group_concat_max_len)
        if information_schema_stats_expiry is not None:
            pulumi.set(__self__, "information_schema_stats_expiry", information_schema_stats_expiry)
        if innodb_ft_min_token_size is not None:
            pulumi.set(__self__, "innodb_ft_min_token_size", innodb_ft_min_token_size)
        if innodb_ft_server_stopword_table is not None:
            pulumi.set(__self__, "innodb_ft_server_stopword_table", innodb_ft_server_stopword_table)
        if innodb_lock_wait_timeout is not None:
            pulumi.set(__self__, "innodb_lock_wait_timeout", innodb_lock_wait_timeout)
        if innodb_log_buffer_size is not None:
            pulumi.set(__self__, "innodb_log_buffer_size", innodb_log_buffer_size)
        if innodb_online_alter_log_max_size is not None:
            pulumi.set(__self__, "innodb_online_alter_log_max_size", innodb_online_alter_log_max_size)
        if innodb_print_all_deadlocks is not None:
            pulumi.set(__self__, "innodb_print_all_deadlocks", innodb_print_all_deadlocks)
        if innodb_rollback_on_timeout is not None:
            pulumi.set(__self__, "innodb_rollback_on_timeout", innodb_rollback_on_timeout)
        if interactive_timeout is not None:
            pulumi.set(__self__, "interactive_timeout", interactive_timeout)
        if max_allowed_packet is not None:
            pulumi.set(__self__, "max_allowed_packet", max_allowed_packet)
        if max_heap_table_size is not None:
            pulumi.set(__self__, "max_heap_table_size", max_heap_table_size)
        if net_read_timeout is not None:
            pulumi.set(__self__, "net_read_timeout", net_read_timeout)
        if net_write_timeout is not None:
            pulumi.set(__self__, "net_write_timeout", net_write_timeout)
        if sort_buffer_size is not None:
            pulumi.set(__self__, "sort_buffer_size", sort_buffer_size)
        if sql_mode is not None:
            pulumi.set(__self__, "sql_mode", sql_mode)
        if sql_require_primary_key is not None:
            pulumi.set(__self__, "sql_require_primary_key", sql_require_primary_key)
        if tmp_table_size is not None:
            pulumi.set(__self__, "tmp_table_size", tmp_table_size)
        if wait_timeout is not None:
            pulumi.set(__self__, "wait_timeout", wait_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_time_zone")

    @default_time_zone.setter
    def default_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_time_zone", value)

    @property
    @pulumi.getter(name="groupConcatMaxLen")
    def group_concat_max_len(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_concat_max_len")

    @group_concat_max_len.setter
    def group_concat_max_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_concat_max_len", value)

    @property
    @pulumi.getter(name="informationSchemaStatsExpiry")
    def information_schema_stats_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "information_schema_stats_expiry")

    @information_schema_stats_expiry.setter
    def information_schema_stats_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "information_schema_stats_expiry", value)

    @property
    @pulumi.getter(name="innodbFtMinTokenSize")
    def innodb_ft_min_token_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_ft_min_token_size")

    @innodb_ft_min_token_size.setter
    def innodb_ft_min_token_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_ft_min_token_size", value)

    @property
    @pulumi.getter(name="innodbFtServerStopwordTable")
    def innodb_ft_server_stopword_table(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_ft_server_stopword_table")

    @innodb_ft_server_stopword_table.setter
    def innodb_ft_server_stopword_table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_ft_server_stopword_table", value)

    @property
    @pulumi.getter(name="innodbLockWaitTimeout")
    def innodb_lock_wait_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_lock_wait_timeout")

    @innodb_lock_wait_timeout.setter
    def innodb_lock_wait_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_lock_wait_timeout", value)

    @property
    @pulumi.getter(name="innodbLogBufferSize")
    def innodb_log_buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_log_buffer_size")

    @innodb_log_buffer_size.setter
    def innodb_log_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_log_buffer_size", value)

    @property
    @pulumi.getter(name="innodbOnlineAlterLogMaxSize")
    def innodb_online_alter_log_max_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_online_alter_log_max_size")

    @innodb_online_alter_log_max_size.setter
    def innodb_online_alter_log_max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_online_alter_log_max_size", value)

    @property
    @pulumi.getter(name="innodbPrintAllDeadlocks")
    def innodb_print_all_deadlocks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_print_all_deadlocks")

    @innodb_print_all_deadlocks.setter
    def innodb_print_all_deadlocks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_print_all_deadlocks", value)

    @property
    @pulumi.getter(name="innodbRollbackOnTimeout")
    def innodb_rollback_on_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_rollback_on_timeout")

    @innodb_rollback_on_timeout.setter
    def innodb_rollback_on_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_rollback_on_timeout", value)

    @property
    @pulumi.getter(name="interactiveTimeout")
    def interactive_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interactive_timeout")

    @interactive_timeout.setter
    def interactive_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interactive_timeout", value)

    @property
    @pulumi.getter(name="maxAllowedPacket")
    def max_allowed_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_allowed_packet")

    @max_allowed_packet.setter
    def max_allowed_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_allowed_packet", value)

    @property
    @pulumi.getter(name="maxHeapTableSize")
    def max_heap_table_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_heap_table_size")

    @max_heap_table_size.setter
    def max_heap_table_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_heap_table_size", value)

    @property
    @pulumi.getter(name="netReadTimeout")
    def net_read_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_read_timeout")

    @net_read_timeout.setter
    def net_read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_read_timeout", value)

    @property
    @pulumi.getter(name="netWriteTimeout")
    def net_write_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_write_timeout")

    @net_write_timeout.setter
    def net_write_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_write_timeout", value)

    @property
    @pulumi.getter(name="sortBufferSize")
    def sort_buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort_buffer_size")

    @sort_buffer_size.setter
    def sort_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_buffer_size", value)

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sql_mode")

    @sql_mode.setter
    def sql_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_mode", value)

    @property
    @pulumi.getter(name="sqlRequirePrimaryKey")
    def sql_require_primary_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sql_require_primary_key")

    @sql_require_primary_key.setter
    def sql_require_primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_require_primary_key", value)

    @property
    @pulumi.getter(name="tmpTableSize")
    def tmp_table_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tmp_table_size")

    @tmp_table_size.setter
    def tmp_table_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmp_table_size", value)

    @property
    @pulumi.getter(name="waitTimeout")
    def wait_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wait_timeout")

    @wait_timeout.setter
    def wait_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wait_timeout", value)


@pulumi.input_type
class MySqlMysqlUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class MySqlMysqlUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class MySqlServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class PgComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class PgPgArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 replica_uri: Optional[pulumi.Input[str]] = None,
                 sslmode: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if replica_uri is not None:
            pulumi.set(__self__, "replica_uri", replica_uri)
        if sslmode is not None:
            pulumi.set(__self__, "sslmode", sslmode)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicaUri")
    def replica_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_uri")

    @replica_uri.setter
    def replica_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_uri", value)

    @property
    @pulumi.getter
    def sslmode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslmode")

    @sslmode.setter
    def sslmode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslmode", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class PgPgUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 backup_hour: Optional[pulumi.Input[str]] = None,
                 backup_minute: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 migration: Optional[pulumi.Input['PgPgUserConfigMigrationArgs']] = None,
                 pg: Optional[pulumi.Input['PgPgUserConfigPgArgs']] = None,
                 pg_read_replica: Optional[pulumi.Input[str]] = None,
                 pg_service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 pg_version: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input['PgPgUserConfigPgbouncerArgs']] = None,
                 pglookout: Optional[pulumi.Input['PgPgUserConfigPglookoutArgs']] = None,
                 private_access: Optional[pulumi.Input['PgPgUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['PgPgUserConfigPublicAccessArgs']] = None,
                 recovery_target_time: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 shared_buffers_percentage: Optional[pulumi.Input[str]] = None,
                 synchronous_replication: Optional[pulumi.Input[str]] = None,
                 timescaledb: Optional[pulumi.Input['PgPgUserConfigTimescaledbArgs']] = None,
                 variant: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pg_read_replica is not None:
            pulumi.set(__self__, "pg_read_replica", pg_read_replica)
        if pg_service_to_fork_from is not None:
            pulumi.set(__self__, "pg_service_to_fork_from", pg_service_to_fork_from)
        if pg_version is not None:
            pulumi.set(__self__, "pg_version", pg_version)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if pglookout is not None:
            pulumi.set(__self__, "pglookout", pglookout)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if shared_buffers_percentage is not None:
            pulumi.set(__self__, "shared_buffers_percentage", shared_buffers_percentage)
        if synchronous_replication is not None:
            pulumi.set(__self__, "synchronous_replication", synchronous_replication)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional[pulumi.Input['PgPgUserConfigMigrationArgs']]:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional[pulumi.Input['PgPgUserConfigMigrationArgs']]):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input['PgPgUserConfigPgArgs']]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input['PgPgUserConfigPgArgs']]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter(name="pgReadReplica")
    def pg_read_replica(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_read_replica")

    @pg_read_replica.setter
    def pg_read_replica(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_read_replica", value)

    @property
    @pulumi.getter(name="pgServiceToForkFrom")
    def pg_service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_service_to_fork_from")

    @pg_service_to_fork_from.setter
    def pg_service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_service_to_fork_from", value)

    @property
    @pulumi.getter(name="pgVersion")
    def pg_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_version")

    @pg_version.setter
    def pg_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_version", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input['PgPgUserConfigPgbouncerArgs']]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input['PgPgUserConfigPgbouncerArgs']]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def pglookout(self) -> Optional[pulumi.Input['PgPgUserConfigPglookoutArgs']]:
        return pulumi.get(self, "pglookout")

    @pglookout.setter
    def pglookout(self, value: Optional[pulumi.Input['PgPgUserConfigPglookoutArgs']]):
        pulumi.set(self, "pglookout", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['PgPgUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['PgPgUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['PgPgUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['PgPgUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="sharedBuffersPercentage")
    def shared_buffers_percentage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_buffers_percentage")

    @shared_buffers_percentage.setter
    def shared_buffers_percentage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers_percentage", value)

    @property
    @pulumi.getter(name="synchronousReplication")
    def synchronous_replication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "synchronous_replication")

    @synchronous_replication.setter
    def synchronous_replication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronous_replication", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional[pulumi.Input['PgPgUserConfigTimescaledbArgs']]:
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional[pulumi.Input['PgPgUserConfigTimescaledbArgs']]):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


@pulumi.input_type
class PgPgUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class PgPgUserConfigPgArgs:
    def __init__(__self__, *,
                 autovacuum_analyze_scale_factor: Optional[pulumi.Input[str]] = None,
                 autovacuum_analyze_threshold: Optional[pulumi.Input[str]] = None,
                 autovacuum_freeze_max_age: Optional[pulumi.Input[str]] = None,
                 autovacuum_max_workers: Optional[pulumi.Input[str]] = None,
                 autovacuum_naptime: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_cost_delay: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_cost_limit: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_scale_factor: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_threshold: Optional[pulumi.Input[str]] = None,
                 deadlock_timeout: Optional[pulumi.Input[str]] = None,
                 idle_in_transaction_session_timeout: Optional[pulumi.Input[str]] = None,
                 jit: Optional[pulumi.Input[str]] = None,
                 log_autovacuum_min_duration: Optional[pulumi.Input[str]] = None,
                 log_error_verbosity: Optional[pulumi.Input[str]] = None,
                 log_min_duration_statement: Optional[pulumi.Input[str]] = None,
                 max_locks_per_transaction: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_pred_locks_per_transaction: Optional[pulumi.Input[str]] = None,
                 max_prepared_transactions: Optional[pulumi.Input[str]] = None,
                 max_stack_depth: Optional[pulumi.Input[str]] = None,
                 max_standby_archive_delay: Optional[pulumi.Input[str]] = None,
                 max_standby_streaming_delay: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 pg_partman_bgw_dot_interval: Optional[pulumi.Input[str]] = None,
                 pg_partman_bgw_dot_role: Optional[pulumi.Input[str]] = None,
                 pg_stat_statements_dot_track: Optional[pulumi.Input[str]] = None,
                 temp_file_limit: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 track_activity_query_size: Optional[pulumi.Input[str]] = None,
                 track_commit_timestamp: Optional[pulumi.Input[str]] = None,
                 track_functions: Optional[pulumi.Input[str]] = None,
                 wal_sender_timeout: Optional[pulumi.Input[str]] = None,
                 wal_writer_delay: Optional[pulumi.Input[str]] = None):
        if autovacuum_analyze_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_analyze_scale_factor", autovacuum_analyze_scale_factor)
        if autovacuum_analyze_threshold is not None:
            pulumi.set(__self__, "autovacuum_analyze_threshold", autovacuum_analyze_threshold)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_naptime is not None:
            pulumi.set(__self__, "autovacuum_naptime", autovacuum_naptime)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_cost_limit is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_limit", autovacuum_vacuum_cost_limit)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if deadlock_timeout is not None:
            pulumi.set(__self__, "deadlock_timeout", deadlock_timeout)
        if idle_in_transaction_session_timeout is not None:
            pulumi.set(__self__, "idle_in_transaction_session_timeout", idle_in_transaction_session_timeout)
        if jit is not None:
            pulumi.set(__self__, "jit", jit)
        if log_autovacuum_min_duration is not None:
            pulumi.set(__self__, "log_autovacuum_min_duration", log_autovacuum_min_duration)
        if log_error_verbosity is not None:
            pulumi.set(__self__, "log_error_verbosity", log_error_verbosity)
        if log_min_duration_statement is not None:
            pulumi.set(__self__, "log_min_duration_statement", log_min_duration_statement)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_parallel_workers is not None:
            pulumi.set(__self__, "max_parallel_workers", max_parallel_workers)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_pred_locks_per_transaction is not None:
            pulumi.set(__self__, "max_pred_locks_per_transaction", max_pred_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_stack_depth is not None:
            pulumi.set(__self__, "max_stack_depth", max_stack_depth)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if pg_partman_bgw_dot_interval is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_interval", pg_partman_bgw_dot_interval)
        if pg_partman_bgw_dot_role is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_role", pg_partman_bgw_dot_role)
        if pg_stat_statements_dot_track is not None:
            pulumi.set(__self__, "pg_stat_statements_dot_track", pg_stat_statements_dot_track)
        if temp_file_limit is not None:
            pulumi.set(__self__, "temp_file_limit", temp_file_limit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if track_activity_query_size is not None:
            pulumi.set(__self__, "track_activity_query_size", track_activity_query_size)
        if track_commit_timestamp is not None:
            pulumi.set(__self__, "track_commit_timestamp", track_commit_timestamp)
        if track_functions is not None:
            pulumi.set(__self__, "track_functions", track_functions)
        if wal_sender_timeout is not None:
            pulumi.set(__self__, "wal_sender_timeout", wal_sender_timeout)
        if wal_writer_delay is not None:
            pulumi.set(__self__, "wal_writer_delay", wal_writer_delay)

    @property
    @pulumi.getter(name="autovacuumAnalyzeScaleFactor")
    def autovacuum_analyze_scale_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_analyze_scale_factor")

    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_analyze_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumAnalyzeThreshold")
    def autovacuum_analyze_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_analyze_threshold")

    @autovacuum_analyze_threshold.setter
    def autovacuum_analyze_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_analyze_threshold", value)

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @autovacuum_freeze_max_age.setter
    def autovacuum_freeze_max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_freeze_max_age", value)

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_max_workers")

    @autovacuum_max_workers.setter
    def autovacuum_max_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_max_workers", value)

    @property
    @pulumi.getter(name="autovacuumNaptime")
    def autovacuum_naptime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_naptime")

    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_naptime", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_cost_delay", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostLimit")
    def autovacuum_vacuum_cost_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_cost_limit")

    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_cost_limit", value)

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @autovacuum_vacuum_threshold.setter
    def autovacuum_vacuum_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_threshold", value)

    @property
    @pulumi.getter(name="deadlockTimeout")
    def deadlock_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deadlock_timeout")

    @deadlock_timeout.setter
    def deadlock_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deadlock_timeout", value)

    @property
    @pulumi.getter(name="idleInTransactionSessionTimeout")
    def idle_in_transaction_session_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idle_in_transaction_session_timeout")

    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_in_transaction_session_timeout", value)

    @property
    @pulumi.getter
    def jit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jit")

    @jit.setter
    def jit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit", value)

    @property
    @pulumi.getter(name="logAutovacuumMinDuration")
    def log_autovacuum_min_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_autovacuum_min_duration")

    @log_autovacuum_min_duration.setter
    def log_autovacuum_min_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_autovacuum_min_duration", value)

    @property
    @pulumi.getter(name="logErrorVerbosity")
    def log_error_verbosity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_error_verbosity")

    @log_error_verbosity.setter
    def log_error_verbosity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_error_verbosity", value)

    @property
    @pulumi.getter(name="logMinDurationStatement")
    def log_min_duration_statement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_min_duration_statement")

    @log_min_duration_statement.setter
    def log_min_duration_statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_min_duration_statement", value)

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_locks_per_transaction")

    @max_locks_per_transaction.setter
    def max_locks_per_transaction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxParallelWorkers")
    def max_parallel_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers")

    @max_parallel_workers.setter
    def max_parallel_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxPredLocksPerTransaction")
    def max_pred_locks_per_transaction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_pred_locks_per_transaction")

    @max_pred_locks_per_transaction.setter
    def max_pred_locks_per_transaction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_pred_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_prepared_transactions")

    @max_prepared_transactions.setter
    def max_prepared_transactions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_prepared_transactions", value)

    @property
    @pulumi.getter(name="maxStackDepth")
    def max_stack_depth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_stack_depth")

    @max_stack_depth.setter
    def max_stack_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_stack_depth", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotInterval")
    def pg_partman_bgw_dot_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_partman_bgw_dot_interval")

    @pg_partman_bgw_dot_interval.setter
    def pg_partman_bgw_dot_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_partman_bgw_dot_interval", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotRole")
    def pg_partman_bgw_dot_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_partman_bgw_dot_role")

    @pg_partman_bgw_dot_role.setter
    def pg_partman_bgw_dot_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_partman_bgw_dot_role", value)

    @property
    @pulumi.getter(name="pgStatStatementsDotTrack")
    def pg_stat_statements_dot_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_stat_statements_dot_track")

    @pg_stat_statements_dot_track.setter
    def pg_stat_statements_dot_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_stat_statements_dot_track", value)

    @property
    @pulumi.getter(name="tempFileLimit")
    def temp_file_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "temp_file_limit")

    @temp_file_limit.setter
    def temp_file_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temp_file_limit", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="trackActivityQuerySize")
    def track_activity_query_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "track_activity_query_size")

    @track_activity_query_size.setter
    def track_activity_query_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_activity_query_size", value)

    @property
    @pulumi.getter(name="trackCommitTimestamp")
    def track_commit_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "track_commit_timestamp")

    @track_commit_timestamp.setter
    def track_commit_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_commit_timestamp", value)

    @property
    @pulumi.getter(name="trackFunctions")
    def track_functions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "track_functions")

    @track_functions.setter
    def track_functions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_functions", value)

    @property
    @pulumi.getter(name="walSenderTimeout")
    def wal_sender_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wal_sender_timeout")

    @wal_sender_timeout.setter
    def wal_sender_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_sender_timeout", value)

    @property
    @pulumi.getter(name="walWriterDelay")
    def wal_writer_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wal_writer_delay")

    @wal_writer_delay.setter
    def wal_writer_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_writer_delay", value)


@pulumi.input_type
class PgPgUserConfigPgbouncerArgs:
    def __init__(__self__, *,
                 ignore_startup_parameters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 server_reset_query_always: Optional[pulumi.Input[str]] = None):
        if ignore_startup_parameters is not None:
            pulumi.set(__self__, "ignore_startup_parameters", ignore_startup_parameters)
        if server_reset_query_always is not None:
            pulumi.set(__self__, "server_reset_query_always", server_reset_query_always)

    @property
    @pulumi.getter(name="ignoreStartupParameters")
    def ignore_startup_parameters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore_startup_parameters")

    @ignore_startup_parameters.setter
    def ignore_startup_parameters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore_startup_parameters", value)

    @property
    @pulumi.getter(name="serverResetQueryAlways")
    def server_reset_query_always(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_reset_query_always")

    @server_reset_query_always.setter
    def server_reset_query_always(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_reset_query_always", value)


@pulumi.input_type
class PgPgUserConfigPglookoutArgs:
    def __init__(__self__, *,
                 max_failover_replication_time_lag: Optional[pulumi.Input[str]] = None):
        if max_failover_replication_time_lag is not None:
            pulumi.set(__self__, "max_failover_replication_time_lag", max_failover_replication_time_lag)

    @property
    @pulumi.getter(name="maxFailoverReplicationTimeLag")
    def max_failover_replication_time_lag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_failover_replication_time_lag")

    @max_failover_replication_time_lag.setter
    def max_failover_replication_time_lag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_failover_replication_time_lag", value)


@pulumi.input_type
class PgPgUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class PgPgUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class PgPgUserConfigTimescaledbArgs:
    def __init__(__self__, *,
                 max_background_workers: Optional[pulumi.Input[str]] = None):
        if max_background_workers is not None:
            pulumi.set(__self__, "max_background_workers", max_background_workers)

    @property
    @pulumi.getter(name="maxBackgroundWorkers")
    def max_background_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_background_workers")

    @max_background_workers.setter
    def max_background_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_background_workers", value)


@pulumi.input_type
class PgServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class RedisComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class RedisRedisArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class RedisRedisUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 migration: Optional[pulumi.Input['RedisRedisUserConfigMigrationArgs']] = None,
                 private_access: Optional[pulumi.Input['RedisRedisUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['RedisRedisUserConfigPublicAccessArgs']] = None,
                 redis_lfu_decay_time: Optional[pulumi.Input[str]] = None,
                 redis_lfu_log_factor: Optional[pulumi.Input[str]] = None,
                 redis_maxmemory_policy: Optional[pulumi.Input[str]] = None,
                 redis_notify_keyspace_events: Optional[pulumi.Input[str]] = None,
                 redis_ssl: Optional[pulumi.Input[str]] = None,
                 redis_timeout: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if redis_lfu_decay_time is not None:
            pulumi.set(__self__, "redis_lfu_decay_time", redis_lfu_decay_time)
        if redis_lfu_log_factor is not None:
            pulumi.set(__self__, "redis_lfu_log_factor", redis_lfu_log_factor)
        if redis_maxmemory_policy is not None:
            pulumi.set(__self__, "redis_maxmemory_policy", redis_maxmemory_policy)
        if redis_notify_keyspace_events is not None:
            pulumi.set(__self__, "redis_notify_keyspace_events", redis_notify_keyspace_events)
        if redis_ssl is not None:
            pulumi.set(__self__, "redis_ssl", redis_ssl)
        if redis_timeout is not None:
            pulumi.set(__self__, "redis_timeout", redis_timeout)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional[pulumi.Input['RedisRedisUserConfigMigrationArgs']]:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional[pulumi.Input['RedisRedisUserConfigMigrationArgs']]):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['RedisRedisUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['RedisRedisUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['RedisRedisUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['RedisRedisUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="redisLfuDecayTime")
    def redis_lfu_decay_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_lfu_decay_time")

    @redis_lfu_decay_time.setter
    def redis_lfu_decay_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_lfu_decay_time", value)

    @property
    @pulumi.getter(name="redisLfuLogFactor")
    def redis_lfu_log_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_lfu_log_factor")

    @redis_lfu_log_factor.setter
    def redis_lfu_log_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_lfu_log_factor", value)

    @property
    @pulumi.getter(name="redisMaxmemoryPolicy")
    def redis_maxmemory_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_maxmemory_policy")

    @redis_maxmemory_policy.setter
    def redis_maxmemory_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_maxmemory_policy", value)

    @property
    @pulumi.getter(name="redisNotifyKeyspaceEvents")
    def redis_notify_keyspace_events(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_notify_keyspace_events")

    @redis_notify_keyspace_events.setter
    def redis_notify_keyspace_events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_notify_keyspace_events", value)

    @property
    @pulumi.getter(name="redisSsl")
    def redis_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_ssl")

    @redis_ssl.setter
    def redis_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_ssl", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_timeout", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class RedisRedisUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class RedisRedisUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class RedisRedisUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class RedisServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class ServiceCassandraArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceCassandraUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 migrate_sstableloader: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceCassandraUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceCassandraUserConfigPublicAccessArgs']] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migrate_sstableloader is not None:
            pulumi.set(__self__, "migrate_sstableloader", migrate_sstableloader)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="migrateSstableloader")
    def migrate_sstableloader(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migrate_sstableloader")

    @migrate_sstableloader.setter
    def migrate_sstableloader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migrate_sstableloader", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceCassandraUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceCassandraUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceCassandraUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceCassandraUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceCassandraUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceCassandraUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceComponentArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 kafka_authentication_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        if component is not None:
            pulumi.set(__self__, "component", component)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_authentication_method is not None:
            pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class ServiceElasticsearchArgs:
    def __init__(__self__, *,
                 kibana_uri: Optional[pulumi.Input[str]] = None):
        if kibana_uri is not None:
            pulumi.set(__self__, "kibana_uri", kibana_uri)

    @property
    @pulumi.getter(name="kibanaUri")
    def kibana_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kibana_uri")

    @kibana_uri.setter
    def kibana_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_uri", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 disable_replication_factor_adjustment: Optional[pulumi.Input[str]] = None,
                 elasticsearch: Optional[pulumi.Input['ServiceElasticsearchUserConfigElasticsearchArgs']] = None,
                 elasticsearch_version: Optional[pulumi.Input[str]] = None,
                 index_patterns: Optional[pulumi.Input[List[pulumi.Input['ServiceElasticsearchUserConfigIndexPatternArgs']]]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 kibana: Optional[pulumi.Input['ServiceElasticsearchUserConfigKibanaArgs']] = None,
                 max_index_count: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceElasticsearchUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceElasticsearchUserConfigPublicAccessArgs']] = None,
                 recovery_basebackup_name: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if disable_replication_factor_adjustment is not None:
            pulumi.set(__self__, "disable_replication_factor_adjustment", disable_replication_factor_adjustment)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_version is not None:
            pulumi.set(__self__, "elasticsearch_version", elasticsearch_version)
        if index_patterns is not None:
            pulumi.set(__self__, "index_patterns", index_patterns)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="disableReplicationFactorAdjustment")
    def disable_replication_factor_adjustment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_replication_factor_adjustment")

    @disable_replication_factor_adjustment.setter
    def disable_replication_factor_adjustment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_replication_factor_adjustment", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['ServiceElasticsearchUserConfigElasticsearchArgs']]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['ServiceElasticsearchUserConfigElasticsearchArgs']]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter(name="elasticsearchVersion")
    def elasticsearch_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_version")

    @elasticsearch_version.setter
    def elasticsearch_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_version", value)

    @property
    @pulumi.getter(name="indexPatterns")
    def index_patterns(self) -> Optional[pulumi.Input[List[pulumi.Input['ServiceElasticsearchUserConfigIndexPatternArgs']]]]:
        return pulumi.get(self, "index_patterns")

    @index_patterns.setter
    def index_patterns(self, value: Optional[pulumi.Input[List[pulumi.Input['ServiceElasticsearchUserConfigIndexPatternArgs']]]]):
        pulumi.set(self, "index_patterns", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input['ServiceElasticsearchUserConfigKibanaArgs']]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input['ServiceElasticsearchUserConfigKibanaArgs']]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceElasticsearchUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceElasticsearchUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceElasticsearchUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceElasticsearchUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigElasticsearchArgs:
    def __init__(__self__, *,
                 action_auto_create_index_enabled: Optional[pulumi.Input[str]] = None,
                 action_destructive_requires_name: Optional[pulumi.Input[str]] = None,
                 http_max_content_length: Optional[pulumi.Input[str]] = None,
                 http_max_header_size: Optional[pulumi.Input[str]] = None,
                 http_max_initial_line_length: Optional[pulumi.Input[str]] = None,
                 indices_fielddata_cache_size: Optional[pulumi.Input[str]] = None,
                 indices_memory_index_buffer_size: Optional[pulumi.Input[str]] = None,
                 indices_queries_cache_size: Optional[pulumi.Input[str]] = None,
                 indices_query_bool_max_clause_count: Optional[pulumi.Input[str]] = None,
                 reindex_remote_whitelists: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 search_max_buckets: Optional[pulumi.Input[str]] = None,
                 thread_pool_analyze_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_analyze_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_force_merge_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_get_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_get_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_index_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_index_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_throttled_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_search_throttled_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_write_queue_size: Optional[pulumi.Input[str]] = None,
                 thread_pool_write_size: Optional[pulumi.Input[str]] = None):
        if action_auto_create_index_enabled is not None:
            pulumi.set(__self__, "action_auto_create_index_enabled", action_auto_create_index_enabled)
        if action_destructive_requires_name is not None:
            pulumi.set(__self__, "action_destructive_requires_name", action_destructive_requires_name)
        if http_max_content_length is not None:
            pulumi.set(__self__, "http_max_content_length", http_max_content_length)
        if http_max_header_size is not None:
            pulumi.set(__self__, "http_max_header_size", http_max_header_size)
        if http_max_initial_line_length is not None:
            pulumi.set(__self__, "http_max_initial_line_length", http_max_initial_line_length)
        if indices_fielddata_cache_size is not None:
            pulumi.set(__self__, "indices_fielddata_cache_size", indices_fielddata_cache_size)
        if indices_memory_index_buffer_size is not None:
            pulumi.set(__self__, "indices_memory_index_buffer_size", indices_memory_index_buffer_size)
        if indices_queries_cache_size is not None:
            pulumi.set(__self__, "indices_queries_cache_size", indices_queries_cache_size)
        if indices_query_bool_max_clause_count is not None:
            pulumi.set(__self__, "indices_query_bool_max_clause_count", indices_query_bool_max_clause_count)
        if reindex_remote_whitelists is not None:
            pulumi.set(__self__, "reindex_remote_whitelists", reindex_remote_whitelists)
        if search_max_buckets is not None:
            pulumi.set(__self__, "search_max_buckets", search_max_buckets)
        if thread_pool_analyze_queue_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_queue_size", thread_pool_analyze_queue_size)
        if thread_pool_analyze_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_size", thread_pool_analyze_size)
        if thread_pool_force_merge_size is not None:
            pulumi.set(__self__, "thread_pool_force_merge_size", thread_pool_force_merge_size)
        if thread_pool_get_queue_size is not None:
            pulumi.set(__self__, "thread_pool_get_queue_size", thread_pool_get_queue_size)
        if thread_pool_get_size is not None:
            pulumi.set(__self__, "thread_pool_get_size", thread_pool_get_size)
        if thread_pool_index_queue_size is not None:
            pulumi.set(__self__, "thread_pool_index_queue_size", thread_pool_index_queue_size)
        if thread_pool_index_size is not None:
            pulumi.set(__self__, "thread_pool_index_size", thread_pool_index_size)
        if thread_pool_search_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_queue_size", thread_pool_search_queue_size)
        if thread_pool_search_size is not None:
            pulumi.set(__self__, "thread_pool_search_size", thread_pool_search_size)
        if thread_pool_search_throttled_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_queue_size", thread_pool_search_throttled_queue_size)
        if thread_pool_search_throttled_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_size", thread_pool_search_throttled_size)
        if thread_pool_write_queue_size is not None:
            pulumi.set(__self__, "thread_pool_write_queue_size", thread_pool_write_queue_size)
        if thread_pool_write_size is not None:
            pulumi.set(__self__, "thread_pool_write_size", thread_pool_write_size)

    @property
    @pulumi.getter(name="actionAutoCreateIndexEnabled")
    def action_auto_create_index_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_auto_create_index_enabled")

    @action_auto_create_index_enabled.setter
    def action_auto_create_index_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_auto_create_index_enabled", value)

    @property
    @pulumi.getter(name="actionDestructiveRequiresName")
    def action_destructive_requires_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_destructive_requires_name")

    @action_destructive_requires_name.setter
    def action_destructive_requires_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_destructive_requires_name", value)

    @property
    @pulumi.getter(name="httpMaxContentLength")
    def http_max_content_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_max_content_length")

    @http_max_content_length.setter
    def http_max_content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_content_length", value)

    @property
    @pulumi.getter(name="httpMaxHeaderSize")
    def http_max_header_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_max_header_size")

    @http_max_header_size.setter
    def http_max_header_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_header_size", value)

    @property
    @pulumi.getter(name="httpMaxInitialLineLength")
    def http_max_initial_line_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_max_initial_line_length")

    @http_max_initial_line_length.setter
    def http_max_initial_line_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_max_initial_line_length", value)

    @property
    @pulumi.getter(name="indicesFielddataCacheSize")
    def indices_fielddata_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_fielddata_cache_size")

    @indices_fielddata_cache_size.setter
    def indices_fielddata_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_fielddata_cache_size", value)

    @property
    @pulumi.getter(name="indicesMemoryIndexBufferSize")
    def indices_memory_index_buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_memory_index_buffer_size")

    @indices_memory_index_buffer_size.setter
    def indices_memory_index_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_memory_index_buffer_size", value)

    @property
    @pulumi.getter(name="indicesQueriesCacheSize")
    def indices_queries_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_queries_cache_size")

    @indices_queries_cache_size.setter
    def indices_queries_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_queries_cache_size", value)

    @property
    @pulumi.getter(name="indicesQueryBoolMaxClauseCount")
    def indices_query_bool_max_clause_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indices_query_bool_max_clause_count")

    @indices_query_bool_max_clause_count.setter
    def indices_query_bool_max_clause_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indices_query_bool_max_clause_count", value)

    @property
    @pulumi.getter(name="reindexRemoteWhitelists")
    def reindex_remote_whitelists(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "reindex_remote_whitelists")

    @reindex_remote_whitelists.setter
    def reindex_remote_whitelists(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "reindex_remote_whitelists", value)

    @property
    @pulumi.getter(name="searchMaxBuckets")
    def search_max_buckets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_max_buckets")

    @search_max_buckets.setter
    def search_max_buckets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_max_buckets", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeQueueSize")
    def thread_pool_analyze_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_analyze_queue_size")

    @thread_pool_analyze_queue_size.setter
    def thread_pool_analyze_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_analyze_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeSize")
    def thread_pool_analyze_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_analyze_size")

    @thread_pool_analyze_size.setter
    def thread_pool_analyze_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_analyze_size", value)

    @property
    @pulumi.getter(name="threadPoolForceMergeSize")
    def thread_pool_force_merge_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_force_merge_size")

    @thread_pool_force_merge_size.setter
    def thread_pool_force_merge_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_force_merge_size", value)

    @property
    @pulumi.getter(name="threadPoolGetQueueSize")
    def thread_pool_get_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_get_queue_size")

    @thread_pool_get_queue_size.setter
    def thread_pool_get_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_get_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolGetSize")
    def thread_pool_get_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_get_size")

    @thread_pool_get_size.setter
    def thread_pool_get_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_get_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexQueueSize")
    def thread_pool_index_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_index_queue_size")

    @thread_pool_index_queue_size.setter
    def thread_pool_index_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_index_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexSize")
    def thread_pool_index_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_index_size")

    @thread_pool_index_size.setter
    def thread_pool_index_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_index_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchQueueSize")
    def thread_pool_search_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_queue_size")

    @thread_pool_search_queue_size.setter
    def thread_pool_search_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchSize")
    def thread_pool_search_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_size")

    @thread_pool_search_size.setter
    def thread_pool_search_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledQueueSize")
    def thread_pool_search_throttled_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_throttled_queue_size")

    @thread_pool_search_throttled_queue_size.setter
    def thread_pool_search_throttled_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_throttled_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledSize")
    def thread_pool_search_throttled_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_search_throttled_size")

    @thread_pool_search_throttled_size.setter
    def thread_pool_search_throttled_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_search_throttled_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteQueueSize")
    def thread_pool_write_queue_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_write_queue_size")

    @thread_pool_write_queue_size.setter
    def thread_pool_write_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_write_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteSize")
    def thread_pool_write_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thread_pool_write_size")

    @thread_pool_write_size.setter
    def thread_pool_write_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thread_pool_write_size", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigIndexPatternArgs:
    def __init__(__self__, *,
                 max_index_count: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigKibanaArgs:
    def __init__(__self__, *,
                 elasticsearch_request_timeout: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[str]] = None,
                 max_old_space_size: Optional[pulumi.Input[str]] = None):
        if elasticsearch_request_timeout is not None:
            pulumi.set(__self__, "elasticsearch_request_timeout", elasticsearch_request_timeout)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_old_space_size is not None:
            pulumi.set(__self__, "max_old_space_size", max_old_space_size)

    @property
    @pulumi.getter(name="elasticsearchRequestTimeout")
    def elasticsearch_request_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_request_timeout")

    @elasticsearch_request_timeout.setter
    def elasticsearch_request_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_request_timeout", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxOldSpaceSize")
    def max_old_space_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_old_space_size")

    @max_old_space_size.setter
    def max_old_space_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_old_space_size", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceElasticsearchUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceGrafanaArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceGrafanaUserConfigArgs:
    def __init__(__self__, *,
                 alerting_enabled: Optional[pulumi.Input[str]] = None,
                 alerting_error_or_timeout: Optional[pulumi.Input[str]] = None,
                 alerting_nodata_or_nullvalues: Optional[pulumi.Input[str]] = None,
                 allow_embedding: Optional[pulumi.Input[str]] = None,
                 auth_basic_enabled: Optional[pulumi.Input[str]] = None,
                 auth_generic_oauth: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGenericOauthArgs']] = None,
                 auth_github: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGithubArgs']] = None,
                 auth_gitlab: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGitlabArgs']] = None,
                 auth_google: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGoogleArgs']] = None,
                 cookie_samesite: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 dashboards_versions_to_keep: Optional[pulumi.Input[str]] = None,
                 dataproxy_send_user_header: Optional[pulumi.Input[str]] = None,
                 dataproxy_timeout: Optional[pulumi.Input[str]] = None,
                 disable_gravatar: Optional[pulumi.Input[str]] = None,
                 editors_can_admin: Optional[pulumi.Input[str]] = None,
                 external_image_storage: Optional[pulumi.Input['ServiceGrafanaUserConfigExternalImageStorageArgs']] = None,
                 google_analytics_ua_id: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 metrics_enabled: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceGrafanaUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceGrafanaUserConfigPublicAccessArgs']] = None,
                 smtp_server: Optional[pulumi.Input['ServiceGrafanaUserConfigSmtpServerArgs']] = None,
                 user_auto_assign_org: Optional[pulumi.Input[str]] = None,
                 user_auto_assign_org_role: Optional[pulumi.Input[str]] = None,
                 viewers_can_edit: Optional[pulumi.Input[str]] = None):
        if alerting_enabled is not None:
            pulumi.set(__self__, "alerting_enabled", alerting_enabled)
        if alerting_error_or_timeout is not None:
            pulumi.set(__self__, "alerting_error_or_timeout", alerting_error_or_timeout)
        if alerting_nodata_or_nullvalues is not None:
            pulumi.set(__self__, "alerting_nodata_or_nullvalues", alerting_nodata_or_nullvalues)
        if allow_embedding is not None:
            pulumi.set(__self__, "allow_embedding", allow_embedding)
        if auth_basic_enabled is not None:
            pulumi.set(__self__, "auth_basic_enabled", auth_basic_enabled)
        if auth_generic_oauth is not None:
            pulumi.set(__self__, "auth_generic_oauth", auth_generic_oauth)
        if auth_github is not None:
            pulumi.set(__self__, "auth_github", auth_github)
        if auth_gitlab is not None:
            pulumi.set(__self__, "auth_gitlab", auth_gitlab)
        if auth_google is not None:
            pulumi.set(__self__, "auth_google", auth_google)
        if cookie_samesite is not None:
            pulumi.set(__self__, "cookie_samesite", cookie_samesite)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if dashboards_versions_to_keep is not None:
            pulumi.set(__self__, "dashboards_versions_to_keep", dashboards_versions_to_keep)
        if dataproxy_send_user_header is not None:
            pulumi.set(__self__, "dataproxy_send_user_header", dataproxy_send_user_header)
        if dataproxy_timeout is not None:
            pulumi.set(__self__, "dataproxy_timeout", dataproxy_timeout)
        if disable_gravatar is not None:
            pulumi.set(__self__, "disable_gravatar", disable_gravatar)
        if editors_can_admin is not None:
            pulumi.set(__self__, "editors_can_admin", editors_can_admin)
        if external_image_storage is not None:
            pulumi.set(__self__, "external_image_storage", external_image_storage)
        if google_analytics_ua_id is not None:
            pulumi.set(__self__, "google_analytics_ua_id", google_analytics_ua_id)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if smtp_server is not None:
            pulumi.set(__self__, "smtp_server", smtp_server)
        if user_auto_assign_org is not None:
            pulumi.set(__self__, "user_auto_assign_org", user_auto_assign_org)
        if user_auto_assign_org_role is not None:
            pulumi.set(__self__, "user_auto_assign_org_role", user_auto_assign_org_role)
        if viewers_can_edit is not None:
            pulumi.set(__self__, "viewers_can_edit", viewers_can_edit)

    @property
    @pulumi.getter(name="alertingEnabled")
    def alerting_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alerting_enabled")

    @alerting_enabled.setter
    def alerting_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_enabled", value)

    @property
    @pulumi.getter(name="alertingErrorOrTimeout")
    def alerting_error_or_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alerting_error_or_timeout")

    @alerting_error_or_timeout.setter
    def alerting_error_or_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_error_or_timeout", value)

    @property
    @pulumi.getter(name="alertingNodataOrNullvalues")
    def alerting_nodata_or_nullvalues(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alerting_nodata_or_nullvalues")

    @alerting_nodata_or_nullvalues.setter
    def alerting_nodata_or_nullvalues(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_nodata_or_nullvalues", value)

    @property
    @pulumi.getter(name="allowEmbedding")
    def allow_embedding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_embedding")

    @allow_embedding.setter
    def allow_embedding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_embedding", value)

    @property
    @pulumi.getter(name="authBasicEnabled")
    def auth_basic_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_basic_enabled")

    @auth_basic_enabled.setter
    def auth_basic_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_basic_enabled", value)

    @property
    @pulumi.getter(name="authGenericOauth")
    def auth_generic_oauth(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGenericOauthArgs']]:
        return pulumi.get(self, "auth_generic_oauth")

    @auth_generic_oauth.setter
    def auth_generic_oauth(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGenericOauthArgs']]):
        pulumi.set(self, "auth_generic_oauth", value)

    @property
    @pulumi.getter(name="authGithub")
    def auth_github(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGithubArgs']]:
        return pulumi.get(self, "auth_github")

    @auth_github.setter
    def auth_github(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGithubArgs']]):
        pulumi.set(self, "auth_github", value)

    @property
    @pulumi.getter(name="authGitlab")
    def auth_gitlab(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGitlabArgs']]:
        return pulumi.get(self, "auth_gitlab")

    @auth_gitlab.setter
    def auth_gitlab(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGitlabArgs']]):
        pulumi.set(self, "auth_gitlab", value)

    @property
    @pulumi.getter(name="authGoogle")
    def auth_google(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGoogleArgs']]:
        return pulumi.get(self, "auth_google")

    @auth_google.setter
    def auth_google(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigAuthGoogleArgs']]):
        pulumi.set(self, "auth_google", value)

    @property
    @pulumi.getter(name="cookieSamesite")
    def cookie_samesite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie_samesite")

    @cookie_samesite.setter
    def cookie_samesite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_samesite", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="dashboardsVersionsToKeep")
    def dashboards_versions_to_keep(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dashboards_versions_to_keep")

    @dashboards_versions_to_keep.setter
    def dashboards_versions_to_keep(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboards_versions_to_keep", value)

    @property
    @pulumi.getter(name="dataproxySendUserHeader")
    def dataproxy_send_user_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataproxy_send_user_header")

    @dataproxy_send_user_header.setter
    def dataproxy_send_user_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproxy_send_user_header", value)

    @property
    @pulumi.getter(name="dataproxyTimeout")
    def dataproxy_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataproxy_timeout")

    @dataproxy_timeout.setter
    def dataproxy_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproxy_timeout", value)

    @property
    @pulumi.getter(name="disableGravatar")
    def disable_gravatar(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_gravatar")

    @disable_gravatar.setter
    def disable_gravatar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_gravatar", value)

    @property
    @pulumi.getter(name="editorsCanAdmin")
    def editors_can_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "editors_can_admin")

    @editors_can_admin.setter
    def editors_can_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "editors_can_admin", value)

    @property
    @pulumi.getter(name="externalImageStorage")
    def external_image_storage(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigExternalImageStorageArgs']]:
        return pulumi.get(self, "external_image_storage")

    @external_image_storage.setter
    def external_image_storage(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigExternalImageStorageArgs']]):
        pulumi.set(self, "external_image_storage", value)

    @property
    @pulumi.getter(name="googleAnalyticsUaId")
    def google_analytics_ua_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "google_analytics_ua_id")

    @google_analytics_ua_id.setter
    def google_analytics_ua_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_analytics_ua_id", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="smtpServer")
    def smtp_server(self) -> Optional[pulumi.Input['ServiceGrafanaUserConfigSmtpServerArgs']]:
        return pulumi.get(self, "smtp_server")

    @smtp_server.setter
    def smtp_server(self, value: Optional[pulumi.Input['ServiceGrafanaUserConfigSmtpServerArgs']]):
        pulumi.set(self, "smtp_server", value)

    @property
    @pulumi.getter(name="userAutoAssignOrg")
    def user_auto_assign_org(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_auto_assign_org")

    @user_auto_assign_org.setter
    def user_auto_assign_org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_auto_assign_org", value)

    @property
    @pulumi.getter(name="userAutoAssignOrgRole")
    def user_auto_assign_org_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_auto_assign_org_role")

    @user_auto_assign_org_role.setter
    def user_auto_assign_org_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_auto_assign_org_role", value)

    @property
    @pulumi.getter(name="viewersCanEdit")
    def viewers_can_edit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "viewers_can_edit")

    @viewers_can_edit.setter
    def viewers_can_edit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "viewers_can_edit", value)


@pulumi.input_type
class ServiceGrafanaUserConfigAuthGenericOauthArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_domains: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allowed_organizations: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class ServiceGrafanaUserConfigAuthGithubArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_organizations: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 team_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if team_ids is not None:
            pulumi.set(__self__, "team_ids", team_ids)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="teamIds")
    def team_ids(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "team_ids")

    @team_ids.setter
    def team_ids(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "team_ids", value)


@pulumi.input_type
class ServiceGrafanaUserConfigAuthGitlabArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_groups: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_groups is not None:
            pulumi.set(__self__, "allowed_groups", allowed_groups)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedGroups")
    def allowed_groups(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_groups")

    @allowed_groups.setter
    def allowed_groups(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_groups", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class ServiceGrafanaUserConfigAuthGoogleArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[pulumi.Input[str]] = None,
                 allowed_domains: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class ServiceGrafanaUserConfigExternalImageStorageArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket_url: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket_url is not None:
            pulumi.set(__self__, "bucket_url", bucket_url)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ServiceGrafanaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[pulumi.Input[str]] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class ServiceGrafanaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[pulumi.Input[str]] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class ServiceGrafanaUserConfigSmtpServerArgs:
    def __init__(__self__, *,
                 from_address: Optional[pulumi.Input[str]] = None,
                 from_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 skip_verify: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if from_address is not None:
            pulumi.set(__self__, "from_address", from_address)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ServiceInfluxdbArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None):
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)


@pulumi.input_type
class ServiceInfluxdbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 private_access: Optional[pulumi.Input['ServiceInfluxdbUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceInfluxdbUserConfigPublicAccessArgs']] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceInfluxdbUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceInfluxdbUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceInfluxdbUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceInfluxdbUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceInfluxdbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[pulumi.Input[str]] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class ServiceInfluxdbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[pulumi.Input[str]] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class ServiceIntegrationEndpointDatadogUserConfigArgs:
    def __init__(__self__, *,
                 datadog_api_key: Optional[pulumi.Input[str]] = None,
                 disable_consumer_stats: Optional[pulumi.Input[str]] = None,
                 max_partition_contexts: Optional[pulumi.Input[str]] = None,
                 site: Optional[pulumi.Input[str]] = None):
        if datadog_api_key is not None:
            pulumi.set(__self__, "datadog_api_key", datadog_api_key)
        if disable_consumer_stats is not None:
            pulumi.set(__self__, "disable_consumer_stats", disable_consumer_stats)
        if max_partition_contexts is not None:
            pulumi.set(__self__, "max_partition_contexts", max_partition_contexts)
        if site is not None:
            pulumi.set(__self__, "site", site)

    @property
    @pulumi.getter(name="datadogApiKey")
    def datadog_api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datadog_api_key")

    @datadog_api_key.setter
    def datadog_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datadog_api_key", value)

    @property
    @pulumi.getter(name="disableConsumerStats")
    def disable_consumer_stats(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_consumer_stats")

    @disable_consumer_stats.setter
    def disable_consumer_stats(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_consumer_stats", value)

    @property
    @pulumi.getter(name="maxPartitionContexts")
    def max_partition_contexts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_partition_contexts")

    @max_partition_contexts.setter
    def max_partition_contexts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_partition_contexts", value)

    @property
    @pulumi.getter
    def site(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site", value)


@pulumi.input_type
class ServiceIntegrationEndpointExternalElasticsearchLogsUserConfigArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input[str]] = None,
                 index_days_max: Optional[pulumi.Input[str]] = None,
                 index_prefix: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if index_days_max is not None:
            pulumi.set(__self__, "index_days_max", index_days_max)
        if index_prefix is not None:
            pulumi.set(__self__, "index_prefix", index_prefix)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="indexDaysMax")
    def index_days_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_days_max")

    @index_days_max.setter
    def index_days_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_days_max", value)

    @property
    @pulumi.getter(name="indexPrefix")
    def index_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_prefix")

    @index_prefix.setter
    def index_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_prefix", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ServiceIntegrationEndpointPrometheusUserConfigArgs:
    def __init__(__self__, *,
                 basic_auth_password: Optional[pulumi.Input[str]] = None,
                 basic_auth_username: Optional[pulumi.Input[str]] = None):
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_username", value)


@pulumi.input_type
class ServiceIntegrationEndpointRsyslogUserConfigArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 logline: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 sd: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[str]] = None):
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if logline is not None:
            pulumi.set(__self__, "logline", logline)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if sd is not None:
            pulumi.set(__self__, "sd", sd)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def logline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logline")

    @logline.setter
    def logline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logline", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sd")

    @sd.setter
    def sd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sd", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceIntegrationKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input['ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input['ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input['ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']]):
        pulumi.set(self, "kafka_connect", value)


@pulumi.input_type
class ServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 config_storage_topic: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 offset_storage_topic: Optional[pulumi.Input[str]] = None,
                 status_storage_topic: Optional[pulumi.Input[str]] = None):
        if config_storage_topic is not None:
            pulumi.set(__self__, "config_storage_topic", config_storage_topic)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if offset_storage_topic is not None:
            pulumi.set(__self__, "offset_storage_topic", offset_storage_topic)
        if status_storage_topic is not None:
            pulumi.set(__self__, "status_storage_topic", status_storage_topic)

    @property
    @pulumi.getter(name="configStorageTopic")
    def config_storage_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_storage_topic")

    @config_storage_topic.setter
    def config_storage_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_storage_topic", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="offsetStorageTopic")
    def offset_storage_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_storage_topic")

    @offset_storage_topic.setter
    def offset_storage_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_storage_topic", value)

    @property
    @pulumi.getter(name="statusStorageTopic")
    def status_storage_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_storage_topic")

    @status_storage_topic.setter
    def status_storage_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_storage_topic", value)


@pulumi.input_type
class ServiceIntegrationKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 cluster_alias: Optional[pulumi.Input[str]] = None):
        if cluster_alias is not None:
            pulumi.set(__self__, "cluster_alias", cluster_alias)

    @property
    @pulumi.getter(name="clusterAlias")
    def cluster_alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_alias")

    @cluster_alias.setter
    def cluster_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_alias", value)


@pulumi.input_type
class ServiceIntegrationLogsUserConfigArgs:
    def __init__(__self__, *,
                 elasticsearch_index_days_max: Optional[pulumi.Input[str]] = None,
                 elasticsearch_index_prefix: Optional[pulumi.Input[str]] = None):
        if elasticsearch_index_days_max is not None:
            pulumi.set(__self__, "elasticsearch_index_days_max", elasticsearch_index_days_max)
        if elasticsearch_index_prefix is not None:
            pulumi.set(__self__, "elasticsearch_index_prefix", elasticsearch_index_prefix)

    @property
    @pulumi.getter(name="elasticsearchIndexDaysMax")
    def elasticsearch_index_days_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_index_days_max")

    @elasticsearch_index_days_max.setter
    def elasticsearch_index_days_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_index_days_max", value)

    @property
    @pulumi.getter(name="elasticsearchIndexPrefix")
    def elasticsearch_index_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_index_prefix")

    @elasticsearch_index_prefix.setter
    def elasticsearch_index_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_index_prefix", value)


@pulumi.input_type
class ServiceIntegrationMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 mirrormaker_whitelist: Optional[pulumi.Input[str]] = None):
        if mirrormaker_whitelist is not None:
            pulumi.set(__self__, "mirrormaker_whitelist", mirrormaker_whitelist)

    @property
    @pulumi.getter(name="mirrormakerWhitelist")
    def mirrormaker_whitelist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mirrormaker_whitelist")

    @mirrormaker_whitelist.setter
    def mirrormaker_whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mirrormaker_whitelist", value)


@pulumi.input_type
class ServiceKafkaArgs:
    def __init__(__self__, *,
                 access_cert: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 connect_uri: Optional[pulumi.Input[str]] = None,
                 rest_uri: Optional[pulumi.Input[str]] = None,
                 schema_registry_uri: Optional[pulumi.Input[str]] = None):
        if access_cert is not None:
            pulumi.set(__self__, "access_cert", access_cert)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if connect_uri is not None:
            pulumi.set(__self__, "connect_uri", connect_uri)
        if rest_uri is not None:
            pulumi.set(__self__, "rest_uri", rest_uri)
        if schema_registry_uri is not None:
            pulumi.set(__self__, "schema_registry_uri", schema_registry_uri)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_cert")

    @access_cert.setter
    def access_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_cert", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="connectUri")
    def connect_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_uri")

    @connect_uri.setter
    def connect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_uri", value)

    @property
    @pulumi.getter(name="restUri")
    def rest_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rest_uri")

    @rest_uri.setter
    def rest_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_uri", value)

    @property
    @pulumi.getter(name="schemaRegistryUri")
    def schema_registry_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry_uri")

    @schema_registry_uri.setter
    def schema_registry_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry_uri", value)


@pulumi.input_type
class ServiceKafkaConnectArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 kafka_connect: Optional[pulumi.Input['ServiceKafkaConnectUserConfigKafkaConnectArgs']] = None,
                 private_access: Optional[pulumi.Input['ServiceKafkaConnectUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceKafkaConnectUserConfigPublicAccessArgs']] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input['ServiceKafkaConnectUserConfigKafkaConnectArgs']]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input['ServiceKafkaConnectUserConfigKafkaConnectArgs']]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceKafkaConnectUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceKafkaConnectUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceKafkaConnectUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceKafkaConnectUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)


@pulumi.input_type
class ServiceKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[pulumi.Input[str]] = None,
                 consumer_auto_offset_reset: Optional[pulumi.Input[str]] = None,
                 consumer_isolation_level: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_interval_ms: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_records: Optional[pulumi.Input[str]] = None,
                 offset_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 offset_flush_timeout_ms: Optional[pulumi.Input[str]] = None,
                 session_timeout_ms: Optional[pulumi.Input[str]] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class ServiceKafkaConnectUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceKafkaConnectUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceKafkaMirrormakerArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 kafka_mirrormaker: Optional[pulumi.Input['ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_mirrormaker is not None:
            pulumi.set(__self__, "kafka_mirrormaker", kafka_mirrormaker)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaMirrormaker")
    def kafka_mirrormaker(self) -> Optional[pulumi.Input['ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']]:
        return pulumi.get(self, "kafka_mirrormaker")

    @kafka_mirrormaker.setter
    def kafka_mirrormaker(self, value: Optional[pulumi.Input['ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']]):
        pulumi.set(self, "kafka_mirrormaker", value)


@pulumi.input_type
class ServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs:
    def __init__(__self__, *,
                 refresh_groups_enabled: Optional[pulumi.Input[str]] = None,
                 refresh_groups_interval_seconds: Optional[pulumi.Input[str]] = None,
                 refresh_topics_enabled: Optional[pulumi.Input[str]] = None,
                 refresh_topics_interval_seconds: Optional[pulumi.Input[str]] = None):
        if refresh_groups_enabled is not None:
            pulumi.set(__self__, "refresh_groups_enabled", refresh_groups_enabled)
        if refresh_groups_interval_seconds is not None:
            pulumi.set(__self__, "refresh_groups_interval_seconds", refresh_groups_interval_seconds)
        if refresh_topics_enabled is not None:
            pulumi.set(__self__, "refresh_topics_enabled", refresh_topics_enabled)
        if refresh_topics_interval_seconds is not None:
            pulumi.set(__self__, "refresh_topics_interval_seconds", refresh_topics_interval_seconds)

    @property
    @pulumi.getter(name="refreshGroupsEnabled")
    def refresh_groups_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_groups_enabled")

    @refresh_groups_enabled.setter
    def refresh_groups_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_groups_enabled", value)

    @property
    @pulumi.getter(name="refreshGroupsIntervalSeconds")
    def refresh_groups_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_groups_interval_seconds")

    @refresh_groups_interval_seconds.setter
    def refresh_groups_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_groups_interval_seconds", value)

    @property
    @pulumi.getter(name="refreshTopicsEnabled")
    def refresh_topics_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_topics_enabled")

    @refresh_topics_enabled.setter
    def refresh_topics_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_topics_enabled", value)

    @property
    @pulumi.getter(name="refreshTopicsIntervalSeconds")
    def refresh_topics_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_topics_interval_seconds")

    @refresh_topics_interval_seconds.setter
    def refresh_topics_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_topics_interval_seconds", value)


@pulumi.input_type
class ServiceKafkaUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 kafka: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaArgs']] = None,
                 kafka_authentication_methods: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_connect_config: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaConnectConfigArgs']] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 kafka_rest_config: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaRestConfigArgs']] = None,
                 kafka_version: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceKafkaUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceKafkaUserConfigPublicAccessArgs']] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_authentication_methods is not None:
            pulumi.set(__self__, "kafka_authentication_methods", kafka_authentication_methods)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_connect_config is not None:
            pulumi.set(__self__, "kafka_connect_config", kafka_connect_config)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if kafka_rest_config is not None:
            pulumi.set(__self__, "kafka_rest_config", kafka_rest_config)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigKafkaArgs']]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethods")
    def kafka_authentication_methods(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']]:
        return pulumi.get(self, "kafka_authentication_methods")

    @kafka_authentication_methods.setter
    def kafka_authentication_methods(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']]):
        pulumi.set(self, "kafka_authentication_methods", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaConnectConfig")
    def kafka_connect_config(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigKafkaConnectConfigArgs']]:
        return pulumi.get(self, "kafka_connect_config")

    @kafka_connect_config.setter
    def kafka_connect_config(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaConnectConfigArgs']]):
        pulumi.set(self, "kafka_connect_config", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="kafkaRestConfig")
    def kafka_rest_config(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigKafkaRestConfigArgs']]:
        return pulumi.get(self, "kafka_rest_config")

    @kafka_rest_config.setter
    def kafka_rest_config(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigKafkaRestConfigArgs']]):
        pulumi.set(self, "kafka_rest_config", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceKafkaUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceKafkaUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class ServiceKafkaUserConfigKafkaArgs:
    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[pulumi.Input[str]] = None,
                 compression_type: Optional[pulumi.Input[str]] = None,
                 connections_max_idle_ms: Optional[pulumi.Input[str]] = None,
                 default_replication_factor: Optional[pulumi.Input[str]] = None,
                 group_max_session_timeout_ms: Optional[pulumi.Input[str]] = None,
                 group_min_session_timeout_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_max_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 log_cleaner_min_cleanable_ratio: Optional[pulumi.Input[str]] = None,
                 log_cleaner_min_compaction_lag_ms: Optional[pulumi.Input[str]] = None,
                 log_cleanup_policy: Optional[pulumi.Input[str]] = None,
                 log_message_timestamp_difference_max_ms: Optional[pulumi.Input[str]] = None,
                 log_message_timestamp_type: Optional[pulumi.Input[str]] = None,
                 log_retention_bytes: Optional[pulumi.Input[str]] = None,
                 log_retention_hours: Optional[pulumi.Input[str]] = None,
                 log_segment_bytes: Optional[pulumi.Input[str]] = None,
                 max_connections_per_ip: Optional[pulumi.Input[str]] = None,
                 max_incremental_fetch_session_cache_slots: Optional[pulumi.Input[str]] = None,
                 message_max_bytes: Optional[pulumi.Input[str]] = None,
                 num_partitions: Optional[pulumi.Input[str]] = None,
                 offsets_retention_minutes: Optional[pulumi.Input[str]] = None,
                 producer_purgatory_purge_interval_requests: Optional[pulumi.Input[str]] = None,
                 replica_fetch_max_bytes: Optional[pulumi.Input[str]] = None,
                 replica_fetch_response_max_bytes: Optional[pulumi.Input[str]] = None,
                 socket_request_max_bytes: Optional[pulumi.Input[str]] = None):
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if connections_max_idle_ms is not None:
            pulumi.set(__self__, "connections_max_idle_ms", connections_max_idle_ms)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if group_max_session_timeout_ms is not None:
            pulumi.set(__self__, "group_max_session_timeout_ms", group_max_session_timeout_ms)
        if group_min_session_timeout_ms is not None:
            pulumi.set(__self__, "group_min_session_timeout_ms", group_min_session_timeout_ms)
        if log_cleaner_max_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_max_compaction_lag_ms", log_cleaner_max_compaction_lag_ms)
        if log_cleaner_min_cleanable_ratio is not None:
            pulumi.set(__self__, "log_cleaner_min_cleanable_ratio", log_cleaner_min_cleanable_ratio)
        if log_cleaner_min_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_min_compaction_lag_ms", log_cleaner_min_compaction_lag_ms)
        if log_cleanup_policy is not None:
            pulumi.set(__self__, "log_cleanup_policy", log_cleanup_policy)
        if log_message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "log_message_timestamp_difference_max_ms", log_message_timestamp_difference_max_ms)
        if log_message_timestamp_type is not None:
            pulumi.set(__self__, "log_message_timestamp_type", log_message_timestamp_type)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if max_connections_per_ip is not None:
            pulumi.set(__self__, "max_connections_per_ip", max_connections_per_ip)
        if max_incremental_fetch_session_cache_slots is not None:
            pulumi.set(__self__, "max_incremental_fetch_session_cache_slots", max_incremental_fetch_session_cache_slots)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if producer_purgatory_purge_interval_requests is not None:
            pulumi.set(__self__, "producer_purgatory_purge_interval_requests", producer_purgatory_purge_interval_requests)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if replica_fetch_response_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_response_max_bytes", replica_fetch_response_max_bytes)
        if socket_request_max_bytes is not None:
            pulumi.set(__self__, "socket_request_max_bytes", socket_request_max_bytes)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_create_topics_enable")

    @auto_create_topics_enable.setter
    def auto_create_topics_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_create_topics_enable", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="connectionsMaxIdleMs")
    def connections_max_idle_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connections_max_idle_ms")

    @connections_max_idle_ms.setter
    def connections_max_idle_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connections_max_idle_ms", value)

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_replication_factor")

    @default_replication_factor.setter
    def default_replication_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_replication_factor", value)

    @property
    @pulumi.getter(name="groupMaxSessionTimeoutMs")
    def group_max_session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_max_session_timeout_ms")

    @group_max_session_timeout_ms.setter
    def group_max_session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_max_session_timeout_ms", value)

    @property
    @pulumi.getter(name="groupMinSessionTimeoutMs")
    def group_min_session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_min_session_timeout_ms")

    @group_min_session_timeout_ms.setter
    def group_min_session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_min_session_timeout_ms", value)

    @property
    @pulumi.getter(name="logCleanerMaxCompactionLagMs")
    def log_cleaner_max_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_max_compaction_lag_ms")

    @log_cleaner_max_compaction_lag_ms.setter
    def log_cleaner_max_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanerMinCleanableRatio")
    def log_cleaner_min_cleanable_ratio(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_min_cleanable_ratio")

    @log_cleaner_min_cleanable_ratio.setter
    def log_cleaner_min_cleanable_ratio(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_min_cleanable_ratio", value)

    @property
    @pulumi.getter(name="logCleanerMinCompactionLagMs")
    def log_cleaner_min_compaction_lag_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleaner_min_compaction_lag_ms")

    @log_cleaner_min_compaction_lag_ms.setter
    def log_cleaner_min_compaction_lag_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleaner_min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanupPolicy")
    def log_cleanup_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_cleanup_policy")

    @log_cleanup_policy.setter
    def log_cleanup_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_cleanup_policy", value)

    @property
    @pulumi.getter(name="logMessageTimestampDifferenceMaxMs")
    def log_message_timestamp_difference_max_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_message_timestamp_difference_max_ms")

    @log_message_timestamp_difference_max_ms.setter
    def log_message_timestamp_difference_max_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="logMessageTimestampType")
    def log_message_timestamp_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_message_timestamp_type")

    @log_message_timestamp_type.setter
    def log_message_timestamp_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_timestamp_type", value)

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_retention_bytes")

    @log_retention_bytes.setter
    def log_retention_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_bytes", value)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_retention_hours")

    @log_retention_hours.setter
    def log_retention_hours(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_retention_hours", value)

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_segment_bytes")

    @log_segment_bytes.setter
    def log_segment_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_segment_bytes", value)

    @property
    @pulumi.getter(name="maxConnectionsPerIp")
    def max_connections_per_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_connections_per_ip")

    @max_connections_per_ip.setter
    def max_connections_per_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_connections_per_ip", value)

    @property
    @pulumi.getter(name="maxIncrementalFetchSessionCacheSlots")
    def max_incremental_fetch_session_cache_slots(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_incremental_fetch_session_cache_slots")

    @max_incremental_fetch_session_cache_slots.setter
    def max_incremental_fetch_session_cache_slots(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_incremental_fetch_session_cache_slots", value)

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_max_bytes")

    @message_max_bytes.setter
    def message_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_max_bytes", value)

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_partitions")

    @num_partitions.setter
    def num_partitions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_partitions", value)

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offsets_retention_minutes")

    @offsets_retention_minutes.setter
    def offsets_retention_minutes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offsets_retention_minutes", value)

    @property
    @pulumi.getter(name="producerPurgatoryPurgeIntervalRequests")
    def producer_purgatory_purge_interval_requests(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_purgatory_purge_interval_requests")

    @producer_purgatory_purge_interval_requests.setter
    def producer_purgatory_purge_interval_requests(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_purgatory_purge_interval_requests", value)

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_fetch_max_bytes")

    @replica_fetch_max_bytes.setter
    def replica_fetch_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="replicaFetchResponseMaxBytes")
    def replica_fetch_response_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_fetch_response_max_bytes")

    @replica_fetch_response_max_bytes.setter
    def replica_fetch_response_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_fetch_response_max_bytes", value)

    @property
    @pulumi.getter(name="socketRequestMaxBytes")
    def socket_request_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "socket_request_max_bytes")

    @socket_request_max_bytes.setter
    def socket_request_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socket_request_max_bytes", value)


@pulumi.input_type
class ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 sasl: Optional[pulumi.Input[str]] = None):
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def sasl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sasl")

    @sasl.setter
    def sasl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl", value)


@pulumi.input_type
class ServiceKafkaUserConfigKafkaConnectConfigArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[pulumi.Input[str]] = None,
                 consumer_auto_offset_reset: Optional[pulumi.Input[str]] = None,
                 consumer_isolation_level: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_interval_ms: Optional[pulumi.Input[str]] = None,
                 consumer_max_poll_records: Optional[pulumi.Input[str]] = None,
                 offset_flush_interval_ms: Optional[pulumi.Input[str]] = None,
                 offset_flush_timeout_ms: Optional[pulumi.Input[str]] = None,
                 session_timeout_ms: Optional[pulumi.Input[str]] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class ServiceKafkaUserConfigKafkaRestConfigArgs:
    def __init__(__self__, *,
                 consumer_enable_auto_commit: Optional[pulumi.Input[str]] = None,
                 consumer_request_max_bytes: Optional[pulumi.Input[str]] = None,
                 consumer_request_timeout_ms: Optional[pulumi.Input[str]] = None,
                 producer_acks: Optional[pulumi.Input[str]] = None,
                 producer_linger_ms: Optional[pulumi.Input[str]] = None,
                 simpleconsumer_pool_size_max: Optional[pulumi.Input[str]] = None):
        if consumer_enable_auto_commit is not None:
            pulumi.set(__self__, "consumer_enable_auto_commit", consumer_enable_auto_commit)
        if consumer_request_max_bytes is not None:
            pulumi.set(__self__, "consumer_request_max_bytes", consumer_request_max_bytes)
        if consumer_request_timeout_ms is not None:
            pulumi.set(__self__, "consumer_request_timeout_ms", consumer_request_timeout_ms)
        if producer_acks is not None:
            pulumi.set(__self__, "producer_acks", producer_acks)
        if producer_linger_ms is not None:
            pulumi.set(__self__, "producer_linger_ms", producer_linger_ms)
        if simpleconsumer_pool_size_max is not None:
            pulumi.set(__self__, "simpleconsumer_pool_size_max", simpleconsumer_pool_size_max)

    @property
    @pulumi.getter(name="consumerEnableAutoCommit")
    def consumer_enable_auto_commit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_enable_auto_commit")

    @consumer_enable_auto_commit.setter
    def consumer_enable_auto_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_enable_auto_commit", value)

    @property
    @pulumi.getter(name="consumerRequestMaxBytes")
    def consumer_request_max_bytes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_request_max_bytes")

    @consumer_request_max_bytes.setter
    def consumer_request_max_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_request_max_bytes", value)

    @property
    @pulumi.getter(name="consumerRequestTimeoutMs")
    def consumer_request_timeout_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_request_timeout_ms")

    @consumer_request_timeout_ms.setter
    def consumer_request_timeout_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_request_timeout_ms", value)

    @property
    @pulumi.getter(name="producerAcks")
    def producer_acks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_acks")

    @producer_acks.setter
    def producer_acks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_acks", value)

    @property
    @pulumi.getter(name="producerLingerMs")
    def producer_linger_ms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer_linger_ms")

    @producer_linger_ms.setter
    def producer_linger_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer_linger_ms", value)

    @property
    @pulumi.getter(name="simpleconsumerPoolSizeMax")
    def simpleconsumer_pool_size_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "simpleconsumer_pool_size_max")

    @simpleconsumer_pool_size_max.setter
    def simpleconsumer_pool_size_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simpleconsumer_pool_size_max", value)


@pulumi.input_type
class ServiceKafkaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceKafkaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[pulumi.Input[str]] = None,
                 kafka_connect: Optional[pulumi.Input[str]] = None,
                 kafka_rest: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 schema_registry: Optional[pulumi.Input[str]] = None):
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class ServiceMysqlArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMysqlUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 backup_hour: Optional[pulumi.Input[str]] = None,
                 backup_minute: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 mysql: Optional[pulumi.Input['ServiceMysqlUserConfigMysqlArgs']] = None,
                 mysql_version: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input['ServiceMysqlUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceMysqlUserConfigPublicAccessArgs']] = None,
                 recovery_target_time: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if mysql_version is not None:
            pulumi.set(__self__, "mysql_version", mysql_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['ServiceMysqlUserConfigMysqlArgs']]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['ServiceMysqlUserConfigMysqlArgs']]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql_version")

    @mysql_version.setter
    def mysql_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceMysqlUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceMysqlUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceMysqlUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceMysqlUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceMysqlUserConfigMysqlArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 default_time_zone: Optional[pulumi.Input[str]] = None,
                 group_concat_max_len: Optional[pulumi.Input[str]] = None,
                 information_schema_stats_expiry: Optional[pulumi.Input[str]] = None,
                 innodb_ft_min_token_size: Optional[pulumi.Input[str]] = None,
                 innodb_ft_server_stopword_table: Optional[pulumi.Input[str]] = None,
                 innodb_lock_wait_timeout: Optional[pulumi.Input[str]] = None,
                 innodb_log_buffer_size: Optional[pulumi.Input[str]] = None,
                 innodb_online_alter_log_max_size: Optional[pulumi.Input[str]] = None,
                 innodb_print_all_deadlocks: Optional[pulumi.Input[str]] = None,
                 innodb_rollback_on_timeout: Optional[pulumi.Input[str]] = None,
                 interactive_timeout: Optional[pulumi.Input[str]] = None,
                 max_allowed_packet: Optional[pulumi.Input[str]] = None,
                 max_heap_table_size: Optional[pulumi.Input[str]] = None,
                 net_read_timeout: Optional[pulumi.Input[str]] = None,
                 net_write_timeout: Optional[pulumi.Input[str]] = None,
                 sort_buffer_size: Optional[pulumi.Input[str]] = None,
                 sql_mode: Optional[pulumi.Input[str]] = None,
                 sql_require_primary_key: Optional[pulumi.Input[str]] = None,
                 tmp_table_size: Optional[pulumi.Input[str]] = None,
                 wait_timeout: Optional[pulumi.Input[str]] = None):
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if group_concat_max_len is not None:
            pulumi.set(__self__, "group_concat_max_len", group_concat_max_len)
        if information_schema_stats_expiry is not None:
            pulumi.set(__self__, "information_schema_stats_expiry", information_schema_stats_expiry)
        if innodb_ft_min_token_size is not None:
            pulumi.set(__self__, "innodb_ft_min_token_size", innodb_ft_min_token_size)
        if innodb_ft_server_stopword_table is not None:
            pulumi.set(__self__, "innodb_ft_server_stopword_table", innodb_ft_server_stopword_table)
        if innodb_lock_wait_timeout is not None:
            pulumi.set(__self__, "innodb_lock_wait_timeout", innodb_lock_wait_timeout)
        if innodb_log_buffer_size is not None:
            pulumi.set(__self__, "innodb_log_buffer_size", innodb_log_buffer_size)
        if innodb_online_alter_log_max_size is not None:
            pulumi.set(__self__, "innodb_online_alter_log_max_size", innodb_online_alter_log_max_size)
        if innodb_print_all_deadlocks is not None:
            pulumi.set(__self__, "innodb_print_all_deadlocks", innodb_print_all_deadlocks)
        if innodb_rollback_on_timeout is not None:
            pulumi.set(__self__, "innodb_rollback_on_timeout", innodb_rollback_on_timeout)
        if interactive_timeout is not None:
            pulumi.set(__self__, "interactive_timeout", interactive_timeout)
        if max_allowed_packet is not None:
            pulumi.set(__self__, "max_allowed_packet", max_allowed_packet)
        if max_heap_table_size is not None:
            pulumi.set(__self__, "max_heap_table_size", max_heap_table_size)
        if net_read_timeout is not None:
            pulumi.set(__self__, "net_read_timeout", net_read_timeout)
        if net_write_timeout is not None:
            pulumi.set(__self__, "net_write_timeout", net_write_timeout)
        if sort_buffer_size is not None:
            pulumi.set(__self__, "sort_buffer_size", sort_buffer_size)
        if sql_mode is not None:
            pulumi.set(__self__, "sql_mode", sql_mode)
        if sql_require_primary_key is not None:
            pulumi.set(__self__, "sql_require_primary_key", sql_require_primary_key)
        if tmp_table_size is not None:
            pulumi.set(__self__, "tmp_table_size", tmp_table_size)
        if wait_timeout is not None:
            pulumi.set(__self__, "wait_timeout", wait_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_time_zone")

    @default_time_zone.setter
    def default_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_time_zone", value)

    @property
    @pulumi.getter(name="groupConcatMaxLen")
    def group_concat_max_len(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_concat_max_len")

    @group_concat_max_len.setter
    def group_concat_max_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_concat_max_len", value)

    @property
    @pulumi.getter(name="informationSchemaStatsExpiry")
    def information_schema_stats_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "information_schema_stats_expiry")

    @information_schema_stats_expiry.setter
    def information_schema_stats_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "information_schema_stats_expiry", value)

    @property
    @pulumi.getter(name="innodbFtMinTokenSize")
    def innodb_ft_min_token_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_ft_min_token_size")

    @innodb_ft_min_token_size.setter
    def innodb_ft_min_token_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_ft_min_token_size", value)

    @property
    @pulumi.getter(name="innodbFtServerStopwordTable")
    def innodb_ft_server_stopword_table(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_ft_server_stopword_table")

    @innodb_ft_server_stopword_table.setter
    def innodb_ft_server_stopword_table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_ft_server_stopword_table", value)

    @property
    @pulumi.getter(name="innodbLockWaitTimeout")
    def innodb_lock_wait_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_lock_wait_timeout")

    @innodb_lock_wait_timeout.setter
    def innodb_lock_wait_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_lock_wait_timeout", value)

    @property
    @pulumi.getter(name="innodbLogBufferSize")
    def innodb_log_buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_log_buffer_size")

    @innodb_log_buffer_size.setter
    def innodb_log_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_log_buffer_size", value)

    @property
    @pulumi.getter(name="innodbOnlineAlterLogMaxSize")
    def innodb_online_alter_log_max_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_online_alter_log_max_size")

    @innodb_online_alter_log_max_size.setter
    def innodb_online_alter_log_max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_online_alter_log_max_size", value)

    @property
    @pulumi.getter(name="innodbPrintAllDeadlocks")
    def innodb_print_all_deadlocks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_print_all_deadlocks")

    @innodb_print_all_deadlocks.setter
    def innodb_print_all_deadlocks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_print_all_deadlocks", value)

    @property
    @pulumi.getter(name="innodbRollbackOnTimeout")
    def innodb_rollback_on_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "innodb_rollback_on_timeout")

    @innodb_rollback_on_timeout.setter
    def innodb_rollback_on_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "innodb_rollback_on_timeout", value)

    @property
    @pulumi.getter(name="interactiveTimeout")
    def interactive_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interactive_timeout")

    @interactive_timeout.setter
    def interactive_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interactive_timeout", value)

    @property
    @pulumi.getter(name="maxAllowedPacket")
    def max_allowed_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_allowed_packet")

    @max_allowed_packet.setter
    def max_allowed_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_allowed_packet", value)

    @property
    @pulumi.getter(name="maxHeapTableSize")
    def max_heap_table_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_heap_table_size")

    @max_heap_table_size.setter
    def max_heap_table_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_heap_table_size", value)

    @property
    @pulumi.getter(name="netReadTimeout")
    def net_read_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_read_timeout")

    @net_read_timeout.setter
    def net_read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_read_timeout", value)

    @property
    @pulumi.getter(name="netWriteTimeout")
    def net_write_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_write_timeout")

    @net_write_timeout.setter
    def net_write_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_write_timeout", value)

    @property
    @pulumi.getter(name="sortBufferSize")
    def sort_buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort_buffer_size")

    @sort_buffer_size.setter
    def sort_buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_buffer_size", value)

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sql_mode")

    @sql_mode.setter
    def sql_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_mode", value)

    @property
    @pulumi.getter(name="sqlRequirePrimaryKey")
    def sql_require_primary_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sql_require_primary_key")

    @sql_require_primary_key.setter
    def sql_require_primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_require_primary_key", value)

    @property
    @pulumi.getter(name="tmpTableSize")
    def tmp_table_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tmp_table_size")

    @tmp_table_size.setter
    def tmp_table_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmp_table_size", value)

    @property
    @pulumi.getter(name="waitTimeout")
    def wait_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wait_timeout")

    @wait_timeout.setter
    def wait_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wait_timeout", value)


@pulumi.input_type
class ServiceMysqlUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServiceMysqlUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServicePgArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 replica_uri: Optional[pulumi.Input[str]] = None,
                 sslmode: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if replica_uri is not None:
            pulumi.set(__self__, "replica_uri", replica_uri)
        if sslmode is not None:
            pulumi.set(__self__, "sslmode", sslmode)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicaUri")
    def replica_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_uri")

    @replica_uri.setter
    def replica_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_uri", value)

    @property
    @pulumi.getter
    def sslmode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslmode")

    @sslmode.setter
    def sslmode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslmode", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ServicePgUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 backup_hour: Optional[pulumi.Input[str]] = None,
                 backup_minute: Optional[pulumi.Input[str]] = None,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 migration: Optional[pulumi.Input['ServicePgUserConfigMigrationArgs']] = None,
                 pg: Optional[pulumi.Input['ServicePgUserConfigPgArgs']] = None,
                 pg_read_replica: Optional[pulumi.Input[str]] = None,
                 pg_service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 pg_version: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input['ServicePgUserConfigPgbouncerArgs']] = None,
                 pglookout: Optional[pulumi.Input['ServicePgUserConfigPglookoutArgs']] = None,
                 private_access: Optional[pulumi.Input['ServicePgUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServicePgUserConfigPublicAccessArgs']] = None,
                 recovery_target_time: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None,
                 shared_buffers_percentage: Optional[pulumi.Input[str]] = None,
                 synchronous_replication: Optional[pulumi.Input[str]] = None,
                 timescaledb: Optional[pulumi.Input['ServicePgUserConfigTimescaledbArgs']] = None,
                 variant: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pg_read_replica is not None:
            pulumi.set(__self__, "pg_read_replica", pg_read_replica)
        if pg_service_to_fork_from is not None:
            pulumi.set(__self__, "pg_service_to_fork_from", pg_service_to_fork_from)
        if pg_version is not None:
            pulumi.set(__self__, "pg_version", pg_version)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if pglookout is not None:
            pulumi.set(__self__, "pglookout", pglookout)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if shared_buffers_percentage is not None:
            pulumi.set(__self__, "shared_buffers_percentage", shared_buffers_percentage)
        if synchronous_replication is not None:
            pulumi.set(__self__, "synchronous_replication", synchronous_replication)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional[pulumi.Input['ServicePgUserConfigMigrationArgs']]:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional[pulumi.Input['ServicePgUserConfigMigrationArgs']]):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input['ServicePgUserConfigPgArgs']]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input['ServicePgUserConfigPgArgs']]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter(name="pgReadReplica")
    def pg_read_replica(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_read_replica")

    @pg_read_replica.setter
    def pg_read_replica(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_read_replica", value)

    @property
    @pulumi.getter(name="pgServiceToForkFrom")
    def pg_service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_service_to_fork_from")

    @pg_service_to_fork_from.setter
    def pg_service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_service_to_fork_from", value)

    @property
    @pulumi.getter(name="pgVersion")
    def pg_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_version")

    @pg_version.setter
    def pg_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_version", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input['ServicePgUserConfigPgbouncerArgs']]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input['ServicePgUserConfigPgbouncerArgs']]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def pglookout(self) -> Optional[pulumi.Input['ServicePgUserConfigPglookoutArgs']]:
        return pulumi.get(self, "pglookout")

    @pglookout.setter
    def pglookout(self, value: Optional[pulumi.Input['ServicePgUserConfigPglookoutArgs']]):
        pulumi.set(self, "pglookout", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServicePgUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServicePgUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServicePgUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServicePgUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="sharedBuffersPercentage")
    def shared_buffers_percentage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_buffers_percentage")

    @shared_buffers_percentage.setter
    def shared_buffers_percentage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers_percentage", value)

    @property
    @pulumi.getter(name="synchronousReplication")
    def synchronous_replication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "synchronous_replication")

    @synchronous_replication.setter
    def synchronous_replication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronous_replication", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional[pulumi.Input['ServicePgUserConfigTimescaledbArgs']]:
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional[pulumi.Input['ServicePgUserConfigTimescaledbArgs']]):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


@pulumi.input_type
class ServicePgUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ServicePgUserConfigPgArgs:
    def __init__(__self__, *,
                 autovacuum_analyze_scale_factor: Optional[pulumi.Input[str]] = None,
                 autovacuum_analyze_threshold: Optional[pulumi.Input[str]] = None,
                 autovacuum_freeze_max_age: Optional[pulumi.Input[str]] = None,
                 autovacuum_max_workers: Optional[pulumi.Input[str]] = None,
                 autovacuum_naptime: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_cost_delay: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_cost_limit: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_scale_factor: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_threshold: Optional[pulumi.Input[str]] = None,
                 deadlock_timeout: Optional[pulumi.Input[str]] = None,
                 idle_in_transaction_session_timeout: Optional[pulumi.Input[str]] = None,
                 jit: Optional[pulumi.Input[str]] = None,
                 log_autovacuum_min_duration: Optional[pulumi.Input[str]] = None,
                 log_error_verbosity: Optional[pulumi.Input[str]] = None,
                 log_min_duration_statement: Optional[pulumi.Input[str]] = None,
                 max_locks_per_transaction: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_pred_locks_per_transaction: Optional[pulumi.Input[str]] = None,
                 max_prepared_transactions: Optional[pulumi.Input[str]] = None,
                 max_stack_depth: Optional[pulumi.Input[str]] = None,
                 max_standby_archive_delay: Optional[pulumi.Input[str]] = None,
                 max_standby_streaming_delay: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 pg_partman_bgw_dot_interval: Optional[pulumi.Input[str]] = None,
                 pg_partman_bgw_dot_role: Optional[pulumi.Input[str]] = None,
                 pg_stat_statements_track: Optional[pulumi.Input[str]] = None,
                 temp_file_limit: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 track_activity_query_size: Optional[pulumi.Input[str]] = None,
                 track_commit_timestamp: Optional[pulumi.Input[str]] = None,
                 track_functions: Optional[pulumi.Input[str]] = None,
                 wal_sender_timeout: Optional[pulumi.Input[str]] = None,
                 wal_writer_delay: Optional[pulumi.Input[str]] = None):
        if autovacuum_analyze_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_analyze_scale_factor", autovacuum_analyze_scale_factor)
        if autovacuum_analyze_threshold is not None:
            pulumi.set(__self__, "autovacuum_analyze_threshold", autovacuum_analyze_threshold)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_naptime is not None:
            pulumi.set(__self__, "autovacuum_naptime", autovacuum_naptime)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_cost_limit is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_limit", autovacuum_vacuum_cost_limit)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if deadlock_timeout is not None:
            pulumi.set(__self__, "deadlock_timeout", deadlock_timeout)
        if idle_in_transaction_session_timeout is not None:
            pulumi.set(__self__, "idle_in_transaction_session_timeout", idle_in_transaction_session_timeout)
        if jit is not None:
            pulumi.set(__self__, "jit", jit)
        if log_autovacuum_min_duration is not None:
            pulumi.set(__self__, "log_autovacuum_min_duration", log_autovacuum_min_duration)
        if log_error_verbosity is not None:
            pulumi.set(__self__, "log_error_verbosity", log_error_verbosity)
        if log_min_duration_statement is not None:
            pulumi.set(__self__, "log_min_duration_statement", log_min_duration_statement)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_parallel_workers is not None:
            pulumi.set(__self__, "max_parallel_workers", max_parallel_workers)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_pred_locks_per_transaction is not None:
            pulumi.set(__self__, "max_pred_locks_per_transaction", max_pred_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_stack_depth is not None:
            pulumi.set(__self__, "max_stack_depth", max_stack_depth)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if pg_partman_bgw_dot_interval is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_interval", pg_partman_bgw_dot_interval)
        if pg_partman_bgw_dot_role is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_role", pg_partman_bgw_dot_role)
        if pg_stat_statements_track is not None:
            pulumi.set(__self__, "pg_stat_statements_track", pg_stat_statements_track)
        if temp_file_limit is not None:
            pulumi.set(__self__, "temp_file_limit", temp_file_limit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if track_activity_query_size is not None:
            pulumi.set(__self__, "track_activity_query_size", track_activity_query_size)
        if track_commit_timestamp is not None:
            pulumi.set(__self__, "track_commit_timestamp", track_commit_timestamp)
        if track_functions is not None:
            pulumi.set(__self__, "track_functions", track_functions)
        if wal_sender_timeout is not None:
            pulumi.set(__self__, "wal_sender_timeout", wal_sender_timeout)
        if wal_writer_delay is not None:
            pulumi.set(__self__, "wal_writer_delay", wal_writer_delay)

    @property
    @pulumi.getter(name="autovacuumAnalyzeScaleFactor")
    def autovacuum_analyze_scale_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_analyze_scale_factor")

    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_analyze_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumAnalyzeThreshold")
    def autovacuum_analyze_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_analyze_threshold")

    @autovacuum_analyze_threshold.setter
    def autovacuum_analyze_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_analyze_threshold", value)

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @autovacuum_freeze_max_age.setter
    def autovacuum_freeze_max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_freeze_max_age", value)

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_max_workers")

    @autovacuum_max_workers.setter
    def autovacuum_max_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_max_workers", value)

    @property
    @pulumi.getter(name="autovacuumNaptime")
    def autovacuum_naptime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_naptime")

    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_naptime", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_cost_delay", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostLimit")
    def autovacuum_vacuum_cost_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_cost_limit")

    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_cost_limit", value)

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @autovacuum_vacuum_threshold.setter
    def autovacuum_vacuum_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_threshold", value)

    @property
    @pulumi.getter(name="deadlockTimeout")
    def deadlock_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deadlock_timeout")

    @deadlock_timeout.setter
    def deadlock_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deadlock_timeout", value)

    @property
    @pulumi.getter(name="idleInTransactionSessionTimeout")
    def idle_in_transaction_session_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idle_in_transaction_session_timeout")

    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_in_transaction_session_timeout", value)

    @property
    @pulumi.getter
    def jit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jit")

    @jit.setter
    def jit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit", value)

    @property
    @pulumi.getter(name="logAutovacuumMinDuration")
    def log_autovacuum_min_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_autovacuum_min_duration")

    @log_autovacuum_min_duration.setter
    def log_autovacuum_min_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_autovacuum_min_duration", value)

    @property
    @pulumi.getter(name="logErrorVerbosity")
    def log_error_verbosity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_error_verbosity")

    @log_error_verbosity.setter
    def log_error_verbosity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_error_verbosity", value)

    @property
    @pulumi.getter(name="logMinDurationStatement")
    def log_min_duration_statement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_min_duration_statement")

    @log_min_duration_statement.setter
    def log_min_duration_statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_min_duration_statement", value)

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_locks_per_transaction")

    @max_locks_per_transaction.setter
    def max_locks_per_transaction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxParallelWorkers")
    def max_parallel_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers")

    @max_parallel_workers.setter
    def max_parallel_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxPredLocksPerTransaction")
    def max_pred_locks_per_transaction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_pred_locks_per_transaction")

    @max_pred_locks_per_transaction.setter
    def max_pred_locks_per_transaction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_pred_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_prepared_transactions")

    @max_prepared_transactions.setter
    def max_prepared_transactions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_prepared_transactions", value)

    @property
    @pulumi.getter(name="maxStackDepth")
    def max_stack_depth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_stack_depth")

    @max_stack_depth.setter
    def max_stack_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_stack_depth", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotInterval")
    def pg_partman_bgw_dot_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_partman_bgw_dot_interval")

    @pg_partman_bgw_dot_interval.setter
    def pg_partman_bgw_dot_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_partman_bgw_dot_interval", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotRole")
    def pg_partman_bgw_dot_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_partman_bgw_dot_role")

    @pg_partman_bgw_dot_role.setter
    def pg_partman_bgw_dot_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_partman_bgw_dot_role", value)

    @property
    @pulumi.getter(name="pgStatStatementsTrack")
    def pg_stat_statements_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg_stat_statements_track")

    @pg_stat_statements_track.setter
    def pg_stat_statements_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg_stat_statements_track", value)

    @property
    @pulumi.getter(name="tempFileLimit")
    def temp_file_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "temp_file_limit")

    @temp_file_limit.setter
    def temp_file_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temp_file_limit", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="trackActivityQuerySize")
    def track_activity_query_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "track_activity_query_size")

    @track_activity_query_size.setter
    def track_activity_query_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_activity_query_size", value)

    @property
    @pulumi.getter(name="trackCommitTimestamp")
    def track_commit_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "track_commit_timestamp")

    @track_commit_timestamp.setter
    def track_commit_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_commit_timestamp", value)

    @property
    @pulumi.getter(name="trackFunctions")
    def track_functions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "track_functions")

    @track_functions.setter
    def track_functions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_functions", value)

    @property
    @pulumi.getter(name="walSenderTimeout")
    def wal_sender_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wal_sender_timeout")

    @wal_sender_timeout.setter
    def wal_sender_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_sender_timeout", value)

    @property
    @pulumi.getter(name="walWriterDelay")
    def wal_writer_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wal_writer_delay")

    @wal_writer_delay.setter
    def wal_writer_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_writer_delay", value)


@pulumi.input_type
class ServicePgUserConfigPgbouncerArgs:
    def __init__(__self__, *,
                 ignore_startup_parameters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 server_reset_query_always: Optional[pulumi.Input[str]] = None):
        if ignore_startup_parameters is not None:
            pulumi.set(__self__, "ignore_startup_parameters", ignore_startup_parameters)
        if server_reset_query_always is not None:
            pulumi.set(__self__, "server_reset_query_always", server_reset_query_always)

    @property
    @pulumi.getter(name="ignoreStartupParameters")
    def ignore_startup_parameters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore_startup_parameters")

    @ignore_startup_parameters.setter
    def ignore_startup_parameters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore_startup_parameters", value)

    @property
    @pulumi.getter(name="serverResetQueryAlways")
    def server_reset_query_always(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_reset_query_always")

    @server_reset_query_always.setter
    def server_reset_query_always(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_reset_query_always", value)


@pulumi.input_type
class ServicePgUserConfigPglookoutArgs:
    def __init__(__self__, *,
                 max_failover_replication_time_lag: Optional[pulumi.Input[str]] = None):
        if max_failover_replication_time_lag is not None:
            pulumi.set(__self__, "max_failover_replication_time_lag", max_failover_replication_time_lag)

    @property
    @pulumi.getter(name="maxFailoverReplicationTimeLag")
    def max_failover_replication_time_lag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_failover_replication_time_lag")

    @max_failover_replication_time_lag.setter
    def max_failover_replication_time_lag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_failover_replication_time_lag", value)


@pulumi.input_type
class ServicePgUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServicePgUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[pulumi.Input[str]] = None,
                 pgbouncer: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class ServicePgUserConfigTimescaledbArgs:
    def __init__(__self__, *,
                 max_background_workers: Optional[pulumi.Input[str]] = None):
        if max_background_workers is not None:
            pulumi.set(__self__, "max_background_workers", max_background_workers)

    @property
    @pulumi.getter(name="maxBackgroundWorkers")
    def max_background_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_background_workers")

    @max_background_workers.setter
    def max_background_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_background_workers", value)


@pulumi.input_type
class ServiceRedisArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceRedisUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 migration: Optional[pulumi.Input['ServiceRedisUserConfigMigrationArgs']] = None,
                 private_access: Optional[pulumi.Input['ServiceRedisUserConfigPrivateAccessArgs']] = None,
                 public_access: Optional[pulumi.Input['ServiceRedisUserConfigPublicAccessArgs']] = None,
                 redis_lfu_decay_time: Optional[pulumi.Input[str]] = None,
                 redis_lfu_log_factor: Optional[pulumi.Input[str]] = None,
                 redis_maxmemory_policy: Optional[pulumi.Input[str]] = None,
                 redis_notify_keyspace_events: Optional[pulumi.Input[str]] = None,
                 redis_ssl: Optional[pulumi.Input[str]] = None,
                 redis_timeout: Optional[pulumi.Input[str]] = None,
                 service_to_fork_from: Optional[pulumi.Input[str]] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if redis_lfu_decay_time is not None:
            pulumi.set(__self__, "redis_lfu_decay_time", redis_lfu_decay_time)
        if redis_lfu_log_factor is not None:
            pulumi.set(__self__, "redis_lfu_log_factor", redis_lfu_log_factor)
        if redis_maxmemory_policy is not None:
            pulumi.set(__self__, "redis_maxmemory_policy", redis_maxmemory_policy)
        if redis_notify_keyspace_events is not None:
            pulumi.set(__self__, "redis_notify_keyspace_events", redis_notify_keyspace_events)
        if redis_ssl is not None:
            pulumi.set(__self__, "redis_ssl", redis_ssl)
        if redis_timeout is not None:
            pulumi.set(__self__, "redis_timeout", redis_timeout)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional[pulumi.Input['ServiceRedisUserConfigMigrationArgs']]:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional[pulumi.Input['ServiceRedisUserConfigMigrationArgs']]):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input['ServiceRedisUserConfigPrivateAccessArgs']]:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input['ServiceRedisUserConfigPrivateAccessArgs']]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input['ServiceRedisUserConfigPublicAccessArgs']]:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input['ServiceRedisUserConfigPublicAccessArgs']]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="redisLfuDecayTime")
    def redis_lfu_decay_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_lfu_decay_time")

    @redis_lfu_decay_time.setter
    def redis_lfu_decay_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_lfu_decay_time", value)

    @property
    @pulumi.getter(name="redisLfuLogFactor")
    def redis_lfu_log_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_lfu_log_factor")

    @redis_lfu_log_factor.setter
    def redis_lfu_log_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_lfu_log_factor", value)

    @property
    @pulumi.getter(name="redisMaxmemoryPolicy")
    def redis_maxmemory_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_maxmemory_policy")

    @redis_maxmemory_policy.setter
    def redis_maxmemory_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_maxmemory_policy", value)

    @property
    @pulumi.getter(name="redisNotifyKeyspaceEvents")
    def redis_notify_keyspace_events(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_notify_keyspace_events")

    @redis_notify_keyspace_events.setter
    def redis_notify_keyspace_events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_notify_keyspace_events", value)

    @property
    @pulumi.getter(name="redisSsl")
    def redis_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_ssl")

    @redis_ssl.setter
    def redis_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_ssl", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_timeout", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class ServiceRedisUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ServiceRedisUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class ServiceRedisUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input[str]] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class ServiceServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 source_service_name: pulumi.Input[str]):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetCassandaCassandraArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetCassandaCassandraUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[List[str]] = None,
                 migrate_sstableloader: Optional[str] = None,
                 private_access: Optional['GetCassandaCassandraUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetCassandaCassandraUserConfigPublicAccessArgs'] = None,
                 service_to_fork_from: Optional[str] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migrate_sstableloader is not None:
            pulumi.set(__self__, "migrate_sstableloader", migrate_sstableloader)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="migrateSstableloader")
    def migrate_sstableloader(self) -> Optional[str]:
        return pulumi.get(self, "migrate_sstableloader")

    @migrate_sstableloader.setter
    def migrate_sstableloader(self, value: Optional[str]):
        pulumi.set(self, "migrate_sstableloader", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetCassandaCassandraUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetCassandaCassandraUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetCassandaCassandraUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetCassandaCassandraUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetCassandaCassandraUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetCassandaCassandraUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetCassandaComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetCassandaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetElasticSearchAclAclArgs:
    def __init__(__self__, *,
                 rules: List['GetElasticSearchAclAclRuleArgs'],
                 username: str):
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def rules(self) -> List['GetElasticSearchAclAclRuleArgs']:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: List['GetElasticSearchAclAclRuleArgs']):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: str):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetElasticSearchAclAclRuleArgs:
    def __init__(__self__, *,
                 index: str,
                 permission: str):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "permission", permission)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: str):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: str):
        pulumi.set(self, "permission", value)


@pulumi.input_type
class GetElasticSearchComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetElasticSearchElasticsearchArgs:
    def __init__(__self__, *,
                 kibana_uri: str):
        pulumi.set(__self__, "kibana_uri", kibana_uri)

    @property
    @pulumi.getter(name="kibanaUri")
    def kibana_uri(self) -> str:
        return pulumi.get(self, "kibana_uri")

    @kibana_uri.setter
    def kibana_uri(self, value: str):
        pulumi.set(self, "kibana_uri", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 disable_replication_factor_adjustment: Optional[str] = None,
                 elasticsearch: Optional['GetElasticSearchElasticsearchUserConfigElasticsearchArgs'] = None,
                 elasticsearch_version: Optional[str] = None,
                 index_patterns: Optional[List['GetElasticSearchElasticsearchUserConfigIndexPatternArgs']] = None,
                 ip_filters: Optional[List[str]] = None,
                 kibana: Optional['GetElasticSearchElasticsearchUserConfigKibanaArgs'] = None,
                 max_index_count: Optional[str] = None,
                 private_access: Optional['GetElasticSearchElasticsearchUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetElasticSearchElasticsearchUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if disable_replication_factor_adjustment is not None:
            pulumi.set(__self__, "disable_replication_factor_adjustment", disable_replication_factor_adjustment)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_version is not None:
            pulumi.set(__self__, "elasticsearch_version", elasticsearch_version)
        if index_patterns is not None:
            pulumi.set(__self__, "index_patterns", index_patterns)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="disableReplicationFactorAdjustment")
    def disable_replication_factor_adjustment(self) -> Optional[str]:
        return pulumi.get(self, "disable_replication_factor_adjustment")

    @disable_replication_factor_adjustment.setter
    def disable_replication_factor_adjustment(self, value: Optional[str]):
        pulumi.set(self, "disable_replication_factor_adjustment", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional['GetElasticSearchElasticsearchUserConfigElasticsearchArgs']:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional['GetElasticSearchElasticsearchUserConfigElasticsearchArgs']):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter(name="elasticsearchVersion")
    def elasticsearch_version(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_version")

    @elasticsearch_version.setter
    def elasticsearch_version(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_version", value)

    @property
    @pulumi.getter(name="indexPatterns")
    def index_patterns(self) -> Optional[List['GetElasticSearchElasticsearchUserConfigIndexPatternArgs']]:
        return pulumi.get(self, "index_patterns")

    @index_patterns.setter
    def index_patterns(self, value: Optional[List['GetElasticSearchElasticsearchUserConfigIndexPatternArgs']]):
        pulumi.set(self, "index_patterns", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional['GetElasticSearchElasticsearchUserConfigKibanaArgs']:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional['GetElasticSearchElasticsearchUserConfigKibanaArgs']):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[str]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[str]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetElasticSearchElasticsearchUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetElasticSearchElasticsearchUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetElasticSearchElasticsearchUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetElasticSearchElasticsearchUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigElasticsearchArgs:
    def __init__(__self__, *,
                 action_auto_create_index_enabled: Optional[str] = None,
                 action_destructive_requires_name: Optional[str] = None,
                 http_max_content_length: Optional[str] = None,
                 http_max_header_size: Optional[str] = None,
                 http_max_initial_line_length: Optional[str] = None,
                 indices_fielddata_cache_size: Optional[str] = None,
                 indices_memory_index_buffer_size: Optional[str] = None,
                 indices_queries_cache_size: Optional[str] = None,
                 indices_query_bool_max_clause_count: Optional[str] = None,
                 reindex_remote_whitelists: Optional[List[str]] = None,
                 search_max_buckets: Optional[str] = None,
                 thread_pool_analyze_queue_size: Optional[str] = None,
                 thread_pool_analyze_size: Optional[str] = None,
                 thread_pool_force_merge_size: Optional[str] = None,
                 thread_pool_get_queue_size: Optional[str] = None,
                 thread_pool_get_size: Optional[str] = None,
                 thread_pool_index_queue_size: Optional[str] = None,
                 thread_pool_index_size: Optional[str] = None,
                 thread_pool_search_queue_size: Optional[str] = None,
                 thread_pool_search_size: Optional[str] = None,
                 thread_pool_search_throttled_queue_size: Optional[str] = None,
                 thread_pool_search_throttled_size: Optional[str] = None,
                 thread_pool_write_queue_size: Optional[str] = None,
                 thread_pool_write_size: Optional[str] = None):
        if action_auto_create_index_enabled is not None:
            pulumi.set(__self__, "action_auto_create_index_enabled", action_auto_create_index_enabled)
        if action_destructive_requires_name is not None:
            pulumi.set(__self__, "action_destructive_requires_name", action_destructive_requires_name)
        if http_max_content_length is not None:
            pulumi.set(__self__, "http_max_content_length", http_max_content_length)
        if http_max_header_size is not None:
            pulumi.set(__self__, "http_max_header_size", http_max_header_size)
        if http_max_initial_line_length is not None:
            pulumi.set(__self__, "http_max_initial_line_length", http_max_initial_line_length)
        if indices_fielddata_cache_size is not None:
            pulumi.set(__self__, "indices_fielddata_cache_size", indices_fielddata_cache_size)
        if indices_memory_index_buffer_size is not None:
            pulumi.set(__self__, "indices_memory_index_buffer_size", indices_memory_index_buffer_size)
        if indices_queries_cache_size is not None:
            pulumi.set(__self__, "indices_queries_cache_size", indices_queries_cache_size)
        if indices_query_bool_max_clause_count is not None:
            pulumi.set(__self__, "indices_query_bool_max_clause_count", indices_query_bool_max_clause_count)
        if reindex_remote_whitelists is not None:
            pulumi.set(__self__, "reindex_remote_whitelists", reindex_remote_whitelists)
        if search_max_buckets is not None:
            pulumi.set(__self__, "search_max_buckets", search_max_buckets)
        if thread_pool_analyze_queue_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_queue_size", thread_pool_analyze_queue_size)
        if thread_pool_analyze_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_size", thread_pool_analyze_size)
        if thread_pool_force_merge_size is not None:
            pulumi.set(__self__, "thread_pool_force_merge_size", thread_pool_force_merge_size)
        if thread_pool_get_queue_size is not None:
            pulumi.set(__self__, "thread_pool_get_queue_size", thread_pool_get_queue_size)
        if thread_pool_get_size is not None:
            pulumi.set(__self__, "thread_pool_get_size", thread_pool_get_size)
        if thread_pool_index_queue_size is not None:
            pulumi.set(__self__, "thread_pool_index_queue_size", thread_pool_index_queue_size)
        if thread_pool_index_size is not None:
            pulumi.set(__self__, "thread_pool_index_size", thread_pool_index_size)
        if thread_pool_search_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_queue_size", thread_pool_search_queue_size)
        if thread_pool_search_size is not None:
            pulumi.set(__self__, "thread_pool_search_size", thread_pool_search_size)
        if thread_pool_search_throttled_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_queue_size", thread_pool_search_throttled_queue_size)
        if thread_pool_search_throttled_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_size", thread_pool_search_throttled_size)
        if thread_pool_write_queue_size is not None:
            pulumi.set(__self__, "thread_pool_write_queue_size", thread_pool_write_queue_size)
        if thread_pool_write_size is not None:
            pulumi.set(__self__, "thread_pool_write_size", thread_pool_write_size)

    @property
    @pulumi.getter(name="actionAutoCreateIndexEnabled")
    def action_auto_create_index_enabled(self) -> Optional[str]:
        return pulumi.get(self, "action_auto_create_index_enabled")

    @action_auto_create_index_enabled.setter
    def action_auto_create_index_enabled(self, value: Optional[str]):
        pulumi.set(self, "action_auto_create_index_enabled", value)

    @property
    @pulumi.getter(name="actionDestructiveRequiresName")
    def action_destructive_requires_name(self) -> Optional[str]:
        return pulumi.get(self, "action_destructive_requires_name")

    @action_destructive_requires_name.setter
    def action_destructive_requires_name(self, value: Optional[str]):
        pulumi.set(self, "action_destructive_requires_name", value)

    @property
    @pulumi.getter(name="httpMaxContentLength")
    def http_max_content_length(self) -> Optional[str]:
        return pulumi.get(self, "http_max_content_length")

    @http_max_content_length.setter
    def http_max_content_length(self, value: Optional[str]):
        pulumi.set(self, "http_max_content_length", value)

    @property
    @pulumi.getter(name="httpMaxHeaderSize")
    def http_max_header_size(self) -> Optional[str]:
        return pulumi.get(self, "http_max_header_size")

    @http_max_header_size.setter
    def http_max_header_size(self, value: Optional[str]):
        pulumi.set(self, "http_max_header_size", value)

    @property
    @pulumi.getter(name="httpMaxInitialLineLength")
    def http_max_initial_line_length(self) -> Optional[str]:
        return pulumi.get(self, "http_max_initial_line_length")

    @http_max_initial_line_length.setter
    def http_max_initial_line_length(self, value: Optional[str]):
        pulumi.set(self, "http_max_initial_line_length", value)

    @property
    @pulumi.getter(name="indicesFielddataCacheSize")
    def indices_fielddata_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "indices_fielddata_cache_size")

    @indices_fielddata_cache_size.setter
    def indices_fielddata_cache_size(self, value: Optional[str]):
        pulumi.set(self, "indices_fielddata_cache_size", value)

    @property
    @pulumi.getter(name="indicesMemoryIndexBufferSize")
    def indices_memory_index_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "indices_memory_index_buffer_size")

    @indices_memory_index_buffer_size.setter
    def indices_memory_index_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "indices_memory_index_buffer_size", value)

    @property
    @pulumi.getter(name="indicesQueriesCacheSize")
    def indices_queries_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "indices_queries_cache_size")

    @indices_queries_cache_size.setter
    def indices_queries_cache_size(self, value: Optional[str]):
        pulumi.set(self, "indices_queries_cache_size", value)

    @property
    @pulumi.getter(name="indicesQueryBoolMaxClauseCount")
    def indices_query_bool_max_clause_count(self) -> Optional[str]:
        return pulumi.get(self, "indices_query_bool_max_clause_count")

    @indices_query_bool_max_clause_count.setter
    def indices_query_bool_max_clause_count(self, value: Optional[str]):
        pulumi.set(self, "indices_query_bool_max_clause_count", value)

    @property
    @pulumi.getter(name="reindexRemoteWhitelists")
    def reindex_remote_whitelists(self) -> Optional[List[str]]:
        return pulumi.get(self, "reindex_remote_whitelists")

    @reindex_remote_whitelists.setter
    def reindex_remote_whitelists(self, value: Optional[List[str]]):
        pulumi.set(self, "reindex_remote_whitelists", value)

    @property
    @pulumi.getter(name="searchMaxBuckets")
    def search_max_buckets(self) -> Optional[str]:
        return pulumi.get(self, "search_max_buckets")

    @search_max_buckets.setter
    def search_max_buckets(self, value: Optional[str]):
        pulumi.set(self, "search_max_buckets", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeQueueSize")
    def thread_pool_analyze_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_analyze_queue_size")

    @thread_pool_analyze_queue_size.setter
    def thread_pool_analyze_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_analyze_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeSize")
    def thread_pool_analyze_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_analyze_size")

    @thread_pool_analyze_size.setter
    def thread_pool_analyze_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_analyze_size", value)

    @property
    @pulumi.getter(name="threadPoolForceMergeSize")
    def thread_pool_force_merge_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_force_merge_size")

    @thread_pool_force_merge_size.setter
    def thread_pool_force_merge_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_force_merge_size", value)

    @property
    @pulumi.getter(name="threadPoolGetQueueSize")
    def thread_pool_get_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_get_queue_size")

    @thread_pool_get_queue_size.setter
    def thread_pool_get_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_get_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolGetSize")
    def thread_pool_get_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_get_size")

    @thread_pool_get_size.setter
    def thread_pool_get_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_get_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexQueueSize")
    def thread_pool_index_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_index_queue_size")

    @thread_pool_index_queue_size.setter
    def thread_pool_index_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_index_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexSize")
    def thread_pool_index_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_index_size")

    @thread_pool_index_size.setter
    def thread_pool_index_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_index_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchQueueSize")
    def thread_pool_search_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_queue_size")

    @thread_pool_search_queue_size.setter
    def thread_pool_search_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchSize")
    def thread_pool_search_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_size")

    @thread_pool_search_size.setter
    def thread_pool_search_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledQueueSize")
    def thread_pool_search_throttled_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_throttled_queue_size")

    @thread_pool_search_throttled_queue_size.setter
    def thread_pool_search_throttled_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_throttled_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledSize")
    def thread_pool_search_throttled_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_throttled_size")

    @thread_pool_search_throttled_size.setter
    def thread_pool_search_throttled_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_throttled_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteQueueSize")
    def thread_pool_write_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_write_queue_size")

    @thread_pool_write_queue_size.setter
    def thread_pool_write_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_write_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteSize")
    def thread_pool_write_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_write_size")

    @thread_pool_write_size.setter
    def thread_pool_write_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_write_size", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigIndexPatternArgs:
    def __init__(__self__, *,
                 max_index_count: Optional[str] = None,
                 pattern: Optional[str] = None):
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[str]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[str]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[str]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigKibanaArgs:
    def __init__(__self__, *,
                 elasticsearch_request_timeout: Optional[str] = None,
                 enabled: Optional[str] = None,
                 max_old_space_size: Optional[str] = None):
        if elasticsearch_request_timeout is not None:
            pulumi.set(__self__, "elasticsearch_request_timeout", elasticsearch_request_timeout)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_old_space_size is not None:
            pulumi.set(__self__, "max_old_space_size", max_old_space_size)

    @property
    @pulumi.getter(name="elasticsearchRequestTimeout")
    def elasticsearch_request_timeout(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_request_timeout")

    @elasticsearch_request_timeout.setter
    def elasticsearch_request_timeout(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_request_timeout", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxOldSpaceSize")
    def max_old_space_size(self) -> Optional[str]:
        return pulumi.get(self, "max_old_space_size")

    @max_old_space_size.setter
    def max_old_space_size(self, value: Optional[str]):
        pulumi.set(self, "max_old_space_size", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[str] = None,
                 kibana: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[str]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[str]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetElasticSearchElasticsearchUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[str] = None,
                 kibana: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[str]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[str]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetElasticSearchServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetGrafanaComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetGrafanaGrafanaArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetGrafanaGrafanaUserConfigArgs:
    def __init__(__self__, *,
                 alerting_enabled: Optional[str] = None,
                 alerting_error_or_timeout: Optional[str] = None,
                 alerting_nodata_or_nullvalues: Optional[str] = None,
                 allow_embedding: Optional[str] = None,
                 auth_basic_enabled: Optional[str] = None,
                 auth_generic_oauth: Optional['GetGrafanaGrafanaUserConfigAuthGenericOauthArgs'] = None,
                 auth_github: Optional['GetGrafanaGrafanaUserConfigAuthGithubArgs'] = None,
                 auth_gitlab: Optional['GetGrafanaGrafanaUserConfigAuthGitlabArgs'] = None,
                 auth_google: Optional['GetGrafanaGrafanaUserConfigAuthGoogleArgs'] = None,
                 cookie_samesite: Optional[str] = None,
                 custom_domain: Optional[str] = None,
                 dashboards_versions_to_keep: Optional[str] = None,
                 dataproxy_send_user_header: Optional[str] = None,
                 dataproxy_timeout: Optional[str] = None,
                 disable_gravatar: Optional[str] = None,
                 editors_can_admin: Optional[str] = None,
                 external_image_storage: Optional['GetGrafanaGrafanaUserConfigExternalImageStorageArgs'] = None,
                 google_analytics_ua_id: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 metrics_enabled: Optional[str] = None,
                 private_access: Optional['GetGrafanaGrafanaUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetGrafanaGrafanaUserConfigPublicAccessArgs'] = None,
                 smtp_server: Optional['GetGrafanaGrafanaUserConfigSmtpServerArgs'] = None,
                 user_auto_assign_org: Optional[str] = None,
                 user_auto_assign_org_role: Optional[str] = None,
                 viewers_can_edit: Optional[str] = None):
        if alerting_enabled is not None:
            pulumi.set(__self__, "alerting_enabled", alerting_enabled)
        if alerting_error_or_timeout is not None:
            pulumi.set(__self__, "alerting_error_or_timeout", alerting_error_or_timeout)
        if alerting_nodata_or_nullvalues is not None:
            pulumi.set(__self__, "alerting_nodata_or_nullvalues", alerting_nodata_or_nullvalues)
        if allow_embedding is not None:
            pulumi.set(__self__, "allow_embedding", allow_embedding)
        if auth_basic_enabled is not None:
            pulumi.set(__self__, "auth_basic_enabled", auth_basic_enabled)
        if auth_generic_oauth is not None:
            pulumi.set(__self__, "auth_generic_oauth", auth_generic_oauth)
        if auth_github is not None:
            pulumi.set(__self__, "auth_github", auth_github)
        if auth_gitlab is not None:
            pulumi.set(__self__, "auth_gitlab", auth_gitlab)
        if auth_google is not None:
            pulumi.set(__self__, "auth_google", auth_google)
        if cookie_samesite is not None:
            pulumi.set(__self__, "cookie_samesite", cookie_samesite)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if dashboards_versions_to_keep is not None:
            pulumi.set(__self__, "dashboards_versions_to_keep", dashboards_versions_to_keep)
        if dataproxy_send_user_header is not None:
            pulumi.set(__self__, "dataproxy_send_user_header", dataproxy_send_user_header)
        if dataproxy_timeout is not None:
            pulumi.set(__self__, "dataproxy_timeout", dataproxy_timeout)
        if disable_gravatar is not None:
            pulumi.set(__self__, "disable_gravatar", disable_gravatar)
        if editors_can_admin is not None:
            pulumi.set(__self__, "editors_can_admin", editors_can_admin)
        if external_image_storage is not None:
            pulumi.set(__self__, "external_image_storage", external_image_storage)
        if google_analytics_ua_id is not None:
            pulumi.set(__self__, "google_analytics_ua_id", google_analytics_ua_id)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if smtp_server is not None:
            pulumi.set(__self__, "smtp_server", smtp_server)
        if user_auto_assign_org is not None:
            pulumi.set(__self__, "user_auto_assign_org", user_auto_assign_org)
        if user_auto_assign_org_role is not None:
            pulumi.set(__self__, "user_auto_assign_org_role", user_auto_assign_org_role)
        if viewers_can_edit is not None:
            pulumi.set(__self__, "viewers_can_edit", viewers_can_edit)

    @property
    @pulumi.getter(name="alertingEnabled")
    def alerting_enabled(self) -> Optional[str]:
        return pulumi.get(self, "alerting_enabled")

    @alerting_enabled.setter
    def alerting_enabled(self, value: Optional[str]):
        pulumi.set(self, "alerting_enabled", value)

    @property
    @pulumi.getter(name="alertingErrorOrTimeout")
    def alerting_error_or_timeout(self) -> Optional[str]:
        return pulumi.get(self, "alerting_error_or_timeout")

    @alerting_error_or_timeout.setter
    def alerting_error_or_timeout(self, value: Optional[str]):
        pulumi.set(self, "alerting_error_or_timeout", value)

    @property
    @pulumi.getter(name="alertingNodataOrNullvalues")
    def alerting_nodata_or_nullvalues(self) -> Optional[str]:
        return pulumi.get(self, "alerting_nodata_or_nullvalues")

    @alerting_nodata_or_nullvalues.setter
    def alerting_nodata_or_nullvalues(self, value: Optional[str]):
        pulumi.set(self, "alerting_nodata_or_nullvalues", value)

    @property
    @pulumi.getter(name="allowEmbedding")
    def allow_embedding(self) -> Optional[str]:
        return pulumi.get(self, "allow_embedding")

    @allow_embedding.setter
    def allow_embedding(self, value: Optional[str]):
        pulumi.set(self, "allow_embedding", value)

    @property
    @pulumi.getter(name="authBasicEnabled")
    def auth_basic_enabled(self) -> Optional[str]:
        return pulumi.get(self, "auth_basic_enabled")

    @auth_basic_enabled.setter
    def auth_basic_enabled(self, value: Optional[str]):
        pulumi.set(self, "auth_basic_enabled", value)

    @property
    @pulumi.getter(name="authGenericOauth")
    def auth_generic_oauth(self) -> Optional['GetGrafanaGrafanaUserConfigAuthGenericOauthArgs']:
        return pulumi.get(self, "auth_generic_oauth")

    @auth_generic_oauth.setter
    def auth_generic_oauth(self, value: Optional['GetGrafanaGrafanaUserConfigAuthGenericOauthArgs']):
        pulumi.set(self, "auth_generic_oauth", value)

    @property
    @pulumi.getter(name="authGithub")
    def auth_github(self) -> Optional['GetGrafanaGrafanaUserConfigAuthGithubArgs']:
        return pulumi.get(self, "auth_github")

    @auth_github.setter
    def auth_github(self, value: Optional['GetGrafanaGrafanaUserConfigAuthGithubArgs']):
        pulumi.set(self, "auth_github", value)

    @property
    @pulumi.getter(name="authGitlab")
    def auth_gitlab(self) -> Optional['GetGrafanaGrafanaUserConfigAuthGitlabArgs']:
        return pulumi.get(self, "auth_gitlab")

    @auth_gitlab.setter
    def auth_gitlab(self, value: Optional['GetGrafanaGrafanaUserConfigAuthGitlabArgs']):
        pulumi.set(self, "auth_gitlab", value)

    @property
    @pulumi.getter(name="authGoogle")
    def auth_google(self) -> Optional['GetGrafanaGrafanaUserConfigAuthGoogleArgs']:
        return pulumi.get(self, "auth_google")

    @auth_google.setter
    def auth_google(self, value: Optional['GetGrafanaGrafanaUserConfigAuthGoogleArgs']):
        pulumi.set(self, "auth_google", value)

    @property
    @pulumi.getter(name="cookieSamesite")
    def cookie_samesite(self) -> Optional[str]:
        return pulumi.get(self, "cookie_samesite")

    @cookie_samesite.setter
    def cookie_samesite(self, value: Optional[str]):
        pulumi.set(self, "cookie_samesite", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="dashboardsVersionsToKeep")
    def dashboards_versions_to_keep(self) -> Optional[str]:
        return pulumi.get(self, "dashboards_versions_to_keep")

    @dashboards_versions_to_keep.setter
    def dashboards_versions_to_keep(self, value: Optional[str]):
        pulumi.set(self, "dashboards_versions_to_keep", value)

    @property
    @pulumi.getter(name="dataproxySendUserHeader")
    def dataproxy_send_user_header(self) -> Optional[str]:
        return pulumi.get(self, "dataproxy_send_user_header")

    @dataproxy_send_user_header.setter
    def dataproxy_send_user_header(self, value: Optional[str]):
        pulumi.set(self, "dataproxy_send_user_header", value)

    @property
    @pulumi.getter(name="dataproxyTimeout")
    def dataproxy_timeout(self) -> Optional[str]:
        return pulumi.get(self, "dataproxy_timeout")

    @dataproxy_timeout.setter
    def dataproxy_timeout(self, value: Optional[str]):
        pulumi.set(self, "dataproxy_timeout", value)

    @property
    @pulumi.getter(name="disableGravatar")
    def disable_gravatar(self) -> Optional[str]:
        return pulumi.get(self, "disable_gravatar")

    @disable_gravatar.setter
    def disable_gravatar(self, value: Optional[str]):
        pulumi.set(self, "disable_gravatar", value)

    @property
    @pulumi.getter(name="editorsCanAdmin")
    def editors_can_admin(self) -> Optional[str]:
        return pulumi.get(self, "editors_can_admin")

    @editors_can_admin.setter
    def editors_can_admin(self, value: Optional[str]):
        pulumi.set(self, "editors_can_admin", value)

    @property
    @pulumi.getter(name="externalImageStorage")
    def external_image_storage(self) -> Optional['GetGrafanaGrafanaUserConfigExternalImageStorageArgs']:
        return pulumi.get(self, "external_image_storage")

    @external_image_storage.setter
    def external_image_storage(self, value: Optional['GetGrafanaGrafanaUserConfigExternalImageStorageArgs']):
        pulumi.set(self, "external_image_storage", value)

    @property
    @pulumi.getter(name="googleAnalyticsUaId")
    def google_analytics_ua_id(self) -> Optional[str]:
        return pulumi.get(self, "google_analytics_ua_id")

    @google_analytics_ua_id.setter
    def google_analytics_ua_id(self, value: Optional[str]):
        pulumi.set(self, "google_analytics_ua_id", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[str]:
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[str]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetGrafanaGrafanaUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetGrafanaGrafanaUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetGrafanaGrafanaUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetGrafanaGrafanaUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="smtpServer")
    def smtp_server(self) -> Optional['GetGrafanaGrafanaUserConfigSmtpServerArgs']:
        return pulumi.get(self, "smtp_server")

    @smtp_server.setter
    def smtp_server(self, value: Optional['GetGrafanaGrafanaUserConfigSmtpServerArgs']):
        pulumi.set(self, "smtp_server", value)

    @property
    @pulumi.getter(name="userAutoAssignOrg")
    def user_auto_assign_org(self) -> Optional[str]:
        return pulumi.get(self, "user_auto_assign_org")

    @user_auto_assign_org.setter
    def user_auto_assign_org(self, value: Optional[str]):
        pulumi.set(self, "user_auto_assign_org", value)

    @property
    @pulumi.getter(name="userAutoAssignOrgRole")
    def user_auto_assign_org_role(self) -> Optional[str]:
        return pulumi.get(self, "user_auto_assign_org_role")

    @user_auto_assign_org_role.setter
    def user_auto_assign_org_role(self, value: Optional[str]):
        pulumi.set(self, "user_auto_assign_org_role", value)

    @property
    @pulumi.getter(name="viewersCanEdit")
    def viewers_can_edit(self) -> Optional[str]:
        return pulumi.get(self, "viewers_can_edit")

    @viewers_can_edit.setter
    def viewers_can_edit(self, value: Optional[str]):
        pulumi.set(self, "viewers_can_edit", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigAuthGenericOauthArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_domains: Optional[List[str]] = None,
                 allowed_organizations: Optional[List[str]] = None,
                 api_url: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 name: Optional[str] = None,
                 scopes: Optional[List[str]] = None,
                 token_url: Optional[str] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[List[str]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[List[str]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[str]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigAuthGithubArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_organizations: Optional[List[str]] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 team_ids: Optional[List[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if team_ids is not None:
            pulumi.set(__self__, "team_ids", team_ids)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="teamIds")
    def team_ids(self) -> Optional[List[str]]:
        return pulumi.get(self, "team_ids")

    @team_ids.setter
    def team_ids(self, value: Optional[List[str]]):
        pulumi.set(self, "team_ids", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigAuthGitlabArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_groups: Optional[List[str]] = None,
                 api_url: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 token_url: Optional[str] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_groups is not None:
            pulumi.set(__self__, "allowed_groups", allowed_groups)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedGroups")
    def allowed_groups(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_groups")

    @allowed_groups.setter
    def allowed_groups(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_groups", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[str]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigAuthGoogleArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_domains: Optional[List[str]] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigExternalImageStorageArgs:
    def __init__(__self__, *,
                 access_key: Optional[str] = None,
                 bucket_url: Optional[str] = None,
                 provider: Optional[str] = None,
                 secret_key: Optional[str] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket_url is not None:
            pulumi.set(__self__, "bucket_url", bucket_url)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> Optional[str]:
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: Optional[str]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[str]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[str] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[str]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[str]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[str] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[str]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[str]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GetGrafanaGrafanaUserConfigSmtpServerArgs:
    def __init__(__self__, *,
                 from_address: Optional[str] = None,
                 from_name: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 skip_verify: Optional[str] = None,
                 username: Optional[str] = None):
        if from_address is not None:
            pulumi.set(__self__, "from_address", from_address)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[str]:
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[str]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetGrafanaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetInfluxDbComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetInfluxDbInfluxdbArgs:
    def __init__(__self__, *,
                 database_name: str):
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: str):
        pulumi.set(self, "database_name", value)


@pulumi.input_type
class GetInfluxDbInfluxdbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 private_access: Optional['GetInfluxDbInfluxdbUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetInfluxDbInfluxdbUserConfigPublicAccessArgs'] = None,
                 service_to_fork_from: Optional[str] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetInfluxDbInfluxdbUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetInfluxDbInfluxdbUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetInfluxDbInfluxdbUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetInfluxDbInfluxdbUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetInfluxDbInfluxdbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[str] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[str]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[str]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class GetInfluxDbInfluxdbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[str] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[str]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[str]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class GetInfluxDbServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetKafkaComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetKafkaConnectComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetKafkaConnectKafkaConnectArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetKafkaConnectKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[List[str]] = None,
                 kafka_connect: Optional['GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs'] = None,
                 private_access: Optional['GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs'] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional['GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs']:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional['GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs']):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)


@pulumi.input_type
class GetKafkaConnectKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[str] = None,
                 consumer_auto_offset_reset: Optional[str] = None,
                 consumer_isolation_level: Optional[str] = None,
                 consumer_max_poll_interval_ms: Optional[str] = None,
                 consumer_max_poll_records: Optional[str] = None,
                 offset_flush_interval_ms: Optional[str] = None,
                 offset_flush_timeout_ms: Optional[str] = None,
                 session_timeout_ms: Optional[str] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[str]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[str]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[str]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[str]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[str]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[str]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class GetKafkaConnectKafkaConnectUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetKafkaConnectKafkaConnectUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetKafkaConnectServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetKafkaConnectorTaskArgs:
    def __init__(__self__, *,
                 connector: str,
                 task: float):
        pulumi.set(__self__, "connector", connector)
        pulumi.set(__self__, "task", task)

    @property
    @pulumi.getter
    def connector(self) -> str:
        return pulumi.get(self, "connector")

    @connector.setter
    def connector(self, value: str):
        pulumi.set(self, "connector", value)

    @property
    @pulumi.getter
    def task(self) -> float:
        return pulumi.get(self, "task")

    @task.setter
    def task(self, value: float):
        pulumi.set(self, "task", value)


@pulumi.input_type
class GetKafkaKafkaArgs:
    def __init__(__self__, *,
                 access_cert: str,
                 access_key: str,
                 connect_uri: str,
                 rest_uri: str,
                 schema_registry_uri: str):
        pulumi.set(__self__, "access_cert", access_cert)
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "connect_uri", connect_uri)
        pulumi.set(__self__, "rest_uri", rest_uri)
        pulumi.set(__self__, "schema_registry_uri", schema_registry_uri)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> str:
        return pulumi.get(self, "access_cert")

    @access_cert.setter
    def access_cert(self, value: str):
        pulumi.set(self, "access_cert", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: str):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="connectUri")
    def connect_uri(self) -> str:
        return pulumi.get(self, "connect_uri")

    @connect_uri.setter
    def connect_uri(self, value: str):
        pulumi.set(self, "connect_uri", value)

    @property
    @pulumi.getter(name="restUri")
    def rest_uri(self) -> str:
        return pulumi.get(self, "rest_uri")

    @rest_uri.setter
    def rest_uri(self, value: str):
        pulumi.set(self, "rest_uri", value)

    @property
    @pulumi.getter(name="schemaRegistryUri")
    def schema_registry_uri(self) -> str:
        return pulumi.get(self, "schema_registry_uri")

    @schema_registry_uri.setter
    def schema_registry_uri(self, value: str):
        pulumi.set(self, "schema_registry_uri", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 kafka: Optional['GetKafkaKafkaUserConfigKafkaArgs'] = None,
                 kafka_authentication_methods: Optional['GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs'] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_connect_config: Optional['GetKafkaKafkaUserConfigKafkaConnectConfigArgs'] = None,
                 kafka_rest: Optional[str] = None,
                 kafka_rest_config: Optional['GetKafkaKafkaUserConfigKafkaRestConfigArgs'] = None,
                 kafka_version: Optional[str] = None,
                 private_access: Optional['GetKafkaKafkaUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetKafkaKafkaUserConfigPublicAccessArgs'] = None,
                 schema_registry: Optional[str] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_authentication_methods is not None:
            pulumi.set(__self__, "kafka_authentication_methods", kafka_authentication_methods)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_connect_config is not None:
            pulumi.set(__self__, "kafka_connect_config", kafka_connect_config)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if kafka_rest_config is not None:
            pulumi.set(__self__, "kafka_rest_config", kafka_rest_config)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional['GetKafkaKafkaUserConfigKafkaArgs']:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional['GetKafkaKafkaUserConfigKafkaArgs']):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethods")
    def kafka_authentication_methods(self) -> Optional['GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']:
        return pulumi.get(self, "kafka_authentication_methods")

    @kafka_authentication_methods.setter
    def kafka_authentication_methods(self, value: Optional['GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs']):
        pulumi.set(self, "kafka_authentication_methods", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaConnectConfig")
    def kafka_connect_config(self) -> Optional['GetKafkaKafkaUserConfigKafkaConnectConfigArgs']:
        return pulumi.get(self, "kafka_connect_config")

    @kafka_connect_config.setter
    def kafka_connect_config(self, value: Optional['GetKafkaKafkaUserConfigKafkaConnectConfigArgs']):
        pulumi.set(self, "kafka_connect_config", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="kafkaRestConfig")
    def kafka_rest_config(self) -> Optional['GetKafkaKafkaUserConfigKafkaRestConfigArgs']:
        return pulumi.get(self, "kafka_rest_config")

    @kafka_rest_config.setter
    def kafka_rest_config(self, value: Optional['GetKafkaKafkaUserConfigKafkaRestConfigArgs']):
        pulumi.set(self, "kafka_rest_config", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[str]:
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[str]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetKafkaKafkaUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetKafkaKafkaUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetKafkaKafkaUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetKafkaKafkaUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigKafkaArgs:
    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[str] = None,
                 compression_type: Optional[str] = None,
                 connections_max_idle_ms: Optional[str] = None,
                 default_replication_factor: Optional[str] = None,
                 group_max_session_timeout_ms: Optional[str] = None,
                 group_min_session_timeout_ms: Optional[str] = None,
                 log_cleaner_max_compaction_lag_ms: Optional[str] = None,
                 log_cleaner_min_cleanable_ratio: Optional[str] = None,
                 log_cleaner_min_compaction_lag_ms: Optional[str] = None,
                 log_cleanup_policy: Optional[str] = None,
                 log_message_timestamp_difference_max_ms: Optional[str] = None,
                 log_message_timestamp_type: Optional[str] = None,
                 log_retention_bytes: Optional[str] = None,
                 log_retention_hours: Optional[str] = None,
                 log_segment_bytes: Optional[str] = None,
                 max_connections_per_ip: Optional[str] = None,
                 max_incremental_fetch_session_cache_slots: Optional[str] = None,
                 message_max_bytes: Optional[str] = None,
                 num_partitions: Optional[str] = None,
                 offsets_retention_minutes: Optional[str] = None,
                 producer_purgatory_purge_interval_requests: Optional[str] = None,
                 replica_fetch_max_bytes: Optional[str] = None,
                 replica_fetch_response_max_bytes: Optional[str] = None,
                 socket_request_max_bytes: Optional[str] = None):
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if connections_max_idle_ms is not None:
            pulumi.set(__self__, "connections_max_idle_ms", connections_max_idle_ms)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if group_max_session_timeout_ms is not None:
            pulumi.set(__self__, "group_max_session_timeout_ms", group_max_session_timeout_ms)
        if group_min_session_timeout_ms is not None:
            pulumi.set(__self__, "group_min_session_timeout_ms", group_min_session_timeout_ms)
        if log_cleaner_max_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_max_compaction_lag_ms", log_cleaner_max_compaction_lag_ms)
        if log_cleaner_min_cleanable_ratio is not None:
            pulumi.set(__self__, "log_cleaner_min_cleanable_ratio", log_cleaner_min_cleanable_ratio)
        if log_cleaner_min_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_min_compaction_lag_ms", log_cleaner_min_compaction_lag_ms)
        if log_cleanup_policy is not None:
            pulumi.set(__self__, "log_cleanup_policy", log_cleanup_policy)
        if log_message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "log_message_timestamp_difference_max_ms", log_message_timestamp_difference_max_ms)
        if log_message_timestamp_type is not None:
            pulumi.set(__self__, "log_message_timestamp_type", log_message_timestamp_type)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if max_connections_per_ip is not None:
            pulumi.set(__self__, "max_connections_per_ip", max_connections_per_ip)
        if max_incremental_fetch_session_cache_slots is not None:
            pulumi.set(__self__, "max_incremental_fetch_session_cache_slots", max_incremental_fetch_session_cache_slots)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if producer_purgatory_purge_interval_requests is not None:
            pulumi.set(__self__, "producer_purgatory_purge_interval_requests", producer_purgatory_purge_interval_requests)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if replica_fetch_response_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_response_max_bytes", replica_fetch_response_max_bytes)
        if socket_request_max_bytes is not None:
            pulumi.set(__self__, "socket_request_max_bytes", socket_request_max_bytes)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[str]:
        return pulumi.get(self, "auto_create_topics_enable")

    @auto_create_topics_enable.setter
    def auto_create_topics_enable(self, value: Optional[str]):
        pulumi.set(self, "auto_create_topics_enable", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[str]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="connectionsMaxIdleMs")
    def connections_max_idle_ms(self) -> Optional[str]:
        return pulumi.get(self, "connections_max_idle_ms")

    @connections_max_idle_ms.setter
    def connections_max_idle_ms(self, value: Optional[str]):
        pulumi.set(self, "connections_max_idle_ms", value)

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[str]:
        return pulumi.get(self, "default_replication_factor")

    @default_replication_factor.setter
    def default_replication_factor(self, value: Optional[str]):
        pulumi.set(self, "default_replication_factor", value)

    @property
    @pulumi.getter(name="groupMaxSessionTimeoutMs")
    def group_max_session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "group_max_session_timeout_ms")

    @group_max_session_timeout_ms.setter
    def group_max_session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "group_max_session_timeout_ms", value)

    @property
    @pulumi.getter(name="groupMinSessionTimeoutMs")
    def group_min_session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "group_min_session_timeout_ms")

    @group_min_session_timeout_ms.setter
    def group_min_session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "group_min_session_timeout_ms", value)

    @property
    @pulumi.getter(name="logCleanerMaxCompactionLagMs")
    def log_cleaner_max_compaction_lag_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_max_compaction_lag_ms")

    @log_cleaner_max_compaction_lag_ms.setter
    def log_cleaner_max_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanerMinCleanableRatio")
    def log_cleaner_min_cleanable_ratio(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_min_cleanable_ratio")

    @log_cleaner_min_cleanable_ratio.setter
    def log_cleaner_min_cleanable_ratio(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_min_cleanable_ratio", value)

    @property
    @pulumi.getter(name="logCleanerMinCompactionLagMs")
    def log_cleaner_min_compaction_lag_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_min_compaction_lag_ms")

    @log_cleaner_min_compaction_lag_ms.setter
    def log_cleaner_min_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanupPolicy")
    def log_cleanup_policy(self) -> Optional[str]:
        return pulumi.get(self, "log_cleanup_policy")

    @log_cleanup_policy.setter
    def log_cleanup_policy(self, value: Optional[str]):
        pulumi.set(self, "log_cleanup_policy", value)

    @property
    @pulumi.getter(name="logMessageTimestampDifferenceMaxMs")
    def log_message_timestamp_difference_max_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_message_timestamp_difference_max_ms")

    @log_message_timestamp_difference_max_ms.setter
    def log_message_timestamp_difference_max_ms(self, value: Optional[str]):
        pulumi.set(self, "log_message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="logMessageTimestampType")
    def log_message_timestamp_type(self) -> Optional[str]:
        return pulumi.get(self, "log_message_timestamp_type")

    @log_message_timestamp_type.setter
    def log_message_timestamp_type(self, value: Optional[str]):
        pulumi.set(self, "log_message_timestamp_type", value)

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_bytes")

    @log_retention_bytes.setter
    def log_retention_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_retention_bytes", value)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_hours")

    @log_retention_hours.setter
    def log_retention_hours(self, value: Optional[str]):
        pulumi.set(self, "log_retention_hours", value)

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_segment_bytes")

    @log_segment_bytes.setter
    def log_segment_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_segment_bytes", value)

    @property
    @pulumi.getter(name="maxConnectionsPerIp")
    def max_connections_per_ip(self) -> Optional[str]:
        return pulumi.get(self, "max_connections_per_ip")

    @max_connections_per_ip.setter
    def max_connections_per_ip(self, value: Optional[str]):
        pulumi.set(self, "max_connections_per_ip", value)

    @property
    @pulumi.getter(name="maxIncrementalFetchSessionCacheSlots")
    def max_incremental_fetch_session_cache_slots(self) -> Optional[str]:
        return pulumi.get(self, "max_incremental_fetch_session_cache_slots")

    @max_incremental_fetch_session_cache_slots.setter
    def max_incremental_fetch_session_cache_slots(self, value: Optional[str]):
        pulumi.set(self, "max_incremental_fetch_session_cache_slots", value)

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "message_max_bytes")

    @message_max_bytes.setter
    def message_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "message_max_bytes", value)

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[str]:
        return pulumi.get(self, "num_partitions")

    @num_partitions.setter
    def num_partitions(self, value: Optional[str]):
        pulumi.set(self, "num_partitions", value)

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[str]:
        return pulumi.get(self, "offsets_retention_minutes")

    @offsets_retention_minutes.setter
    def offsets_retention_minutes(self, value: Optional[str]):
        pulumi.set(self, "offsets_retention_minutes", value)

    @property
    @pulumi.getter(name="producerPurgatoryPurgeIntervalRequests")
    def producer_purgatory_purge_interval_requests(self) -> Optional[str]:
        return pulumi.get(self, "producer_purgatory_purge_interval_requests")

    @producer_purgatory_purge_interval_requests.setter
    def producer_purgatory_purge_interval_requests(self, value: Optional[str]):
        pulumi.set(self, "producer_purgatory_purge_interval_requests", value)

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "replica_fetch_max_bytes")

    @replica_fetch_max_bytes.setter
    def replica_fetch_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "replica_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="replicaFetchResponseMaxBytes")
    def replica_fetch_response_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "replica_fetch_response_max_bytes")

    @replica_fetch_response_max_bytes.setter
    def replica_fetch_response_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "replica_fetch_response_max_bytes", value)

    @property
    @pulumi.getter(name="socketRequestMaxBytes")
    def socket_request_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "socket_request_max_bytes")

    @socket_request_max_bytes.setter
    def socket_request_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "socket_request_max_bytes", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigKafkaAuthenticationMethodsArgs:
    def __init__(__self__, *,
                 certificate: Optional[str] = None,
                 sasl: Optional[str] = None):
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def sasl(self) -> Optional[str]:
        return pulumi.get(self, "sasl")

    @sasl.setter
    def sasl(self, value: Optional[str]):
        pulumi.set(self, "sasl", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigKafkaConnectConfigArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[str] = None,
                 consumer_auto_offset_reset: Optional[str] = None,
                 consumer_isolation_level: Optional[str] = None,
                 consumer_max_poll_interval_ms: Optional[str] = None,
                 consumer_max_poll_records: Optional[str] = None,
                 offset_flush_interval_ms: Optional[str] = None,
                 offset_flush_timeout_ms: Optional[str] = None,
                 session_timeout_ms: Optional[str] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[str]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[str]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[str]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[str]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[str]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[str]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigKafkaRestConfigArgs:
    def __init__(__self__, *,
                 consumer_enable_auto_commit: Optional[str] = None,
                 consumer_request_max_bytes: Optional[str] = None,
                 consumer_request_timeout_ms: Optional[str] = None,
                 producer_acks: Optional[str] = None,
                 producer_linger_ms: Optional[str] = None,
                 simpleconsumer_pool_size_max: Optional[str] = None):
        if consumer_enable_auto_commit is not None:
            pulumi.set(__self__, "consumer_enable_auto_commit", consumer_enable_auto_commit)
        if consumer_request_max_bytes is not None:
            pulumi.set(__self__, "consumer_request_max_bytes", consumer_request_max_bytes)
        if consumer_request_timeout_ms is not None:
            pulumi.set(__self__, "consumer_request_timeout_ms", consumer_request_timeout_ms)
        if producer_acks is not None:
            pulumi.set(__self__, "producer_acks", producer_acks)
        if producer_linger_ms is not None:
            pulumi.set(__self__, "producer_linger_ms", producer_linger_ms)
        if simpleconsumer_pool_size_max is not None:
            pulumi.set(__self__, "simpleconsumer_pool_size_max", simpleconsumer_pool_size_max)

    @property
    @pulumi.getter(name="consumerEnableAutoCommit")
    def consumer_enable_auto_commit(self) -> Optional[str]:
        return pulumi.get(self, "consumer_enable_auto_commit")

    @consumer_enable_auto_commit.setter
    def consumer_enable_auto_commit(self, value: Optional[str]):
        pulumi.set(self, "consumer_enable_auto_commit", value)

    @property
    @pulumi.getter(name="consumerRequestMaxBytes")
    def consumer_request_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "consumer_request_max_bytes")

    @consumer_request_max_bytes.setter
    def consumer_request_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_request_max_bytes", value)

    @property
    @pulumi.getter(name="consumerRequestTimeoutMs")
    def consumer_request_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "consumer_request_timeout_ms")

    @consumer_request_timeout_ms.setter
    def consumer_request_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_request_timeout_ms", value)

    @property
    @pulumi.getter(name="producerAcks")
    def producer_acks(self) -> Optional[str]:
        return pulumi.get(self, "producer_acks")

    @producer_acks.setter
    def producer_acks(self, value: Optional[str]):
        pulumi.set(self, "producer_acks", value)

    @property
    @pulumi.getter(name="producerLingerMs")
    def producer_linger_ms(self) -> Optional[str]:
        return pulumi.get(self, "producer_linger_ms")

    @producer_linger_ms.setter
    def producer_linger_ms(self, value: Optional[str]):
        pulumi.set(self, "producer_linger_ms", value)

    @property
    @pulumi.getter(name="simpleconsumerPoolSizeMax")
    def simpleconsumer_pool_size_max(self) -> Optional[str]:
        return pulumi.get(self, "simpleconsumer_pool_size_max")

    @simpleconsumer_pool_size_max.setter
    def simpleconsumer_pool_size_max(self, value: Optional[str]):
        pulumi.set(self, "simpleconsumer_pool_size_max", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetKafkaKafkaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[str] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_rest: Optional[str] = None,
                 prometheus: Optional[str] = None,
                 schema_registry: Optional[str] = None):
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[str]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[str]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class GetKafkaMirrorMakerComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetKafkaMirrorMakerKafkaMirrormakerArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetKafkaMirrorMakerKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[List[str]] = None,
                 kafka_mirrormaker: Optional['GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs'] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_mirrormaker is not None:
            pulumi.set(__self__, "kafka_mirrormaker", kafka_mirrormaker)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaMirrormaker")
    def kafka_mirrormaker(self) -> Optional['GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']:
        return pulumi.get(self, "kafka_mirrormaker")

    @kafka_mirrormaker.setter
    def kafka_mirrormaker(self, value: Optional['GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs']):
        pulumi.set(self, "kafka_mirrormaker", value)


@pulumi.input_type
class GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs:
    def __init__(__self__, *,
                 refresh_groups_enabled: Optional[str] = None,
                 refresh_groups_interval_seconds: Optional[str] = None,
                 refresh_topics_enabled: Optional[str] = None,
                 refresh_topics_interval_seconds: Optional[str] = None):
        if refresh_groups_enabled is not None:
            pulumi.set(__self__, "refresh_groups_enabled", refresh_groups_enabled)
        if refresh_groups_interval_seconds is not None:
            pulumi.set(__self__, "refresh_groups_interval_seconds", refresh_groups_interval_seconds)
        if refresh_topics_enabled is not None:
            pulumi.set(__self__, "refresh_topics_enabled", refresh_topics_enabled)
        if refresh_topics_interval_seconds is not None:
            pulumi.set(__self__, "refresh_topics_interval_seconds", refresh_topics_interval_seconds)

    @property
    @pulumi.getter(name="refreshGroupsEnabled")
    def refresh_groups_enabled(self) -> Optional[str]:
        return pulumi.get(self, "refresh_groups_enabled")

    @refresh_groups_enabled.setter
    def refresh_groups_enabled(self, value: Optional[str]):
        pulumi.set(self, "refresh_groups_enabled", value)

    @property
    @pulumi.getter(name="refreshGroupsIntervalSeconds")
    def refresh_groups_interval_seconds(self) -> Optional[str]:
        return pulumi.get(self, "refresh_groups_interval_seconds")

    @refresh_groups_interval_seconds.setter
    def refresh_groups_interval_seconds(self, value: Optional[str]):
        pulumi.set(self, "refresh_groups_interval_seconds", value)

    @property
    @pulumi.getter(name="refreshTopicsEnabled")
    def refresh_topics_enabled(self) -> Optional[str]:
        return pulumi.get(self, "refresh_topics_enabled")

    @refresh_topics_enabled.setter
    def refresh_topics_enabled(self, value: Optional[str]):
        pulumi.set(self, "refresh_topics_enabled", value)

    @property
    @pulumi.getter(name="refreshTopicsIntervalSeconds")
    def refresh_topics_interval_seconds(self) -> Optional[str]:
        return pulumi.get(self, "refresh_topics_interval_seconds")

    @refresh_topics_interval_seconds.setter
    def refresh_topics_interval_seconds(self, value: Optional[str]):
        pulumi.set(self, "refresh_topics_interval_seconds", value)


@pulumi.input_type
class GetKafkaMirrorMakerServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetKafkaServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetMySqlComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetMySqlMysqlArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetMySqlMysqlUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 backup_hour: Optional[str] = None,
                 backup_minute: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 mysql: Optional['GetMySqlMysqlUserConfigMysqlArgs'] = None,
                 mysql_version: Optional[str] = None,
                 private_access: Optional['GetMySqlMysqlUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetMySqlMysqlUserConfigPublicAccessArgs'] = None,
                 recovery_target_time: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if mysql_version is not None:
            pulumi.set(__self__, "mysql_version", mysql_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[str]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[str]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[str]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[str]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional['GetMySqlMysqlUserConfigMysqlArgs']:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional['GetMySqlMysqlUserConfigMysqlArgs']):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[str]:
        return pulumi.get(self, "mysql_version")

    @mysql_version.setter
    def mysql_version(self, value: Optional[str]):
        pulumi.set(self, "mysql_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetMySqlMysqlUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetMySqlMysqlUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetMySqlMysqlUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetMySqlMysqlUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[str]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetMySqlMysqlUserConfigMysqlArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[str] = None,
                 default_time_zone: Optional[str] = None,
                 group_concat_max_len: Optional[str] = None,
                 information_schema_stats_expiry: Optional[str] = None,
                 innodb_ft_min_token_size: Optional[str] = None,
                 innodb_ft_server_stopword_table: Optional[str] = None,
                 innodb_lock_wait_timeout: Optional[str] = None,
                 innodb_log_buffer_size: Optional[str] = None,
                 innodb_online_alter_log_max_size: Optional[str] = None,
                 innodb_print_all_deadlocks: Optional[str] = None,
                 innodb_rollback_on_timeout: Optional[str] = None,
                 interactive_timeout: Optional[str] = None,
                 max_allowed_packet: Optional[str] = None,
                 max_heap_table_size: Optional[str] = None,
                 net_read_timeout: Optional[str] = None,
                 net_write_timeout: Optional[str] = None,
                 sort_buffer_size: Optional[str] = None,
                 sql_mode: Optional[str] = None,
                 sql_require_primary_key: Optional[str] = None,
                 tmp_table_size: Optional[str] = None,
                 wait_timeout: Optional[str] = None):
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if group_concat_max_len is not None:
            pulumi.set(__self__, "group_concat_max_len", group_concat_max_len)
        if information_schema_stats_expiry is not None:
            pulumi.set(__self__, "information_schema_stats_expiry", information_schema_stats_expiry)
        if innodb_ft_min_token_size is not None:
            pulumi.set(__self__, "innodb_ft_min_token_size", innodb_ft_min_token_size)
        if innodb_ft_server_stopword_table is not None:
            pulumi.set(__self__, "innodb_ft_server_stopword_table", innodb_ft_server_stopword_table)
        if innodb_lock_wait_timeout is not None:
            pulumi.set(__self__, "innodb_lock_wait_timeout", innodb_lock_wait_timeout)
        if innodb_log_buffer_size is not None:
            pulumi.set(__self__, "innodb_log_buffer_size", innodb_log_buffer_size)
        if innodb_online_alter_log_max_size is not None:
            pulumi.set(__self__, "innodb_online_alter_log_max_size", innodb_online_alter_log_max_size)
        if innodb_print_all_deadlocks is not None:
            pulumi.set(__self__, "innodb_print_all_deadlocks", innodb_print_all_deadlocks)
        if innodb_rollback_on_timeout is not None:
            pulumi.set(__self__, "innodb_rollback_on_timeout", innodb_rollback_on_timeout)
        if interactive_timeout is not None:
            pulumi.set(__self__, "interactive_timeout", interactive_timeout)
        if max_allowed_packet is not None:
            pulumi.set(__self__, "max_allowed_packet", max_allowed_packet)
        if max_heap_table_size is not None:
            pulumi.set(__self__, "max_heap_table_size", max_heap_table_size)
        if net_read_timeout is not None:
            pulumi.set(__self__, "net_read_timeout", net_read_timeout)
        if net_write_timeout is not None:
            pulumi.set(__self__, "net_write_timeout", net_write_timeout)
        if sort_buffer_size is not None:
            pulumi.set(__self__, "sort_buffer_size", sort_buffer_size)
        if sql_mode is not None:
            pulumi.set(__self__, "sql_mode", sql_mode)
        if sql_require_primary_key is not None:
            pulumi.set(__self__, "sql_require_primary_key", sql_require_primary_key)
        if tmp_table_size is not None:
            pulumi.set(__self__, "tmp_table_size", tmp_table_size)
        if wait_timeout is not None:
            pulumi.set(__self__, "wait_timeout", wait_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[str]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[str]:
        return pulumi.get(self, "default_time_zone")

    @default_time_zone.setter
    def default_time_zone(self, value: Optional[str]):
        pulumi.set(self, "default_time_zone", value)

    @property
    @pulumi.getter(name="groupConcatMaxLen")
    def group_concat_max_len(self) -> Optional[str]:
        return pulumi.get(self, "group_concat_max_len")

    @group_concat_max_len.setter
    def group_concat_max_len(self, value: Optional[str]):
        pulumi.set(self, "group_concat_max_len", value)

    @property
    @pulumi.getter(name="informationSchemaStatsExpiry")
    def information_schema_stats_expiry(self) -> Optional[str]:
        return pulumi.get(self, "information_schema_stats_expiry")

    @information_schema_stats_expiry.setter
    def information_schema_stats_expiry(self, value: Optional[str]):
        pulumi.set(self, "information_schema_stats_expiry", value)

    @property
    @pulumi.getter(name="innodbFtMinTokenSize")
    def innodb_ft_min_token_size(self) -> Optional[str]:
        return pulumi.get(self, "innodb_ft_min_token_size")

    @innodb_ft_min_token_size.setter
    def innodb_ft_min_token_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_ft_min_token_size", value)

    @property
    @pulumi.getter(name="innodbFtServerStopwordTable")
    def innodb_ft_server_stopword_table(self) -> Optional[str]:
        return pulumi.get(self, "innodb_ft_server_stopword_table")

    @innodb_ft_server_stopword_table.setter
    def innodb_ft_server_stopword_table(self, value: Optional[str]):
        pulumi.set(self, "innodb_ft_server_stopword_table", value)

    @property
    @pulumi.getter(name="innodbLockWaitTimeout")
    def innodb_lock_wait_timeout(self) -> Optional[str]:
        return pulumi.get(self, "innodb_lock_wait_timeout")

    @innodb_lock_wait_timeout.setter
    def innodb_lock_wait_timeout(self, value: Optional[str]):
        pulumi.set(self, "innodb_lock_wait_timeout", value)

    @property
    @pulumi.getter(name="innodbLogBufferSize")
    def innodb_log_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "innodb_log_buffer_size")

    @innodb_log_buffer_size.setter
    def innodb_log_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_log_buffer_size", value)

    @property
    @pulumi.getter(name="innodbOnlineAlterLogMaxSize")
    def innodb_online_alter_log_max_size(self) -> Optional[str]:
        return pulumi.get(self, "innodb_online_alter_log_max_size")

    @innodb_online_alter_log_max_size.setter
    def innodb_online_alter_log_max_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_online_alter_log_max_size", value)

    @property
    @pulumi.getter(name="innodbPrintAllDeadlocks")
    def innodb_print_all_deadlocks(self) -> Optional[str]:
        return pulumi.get(self, "innodb_print_all_deadlocks")

    @innodb_print_all_deadlocks.setter
    def innodb_print_all_deadlocks(self, value: Optional[str]):
        pulumi.set(self, "innodb_print_all_deadlocks", value)

    @property
    @pulumi.getter(name="innodbRollbackOnTimeout")
    def innodb_rollback_on_timeout(self) -> Optional[str]:
        return pulumi.get(self, "innodb_rollback_on_timeout")

    @innodb_rollback_on_timeout.setter
    def innodb_rollback_on_timeout(self, value: Optional[str]):
        pulumi.set(self, "innodb_rollback_on_timeout", value)

    @property
    @pulumi.getter(name="interactiveTimeout")
    def interactive_timeout(self) -> Optional[str]:
        return pulumi.get(self, "interactive_timeout")

    @interactive_timeout.setter
    def interactive_timeout(self, value: Optional[str]):
        pulumi.set(self, "interactive_timeout", value)

    @property
    @pulumi.getter(name="maxAllowedPacket")
    def max_allowed_packet(self) -> Optional[str]:
        return pulumi.get(self, "max_allowed_packet")

    @max_allowed_packet.setter
    def max_allowed_packet(self, value: Optional[str]):
        pulumi.set(self, "max_allowed_packet", value)

    @property
    @pulumi.getter(name="maxHeapTableSize")
    def max_heap_table_size(self) -> Optional[str]:
        return pulumi.get(self, "max_heap_table_size")

    @max_heap_table_size.setter
    def max_heap_table_size(self, value: Optional[str]):
        pulumi.set(self, "max_heap_table_size", value)

    @property
    @pulumi.getter(name="netReadTimeout")
    def net_read_timeout(self) -> Optional[str]:
        return pulumi.get(self, "net_read_timeout")

    @net_read_timeout.setter
    def net_read_timeout(self, value: Optional[str]):
        pulumi.set(self, "net_read_timeout", value)

    @property
    @pulumi.getter(name="netWriteTimeout")
    def net_write_timeout(self) -> Optional[str]:
        return pulumi.get(self, "net_write_timeout")

    @net_write_timeout.setter
    def net_write_timeout(self, value: Optional[str]):
        pulumi.set(self, "net_write_timeout", value)

    @property
    @pulumi.getter(name="sortBufferSize")
    def sort_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "sort_buffer_size")

    @sort_buffer_size.setter
    def sort_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "sort_buffer_size", value)

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> Optional[str]:
        return pulumi.get(self, "sql_mode")

    @sql_mode.setter
    def sql_mode(self, value: Optional[str]):
        pulumi.set(self, "sql_mode", value)

    @property
    @pulumi.getter(name="sqlRequirePrimaryKey")
    def sql_require_primary_key(self) -> Optional[str]:
        return pulumi.get(self, "sql_require_primary_key")

    @sql_require_primary_key.setter
    def sql_require_primary_key(self, value: Optional[str]):
        pulumi.set(self, "sql_require_primary_key", value)

    @property
    @pulumi.getter(name="tmpTableSize")
    def tmp_table_size(self) -> Optional[str]:
        return pulumi.get(self, "tmp_table_size")

    @tmp_table_size.setter
    def tmp_table_size(self, value: Optional[str]):
        pulumi.set(self, "tmp_table_size", value)

    @property
    @pulumi.getter(name="waitTimeout")
    def wait_timeout(self) -> Optional[str]:
        return pulumi.get(self, "wait_timeout")

    @wait_timeout.setter
    def wait_timeout(self, value: Optional[str]):
        pulumi.set(self, "wait_timeout", value)


@pulumi.input_type
class GetMySqlMysqlUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[str]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[str]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetMySqlMysqlUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[str]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[str]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetMySqlServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetPgComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetPgPgArgs:
    def __init__(__self__, *,
                 dbname: str,
                 host: str,
                 password: str,
                 port: float,
                 replica_uri: str,
                 sslmode: str,
                 uri: str,
                 user: str):
        pulumi.set(__self__, "dbname", dbname)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replica_uri", replica_uri)
        pulumi.set(__self__, "sslmode", sslmode)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def dbname(self) -> str:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: str):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicaUri")
    def replica_uri(self) -> str:
        return pulumi.get(self, "replica_uri")

    @replica_uri.setter
    def replica_uri(self, value: str):
        pulumi.set(self, "replica_uri", value)

    @property
    @pulumi.getter
    def sslmode(self) -> str:
        return pulumi.get(self, "sslmode")

    @sslmode.setter
    def sslmode(self, value: str):
        pulumi.set(self, "sslmode", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: str):
        pulumi.set(self, "user", value)


@pulumi.input_type
class GetPgPgUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 backup_hour: Optional[str] = None,
                 backup_minute: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 migration: Optional['GetPgPgUserConfigMigrationArgs'] = None,
                 pg: Optional['GetPgPgUserConfigPgArgs'] = None,
                 pg_read_replica: Optional[str] = None,
                 pg_service_to_fork_from: Optional[str] = None,
                 pg_version: Optional[str] = None,
                 pgbouncer: Optional['GetPgPgUserConfigPgbouncerArgs'] = None,
                 pglookout: Optional['GetPgPgUserConfigPglookoutArgs'] = None,
                 private_access: Optional['GetPgPgUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetPgPgUserConfigPublicAccessArgs'] = None,
                 recovery_target_time: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None,
                 shared_buffers_percentage: Optional[str] = None,
                 synchronous_replication: Optional[str] = None,
                 timescaledb: Optional['GetPgPgUserConfigTimescaledbArgs'] = None,
                 variant: Optional[str] = None,
                 work_mem: Optional[str] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pg_read_replica is not None:
            pulumi.set(__self__, "pg_read_replica", pg_read_replica)
        if pg_service_to_fork_from is not None:
            pulumi.set(__self__, "pg_service_to_fork_from", pg_service_to_fork_from)
        if pg_version is not None:
            pulumi.set(__self__, "pg_version", pg_version)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if pglookout is not None:
            pulumi.set(__self__, "pglookout", pglookout)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if shared_buffers_percentage is not None:
            pulumi.set(__self__, "shared_buffers_percentage", shared_buffers_percentage)
        if synchronous_replication is not None:
            pulumi.set(__self__, "synchronous_replication", synchronous_replication)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[str]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[str]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[str]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[str]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional['GetPgPgUserConfigMigrationArgs']:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional['GetPgPgUserConfigMigrationArgs']):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter
    def pg(self) -> Optional['GetPgPgUserConfigPgArgs']:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional['GetPgPgUserConfigPgArgs']):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter(name="pgReadReplica")
    def pg_read_replica(self) -> Optional[str]:
        return pulumi.get(self, "pg_read_replica")

    @pg_read_replica.setter
    def pg_read_replica(self, value: Optional[str]):
        pulumi.set(self, "pg_read_replica", value)

    @property
    @pulumi.getter(name="pgServiceToForkFrom")
    def pg_service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "pg_service_to_fork_from")

    @pg_service_to_fork_from.setter
    def pg_service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "pg_service_to_fork_from", value)

    @property
    @pulumi.getter(name="pgVersion")
    def pg_version(self) -> Optional[str]:
        return pulumi.get(self, "pg_version")

    @pg_version.setter
    def pg_version(self, value: Optional[str]):
        pulumi.set(self, "pg_version", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional['GetPgPgUserConfigPgbouncerArgs']:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional['GetPgPgUserConfigPgbouncerArgs']):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def pglookout(self) -> Optional['GetPgPgUserConfigPglookoutArgs']:
        return pulumi.get(self, "pglookout")

    @pglookout.setter
    def pglookout(self, value: Optional['GetPgPgUserConfigPglookoutArgs']):
        pulumi.set(self, "pglookout", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetPgPgUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetPgPgUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetPgPgUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetPgPgUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[str]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="sharedBuffersPercentage")
    def shared_buffers_percentage(self) -> Optional[str]:
        return pulumi.get(self, "shared_buffers_percentage")

    @shared_buffers_percentage.setter
    def shared_buffers_percentage(self, value: Optional[str]):
        pulumi.set(self, "shared_buffers_percentage", value)

    @property
    @pulumi.getter(name="synchronousReplication")
    def synchronous_replication(self) -> Optional[str]:
        return pulumi.get(self, "synchronous_replication")

    @synchronous_replication.setter
    def synchronous_replication(self, value: Optional[str]):
        pulumi.set(self, "synchronous_replication", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional['GetPgPgUserConfigTimescaledbArgs']:
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional['GetPgPgUserConfigTimescaledbArgs']):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[str]:
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[str]):
        pulumi.set(self, "variant", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[str]):
        pulumi.set(self, "work_mem", value)


@pulumi.input_type
class GetPgPgUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 ssl: Optional[str] = None,
                 username: Optional[str] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[str]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[str]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[str]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetPgPgUserConfigPgArgs:
    def __init__(__self__, *,
                 autovacuum_analyze_scale_factor: Optional[str] = None,
                 autovacuum_analyze_threshold: Optional[str] = None,
                 autovacuum_freeze_max_age: Optional[str] = None,
                 autovacuum_max_workers: Optional[str] = None,
                 autovacuum_naptime: Optional[str] = None,
                 autovacuum_vacuum_cost_delay: Optional[str] = None,
                 autovacuum_vacuum_cost_limit: Optional[str] = None,
                 autovacuum_vacuum_scale_factor: Optional[str] = None,
                 autovacuum_vacuum_threshold: Optional[str] = None,
                 deadlock_timeout: Optional[str] = None,
                 idle_in_transaction_session_timeout: Optional[str] = None,
                 jit: Optional[str] = None,
                 log_autovacuum_min_duration: Optional[str] = None,
                 log_error_verbosity: Optional[str] = None,
                 log_min_duration_statement: Optional[str] = None,
                 max_locks_per_transaction: Optional[str] = None,
                 max_parallel_workers: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_pred_locks_per_transaction: Optional[str] = None,
                 max_prepared_transactions: Optional[str] = None,
                 max_stack_depth: Optional[str] = None,
                 max_standby_archive_delay: Optional[str] = None,
                 max_standby_streaming_delay: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 pg_partman_bgw_dot_interval: Optional[str] = None,
                 pg_partman_bgw_dot_role: Optional[str] = None,
                 pg_stat_statements_dot_track: Optional[str] = None,
                 temp_file_limit: Optional[str] = None,
                 timezone: Optional[str] = None,
                 track_activity_query_size: Optional[str] = None,
                 track_commit_timestamp: Optional[str] = None,
                 track_functions: Optional[str] = None,
                 wal_sender_timeout: Optional[str] = None,
                 wal_writer_delay: Optional[str] = None):
        if autovacuum_analyze_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_analyze_scale_factor", autovacuum_analyze_scale_factor)
        if autovacuum_analyze_threshold is not None:
            pulumi.set(__self__, "autovacuum_analyze_threshold", autovacuum_analyze_threshold)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_naptime is not None:
            pulumi.set(__self__, "autovacuum_naptime", autovacuum_naptime)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_cost_limit is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_limit", autovacuum_vacuum_cost_limit)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if deadlock_timeout is not None:
            pulumi.set(__self__, "deadlock_timeout", deadlock_timeout)
        if idle_in_transaction_session_timeout is not None:
            pulumi.set(__self__, "idle_in_transaction_session_timeout", idle_in_transaction_session_timeout)
        if jit is not None:
            pulumi.set(__self__, "jit", jit)
        if log_autovacuum_min_duration is not None:
            pulumi.set(__self__, "log_autovacuum_min_duration", log_autovacuum_min_duration)
        if log_error_verbosity is not None:
            pulumi.set(__self__, "log_error_verbosity", log_error_verbosity)
        if log_min_duration_statement is not None:
            pulumi.set(__self__, "log_min_duration_statement", log_min_duration_statement)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_parallel_workers is not None:
            pulumi.set(__self__, "max_parallel_workers", max_parallel_workers)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_pred_locks_per_transaction is not None:
            pulumi.set(__self__, "max_pred_locks_per_transaction", max_pred_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_stack_depth is not None:
            pulumi.set(__self__, "max_stack_depth", max_stack_depth)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if pg_partman_bgw_dot_interval is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_interval", pg_partman_bgw_dot_interval)
        if pg_partman_bgw_dot_role is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_role", pg_partman_bgw_dot_role)
        if pg_stat_statements_dot_track is not None:
            pulumi.set(__self__, "pg_stat_statements_dot_track", pg_stat_statements_dot_track)
        if temp_file_limit is not None:
            pulumi.set(__self__, "temp_file_limit", temp_file_limit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if track_activity_query_size is not None:
            pulumi.set(__self__, "track_activity_query_size", track_activity_query_size)
        if track_commit_timestamp is not None:
            pulumi.set(__self__, "track_commit_timestamp", track_commit_timestamp)
        if track_functions is not None:
            pulumi.set(__self__, "track_functions", track_functions)
        if wal_sender_timeout is not None:
            pulumi.set(__self__, "wal_sender_timeout", wal_sender_timeout)
        if wal_writer_delay is not None:
            pulumi.set(__self__, "wal_writer_delay", wal_writer_delay)

    @property
    @pulumi.getter(name="autovacuumAnalyzeScaleFactor")
    def autovacuum_analyze_scale_factor(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_analyze_scale_factor")

    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_analyze_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumAnalyzeThreshold")
    def autovacuum_analyze_threshold(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_analyze_threshold")

    @autovacuum_analyze_threshold.setter
    def autovacuum_analyze_threshold(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_analyze_threshold", value)

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @autovacuum_freeze_max_age.setter
    def autovacuum_freeze_max_age(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_freeze_max_age", value)

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_max_workers")

    @autovacuum_max_workers.setter
    def autovacuum_max_workers(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_max_workers", value)

    @property
    @pulumi.getter(name="autovacuumNaptime")
    def autovacuum_naptime(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_naptime")

    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_naptime", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_cost_delay", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostLimit")
    def autovacuum_vacuum_cost_limit(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_cost_limit")

    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_cost_limit", value)

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @autovacuum_vacuum_threshold.setter
    def autovacuum_vacuum_threshold(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_threshold", value)

    @property
    @pulumi.getter(name="deadlockTimeout")
    def deadlock_timeout(self) -> Optional[str]:
        return pulumi.get(self, "deadlock_timeout")

    @deadlock_timeout.setter
    def deadlock_timeout(self, value: Optional[str]):
        pulumi.set(self, "deadlock_timeout", value)

    @property
    @pulumi.getter(name="idleInTransactionSessionTimeout")
    def idle_in_transaction_session_timeout(self) -> Optional[str]:
        return pulumi.get(self, "idle_in_transaction_session_timeout")

    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: Optional[str]):
        pulumi.set(self, "idle_in_transaction_session_timeout", value)

    @property
    @pulumi.getter
    def jit(self) -> Optional[str]:
        return pulumi.get(self, "jit")

    @jit.setter
    def jit(self, value: Optional[str]):
        pulumi.set(self, "jit", value)

    @property
    @pulumi.getter(name="logAutovacuumMinDuration")
    def log_autovacuum_min_duration(self) -> Optional[str]:
        return pulumi.get(self, "log_autovacuum_min_duration")

    @log_autovacuum_min_duration.setter
    def log_autovacuum_min_duration(self, value: Optional[str]):
        pulumi.set(self, "log_autovacuum_min_duration", value)

    @property
    @pulumi.getter(name="logErrorVerbosity")
    def log_error_verbosity(self) -> Optional[str]:
        return pulumi.get(self, "log_error_verbosity")

    @log_error_verbosity.setter
    def log_error_verbosity(self, value: Optional[str]):
        pulumi.set(self, "log_error_verbosity", value)

    @property
    @pulumi.getter(name="logMinDurationStatement")
    def log_min_duration_statement(self) -> Optional[str]:
        return pulumi.get(self, "log_min_duration_statement")

    @log_min_duration_statement.setter
    def log_min_duration_statement(self, value: Optional[str]):
        pulumi.set(self, "log_min_duration_statement", value)

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[str]:
        return pulumi.get(self, "max_locks_per_transaction")

    @max_locks_per_transaction.setter
    def max_locks_per_transaction(self, value: Optional[str]):
        pulumi.set(self, "max_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxParallelWorkers")
    def max_parallel_workers(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers")

    @max_parallel_workers.setter
    def max_parallel_workers(self, value: Optional[str]):
        pulumi.set(self, "max_parallel_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[str]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxPredLocksPerTransaction")
    def max_pred_locks_per_transaction(self) -> Optional[str]:
        return pulumi.get(self, "max_pred_locks_per_transaction")

    @max_pred_locks_per_transaction.setter
    def max_pred_locks_per_transaction(self, value: Optional[str]):
        pulumi.set(self, "max_pred_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[str]:
        return pulumi.get(self, "max_prepared_transactions")

    @max_prepared_transactions.setter
    def max_prepared_transactions(self, value: Optional[str]):
        pulumi.set(self, "max_prepared_transactions", value)

    @property
    @pulumi.getter(name="maxStackDepth")
    def max_stack_depth(self) -> Optional[str]:
        return pulumi.get(self, "max_stack_depth")

    @max_stack_depth.setter
    def max_stack_depth(self, value: Optional[str]):
        pulumi.set(self, "max_stack_depth", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[str]:
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[str]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[str]:
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[str]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[str]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotInterval")
    def pg_partman_bgw_dot_interval(self) -> Optional[str]:
        return pulumi.get(self, "pg_partman_bgw_dot_interval")

    @pg_partman_bgw_dot_interval.setter
    def pg_partman_bgw_dot_interval(self, value: Optional[str]):
        pulumi.set(self, "pg_partman_bgw_dot_interval", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotRole")
    def pg_partman_bgw_dot_role(self) -> Optional[str]:
        return pulumi.get(self, "pg_partman_bgw_dot_role")

    @pg_partman_bgw_dot_role.setter
    def pg_partman_bgw_dot_role(self, value: Optional[str]):
        pulumi.set(self, "pg_partman_bgw_dot_role", value)

    @property
    @pulumi.getter(name="pgStatStatementsDotTrack")
    def pg_stat_statements_dot_track(self) -> Optional[str]:
        return pulumi.get(self, "pg_stat_statements_dot_track")

    @pg_stat_statements_dot_track.setter
    def pg_stat_statements_dot_track(self, value: Optional[str]):
        pulumi.set(self, "pg_stat_statements_dot_track", value)

    @property
    @pulumi.getter(name="tempFileLimit")
    def temp_file_limit(self) -> Optional[str]:
        return pulumi.get(self, "temp_file_limit")

    @temp_file_limit.setter
    def temp_file_limit(self, value: Optional[str]):
        pulumi.set(self, "temp_file_limit", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[str]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="trackActivityQuerySize")
    def track_activity_query_size(self) -> Optional[str]:
        return pulumi.get(self, "track_activity_query_size")

    @track_activity_query_size.setter
    def track_activity_query_size(self, value: Optional[str]):
        pulumi.set(self, "track_activity_query_size", value)

    @property
    @pulumi.getter(name="trackCommitTimestamp")
    def track_commit_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "track_commit_timestamp")

    @track_commit_timestamp.setter
    def track_commit_timestamp(self, value: Optional[str]):
        pulumi.set(self, "track_commit_timestamp", value)

    @property
    @pulumi.getter(name="trackFunctions")
    def track_functions(self) -> Optional[str]:
        return pulumi.get(self, "track_functions")

    @track_functions.setter
    def track_functions(self, value: Optional[str]):
        pulumi.set(self, "track_functions", value)

    @property
    @pulumi.getter(name="walSenderTimeout")
    def wal_sender_timeout(self) -> Optional[str]:
        return pulumi.get(self, "wal_sender_timeout")

    @wal_sender_timeout.setter
    def wal_sender_timeout(self, value: Optional[str]):
        pulumi.set(self, "wal_sender_timeout", value)

    @property
    @pulumi.getter(name="walWriterDelay")
    def wal_writer_delay(self) -> Optional[str]:
        return pulumi.get(self, "wal_writer_delay")

    @wal_writer_delay.setter
    def wal_writer_delay(self, value: Optional[str]):
        pulumi.set(self, "wal_writer_delay", value)


@pulumi.input_type
class GetPgPgUserConfigPgbouncerArgs:
    def __init__(__self__, *,
                 ignore_startup_parameters: Optional[List[str]] = None,
                 server_reset_query_always: Optional[str] = None):
        if ignore_startup_parameters is not None:
            pulumi.set(__self__, "ignore_startup_parameters", ignore_startup_parameters)
        if server_reset_query_always is not None:
            pulumi.set(__self__, "server_reset_query_always", server_reset_query_always)

    @property
    @pulumi.getter(name="ignoreStartupParameters")
    def ignore_startup_parameters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ignore_startup_parameters")

    @ignore_startup_parameters.setter
    def ignore_startup_parameters(self, value: Optional[List[str]]):
        pulumi.set(self, "ignore_startup_parameters", value)

    @property
    @pulumi.getter(name="serverResetQueryAlways")
    def server_reset_query_always(self) -> Optional[str]:
        return pulumi.get(self, "server_reset_query_always")

    @server_reset_query_always.setter
    def server_reset_query_always(self, value: Optional[str]):
        pulumi.set(self, "server_reset_query_always", value)


@pulumi.input_type
class GetPgPgUserConfigPglookoutArgs:
    def __init__(__self__, *,
                 max_failover_replication_time_lag: Optional[str] = None):
        if max_failover_replication_time_lag is not None:
            pulumi.set(__self__, "max_failover_replication_time_lag", max_failover_replication_time_lag)

    @property
    @pulumi.getter(name="maxFailoverReplicationTimeLag")
    def max_failover_replication_time_lag(self) -> Optional[str]:
        return pulumi.get(self, "max_failover_replication_time_lag")

    @max_failover_replication_time_lag.setter
    def max_failover_replication_time_lag(self, value: Optional[str]):
        pulumi.set(self, "max_failover_replication_time_lag", value)


@pulumi.input_type
class GetPgPgUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetPgPgUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetPgPgUserConfigTimescaledbArgs:
    def __init__(__self__, *,
                 max_background_workers: Optional[str] = None):
        if max_background_workers is not None:
            pulumi.set(__self__, "max_background_workers", max_background_workers)

    @property
    @pulumi.getter(name="maxBackgroundWorkers")
    def max_background_workers(self) -> Optional[str]:
        return pulumi.get(self, "max_background_workers")

    @max_background_workers.setter
    def max_background_workers(self, value: Optional[str]):
        pulumi.set(self, "max_background_workers", value)


@pulumi.input_type
class GetPgServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetRedisComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetRedisRedisArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetRedisRedisUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[List[str]] = None,
                 migration: Optional['GetRedisRedisUserConfigMigrationArgs'] = None,
                 private_access: Optional['GetRedisRedisUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetRedisRedisUserConfigPublicAccessArgs'] = None,
                 redis_lfu_decay_time: Optional[str] = None,
                 redis_lfu_log_factor: Optional[str] = None,
                 redis_maxmemory_policy: Optional[str] = None,
                 redis_notify_keyspace_events: Optional[str] = None,
                 redis_ssl: Optional[str] = None,
                 redis_timeout: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if redis_lfu_decay_time is not None:
            pulumi.set(__self__, "redis_lfu_decay_time", redis_lfu_decay_time)
        if redis_lfu_log_factor is not None:
            pulumi.set(__self__, "redis_lfu_log_factor", redis_lfu_log_factor)
        if redis_maxmemory_policy is not None:
            pulumi.set(__self__, "redis_maxmemory_policy", redis_maxmemory_policy)
        if redis_notify_keyspace_events is not None:
            pulumi.set(__self__, "redis_notify_keyspace_events", redis_notify_keyspace_events)
        if redis_ssl is not None:
            pulumi.set(__self__, "redis_ssl", redis_ssl)
        if redis_timeout is not None:
            pulumi.set(__self__, "redis_timeout", redis_timeout)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional['GetRedisRedisUserConfigMigrationArgs']:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional['GetRedisRedisUserConfigMigrationArgs']):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetRedisRedisUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetRedisRedisUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetRedisRedisUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetRedisRedisUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="redisLfuDecayTime")
    def redis_lfu_decay_time(self) -> Optional[str]:
        return pulumi.get(self, "redis_lfu_decay_time")

    @redis_lfu_decay_time.setter
    def redis_lfu_decay_time(self, value: Optional[str]):
        pulumi.set(self, "redis_lfu_decay_time", value)

    @property
    @pulumi.getter(name="redisLfuLogFactor")
    def redis_lfu_log_factor(self) -> Optional[str]:
        return pulumi.get(self, "redis_lfu_log_factor")

    @redis_lfu_log_factor.setter
    def redis_lfu_log_factor(self, value: Optional[str]):
        pulumi.set(self, "redis_lfu_log_factor", value)

    @property
    @pulumi.getter(name="redisMaxmemoryPolicy")
    def redis_maxmemory_policy(self) -> Optional[str]:
        return pulumi.get(self, "redis_maxmemory_policy")

    @redis_maxmemory_policy.setter
    def redis_maxmemory_policy(self, value: Optional[str]):
        pulumi.set(self, "redis_maxmemory_policy", value)

    @property
    @pulumi.getter(name="redisNotifyKeyspaceEvents")
    def redis_notify_keyspace_events(self) -> Optional[str]:
        return pulumi.get(self, "redis_notify_keyspace_events")

    @redis_notify_keyspace_events.setter
    def redis_notify_keyspace_events(self, value: Optional[str]):
        pulumi.set(self, "redis_notify_keyspace_events", value)

    @property
    @pulumi.getter(name="redisSsl")
    def redis_ssl(self) -> Optional[str]:
        return pulumi.get(self, "redis_ssl")

    @redis_ssl.setter
    def redis_ssl(self, value: Optional[str]):
        pulumi.set(self, "redis_ssl", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> Optional[str]:
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: Optional[str]):
        pulumi.set(self, "redis_timeout", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetRedisRedisUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 ssl: Optional[str] = None,
                 username: Optional[str] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[str]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[str]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[str]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetRedisRedisUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None,
                 redis: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[str]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[str]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class GetRedisRedisUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None,
                 redis: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[str]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[str]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class GetRedisServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


@pulumi.input_type
class GetServiceCassandraArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceCassandraUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[List[str]] = None,
                 migrate_sstableloader: Optional[str] = None,
                 private_access: Optional['GetServiceCassandraUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServiceCassandraUserConfigPublicAccessArgs'] = None,
                 service_to_fork_from: Optional[str] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migrate_sstableloader is not None:
            pulumi.set(__self__, "migrate_sstableloader", migrate_sstableloader)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="migrateSstableloader")
    def migrate_sstableloader(self) -> Optional[str]:
        return pulumi.get(self, "migrate_sstableloader")

    @migrate_sstableloader.setter
    def migrate_sstableloader(self, value: Optional[str]):
        pulumi.set(self, "migrate_sstableloader", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceCassandraUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceCassandraUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceCassandraUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceCassandraUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceCassandraUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceCassandraUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceComponentArgs:
    def __init__(__self__, *,
                 component: str,
                 host: str,
                 kafka_authentication_method: str,
                 port: float,
                 route: str,
                 ssl: bool,
                 usage: str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kafka_authentication_method", kafka_authentication_method)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "route", route)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def component(self) -> str:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: str):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethod")
    def kafka_authentication_method(self) -> str:
        return pulumi.get(self, "kafka_authentication_method")

    @kafka_authentication_method.setter
    def kafka_authentication_method(self, value: str):
        pulumi.set(self, "kafka_authentication_method", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def route(self) -> str:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: str):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: str):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class GetServiceElasticsearchArgs:
    def __init__(__self__, *,
                 kibana_uri: str):
        pulumi.set(__self__, "kibana_uri", kibana_uri)

    @property
    @pulumi.getter(name="kibanaUri")
    def kibana_uri(self) -> str:
        return pulumi.get(self, "kibana_uri")

    @kibana_uri.setter
    def kibana_uri(self, value: str):
        pulumi.set(self, "kibana_uri", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 disable_replication_factor_adjustment: Optional[str] = None,
                 elasticsearch: Optional['GetServiceElasticsearchUserConfigElasticsearchArgs'] = None,
                 elasticsearch_version: Optional[str] = None,
                 index_patterns: Optional[List['GetServiceElasticsearchUserConfigIndexPatternArgs']] = None,
                 ip_filters: Optional[List[str]] = None,
                 kibana: Optional['GetServiceElasticsearchUserConfigKibanaArgs'] = None,
                 max_index_count: Optional[str] = None,
                 private_access: Optional['GetServiceElasticsearchUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServiceElasticsearchUserConfigPublicAccessArgs'] = None,
                 recovery_basebackup_name: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if disable_replication_factor_adjustment is not None:
            pulumi.set(__self__, "disable_replication_factor_adjustment", disable_replication_factor_adjustment)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_version is not None:
            pulumi.set(__self__, "elasticsearch_version", elasticsearch_version)
        if index_patterns is not None:
            pulumi.set(__self__, "index_patterns", index_patterns)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_basebackup_name is not None:
            pulumi.set(__self__, "recovery_basebackup_name", recovery_basebackup_name)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="disableReplicationFactorAdjustment")
    def disable_replication_factor_adjustment(self) -> Optional[str]:
        return pulumi.get(self, "disable_replication_factor_adjustment")

    @disable_replication_factor_adjustment.setter
    def disable_replication_factor_adjustment(self, value: Optional[str]):
        pulumi.set(self, "disable_replication_factor_adjustment", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional['GetServiceElasticsearchUserConfigElasticsearchArgs']:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional['GetServiceElasticsearchUserConfigElasticsearchArgs']):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter(name="elasticsearchVersion")
    def elasticsearch_version(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_version")

    @elasticsearch_version.setter
    def elasticsearch_version(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_version", value)

    @property
    @pulumi.getter(name="indexPatterns")
    def index_patterns(self) -> Optional[List['GetServiceElasticsearchUserConfigIndexPatternArgs']]:
        return pulumi.get(self, "index_patterns")

    @index_patterns.setter
    def index_patterns(self, value: Optional[List['GetServiceElasticsearchUserConfigIndexPatternArgs']]):
        pulumi.set(self, "index_patterns", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional['GetServiceElasticsearchUserConfigKibanaArgs']:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional['GetServiceElasticsearchUserConfigKibanaArgs']):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[str]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[str]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceElasticsearchUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceElasticsearchUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceElasticsearchUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceElasticsearchUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryBasebackupName")
    def recovery_basebackup_name(self) -> Optional[str]:
        return pulumi.get(self, "recovery_basebackup_name")

    @recovery_basebackup_name.setter
    def recovery_basebackup_name(self, value: Optional[str]):
        pulumi.set(self, "recovery_basebackup_name", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigElasticsearchArgs:
    def __init__(__self__, *,
                 action_auto_create_index_enabled: Optional[str] = None,
                 action_destructive_requires_name: Optional[str] = None,
                 http_max_content_length: Optional[str] = None,
                 http_max_header_size: Optional[str] = None,
                 http_max_initial_line_length: Optional[str] = None,
                 indices_fielddata_cache_size: Optional[str] = None,
                 indices_memory_index_buffer_size: Optional[str] = None,
                 indices_queries_cache_size: Optional[str] = None,
                 indices_query_bool_max_clause_count: Optional[str] = None,
                 reindex_remote_whitelists: Optional[List[str]] = None,
                 search_max_buckets: Optional[str] = None,
                 thread_pool_analyze_queue_size: Optional[str] = None,
                 thread_pool_analyze_size: Optional[str] = None,
                 thread_pool_force_merge_size: Optional[str] = None,
                 thread_pool_get_queue_size: Optional[str] = None,
                 thread_pool_get_size: Optional[str] = None,
                 thread_pool_index_queue_size: Optional[str] = None,
                 thread_pool_index_size: Optional[str] = None,
                 thread_pool_search_queue_size: Optional[str] = None,
                 thread_pool_search_size: Optional[str] = None,
                 thread_pool_search_throttled_queue_size: Optional[str] = None,
                 thread_pool_search_throttled_size: Optional[str] = None,
                 thread_pool_write_queue_size: Optional[str] = None,
                 thread_pool_write_size: Optional[str] = None):
        if action_auto_create_index_enabled is not None:
            pulumi.set(__self__, "action_auto_create_index_enabled", action_auto_create_index_enabled)
        if action_destructive_requires_name is not None:
            pulumi.set(__self__, "action_destructive_requires_name", action_destructive_requires_name)
        if http_max_content_length is not None:
            pulumi.set(__self__, "http_max_content_length", http_max_content_length)
        if http_max_header_size is not None:
            pulumi.set(__self__, "http_max_header_size", http_max_header_size)
        if http_max_initial_line_length is not None:
            pulumi.set(__self__, "http_max_initial_line_length", http_max_initial_line_length)
        if indices_fielddata_cache_size is not None:
            pulumi.set(__self__, "indices_fielddata_cache_size", indices_fielddata_cache_size)
        if indices_memory_index_buffer_size is not None:
            pulumi.set(__self__, "indices_memory_index_buffer_size", indices_memory_index_buffer_size)
        if indices_queries_cache_size is not None:
            pulumi.set(__self__, "indices_queries_cache_size", indices_queries_cache_size)
        if indices_query_bool_max_clause_count is not None:
            pulumi.set(__self__, "indices_query_bool_max_clause_count", indices_query_bool_max_clause_count)
        if reindex_remote_whitelists is not None:
            pulumi.set(__self__, "reindex_remote_whitelists", reindex_remote_whitelists)
        if search_max_buckets is not None:
            pulumi.set(__self__, "search_max_buckets", search_max_buckets)
        if thread_pool_analyze_queue_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_queue_size", thread_pool_analyze_queue_size)
        if thread_pool_analyze_size is not None:
            pulumi.set(__self__, "thread_pool_analyze_size", thread_pool_analyze_size)
        if thread_pool_force_merge_size is not None:
            pulumi.set(__self__, "thread_pool_force_merge_size", thread_pool_force_merge_size)
        if thread_pool_get_queue_size is not None:
            pulumi.set(__self__, "thread_pool_get_queue_size", thread_pool_get_queue_size)
        if thread_pool_get_size is not None:
            pulumi.set(__self__, "thread_pool_get_size", thread_pool_get_size)
        if thread_pool_index_queue_size is not None:
            pulumi.set(__self__, "thread_pool_index_queue_size", thread_pool_index_queue_size)
        if thread_pool_index_size is not None:
            pulumi.set(__self__, "thread_pool_index_size", thread_pool_index_size)
        if thread_pool_search_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_queue_size", thread_pool_search_queue_size)
        if thread_pool_search_size is not None:
            pulumi.set(__self__, "thread_pool_search_size", thread_pool_search_size)
        if thread_pool_search_throttled_queue_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_queue_size", thread_pool_search_throttled_queue_size)
        if thread_pool_search_throttled_size is not None:
            pulumi.set(__self__, "thread_pool_search_throttled_size", thread_pool_search_throttled_size)
        if thread_pool_write_queue_size is not None:
            pulumi.set(__self__, "thread_pool_write_queue_size", thread_pool_write_queue_size)
        if thread_pool_write_size is not None:
            pulumi.set(__self__, "thread_pool_write_size", thread_pool_write_size)

    @property
    @pulumi.getter(name="actionAutoCreateIndexEnabled")
    def action_auto_create_index_enabled(self) -> Optional[str]:
        return pulumi.get(self, "action_auto_create_index_enabled")

    @action_auto_create_index_enabled.setter
    def action_auto_create_index_enabled(self, value: Optional[str]):
        pulumi.set(self, "action_auto_create_index_enabled", value)

    @property
    @pulumi.getter(name="actionDestructiveRequiresName")
    def action_destructive_requires_name(self) -> Optional[str]:
        return pulumi.get(self, "action_destructive_requires_name")

    @action_destructive_requires_name.setter
    def action_destructive_requires_name(self, value: Optional[str]):
        pulumi.set(self, "action_destructive_requires_name", value)

    @property
    @pulumi.getter(name="httpMaxContentLength")
    def http_max_content_length(self) -> Optional[str]:
        return pulumi.get(self, "http_max_content_length")

    @http_max_content_length.setter
    def http_max_content_length(self, value: Optional[str]):
        pulumi.set(self, "http_max_content_length", value)

    @property
    @pulumi.getter(name="httpMaxHeaderSize")
    def http_max_header_size(self) -> Optional[str]:
        return pulumi.get(self, "http_max_header_size")

    @http_max_header_size.setter
    def http_max_header_size(self, value: Optional[str]):
        pulumi.set(self, "http_max_header_size", value)

    @property
    @pulumi.getter(name="httpMaxInitialLineLength")
    def http_max_initial_line_length(self) -> Optional[str]:
        return pulumi.get(self, "http_max_initial_line_length")

    @http_max_initial_line_length.setter
    def http_max_initial_line_length(self, value: Optional[str]):
        pulumi.set(self, "http_max_initial_line_length", value)

    @property
    @pulumi.getter(name="indicesFielddataCacheSize")
    def indices_fielddata_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "indices_fielddata_cache_size")

    @indices_fielddata_cache_size.setter
    def indices_fielddata_cache_size(self, value: Optional[str]):
        pulumi.set(self, "indices_fielddata_cache_size", value)

    @property
    @pulumi.getter(name="indicesMemoryIndexBufferSize")
    def indices_memory_index_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "indices_memory_index_buffer_size")

    @indices_memory_index_buffer_size.setter
    def indices_memory_index_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "indices_memory_index_buffer_size", value)

    @property
    @pulumi.getter(name="indicesQueriesCacheSize")
    def indices_queries_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "indices_queries_cache_size")

    @indices_queries_cache_size.setter
    def indices_queries_cache_size(self, value: Optional[str]):
        pulumi.set(self, "indices_queries_cache_size", value)

    @property
    @pulumi.getter(name="indicesQueryBoolMaxClauseCount")
    def indices_query_bool_max_clause_count(self) -> Optional[str]:
        return pulumi.get(self, "indices_query_bool_max_clause_count")

    @indices_query_bool_max_clause_count.setter
    def indices_query_bool_max_clause_count(self, value: Optional[str]):
        pulumi.set(self, "indices_query_bool_max_clause_count", value)

    @property
    @pulumi.getter(name="reindexRemoteWhitelists")
    def reindex_remote_whitelists(self) -> Optional[List[str]]:
        return pulumi.get(self, "reindex_remote_whitelists")

    @reindex_remote_whitelists.setter
    def reindex_remote_whitelists(self, value: Optional[List[str]]):
        pulumi.set(self, "reindex_remote_whitelists", value)

    @property
    @pulumi.getter(name="searchMaxBuckets")
    def search_max_buckets(self) -> Optional[str]:
        return pulumi.get(self, "search_max_buckets")

    @search_max_buckets.setter
    def search_max_buckets(self, value: Optional[str]):
        pulumi.set(self, "search_max_buckets", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeQueueSize")
    def thread_pool_analyze_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_analyze_queue_size")

    @thread_pool_analyze_queue_size.setter
    def thread_pool_analyze_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_analyze_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolAnalyzeSize")
    def thread_pool_analyze_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_analyze_size")

    @thread_pool_analyze_size.setter
    def thread_pool_analyze_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_analyze_size", value)

    @property
    @pulumi.getter(name="threadPoolForceMergeSize")
    def thread_pool_force_merge_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_force_merge_size")

    @thread_pool_force_merge_size.setter
    def thread_pool_force_merge_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_force_merge_size", value)

    @property
    @pulumi.getter(name="threadPoolGetQueueSize")
    def thread_pool_get_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_get_queue_size")

    @thread_pool_get_queue_size.setter
    def thread_pool_get_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_get_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolGetSize")
    def thread_pool_get_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_get_size")

    @thread_pool_get_size.setter
    def thread_pool_get_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_get_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexQueueSize")
    def thread_pool_index_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_index_queue_size")

    @thread_pool_index_queue_size.setter
    def thread_pool_index_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_index_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolIndexSize")
    def thread_pool_index_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_index_size")

    @thread_pool_index_size.setter
    def thread_pool_index_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_index_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchQueueSize")
    def thread_pool_search_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_queue_size")

    @thread_pool_search_queue_size.setter
    def thread_pool_search_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchSize")
    def thread_pool_search_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_size")

    @thread_pool_search_size.setter
    def thread_pool_search_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledQueueSize")
    def thread_pool_search_throttled_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_throttled_queue_size")

    @thread_pool_search_throttled_queue_size.setter
    def thread_pool_search_throttled_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_throttled_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolSearchThrottledSize")
    def thread_pool_search_throttled_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_search_throttled_size")

    @thread_pool_search_throttled_size.setter
    def thread_pool_search_throttled_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_search_throttled_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteQueueSize")
    def thread_pool_write_queue_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_write_queue_size")

    @thread_pool_write_queue_size.setter
    def thread_pool_write_queue_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_write_queue_size", value)

    @property
    @pulumi.getter(name="threadPoolWriteSize")
    def thread_pool_write_size(self) -> Optional[str]:
        return pulumi.get(self, "thread_pool_write_size")

    @thread_pool_write_size.setter
    def thread_pool_write_size(self, value: Optional[str]):
        pulumi.set(self, "thread_pool_write_size", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigIndexPatternArgs:
    def __init__(__self__, *,
                 max_index_count: Optional[str] = None,
                 pattern: Optional[str] = None):
        if max_index_count is not None:
            pulumi.set(__self__, "max_index_count", max_index_count)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="maxIndexCount")
    def max_index_count(self) -> Optional[str]:
        return pulumi.get(self, "max_index_count")

    @max_index_count.setter
    def max_index_count(self, value: Optional[str]):
        pulumi.set(self, "max_index_count", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[str]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigKibanaArgs:
    def __init__(__self__, *,
                 elasticsearch_request_timeout: Optional[str] = None,
                 enabled: Optional[str] = None,
                 max_old_space_size: Optional[str] = None):
        if elasticsearch_request_timeout is not None:
            pulumi.set(__self__, "elasticsearch_request_timeout", elasticsearch_request_timeout)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_old_space_size is not None:
            pulumi.set(__self__, "max_old_space_size", max_old_space_size)

    @property
    @pulumi.getter(name="elasticsearchRequestTimeout")
    def elasticsearch_request_timeout(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_request_timeout")

    @elasticsearch_request_timeout.setter
    def elasticsearch_request_timeout(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_request_timeout", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxOldSpaceSize")
    def max_old_space_size(self) -> Optional[str]:
        return pulumi.get(self, "max_old_space_size")

    @max_old_space_size.setter
    def max_old_space_size(self, value: Optional[str]):
        pulumi.set(self, "max_old_space_size", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[str] = None,
                 kibana: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[str]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[str]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceElasticsearchUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[str] = None,
                 kibana: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[str]:
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[str]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceGrafanaArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceGrafanaUserConfigArgs:
    def __init__(__self__, *,
                 alerting_enabled: Optional[str] = None,
                 alerting_error_or_timeout: Optional[str] = None,
                 alerting_nodata_or_nullvalues: Optional[str] = None,
                 allow_embedding: Optional[str] = None,
                 auth_basic_enabled: Optional[str] = None,
                 auth_generic_oauth: Optional['GetServiceGrafanaUserConfigAuthGenericOauthArgs'] = None,
                 auth_github: Optional['GetServiceGrafanaUserConfigAuthGithubArgs'] = None,
                 auth_gitlab: Optional['GetServiceGrafanaUserConfigAuthGitlabArgs'] = None,
                 auth_google: Optional['GetServiceGrafanaUserConfigAuthGoogleArgs'] = None,
                 cookie_samesite: Optional[str] = None,
                 custom_domain: Optional[str] = None,
                 dashboards_versions_to_keep: Optional[str] = None,
                 dataproxy_send_user_header: Optional[str] = None,
                 dataproxy_timeout: Optional[str] = None,
                 disable_gravatar: Optional[str] = None,
                 editors_can_admin: Optional[str] = None,
                 external_image_storage: Optional['GetServiceGrafanaUserConfigExternalImageStorageArgs'] = None,
                 google_analytics_ua_id: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 metrics_enabled: Optional[str] = None,
                 private_access: Optional['GetServiceGrafanaUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServiceGrafanaUserConfigPublicAccessArgs'] = None,
                 smtp_server: Optional['GetServiceGrafanaUserConfigSmtpServerArgs'] = None,
                 user_auto_assign_org: Optional[str] = None,
                 user_auto_assign_org_role: Optional[str] = None,
                 viewers_can_edit: Optional[str] = None):
        if alerting_enabled is not None:
            pulumi.set(__self__, "alerting_enabled", alerting_enabled)
        if alerting_error_or_timeout is not None:
            pulumi.set(__self__, "alerting_error_or_timeout", alerting_error_or_timeout)
        if alerting_nodata_or_nullvalues is not None:
            pulumi.set(__self__, "alerting_nodata_or_nullvalues", alerting_nodata_or_nullvalues)
        if allow_embedding is not None:
            pulumi.set(__self__, "allow_embedding", allow_embedding)
        if auth_basic_enabled is not None:
            pulumi.set(__self__, "auth_basic_enabled", auth_basic_enabled)
        if auth_generic_oauth is not None:
            pulumi.set(__self__, "auth_generic_oauth", auth_generic_oauth)
        if auth_github is not None:
            pulumi.set(__self__, "auth_github", auth_github)
        if auth_gitlab is not None:
            pulumi.set(__self__, "auth_gitlab", auth_gitlab)
        if auth_google is not None:
            pulumi.set(__self__, "auth_google", auth_google)
        if cookie_samesite is not None:
            pulumi.set(__self__, "cookie_samesite", cookie_samesite)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if dashboards_versions_to_keep is not None:
            pulumi.set(__self__, "dashboards_versions_to_keep", dashboards_versions_to_keep)
        if dataproxy_send_user_header is not None:
            pulumi.set(__self__, "dataproxy_send_user_header", dataproxy_send_user_header)
        if dataproxy_timeout is not None:
            pulumi.set(__self__, "dataproxy_timeout", dataproxy_timeout)
        if disable_gravatar is not None:
            pulumi.set(__self__, "disable_gravatar", disable_gravatar)
        if editors_can_admin is not None:
            pulumi.set(__self__, "editors_can_admin", editors_can_admin)
        if external_image_storage is not None:
            pulumi.set(__self__, "external_image_storage", external_image_storage)
        if google_analytics_ua_id is not None:
            pulumi.set(__self__, "google_analytics_ua_id", google_analytics_ua_id)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if smtp_server is not None:
            pulumi.set(__self__, "smtp_server", smtp_server)
        if user_auto_assign_org is not None:
            pulumi.set(__self__, "user_auto_assign_org", user_auto_assign_org)
        if user_auto_assign_org_role is not None:
            pulumi.set(__self__, "user_auto_assign_org_role", user_auto_assign_org_role)
        if viewers_can_edit is not None:
            pulumi.set(__self__, "viewers_can_edit", viewers_can_edit)

    @property
    @pulumi.getter(name="alertingEnabled")
    def alerting_enabled(self) -> Optional[str]:
        return pulumi.get(self, "alerting_enabled")

    @alerting_enabled.setter
    def alerting_enabled(self, value: Optional[str]):
        pulumi.set(self, "alerting_enabled", value)

    @property
    @pulumi.getter(name="alertingErrorOrTimeout")
    def alerting_error_or_timeout(self) -> Optional[str]:
        return pulumi.get(self, "alerting_error_or_timeout")

    @alerting_error_or_timeout.setter
    def alerting_error_or_timeout(self, value: Optional[str]):
        pulumi.set(self, "alerting_error_or_timeout", value)

    @property
    @pulumi.getter(name="alertingNodataOrNullvalues")
    def alerting_nodata_or_nullvalues(self) -> Optional[str]:
        return pulumi.get(self, "alerting_nodata_or_nullvalues")

    @alerting_nodata_or_nullvalues.setter
    def alerting_nodata_or_nullvalues(self, value: Optional[str]):
        pulumi.set(self, "alerting_nodata_or_nullvalues", value)

    @property
    @pulumi.getter(name="allowEmbedding")
    def allow_embedding(self) -> Optional[str]:
        return pulumi.get(self, "allow_embedding")

    @allow_embedding.setter
    def allow_embedding(self, value: Optional[str]):
        pulumi.set(self, "allow_embedding", value)

    @property
    @pulumi.getter(name="authBasicEnabled")
    def auth_basic_enabled(self) -> Optional[str]:
        return pulumi.get(self, "auth_basic_enabled")

    @auth_basic_enabled.setter
    def auth_basic_enabled(self, value: Optional[str]):
        pulumi.set(self, "auth_basic_enabled", value)

    @property
    @pulumi.getter(name="authGenericOauth")
    def auth_generic_oauth(self) -> Optional['GetServiceGrafanaUserConfigAuthGenericOauthArgs']:
        return pulumi.get(self, "auth_generic_oauth")

    @auth_generic_oauth.setter
    def auth_generic_oauth(self, value: Optional['GetServiceGrafanaUserConfigAuthGenericOauthArgs']):
        pulumi.set(self, "auth_generic_oauth", value)

    @property
    @pulumi.getter(name="authGithub")
    def auth_github(self) -> Optional['GetServiceGrafanaUserConfigAuthGithubArgs']:
        return pulumi.get(self, "auth_github")

    @auth_github.setter
    def auth_github(self, value: Optional['GetServiceGrafanaUserConfigAuthGithubArgs']):
        pulumi.set(self, "auth_github", value)

    @property
    @pulumi.getter(name="authGitlab")
    def auth_gitlab(self) -> Optional['GetServiceGrafanaUserConfigAuthGitlabArgs']:
        return pulumi.get(self, "auth_gitlab")

    @auth_gitlab.setter
    def auth_gitlab(self, value: Optional['GetServiceGrafanaUserConfigAuthGitlabArgs']):
        pulumi.set(self, "auth_gitlab", value)

    @property
    @pulumi.getter(name="authGoogle")
    def auth_google(self) -> Optional['GetServiceGrafanaUserConfigAuthGoogleArgs']:
        return pulumi.get(self, "auth_google")

    @auth_google.setter
    def auth_google(self, value: Optional['GetServiceGrafanaUserConfigAuthGoogleArgs']):
        pulumi.set(self, "auth_google", value)

    @property
    @pulumi.getter(name="cookieSamesite")
    def cookie_samesite(self) -> Optional[str]:
        return pulumi.get(self, "cookie_samesite")

    @cookie_samesite.setter
    def cookie_samesite(self, value: Optional[str]):
        pulumi.set(self, "cookie_samesite", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="dashboardsVersionsToKeep")
    def dashboards_versions_to_keep(self) -> Optional[str]:
        return pulumi.get(self, "dashboards_versions_to_keep")

    @dashboards_versions_to_keep.setter
    def dashboards_versions_to_keep(self, value: Optional[str]):
        pulumi.set(self, "dashboards_versions_to_keep", value)

    @property
    @pulumi.getter(name="dataproxySendUserHeader")
    def dataproxy_send_user_header(self) -> Optional[str]:
        return pulumi.get(self, "dataproxy_send_user_header")

    @dataproxy_send_user_header.setter
    def dataproxy_send_user_header(self, value: Optional[str]):
        pulumi.set(self, "dataproxy_send_user_header", value)

    @property
    @pulumi.getter(name="dataproxyTimeout")
    def dataproxy_timeout(self) -> Optional[str]:
        return pulumi.get(self, "dataproxy_timeout")

    @dataproxy_timeout.setter
    def dataproxy_timeout(self, value: Optional[str]):
        pulumi.set(self, "dataproxy_timeout", value)

    @property
    @pulumi.getter(name="disableGravatar")
    def disable_gravatar(self) -> Optional[str]:
        return pulumi.get(self, "disable_gravatar")

    @disable_gravatar.setter
    def disable_gravatar(self, value: Optional[str]):
        pulumi.set(self, "disable_gravatar", value)

    @property
    @pulumi.getter(name="editorsCanAdmin")
    def editors_can_admin(self) -> Optional[str]:
        return pulumi.get(self, "editors_can_admin")

    @editors_can_admin.setter
    def editors_can_admin(self, value: Optional[str]):
        pulumi.set(self, "editors_can_admin", value)

    @property
    @pulumi.getter(name="externalImageStorage")
    def external_image_storage(self) -> Optional['GetServiceGrafanaUserConfigExternalImageStorageArgs']:
        return pulumi.get(self, "external_image_storage")

    @external_image_storage.setter
    def external_image_storage(self, value: Optional['GetServiceGrafanaUserConfigExternalImageStorageArgs']):
        pulumi.set(self, "external_image_storage", value)

    @property
    @pulumi.getter(name="googleAnalyticsUaId")
    def google_analytics_ua_id(self) -> Optional[str]:
        return pulumi.get(self, "google_analytics_ua_id")

    @google_analytics_ua_id.setter
    def google_analytics_ua_id(self, value: Optional[str]):
        pulumi.set(self, "google_analytics_ua_id", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[str]:
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[str]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceGrafanaUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceGrafanaUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceGrafanaUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceGrafanaUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="smtpServer")
    def smtp_server(self) -> Optional['GetServiceGrafanaUserConfigSmtpServerArgs']:
        return pulumi.get(self, "smtp_server")

    @smtp_server.setter
    def smtp_server(self, value: Optional['GetServiceGrafanaUserConfigSmtpServerArgs']):
        pulumi.set(self, "smtp_server", value)

    @property
    @pulumi.getter(name="userAutoAssignOrg")
    def user_auto_assign_org(self) -> Optional[str]:
        return pulumi.get(self, "user_auto_assign_org")

    @user_auto_assign_org.setter
    def user_auto_assign_org(self, value: Optional[str]):
        pulumi.set(self, "user_auto_assign_org", value)

    @property
    @pulumi.getter(name="userAutoAssignOrgRole")
    def user_auto_assign_org_role(self) -> Optional[str]:
        return pulumi.get(self, "user_auto_assign_org_role")

    @user_auto_assign_org_role.setter
    def user_auto_assign_org_role(self, value: Optional[str]):
        pulumi.set(self, "user_auto_assign_org_role", value)

    @property
    @pulumi.getter(name="viewersCanEdit")
    def viewers_can_edit(self) -> Optional[str]:
        return pulumi.get(self, "viewers_can_edit")

    @viewers_can_edit.setter
    def viewers_can_edit(self, value: Optional[str]):
        pulumi.set(self, "viewers_can_edit", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigAuthGenericOauthArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_domains: Optional[List[str]] = None,
                 allowed_organizations: Optional[List[str]] = None,
                 api_url: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 name: Optional[str] = None,
                 scopes: Optional[List[str]] = None,
                 token_url: Optional[str] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[List[str]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[List[str]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[str]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigAuthGithubArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_organizations: Optional[List[str]] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 team_ids: Optional[List[str]] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_organizations is not None:
            pulumi.set(__self__, "allowed_organizations", allowed_organizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if team_ids is not None:
            pulumi.set(__self__, "team_ids", team_ids)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedOrganizations")
    def allowed_organizations(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_organizations")

    @allowed_organizations.setter
    def allowed_organizations(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_organizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="teamIds")
    def team_ids(self) -> Optional[List[str]]:
        return pulumi.get(self, "team_ids")

    @team_ids.setter
    def team_ids(self, value: Optional[List[str]]):
        pulumi.set(self, "team_ids", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigAuthGitlabArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_groups: Optional[List[str]] = None,
                 api_url: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 token_url: Optional[str] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_groups is not None:
            pulumi.set(__self__, "allowed_groups", allowed_groups)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedGroups")
    def allowed_groups(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_groups")

    @allowed_groups.setter
    def allowed_groups(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_groups", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[str]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigAuthGoogleArgs:
    def __init__(__self__, *,
                 allow_sign_up: Optional[str] = None,
                 allowed_domains: Optional[List[str]] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        if allow_sign_up is not None:
            pulumi.set(__self__, "allow_sign_up", allow_sign_up)
        if allowed_domains is not None:
            pulumi.set(__self__, "allowed_domains", allowed_domains)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="allowSignUp")
    def allow_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "allow_sign_up")

    @allow_sign_up.setter
    def allow_sign_up(self, value: Optional[str]):
        pulumi.set(self, "allow_sign_up", value)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional[List[str]]:
        return pulumi.get(self, "allowed_domains")

    @allowed_domains.setter
    def allowed_domains(self, value: Optional[List[str]]):
        pulumi.set(self, "allowed_domains", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[str]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigExternalImageStorageArgs:
    def __init__(__self__, *,
                 access_key: Optional[str] = None,
                 bucket_url: Optional[str] = None,
                 provider: Optional[str] = None,
                 secret_key: Optional[str] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket_url is not None:
            pulumi.set(__self__, "bucket_url", bucket_url)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> Optional[str]:
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: Optional[str]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[str]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[str] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[str]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[str]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 grafana: Optional[str] = None):
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[str]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[str]):
        pulumi.set(self, "grafana", value)


@pulumi.input_type
class GetServiceGrafanaUserConfigSmtpServerArgs:
    def __init__(__self__, *,
                 from_address: Optional[str] = None,
                 from_name: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 skip_verify: Optional[str] = None,
                 username: Optional[str] = None):
        if from_address is not None:
            pulumi.set(__self__, "from_address", from_address)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[str]:
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[str]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetServiceInfluxdbArgs:
    def __init__(__self__, *,
                 database_name: str):
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: str):
        pulumi.set(self, "database_name", value)


@pulumi.input_type
class GetServiceInfluxdbUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 private_access: Optional['GetServiceInfluxdbUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServiceInfluxdbUserConfigPublicAccessArgs'] = None,
                 service_to_fork_from: Optional[str] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceInfluxdbUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceInfluxdbUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceInfluxdbUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceInfluxdbUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceInfluxdbUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[str] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[str]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[str]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class GetServiceInfluxdbUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 influxdb: Optional[str] = None):
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[str]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[str]):
        pulumi.set(self, "influxdb", value)


@pulumi.input_type
class GetServiceIntegrationEndpointDatadogUserConfigArgs:
    def __init__(__self__, *,
                 datadog_api_key: Optional[str] = None,
                 disable_consumer_stats: Optional[str] = None,
                 max_partition_contexts: Optional[str] = None,
                 site: Optional[str] = None):
        if datadog_api_key is not None:
            pulumi.set(__self__, "datadog_api_key", datadog_api_key)
        if disable_consumer_stats is not None:
            pulumi.set(__self__, "disable_consumer_stats", disable_consumer_stats)
        if max_partition_contexts is not None:
            pulumi.set(__self__, "max_partition_contexts", max_partition_contexts)
        if site is not None:
            pulumi.set(__self__, "site", site)

    @property
    @pulumi.getter(name="datadogApiKey")
    def datadog_api_key(self) -> Optional[str]:
        return pulumi.get(self, "datadog_api_key")

    @datadog_api_key.setter
    def datadog_api_key(self, value: Optional[str]):
        pulumi.set(self, "datadog_api_key", value)

    @property
    @pulumi.getter(name="disableConsumerStats")
    def disable_consumer_stats(self) -> Optional[str]:
        return pulumi.get(self, "disable_consumer_stats")

    @disable_consumer_stats.setter
    def disable_consumer_stats(self, value: Optional[str]):
        pulumi.set(self, "disable_consumer_stats", value)

    @property
    @pulumi.getter(name="maxPartitionContexts")
    def max_partition_contexts(self) -> Optional[str]:
        return pulumi.get(self, "max_partition_contexts")

    @max_partition_contexts.setter
    def max_partition_contexts(self, value: Optional[str]):
        pulumi.set(self, "max_partition_contexts", value)

    @property
    @pulumi.getter
    def site(self) -> Optional[str]:
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: Optional[str]):
        pulumi.set(self, "site", value)


@pulumi.input_type
class GetServiceIntegrationEndpointExternalElasticsearchLogsUserConfigArgs:
    def __init__(__self__, *,
                 ca: Optional[str] = None,
                 index_days_max: Optional[str] = None,
                 index_prefix: Optional[str] = None,
                 timeout: Optional[str] = None,
                 url: Optional[str] = None):
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if index_days_max is not None:
            pulumi.set(__self__, "index_days_max", index_days_max)
        if index_prefix is not None:
            pulumi.set(__self__, "index_prefix", index_prefix)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[str]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[str]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="indexDaysMax")
    def index_days_max(self) -> Optional[str]:
        return pulumi.get(self, "index_days_max")

    @index_days_max.setter
    def index_days_max(self, value: Optional[str]):
        pulumi.set(self, "index_days_max", value)

    @property
    @pulumi.getter(name="indexPrefix")
    def index_prefix(self) -> Optional[str]:
        return pulumi.get(self, "index_prefix")

    @index_prefix.setter
    def index_prefix(self, value: Optional[str]):
        pulumi.set(self, "index_prefix", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GetServiceIntegrationEndpointPrometheusUserConfigArgs:
    def __init__(__self__, *,
                 basic_auth_password: Optional[str] = None,
                 basic_auth_username: Optional[str] = None):
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[str]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[str]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[str]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[str]):
        pulumi.set(self, "basic_auth_username", value)


@pulumi.input_type
class GetServiceIntegrationEndpointRsyslogUserConfigArgs:
    def __init__(__self__, *,
                 ca: Optional[str] = None,
                 cert: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 logline: Optional[str] = None,
                 port: Optional[str] = None,
                 sd: Optional[str] = None,
                 server: Optional[str] = None,
                 tls: Optional[str] = None):
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if logline is not None:
            pulumi.set(__self__, "logline", logline)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if sd is not None:
            pulumi.set(__self__, "sd", sd)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def ca(self) -> Optional[str]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[str]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[str]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[str]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def logline(self) -> Optional[str]:
        return pulumi.get(self, "logline")

    @logline.setter
    def logline(self, value: Optional[str]):
        pulumi.set(self, "logline", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sd(self) -> Optional[str]:
        return pulumi.get(self, "sd")

    @sd.setter
    def sd(self, value: Optional[str]):
        pulumi.set(self, "sd", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[str]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[str]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class GetServiceIntegrationKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional['GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs'] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional['GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional['GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs']):
        pulumi.set(self, "kafka_connect", value)


@pulumi.input_type
class GetServiceIntegrationKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 config_storage_topic: Optional[str] = None,
                 group_id: Optional[str] = None,
                 offset_storage_topic: Optional[str] = None,
                 status_storage_topic: Optional[str] = None):
        if config_storage_topic is not None:
            pulumi.set(__self__, "config_storage_topic", config_storage_topic)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if offset_storage_topic is not None:
            pulumi.set(__self__, "offset_storage_topic", offset_storage_topic)
        if status_storage_topic is not None:
            pulumi.set(__self__, "status_storage_topic", status_storage_topic)

    @property
    @pulumi.getter(name="configStorageTopic")
    def config_storage_topic(self) -> Optional[str]:
        return pulumi.get(self, "config_storage_topic")

    @config_storage_topic.setter
    def config_storage_topic(self, value: Optional[str]):
        pulumi.set(self, "config_storage_topic", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="offsetStorageTopic")
    def offset_storage_topic(self) -> Optional[str]:
        return pulumi.get(self, "offset_storage_topic")

    @offset_storage_topic.setter
    def offset_storage_topic(self, value: Optional[str]):
        pulumi.set(self, "offset_storage_topic", value)

    @property
    @pulumi.getter(name="statusStorageTopic")
    def status_storage_topic(self) -> Optional[str]:
        return pulumi.get(self, "status_storage_topic")

    @status_storage_topic.setter
    def status_storage_topic(self, value: Optional[str]):
        pulumi.set(self, "status_storage_topic", value)


@pulumi.input_type
class GetServiceIntegrationKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 cluster_alias: Optional[str] = None):
        if cluster_alias is not None:
            pulumi.set(__self__, "cluster_alias", cluster_alias)

    @property
    @pulumi.getter(name="clusterAlias")
    def cluster_alias(self) -> Optional[str]:
        return pulumi.get(self, "cluster_alias")

    @cluster_alias.setter
    def cluster_alias(self, value: Optional[str]):
        pulumi.set(self, "cluster_alias", value)


@pulumi.input_type
class GetServiceIntegrationLogsUserConfigArgs:
    def __init__(__self__, *,
                 elasticsearch_index_days_max: Optional[str] = None,
                 elasticsearch_index_prefix: Optional[str] = None):
        if elasticsearch_index_days_max is not None:
            pulumi.set(__self__, "elasticsearch_index_days_max", elasticsearch_index_days_max)
        if elasticsearch_index_prefix is not None:
            pulumi.set(__self__, "elasticsearch_index_prefix", elasticsearch_index_prefix)

    @property
    @pulumi.getter(name="elasticsearchIndexDaysMax")
    def elasticsearch_index_days_max(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_index_days_max")

    @elasticsearch_index_days_max.setter
    def elasticsearch_index_days_max(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_index_days_max", value)

    @property
    @pulumi.getter(name="elasticsearchIndexPrefix")
    def elasticsearch_index_prefix(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_index_prefix")

    @elasticsearch_index_prefix.setter
    def elasticsearch_index_prefix(self, value: Optional[str]):
        pulumi.set(self, "elasticsearch_index_prefix", value)


@pulumi.input_type
class GetServiceIntegrationMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 mirrormaker_whitelist: Optional[str] = None):
        if mirrormaker_whitelist is not None:
            pulumi.set(__self__, "mirrormaker_whitelist", mirrormaker_whitelist)

    @property
    @pulumi.getter(name="mirrormakerWhitelist")
    def mirrormaker_whitelist(self) -> Optional[str]:
        return pulumi.get(self, "mirrormaker_whitelist")

    @mirrormaker_whitelist.setter
    def mirrormaker_whitelist(self, value: Optional[str]):
        pulumi.set(self, "mirrormaker_whitelist", value)


@pulumi.input_type
class GetServiceKafkaArgs:
    def __init__(__self__, *,
                 access_cert: str,
                 access_key: str,
                 connect_uri: str,
                 rest_uri: str,
                 schema_registry_uri: str):
        pulumi.set(__self__, "access_cert", access_cert)
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "connect_uri", connect_uri)
        pulumi.set(__self__, "rest_uri", rest_uri)
        pulumi.set(__self__, "schema_registry_uri", schema_registry_uri)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> str:
        return pulumi.get(self, "access_cert")

    @access_cert.setter
    def access_cert(self, value: str):
        pulumi.set(self, "access_cert", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: str):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="connectUri")
    def connect_uri(self) -> str:
        return pulumi.get(self, "connect_uri")

    @connect_uri.setter
    def connect_uri(self, value: str):
        pulumi.set(self, "connect_uri", value)

    @property
    @pulumi.getter(name="restUri")
    def rest_uri(self) -> str:
        return pulumi.get(self, "rest_uri")

    @rest_uri.setter
    def rest_uri(self, value: str):
        pulumi.set(self, "rest_uri", value)

    @property
    @pulumi.getter(name="schemaRegistryUri")
    def schema_registry_uri(self) -> str:
        return pulumi.get(self, "schema_registry_uri")

    @schema_registry_uri.setter
    def schema_registry_uri(self, value: str):
        pulumi.set(self, "schema_registry_uri", value)


@pulumi.input_type
class GetServiceKafkaConnectArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceKafkaConnectUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[List[str]] = None,
                 kafka_connect: Optional['GetServiceKafkaConnectUserConfigKafkaConnectArgs'] = None,
                 private_access: Optional['GetServiceKafkaConnectUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServiceKafkaConnectUserConfigPublicAccessArgs'] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional['GetServiceKafkaConnectUserConfigKafkaConnectArgs']:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional['GetServiceKafkaConnectUserConfigKafkaConnectArgs']):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceKafkaConnectUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceKafkaConnectUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceKafkaConnectUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceKafkaConnectUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)


@pulumi.input_type
class GetServiceKafkaConnectUserConfigKafkaConnectArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[str] = None,
                 consumer_auto_offset_reset: Optional[str] = None,
                 consumer_isolation_level: Optional[str] = None,
                 consumer_max_poll_interval_ms: Optional[str] = None,
                 consumer_max_poll_records: Optional[str] = None,
                 offset_flush_interval_ms: Optional[str] = None,
                 offset_flush_timeout_ms: Optional[str] = None,
                 session_timeout_ms: Optional[str] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[str]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[str]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[str]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[str]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[str]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[str]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class GetServiceKafkaConnectUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceKafkaConnectUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka_connect: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceKafkaMirrormakerArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceKafkaMirrormakerUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[List[str]] = None,
                 kafka_mirrormaker: Optional['GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs'] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka_mirrormaker is not None:
            pulumi.set(__self__, "kafka_mirrormaker", kafka_mirrormaker)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter(name="kafkaMirrormaker")
    def kafka_mirrormaker(self) -> Optional['GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']:
        return pulumi.get(self, "kafka_mirrormaker")

    @kafka_mirrormaker.setter
    def kafka_mirrormaker(self, value: Optional['GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs']):
        pulumi.set(self, "kafka_mirrormaker", value)


@pulumi.input_type
class GetServiceKafkaMirrormakerUserConfigKafkaMirrormakerArgs:
    def __init__(__self__, *,
                 refresh_groups_enabled: Optional[str] = None,
                 refresh_groups_interval_seconds: Optional[str] = None,
                 refresh_topics_enabled: Optional[str] = None,
                 refresh_topics_interval_seconds: Optional[str] = None):
        if refresh_groups_enabled is not None:
            pulumi.set(__self__, "refresh_groups_enabled", refresh_groups_enabled)
        if refresh_groups_interval_seconds is not None:
            pulumi.set(__self__, "refresh_groups_interval_seconds", refresh_groups_interval_seconds)
        if refresh_topics_enabled is not None:
            pulumi.set(__self__, "refresh_topics_enabled", refresh_topics_enabled)
        if refresh_topics_interval_seconds is not None:
            pulumi.set(__self__, "refresh_topics_interval_seconds", refresh_topics_interval_seconds)

    @property
    @pulumi.getter(name="refreshGroupsEnabled")
    def refresh_groups_enabled(self) -> Optional[str]:
        return pulumi.get(self, "refresh_groups_enabled")

    @refresh_groups_enabled.setter
    def refresh_groups_enabled(self, value: Optional[str]):
        pulumi.set(self, "refresh_groups_enabled", value)

    @property
    @pulumi.getter(name="refreshGroupsIntervalSeconds")
    def refresh_groups_interval_seconds(self) -> Optional[str]:
        return pulumi.get(self, "refresh_groups_interval_seconds")

    @refresh_groups_interval_seconds.setter
    def refresh_groups_interval_seconds(self, value: Optional[str]):
        pulumi.set(self, "refresh_groups_interval_seconds", value)

    @property
    @pulumi.getter(name="refreshTopicsEnabled")
    def refresh_topics_enabled(self) -> Optional[str]:
        return pulumi.get(self, "refresh_topics_enabled")

    @refresh_topics_enabled.setter
    def refresh_topics_enabled(self, value: Optional[str]):
        pulumi.set(self, "refresh_topics_enabled", value)

    @property
    @pulumi.getter(name="refreshTopicsIntervalSeconds")
    def refresh_topics_interval_seconds(self) -> Optional[str]:
        return pulumi.get(self, "refresh_topics_interval_seconds")

    @refresh_topics_interval_seconds.setter
    def refresh_topics_interval_seconds(self, value: Optional[str]):
        pulumi.set(self, "refresh_topics_interval_seconds", value)


@pulumi.input_type
class GetServiceKafkaUserConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 kafka: Optional['GetServiceKafkaUserConfigKafkaArgs'] = None,
                 kafka_authentication_methods: Optional['GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs'] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_connect_config: Optional['GetServiceKafkaUserConfigKafkaConnectConfigArgs'] = None,
                 kafka_rest: Optional[str] = None,
                 kafka_rest_config: Optional['GetServiceKafkaUserConfigKafkaRestConfigArgs'] = None,
                 kafka_version: Optional[str] = None,
                 private_access: Optional['GetServiceKafkaUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServiceKafkaUserConfigPublicAccessArgs'] = None,
                 schema_registry: Optional[str] = None):
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_authentication_methods is not None:
            pulumi.set(__self__, "kafka_authentication_methods", kafka_authentication_methods)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_connect_config is not None:
            pulumi.set(__self__, "kafka_connect_config", kafka_connect_config)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if kafka_rest_config is not None:
            pulumi.set(__self__, "kafka_rest_config", kafka_rest_config)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional['GetServiceKafkaUserConfigKafkaArgs']:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional['GetServiceKafkaUserConfigKafkaArgs']):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaAuthenticationMethods")
    def kafka_authentication_methods(self) -> Optional['GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']:
        return pulumi.get(self, "kafka_authentication_methods")

    @kafka_authentication_methods.setter
    def kafka_authentication_methods(self, value: Optional['GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs']):
        pulumi.set(self, "kafka_authentication_methods", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaConnectConfig")
    def kafka_connect_config(self) -> Optional['GetServiceKafkaUserConfigKafkaConnectConfigArgs']:
        return pulumi.get(self, "kafka_connect_config")

    @kafka_connect_config.setter
    def kafka_connect_config(self, value: Optional['GetServiceKafkaUserConfigKafkaConnectConfigArgs']):
        pulumi.set(self, "kafka_connect_config", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter(name="kafkaRestConfig")
    def kafka_rest_config(self) -> Optional['GetServiceKafkaUserConfigKafkaRestConfigArgs']:
        return pulumi.get(self, "kafka_rest_config")

    @kafka_rest_config.setter
    def kafka_rest_config(self, value: Optional['GetServiceKafkaUserConfigKafkaRestConfigArgs']):
        pulumi.set(self, "kafka_rest_config", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[str]:
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[str]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceKafkaUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceKafkaUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceKafkaUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceKafkaUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class GetServiceKafkaUserConfigKafkaArgs:
    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[str] = None,
                 compression_type: Optional[str] = None,
                 connections_max_idle_ms: Optional[str] = None,
                 default_replication_factor: Optional[str] = None,
                 group_max_session_timeout_ms: Optional[str] = None,
                 group_min_session_timeout_ms: Optional[str] = None,
                 log_cleaner_max_compaction_lag_ms: Optional[str] = None,
                 log_cleaner_min_cleanable_ratio: Optional[str] = None,
                 log_cleaner_min_compaction_lag_ms: Optional[str] = None,
                 log_cleanup_policy: Optional[str] = None,
                 log_message_timestamp_difference_max_ms: Optional[str] = None,
                 log_message_timestamp_type: Optional[str] = None,
                 log_retention_bytes: Optional[str] = None,
                 log_retention_hours: Optional[str] = None,
                 log_segment_bytes: Optional[str] = None,
                 max_connections_per_ip: Optional[str] = None,
                 max_incremental_fetch_session_cache_slots: Optional[str] = None,
                 message_max_bytes: Optional[str] = None,
                 num_partitions: Optional[str] = None,
                 offsets_retention_minutes: Optional[str] = None,
                 producer_purgatory_purge_interval_requests: Optional[str] = None,
                 replica_fetch_max_bytes: Optional[str] = None,
                 replica_fetch_response_max_bytes: Optional[str] = None,
                 socket_request_max_bytes: Optional[str] = None):
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if connections_max_idle_ms is not None:
            pulumi.set(__self__, "connections_max_idle_ms", connections_max_idle_ms)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if group_max_session_timeout_ms is not None:
            pulumi.set(__self__, "group_max_session_timeout_ms", group_max_session_timeout_ms)
        if group_min_session_timeout_ms is not None:
            pulumi.set(__self__, "group_min_session_timeout_ms", group_min_session_timeout_ms)
        if log_cleaner_max_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_max_compaction_lag_ms", log_cleaner_max_compaction_lag_ms)
        if log_cleaner_min_cleanable_ratio is not None:
            pulumi.set(__self__, "log_cleaner_min_cleanable_ratio", log_cleaner_min_cleanable_ratio)
        if log_cleaner_min_compaction_lag_ms is not None:
            pulumi.set(__self__, "log_cleaner_min_compaction_lag_ms", log_cleaner_min_compaction_lag_ms)
        if log_cleanup_policy is not None:
            pulumi.set(__self__, "log_cleanup_policy", log_cleanup_policy)
        if log_message_timestamp_difference_max_ms is not None:
            pulumi.set(__self__, "log_message_timestamp_difference_max_ms", log_message_timestamp_difference_max_ms)
        if log_message_timestamp_type is not None:
            pulumi.set(__self__, "log_message_timestamp_type", log_message_timestamp_type)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if max_connections_per_ip is not None:
            pulumi.set(__self__, "max_connections_per_ip", max_connections_per_ip)
        if max_incremental_fetch_session_cache_slots is not None:
            pulumi.set(__self__, "max_incremental_fetch_session_cache_slots", max_incremental_fetch_session_cache_slots)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if producer_purgatory_purge_interval_requests is not None:
            pulumi.set(__self__, "producer_purgatory_purge_interval_requests", producer_purgatory_purge_interval_requests)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if replica_fetch_response_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_response_max_bytes", replica_fetch_response_max_bytes)
        if socket_request_max_bytes is not None:
            pulumi.set(__self__, "socket_request_max_bytes", socket_request_max_bytes)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[str]:
        return pulumi.get(self, "auto_create_topics_enable")

    @auto_create_topics_enable.setter
    def auto_create_topics_enable(self, value: Optional[str]):
        pulumi.set(self, "auto_create_topics_enable", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[str]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="connectionsMaxIdleMs")
    def connections_max_idle_ms(self) -> Optional[str]:
        return pulumi.get(self, "connections_max_idle_ms")

    @connections_max_idle_ms.setter
    def connections_max_idle_ms(self, value: Optional[str]):
        pulumi.set(self, "connections_max_idle_ms", value)

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[str]:
        return pulumi.get(self, "default_replication_factor")

    @default_replication_factor.setter
    def default_replication_factor(self, value: Optional[str]):
        pulumi.set(self, "default_replication_factor", value)

    @property
    @pulumi.getter(name="groupMaxSessionTimeoutMs")
    def group_max_session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "group_max_session_timeout_ms")

    @group_max_session_timeout_ms.setter
    def group_max_session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "group_max_session_timeout_ms", value)

    @property
    @pulumi.getter(name="groupMinSessionTimeoutMs")
    def group_min_session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "group_min_session_timeout_ms")

    @group_min_session_timeout_ms.setter
    def group_min_session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "group_min_session_timeout_ms", value)

    @property
    @pulumi.getter(name="logCleanerMaxCompactionLagMs")
    def log_cleaner_max_compaction_lag_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_max_compaction_lag_ms")

    @log_cleaner_max_compaction_lag_ms.setter
    def log_cleaner_max_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_max_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanerMinCleanableRatio")
    def log_cleaner_min_cleanable_ratio(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_min_cleanable_ratio")

    @log_cleaner_min_cleanable_ratio.setter
    def log_cleaner_min_cleanable_ratio(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_min_cleanable_ratio", value)

    @property
    @pulumi.getter(name="logCleanerMinCompactionLagMs")
    def log_cleaner_min_compaction_lag_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_cleaner_min_compaction_lag_ms")

    @log_cleaner_min_compaction_lag_ms.setter
    def log_cleaner_min_compaction_lag_ms(self, value: Optional[str]):
        pulumi.set(self, "log_cleaner_min_compaction_lag_ms", value)

    @property
    @pulumi.getter(name="logCleanupPolicy")
    def log_cleanup_policy(self) -> Optional[str]:
        return pulumi.get(self, "log_cleanup_policy")

    @log_cleanup_policy.setter
    def log_cleanup_policy(self, value: Optional[str]):
        pulumi.set(self, "log_cleanup_policy", value)

    @property
    @pulumi.getter(name="logMessageTimestampDifferenceMaxMs")
    def log_message_timestamp_difference_max_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_message_timestamp_difference_max_ms")

    @log_message_timestamp_difference_max_ms.setter
    def log_message_timestamp_difference_max_ms(self, value: Optional[str]):
        pulumi.set(self, "log_message_timestamp_difference_max_ms", value)

    @property
    @pulumi.getter(name="logMessageTimestampType")
    def log_message_timestamp_type(self) -> Optional[str]:
        return pulumi.get(self, "log_message_timestamp_type")

    @log_message_timestamp_type.setter
    def log_message_timestamp_type(self, value: Optional[str]):
        pulumi.set(self, "log_message_timestamp_type", value)

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_bytes")

    @log_retention_bytes.setter
    def log_retention_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_retention_bytes", value)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_hours")

    @log_retention_hours.setter
    def log_retention_hours(self, value: Optional[str]):
        pulumi.set(self, "log_retention_hours", value)

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_segment_bytes")

    @log_segment_bytes.setter
    def log_segment_bytes(self, value: Optional[str]):
        pulumi.set(self, "log_segment_bytes", value)

    @property
    @pulumi.getter(name="maxConnectionsPerIp")
    def max_connections_per_ip(self) -> Optional[str]:
        return pulumi.get(self, "max_connections_per_ip")

    @max_connections_per_ip.setter
    def max_connections_per_ip(self, value: Optional[str]):
        pulumi.set(self, "max_connections_per_ip", value)

    @property
    @pulumi.getter(name="maxIncrementalFetchSessionCacheSlots")
    def max_incremental_fetch_session_cache_slots(self) -> Optional[str]:
        return pulumi.get(self, "max_incremental_fetch_session_cache_slots")

    @max_incremental_fetch_session_cache_slots.setter
    def max_incremental_fetch_session_cache_slots(self, value: Optional[str]):
        pulumi.set(self, "max_incremental_fetch_session_cache_slots", value)

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "message_max_bytes")

    @message_max_bytes.setter
    def message_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "message_max_bytes", value)

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[str]:
        return pulumi.get(self, "num_partitions")

    @num_partitions.setter
    def num_partitions(self, value: Optional[str]):
        pulumi.set(self, "num_partitions", value)

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[str]:
        return pulumi.get(self, "offsets_retention_minutes")

    @offsets_retention_minutes.setter
    def offsets_retention_minutes(self, value: Optional[str]):
        pulumi.set(self, "offsets_retention_minutes", value)

    @property
    @pulumi.getter(name="producerPurgatoryPurgeIntervalRequests")
    def producer_purgatory_purge_interval_requests(self) -> Optional[str]:
        return pulumi.get(self, "producer_purgatory_purge_interval_requests")

    @producer_purgatory_purge_interval_requests.setter
    def producer_purgatory_purge_interval_requests(self, value: Optional[str]):
        pulumi.set(self, "producer_purgatory_purge_interval_requests", value)

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "replica_fetch_max_bytes")

    @replica_fetch_max_bytes.setter
    def replica_fetch_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "replica_fetch_max_bytes", value)

    @property
    @pulumi.getter(name="replicaFetchResponseMaxBytes")
    def replica_fetch_response_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "replica_fetch_response_max_bytes")

    @replica_fetch_response_max_bytes.setter
    def replica_fetch_response_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "replica_fetch_response_max_bytes", value)

    @property
    @pulumi.getter(name="socketRequestMaxBytes")
    def socket_request_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "socket_request_max_bytes")

    @socket_request_max_bytes.setter
    def socket_request_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "socket_request_max_bytes", value)


@pulumi.input_type
class GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs:
    def __init__(__self__, *,
                 certificate: Optional[str] = None,
                 sasl: Optional[str] = None):
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def sasl(self) -> Optional[str]:
        return pulumi.get(self, "sasl")

    @sasl.setter
    def sasl(self, value: Optional[str]):
        pulumi.set(self, "sasl", value)


@pulumi.input_type
class GetServiceKafkaUserConfigKafkaConnectConfigArgs:
    def __init__(__self__, *,
                 connector_client_config_override_policy: Optional[str] = None,
                 consumer_auto_offset_reset: Optional[str] = None,
                 consumer_isolation_level: Optional[str] = None,
                 consumer_max_poll_interval_ms: Optional[str] = None,
                 consumer_max_poll_records: Optional[str] = None,
                 offset_flush_interval_ms: Optional[str] = None,
                 offset_flush_timeout_ms: Optional[str] = None,
                 session_timeout_ms: Optional[str] = None):
        if connector_client_config_override_policy is not None:
            pulumi.set(__self__, "connector_client_config_override_policy", connector_client_config_override_policy)
        if consumer_auto_offset_reset is not None:
            pulumi.set(__self__, "consumer_auto_offset_reset", consumer_auto_offset_reset)
        if consumer_isolation_level is not None:
            pulumi.set(__self__, "consumer_isolation_level", consumer_isolation_level)
        if consumer_max_poll_interval_ms is not None:
            pulumi.set(__self__, "consumer_max_poll_interval_ms", consumer_max_poll_interval_ms)
        if consumer_max_poll_records is not None:
            pulumi.set(__self__, "consumer_max_poll_records", consumer_max_poll_records)
        if offset_flush_interval_ms is not None:
            pulumi.set(__self__, "offset_flush_interval_ms", offset_flush_interval_ms)
        if offset_flush_timeout_ms is not None:
            pulumi.set(__self__, "offset_flush_timeout_ms", offset_flush_timeout_ms)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="connectorClientConfigOverridePolicy")
    def connector_client_config_override_policy(self) -> Optional[str]:
        return pulumi.get(self, "connector_client_config_override_policy")

    @connector_client_config_override_policy.setter
    def connector_client_config_override_policy(self, value: Optional[str]):
        pulumi.set(self, "connector_client_config_override_policy", value)

    @property
    @pulumi.getter(name="consumerAutoOffsetReset")
    def consumer_auto_offset_reset(self) -> Optional[str]:
        return pulumi.get(self, "consumer_auto_offset_reset")

    @consumer_auto_offset_reset.setter
    def consumer_auto_offset_reset(self, value: Optional[str]):
        pulumi.set(self, "consumer_auto_offset_reset", value)

    @property
    @pulumi.getter(name="consumerIsolationLevel")
    def consumer_isolation_level(self) -> Optional[str]:
        return pulumi.get(self, "consumer_isolation_level")

    @consumer_isolation_level.setter
    def consumer_isolation_level(self, value: Optional[str]):
        pulumi.set(self, "consumer_isolation_level", value)

    @property
    @pulumi.getter(name="consumerMaxPollIntervalMs")
    def consumer_max_poll_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_interval_ms")

    @consumer_max_poll_interval_ms.setter
    def consumer_max_poll_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_interval_ms", value)

    @property
    @pulumi.getter(name="consumerMaxPollRecords")
    def consumer_max_poll_records(self) -> Optional[str]:
        return pulumi.get(self, "consumer_max_poll_records")

    @consumer_max_poll_records.setter
    def consumer_max_poll_records(self, value: Optional[str]):
        pulumi.set(self, "consumer_max_poll_records", value)

    @property
    @pulumi.getter(name="offsetFlushIntervalMs")
    def offset_flush_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_interval_ms")

    @offset_flush_interval_ms.setter
    def offset_flush_interval_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_interval_ms", value)

    @property
    @pulumi.getter(name="offsetFlushTimeoutMs")
    def offset_flush_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "offset_flush_timeout_ms")

    @offset_flush_timeout_ms.setter
    def offset_flush_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "offset_flush_timeout_ms", value)

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "session_timeout_ms")

    @session_timeout_ms.setter
    def session_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "session_timeout_ms", value)


@pulumi.input_type
class GetServiceKafkaUserConfigKafkaRestConfigArgs:
    def __init__(__self__, *,
                 consumer_enable_auto_commit: Optional[str] = None,
                 consumer_request_max_bytes: Optional[str] = None,
                 consumer_request_timeout_ms: Optional[str] = None,
                 producer_acks: Optional[str] = None,
                 producer_linger_ms: Optional[str] = None,
                 simpleconsumer_pool_size_max: Optional[str] = None):
        if consumer_enable_auto_commit is not None:
            pulumi.set(__self__, "consumer_enable_auto_commit", consumer_enable_auto_commit)
        if consumer_request_max_bytes is not None:
            pulumi.set(__self__, "consumer_request_max_bytes", consumer_request_max_bytes)
        if consumer_request_timeout_ms is not None:
            pulumi.set(__self__, "consumer_request_timeout_ms", consumer_request_timeout_ms)
        if producer_acks is not None:
            pulumi.set(__self__, "producer_acks", producer_acks)
        if producer_linger_ms is not None:
            pulumi.set(__self__, "producer_linger_ms", producer_linger_ms)
        if simpleconsumer_pool_size_max is not None:
            pulumi.set(__self__, "simpleconsumer_pool_size_max", simpleconsumer_pool_size_max)

    @property
    @pulumi.getter(name="consumerEnableAutoCommit")
    def consumer_enable_auto_commit(self) -> Optional[str]:
        return pulumi.get(self, "consumer_enable_auto_commit")

    @consumer_enable_auto_commit.setter
    def consumer_enable_auto_commit(self, value: Optional[str]):
        pulumi.set(self, "consumer_enable_auto_commit", value)

    @property
    @pulumi.getter(name="consumerRequestMaxBytes")
    def consumer_request_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "consumer_request_max_bytes")

    @consumer_request_max_bytes.setter
    def consumer_request_max_bytes(self, value: Optional[str]):
        pulumi.set(self, "consumer_request_max_bytes", value)

    @property
    @pulumi.getter(name="consumerRequestTimeoutMs")
    def consumer_request_timeout_ms(self) -> Optional[str]:
        return pulumi.get(self, "consumer_request_timeout_ms")

    @consumer_request_timeout_ms.setter
    def consumer_request_timeout_ms(self, value: Optional[str]):
        pulumi.set(self, "consumer_request_timeout_ms", value)

    @property
    @pulumi.getter(name="producerAcks")
    def producer_acks(self) -> Optional[str]:
        return pulumi.get(self, "producer_acks")

    @producer_acks.setter
    def producer_acks(self, value: Optional[str]):
        pulumi.set(self, "producer_acks", value)

    @property
    @pulumi.getter(name="producerLingerMs")
    def producer_linger_ms(self) -> Optional[str]:
        return pulumi.get(self, "producer_linger_ms")

    @producer_linger_ms.setter
    def producer_linger_ms(self, value: Optional[str]):
        pulumi.set(self, "producer_linger_ms", value)

    @property
    @pulumi.getter(name="simpleconsumerPoolSizeMax")
    def simpleconsumer_pool_size_max(self) -> Optional[str]:
        return pulumi.get(self, "simpleconsumer_pool_size_max")

    @simpleconsumer_pool_size_max.setter
    def simpleconsumer_pool_size_max(self, value: Optional[str]):
        pulumi.set(self, "simpleconsumer_pool_size_max", value)


@pulumi.input_type
class GetServiceKafkaUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceKafkaUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 kafka: Optional[str] = None,
                 kafka_connect: Optional[str] = None,
                 kafka_rest: Optional[str] = None,
                 prometheus: Optional[str] = None,
                 schema_registry: Optional[str] = None):
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_connect is not None:
            pulumi.set(__self__, "kafka_connect", kafka_connect)
        if kafka_rest is not None:
            pulumi.set(__self__, "kafka_rest", kafka_rest)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[str]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[str]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> Optional[str]:
        return pulumi.get(self, "kafka_connect")

    @kafka_connect.setter
    def kafka_connect(self, value: Optional[str]):
        pulumi.set(self, "kafka_connect", value)

    @property
    @pulumi.getter(name="kafkaRest")
    def kafka_rest(self) -> Optional[str]:
        return pulumi.get(self, "kafka_rest")

    @kafka_rest.setter
    def kafka_rest(self, value: Optional[str]):
        pulumi.set(self, "kafka_rest", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[str]:
        return pulumi.get(self, "schema_registry")

    @schema_registry.setter
    def schema_registry(self, value: Optional[str]):
        pulumi.set(self, "schema_registry", value)


@pulumi.input_type
class GetServiceMysqlArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceMysqlUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 backup_hour: Optional[str] = None,
                 backup_minute: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 mysql: Optional['GetServiceMysqlUserConfigMysqlArgs'] = None,
                 mysql_version: Optional[str] = None,
                 private_access: Optional['GetServiceMysqlUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServiceMysqlUserConfigPublicAccessArgs'] = None,
                 recovery_target_time: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if mysql_version is not None:
            pulumi.set(__self__, "mysql_version", mysql_version)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[str]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[str]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[str]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[str]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional['GetServiceMysqlUserConfigMysqlArgs']:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional['GetServiceMysqlUserConfigMysqlArgs']):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[str]:
        return pulumi.get(self, "mysql_version")

    @mysql_version.setter
    def mysql_version(self, value: Optional[str]):
        pulumi.set(self, "mysql_version", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceMysqlUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceMysqlUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceMysqlUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceMysqlUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[str]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceMysqlUserConfigMysqlArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[str] = None,
                 default_time_zone: Optional[str] = None,
                 group_concat_max_len: Optional[str] = None,
                 information_schema_stats_expiry: Optional[str] = None,
                 innodb_ft_min_token_size: Optional[str] = None,
                 innodb_ft_server_stopword_table: Optional[str] = None,
                 innodb_lock_wait_timeout: Optional[str] = None,
                 innodb_log_buffer_size: Optional[str] = None,
                 innodb_online_alter_log_max_size: Optional[str] = None,
                 innodb_print_all_deadlocks: Optional[str] = None,
                 innodb_rollback_on_timeout: Optional[str] = None,
                 interactive_timeout: Optional[str] = None,
                 max_allowed_packet: Optional[str] = None,
                 max_heap_table_size: Optional[str] = None,
                 net_read_timeout: Optional[str] = None,
                 net_write_timeout: Optional[str] = None,
                 sort_buffer_size: Optional[str] = None,
                 sql_mode: Optional[str] = None,
                 sql_require_primary_key: Optional[str] = None,
                 tmp_table_size: Optional[str] = None,
                 wait_timeout: Optional[str] = None):
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if group_concat_max_len is not None:
            pulumi.set(__self__, "group_concat_max_len", group_concat_max_len)
        if information_schema_stats_expiry is not None:
            pulumi.set(__self__, "information_schema_stats_expiry", information_schema_stats_expiry)
        if innodb_ft_min_token_size is not None:
            pulumi.set(__self__, "innodb_ft_min_token_size", innodb_ft_min_token_size)
        if innodb_ft_server_stopword_table is not None:
            pulumi.set(__self__, "innodb_ft_server_stopword_table", innodb_ft_server_stopword_table)
        if innodb_lock_wait_timeout is not None:
            pulumi.set(__self__, "innodb_lock_wait_timeout", innodb_lock_wait_timeout)
        if innodb_log_buffer_size is not None:
            pulumi.set(__self__, "innodb_log_buffer_size", innodb_log_buffer_size)
        if innodb_online_alter_log_max_size is not None:
            pulumi.set(__self__, "innodb_online_alter_log_max_size", innodb_online_alter_log_max_size)
        if innodb_print_all_deadlocks is not None:
            pulumi.set(__self__, "innodb_print_all_deadlocks", innodb_print_all_deadlocks)
        if innodb_rollback_on_timeout is not None:
            pulumi.set(__self__, "innodb_rollback_on_timeout", innodb_rollback_on_timeout)
        if interactive_timeout is not None:
            pulumi.set(__self__, "interactive_timeout", interactive_timeout)
        if max_allowed_packet is not None:
            pulumi.set(__self__, "max_allowed_packet", max_allowed_packet)
        if max_heap_table_size is not None:
            pulumi.set(__self__, "max_heap_table_size", max_heap_table_size)
        if net_read_timeout is not None:
            pulumi.set(__self__, "net_read_timeout", net_read_timeout)
        if net_write_timeout is not None:
            pulumi.set(__self__, "net_write_timeout", net_write_timeout)
        if sort_buffer_size is not None:
            pulumi.set(__self__, "sort_buffer_size", sort_buffer_size)
        if sql_mode is not None:
            pulumi.set(__self__, "sql_mode", sql_mode)
        if sql_require_primary_key is not None:
            pulumi.set(__self__, "sql_require_primary_key", sql_require_primary_key)
        if tmp_table_size is not None:
            pulumi.set(__self__, "tmp_table_size", tmp_table_size)
        if wait_timeout is not None:
            pulumi.set(__self__, "wait_timeout", wait_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[str]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[str]:
        return pulumi.get(self, "default_time_zone")

    @default_time_zone.setter
    def default_time_zone(self, value: Optional[str]):
        pulumi.set(self, "default_time_zone", value)

    @property
    @pulumi.getter(name="groupConcatMaxLen")
    def group_concat_max_len(self) -> Optional[str]:
        return pulumi.get(self, "group_concat_max_len")

    @group_concat_max_len.setter
    def group_concat_max_len(self, value: Optional[str]):
        pulumi.set(self, "group_concat_max_len", value)

    @property
    @pulumi.getter(name="informationSchemaStatsExpiry")
    def information_schema_stats_expiry(self) -> Optional[str]:
        return pulumi.get(self, "information_schema_stats_expiry")

    @information_schema_stats_expiry.setter
    def information_schema_stats_expiry(self, value: Optional[str]):
        pulumi.set(self, "information_schema_stats_expiry", value)

    @property
    @pulumi.getter(name="innodbFtMinTokenSize")
    def innodb_ft_min_token_size(self) -> Optional[str]:
        return pulumi.get(self, "innodb_ft_min_token_size")

    @innodb_ft_min_token_size.setter
    def innodb_ft_min_token_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_ft_min_token_size", value)

    @property
    @pulumi.getter(name="innodbFtServerStopwordTable")
    def innodb_ft_server_stopword_table(self) -> Optional[str]:
        return pulumi.get(self, "innodb_ft_server_stopword_table")

    @innodb_ft_server_stopword_table.setter
    def innodb_ft_server_stopword_table(self, value: Optional[str]):
        pulumi.set(self, "innodb_ft_server_stopword_table", value)

    @property
    @pulumi.getter(name="innodbLockWaitTimeout")
    def innodb_lock_wait_timeout(self) -> Optional[str]:
        return pulumi.get(self, "innodb_lock_wait_timeout")

    @innodb_lock_wait_timeout.setter
    def innodb_lock_wait_timeout(self, value: Optional[str]):
        pulumi.set(self, "innodb_lock_wait_timeout", value)

    @property
    @pulumi.getter(name="innodbLogBufferSize")
    def innodb_log_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "innodb_log_buffer_size")

    @innodb_log_buffer_size.setter
    def innodb_log_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_log_buffer_size", value)

    @property
    @pulumi.getter(name="innodbOnlineAlterLogMaxSize")
    def innodb_online_alter_log_max_size(self) -> Optional[str]:
        return pulumi.get(self, "innodb_online_alter_log_max_size")

    @innodb_online_alter_log_max_size.setter
    def innodb_online_alter_log_max_size(self, value: Optional[str]):
        pulumi.set(self, "innodb_online_alter_log_max_size", value)

    @property
    @pulumi.getter(name="innodbPrintAllDeadlocks")
    def innodb_print_all_deadlocks(self) -> Optional[str]:
        return pulumi.get(self, "innodb_print_all_deadlocks")

    @innodb_print_all_deadlocks.setter
    def innodb_print_all_deadlocks(self, value: Optional[str]):
        pulumi.set(self, "innodb_print_all_deadlocks", value)

    @property
    @pulumi.getter(name="innodbRollbackOnTimeout")
    def innodb_rollback_on_timeout(self) -> Optional[str]:
        return pulumi.get(self, "innodb_rollback_on_timeout")

    @innodb_rollback_on_timeout.setter
    def innodb_rollback_on_timeout(self, value: Optional[str]):
        pulumi.set(self, "innodb_rollback_on_timeout", value)

    @property
    @pulumi.getter(name="interactiveTimeout")
    def interactive_timeout(self) -> Optional[str]:
        return pulumi.get(self, "interactive_timeout")

    @interactive_timeout.setter
    def interactive_timeout(self, value: Optional[str]):
        pulumi.set(self, "interactive_timeout", value)

    @property
    @pulumi.getter(name="maxAllowedPacket")
    def max_allowed_packet(self) -> Optional[str]:
        return pulumi.get(self, "max_allowed_packet")

    @max_allowed_packet.setter
    def max_allowed_packet(self, value: Optional[str]):
        pulumi.set(self, "max_allowed_packet", value)

    @property
    @pulumi.getter(name="maxHeapTableSize")
    def max_heap_table_size(self) -> Optional[str]:
        return pulumi.get(self, "max_heap_table_size")

    @max_heap_table_size.setter
    def max_heap_table_size(self, value: Optional[str]):
        pulumi.set(self, "max_heap_table_size", value)

    @property
    @pulumi.getter(name="netReadTimeout")
    def net_read_timeout(self) -> Optional[str]:
        return pulumi.get(self, "net_read_timeout")

    @net_read_timeout.setter
    def net_read_timeout(self, value: Optional[str]):
        pulumi.set(self, "net_read_timeout", value)

    @property
    @pulumi.getter(name="netWriteTimeout")
    def net_write_timeout(self) -> Optional[str]:
        return pulumi.get(self, "net_write_timeout")

    @net_write_timeout.setter
    def net_write_timeout(self, value: Optional[str]):
        pulumi.set(self, "net_write_timeout", value)

    @property
    @pulumi.getter(name="sortBufferSize")
    def sort_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "sort_buffer_size")

    @sort_buffer_size.setter
    def sort_buffer_size(self, value: Optional[str]):
        pulumi.set(self, "sort_buffer_size", value)

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> Optional[str]:
        return pulumi.get(self, "sql_mode")

    @sql_mode.setter
    def sql_mode(self, value: Optional[str]):
        pulumi.set(self, "sql_mode", value)

    @property
    @pulumi.getter(name="sqlRequirePrimaryKey")
    def sql_require_primary_key(self) -> Optional[str]:
        return pulumi.get(self, "sql_require_primary_key")

    @sql_require_primary_key.setter
    def sql_require_primary_key(self, value: Optional[str]):
        pulumi.set(self, "sql_require_primary_key", value)

    @property
    @pulumi.getter(name="tmpTableSize")
    def tmp_table_size(self) -> Optional[str]:
        return pulumi.get(self, "tmp_table_size")

    @tmp_table_size.setter
    def tmp_table_size(self, value: Optional[str]):
        pulumi.set(self, "tmp_table_size", value)

    @property
    @pulumi.getter(name="waitTimeout")
    def wait_timeout(self) -> Optional[str]:
        return pulumi.get(self, "wait_timeout")

    @wait_timeout.setter
    def wait_timeout(self, value: Optional[str]):
        pulumi.set(self, "wait_timeout", value)


@pulumi.input_type
class GetServiceMysqlUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[str]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[str]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServiceMysqlUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 mysql: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[str]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[str]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServicePgArgs:
    def __init__(__self__, *,
                 dbname: str,
                 host: str,
                 password: str,
                 port: float,
                 replica_uri: str,
                 sslmode: str,
                 uri: str,
                 user: str):
        pulumi.set(__self__, "dbname", dbname)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replica_uri", replica_uri)
        pulumi.set(__self__, "sslmode", sslmode)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def dbname(self) -> str:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: str):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> float:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: float):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicaUri")
    def replica_uri(self) -> str:
        return pulumi.get(self, "replica_uri")

    @replica_uri.setter
    def replica_uri(self, value: str):
        pulumi.set(self, "replica_uri", value)

    @property
    @pulumi.getter
    def sslmode(self) -> str:
        return pulumi.get(self, "sslmode")

    @sslmode.setter
    def sslmode(self, value: str):
        pulumi.set(self, "sslmode", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: str):
        pulumi.set(self, "user", value)


@pulumi.input_type
class GetServicePgUserConfigArgs:
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 backup_hour: Optional[str] = None,
                 backup_minute: Optional[str] = None,
                 ip_filters: Optional[List[str]] = None,
                 migration: Optional['GetServicePgUserConfigMigrationArgs'] = None,
                 pg: Optional['GetServicePgUserConfigPgArgs'] = None,
                 pg_read_replica: Optional[str] = None,
                 pg_service_to_fork_from: Optional[str] = None,
                 pg_version: Optional[str] = None,
                 pgbouncer: Optional['GetServicePgUserConfigPgbouncerArgs'] = None,
                 pglookout: Optional['GetServicePgUserConfigPglookoutArgs'] = None,
                 private_access: Optional['GetServicePgUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServicePgUserConfigPublicAccessArgs'] = None,
                 recovery_target_time: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None,
                 shared_buffers_percentage: Optional[str] = None,
                 synchronous_replication: Optional[str] = None,
                 timescaledb: Optional['GetServicePgUserConfigTimescaledbArgs'] = None,
                 variant: Optional[str] = None,
                 work_mem: Optional[str] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if backup_hour is not None:
            pulumi.set(__self__, "backup_hour", backup_hour)
        if backup_minute is not None:
            pulumi.set(__self__, "backup_minute", backup_minute)
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pg_read_replica is not None:
            pulumi.set(__self__, "pg_read_replica", pg_read_replica)
        if pg_service_to_fork_from is not None:
            pulumi.set(__self__, "pg_service_to_fork_from", pg_service_to_fork_from)
        if pg_version is not None:
            pulumi.set(__self__, "pg_version", pg_version)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if pglookout is not None:
            pulumi.set(__self__, "pglookout", pglookout)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)
        if shared_buffers_percentage is not None:
            pulumi.set(__self__, "shared_buffers_percentage", shared_buffers_percentage)
        if synchronous_replication is not None:
            pulumi.set(__self__, "synchronous_replication", synchronous_replication)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="backupHour")
    def backup_hour(self) -> Optional[str]:
        return pulumi.get(self, "backup_hour")

    @backup_hour.setter
    def backup_hour(self, value: Optional[str]):
        pulumi.set(self, "backup_hour", value)

    @property
    @pulumi.getter(name="backupMinute")
    def backup_minute(self) -> Optional[str]:
        return pulumi.get(self, "backup_minute")

    @backup_minute.setter
    def backup_minute(self, value: Optional[str]):
        pulumi.set(self, "backup_minute", value)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional['GetServicePgUserConfigMigrationArgs']:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional['GetServicePgUserConfigMigrationArgs']):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter
    def pg(self) -> Optional['GetServicePgUserConfigPgArgs']:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional['GetServicePgUserConfigPgArgs']):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter(name="pgReadReplica")
    def pg_read_replica(self) -> Optional[str]:
        return pulumi.get(self, "pg_read_replica")

    @pg_read_replica.setter
    def pg_read_replica(self, value: Optional[str]):
        pulumi.set(self, "pg_read_replica", value)

    @property
    @pulumi.getter(name="pgServiceToForkFrom")
    def pg_service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "pg_service_to_fork_from")

    @pg_service_to_fork_from.setter
    def pg_service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "pg_service_to_fork_from", value)

    @property
    @pulumi.getter(name="pgVersion")
    def pg_version(self) -> Optional[str]:
        return pulumi.get(self, "pg_version")

    @pg_version.setter
    def pg_version(self, value: Optional[str]):
        pulumi.set(self, "pg_version", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional['GetServicePgUserConfigPgbouncerArgs']:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional['GetServicePgUserConfigPgbouncerArgs']):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def pglookout(self) -> Optional['GetServicePgUserConfigPglookoutArgs']:
        return pulumi.get(self, "pglookout")

    @pglookout.setter
    def pglookout(self, value: Optional['GetServicePgUserConfigPglookoutArgs']):
        pulumi.set(self, "pglookout", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServicePgUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServicePgUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServicePgUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServicePgUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        return pulumi.get(self, "recovery_target_time")

    @recovery_target_time.setter
    def recovery_target_time(self, value: Optional[str]):
        pulumi.set(self, "recovery_target_time", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)

    @property
    @pulumi.getter(name="sharedBuffersPercentage")
    def shared_buffers_percentage(self) -> Optional[str]:
        return pulumi.get(self, "shared_buffers_percentage")

    @shared_buffers_percentage.setter
    def shared_buffers_percentage(self, value: Optional[str]):
        pulumi.set(self, "shared_buffers_percentage", value)

    @property
    @pulumi.getter(name="synchronousReplication")
    def synchronous_replication(self) -> Optional[str]:
        return pulumi.get(self, "synchronous_replication")

    @synchronous_replication.setter
    def synchronous_replication(self, value: Optional[str]):
        pulumi.set(self, "synchronous_replication", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional['GetServicePgUserConfigTimescaledbArgs']:
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional['GetServicePgUserConfigTimescaledbArgs']):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[str]:
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[str]):
        pulumi.set(self, "variant", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[str]):
        pulumi.set(self, "work_mem", value)


@pulumi.input_type
class GetServicePgUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 ssl: Optional[str] = None,
                 username: Optional[str] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[str]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[str]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[str]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetServicePgUserConfigPgArgs:
    def __init__(__self__, *,
                 autovacuum_analyze_scale_factor: Optional[str] = None,
                 autovacuum_analyze_threshold: Optional[str] = None,
                 autovacuum_freeze_max_age: Optional[str] = None,
                 autovacuum_max_workers: Optional[str] = None,
                 autovacuum_naptime: Optional[str] = None,
                 autovacuum_vacuum_cost_delay: Optional[str] = None,
                 autovacuum_vacuum_cost_limit: Optional[str] = None,
                 autovacuum_vacuum_scale_factor: Optional[str] = None,
                 autovacuum_vacuum_threshold: Optional[str] = None,
                 deadlock_timeout: Optional[str] = None,
                 idle_in_transaction_session_timeout: Optional[str] = None,
                 jit: Optional[str] = None,
                 log_autovacuum_min_duration: Optional[str] = None,
                 log_error_verbosity: Optional[str] = None,
                 log_min_duration_statement: Optional[str] = None,
                 max_locks_per_transaction: Optional[str] = None,
                 max_parallel_workers: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_pred_locks_per_transaction: Optional[str] = None,
                 max_prepared_transactions: Optional[str] = None,
                 max_stack_depth: Optional[str] = None,
                 max_standby_archive_delay: Optional[str] = None,
                 max_standby_streaming_delay: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 pg_partman_bgw_dot_interval: Optional[str] = None,
                 pg_partman_bgw_dot_role: Optional[str] = None,
                 pg_stat_statements_track: Optional[str] = None,
                 temp_file_limit: Optional[str] = None,
                 timezone: Optional[str] = None,
                 track_activity_query_size: Optional[str] = None,
                 track_commit_timestamp: Optional[str] = None,
                 track_functions: Optional[str] = None,
                 wal_sender_timeout: Optional[str] = None,
                 wal_writer_delay: Optional[str] = None):
        if autovacuum_analyze_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_analyze_scale_factor", autovacuum_analyze_scale_factor)
        if autovacuum_analyze_threshold is not None:
            pulumi.set(__self__, "autovacuum_analyze_threshold", autovacuum_analyze_threshold)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_naptime is not None:
            pulumi.set(__self__, "autovacuum_naptime", autovacuum_naptime)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_cost_limit is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_limit", autovacuum_vacuum_cost_limit)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if deadlock_timeout is not None:
            pulumi.set(__self__, "deadlock_timeout", deadlock_timeout)
        if idle_in_transaction_session_timeout is not None:
            pulumi.set(__self__, "idle_in_transaction_session_timeout", idle_in_transaction_session_timeout)
        if jit is not None:
            pulumi.set(__self__, "jit", jit)
        if log_autovacuum_min_duration is not None:
            pulumi.set(__self__, "log_autovacuum_min_duration", log_autovacuum_min_duration)
        if log_error_verbosity is not None:
            pulumi.set(__self__, "log_error_verbosity", log_error_verbosity)
        if log_min_duration_statement is not None:
            pulumi.set(__self__, "log_min_duration_statement", log_min_duration_statement)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_parallel_workers is not None:
            pulumi.set(__self__, "max_parallel_workers", max_parallel_workers)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_pred_locks_per_transaction is not None:
            pulumi.set(__self__, "max_pred_locks_per_transaction", max_pred_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_stack_depth is not None:
            pulumi.set(__self__, "max_stack_depth", max_stack_depth)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if pg_partman_bgw_dot_interval is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_interval", pg_partman_bgw_dot_interval)
        if pg_partman_bgw_dot_role is not None:
            pulumi.set(__self__, "pg_partman_bgw_dot_role", pg_partman_bgw_dot_role)
        if pg_stat_statements_track is not None:
            pulumi.set(__self__, "pg_stat_statements_track", pg_stat_statements_track)
        if temp_file_limit is not None:
            pulumi.set(__self__, "temp_file_limit", temp_file_limit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if track_activity_query_size is not None:
            pulumi.set(__self__, "track_activity_query_size", track_activity_query_size)
        if track_commit_timestamp is not None:
            pulumi.set(__self__, "track_commit_timestamp", track_commit_timestamp)
        if track_functions is not None:
            pulumi.set(__self__, "track_functions", track_functions)
        if wal_sender_timeout is not None:
            pulumi.set(__self__, "wal_sender_timeout", wal_sender_timeout)
        if wal_writer_delay is not None:
            pulumi.set(__self__, "wal_writer_delay", wal_writer_delay)

    @property
    @pulumi.getter(name="autovacuumAnalyzeScaleFactor")
    def autovacuum_analyze_scale_factor(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_analyze_scale_factor")

    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_analyze_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumAnalyzeThreshold")
    def autovacuum_analyze_threshold(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_analyze_threshold")

    @autovacuum_analyze_threshold.setter
    def autovacuum_analyze_threshold(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_analyze_threshold", value)

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @autovacuum_freeze_max_age.setter
    def autovacuum_freeze_max_age(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_freeze_max_age", value)

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_max_workers")

    @autovacuum_max_workers.setter
    def autovacuum_max_workers(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_max_workers", value)

    @property
    @pulumi.getter(name="autovacuumNaptime")
    def autovacuum_naptime(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_naptime")

    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_naptime", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_cost_delay", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostLimit")
    def autovacuum_vacuum_cost_limit(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_cost_limit")

    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_cost_limit", value)

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @autovacuum_vacuum_threshold.setter
    def autovacuum_vacuum_threshold(self, value: Optional[str]):
        pulumi.set(self, "autovacuum_vacuum_threshold", value)

    @property
    @pulumi.getter(name="deadlockTimeout")
    def deadlock_timeout(self) -> Optional[str]:
        return pulumi.get(self, "deadlock_timeout")

    @deadlock_timeout.setter
    def deadlock_timeout(self, value: Optional[str]):
        pulumi.set(self, "deadlock_timeout", value)

    @property
    @pulumi.getter(name="idleInTransactionSessionTimeout")
    def idle_in_transaction_session_timeout(self) -> Optional[str]:
        return pulumi.get(self, "idle_in_transaction_session_timeout")

    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: Optional[str]):
        pulumi.set(self, "idle_in_transaction_session_timeout", value)

    @property
    @pulumi.getter
    def jit(self) -> Optional[str]:
        return pulumi.get(self, "jit")

    @jit.setter
    def jit(self, value: Optional[str]):
        pulumi.set(self, "jit", value)

    @property
    @pulumi.getter(name="logAutovacuumMinDuration")
    def log_autovacuum_min_duration(self) -> Optional[str]:
        return pulumi.get(self, "log_autovacuum_min_duration")

    @log_autovacuum_min_duration.setter
    def log_autovacuum_min_duration(self, value: Optional[str]):
        pulumi.set(self, "log_autovacuum_min_duration", value)

    @property
    @pulumi.getter(name="logErrorVerbosity")
    def log_error_verbosity(self) -> Optional[str]:
        return pulumi.get(self, "log_error_verbosity")

    @log_error_verbosity.setter
    def log_error_verbosity(self, value: Optional[str]):
        pulumi.set(self, "log_error_verbosity", value)

    @property
    @pulumi.getter(name="logMinDurationStatement")
    def log_min_duration_statement(self) -> Optional[str]:
        return pulumi.get(self, "log_min_duration_statement")

    @log_min_duration_statement.setter
    def log_min_duration_statement(self, value: Optional[str]):
        pulumi.set(self, "log_min_duration_statement", value)

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[str]:
        return pulumi.get(self, "max_locks_per_transaction")

    @max_locks_per_transaction.setter
    def max_locks_per_transaction(self, value: Optional[str]):
        pulumi.set(self, "max_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxParallelWorkers")
    def max_parallel_workers(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers")

    @max_parallel_workers.setter
    def max_parallel_workers(self, value: Optional[str]):
        pulumi.set(self, "max_parallel_workers", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[str]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxPredLocksPerTransaction")
    def max_pred_locks_per_transaction(self) -> Optional[str]:
        return pulumi.get(self, "max_pred_locks_per_transaction")

    @max_pred_locks_per_transaction.setter
    def max_pred_locks_per_transaction(self, value: Optional[str]):
        pulumi.set(self, "max_pred_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[str]:
        return pulumi.get(self, "max_prepared_transactions")

    @max_prepared_transactions.setter
    def max_prepared_transactions(self, value: Optional[str]):
        pulumi.set(self, "max_prepared_transactions", value)

    @property
    @pulumi.getter(name="maxStackDepth")
    def max_stack_depth(self) -> Optional[str]:
        return pulumi.get(self, "max_stack_depth")

    @max_stack_depth.setter
    def max_stack_depth(self, value: Optional[str]):
        pulumi.set(self, "max_stack_depth", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[str]:
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[str]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[str]:
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[str]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[str]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotInterval")
    def pg_partman_bgw_dot_interval(self) -> Optional[str]:
        return pulumi.get(self, "pg_partman_bgw_dot_interval")

    @pg_partman_bgw_dot_interval.setter
    def pg_partman_bgw_dot_interval(self, value: Optional[str]):
        pulumi.set(self, "pg_partman_bgw_dot_interval", value)

    @property
    @pulumi.getter(name="pgPartmanBgwDotRole")
    def pg_partman_bgw_dot_role(self) -> Optional[str]:
        return pulumi.get(self, "pg_partman_bgw_dot_role")

    @pg_partman_bgw_dot_role.setter
    def pg_partman_bgw_dot_role(self, value: Optional[str]):
        pulumi.set(self, "pg_partman_bgw_dot_role", value)

    @property
    @pulumi.getter(name="pgStatStatementsTrack")
    def pg_stat_statements_track(self) -> Optional[str]:
        return pulumi.get(self, "pg_stat_statements_track")

    @pg_stat_statements_track.setter
    def pg_stat_statements_track(self, value: Optional[str]):
        pulumi.set(self, "pg_stat_statements_track", value)

    @property
    @pulumi.getter(name="tempFileLimit")
    def temp_file_limit(self) -> Optional[str]:
        return pulumi.get(self, "temp_file_limit")

    @temp_file_limit.setter
    def temp_file_limit(self, value: Optional[str]):
        pulumi.set(self, "temp_file_limit", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[str]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="trackActivityQuerySize")
    def track_activity_query_size(self) -> Optional[str]:
        return pulumi.get(self, "track_activity_query_size")

    @track_activity_query_size.setter
    def track_activity_query_size(self, value: Optional[str]):
        pulumi.set(self, "track_activity_query_size", value)

    @property
    @pulumi.getter(name="trackCommitTimestamp")
    def track_commit_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "track_commit_timestamp")

    @track_commit_timestamp.setter
    def track_commit_timestamp(self, value: Optional[str]):
        pulumi.set(self, "track_commit_timestamp", value)

    @property
    @pulumi.getter(name="trackFunctions")
    def track_functions(self) -> Optional[str]:
        return pulumi.get(self, "track_functions")

    @track_functions.setter
    def track_functions(self, value: Optional[str]):
        pulumi.set(self, "track_functions", value)

    @property
    @pulumi.getter(name="walSenderTimeout")
    def wal_sender_timeout(self) -> Optional[str]:
        return pulumi.get(self, "wal_sender_timeout")

    @wal_sender_timeout.setter
    def wal_sender_timeout(self, value: Optional[str]):
        pulumi.set(self, "wal_sender_timeout", value)

    @property
    @pulumi.getter(name="walWriterDelay")
    def wal_writer_delay(self) -> Optional[str]:
        return pulumi.get(self, "wal_writer_delay")

    @wal_writer_delay.setter
    def wal_writer_delay(self, value: Optional[str]):
        pulumi.set(self, "wal_writer_delay", value)


@pulumi.input_type
class GetServicePgUserConfigPgbouncerArgs:
    def __init__(__self__, *,
                 ignore_startup_parameters: Optional[List[str]] = None,
                 server_reset_query_always: Optional[str] = None):
        if ignore_startup_parameters is not None:
            pulumi.set(__self__, "ignore_startup_parameters", ignore_startup_parameters)
        if server_reset_query_always is not None:
            pulumi.set(__self__, "server_reset_query_always", server_reset_query_always)

    @property
    @pulumi.getter(name="ignoreStartupParameters")
    def ignore_startup_parameters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ignore_startup_parameters")

    @ignore_startup_parameters.setter
    def ignore_startup_parameters(self, value: Optional[List[str]]):
        pulumi.set(self, "ignore_startup_parameters", value)

    @property
    @pulumi.getter(name="serverResetQueryAlways")
    def server_reset_query_always(self) -> Optional[str]:
        return pulumi.get(self, "server_reset_query_always")

    @server_reset_query_always.setter
    def server_reset_query_always(self, value: Optional[str]):
        pulumi.set(self, "server_reset_query_always", value)


@pulumi.input_type
class GetServicePgUserConfigPglookoutArgs:
    def __init__(__self__, *,
                 max_failover_replication_time_lag: Optional[str] = None):
        if max_failover_replication_time_lag is not None:
            pulumi.set(__self__, "max_failover_replication_time_lag", max_failover_replication_time_lag)

    @property
    @pulumi.getter(name="maxFailoverReplicationTimeLag")
    def max_failover_replication_time_lag(self) -> Optional[str]:
        return pulumi.get(self, "max_failover_replication_time_lag")

    @max_failover_replication_time_lag.setter
    def max_failover_replication_time_lag(self, value: Optional[str]):
        pulumi.set(self, "max_failover_replication_time_lag", value)


@pulumi.input_type
class GetServicePgUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServicePgUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 pg: Optional[str] = None,
                 pgbouncer: Optional[str] = None,
                 prometheus: Optional[str] = None):
        if pg is not None:
            pulumi.set(__self__, "pg", pg)
        if pgbouncer is not None:
            pulumi.set(__self__, "pgbouncer", pgbouncer)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter
    def pg(self) -> Optional[str]:
        return pulumi.get(self, "pg")

    @pg.setter
    def pg(self, value: Optional[str]):
        pulumi.set(self, "pg", value)

    @property
    @pulumi.getter
    def pgbouncer(self) -> Optional[str]:
        return pulumi.get(self, "pgbouncer")

    @pgbouncer.setter
    def pgbouncer(self, value: Optional[str]):
        pulumi.set(self, "pgbouncer", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class GetServicePgUserConfigTimescaledbArgs:
    def __init__(__self__, *,
                 max_background_workers: Optional[str] = None):
        if max_background_workers is not None:
            pulumi.set(__self__, "max_background_workers", max_background_workers)

    @property
    @pulumi.getter(name="maxBackgroundWorkers")
    def max_background_workers(self) -> Optional[str]:
        return pulumi.get(self, "max_background_workers")

    @max_background_workers.setter
    def max_background_workers(self, value: Optional[str]):
        pulumi.set(self, "max_background_workers", value)


@pulumi.input_type
class GetServiceRedisArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetServiceRedisUserConfigArgs:
    def __init__(__self__, *,
                 ip_filters: Optional[List[str]] = None,
                 migration: Optional['GetServiceRedisUserConfigMigrationArgs'] = None,
                 private_access: Optional['GetServiceRedisUserConfigPrivateAccessArgs'] = None,
                 public_access: Optional['GetServiceRedisUserConfigPublicAccessArgs'] = None,
                 redis_lfu_decay_time: Optional[str] = None,
                 redis_lfu_log_factor: Optional[str] = None,
                 redis_maxmemory_policy: Optional[str] = None,
                 redis_notify_keyspace_events: Optional[str] = None,
                 redis_ssl: Optional[str] = None,
                 redis_timeout: Optional[str] = None,
                 service_to_fork_from: Optional[str] = None):
        if ip_filters is not None:
            pulumi.set(__self__, "ip_filters", ip_filters)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if public_access is not None:
            pulumi.set(__self__, "public_access", public_access)
        if redis_lfu_decay_time is not None:
            pulumi.set(__self__, "redis_lfu_decay_time", redis_lfu_decay_time)
        if redis_lfu_log_factor is not None:
            pulumi.set(__self__, "redis_lfu_log_factor", redis_lfu_log_factor)
        if redis_maxmemory_policy is not None:
            pulumi.set(__self__, "redis_maxmemory_policy", redis_maxmemory_policy)
        if redis_notify_keyspace_events is not None:
            pulumi.set(__self__, "redis_notify_keyspace_events", redis_notify_keyspace_events)
        if redis_ssl is not None:
            pulumi.set(__self__, "redis_ssl", redis_ssl)
        if redis_timeout is not None:
            pulumi.set(__self__, "redis_timeout", redis_timeout)
        if service_to_fork_from is not None:
            pulumi.set(__self__, "service_to_fork_from", service_to_fork_from)

    @property
    @pulumi.getter(name="ipFilters")
    def ip_filters(self) -> Optional[List[str]]:
        return pulumi.get(self, "ip_filters")

    @ip_filters.setter
    def ip_filters(self, value: Optional[List[str]]):
        pulumi.set(self, "ip_filters", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional['GetServiceRedisUserConfigMigrationArgs']:
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional['GetServiceRedisUserConfigMigrationArgs']):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional['GetServiceRedisUserConfigPrivateAccessArgs']:
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional['GetServiceRedisUserConfigPrivateAccessArgs']):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['GetServiceRedisUserConfigPublicAccessArgs']:
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional['GetServiceRedisUserConfigPublicAccessArgs']):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="redisLfuDecayTime")
    def redis_lfu_decay_time(self) -> Optional[str]:
        return pulumi.get(self, "redis_lfu_decay_time")

    @redis_lfu_decay_time.setter
    def redis_lfu_decay_time(self, value: Optional[str]):
        pulumi.set(self, "redis_lfu_decay_time", value)

    @property
    @pulumi.getter(name="redisLfuLogFactor")
    def redis_lfu_log_factor(self) -> Optional[str]:
        return pulumi.get(self, "redis_lfu_log_factor")

    @redis_lfu_log_factor.setter
    def redis_lfu_log_factor(self, value: Optional[str]):
        pulumi.set(self, "redis_lfu_log_factor", value)

    @property
    @pulumi.getter(name="redisMaxmemoryPolicy")
    def redis_maxmemory_policy(self) -> Optional[str]:
        return pulumi.get(self, "redis_maxmemory_policy")

    @redis_maxmemory_policy.setter
    def redis_maxmemory_policy(self, value: Optional[str]):
        pulumi.set(self, "redis_maxmemory_policy", value)

    @property
    @pulumi.getter(name="redisNotifyKeyspaceEvents")
    def redis_notify_keyspace_events(self) -> Optional[str]:
        return pulumi.get(self, "redis_notify_keyspace_events")

    @redis_notify_keyspace_events.setter
    def redis_notify_keyspace_events(self, value: Optional[str]):
        pulumi.set(self, "redis_notify_keyspace_events", value)

    @property
    @pulumi.getter(name="redisSsl")
    def redis_ssl(self) -> Optional[str]:
        return pulumi.get(self, "redis_ssl")

    @redis_ssl.setter
    def redis_ssl(self, value: Optional[str]):
        pulumi.set(self, "redis_ssl", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> Optional[str]:
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: Optional[str]):
        pulumi.set(self, "redis_timeout", value)

    @property
    @pulumi.getter(name="serviceToForkFrom")
    def service_to_fork_from(self) -> Optional[str]:
        return pulumi.get(self, "service_to_fork_from")

    @service_to_fork_from.setter
    def service_to_fork_from(self, value: Optional[str]):
        pulumi.set(self, "service_to_fork_from", value)


@pulumi.input_type
class GetServiceRedisUserConfigMigrationArgs:
    def __init__(__self__, *,
                 dbname: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[str] = None,
                 ssl: Optional[str] = None,
                 username: Optional[str] = None):
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[str]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[str]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[str]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetServiceRedisUserConfigPrivateAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None,
                 redis: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[str]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[str]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class GetServiceRedisUserConfigPublicAccessArgs:
    def __init__(__self__, *,
                 prometheus: Optional[str] = None,
                 redis: Optional[str] = None):
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[str]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[str]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[str]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[str]):
        pulumi.set(self, "redis", value)


@pulumi.input_type
class GetServiceServiceIntegrationArgs:
    def __init__(__self__, *,
                 integration_type: str,
                 source_service_name: str):
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "source_service_name", source_service_name)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: str):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> str:
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: str):
        pulumi.set(self, "source_service_name", value)


