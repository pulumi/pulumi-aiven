// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaQuotaState extends com.pulumi.resources.ResourceArgs {

    public static final KafkaQuotaState Empty = new KafkaQuotaState();

    /**
     * Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying &#39;default&#39;
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying &#39;default&#39;
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     * 
     */
    @Import(name="consumerByteRate")
    private @Nullable Output<Integer> consumerByteRate;

    /**
     * @return Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     * 
     */
    public Optional<Output<Integer>> consumerByteRate() {
        return Optional.ofNullable(this.consumerByteRate);
    }

    /**
     * Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     * 
     */
    @Import(name="producerByteRate")
    private @Nullable Output<Integer> producerByteRate;

    /**
     * @return Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     * 
     */
    public Optional<Output<Integer>> producerByteRate() {
        return Optional.ofNullable(this.producerByteRate);
    }

    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
     * Exceeding this limit triggers throttling.
     * The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
     * 
     */
    @Import(name="requestPercentage")
    private @Nullable Output<Double> requestPercentage;

    /**
     * @return Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
     * Exceeding this limit triggers throttling.
     * The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
     * 
     */
    public Optional<Output<Double>> requestPercentage() {
        return Optional.ofNullable(this.requestPercentage);
    }

    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying &#39;default&#39;
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying &#39;default&#39;
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private KafkaQuotaState() {}

    private KafkaQuotaState(KafkaQuotaState $) {
        this.clientId = $.clientId;
        this.consumerByteRate = $.consumerByteRate;
        this.producerByteRate = $.producerByteRate;
        this.project = $.project;
        this.requestPercentage = $.requestPercentage;
        this.serviceName = $.serviceName;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaQuotaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaQuotaState $;

        public Builder() {
            $ = new KafkaQuotaState();
        }

        public Builder(KafkaQuotaState defaults) {
            $ = new KafkaQuotaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId Represents a logical group of clients, assigned a unique name by the client application.
         * Quotas can be applied based on user, client-id, or both.
         * The most relevant quota is chosen for each connection.
         * All connections within a quota group share the same quota.
         * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying &#39;default&#39;
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Represents a logical group of clients, assigned a unique name by the client application.
         * Quotas can be applied based on user, client-id, or both.
         * The most relevant quota is chosen for each connection.
         * All connections within a quota group share the same quota.
         * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying &#39;default&#39;
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param consumerByteRate Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
         * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
         * Exceeding this limit results in client throttling.
         * 
         * @return builder
         * 
         */
        public Builder consumerByteRate(@Nullable Output<Integer> consumerByteRate) {
            $.consumerByteRate = consumerByteRate;
            return this;
        }

        /**
         * @param consumerByteRate Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
         * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
         * Exceeding this limit results in client throttling.
         * 
         * @return builder
         * 
         */
        public Builder consumerByteRate(Integer consumerByteRate) {
            return consumerByteRate(Output.of(consumerByteRate));
        }

        /**
         * @param producerByteRate Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
         * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
         * Exceeding this limit results in client throttling.
         * 
         * @return builder
         * 
         */
        public Builder producerByteRate(@Nullable Output<Integer> producerByteRate) {
            $.producerByteRate = producerByteRate;
            return this;
        }

        /**
         * @param producerByteRate Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
         * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
         * Exceeding this limit results in client throttling.
         * 
         * @return builder
         * 
         */
        public Builder producerByteRate(Integer producerByteRate) {
            return producerByteRate(Output.of(producerByteRate));
        }

        /**
         * @param project The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestPercentage Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
         * Exceeding this limit triggers throttling.
         * The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
         * 
         * @return builder
         * 
         */
        public Builder requestPercentage(@Nullable Output<Double> requestPercentage) {
            $.requestPercentage = requestPercentage;
            return this;
        }

        /**
         * @param requestPercentage Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
         * Exceeding this limit triggers throttling.
         * The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
         * 
         * @return builder
         * 
         */
        public Builder requestPercentage(Double requestPercentage) {
            return requestPercentage(Output.of(requestPercentage));
        }

        /**
         * @param serviceName The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param user Represents a logical group of clients, assigned a unique name by the client application.
         * Quotas can be applied based on user, client-id, or both.
         * The most relevant quota is chosen for each connection.
         * All connections within a quota group share the same quota.
         * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying &#39;default&#39;
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Represents a logical group of clients, assigned a unique name by the client application.
         * Quotas can be applied based on user, client-id, or both.
         * The most relevant quota is chosen for each connection.
         * All connections within a quota group share the same quota.
         * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying &#39;default&#39;
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public KafkaQuotaState build() {
            return $;
        }
    }

}
