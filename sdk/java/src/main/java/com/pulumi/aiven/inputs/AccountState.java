// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountState extends com.pulumi.resources.ResourceArgs {

    public static final AccountState Empty = new AccountState();

    /**
     * Account id
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account id
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Time of creation
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time of creation
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * If true, user is part of the owners team for this account
     * 
     */
    @Import(name="isAccountOwner")
    private @Nullable Output<Boolean> isAccountOwner;

    /**
     * @return If true, user is part of the owners team for this account
     * 
     */
    public Optional<Output<Boolean>> isAccountOwner() {
        return Optional.ofNullable(this.isAccountOwner);
    }

    /**
     * Account name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Account name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Owner team id
     * 
     */
    @Import(name="ownerTeamId")
    private @Nullable Output<String> ownerTeamId;

    /**
     * @return Owner team id
     * 
     */
    public Optional<Output<String>> ownerTeamId() {
        return Optional.ofNullable(this.ownerTeamId);
    }

    /**
     * Billing group id
     * 
     */
    @Import(name="primaryBillingGroupId")
    private @Nullable Output<String> primaryBillingGroupId;

    /**
     * @return Billing group id
     * 
     */
    public Optional<Output<String>> primaryBillingGroupId() {
        return Optional.ofNullable(this.primaryBillingGroupId);
    }

    /**
     * Tenant id
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Tenant id
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * Time of last update
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Time of last update
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private AccountState() {}

    private AccountState(AccountState $) {
        this.accountId = $.accountId;
        this.createTime = $.createTime;
        this.isAccountOwner = $.isAccountOwner;
        this.name = $.name;
        this.ownerTeamId = $.ownerTeamId;
        this.primaryBillingGroupId = $.primaryBillingGroupId;
        this.tenantId = $.tenantId;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountState $;

        public Builder() {
            $ = new AccountState();
        }

        public Builder(AccountState defaults) {
            $ = new AccountState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account id
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account id
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param createTime Time of creation
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time of creation
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param isAccountOwner If true, user is part of the owners team for this account
         * 
         * @return builder
         * 
         */
        public Builder isAccountOwner(@Nullable Output<Boolean> isAccountOwner) {
            $.isAccountOwner = isAccountOwner;
            return this;
        }

        /**
         * @param isAccountOwner If true, user is part of the owners team for this account
         * 
         * @return builder
         * 
         */
        public Builder isAccountOwner(Boolean isAccountOwner) {
            return isAccountOwner(Output.of(isAccountOwner));
        }

        /**
         * @param name Account name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Account name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ownerTeamId Owner team id
         * 
         * @return builder
         * 
         */
        public Builder ownerTeamId(@Nullable Output<String> ownerTeamId) {
            $.ownerTeamId = ownerTeamId;
            return this;
        }

        /**
         * @param ownerTeamId Owner team id
         * 
         * @return builder
         * 
         */
        public Builder ownerTeamId(String ownerTeamId) {
            return ownerTeamId(Output.of(ownerTeamId));
        }

        /**
         * @param primaryBillingGroupId Billing group id
         * 
         * @return builder
         * 
         */
        public Builder primaryBillingGroupId(@Nullable Output<String> primaryBillingGroupId) {
            $.primaryBillingGroupId = primaryBillingGroupId;
            return this;
        }

        /**
         * @param primaryBillingGroupId Billing group id
         * 
         * @return builder
         * 
         */
        public Builder primaryBillingGroupId(String primaryBillingGroupId) {
            return primaryBillingGroupId(Output.of(primaryBillingGroupId));
        }

        /**
         * @param tenantId Tenant id
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Tenant id
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param updateTime Time of last update
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Time of last update
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public AccountState build() {
            return $;
        }
    }

}
