// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetKafkaConnectKafkaConnectUserConfigKafkaConnect;
import com.pulumi.aiven.outputs.GetKafkaConnectKafkaConnectUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GetKafkaConnectKafkaConnectUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.GetKafkaConnectKafkaConnectUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKafkaConnectKafkaConnectUserConfig {
    private @Nullable List<String> ipFilters;
    /**
     * @return Kafka Connect server provided values
     * 
     */
    private @Nullable GetKafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect;
    private @Nullable GetKafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess;
    private @Nullable GetKafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess;
    private @Nullable GetKafkaConnectKafkaConnectUserConfigPublicAccess publicAccess;
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    private @Nullable String staticIps;

    private GetKafkaConnectKafkaConnectUserConfig() {}
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Kafka Connect server provided values
     * 
     */
    public Optional<GetKafkaConnectKafkaConnectUserConfigKafkaConnect> kafkaConnect() {
        return Optional.ofNullable(this.kafkaConnect);
    }
    public Optional<GetKafkaConnectKafkaConnectUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<GetKafkaConnectKafkaConnectUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    public Optional<GetKafkaConnectKafkaConnectUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaConnectKafkaConnectUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> ipFilters;
        private @Nullable GetKafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect;
        private @Nullable GetKafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess;
        private @Nullable GetKafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable GetKafkaConnectKafkaConnectUserConfigPublicAccess publicAccess;
        private @Nullable String staticIps;
        public Builder() {}
        public Builder(GetKafkaConnectKafkaConnectUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipFilters = defaults.ipFilters;
    	      this.kafkaConnect = defaults.kafkaConnect;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.publicAccess = defaults.publicAccess;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder kafkaConnect(@Nullable GetKafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect) {
            this.kafkaConnect = kafkaConnect;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable GetKafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable GetKafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable GetKafkaConnectKafkaConnectUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }
        public GetKafkaConnectKafkaConnectUserConfig build() {
            final var o = new GetKafkaConnectKafkaConnectUserConfig();
            o.ipFilters = ipFilters;
            o.kafkaConnect = kafkaConnect;
            o.privateAccess = privateAccess;
            o.privatelinkAccess = privatelinkAccess;
            o.publicAccess = publicAccess;
            o.staticIps = staticIps;
            return o;
        }
    }
}
