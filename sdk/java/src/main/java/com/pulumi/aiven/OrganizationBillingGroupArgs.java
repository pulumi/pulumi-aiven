// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.aiven.inputs.OrganizationBillingGroupTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationBillingGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationBillingGroupArgs Empty = new OrganizationBillingGroupArgs();

    /**
     * ID of the billing address.
     * 
     */
    @Import(name="billingAddressId", required=true)
    private Output<String> billingAddressId;

    /**
     * @return ID of the billing address.
     * 
     */
    public Output<String> billingAddressId() {
        return this.billingAddressId;
    }

    /**
     * List of billing contact emails.
     * 
     */
    @Import(name="billingContactEmails", required=true)
    private Output<List<String>> billingContactEmails;

    /**
     * @return List of billing contact emails.
     * 
     */
    public Output<List<String>> billingContactEmails() {
        return this.billingContactEmails;
    }

    /**
     * Billing currency.
     * 
     */
    @Import(name="billingCurrency")
    private @Nullable Output<String> billingCurrency;

    /**
     * @return Billing currency.
     * 
     */
    public Optional<Output<String>> billingCurrency() {
        return Optional.ofNullable(this.billingCurrency);
    }

    /**
     * List of billing emails.
     * 
     */
    @Import(name="billingEmails", required=true)
    private Output<List<String>> billingEmails;

    /**
     * @return List of billing emails.
     * 
     */
    public Output<List<String>> billingEmails() {
        return this.billingEmails;
    }

    /**
     * Name of the billing group.
     * 
     */
    @Import(name="billingGroupName", required=true)
    private Output<String> billingGroupName;

    /**
     * @return Name of the billing group.
     * 
     */
    public Output<String> billingGroupName() {
        return this.billingGroupName;
    }

    /**
     * Custom invoice text.
     * 
     */
    @Import(name="customInvoiceText")
    private @Nullable Output<String> customInvoiceText;

    /**
     * @return Custom invoice text.
     * 
     */
    public Optional<Output<String>> customInvoiceText() {
        return Optional.ofNullable(this.customInvoiceText);
    }

    /**
     * ID of the organization.
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return ID of the organization.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * ID of the payment method.
     * 
     */
    @Import(name="paymentMethodId", required=true)
    private Output<String> paymentMethodId;

    /**
     * @return ID of the payment method.
     * 
     */
    public Output<String> paymentMethodId() {
        return this.paymentMethodId;
    }

    /**
     * ID of the shipping address.
     * 
     */
    @Import(name="shippingAddressId", required=true)
    private Output<String> shippingAddressId;

    /**
     * @return ID of the shipping address.
     * 
     */
    public Output<String> shippingAddressId() {
        return this.shippingAddressId;
    }

    @Import(name="timeouts")
    private @Nullable Output<OrganizationBillingGroupTimeoutsArgs> timeouts;

    public Optional<Output<OrganizationBillingGroupTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * VAT ID.
     * 
     */
    @Import(name="vatId")
    private @Nullable Output<String> vatId;

    /**
     * @return VAT ID.
     * 
     */
    public Optional<Output<String>> vatId() {
        return Optional.ofNullable(this.vatId);
    }

    private OrganizationBillingGroupArgs() {}

    private OrganizationBillingGroupArgs(OrganizationBillingGroupArgs $) {
        this.billingAddressId = $.billingAddressId;
        this.billingContactEmails = $.billingContactEmails;
        this.billingCurrency = $.billingCurrency;
        this.billingEmails = $.billingEmails;
        this.billingGroupName = $.billingGroupName;
        this.customInvoiceText = $.customInvoiceText;
        this.organizationId = $.organizationId;
        this.paymentMethodId = $.paymentMethodId;
        this.shippingAddressId = $.shippingAddressId;
        this.timeouts = $.timeouts;
        this.vatId = $.vatId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationBillingGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationBillingGroupArgs $;

        public Builder() {
            $ = new OrganizationBillingGroupArgs();
        }

        public Builder(OrganizationBillingGroupArgs defaults) {
            $ = new OrganizationBillingGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param billingAddressId ID of the billing address.
         * 
         * @return builder
         * 
         */
        public Builder billingAddressId(Output<String> billingAddressId) {
            $.billingAddressId = billingAddressId;
            return this;
        }

        /**
         * @param billingAddressId ID of the billing address.
         * 
         * @return builder
         * 
         */
        public Builder billingAddressId(String billingAddressId) {
            return billingAddressId(Output.of(billingAddressId));
        }

        /**
         * @param billingContactEmails List of billing contact emails.
         * 
         * @return builder
         * 
         */
        public Builder billingContactEmails(Output<List<String>> billingContactEmails) {
            $.billingContactEmails = billingContactEmails;
            return this;
        }

        /**
         * @param billingContactEmails List of billing contact emails.
         * 
         * @return builder
         * 
         */
        public Builder billingContactEmails(List<String> billingContactEmails) {
            return billingContactEmails(Output.of(billingContactEmails));
        }

        /**
         * @param billingContactEmails List of billing contact emails.
         * 
         * @return builder
         * 
         */
        public Builder billingContactEmails(String... billingContactEmails) {
            return billingContactEmails(List.of(billingContactEmails));
        }

        /**
         * @param billingCurrency Billing currency.
         * 
         * @return builder
         * 
         */
        public Builder billingCurrency(@Nullable Output<String> billingCurrency) {
            $.billingCurrency = billingCurrency;
            return this;
        }

        /**
         * @param billingCurrency Billing currency.
         * 
         * @return builder
         * 
         */
        public Builder billingCurrency(String billingCurrency) {
            return billingCurrency(Output.of(billingCurrency));
        }

        /**
         * @param billingEmails List of billing emails.
         * 
         * @return builder
         * 
         */
        public Builder billingEmails(Output<List<String>> billingEmails) {
            $.billingEmails = billingEmails;
            return this;
        }

        /**
         * @param billingEmails List of billing emails.
         * 
         * @return builder
         * 
         */
        public Builder billingEmails(List<String> billingEmails) {
            return billingEmails(Output.of(billingEmails));
        }

        /**
         * @param billingEmails List of billing emails.
         * 
         * @return builder
         * 
         */
        public Builder billingEmails(String... billingEmails) {
            return billingEmails(List.of(billingEmails));
        }

        /**
         * @param billingGroupName Name of the billing group.
         * 
         * @return builder
         * 
         */
        public Builder billingGroupName(Output<String> billingGroupName) {
            $.billingGroupName = billingGroupName;
            return this;
        }

        /**
         * @param billingGroupName Name of the billing group.
         * 
         * @return builder
         * 
         */
        public Builder billingGroupName(String billingGroupName) {
            return billingGroupName(Output.of(billingGroupName));
        }

        /**
         * @param customInvoiceText Custom invoice text.
         * 
         * @return builder
         * 
         */
        public Builder customInvoiceText(@Nullable Output<String> customInvoiceText) {
            $.customInvoiceText = customInvoiceText;
            return this;
        }

        /**
         * @param customInvoiceText Custom invoice text.
         * 
         * @return builder
         * 
         */
        public Builder customInvoiceText(String customInvoiceText) {
            return customInvoiceText(Output.of(customInvoiceText));
        }

        /**
         * @param organizationId ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param paymentMethodId ID of the payment method.
         * 
         * @return builder
         * 
         */
        public Builder paymentMethodId(Output<String> paymentMethodId) {
            $.paymentMethodId = paymentMethodId;
            return this;
        }

        /**
         * @param paymentMethodId ID of the payment method.
         * 
         * @return builder
         * 
         */
        public Builder paymentMethodId(String paymentMethodId) {
            return paymentMethodId(Output.of(paymentMethodId));
        }

        /**
         * @param shippingAddressId ID of the shipping address.
         * 
         * @return builder
         * 
         */
        public Builder shippingAddressId(Output<String> shippingAddressId) {
            $.shippingAddressId = shippingAddressId;
            return this;
        }

        /**
         * @param shippingAddressId ID of the shipping address.
         * 
         * @return builder
         * 
         */
        public Builder shippingAddressId(String shippingAddressId) {
            return shippingAddressId(Output.of(shippingAddressId));
        }

        public Builder timeouts(@Nullable Output<OrganizationBillingGroupTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(OrganizationBillingGroupTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param vatId VAT ID.
         * 
         * @return builder
         * 
         */
        public Builder vatId(@Nullable Output<String> vatId) {
            $.vatId = vatId;
            return this;
        }

        /**
         * @param vatId VAT ID.
         * 
         * @return builder
         * 
         */
        public Builder vatId(String vatId) {
            return vatId(Output.of(vatId));
        }

        public OrganizationBillingGroupArgs build() {
            if ($.billingAddressId == null) {
                throw new MissingRequiredPropertyException("OrganizationBillingGroupArgs", "billingAddressId");
            }
            if ($.billingContactEmails == null) {
                throw new MissingRequiredPropertyException("OrganizationBillingGroupArgs", "billingContactEmails");
            }
            if ($.billingEmails == null) {
                throw new MissingRequiredPropertyException("OrganizationBillingGroupArgs", "billingEmails");
            }
            if ($.billingGroupName == null) {
                throw new MissingRequiredPropertyException("OrganizationBillingGroupArgs", "billingGroupName");
            }
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("OrganizationBillingGroupArgs", "organizationId");
            }
            if ($.paymentMethodId == null) {
                throw new MissingRequiredPropertyException("OrganizationBillingGroupArgs", "paymentMethodId");
            }
            if ($.shippingAddressId == null) {
                throw new MissingRequiredPropertyException("OrganizationBillingGroupArgs", "shippingAddressId");
            }
            return $;
        }
    }

}
