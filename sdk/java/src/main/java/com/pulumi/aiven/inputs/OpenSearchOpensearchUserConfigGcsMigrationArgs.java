// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenSearchOpensearchUserConfigGcsMigrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenSearchOpensearchUserConfigGcsMigrationArgs Empty = new OpenSearchOpensearchUserConfigGcsMigrationArgs();

    /**
     * The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    @Import(name="basePath", required=true)
    private Output<String> basePath;

    /**
     * @return The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    public Output<String> basePath() {
        return this.basePath;
    }

    /**
     * The path to the repository data within its container.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The path to the repository data within its container.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    @Import(name="chunkSize")
    private @Nullable Output<String> chunkSize;

    /**
     * @return Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    public Optional<Output<String>> chunkSize() {
        return Optional.ofNullable(this.chunkSize);
    }

    /**
     * When set to true metadata files are stored in compressed format.
     * 
     */
    @Import(name="compress")
    private @Nullable Output<Boolean> compress;

    /**
     * @return When set to true metadata files are stored in compressed format.
     * 
     */
    public Optional<Output<Boolean>> compress() {
        return Optional.ofNullable(this.compress);
    }

    /**
     * Google Cloud Storage credentials file content.
     * 
     */
    @Import(name="credentials", required=true)
    private Output<String> credentials;

    /**
     * @return Google Cloud Storage credentials file content.
     * 
     */
    public Output<String> credentials() {
        return this.credentials;
    }

    /**
     * The snapshot name to restore from.
     * 
     */
    @Import(name="snapshotName", required=true)
    private Output<String> snapshotName;

    /**
     * @return The snapshot name to restore from.
     * 
     */
    public Output<String> snapshotName() {
        return this.snapshotName;
    }

    private OpenSearchOpensearchUserConfigGcsMigrationArgs() {}

    private OpenSearchOpensearchUserConfigGcsMigrationArgs(OpenSearchOpensearchUserConfigGcsMigrationArgs $) {
        this.basePath = $.basePath;
        this.bucket = $.bucket;
        this.chunkSize = $.chunkSize;
        this.compress = $.compress;
        this.credentials = $.credentials;
        this.snapshotName = $.snapshotName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenSearchOpensearchUserConfigGcsMigrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenSearchOpensearchUserConfigGcsMigrationArgs $;

        public Builder() {
            $ = new OpenSearchOpensearchUserConfigGcsMigrationArgs();
        }

        public Builder(OpenSearchOpensearchUserConfigGcsMigrationArgs defaults) {
            $ = new OpenSearchOpensearchUserConfigGcsMigrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param basePath The path to the repository data within its container. The value of this setting should not start or end with a /.
         * 
         * @return builder
         * 
         */
        public Builder basePath(Output<String> basePath) {
            $.basePath = basePath;
            return this;
        }

        /**
         * @param basePath The path to the repository data within its container. The value of this setting should not start or end with a /.
         * 
         * @return builder
         * 
         */
        public Builder basePath(String basePath) {
            return basePath(Output.of(basePath));
        }

        /**
         * @param bucket The path to the repository data within its container.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The path to the repository data within its container.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param chunkSize Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
         * 
         * @return builder
         * 
         */
        public Builder chunkSize(@Nullable Output<String> chunkSize) {
            $.chunkSize = chunkSize;
            return this;
        }

        /**
         * @param chunkSize Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
         * 
         * @return builder
         * 
         */
        public Builder chunkSize(String chunkSize) {
            return chunkSize(Output.of(chunkSize));
        }

        /**
         * @param compress When set to true metadata files are stored in compressed format.
         * 
         * @return builder
         * 
         */
        public Builder compress(@Nullable Output<Boolean> compress) {
            $.compress = compress;
            return this;
        }

        /**
         * @param compress When set to true metadata files are stored in compressed format.
         * 
         * @return builder
         * 
         */
        public Builder compress(Boolean compress) {
            return compress(Output.of(compress));
        }

        /**
         * @param credentials Google Cloud Storage credentials file content.
         * 
         * @return builder
         * 
         */
        public Builder credentials(Output<String> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Google Cloud Storage credentials file content.
         * 
         * @return builder
         * 
         */
        public Builder credentials(String credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param snapshotName The snapshot name to restore from.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        /**
         * @param snapshotName The snapshot name to restore from.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        public OpenSearchOpensearchUserConfigGcsMigrationArgs build() {
            if ($.basePath == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigGcsMigrationArgs", "basePath");
            }
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigGcsMigrationArgs", "bucket");
            }
            if ($.credentials == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigGcsMigrationArgs", "credentials");
            }
            if ($.snapshotName == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigGcsMigrationArgs", "snapshotName");
            }
            return $;
        }
    }

}
