// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlinkJarApplicationCurrentDeployment {
    /**
     * @return The creation timestamp of this entity in ISO 8601 format, always in UTC.
     * 
     */
    private @Nullable String createdAt;
    /**
     * @return The creator of this entity.
     * 
     */
    private @Nullable String createdBy;
    /**
     * @return The fully qualified name of the entry class to pass during Flink job submission through the entryClass parameter.
     * 
     */
    private @Nullable String entryClass;
    /**
     * @return Error message describing what caused deployment to fail.
     * 
     */
    private @Nullable String errorMsg;
    /**
     * @return Deployment ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Job ID.
     * 
     */
    private @Nullable String jobId;
    /**
     * @return Job savepoint.
     * 
     */
    private @Nullable String lastSavepoint;
    /**
     * @return Reading of Flink parallel execution documentation is recommended before setting this value to other than 1. Please do not set this value higher than (total number of nodes x number_of_task_slots), or every new job created will fail.
     * 
     */
    private @Nullable Integer parallelism;
    /**
     * @return Arguments to pass during Flink job submission through the programArgsList parameter.
     * 
     */
    private @Nullable List<String> programArgs;
    /**
     * @return Job savepoint.
     * 
     */
    private @Nullable String startingSavepoint;
    /**
     * @return Deployment status. The possible values are `CANCELED`, `CANCELLING`, `CANCELLING_REQUESTED`, `CREATED`, `DELETE_REQUESTED`, `DELETING`, `FAILED`, `FAILING`, `FINISHED`, `INITIALIZING`, `RECONCILING`, `RESTARTING`, `RUNNING`, `SAVING`, `SAVING_AND_STOP`, `SAVING_AND_STOP_REQUESTED` and `SUSPENDED`.
     * 
     */
    private @Nullable String status;
    /**
     * @return ApplicationVersion ID.
     * 
     */
    private @Nullable String versionId;

    private FlinkJarApplicationCurrentDeployment() {}
    /**
     * @return The creation timestamp of this entity in ISO 8601 format, always in UTC.
     * 
     */
    public Optional<String> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }
    /**
     * @return The creator of this entity.
     * 
     */
    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    /**
     * @return The fully qualified name of the entry class to pass during Flink job submission through the entryClass parameter.
     * 
     */
    public Optional<String> entryClass() {
        return Optional.ofNullable(this.entryClass);
    }
    /**
     * @return Error message describing what caused deployment to fail.
     * 
     */
    public Optional<String> errorMsg() {
        return Optional.ofNullable(this.errorMsg);
    }
    /**
     * @return Deployment ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Job ID.
     * 
     */
    public Optional<String> jobId() {
        return Optional.ofNullable(this.jobId);
    }
    /**
     * @return Job savepoint.
     * 
     */
    public Optional<String> lastSavepoint() {
        return Optional.ofNullable(this.lastSavepoint);
    }
    /**
     * @return Reading of Flink parallel execution documentation is recommended before setting this value to other than 1. Please do not set this value higher than (total number of nodes x number_of_task_slots), or every new job created will fail.
     * 
     */
    public Optional<Integer> parallelism() {
        return Optional.ofNullable(this.parallelism);
    }
    /**
     * @return Arguments to pass during Flink job submission through the programArgsList parameter.
     * 
     */
    public List<String> programArgs() {
        return this.programArgs == null ? List.of() : this.programArgs;
    }
    /**
     * @return Job savepoint.
     * 
     */
    public Optional<String> startingSavepoint() {
        return Optional.ofNullable(this.startingSavepoint);
    }
    /**
     * @return Deployment status. The possible values are `CANCELED`, `CANCELLING`, `CANCELLING_REQUESTED`, `CREATED`, `DELETE_REQUESTED`, `DELETING`, `FAILED`, `FAILING`, `FINISHED`, `INITIALIZING`, `RECONCILING`, `RESTARTING`, `RUNNING`, `SAVING`, `SAVING_AND_STOP`, `SAVING_AND_STOP_REQUESTED` and `SUSPENDED`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return ApplicationVersion ID.
     * 
     */
    public Optional<String> versionId() {
        return Optional.ofNullable(this.versionId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlinkJarApplicationCurrentDeployment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String createdAt;
        private @Nullable String createdBy;
        private @Nullable String entryClass;
        private @Nullable String errorMsg;
        private @Nullable String id;
        private @Nullable String jobId;
        private @Nullable String lastSavepoint;
        private @Nullable Integer parallelism;
        private @Nullable List<String> programArgs;
        private @Nullable String startingSavepoint;
        private @Nullable String status;
        private @Nullable String versionId;
        public Builder() {}
        public Builder(FlinkJarApplicationCurrentDeployment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.entryClass = defaults.entryClass;
    	      this.errorMsg = defaults.errorMsg;
    	      this.id = defaults.id;
    	      this.jobId = defaults.jobId;
    	      this.lastSavepoint = defaults.lastSavepoint;
    	      this.parallelism = defaults.parallelism;
    	      this.programArgs = defaults.programArgs;
    	      this.startingSavepoint = defaults.startingSavepoint;
    	      this.status = defaults.status;
    	      this.versionId = defaults.versionId;
        }

        @CustomType.Setter
        public Builder createdAt(@Nullable String createdAt) {

            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(@Nullable String createdBy) {

            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder entryClass(@Nullable String entryClass) {

            this.entryClass = entryClass;
            return this;
        }
        @CustomType.Setter
        public Builder errorMsg(@Nullable String errorMsg) {

            this.errorMsg = errorMsg;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jobId(@Nullable String jobId) {

            this.jobId = jobId;
            return this;
        }
        @CustomType.Setter
        public Builder lastSavepoint(@Nullable String lastSavepoint) {

            this.lastSavepoint = lastSavepoint;
            return this;
        }
        @CustomType.Setter
        public Builder parallelism(@Nullable Integer parallelism) {

            this.parallelism = parallelism;
            return this;
        }
        @CustomType.Setter
        public Builder programArgs(@Nullable List<String> programArgs) {

            this.programArgs = programArgs;
            return this;
        }
        public Builder programArgs(String... programArgs) {
            return programArgs(List.of(programArgs));
        }
        @CustomType.Setter
        public Builder startingSavepoint(@Nullable String startingSavepoint) {

            this.startingSavepoint = startingSavepoint;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder versionId(@Nullable String versionId) {

            this.versionId = versionId;
            return this;
        }
        public FlinkJarApplicationCurrentDeployment build() {
            final var _resultValue = new FlinkJarApplicationCurrentDeployment();
            _resultValue.createdAt = createdAt;
            _resultValue.createdBy = createdBy;
            _resultValue.entryClass = entryClass;
            _resultValue.errorMsg = errorMsg;
            _resultValue.id = id;
            _resultValue.jobId = jobId;
            _resultValue.lastSavepoint = lastSavepoint;
            _resultValue.parallelism = parallelism;
            _resultValue.programArgs = programArgs;
            _resultValue.startingSavepoint = startingSavepoint;
            _resultValue.status = status;
            _resultValue.versionId = versionId;
            return _resultValue;
        }
    }
}
