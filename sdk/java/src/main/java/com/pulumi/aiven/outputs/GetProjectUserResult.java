// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetProjectUserResult {
    /**
     * @return Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
     * 
     */
    private Boolean accepted;
    /**
     * @return Email address of the user. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String email;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Project membership type. The possible values are `admin`, `developer` and `operator`.
     * 
     */
    private String memberType;
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String project;

    private GetProjectUserResult() {}
    /**
     * @return Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
     * 
     */
    public Boolean accepted() {
        return this.accepted;
    }
    /**
     * @return Email address of the user. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Project membership type. The possible values are `admin`, `developer` and `operator`.
     * 
     */
    public String memberType() {
        return this.memberType;
    }
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String project() {
        return this.project;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accepted;
        private String email;
        private String id;
        private String memberType;
        private String project;
        public Builder() {}
        public Builder(GetProjectUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepted = defaults.accepted;
    	      this.email = defaults.email;
    	      this.id = defaults.id;
    	      this.memberType = defaults.memberType;
    	      this.project = defaults.project;
        }

        @CustomType.Setter
        public Builder accepted(Boolean accepted) {
            this.accepted = Objects.requireNonNull(accepted);
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder memberType(String memberType) {
            this.memberType = Objects.requireNonNull(memberType);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        public GetProjectUserResult build() {
            final var o = new GetProjectUserResult();
            o.accepted = accepted;
            o.email = email;
            o.id = id;
            o.memberType = memberType;
            o.project = project;
            return o;
        }
    }
}
