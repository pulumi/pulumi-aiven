// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountTeamMemberState extends com.pulumi.resources.ResourceArgs {

    public static final AccountTeamMemberState Empty = new AccountTeamMemberState();

    /**
     * is a boolean flag that determines whether an invitation was accepted or not by the user. `false` value means that the invitation was sent to the user but not yet accepted. `true` means that the user accepted the invitation and now a member of an account team.
     * 
     */
    @Import(name="accepted")
    private @Nullable Output<Boolean> accepted;

    /**
     * @return is a boolean flag that determines whether an invitation was accepted or not by the user. `false` value means that the invitation was sent to the user but not yet accepted. `true` means that the user accepted the invitation and now a member of an account team.
     * 
     */
    public Optional<Output<Boolean>> accepted() {
        return Optional.ofNullable(this.accepted);
    }

    /**
     * The unique account id This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The unique account id This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Time of creation
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time of creation
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The email address that invited this user.
     * 
     */
    @Import(name="invitedByUserEmail")
    private @Nullable Output<String> invitedByUserEmail;

    /**
     * @return The email address that invited this user.
     * 
     */
    public Optional<Output<String>> invitedByUserEmail() {
        return Optional.ofNullable(this.invitedByUserEmail);
    }

    /**
     * An account team id This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return An account team id This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * Is a user email address that first will be invited, and after accepting an invitation, he or she becomes a member of a team. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="userEmail")
    private @Nullable Output<String> userEmail;

    /**
     * @return Is a user email address that first will be invited, and after accepting an invitation, he or she becomes a member of a team. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> userEmail() {
        return Optional.ofNullable(this.userEmail);
    }

    private AccountTeamMemberState() {}

    private AccountTeamMemberState(AccountTeamMemberState $) {
        this.accepted = $.accepted;
        this.accountId = $.accountId;
        this.createTime = $.createTime;
        this.invitedByUserEmail = $.invitedByUserEmail;
        this.teamId = $.teamId;
        this.userEmail = $.userEmail;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountTeamMemberState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountTeamMemberState $;

        public Builder() {
            $ = new AccountTeamMemberState();
        }

        public Builder(AccountTeamMemberState defaults) {
            $ = new AccountTeamMemberState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accepted is a boolean flag that determines whether an invitation was accepted or not by the user. `false` value means that the invitation was sent to the user but not yet accepted. `true` means that the user accepted the invitation and now a member of an account team.
         * 
         * @return builder
         * 
         */
        public Builder accepted(@Nullable Output<Boolean> accepted) {
            $.accepted = accepted;
            return this;
        }

        /**
         * @param accepted is a boolean flag that determines whether an invitation was accepted or not by the user. `false` value means that the invitation was sent to the user but not yet accepted. `true` means that the user accepted the invitation and now a member of an account team.
         * 
         * @return builder
         * 
         */
        public Builder accepted(Boolean accepted) {
            return accepted(Output.of(accepted));
        }

        /**
         * @param accountId The unique account id This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The unique account id This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param createTime Time of creation
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time of creation
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param invitedByUserEmail The email address that invited this user.
         * 
         * @return builder
         * 
         */
        public Builder invitedByUserEmail(@Nullable Output<String> invitedByUserEmail) {
            $.invitedByUserEmail = invitedByUserEmail;
            return this;
        }

        /**
         * @param invitedByUserEmail The email address that invited this user.
         * 
         * @return builder
         * 
         */
        public Builder invitedByUserEmail(String invitedByUserEmail) {
            return invitedByUserEmail(Output.of(invitedByUserEmail));
        }

        /**
         * @param teamId An account team id This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId An account team id This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param userEmail Is a user email address that first will be invited, and after accepting an invitation, he or she becomes a member of a team. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder userEmail(@Nullable Output<String> userEmail) {
            $.userEmail = userEmail;
            return this;
        }

        /**
         * @param userEmail Is a user email address that first will be invited, and after accepting an invitation, he or she becomes a member of a team. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder userEmail(String userEmail) {
            return userEmail(Output.of(userEmail));
        }

        public AccountTeamMemberState build() {
            return $;
        }
    }

}
