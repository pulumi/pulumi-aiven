// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkJarApplicationVersionFileInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlinkJarApplicationVersionFileInfoArgs Empty = new FlinkJarApplicationVersionFileInfoArgs();

    /**
     * sha256 of the file if known.
     * 
     */
    @Import(name="fileSha256")
    private @Nullable Output<String> fileSha256;

    /**
     * @return sha256 of the file if known.
     * 
     */
    public Optional<Output<String>> fileSha256() {
        return Optional.ofNullable(this.fileSha256);
    }

    /**
     * The size of the file in bytes.
     * 
     */
    @Import(name="fileSize")
    private @Nullable Output<Integer> fileSize;

    /**
     * @return The size of the file in bytes.
     * 
     */
    public Optional<Output<Integer>> fileSize() {
        return Optional.ofNullable(this.fileSize);
    }

    /**
     * Indicates whether the uploaded .jar file has been verified by the system and deployment ready. The possible values are `FAILED`, `INITIAL` and `READY`.
     * 
     */
    @Import(name="fileStatus")
    private @Nullable Output<String> fileStatus;

    /**
     * @return Indicates whether the uploaded .jar file has been verified by the system and deployment ready. The possible values are `FAILED`, `INITIAL` and `READY`.
     * 
     */
    public Optional<Output<String>> fileStatus() {
        return Optional.ofNullable(this.fileStatus);
    }

    /**
     * The pre-signed url of the bucket where the .jar file is uploaded. Becomes null when the JarApplicationVersion is ready or failed.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The pre-signed url of the bucket where the .jar file is uploaded. Becomes null when the JarApplicationVersion is ready or failed.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * In the case file_status is FAILED, the error code of the failure. The possible values are `1`, `2` and `3`.
     * 
     */
    @Import(name="verifyErrorCode")
    private @Nullable Output<Integer> verifyErrorCode;

    /**
     * @return In the case file_status is FAILED, the error code of the failure. The possible values are `1`, `2` and `3`.
     * 
     */
    public Optional<Output<Integer>> verifyErrorCode() {
        return Optional.ofNullable(this.verifyErrorCode);
    }

    /**
     * In the case file_status is FAILED, may contain details about the failure.
     * 
     */
    @Import(name="verifyErrorMessage")
    private @Nullable Output<String> verifyErrorMessage;

    /**
     * @return In the case file_status is FAILED, may contain details about the failure.
     * 
     */
    public Optional<Output<String>> verifyErrorMessage() {
        return Optional.ofNullable(this.verifyErrorMessage);
    }

    private FlinkJarApplicationVersionFileInfoArgs() {}

    private FlinkJarApplicationVersionFileInfoArgs(FlinkJarApplicationVersionFileInfoArgs $) {
        this.fileSha256 = $.fileSha256;
        this.fileSize = $.fileSize;
        this.fileStatus = $.fileStatus;
        this.url = $.url;
        this.verifyErrorCode = $.verifyErrorCode;
        this.verifyErrorMessage = $.verifyErrorMessage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkJarApplicationVersionFileInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkJarApplicationVersionFileInfoArgs $;

        public Builder() {
            $ = new FlinkJarApplicationVersionFileInfoArgs();
        }

        public Builder(FlinkJarApplicationVersionFileInfoArgs defaults) {
            $ = new FlinkJarApplicationVersionFileInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileSha256 sha256 of the file if known.
         * 
         * @return builder
         * 
         */
        public Builder fileSha256(@Nullable Output<String> fileSha256) {
            $.fileSha256 = fileSha256;
            return this;
        }

        /**
         * @param fileSha256 sha256 of the file if known.
         * 
         * @return builder
         * 
         */
        public Builder fileSha256(String fileSha256) {
            return fileSha256(Output.of(fileSha256));
        }

        /**
         * @param fileSize The size of the file in bytes.
         * 
         * @return builder
         * 
         */
        public Builder fileSize(@Nullable Output<Integer> fileSize) {
            $.fileSize = fileSize;
            return this;
        }

        /**
         * @param fileSize The size of the file in bytes.
         * 
         * @return builder
         * 
         */
        public Builder fileSize(Integer fileSize) {
            return fileSize(Output.of(fileSize));
        }

        /**
         * @param fileStatus Indicates whether the uploaded .jar file has been verified by the system and deployment ready. The possible values are `FAILED`, `INITIAL` and `READY`.
         * 
         * @return builder
         * 
         */
        public Builder fileStatus(@Nullable Output<String> fileStatus) {
            $.fileStatus = fileStatus;
            return this;
        }

        /**
         * @param fileStatus Indicates whether the uploaded .jar file has been verified by the system and deployment ready. The possible values are `FAILED`, `INITIAL` and `READY`.
         * 
         * @return builder
         * 
         */
        public Builder fileStatus(String fileStatus) {
            return fileStatus(Output.of(fileStatus));
        }

        /**
         * @param url The pre-signed url of the bucket where the .jar file is uploaded. Becomes null when the JarApplicationVersion is ready or failed.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The pre-signed url of the bucket where the .jar file is uploaded. Becomes null when the JarApplicationVersion is ready or failed.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param verifyErrorCode In the case file_status is FAILED, the error code of the failure. The possible values are `1`, `2` and `3`.
         * 
         * @return builder
         * 
         */
        public Builder verifyErrorCode(@Nullable Output<Integer> verifyErrorCode) {
            $.verifyErrorCode = verifyErrorCode;
            return this;
        }

        /**
         * @param verifyErrorCode In the case file_status is FAILED, the error code of the failure. The possible values are `1`, `2` and `3`.
         * 
         * @return builder
         * 
         */
        public Builder verifyErrorCode(Integer verifyErrorCode) {
            return verifyErrorCode(Output.of(verifyErrorCode));
        }

        /**
         * @param verifyErrorMessage In the case file_status is FAILED, may contain details about the failure.
         * 
         * @return builder
         * 
         */
        public Builder verifyErrorMessage(@Nullable Output<String> verifyErrorMessage) {
            $.verifyErrorMessage = verifyErrorMessage;
            return this;
        }

        /**
         * @param verifyErrorMessage In the case file_status is FAILED, may contain details about the failure.
         * 
         * @return builder
         * 
         */
        public Builder verifyErrorMessage(String verifyErrorMessage) {
            return verifyErrorMessage(Output.of(verifyErrorMessage));
        }

        public FlinkJarApplicationVersionFileInfoArgs build() {
            return $;
        }
    }

}
