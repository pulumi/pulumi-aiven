// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkApplicationDeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlinkApplicationDeploymentArgs Empty = new FlinkApplicationDeploymentArgs();

    /**
     * Application ID
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return Application ID
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * Flink Job parallelism
     * 
     */
    @Import(name="parallelism")
    private @Nullable Output<Integer> parallelism;

    /**
     * @return Flink Job parallelism
     * 
     */
    public Optional<Output<Integer>> parallelism() {
        return Optional.ofNullable(this.parallelism);
    }

    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
     * reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
     * reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Specifies whether a Flink Job is restarted in case it fails
     * 
     */
    @Import(name="restartEnabled")
    private @Nullable Output<Boolean> restartEnabled;

    /**
     * @return Specifies whether a Flink Job is restarted in case it fails
     * 
     */
    public Optional<Output<Boolean>> restartEnabled() {
        return Optional.ofNullable(this.restartEnabled);
    }

    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
     * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
     * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Job savepoint
     * 
     */
    @Import(name="startingSavepoint")
    private @Nullable Output<String> startingSavepoint;

    /**
     * @return Job savepoint
     * 
     */
    public Optional<Output<String>> startingSavepoint() {
        return Optional.ofNullable(this.startingSavepoint);
    }

    /**
     * ApplicationVersion ID
     * 
     */
    @Import(name="versionId", required=true)
    private Output<String> versionId;

    /**
     * @return ApplicationVersion ID
     * 
     */
    public Output<String> versionId() {
        return this.versionId;
    }

    private FlinkApplicationDeploymentArgs() {}

    private FlinkApplicationDeploymentArgs(FlinkApplicationDeploymentArgs $) {
        this.applicationId = $.applicationId;
        this.parallelism = $.parallelism;
        this.project = $.project;
        this.restartEnabled = $.restartEnabled;
        this.serviceName = $.serviceName;
        this.startingSavepoint = $.startingSavepoint;
        this.versionId = $.versionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkApplicationDeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkApplicationDeploymentArgs $;

        public Builder() {
            $ = new FlinkApplicationDeploymentArgs();
        }

        public Builder(FlinkApplicationDeploymentArgs defaults) {
            $ = new FlinkApplicationDeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Application ID
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Application ID
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param parallelism Flink Job parallelism
         * 
         * @return builder
         * 
         */
        public Builder parallelism(@Nullable Output<Integer> parallelism) {
            $.parallelism = parallelism;
            return this;
        }

        /**
         * @param parallelism Flink Job parallelism
         * 
         * @return builder
         * 
         */
        public Builder parallelism(Integer parallelism) {
            return parallelism(Output.of(parallelism));
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
         * reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
         * reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param restartEnabled Specifies whether a Flink Job is restarted in case it fails
         * 
         * @return builder
         * 
         */
        public Builder restartEnabled(@Nullable Output<Boolean> restartEnabled) {
            $.restartEnabled = restartEnabled;
            return this;
        }

        /**
         * @param restartEnabled Specifies whether a Flink Job is restarted in case it fails
         * 
         * @return builder
         * 
         */
        public Builder restartEnabled(Boolean restartEnabled) {
            return restartEnabled(Output.of(restartEnabled));
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
         * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
         * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param startingSavepoint Job savepoint
         * 
         * @return builder
         * 
         */
        public Builder startingSavepoint(@Nullable Output<String> startingSavepoint) {
            $.startingSavepoint = startingSavepoint;
            return this;
        }

        /**
         * @param startingSavepoint Job savepoint
         * 
         * @return builder
         * 
         */
        public Builder startingSavepoint(String startingSavepoint) {
            return startingSavepoint(Output.of(startingSavepoint));
        }

        /**
         * @param versionId ApplicationVersion ID
         * 
         * @return builder
         * 
         */
        public Builder versionId(Output<String> versionId) {
            $.versionId = versionId;
            return this;
        }

        /**
         * @param versionId ApplicationVersion ID
         * 
         * @return builder
         * 
         */
        public Builder versionId(String versionId) {
            return versionId(Output.of(versionId));
        }

        public FlinkApplicationDeploymentArgs build() {
            $.applicationId = Objects.requireNonNull($.applicationId, "expected parameter 'applicationId' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.versionId = Objects.requireNonNull($.versionId, "expected parameter 'versionId' to be non-null");
            return $;
        }
    }

}
