// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.aiven.inputs.OrganizationAddressTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationAddressArgs Empty = new OrganizationAddressArgs();

    /**
     * Array of address lines.
     * 
     */
    @Import(name="addressLines", required=true)
    private Output<List<String>> addressLines;

    /**
     * @return Array of address lines.
     * 
     */
    public Output<List<String>> addressLines() {
        return this.addressLines;
    }

    /**
     * City name.
     * 
     */
    @Import(name="city", required=true)
    private Output<String> city;

    /**
     * @return City name.
     * 
     */
    public Output<String> city() {
        return this.city;
    }

    /**
     * Name of the company.
     * 
     */
    @Import(name="companyName")
    private @Nullable Output<String> companyName;

    /**
     * @return Name of the company.
     * 
     */
    public Optional<Output<String>> companyName() {
        return Optional.ofNullable(this.companyName);
    }

    /**
     * Country code.
     * 
     */
    @Import(name="countryCode", required=true)
    private Output<String> countryCode;

    /**
     * @return Country code.
     * 
     */
    public Output<String> countryCode() {
        return this.countryCode;
    }

    /**
     * ID of organization.
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return ID of organization.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * State name.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State name.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="timeouts")
    private @Nullable Output<OrganizationAddressTimeoutsArgs> timeouts;

    public Optional<Output<OrganizationAddressTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Zip code.
     * 
     */
    @Import(name="zipCode")
    private @Nullable Output<String> zipCode;

    /**
     * @return Zip code.
     * 
     */
    public Optional<Output<String>> zipCode() {
        return Optional.ofNullable(this.zipCode);
    }

    private OrganizationAddressArgs() {}

    private OrganizationAddressArgs(OrganizationAddressArgs $) {
        this.addressLines = $.addressLines;
        this.city = $.city;
        this.companyName = $.companyName;
        this.countryCode = $.countryCode;
        this.organizationId = $.organizationId;
        this.state = $.state;
        this.timeouts = $.timeouts;
        this.zipCode = $.zipCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationAddressArgs $;

        public Builder() {
            $ = new OrganizationAddressArgs();
        }

        public Builder(OrganizationAddressArgs defaults) {
            $ = new OrganizationAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressLines Array of address lines.
         * 
         * @return builder
         * 
         */
        public Builder addressLines(Output<List<String>> addressLines) {
            $.addressLines = addressLines;
            return this;
        }

        /**
         * @param addressLines Array of address lines.
         * 
         * @return builder
         * 
         */
        public Builder addressLines(List<String> addressLines) {
            return addressLines(Output.of(addressLines));
        }

        /**
         * @param addressLines Array of address lines.
         * 
         * @return builder
         * 
         */
        public Builder addressLines(String... addressLines) {
            return addressLines(List.of(addressLines));
        }

        /**
         * @param city City name.
         * 
         * @return builder
         * 
         */
        public Builder city(Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city City name.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param companyName Name of the company.
         * 
         * @return builder
         * 
         */
        public Builder companyName(@Nullable Output<String> companyName) {
            $.companyName = companyName;
            return this;
        }

        /**
         * @param companyName Name of the company.
         * 
         * @return builder
         * 
         */
        public Builder companyName(String companyName) {
            return companyName(Output.of(companyName));
        }

        /**
         * @param countryCode Country code.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode Country code.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param organizationId ID of organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId ID of organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param state State name.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State name.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder timeouts(@Nullable Output<OrganizationAddressTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(OrganizationAddressTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param zipCode Zip code.
         * 
         * @return builder
         * 
         */
        public Builder zipCode(@Nullable Output<String> zipCode) {
            $.zipCode = zipCode;
            return this;
        }

        /**
         * @param zipCode Zip code.
         * 
         * @return builder
         * 
         */
        public Builder zipCode(String zipCode) {
            return zipCode(Output.of(zipCode));
        }

        public OrganizationAddressArgs build() {
            if ($.addressLines == null) {
                throw new MissingRequiredPropertyException("OrganizationAddressArgs", "addressLines");
            }
            if ($.city == null) {
                throw new MissingRequiredPropertyException("OrganizationAddressArgs", "city");
            }
            if ($.countryCode == null) {
                throw new MissingRequiredPropertyException("OrganizationAddressArgs", "countryCode");
            }
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("OrganizationAddressArgs", "organizationId");
            }
            return $;
        }
    }

}
