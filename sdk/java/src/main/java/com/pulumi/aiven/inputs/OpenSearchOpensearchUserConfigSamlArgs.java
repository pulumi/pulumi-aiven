// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenSearchOpensearchUserConfigSamlArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenSearchOpensearchUserConfigSamlArgs Empty = new OpenSearchOpensearchUserConfigSamlArgs();

    /**
     * Enables or disables SAML-based authentication for OpenSearch. When enabled, users can authenticate using SAML with an Identity Provider. The default value is `true`.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Enables or disables SAML-based authentication for OpenSearch. When enabled, users can authenticate using SAML with an Identity Provider. The default value is `true`.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The unique identifier for the Identity Provider (IdP) entity that is used for SAML authentication. This value is typically provided by the IdP.
     * 
     */
    @Import(name="idpEntityId", required=true)
    private Output<String> idpEntityId;

    /**
     * @return The unique identifier for the Identity Provider (IdP) entity that is used for SAML authentication. This value is typically provided by the IdP.
     * 
     */
    public Output<String> idpEntityId() {
        return this.idpEntityId;
    }

    /**
     * The URL of the SAML metadata for the Identity Provider (IdP). This is used to configure SAML-based authentication with the IdP.
     * 
     */
    @Import(name="idpMetadataUrl", required=true)
    private Output<String> idpMetadataUrl;

    /**
     * @return The URL of the SAML metadata for the Identity Provider (IdP). This is used to configure SAML-based authentication with the IdP.
     * 
     */
    public Output<String> idpMetadataUrl() {
        return this.idpMetadataUrl;
    }

    /**
     * This parameter specifies the PEM-encoded root certificate authority (CA) content for the SAML identity provider (IdP) server verification. The root CA content is used to verify the SSL/TLS certificate presented by the server.
     * 
     */
    @Import(name="idpPemtrustedcasContent")
    private @Nullable Output<String> idpPemtrustedcasContent;

    /**
     * @return This parameter specifies the PEM-encoded root certificate authority (CA) content for the SAML identity provider (IdP) server verification. The root CA content is used to verify the SSL/TLS certificate presented by the server.
     * 
     */
    public Optional<Output<String>> idpPemtrustedcasContent() {
        return Optional.ofNullable(this.idpPemtrustedcasContent);
    }

    /**
     * Optional. Specifies the attribute in the SAML response where role information is stored, if available. Role attributes are not required for SAML authentication, but can be included in SAML assertions by most Identity Providers (IdPs) to determine user access levels or permissions.
     * 
     */
    @Import(name="rolesKey")
    private @Nullable Output<String> rolesKey;

    /**
     * @return Optional. Specifies the attribute in the SAML response where role information is stored, if available. Role attributes are not required for SAML authentication, but can be included in SAML assertions by most Identity Providers (IdPs) to determine user access levels or permissions.
     * 
     */
    public Optional<Output<String>> rolesKey() {
        return Optional.ofNullable(this.rolesKey);
    }

    /**
     * The unique identifier for the Service Provider (SP) entity that is used for SAML authentication. This value is typically provided by the SP.
     * 
     */
    @Import(name="spEntityId", required=true)
    private Output<String> spEntityId;

    /**
     * @return The unique identifier for the Service Provider (SP) entity that is used for SAML authentication. This value is typically provided by the SP.
     * 
     */
    public Output<String> spEntityId() {
        return this.spEntityId;
    }

    /**
     * Optional. Specifies the attribute in the SAML response where the subject identifier is stored. If not configured, the NameID attribute is used by default.
     * 
     */
    @Import(name="subjectKey")
    private @Nullable Output<String> subjectKey;

    /**
     * @return Optional. Specifies the attribute in the SAML response where the subject identifier is stored. If not configured, the NameID attribute is used by default.
     * 
     */
    public Optional<Output<String>> subjectKey() {
        return Optional.ofNullable(this.subjectKey);
    }

    private OpenSearchOpensearchUserConfigSamlArgs() {}

    private OpenSearchOpensearchUserConfigSamlArgs(OpenSearchOpensearchUserConfigSamlArgs $) {
        this.enabled = $.enabled;
        this.idpEntityId = $.idpEntityId;
        this.idpMetadataUrl = $.idpMetadataUrl;
        this.idpPemtrustedcasContent = $.idpPemtrustedcasContent;
        this.rolesKey = $.rolesKey;
        this.spEntityId = $.spEntityId;
        this.subjectKey = $.subjectKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenSearchOpensearchUserConfigSamlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenSearchOpensearchUserConfigSamlArgs $;

        public Builder() {
            $ = new OpenSearchOpensearchUserConfigSamlArgs();
        }

        public Builder(OpenSearchOpensearchUserConfigSamlArgs defaults) {
            $ = new OpenSearchOpensearchUserConfigSamlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enables or disables SAML-based authentication for OpenSearch. When enabled, users can authenticate using SAML with an Identity Provider. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enables or disables SAML-based authentication for OpenSearch. When enabled, users can authenticate using SAML with an Identity Provider. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param idpEntityId The unique identifier for the Identity Provider (IdP) entity that is used for SAML authentication. This value is typically provided by the IdP.
         * 
         * @return builder
         * 
         */
        public Builder idpEntityId(Output<String> idpEntityId) {
            $.idpEntityId = idpEntityId;
            return this;
        }

        /**
         * @param idpEntityId The unique identifier for the Identity Provider (IdP) entity that is used for SAML authentication. This value is typically provided by the IdP.
         * 
         * @return builder
         * 
         */
        public Builder idpEntityId(String idpEntityId) {
            return idpEntityId(Output.of(idpEntityId));
        }

        /**
         * @param idpMetadataUrl The URL of the SAML metadata for the Identity Provider (IdP). This is used to configure SAML-based authentication with the IdP.
         * 
         * @return builder
         * 
         */
        public Builder idpMetadataUrl(Output<String> idpMetadataUrl) {
            $.idpMetadataUrl = idpMetadataUrl;
            return this;
        }

        /**
         * @param idpMetadataUrl The URL of the SAML metadata for the Identity Provider (IdP). This is used to configure SAML-based authentication with the IdP.
         * 
         * @return builder
         * 
         */
        public Builder idpMetadataUrl(String idpMetadataUrl) {
            return idpMetadataUrl(Output.of(idpMetadataUrl));
        }

        /**
         * @param idpPemtrustedcasContent This parameter specifies the PEM-encoded root certificate authority (CA) content for the SAML identity provider (IdP) server verification. The root CA content is used to verify the SSL/TLS certificate presented by the server.
         * 
         * @return builder
         * 
         */
        public Builder idpPemtrustedcasContent(@Nullable Output<String> idpPemtrustedcasContent) {
            $.idpPemtrustedcasContent = idpPemtrustedcasContent;
            return this;
        }

        /**
         * @param idpPemtrustedcasContent This parameter specifies the PEM-encoded root certificate authority (CA) content for the SAML identity provider (IdP) server verification. The root CA content is used to verify the SSL/TLS certificate presented by the server.
         * 
         * @return builder
         * 
         */
        public Builder idpPemtrustedcasContent(String idpPemtrustedcasContent) {
            return idpPemtrustedcasContent(Output.of(idpPemtrustedcasContent));
        }

        /**
         * @param rolesKey Optional. Specifies the attribute in the SAML response where role information is stored, if available. Role attributes are not required for SAML authentication, but can be included in SAML assertions by most Identity Providers (IdPs) to determine user access levels or permissions.
         * 
         * @return builder
         * 
         */
        public Builder rolesKey(@Nullable Output<String> rolesKey) {
            $.rolesKey = rolesKey;
            return this;
        }

        /**
         * @param rolesKey Optional. Specifies the attribute in the SAML response where role information is stored, if available. Role attributes are not required for SAML authentication, but can be included in SAML assertions by most Identity Providers (IdPs) to determine user access levels or permissions.
         * 
         * @return builder
         * 
         */
        public Builder rolesKey(String rolesKey) {
            return rolesKey(Output.of(rolesKey));
        }

        /**
         * @param spEntityId The unique identifier for the Service Provider (SP) entity that is used for SAML authentication. This value is typically provided by the SP.
         * 
         * @return builder
         * 
         */
        public Builder spEntityId(Output<String> spEntityId) {
            $.spEntityId = spEntityId;
            return this;
        }

        /**
         * @param spEntityId The unique identifier for the Service Provider (SP) entity that is used for SAML authentication. This value is typically provided by the SP.
         * 
         * @return builder
         * 
         */
        public Builder spEntityId(String spEntityId) {
            return spEntityId(Output.of(spEntityId));
        }

        /**
         * @param subjectKey Optional. Specifies the attribute in the SAML response where the subject identifier is stored. If not configured, the NameID attribute is used by default.
         * 
         * @return builder
         * 
         */
        public Builder subjectKey(@Nullable Output<String> subjectKey) {
            $.subjectKey = subjectKey;
            return this;
        }

        /**
         * @param subjectKey Optional. Specifies the attribute in the SAML response where the subject identifier is stored. If not configured, the NameID attribute is used by default.
         * 
         * @return builder
         * 
         */
        public Builder subjectKey(String subjectKey) {
            return subjectKey(Output.of(subjectKey));
        }

        public OpenSearchOpensearchUserConfigSamlArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigSamlArgs", "enabled");
            }
            if ($.idpEntityId == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigSamlArgs", "idpEntityId");
            }
            if ($.idpMetadataUrl == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigSamlArgs", "idpMetadataUrl");
            }
            if ($.spEntityId == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigSamlArgs", "spEntityId");
            }
            return $;
        }
    }

}
