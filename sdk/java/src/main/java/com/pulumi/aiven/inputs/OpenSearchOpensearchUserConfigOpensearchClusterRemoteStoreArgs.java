// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs Empty = new OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs();

    /**
     * The amount of time to wait for the cluster state upload to complete. Defaults to 20s.
     * 
     */
    @Import(name="stateGlobalMetadataUploadTimeout")
    private @Nullable Output<String> stateGlobalMetadataUploadTimeout;

    /**
     * @return The amount of time to wait for the cluster state upload to complete. Defaults to 20s.
     * 
     */
    public Optional<Output<String>> stateGlobalMetadataUploadTimeout() {
        return Optional.ofNullable(this.stateGlobalMetadataUploadTimeout);
    }

    /**
     * The amount of time to wait for the manifest file upload to complete. The manifest file contains the details of each of the files uploaded for a single cluster state, both index metadata files and global metadata files. Defaults to 20s.
     * 
     */
    @Import(name="stateMetadataManifestUploadTimeout")
    private @Nullable Output<String> stateMetadataManifestUploadTimeout;

    /**
     * @return The amount of time to wait for the manifest file upload to complete. The manifest file contains the details of each of the files uploaded for a single cluster state, both index metadata files and global metadata files. Defaults to 20s.
     * 
     */
    public Optional<Output<String>> stateMetadataManifestUploadTimeout() {
        return Optional.ofNullable(this.stateMetadataManifestUploadTimeout);
    }

    /**
     * The default value of the translog buffer interval used when performing periodic translog updates. This setting is only effective when the index setting `index.remote_store.translog.buffer_interval` is not present. Defaults to 650ms.
     * 
     */
    @Import(name="translogBufferInterval")
    private @Nullable Output<String> translogBufferInterval;

    /**
     * @return The default value of the translog buffer interval used when performing periodic translog updates. This setting is only effective when the index setting `index.remote_store.translog.buffer_interval` is not present. Defaults to 650ms.
     * 
     */
    public Optional<Output<String>> translogBufferInterval() {
        return Optional.ofNullable(this.translogBufferInterval);
    }

    /**
     * Sets the maximum number of open translog files for remote-backed indexes. This limits the total number of translog files per shard. After reaching this limit, the remote store flushes the translog files. Default is 1000. The minimum required is 100. Example: `1000`.
     * 
     */
    @Import(name="translogMaxReaders")
    private @Nullable Output<Integer> translogMaxReaders;

    /**
     * @return Sets the maximum number of open translog files for remote-backed indexes. This limits the total number of translog files per shard. After reaching this limit, the remote store flushes the translog files. Default is 1000. The minimum required is 100. Example: `1000`.
     * 
     */
    public Optional<Output<Integer>> translogMaxReaders() {
        return Optional.ofNullable(this.translogMaxReaders);
    }

    private OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs() {}

    private OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs(OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs $) {
        this.stateGlobalMetadataUploadTimeout = $.stateGlobalMetadataUploadTimeout;
        this.stateMetadataManifestUploadTimeout = $.stateMetadataManifestUploadTimeout;
        this.translogBufferInterval = $.translogBufferInterval;
        this.translogMaxReaders = $.translogMaxReaders;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs $;

        public Builder() {
            $ = new OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs();
        }

        public Builder(OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs defaults) {
            $ = new OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param stateGlobalMetadataUploadTimeout The amount of time to wait for the cluster state upload to complete. Defaults to 20s.
         * 
         * @return builder
         * 
         */
        public Builder stateGlobalMetadataUploadTimeout(@Nullable Output<String> stateGlobalMetadataUploadTimeout) {
            $.stateGlobalMetadataUploadTimeout = stateGlobalMetadataUploadTimeout;
            return this;
        }

        /**
         * @param stateGlobalMetadataUploadTimeout The amount of time to wait for the cluster state upload to complete. Defaults to 20s.
         * 
         * @return builder
         * 
         */
        public Builder stateGlobalMetadataUploadTimeout(String stateGlobalMetadataUploadTimeout) {
            return stateGlobalMetadataUploadTimeout(Output.of(stateGlobalMetadataUploadTimeout));
        }

        /**
         * @param stateMetadataManifestUploadTimeout The amount of time to wait for the manifest file upload to complete. The manifest file contains the details of each of the files uploaded for a single cluster state, both index metadata files and global metadata files. Defaults to 20s.
         * 
         * @return builder
         * 
         */
        public Builder stateMetadataManifestUploadTimeout(@Nullable Output<String> stateMetadataManifestUploadTimeout) {
            $.stateMetadataManifestUploadTimeout = stateMetadataManifestUploadTimeout;
            return this;
        }

        /**
         * @param stateMetadataManifestUploadTimeout The amount of time to wait for the manifest file upload to complete. The manifest file contains the details of each of the files uploaded for a single cluster state, both index metadata files and global metadata files. Defaults to 20s.
         * 
         * @return builder
         * 
         */
        public Builder stateMetadataManifestUploadTimeout(String stateMetadataManifestUploadTimeout) {
            return stateMetadataManifestUploadTimeout(Output.of(stateMetadataManifestUploadTimeout));
        }

        /**
         * @param translogBufferInterval The default value of the translog buffer interval used when performing periodic translog updates. This setting is only effective when the index setting `index.remote_store.translog.buffer_interval` is not present. Defaults to 650ms.
         * 
         * @return builder
         * 
         */
        public Builder translogBufferInterval(@Nullable Output<String> translogBufferInterval) {
            $.translogBufferInterval = translogBufferInterval;
            return this;
        }

        /**
         * @param translogBufferInterval The default value of the translog buffer interval used when performing periodic translog updates. This setting is only effective when the index setting `index.remote_store.translog.buffer_interval` is not present. Defaults to 650ms.
         * 
         * @return builder
         * 
         */
        public Builder translogBufferInterval(String translogBufferInterval) {
            return translogBufferInterval(Output.of(translogBufferInterval));
        }

        /**
         * @param translogMaxReaders Sets the maximum number of open translog files for remote-backed indexes. This limits the total number of translog files per shard. After reaching this limit, the remote store flushes the translog files. Default is 1000. The minimum required is 100. Example: `1000`.
         * 
         * @return builder
         * 
         */
        public Builder translogMaxReaders(@Nullable Output<Integer> translogMaxReaders) {
            $.translogMaxReaders = translogMaxReaders;
            return this;
        }

        /**
         * @param translogMaxReaders Sets the maximum number of open translog files for remote-backed indexes. This limits the total number of translog files per shard. After reaching this limit, the remote store flushes the translog files. Default is 1000. The minimum required is 100. Example: `1000`.
         * 
         * @return builder
         * 
         */
        public Builder translogMaxReaders(Integer translogMaxReaders) {
            return translogMaxReaders(Output.of(translogMaxReaders));
        }

        public OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreArgs build() {
            return $;
        }
    }

}
