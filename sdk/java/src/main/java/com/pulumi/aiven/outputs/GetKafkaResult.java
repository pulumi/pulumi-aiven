// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetKafkaComponent;
import com.pulumi.aiven.outputs.GetKafkaKafka;
import com.pulumi.aiven.outputs.GetKafkaKafkaUserConfig;
import com.pulumi.aiven.outputs.GetKafkaServiceIntegration;
import com.pulumi.aiven.outputs.GetKafkaTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetKafkaResult {
    /**
     * @return Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
     * 
     */
    private final String additionalDiskSpace;
    /**
     * @return Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider&#39;s own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     * 
     */
    private final String cloudName;
    /**
     * @return Service component information objects
     * 
     */
    private final List<GetKafkaComponent> components;
    /**
     * @return Create default wildcard Kafka ACL
     * 
     */
    private final Boolean defaultAcl;
    /**
     * @return Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
     * 
     */
    private final String diskSpace;
    /**
     * @return The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
     * 
     */
    private final String diskSpaceCap;
    /**
     * @return The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `disk_space`
     * 
     */
    private final String diskSpaceDefault;
    /**
     * @return The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
     * 
     */
    private final String diskSpaceStep;
    /**
     * @return Disk space that service is currently using
     * 
     */
    private final String diskSpaceUsed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Kafka user configurable settings
     * 
     */
    private final List<GetKafkaKafkaUserConfig> kafkaUserConfigs;
    /**
     * @return Kafka server provided values
     * 
     */
    private final List<GetKafkaKafka> kafkas;
    /**
     * @return Switch the service to use Karapace for schema registry and REST proxy
     * 
     */
    private final Boolean karapace;
    /**
     * @return Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     * 
     */
    private final String maintenanceWindowDow;
    /**
     * @return Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     * 
     */
    private final String maintenanceWindowTime;
    /**
     * @return Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
     * 
     */
    private final String plan;
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private final String project;
    /**
     * @return Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
     * 
     */
    private final String projectVpcId;
    /**
     * @return The hostname of the service.
     * 
     */
    private final String serviceHost;
    /**
     * @return Service integrations to specify when creating a service. Not applied after initial service creation
     * 
     */
    private final List<GetKafkaServiceIntegration> serviceIntegrations;
    /**
     * @return Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
     * 
     */
    private final String serviceName;
    /**
     * @return Password used for connecting to the service, if applicable
     * 
     */
    private final String servicePassword;
    /**
     * @return The port of the service
     * 
     */
    private final Integer servicePort;
    /**
     * @return Aiven internal service type code
     * 
     */
    private final String serviceType;
    /**
     * @return URI for connecting to the service. Service specific info is under &#34;kafka&#34;, &#34;pg&#34;, etc.
     * 
     */
    private final String serviceUri;
    /**
     * @return Username used for connecting to the service, if applicable
     * 
     */
    private final String serviceUsername;
    /**
     * @return Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
     * 
     */
    private final String state;
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    private final List<String> staticIps;
    /**
     * @return Tags are key-value pairs that allow you to categorize services.
     * 
     */
    private final List<GetKafkaTag> tags;
    /**
     * @return Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
     * 
     */
    private final Boolean terminationProtection;

    @CustomType.Constructor
    private GetKafkaResult(
        @CustomType.Parameter("additionalDiskSpace") String additionalDiskSpace,
        @CustomType.Parameter("cloudName") String cloudName,
        @CustomType.Parameter("components") List<GetKafkaComponent> components,
        @CustomType.Parameter("defaultAcl") Boolean defaultAcl,
        @CustomType.Parameter("diskSpace") String diskSpace,
        @CustomType.Parameter("diskSpaceCap") String diskSpaceCap,
        @CustomType.Parameter("diskSpaceDefault") String diskSpaceDefault,
        @CustomType.Parameter("diskSpaceStep") String diskSpaceStep,
        @CustomType.Parameter("diskSpaceUsed") String diskSpaceUsed,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("kafkaUserConfigs") List<GetKafkaKafkaUserConfig> kafkaUserConfigs,
        @CustomType.Parameter("kafkas") List<GetKafkaKafka> kafkas,
        @CustomType.Parameter("karapace") Boolean karapace,
        @CustomType.Parameter("maintenanceWindowDow") String maintenanceWindowDow,
        @CustomType.Parameter("maintenanceWindowTime") String maintenanceWindowTime,
        @CustomType.Parameter("plan") String plan,
        @CustomType.Parameter("project") String project,
        @CustomType.Parameter("projectVpcId") String projectVpcId,
        @CustomType.Parameter("serviceHost") String serviceHost,
        @CustomType.Parameter("serviceIntegrations") List<GetKafkaServiceIntegration> serviceIntegrations,
        @CustomType.Parameter("serviceName") String serviceName,
        @CustomType.Parameter("servicePassword") String servicePassword,
        @CustomType.Parameter("servicePort") Integer servicePort,
        @CustomType.Parameter("serviceType") String serviceType,
        @CustomType.Parameter("serviceUri") String serviceUri,
        @CustomType.Parameter("serviceUsername") String serviceUsername,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("staticIps") List<String> staticIps,
        @CustomType.Parameter("tags") List<GetKafkaTag> tags,
        @CustomType.Parameter("terminationProtection") Boolean terminationProtection) {
        this.additionalDiskSpace = additionalDiskSpace;
        this.cloudName = cloudName;
        this.components = components;
        this.defaultAcl = defaultAcl;
        this.diskSpace = diskSpace;
        this.diskSpaceCap = diskSpaceCap;
        this.diskSpaceDefault = diskSpaceDefault;
        this.diskSpaceStep = diskSpaceStep;
        this.diskSpaceUsed = diskSpaceUsed;
        this.id = id;
        this.kafkaUserConfigs = kafkaUserConfigs;
        this.kafkas = kafkas;
        this.karapace = karapace;
        this.maintenanceWindowDow = maintenanceWindowDow;
        this.maintenanceWindowTime = maintenanceWindowTime;
        this.plan = plan;
        this.project = project;
        this.projectVpcId = projectVpcId;
        this.serviceHost = serviceHost;
        this.serviceIntegrations = serviceIntegrations;
        this.serviceName = serviceName;
        this.servicePassword = servicePassword;
        this.servicePort = servicePort;
        this.serviceType = serviceType;
        this.serviceUri = serviceUri;
        this.serviceUsername = serviceUsername;
        this.state = state;
        this.staticIps = staticIps;
        this.tags = tags;
        this.terminationProtection = terminationProtection;
    }

    /**
     * @return Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
     * 
     */
    public String additionalDiskSpace() {
        return this.additionalDiskSpace;
    }
    /**
     * @return Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider&#39;s own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     * 
     */
    public String cloudName() {
        return this.cloudName;
    }
    /**
     * @return Service component information objects
     * 
     */
    public List<GetKafkaComponent> components() {
        return this.components;
    }
    /**
     * @return Create default wildcard Kafka ACL
     * 
     */
    public Boolean defaultAcl() {
        return this.defaultAcl;
    }
    /**
     * @return Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
     * 
     */
    public String diskSpace() {
        return this.diskSpace;
    }
    /**
     * @return The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
     * 
     */
    public String diskSpaceCap() {
        return this.diskSpaceCap;
    }
    /**
     * @return The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `disk_space`
     * 
     */
    public String diskSpaceDefault() {
        return this.diskSpaceDefault;
    }
    /**
     * @return The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
     * 
     */
    public String diskSpaceStep() {
        return this.diskSpaceStep;
    }
    /**
     * @return Disk space that service is currently using
     * 
     */
    public String diskSpaceUsed() {
        return this.diskSpaceUsed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Kafka user configurable settings
     * 
     */
    public List<GetKafkaKafkaUserConfig> kafkaUserConfigs() {
        return this.kafkaUserConfigs;
    }
    /**
     * @return Kafka server provided values
     * 
     */
    public List<GetKafkaKafka> kafkas() {
        return this.kafkas;
    }
    /**
     * @return Switch the service to use Karapace for schema registry and REST proxy
     * 
     */
    public Boolean karapace() {
        return this.karapace;
    }
    /**
     * @return Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     * 
     */
    public String maintenanceWindowDow() {
        return this.maintenanceWindowDow;
    }
    /**
     * @return Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     * 
     */
    public String maintenanceWindowTime() {
        return this.maintenanceWindowTime;
    }
    /**
     * @return Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
     * 
     */
    public String plan() {
        return this.plan;
    }
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
     * 
     */
    public String projectVpcId() {
        return this.projectVpcId;
    }
    /**
     * @return The hostname of the service.
     * 
     */
    public String serviceHost() {
        return this.serviceHost;
    }
    /**
     * @return Service integrations to specify when creating a service. Not applied after initial service creation
     * 
     */
    public List<GetKafkaServiceIntegration> serviceIntegrations() {
        return this.serviceIntegrations;
    }
    /**
     * @return Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Password used for connecting to the service, if applicable
     * 
     */
    public String servicePassword() {
        return this.servicePassword;
    }
    /**
     * @return The port of the service
     * 
     */
    public Integer servicePort() {
        return this.servicePort;
    }
    /**
     * @return Aiven internal service type code
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return URI for connecting to the service. Service specific info is under &#34;kafka&#34;, &#34;pg&#34;, etc.
     * 
     */
    public String serviceUri() {
        return this.serviceUri;
    }
    /**
     * @return Username used for connecting to the service, if applicable
     * 
     */
    public String serviceUsername() {
        return this.serviceUsername;
    }
    /**
     * @return Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    public List<String> staticIps() {
        return this.staticIps;
    }
    /**
     * @return Tags are key-value pairs that allow you to categorize services.
     * 
     */
    public List<GetKafkaTag> tags() {
        return this.tags;
    }
    /**
     * @return Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
     * 
     */
    public Boolean terminationProtection() {
        return this.terminationProtection;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String additionalDiskSpace;
        private String cloudName;
        private List<GetKafkaComponent> components;
        private Boolean defaultAcl;
        private String diskSpace;
        private String diskSpaceCap;
        private String diskSpaceDefault;
        private String diskSpaceStep;
        private String diskSpaceUsed;
        private String id;
        private List<GetKafkaKafkaUserConfig> kafkaUserConfigs;
        private List<GetKafkaKafka> kafkas;
        private Boolean karapace;
        private String maintenanceWindowDow;
        private String maintenanceWindowTime;
        private String plan;
        private String project;
        private String projectVpcId;
        private String serviceHost;
        private List<GetKafkaServiceIntegration> serviceIntegrations;
        private String serviceName;
        private String servicePassword;
        private Integer servicePort;
        private String serviceType;
        private String serviceUri;
        private String serviceUsername;
        private String state;
        private List<String> staticIps;
        private List<GetKafkaTag> tags;
        private Boolean terminationProtection;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKafkaResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDiskSpace = defaults.additionalDiskSpace;
    	      this.cloudName = defaults.cloudName;
    	      this.components = defaults.components;
    	      this.defaultAcl = defaults.defaultAcl;
    	      this.diskSpace = defaults.diskSpace;
    	      this.diskSpaceCap = defaults.diskSpaceCap;
    	      this.diskSpaceDefault = defaults.diskSpaceDefault;
    	      this.diskSpaceStep = defaults.diskSpaceStep;
    	      this.diskSpaceUsed = defaults.diskSpaceUsed;
    	      this.id = defaults.id;
    	      this.kafkaUserConfigs = defaults.kafkaUserConfigs;
    	      this.kafkas = defaults.kafkas;
    	      this.karapace = defaults.karapace;
    	      this.maintenanceWindowDow = defaults.maintenanceWindowDow;
    	      this.maintenanceWindowTime = defaults.maintenanceWindowTime;
    	      this.plan = defaults.plan;
    	      this.project = defaults.project;
    	      this.projectVpcId = defaults.projectVpcId;
    	      this.serviceHost = defaults.serviceHost;
    	      this.serviceIntegrations = defaults.serviceIntegrations;
    	      this.serviceName = defaults.serviceName;
    	      this.servicePassword = defaults.servicePassword;
    	      this.servicePort = defaults.servicePort;
    	      this.serviceType = defaults.serviceType;
    	      this.serviceUri = defaults.serviceUri;
    	      this.serviceUsername = defaults.serviceUsername;
    	      this.state = defaults.state;
    	      this.staticIps = defaults.staticIps;
    	      this.tags = defaults.tags;
    	      this.terminationProtection = defaults.terminationProtection;
        }

        public Builder additionalDiskSpace(String additionalDiskSpace) {
            this.additionalDiskSpace = Objects.requireNonNull(additionalDiskSpace);
            return this;
        }
        public Builder cloudName(String cloudName) {
            this.cloudName = Objects.requireNonNull(cloudName);
            return this;
        }
        public Builder components(List<GetKafkaComponent> components) {
            this.components = Objects.requireNonNull(components);
            return this;
        }
        public Builder components(GetKafkaComponent... components) {
            return components(List.of(components));
        }
        public Builder defaultAcl(Boolean defaultAcl) {
            this.defaultAcl = Objects.requireNonNull(defaultAcl);
            return this;
        }
        public Builder diskSpace(String diskSpace) {
            this.diskSpace = Objects.requireNonNull(diskSpace);
            return this;
        }
        public Builder diskSpaceCap(String diskSpaceCap) {
            this.diskSpaceCap = Objects.requireNonNull(diskSpaceCap);
            return this;
        }
        public Builder diskSpaceDefault(String diskSpaceDefault) {
            this.diskSpaceDefault = Objects.requireNonNull(diskSpaceDefault);
            return this;
        }
        public Builder diskSpaceStep(String diskSpaceStep) {
            this.diskSpaceStep = Objects.requireNonNull(diskSpaceStep);
            return this;
        }
        public Builder diskSpaceUsed(String diskSpaceUsed) {
            this.diskSpaceUsed = Objects.requireNonNull(diskSpaceUsed);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder kafkaUserConfigs(List<GetKafkaKafkaUserConfig> kafkaUserConfigs) {
            this.kafkaUserConfigs = Objects.requireNonNull(kafkaUserConfigs);
            return this;
        }
        public Builder kafkaUserConfigs(GetKafkaKafkaUserConfig... kafkaUserConfigs) {
            return kafkaUserConfigs(List.of(kafkaUserConfigs));
        }
        public Builder kafkas(List<GetKafkaKafka> kafkas) {
            this.kafkas = Objects.requireNonNull(kafkas);
            return this;
        }
        public Builder kafkas(GetKafkaKafka... kafkas) {
            return kafkas(List.of(kafkas));
        }
        public Builder karapace(Boolean karapace) {
            this.karapace = Objects.requireNonNull(karapace);
            return this;
        }
        public Builder maintenanceWindowDow(String maintenanceWindowDow) {
            this.maintenanceWindowDow = Objects.requireNonNull(maintenanceWindowDow);
            return this;
        }
        public Builder maintenanceWindowTime(String maintenanceWindowTime) {
            this.maintenanceWindowTime = Objects.requireNonNull(maintenanceWindowTime);
            return this;
        }
        public Builder plan(String plan) {
            this.plan = Objects.requireNonNull(plan);
            return this;
        }
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        public Builder projectVpcId(String projectVpcId) {
            this.projectVpcId = Objects.requireNonNull(projectVpcId);
            return this;
        }
        public Builder serviceHost(String serviceHost) {
            this.serviceHost = Objects.requireNonNull(serviceHost);
            return this;
        }
        public Builder serviceIntegrations(List<GetKafkaServiceIntegration> serviceIntegrations) {
            this.serviceIntegrations = Objects.requireNonNull(serviceIntegrations);
            return this;
        }
        public Builder serviceIntegrations(GetKafkaServiceIntegration... serviceIntegrations) {
            return serviceIntegrations(List.of(serviceIntegrations));
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder servicePassword(String servicePassword) {
            this.servicePassword = Objects.requireNonNull(servicePassword);
            return this;
        }
        public Builder servicePort(Integer servicePort) {
            this.servicePort = Objects.requireNonNull(servicePort);
            return this;
        }
        public Builder serviceType(String serviceType) {
            this.serviceType = Objects.requireNonNull(serviceType);
            return this;
        }
        public Builder serviceUri(String serviceUri) {
            this.serviceUri = Objects.requireNonNull(serviceUri);
            return this;
        }
        public Builder serviceUsername(String serviceUsername) {
            this.serviceUsername = Objects.requireNonNull(serviceUsername);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder staticIps(List<String> staticIps) {
            this.staticIps = Objects.requireNonNull(staticIps);
            return this;
        }
        public Builder staticIps(String... staticIps) {
            return staticIps(List.of(staticIps));
        }
        public Builder tags(List<GetKafkaTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetKafkaTag... tags) {
            return tags(List.of(tags));
        }
        public Builder terminationProtection(Boolean terminationProtection) {
            this.terminationProtection = Objects.requireNonNull(terminationProtection);
            return this;
        }        public GetKafkaResult build() {
            return new GetKafkaResult(additionalDiskSpace, cloudName, components, defaultAcl, diskSpace, diskSpaceCap, diskSpaceDefault, diskSpaceStep, diskSpaceUsed, id, kafkaUserConfigs, kafkas, karapace, maintenanceWindowDow, maintenanceWindowTime, plan, project, projectVpcId, serviceHost, serviceIntegrations, serviceName, servicePassword, servicePort, serviceType, serviceUri, serviceUsername, state, staticIps, tags, terminationProtection);
        }
    }
}
