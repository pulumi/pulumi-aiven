// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetKafkaTopicConfig;
import com.pulumi.aiven.outputs.GetKafkaTopicTag;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetKafkaTopicResult {
    /**
     * @return Kafka topic configuration
     * 
     */
    private List<GetKafkaTopicConfig> configs;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The number of partitions to create in the topic.
     * 
     */
    private Integer partitions;
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    private String project;
    /**
     * @return The replication factor for the topic.
     * 
     */
    private Integer replication;
    /**
     * @return Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    private String serviceName;
    /**
     * @return Kafka Topic tag.
     * 
     */
    private List<GetKafkaTopicTag> tags;
    private Boolean terminationProtection;
    /**
     * @return The name of the topic. Changing this property forces recreation of the resource.
     * 
     */
    private String topicName;

    private GetKafkaTopicResult() {}
    /**
     * @return Kafka topic configuration
     * 
     */
    public List<GetKafkaTopicConfig> configs() {
        return this.configs;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The number of partitions to create in the topic.
     * 
     */
    public Integer partitions() {
        return this.partitions;
    }
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The replication factor for the topic.
     * 
     */
    public Integer replication() {
        return this.replication;
    }
    /**
     * @return Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Kafka Topic tag.
     * 
     */
    public List<GetKafkaTopicTag> tags() {
        return this.tags;
    }
    public Boolean terminationProtection() {
        return this.terminationProtection;
    }
    /**
     * @return The name of the topic. Changing this property forces recreation of the resource.
     * 
     */
    public String topicName() {
        return this.topicName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaTopicResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetKafkaTopicConfig> configs;
        private String id;
        private Integer partitions;
        private String project;
        private Integer replication;
        private String serviceName;
        private List<GetKafkaTopicTag> tags;
        private Boolean terminationProtection;
        private String topicName;
        public Builder() {}
        public Builder(GetKafkaTopicResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configs = defaults.configs;
    	      this.id = defaults.id;
    	      this.partitions = defaults.partitions;
    	      this.project = defaults.project;
    	      this.replication = defaults.replication;
    	      this.serviceName = defaults.serviceName;
    	      this.tags = defaults.tags;
    	      this.terminationProtection = defaults.terminationProtection;
    	      this.topicName = defaults.topicName;
        }

        @CustomType.Setter
        public Builder configs(List<GetKafkaTopicConfig> configs) {
            if (configs == null) {
              throw new MissingRequiredPropertyException("GetKafkaTopicResult", "configs");
            }
            this.configs = configs;
            return this;
        }
        public Builder configs(GetKafkaTopicConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetKafkaTopicResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder partitions(Integer partitions) {
            if (partitions == null) {
              throw new MissingRequiredPropertyException("GetKafkaTopicResult", "partitions");
            }
            this.partitions = partitions;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetKafkaTopicResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder replication(Integer replication) {
            if (replication == null) {
              throw new MissingRequiredPropertyException("GetKafkaTopicResult", "replication");
            }
            this.replication = replication;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetKafkaTopicResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetKafkaTopicTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetKafkaTopicResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetKafkaTopicTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder terminationProtection(Boolean terminationProtection) {
            if (terminationProtection == null) {
              throw new MissingRequiredPropertyException("GetKafkaTopicResult", "terminationProtection");
            }
            this.terminationProtection = terminationProtection;
            return this;
        }
        @CustomType.Setter
        public Builder topicName(String topicName) {
            if (topicName == null) {
              throw new MissingRequiredPropertyException("GetKafkaTopicResult", "topicName");
            }
            this.topicName = topicName;
            return this;
        }
        public GetKafkaTopicResult build() {
            final var _resultValue = new GetKafkaTopicResult();
            _resultValue.configs = configs;
            _resultValue.id = id;
            _resultValue.partitions = partitions;
            _resultValue.project = project;
            _resultValue.replication = replication;
            _resultValue.serviceName = serviceName;
            _resultValue.tags = tags;
            _resultValue.terminationProtection = terminationProtection;
            _resultValue.topicName = topicName;
            return _resultValue;
        }
    }
}
