// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetServiceIntegrationClickhouseKafkaUserConfig;
import com.pulumi.aiven.outputs.GetServiceIntegrationClickhousePostgresqlUserConfig;
import com.pulumi.aiven.outputs.GetServiceIntegrationDatadogUserConfig;
import com.pulumi.aiven.outputs.GetServiceIntegrationKafkaConnectUserConfig;
import com.pulumi.aiven.outputs.GetServiceIntegrationKafkaLogsUserConfig;
import com.pulumi.aiven.outputs.GetServiceIntegrationKafkaMirrormakerUserConfig;
import com.pulumi.aiven.outputs.GetServiceIntegrationLogsUserConfig;
import com.pulumi.aiven.outputs.GetServiceIntegrationMetricsUserConfig;
import com.pulumi.aiven.outputs.GetServiceIntegrationMirrormakerUserConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceIntegrationResult {
    /**
     * @return ClickhouseKafka user configurable settings
     * 
     */
    private List<GetServiceIntegrationClickhouseKafkaUserConfig> clickhouseKafkaUserConfigs;
    /**
     * @return ClickhousePostgresql user configurable settings
     * 
     */
    private List<GetServiceIntegrationClickhousePostgresqlUserConfig> clickhousePostgresqlUserConfigs;
    /**
     * @return Datadog user configurable settings
     * 
     */
    private List<GetServiceIntegrationDatadogUserConfig> datadogUserConfigs;
    /**
     * @return Destination endpoint for the integration (if any)
     * 
     */
    private String destinationEndpointId;
    /**
     * @return Destination service for the integration (if any)
     * 
     */
    private String destinationServiceName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Service Integration Id at aiven
     * 
     */
    private String integrationId;
    /**
     * @return Type of the service integration
     * 
     */
    private String integrationType;
    /**
     * @return KafkaConnect user configurable settings
     * 
     */
    private List<GetServiceIntegrationKafkaConnectUserConfig> kafkaConnectUserConfigs;
    /**
     * @return KafkaLogs user configurable settings
     * 
     */
    private List<GetServiceIntegrationKafkaLogsUserConfig> kafkaLogsUserConfigs;
    /**
     * @return KafkaMirrormaker user configurable settings
     * 
     */
    private List<GetServiceIntegrationKafkaMirrormakerUserConfig> kafkaMirrormakerUserConfigs;
    /**
     * @return Logs user configurable settings
     * 
     */
    private List<GetServiceIntegrationLogsUserConfig> logsUserConfigs;
    /**
     * @return Metrics user configurable settings
     * 
     */
    private List<GetServiceIntegrationMetricsUserConfig> metricsUserConfigs;
    /**
     * @return Mirrormaker user configurable settings
     * 
     */
    private List<GetServiceIntegrationMirrormakerUserConfig> mirrormakerUserConfigs;
    /**
     * @return Project the integration belongs to
     * 
     */
    private String project;
    /**
     * @return Source endpoint for the integration (if any)
     * 
     */
    private String sourceEndpointId;
    /**
     * @return Source service for the integration (if any)
     * 
     */
    private String sourceServiceName;

    private GetServiceIntegrationResult() {}
    /**
     * @return ClickhouseKafka user configurable settings
     * 
     */
    public List<GetServiceIntegrationClickhouseKafkaUserConfig> clickhouseKafkaUserConfigs() {
        return this.clickhouseKafkaUserConfigs;
    }
    /**
     * @return ClickhousePostgresql user configurable settings
     * 
     */
    public List<GetServiceIntegrationClickhousePostgresqlUserConfig> clickhousePostgresqlUserConfigs() {
        return this.clickhousePostgresqlUserConfigs;
    }
    /**
     * @return Datadog user configurable settings
     * 
     */
    public List<GetServiceIntegrationDatadogUserConfig> datadogUserConfigs() {
        return this.datadogUserConfigs;
    }
    /**
     * @return Destination endpoint for the integration (if any)
     * 
     */
    public String destinationEndpointId() {
        return this.destinationEndpointId;
    }
    /**
     * @return Destination service for the integration (if any)
     * 
     */
    public String destinationServiceName() {
        return this.destinationServiceName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Service Integration Id at aiven
     * 
     */
    public String integrationId() {
        return this.integrationId;
    }
    /**
     * @return Type of the service integration
     * 
     */
    public String integrationType() {
        return this.integrationType;
    }
    /**
     * @return KafkaConnect user configurable settings
     * 
     */
    public List<GetServiceIntegrationKafkaConnectUserConfig> kafkaConnectUserConfigs() {
        return this.kafkaConnectUserConfigs;
    }
    /**
     * @return KafkaLogs user configurable settings
     * 
     */
    public List<GetServiceIntegrationKafkaLogsUserConfig> kafkaLogsUserConfigs() {
        return this.kafkaLogsUserConfigs;
    }
    /**
     * @return KafkaMirrormaker user configurable settings
     * 
     */
    public List<GetServiceIntegrationKafkaMirrormakerUserConfig> kafkaMirrormakerUserConfigs() {
        return this.kafkaMirrormakerUserConfigs;
    }
    /**
     * @return Logs user configurable settings
     * 
     */
    public List<GetServiceIntegrationLogsUserConfig> logsUserConfigs() {
        return this.logsUserConfigs;
    }
    /**
     * @return Metrics user configurable settings
     * 
     */
    public List<GetServiceIntegrationMetricsUserConfig> metricsUserConfigs() {
        return this.metricsUserConfigs;
    }
    /**
     * @return Mirrormaker user configurable settings
     * 
     */
    public List<GetServiceIntegrationMirrormakerUserConfig> mirrormakerUserConfigs() {
        return this.mirrormakerUserConfigs;
    }
    /**
     * @return Project the integration belongs to
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Source endpoint for the integration (if any)
     * 
     */
    public String sourceEndpointId() {
        return this.sourceEndpointId;
    }
    /**
     * @return Source service for the integration (if any)
     * 
     */
    public String sourceServiceName() {
        return this.sourceServiceName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceIntegrationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetServiceIntegrationClickhouseKafkaUserConfig> clickhouseKafkaUserConfigs;
        private List<GetServiceIntegrationClickhousePostgresqlUserConfig> clickhousePostgresqlUserConfigs;
        private List<GetServiceIntegrationDatadogUserConfig> datadogUserConfigs;
        private String destinationEndpointId;
        private String destinationServiceName;
        private String id;
        private String integrationId;
        private String integrationType;
        private List<GetServiceIntegrationKafkaConnectUserConfig> kafkaConnectUserConfigs;
        private List<GetServiceIntegrationKafkaLogsUserConfig> kafkaLogsUserConfigs;
        private List<GetServiceIntegrationKafkaMirrormakerUserConfig> kafkaMirrormakerUserConfigs;
        private List<GetServiceIntegrationLogsUserConfig> logsUserConfigs;
        private List<GetServiceIntegrationMetricsUserConfig> metricsUserConfigs;
        private List<GetServiceIntegrationMirrormakerUserConfig> mirrormakerUserConfigs;
        private String project;
        private String sourceEndpointId;
        private String sourceServiceName;
        public Builder() {}
        public Builder(GetServiceIntegrationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clickhouseKafkaUserConfigs = defaults.clickhouseKafkaUserConfigs;
    	      this.clickhousePostgresqlUserConfigs = defaults.clickhousePostgresqlUserConfigs;
    	      this.datadogUserConfigs = defaults.datadogUserConfigs;
    	      this.destinationEndpointId = defaults.destinationEndpointId;
    	      this.destinationServiceName = defaults.destinationServiceName;
    	      this.id = defaults.id;
    	      this.integrationId = defaults.integrationId;
    	      this.integrationType = defaults.integrationType;
    	      this.kafkaConnectUserConfigs = defaults.kafkaConnectUserConfigs;
    	      this.kafkaLogsUserConfigs = defaults.kafkaLogsUserConfigs;
    	      this.kafkaMirrormakerUserConfigs = defaults.kafkaMirrormakerUserConfigs;
    	      this.logsUserConfigs = defaults.logsUserConfigs;
    	      this.metricsUserConfigs = defaults.metricsUserConfigs;
    	      this.mirrormakerUserConfigs = defaults.mirrormakerUserConfigs;
    	      this.project = defaults.project;
    	      this.sourceEndpointId = defaults.sourceEndpointId;
    	      this.sourceServiceName = defaults.sourceServiceName;
        }

        @CustomType.Setter
        public Builder clickhouseKafkaUserConfigs(List<GetServiceIntegrationClickhouseKafkaUserConfig> clickhouseKafkaUserConfigs) {
            this.clickhouseKafkaUserConfigs = Objects.requireNonNull(clickhouseKafkaUserConfigs);
            return this;
        }
        public Builder clickhouseKafkaUserConfigs(GetServiceIntegrationClickhouseKafkaUserConfig... clickhouseKafkaUserConfigs) {
            return clickhouseKafkaUserConfigs(List.of(clickhouseKafkaUserConfigs));
        }
        @CustomType.Setter
        public Builder clickhousePostgresqlUserConfigs(List<GetServiceIntegrationClickhousePostgresqlUserConfig> clickhousePostgresqlUserConfigs) {
            this.clickhousePostgresqlUserConfigs = Objects.requireNonNull(clickhousePostgresqlUserConfigs);
            return this;
        }
        public Builder clickhousePostgresqlUserConfigs(GetServiceIntegrationClickhousePostgresqlUserConfig... clickhousePostgresqlUserConfigs) {
            return clickhousePostgresqlUserConfigs(List.of(clickhousePostgresqlUserConfigs));
        }
        @CustomType.Setter
        public Builder datadogUserConfigs(List<GetServiceIntegrationDatadogUserConfig> datadogUserConfigs) {
            this.datadogUserConfigs = Objects.requireNonNull(datadogUserConfigs);
            return this;
        }
        public Builder datadogUserConfigs(GetServiceIntegrationDatadogUserConfig... datadogUserConfigs) {
            return datadogUserConfigs(List.of(datadogUserConfigs));
        }
        @CustomType.Setter
        public Builder destinationEndpointId(String destinationEndpointId) {
            this.destinationEndpointId = Objects.requireNonNull(destinationEndpointId);
            return this;
        }
        @CustomType.Setter
        public Builder destinationServiceName(String destinationServiceName) {
            this.destinationServiceName = Objects.requireNonNull(destinationServiceName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder integrationId(String integrationId) {
            this.integrationId = Objects.requireNonNull(integrationId);
            return this;
        }
        @CustomType.Setter
        public Builder integrationType(String integrationType) {
            this.integrationType = Objects.requireNonNull(integrationType);
            return this;
        }
        @CustomType.Setter
        public Builder kafkaConnectUserConfigs(List<GetServiceIntegrationKafkaConnectUserConfig> kafkaConnectUserConfigs) {
            this.kafkaConnectUserConfigs = Objects.requireNonNull(kafkaConnectUserConfigs);
            return this;
        }
        public Builder kafkaConnectUserConfigs(GetServiceIntegrationKafkaConnectUserConfig... kafkaConnectUserConfigs) {
            return kafkaConnectUserConfigs(List.of(kafkaConnectUserConfigs));
        }
        @CustomType.Setter
        public Builder kafkaLogsUserConfigs(List<GetServiceIntegrationKafkaLogsUserConfig> kafkaLogsUserConfigs) {
            this.kafkaLogsUserConfigs = Objects.requireNonNull(kafkaLogsUserConfigs);
            return this;
        }
        public Builder kafkaLogsUserConfigs(GetServiceIntegrationKafkaLogsUserConfig... kafkaLogsUserConfigs) {
            return kafkaLogsUserConfigs(List.of(kafkaLogsUserConfigs));
        }
        @CustomType.Setter
        public Builder kafkaMirrormakerUserConfigs(List<GetServiceIntegrationKafkaMirrormakerUserConfig> kafkaMirrormakerUserConfigs) {
            this.kafkaMirrormakerUserConfigs = Objects.requireNonNull(kafkaMirrormakerUserConfigs);
            return this;
        }
        public Builder kafkaMirrormakerUserConfigs(GetServiceIntegrationKafkaMirrormakerUserConfig... kafkaMirrormakerUserConfigs) {
            return kafkaMirrormakerUserConfigs(List.of(kafkaMirrormakerUserConfigs));
        }
        @CustomType.Setter
        public Builder logsUserConfigs(List<GetServiceIntegrationLogsUserConfig> logsUserConfigs) {
            this.logsUserConfigs = Objects.requireNonNull(logsUserConfigs);
            return this;
        }
        public Builder logsUserConfigs(GetServiceIntegrationLogsUserConfig... logsUserConfigs) {
            return logsUserConfigs(List.of(logsUserConfigs));
        }
        @CustomType.Setter
        public Builder metricsUserConfigs(List<GetServiceIntegrationMetricsUserConfig> metricsUserConfigs) {
            this.metricsUserConfigs = Objects.requireNonNull(metricsUserConfigs);
            return this;
        }
        public Builder metricsUserConfigs(GetServiceIntegrationMetricsUserConfig... metricsUserConfigs) {
            return metricsUserConfigs(List.of(metricsUserConfigs));
        }
        @CustomType.Setter
        public Builder mirrormakerUserConfigs(List<GetServiceIntegrationMirrormakerUserConfig> mirrormakerUserConfigs) {
            this.mirrormakerUserConfigs = Objects.requireNonNull(mirrormakerUserConfigs);
            return this;
        }
        public Builder mirrormakerUserConfigs(GetServiceIntegrationMirrormakerUserConfig... mirrormakerUserConfigs) {
            return mirrormakerUserConfigs(List.of(mirrormakerUserConfigs));
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder sourceEndpointId(String sourceEndpointId) {
            this.sourceEndpointId = Objects.requireNonNull(sourceEndpointId);
            return this;
        }
        @CustomType.Setter
        public Builder sourceServiceName(String sourceServiceName) {
            this.sourceServiceName = Objects.requireNonNull(sourceServiceName);
            return this;
        }
        public GetServiceIntegrationResult build() {
            final var o = new GetServiceIntegrationResult();
            o.clickhouseKafkaUserConfigs = clickhouseKafkaUserConfigs;
            o.clickhousePostgresqlUserConfigs = clickhousePostgresqlUserConfigs;
            o.datadogUserConfigs = datadogUserConfigs;
            o.destinationEndpointId = destinationEndpointId;
            o.destinationServiceName = destinationServiceName;
            o.id = id;
            o.integrationId = integrationId;
            o.integrationType = integrationType;
            o.kafkaConnectUserConfigs = kafkaConnectUserConfigs;
            o.kafkaLogsUserConfigs = kafkaLogsUserConfigs;
            o.kafkaMirrormakerUserConfigs = kafkaMirrormakerUserConfigs;
            o.logsUserConfigs = logsUserConfigs;
            o.metricsUserConfigs = metricsUserConfigs;
            o.mirrormakerUserConfigs = mirrormakerUserConfigs;
            o.project = project;
            o.sourceEndpointId = sourceEndpointId;
            o.sourceServiceName = sourceServiceName;
            return o;
        }
    }
}
