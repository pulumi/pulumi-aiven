// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetOrganizationBillingGroupListBillingGroup extends com.pulumi.resources.InvokeArgs {

    public static final GetOrganizationBillingGroupListBillingGroup Empty = new GetOrganizationBillingGroupListBillingGroup();

    /**
     * Billing address ID.
     * 
     */
    @Import(name="billingAddressId", required=true)
    private String billingAddressId;

    /**
     * @return Billing address ID.
     * 
     */
    public String billingAddressId() {
        return this.billingAddressId;
    }

    /**
     * List of billing contact emails.
     * 
     */
    @Import(name="billingContactEmails", required=true)
    private List<String> billingContactEmails;

    /**
     * @return List of billing contact emails.
     * 
     */
    public List<String> billingContactEmails() {
        return this.billingContactEmails;
    }

    /**
     * List of billing contact emails.
     * 
     */
    @Import(name="billingEmails", required=true)
    private List<String> billingEmails;

    /**
     * @return List of billing contact emails.
     * 
     */
    public List<String> billingEmails() {
        return this.billingEmails;
    }

    /**
     * Billing group ID.
     * 
     */
    @Import(name="billingGroupId", required=true)
    private String billingGroupId;

    /**
     * @return Billing group ID.
     * 
     */
    public String billingGroupId() {
        return this.billingGroupId;
    }

    /**
     * Billing Group Name.
     * 
     */
    @Import(name="billingGroupName", required=true)
    private String billingGroupName;

    /**
     * @return Billing Group Name.
     * 
     */
    public String billingGroupName() {
        return this.billingGroupName;
    }

    /**
     * Acceptable currencies for a billing group. The possible values are `AUD`, `CAD`, `CHF`, `DKK`, `EUR`, `GBP`, `JPY`, `NOK`, `NZD`, `SEK`, `SGD` and `USD`.
     * 
     */
    @Import(name="currency", required=true)
    private String currency;

    /**
     * @return Acceptable currencies for a billing group. The possible values are `AUD`, `CAD`, `CHF`, `DKK`, `EUR`, `GBP`, `JPY`, `NOK`, `NZD`, `SEK`, `SGD` and `USD`.
     * 
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Extra billing text.
     * 
     */
    @Import(name="customInvoiceText", required=true)
    private String customInvoiceText;

    /**
     * @return Extra billing text.
     * 
     */
    public String customInvoiceText() {
        return this.customInvoiceText;
    }

    /**
     * Organization ID.
     * 
     */
    @Import(name="organizationId", required=true)
    private String organizationId;

    /**
     * @return Organization ID.
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Payment method ID.
     * 
     */
    @Import(name="paymentMethodId", required=true)
    private String paymentMethodId;

    /**
     * @return Payment method ID.
     * 
     */
    public String paymentMethodId() {
        return this.paymentMethodId;
    }

    /**
     * Shipping address ID.
     * 
     */
    @Import(name="shippingAddressId", required=true)
    private String shippingAddressId;

    /**
     * @return Shipping address ID.
     * 
     */
    public String shippingAddressId() {
        return this.shippingAddressId;
    }

    /**
     * VAT ID.
     * 
     */
    @Import(name="vatId", required=true)
    private String vatId;

    /**
     * @return VAT ID.
     * 
     */
    public String vatId() {
        return this.vatId;
    }

    private GetOrganizationBillingGroupListBillingGroup() {}

    private GetOrganizationBillingGroupListBillingGroup(GetOrganizationBillingGroupListBillingGroup $) {
        this.billingAddressId = $.billingAddressId;
        this.billingContactEmails = $.billingContactEmails;
        this.billingEmails = $.billingEmails;
        this.billingGroupId = $.billingGroupId;
        this.billingGroupName = $.billingGroupName;
        this.currency = $.currency;
        this.customInvoiceText = $.customInvoiceText;
        this.organizationId = $.organizationId;
        this.paymentMethodId = $.paymentMethodId;
        this.shippingAddressId = $.shippingAddressId;
        this.vatId = $.vatId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrganizationBillingGroupListBillingGroup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrganizationBillingGroupListBillingGroup $;

        public Builder() {
            $ = new GetOrganizationBillingGroupListBillingGroup();
        }

        public Builder(GetOrganizationBillingGroupListBillingGroup defaults) {
            $ = new GetOrganizationBillingGroupListBillingGroup(Objects.requireNonNull(defaults));
        }

        /**
         * @param billingAddressId Billing address ID.
         * 
         * @return builder
         * 
         */
        public Builder billingAddressId(String billingAddressId) {
            $.billingAddressId = billingAddressId;
            return this;
        }

        /**
         * @param billingContactEmails List of billing contact emails.
         * 
         * @return builder
         * 
         */
        public Builder billingContactEmails(List<String> billingContactEmails) {
            $.billingContactEmails = billingContactEmails;
            return this;
        }

        /**
         * @param billingContactEmails List of billing contact emails.
         * 
         * @return builder
         * 
         */
        public Builder billingContactEmails(String... billingContactEmails) {
            return billingContactEmails(List.of(billingContactEmails));
        }

        /**
         * @param billingEmails List of billing contact emails.
         * 
         * @return builder
         * 
         */
        public Builder billingEmails(List<String> billingEmails) {
            $.billingEmails = billingEmails;
            return this;
        }

        /**
         * @param billingEmails List of billing contact emails.
         * 
         * @return builder
         * 
         */
        public Builder billingEmails(String... billingEmails) {
            return billingEmails(List.of(billingEmails));
        }

        /**
         * @param billingGroupId Billing group ID.
         * 
         * @return builder
         * 
         */
        public Builder billingGroupId(String billingGroupId) {
            $.billingGroupId = billingGroupId;
            return this;
        }

        /**
         * @param billingGroupName Billing Group Name.
         * 
         * @return builder
         * 
         */
        public Builder billingGroupName(String billingGroupName) {
            $.billingGroupName = billingGroupName;
            return this;
        }

        /**
         * @param currency Acceptable currencies for a billing group. The possible values are `AUD`, `CAD`, `CHF`, `DKK`, `EUR`, `GBP`, `JPY`, `NOK`, `NZD`, `SEK`, `SGD` and `USD`.
         * 
         * @return builder
         * 
         */
        public Builder currency(String currency) {
            $.currency = currency;
            return this;
        }

        /**
         * @param customInvoiceText Extra billing text.
         * 
         * @return builder
         * 
         */
        public Builder customInvoiceText(String customInvoiceText) {
            $.customInvoiceText = customInvoiceText;
            return this;
        }

        /**
         * @param organizationId Organization ID.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param paymentMethodId Payment method ID.
         * 
         * @return builder
         * 
         */
        public Builder paymentMethodId(String paymentMethodId) {
            $.paymentMethodId = paymentMethodId;
            return this;
        }

        /**
         * @param shippingAddressId Shipping address ID.
         * 
         * @return builder
         * 
         */
        public Builder shippingAddressId(String shippingAddressId) {
            $.shippingAddressId = shippingAddressId;
            return this;
        }

        /**
         * @param vatId VAT ID.
         * 
         * @return builder
         * 
         */
        public Builder vatId(String vatId) {
            $.vatId = vatId;
            return this;
        }

        public GetOrganizationBillingGroupListBillingGroup build() {
            if ($.billingAddressId == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "billingAddressId");
            }
            if ($.billingContactEmails == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "billingContactEmails");
            }
            if ($.billingEmails == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "billingEmails");
            }
            if ($.billingGroupId == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "billingGroupId");
            }
            if ($.billingGroupName == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "billingGroupName");
            }
            if ($.currency == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "currency");
            }
            if ($.customInvoiceText == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "customInvoiceText");
            }
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "organizationId");
            }
            if ($.paymentMethodId == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "paymentMethodId");
            }
            if ($.shippingAddressId == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "shippingAddressId");
            }
            if ($.vatId == null) {
                throw new MissingRequiredPropertyException("GetOrganizationBillingGroupListBillingGroup", "vatId");
            }
            return $;
        }
    }

}
