// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClickhouseClickhouseUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClickhouseClickhouseUserConfigArgs Empty = new ClickhouseClickhouseUserConfigArgs();

    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    private ClickhouseClickhouseUserConfigArgs() {}

    private ClickhouseClickhouseUserConfigArgs(ClickhouseClickhouseUserConfigArgs $) {
        this.ipFilters = $.ipFilters;
        this.projectToForkFrom = $.projectToForkFrom;
        this.serviceToForkFrom = $.serviceToForkFrom;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClickhouseClickhouseUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClickhouseClickhouseUserConfigArgs $;

        public Builder() {
            $ = new ClickhouseClickhouseUserConfigArgs();
        }

        public Builder(ClickhouseClickhouseUserConfigArgs defaults) {
            $ = new ClickhouseClickhouseUserConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        public ClickhouseClickhouseUserConfigArgs build() {
            return $;
        }
    }

}
