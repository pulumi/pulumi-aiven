// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.InfluxDbInfluxdbUserConfigInfluxdb;
import com.pulumi.aiven.outputs.InfluxDbInfluxdbUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.InfluxDbInfluxdbUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.InfluxDbInfluxdbUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InfluxDbInfluxdbUserConfig {
    private final @Nullable String customDomain;
    private final @Nullable InfluxDbInfluxdbUserConfigInfluxdb influxdb;
    private final @Nullable List<String> ipFilters;
    private final @Nullable InfluxDbInfluxdbUserConfigPrivateAccess privateAccess;
    private final @Nullable InfluxDbInfluxdbUserConfigPrivatelinkAccess privatelinkAccess;
    private final @Nullable String projectToForkFrom;
    private final @Nullable InfluxDbInfluxdbUserConfigPublicAccess publicAccess;
    private final @Nullable String recoveryBasebackupName;
    private final @Nullable String serviceToForkFrom;
    private final @Nullable String staticIps;

    @CustomType.Constructor
    private InfluxDbInfluxdbUserConfig(
        @CustomType.Parameter("customDomain") @Nullable String customDomain,
        @CustomType.Parameter("influxdb") @Nullable InfluxDbInfluxdbUserConfigInfluxdb influxdb,
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("privateAccess") @Nullable InfluxDbInfluxdbUserConfigPrivateAccess privateAccess,
        @CustomType.Parameter("privatelinkAccess") @Nullable InfluxDbInfluxdbUserConfigPrivatelinkAccess privatelinkAccess,
        @CustomType.Parameter("projectToForkFrom") @Nullable String projectToForkFrom,
        @CustomType.Parameter("publicAccess") @Nullable InfluxDbInfluxdbUserConfigPublicAccess publicAccess,
        @CustomType.Parameter("recoveryBasebackupName") @Nullable String recoveryBasebackupName,
        @CustomType.Parameter("serviceToForkFrom") @Nullable String serviceToForkFrom,
        @CustomType.Parameter("staticIps") @Nullable String staticIps) {
        this.customDomain = customDomain;
        this.influxdb = influxdb;
        this.ipFilters = ipFilters;
        this.privateAccess = privateAccess;
        this.privatelinkAccess = privatelinkAccess;
        this.projectToForkFrom = projectToForkFrom;
        this.publicAccess = publicAccess;
        this.recoveryBasebackupName = recoveryBasebackupName;
        this.serviceToForkFrom = serviceToForkFrom;
        this.staticIps = staticIps;
    }

    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    public Optional<InfluxDbInfluxdbUserConfigInfluxdb> influxdb() {
        return Optional.ofNullable(this.influxdb);
    }
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<InfluxDbInfluxdbUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<InfluxDbInfluxdbUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    public Optional<InfluxDbInfluxdbUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InfluxDbInfluxdbUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String customDomain;
        private @Nullable InfluxDbInfluxdbUserConfigInfluxdb influxdb;
        private @Nullable List<String> ipFilters;
        private @Nullable InfluxDbInfluxdbUserConfigPrivateAccess privateAccess;
        private @Nullable InfluxDbInfluxdbUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable InfluxDbInfluxdbUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable String serviceToForkFrom;
        private @Nullable String staticIps;

        public Builder() {
    	      // Empty
        }

        public Builder(InfluxDbInfluxdbUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customDomain = defaults.customDomain;
    	      this.influxdb = defaults.influxdb;
    	      this.ipFilters = defaults.ipFilters;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        public Builder customDomain(@Nullable String customDomain) {
            this.customDomain = customDomain;
            return this;
        }
        public Builder influxdb(@Nullable InfluxDbInfluxdbUserConfigInfluxdb influxdb) {
            this.influxdb = influxdb;
            return this;
        }
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder privateAccess(@Nullable InfluxDbInfluxdbUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        public Builder privatelinkAccess(@Nullable InfluxDbInfluxdbUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        public Builder publicAccess(@Nullable InfluxDbInfluxdbUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {
            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }        public InfluxDbInfluxdbUserConfig build() {
            return new InfluxDbInfluxdbUserConfig(customDomain, influxdb, ipFilters, privateAccess, privatelinkAccess, projectToForkFrom, publicAccess, recoveryBasebackupName, serviceToForkFrom, staticIps);
        }
    }
}
