// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetPgPgUserConfigMigration;
import com.pulumi.aiven.outputs.GetPgPgUserConfigPg;
import com.pulumi.aiven.outputs.GetPgPgUserConfigPgbouncer;
import com.pulumi.aiven.outputs.GetPgPgUserConfigPglookout;
import com.pulumi.aiven.outputs.GetPgPgUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GetPgPgUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.GetPgPgUserConfigPublicAccess;
import com.pulumi.aiven.outputs.GetPgPgUserConfigTimescaledb;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPgPgUserConfig {
    private @Nullable String adminPassword;
    private @Nullable String adminUsername;
    private @Nullable String backupHour;
    private @Nullable String backupMinute;
    private @Nullable String enableIpv6;
    private @Nullable List<String> ipFilters;
    private @Nullable GetPgPgUserConfigMigration migration;
    /**
     * @return PostgreSQL specific server provided values
     * 
     */
    private @Nullable GetPgPgUserConfigPg pg;
    private @Nullable String pgReadReplica;
    private @Nullable String pgServiceToForkFrom;
    private @Nullable String pgStatMonitorEnable;
    private @Nullable String pgVersion;
    private @Nullable GetPgPgUserConfigPgbouncer pgbouncer;
    private @Nullable GetPgPgUserConfigPglookout pglookout;
    private @Nullable GetPgPgUserConfigPrivateAccess privateAccess;
    private @Nullable GetPgPgUserConfigPrivatelinkAccess privatelinkAccess;
    private @Nullable String projectToForkFrom;
    private @Nullable GetPgPgUserConfigPublicAccess publicAccess;
    private @Nullable String recoveryTargetTime;
    private @Nullable String serviceToForkFrom;
    private @Nullable String sharedBuffersPercentage;
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    private @Nullable String staticIps;
    private @Nullable String synchronousReplication;
    private @Nullable GetPgPgUserConfigTimescaledb timescaledb;
    private @Nullable String variant;
    private @Nullable String workMem;

    private GetPgPgUserConfig() {}
    public Optional<String> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    public Optional<String> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }
    public Optional<String> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }
    public Optional<String> enableIpv6() {
        return Optional.ofNullable(this.enableIpv6);
    }
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<GetPgPgUserConfigMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    /**
     * @return PostgreSQL specific server provided values
     * 
     */
    public Optional<GetPgPgUserConfigPg> pg() {
        return Optional.ofNullable(this.pg);
    }
    public Optional<String> pgReadReplica() {
        return Optional.ofNullable(this.pgReadReplica);
    }
    public Optional<String> pgServiceToForkFrom() {
        return Optional.ofNullable(this.pgServiceToForkFrom);
    }
    public Optional<String> pgStatMonitorEnable() {
        return Optional.ofNullable(this.pgStatMonitorEnable);
    }
    public Optional<String> pgVersion() {
        return Optional.ofNullable(this.pgVersion);
    }
    public Optional<GetPgPgUserConfigPgbouncer> pgbouncer() {
        return Optional.ofNullable(this.pgbouncer);
    }
    public Optional<GetPgPgUserConfigPglookout> pglookout() {
        return Optional.ofNullable(this.pglookout);
    }
    public Optional<GetPgPgUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<GetPgPgUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    public Optional<GetPgPgUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Optional<String> recoveryTargetTime() {
        return Optional.ofNullable(this.recoveryTargetTime);
    }
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    public Optional<String> sharedBuffersPercentage() {
        return Optional.ofNullable(this.sharedBuffersPercentage);
    }
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }
    public Optional<String> synchronousReplication() {
        return Optional.ofNullable(this.synchronousReplication);
    }
    public Optional<GetPgPgUserConfigTimescaledb> timescaledb() {
        return Optional.ofNullable(this.timescaledb);
    }
    public Optional<String> variant() {
        return Optional.ofNullable(this.variant);
    }
    public Optional<String> workMem() {
        return Optional.ofNullable(this.workMem);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPgPgUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adminPassword;
        private @Nullable String adminUsername;
        private @Nullable String backupHour;
        private @Nullable String backupMinute;
        private @Nullable String enableIpv6;
        private @Nullable List<String> ipFilters;
        private @Nullable GetPgPgUserConfigMigration migration;
        private @Nullable GetPgPgUserConfigPg pg;
        private @Nullable String pgReadReplica;
        private @Nullable String pgServiceToForkFrom;
        private @Nullable String pgStatMonitorEnable;
        private @Nullable String pgVersion;
        private @Nullable GetPgPgUserConfigPgbouncer pgbouncer;
        private @Nullable GetPgPgUserConfigPglookout pglookout;
        private @Nullable GetPgPgUserConfigPrivateAccess privateAccess;
        private @Nullable GetPgPgUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable GetPgPgUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryTargetTime;
        private @Nullable String serviceToForkFrom;
        private @Nullable String sharedBuffersPercentage;
        private @Nullable String staticIps;
        private @Nullable String synchronousReplication;
        private @Nullable GetPgPgUserConfigTimescaledb timescaledb;
        private @Nullable String variant;
        private @Nullable String workMem;
        public Builder() {}
        public Builder(GetPgPgUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.backupHour = defaults.backupHour;
    	      this.backupMinute = defaults.backupMinute;
    	      this.enableIpv6 = defaults.enableIpv6;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.pg = defaults.pg;
    	      this.pgReadReplica = defaults.pgReadReplica;
    	      this.pgServiceToForkFrom = defaults.pgServiceToForkFrom;
    	      this.pgStatMonitorEnable = defaults.pgStatMonitorEnable;
    	      this.pgVersion = defaults.pgVersion;
    	      this.pgbouncer = defaults.pgbouncer;
    	      this.pglookout = defaults.pglookout;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryTargetTime = defaults.recoveryTargetTime;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.sharedBuffersPercentage = defaults.sharedBuffersPercentage;
    	      this.staticIps = defaults.staticIps;
    	      this.synchronousReplication = defaults.synchronousReplication;
    	      this.timescaledb = defaults.timescaledb;
    	      this.variant = defaults.variant;
    	      this.workMem = defaults.workMem;
        }

        @CustomType.Setter
        public Builder adminPassword(@Nullable String adminPassword) {
            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder adminUsername(@Nullable String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder backupHour(@Nullable String backupHour) {
            this.backupHour = backupHour;
            return this;
        }
        @CustomType.Setter
        public Builder backupMinute(@Nullable String backupMinute) {
            this.backupMinute = backupMinute;
            return this;
        }
        @CustomType.Setter
        public Builder enableIpv6(@Nullable String enableIpv6) {
            this.enableIpv6 = enableIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder migration(@Nullable GetPgPgUserConfigMigration migration) {
            this.migration = migration;
            return this;
        }
        @CustomType.Setter
        public Builder pg(@Nullable GetPgPgUserConfigPg pg) {
            this.pg = pg;
            return this;
        }
        @CustomType.Setter
        public Builder pgReadReplica(@Nullable String pgReadReplica) {
            this.pgReadReplica = pgReadReplica;
            return this;
        }
        @CustomType.Setter
        public Builder pgServiceToForkFrom(@Nullable String pgServiceToForkFrom) {
            this.pgServiceToForkFrom = pgServiceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder pgStatMonitorEnable(@Nullable String pgStatMonitorEnable) {
            this.pgStatMonitorEnable = pgStatMonitorEnable;
            return this;
        }
        @CustomType.Setter
        public Builder pgVersion(@Nullable String pgVersion) {
            this.pgVersion = pgVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pgbouncer(@Nullable GetPgPgUserConfigPgbouncer pgbouncer) {
            this.pgbouncer = pgbouncer;
            return this;
        }
        @CustomType.Setter
        public Builder pglookout(@Nullable GetPgPgUserConfigPglookout pglookout) {
            this.pglookout = pglookout;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable GetPgPgUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable GetPgPgUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable GetPgPgUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryTargetTime(@Nullable String recoveryTargetTime) {
            this.recoveryTargetTime = recoveryTargetTime;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder sharedBuffersPercentage(@Nullable String sharedBuffersPercentage) {
            this.sharedBuffersPercentage = sharedBuffersPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }
        @CustomType.Setter
        public Builder synchronousReplication(@Nullable String synchronousReplication) {
            this.synchronousReplication = synchronousReplication;
            return this;
        }
        @CustomType.Setter
        public Builder timescaledb(@Nullable GetPgPgUserConfigTimescaledb timescaledb) {
            this.timescaledb = timescaledb;
            return this;
        }
        @CustomType.Setter
        public Builder variant(@Nullable String variant) {
            this.variant = variant;
            return this;
        }
        @CustomType.Setter
        public Builder workMem(@Nullable String workMem) {
            this.workMem = workMem;
            return this;
        }
        public GetPgPgUserConfig build() {
            final var o = new GetPgPgUserConfig();
            o.adminPassword = adminPassword;
            o.adminUsername = adminUsername;
            o.backupHour = backupHour;
            o.backupMinute = backupMinute;
            o.enableIpv6 = enableIpv6;
            o.ipFilters = ipFilters;
            o.migration = migration;
            o.pg = pg;
            o.pgReadReplica = pgReadReplica;
            o.pgServiceToForkFrom = pgServiceToForkFrom;
            o.pgStatMonitorEnable = pgStatMonitorEnable;
            o.pgVersion = pgVersion;
            o.pgbouncer = pgbouncer;
            o.pglookout = pglookout;
            o.privateAccess = privateAccess;
            o.privatelinkAccess = privatelinkAccess;
            o.projectToForkFrom = projectToForkFrom;
            o.publicAccess = publicAccess;
            o.recoveryTargetTime = recoveryTargetTime;
            o.serviceToForkFrom = serviceToForkFrom;
            o.sharedBuffersPercentage = sharedBuffersPercentage;
            o.staticIps = staticIps;
            o.synchronousReplication = synchronousReplication;
            o.timescaledb = timescaledb;
            o.variant = variant;
            o.workMem = workMem;
            return o;
        }
    }
}
