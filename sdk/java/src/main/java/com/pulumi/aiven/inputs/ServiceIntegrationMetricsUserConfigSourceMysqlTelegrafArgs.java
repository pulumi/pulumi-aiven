// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs Empty = new ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs();

    /**
     * Gather metrics from PERFORMANCE*SCHEMA.EVENT*WAITS.
     * 
     */
    @Import(name="gatherEventWaits")
    private @Nullable Output<Boolean> gatherEventWaits;

    /**
     * @return Gather metrics from PERFORMANCE*SCHEMA.EVENT*WAITS.
     * 
     */
    public Optional<Output<Boolean>> gatherEventWaits() {
        return Optional.ofNullable(this.gatherEventWaits);
    }

    /**
     * Gather metrics from PERFORMANCE*SCHEMA.FILE*SUMMARY*BY*EVENT_NAME.
     * 
     */
    @Import(name="gatherFileEventsStats")
    private @Nullable Output<Boolean> gatherFileEventsStats;

    /**
     * @return Gather metrics from PERFORMANCE*SCHEMA.FILE*SUMMARY*BY*EVENT_NAME.
     * 
     */
    public Optional<Output<Boolean>> gatherFileEventsStats() {
        return Optional.ofNullable(this.gatherFileEventsStats);
    }

    /**
     * Gather metrics from PERFORMANCE*SCHEMA.TABLE*IO*WAITS*SUMMARY*BY*INDEX_USAGE.
     * 
     */
    @Import(name="gatherIndexIoWaits")
    private @Nullable Output<Boolean> gatherIndexIoWaits;

    /**
     * @return Gather metrics from PERFORMANCE*SCHEMA.TABLE*IO*WAITS*SUMMARY*BY*INDEX_USAGE.
     * 
     */
    public Optional<Output<Boolean>> gatherIndexIoWaits() {
        return Optional.ofNullable(this.gatherIndexIoWaits);
    }

    /**
     * Gather auto_increment columns and max values from information schema.
     * 
     */
    @Import(name="gatherInfoSchemaAutoInc")
    private @Nullable Output<Boolean> gatherInfoSchemaAutoInc;

    /**
     * @return Gather auto_increment columns and max values from information schema.
     * 
     */
    public Optional<Output<Boolean>> gatherInfoSchemaAutoInc() {
        return Optional.ofNullable(this.gatherInfoSchemaAutoInc);
    }

    /**
     * Gather metrics from INFORMATION*SCHEMA.INNODB*METRICS.
     * 
     */
    @Import(name="gatherInnodbMetrics")
    private @Nullable Output<Boolean> gatherInnodbMetrics;

    /**
     * @return Gather metrics from INFORMATION*SCHEMA.INNODB*METRICS.
     * 
     */
    public Optional<Output<Boolean>> gatherInnodbMetrics() {
        return Optional.ofNullable(this.gatherInnodbMetrics);
    }

    /**
     * Gather metrics from PERFORMANCE*SCHEMA.EVENTS*STATEMENTS*SUMMARY*BY_DIGEST.
     * 
     */
    @Import(name="gatherPerfEventsStatements")
    private @Nullable Output<Boolean> gatherPerfEventsStatements;

    /**
     * @return Gather metrics from PERFORMANCE*SCHEMA.EVENTS*STATEMENTS*SUMMARY*BY_DIGEST.
     * 
     */
    public Optional<Output<Boolean>> gatherPerfEventsStatements() {
        return Optional.ofNullable(this.gatherPerfEventsStatements);
    }

    /**
     * Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.
     * 
     */
    @Import(name="gatherProcessList")
    private @Nullable Output<Boolean> gatherProcessList;

    /**
     * @return Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.
     * 
     */
    public Optional<Output<Boolean>> gatherProcessList() {
        return Optional.ofNullable(this.gatherProcessList);
    }

    /**
     * Gather metrics from SHOW SLAVE STATUS command output.
     * 
     */
    @Import(name="gatherSlaveStatus")
    private @Nullable Output<Boolean> gatherSlaveStatus;

    /**
     * @return Gather metrics from SHOW SLAVE STATUS command output.
     * 
     */
    public Optional<Output<Boolean>> gatherSlaveStatus() {
        return Optional.ofNullable(this.gatherSlaveStatus);
    }

    /**
     * Gather metrics from PERFORMANCE*SCHEMA.TABLE*IO*WAITS*SUMMARY*BY*TABLE.
     * 
     */
    @Import(name="gatherTableIoWaits")
    private @Nullable Output<Boolean> gatherTableIoWaits;

    /**
     * @return Gather metrics from PERFORMANCE*SCHEMA.TABLE*IO*WAITS*SUMMARY*BY*TABLE.
     * 
     */
    public Optional<Output<Boolean>> gatherTableIoWaits() {
        return Optional.ofNullable(this.gatherTableIoWaits);
    }

    /**
     * Gather metrics from PERFORMANCE*SCHEMA.TABLE*LOCK_WAITS.
     * 
     */
    @Import(name="gatherTableLockWaits")
    private @Nullable Output<Boolean> gatherTableLockWaits;

    /**
     * @return Gather metrics from PERFORMANCE*SCHEMA.TABLE*LOCK_WAITS.
     * 
     */
    public Optional<Output<Boolean>> gatherTableLockWaits() {
        return Optional.ofNullable(this.gatherTableLockWaits);
    }

    /**
     * Gather metrics from INFORMATION_SCHEMA.TABLES.
     * 
     */
    @Import(name="gatherTableSchema")
    private @Nullable Output<Boolean> gatherTableSchema;

    /**
     * @return Gather metrics from INFORMATION_SCHEMA.TABLES.
     * 
     */
    public Optional<Output<Boolean>> gatherTableSchema() {
        return Optional.ofNullable(this.gatherTableSchema);
    }

    /**
     * Truncates digest text from perf*events*statements into this many characters. Example: `120`.
     * 
     */
    @Import(name="perfEventsStatementsDigestTextLimit")
    private @Nullable Output<Integer> perfEventsStatementsDigestTextLimit;

    /**
     * @return Truncates digest text from perf*events*statements into this many characters. Example: `120`.
     * 
     */
    public Optional<Output<Integer>> perfEventsStatementsDigestTextLimit() {
        return Optional.ofNullable(this.perfEventsStatementsDigestTextLimit);
    }

    /**
     * Limits metrics from perf*events*statements. Example: `250`.
     * 
     */
    @Import(name="perfEventsStatementsLimit")
    private @Nullable Output<Integer> perfEventsStatementsLimit;

    /**
     * @return Limits metrics from perf*events*statements. Example: `250`.
     * 
     */
    public Optional<Output<Integer>> perfEventsStatementsLimit() {
        return Optional.ofNullable(this.perfEventsStatementsLimit);
    }

    /**
     * Only include perf*events*statements whose last seen is less than this many seconds. Example: `86400`.
     * 
     */
    @Import(name="perfEventsStatementsTimeLimit")
    private @Nullable Output<Integer> perfEventsStatementsTimeLimit;

    /**
     * @return Only include perf*events*statements whose last seen is less than this many seconds. Example: `86400`.
     * 
     */
    public Optional<Output<Integer>> perfEventsStatementsTimeLimit() {
        return Optional.ofNullable(this.perfEventsStatementsTimeLimit);
    }

    private ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs() {}

    private ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs(ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs $) {
        this.gatherEventWaits = $.gatherEventWaits;
        this.gatherFileEventsStats = $.gatherFileEventsStats;
        this.gatherIndexIoWaits = $.gatherIndexIoWaits;
        this.gatherInfoSchemaAutoInc = $.gatherInfoSchemaAutoInc;
        this.gatherInnodbMetrics = $.gatherInnodbMetrics;
        this.gatherPerfEventsStatements = $.gatherPerfEventsStatements;
        this.gatherProcessList = $.gatherProcessList;
        this.gatherSlaveStatus = $.gatherSlaveStatus;
        this.gatherTableIoWaits = $.gatherTableIoWaits;
        this.gatherTableLockWaits = $.gatherTableLockWaits;
        this.gatherTableSchema = $.gatherTableSchema;
        this.perfEventsStatementsDigestTextLimit = $.perfEventsStatementsDigestTextLimit;
        this.perfEventsStatementsLimit = $.perfEventsStatementsLimit;
        this.perfEventsStatementsTimeLimit = $.perfEventsStatementsTimeLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs $;

        public Builder() {
            $ = new ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs();
        }

        public Builder(ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs defaults) {
            $ = new ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gatherEventWaits Gather metrics from PERFORMANCE*SCHEMA.EVENT*WAITS.
         * 
         * @return builder
         * 
         */
        public Builder gatherEventWaits(@Nullable Output<Boolean> gatherEventWaits) {
            $.gatherEventWaits = gatherEventWaits;
            return this;
        }

        /**
         * @param gatherEventWaits Gather metrics from PERFORMANCE*SCHEMA.EVENT*WAITS.
         * 
         * @return builder
         * 
         */
        public Builder gatherEventWaits(Boolean gatherEventWaits) {
            return gatherEventWaits(Output.of(gatherEventWaits));
        }

        /**
         * @param gatherFileEventsStats Gather metrics from PERFORMANCE*SCHEMA.FILE*SUMMARY*BY*EVENT_NAME.
         * 
         * @return builder
         * 
         */
        public Builder gatherFileEventsStats(@Nullable Output<Boolean> gatherFileEventsStats) {
            $.gatherFileEventsStats = gatherFileEventsStats;
            return this;
        }

        /**
         * @param gatherFileEventsStats Gather metrics from PERFORMANCE*SCHEMA.FILE*SUMMARY*BY*EVENT_NAME.
         * 
         * @return builder
         * 
         */
        public Builder gatherFileEventsStats(Boolean gatherFileEventsStats) {
            return gatherFileEventsStats(Output.of(gatherFileEventsStats));
        }

        /**
         * @param gatherIndexIoWaits Gather metrics from PERFORMANCE*SCHEMA.TABLE*IO*WAITS*SUMMARY*BY*INDEX_USAGE.
         * 
         * @return builder
         * 
         */
        public Builder gatherIndexIoWaits(@Nullable Output<Boolean> gatherIndexIoWaits) {
            $.gatherIndexIoWaits = gatherIndexIoWaits;
            return this;
        }

        /**
         * @param gatherIndexIoWaits Gather metrics from PERFORMANCE*SCHEMA.TABLE*IO*WAITS*SUMMARY*BY*INDEX_USAGE.
         * 
         * @return builder
         * 
         */
        public Builder gatherIndexIoWaits(Boolean gatherIndexIoWaits) {
            return gatherIndexIoWaits(Output.of(gatherIndexIoWaits));
        }

        /**
         * @param gatherInfoSchemaAutoInc Gather auto_increment columns and max values from information schema.
         * 
         * @return builder
         * 
         */
        public Builder gatherInfoSchemaAutoInc(@Nullable Output<Boolean> gatherInfoSchemaAutoInc) {
            $.gatherInfoSchemaAutoInc = gatherInfoSchemaAutoInc;
            return this;
        }

        /**
         * @param gatherInfoSchemaAutoInc Gather auto_increment columns and max values from information schema.
         * 
         * @return builder
         * 
         */
        public Builder gatherInfoSchemaAutoInc(Boolean gatherInfoSchemaAutoInc) {
            return gatherInfoSchemaAutoInc(Output.of(gatherInfoSchemaAutoInc));
        }

        /**
         * @param gatherInnodbMetrics Gather metrics from INFORMATION*SCHEMA.INNODB*METRICS.
         * 
         * @return builder
         * 
         */
        public Builder gatherInnodbMetrics(@Nullable Output<Boolean> gatherInnodbMetrics) {
            $.gatherInnodbMetrics = gatherInnodbMetrics;
            return this;
        }

        /**
         * @param gatherInnodbMetrics Gather metrics from INFORMATION*SCHEMA.INNODB*METRICS.
         * 
         * @return builder
         * 
         */
        public Builder gatherInnodbMetrics(Boolean gatherInnodbMetrics) {
            return gatherInnodbMetrics(Output.of(gatherInnodbMetrics));
        }

        /**
         * @param gatherPerfEventsStatements Gather metrics from PERFORMANCE*SCHEMA.EVENTS*STATEMENTS*SUMMARY*BY_DIGEST.
         * 
         * @return builder
         * 
         */
        public Builder gatherPerfEventsStatements(@Nullable Output<Boolean> gatherPerfEventsStatements) {
            $.gatherPerfEventsStatements = gatherPerfEventsStatements;
            return this;
        }

        /**
         * @param gatherPerfEventsStatements Gather metrics from PERFORMANCE*SCHEMA.EVENTS*STATEMENTS*SUMMARY*BY_DIGEST.
         * 
         * @return builder
         * 
         */
        public Builder gatherPerfEventsStatements(Boolean gatherPerfEventsStatements) {
            return gatherPerfEventsStatements(Output.of(gatherPerfEventsStatements));
        }

        /**
         * @param gatherProcessList Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.
         * 
         * @return builder
         * 
         */
        public Builder gatherProcessList(@Nullable Output<Boolean> gatherProcessList) {
            $.gatherProcessList = gatherProcessList;
            return this;
        }

        /**
         * @param gatherProcessList Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.
         * 
         * @return builder
         * 
         */
        public Builder gatherProcessList(Boolean gatherProcessList) {
            return gatherProcessList(Output.of(gatherProcessList));
        }

        /**
         * @param gatherSlaveStatus Gather metrics from SHOW SLAVE STATUS command output.
         * 
         * @return builder
         * 
         */
        public Builder gatherSlaveStatus(@Nullable Output<Boolean> gatherSlaveStatus) {
            $.gatherSlaveStatus = gatherSlaveStatus;
            return this;
        }

        /**
         * @param gatherSlaveStatus Gather metrics from SHOW SLAVE STATUS command output.
         * 
         * @return builder
         * 
         */
        public Builder gatherSlaveStatus(Boolean gatherSlaveStatus) {
            return gatherSlaveStatus(Output.of(gatherSlaveStatus));
        }

        /**
         * @param gatherTableIoWaits Gather metrics from PERFORMANCE*SCHEMA.TABLE*IO*WAITS*SUMMARY*BY*TABLE.
         * 
         * @return builder
         * 
         */
        public Builder gatherTableIoWaits(@Nullable Output<Boolean> gatherTableIoWaits) {
            $.gatherTableIoWaits = gatherTableIoWaits;
            return this;
        }

        /**
         * @param gatherTableIoWaits Gather metrics from PERFORMANCE*SCHEMA.TABLE*IO*WAITS*SUMMARY*BY*TABLE.
         * 
         * @return builder
         * 
         */
        public Builder gatherTableIoWaits(Boolean gatherTableIoWaits) {
            return gatherTableIoWaits(Output.of(gatherTableIoWaits));
        }

        /**
         * @param gatherTableLockWaits Gather metrics from PERFORMANCE*SCHEMA.TABLE*LOCK_WAITS.
         * 
         * @return builder
         * 
         */
        public Builder gatherTableLockWaits(@Nullable Output<Boolean> gatherTableLockWaits) {
            $.gatherTableLockWaits = gatherTableLockWaits;
            return this;
        }

        /**
         * @param gatherTableLockWaits Gather metrics from PERFORMANCE*SCHEMA.TABLE*LOCK_WAITS.
         * 
         * @return builder
         * 
         */
        public Builder gatherTableLockWaits(Boolean gatherTableLockWaits) {
            return gatherTableLockWaits(Output.of(gatherTableLockWaits));
        }

        /**
         * @param gatherTableSchema Gather metrics from INFORMATION_SCHEMA.TABLES.
         * 
         * @return builder
         * 
         */
        public Builder gatherTableSchema(@Nullable Output<Boolean> gatherTableSchema) {
            $.gatherTableSchema = gatherTableSchema;
            return this;
        }

        /**
         * @param gatherTableSchema Gather metrics from INFORMATION_SCHEMA.TABLES.
         * 
         * @return builder
         * 
         */
        public Builder gatherTableSchema(Boolean gatherTableSchema) {
            return gatherTableSchema(Output.of(gatherTableSchema));
        }

        /**
         * @param perfEventsStatementsDigestTextLimit Truncates digest text from perf*events*statements into this many characters. Example: `120`.
         * 
         * @return builder
         * 
         */
        public Builder perfEventsStatementsDigestTextLimit(@Nullable Output<Integer> perfEventsStatementsDigestTextLimit) {
            $.perfEventsStatementsDigestTextLimit = perfEventsStatementsDigestTextLimit;
            return this;
        }

        /**
         * @param perfEventsStatementsDigestTextLimit Truncates digest text from perf*events*statements into this many characters. Example: `120`.
         * 
         * @return builder
         * 
         */
        public Builder perfEventsStatementsDigestTextLimit(Integer perfEventsStatementsDigestTextLimit) {
            return perfEventsStatementsDigestTextLimit(Output.of(perfEventsStatementsDigestTextLimit));
        }

        /**
         * @param perfEventsStatementsLimit Limits metrics from perf*events*statements. Example: `250`.
         * 
         * @return builder
         * 
         */
        public Builder perfEventsStatementsLimit(@Nullable Output<Integer> perfEventsStatementsLimit) {
            $.perfEventsStatementsLimit = perfEventsStatementsLimit;
            return this;
        }

        /**
         * @param perfEventsStatementsLimit Limits metrics from perf*events*statements. Example: `250`.
         * 
         * @return builder
         * 
         */
        public Builder perfEventsStatementsLimit(Integer perfEventsStatementsLimit) {
            return perfEventsStatementsLimit(Output.of(perfEventsStatementsLimit));
        }

        /**
         * @param perfEventsStatementsTimeLimit Only include perf*events*statements whose last seen is less than this many seconds. Example: `86400`.
         * 
         * @return builder
         * 
         */
        public Builder perfEventsStatementsTimeLimit(@Nullable Output<Integer> perfEventsStatementsTimeLimit) {
            $.perfEventsStatementsTimeLimit = perfEventsStatementsTimeLimit;
            return this;
        }

        /**
         * @param perfEventsStatementsTimeLimit Only include perf*events*statements whose last seen is less than this many seconds. Example: `86400`.
         * 
         * @return builder
         * 
         */
        public Builder perfEventsStatementsTimeLimit(Integer perfEventsStatementsTimeLimit) {
            return perfEventsStatementsTimeLimit(Output.of(perfEventsStatementsTimeLimit));
        }

        public ServiceIntegrationMetricsUserConfigSourceMysqlTelegrafArgs build() {
            return $;
        }
    }

}
