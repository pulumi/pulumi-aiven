// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KafkaKafkaUserConfigKafkaConnectConfig {
    private @Nullable String connectorClientConfigOverridePolicy;
    private @Nullable String consumerAutoOffsetReset;
    private @Nullable String consumerFetchMaxBytes;
    private @Nullable String consumerIsolationLevel;
    private @Nullable String consumerMaxPartitionFetchBytes;
    private @Nullable String consumerMaxPollIntervalMs;
    private @Nullable String consumerMaxPollRecords;
    private @Nullable String offsetFlushIntervalMs;
    private @Nullable String offsetFlushTimeoutMs;
    private @Nullable String producerCompressionType;
    private @Nullable String producerMaxRequestSize;
    private @Nullable String sessionTimeoutMs;

    private KafkaKafkaUserConfigKafkaConnectConfig() {}
    public Optional<String> connectorClientConfigOverridePolicy() {
        return Optional.ofNullable(this.connectorClientConfigOverridePolicy);
    }
    public Optional<String> consumerAutoOffsetReset() {
        return Optional.ofNullable(this.consumerAutoOffsetReset);
    }
    public Optional<String> consumerFetchMaxBytes() {
        return Optional.ofNullable(this.consumerFetchMaxBytes);
    }
    public Optional<String> consumerIsolationLevel() {
        return Optional.ofNullable(this.consumerIsolationLevel);
    }
    public Optional<String> consumerMaxPartitionFetchBytes() {
        return Optional.ofNullable(this.consumerMaxPartitionFetchBytes);
    }
    public Optional<String> consumerMaxPollIntervalMs() {
        return Optional.ofNullable(this.consumerMaxPollIntervalMs);
    }
    public Optional<String> consumerMaxPollRecords() {
        return Optional.ofNullable(this.consumerMaxPollRecords);
    }
    public Optional<String> offsetFlushIntervalMs() {
        return Optional.ofNullable(this.offsetFlushIntervalMs);
    }
    public Optional<String> offsetFlushTimeoutMs() {
        return Optional.ofNullable(this.offsetFlushTimeoutMs);
    }
    public Optional<String> producerCompressionType() {
        return Optional.ofNullable(this.producerCompressionType);
    }
    public Optional<String> producerMaxRequestSize() {
        return Optional.ofNullable(this.producerMaxRequestSize);
    }
    public Optional<String> sessionTimeoutMs() {
        return Optional.ofNullable(this.sessionTimeoutMs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KafkaKafkaUserConfigKafkaConnectConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectorClientConfigOverridePolicy;
        private @Nullable String consumerAutoOffsetReset;
        private @Nullable String consumerFetchMaxBytes;
        private @Nullable String consumerIsolationLevel;
        private @Nullable String consumerMaxPartitionFetchBytes;
        private @Nullable String consumerMaxPollIntervalMs;
        private @Nullable String consumerMaxPollRecords;
        private @Nullable String offsetFlushIntervalMs;
        private @Nullable String offsetFlushTimeoutMs;
        private @Nullable String producerCompressionType;
        private @Nullable String producerMaxRequestSize;
        private @Nullable String sessionTimeoutMs;
        public Builder() {}
        public Builder(KafkaKafkaUserConfigKafkaConnectConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorClientConfigOverridePolicy = defaults.connectorClientConfigOverridePolicy;
    	      this.consumerAutoOffsetReset = defaults.consumerAutoOffsetReset;
    	      this.consumerFetchMaxBytes = defaults.consumerFetchMaxBytes;
    	      this.consumerIsolationLevel = defaults.consumerIsolationLevel;
    	      this.consumerMaxPartitionFetchBytes = defaults.consumerMaxPartitionFetchBytes;
    	      this.consumerMaxPollIntervalMs = defaults.consumerMaxPollIntervalMs;
    	      this.consumerMaxPollRecords = defaults.consumerMaxPollRecords;
    	      this.offsetFlushIntervalMs = defaults.offsetFlushIntervalMs;
    	      this.offsetFlushTimeoutMs = defaults.offsetFlushTimeoutMs;
    	      this.producerCompressionType = defaults.producerCompressionType;
    	      this.producerMaxRequestSize = defaults.producerMaxRequestSize;
    	      this.sessionTimeoutMs = defaults.sessionTimeoutMs;
        }

        @CustomType.Setter
        public Builder connectorClientConfigOverridePolicy(@Nullable String connectorClientConfigOverridePolicy) {
            this.connectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder consumerAutoOffsetReset(@Nullable String consumerAutoOffsetReset) {
            this.consumerAutoOffsetReset = consumerAutoOffsetReset;
            return this;
        }
        @CustomType.Setter
        public Builder consumerFetchMaxBytes(@Nullable String consumerFetchMaxBytes) {
            this.consumerFetchMaxBytes = consumerFetchMaxBytes;
            return this;
        }
        @CustomType.Setter
        public Builder consumerIsolationLevel(@Nullable String consumerIsolationLevel) {
            this.consumerIsolationLevel = consumerIsolationLevel;
            return this;
        }
        @CustomType.Setter
        public Builder consumerMaxPartitionFetchBytes(@Nullable String consumerMaxPartitionFetchBytes) {
            this.consumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
            return this;
        }
        @CustomType.Setter
        public Builder consumerMaxPollIntervalMs(@Nullable String consumerMaxPollIntervalMs) {
            this.consumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
            return this;
        }
        @CustomType.Setter
        public Builder consumerMaxPollRecords(@Nullable String consumerMaxPollRecords) {
            this.consumerMaxPollRecords = consumerMaxPollRecords;
            return this;
        }
        @CustomType.Setter
        public Builder offsetFlushIntervalMs(@Nullable String offsetFlushIntervalMs) {
            this.offsetFlushIntervalMs = offsetFlushIntervalMs;
            return this;
        }
        @CustomType.Setter
        public Builder offsetFlushTimeoutMs(@Nullable String offsetFlushTimeoutMs) {
            this.offsetFlushTimeoutMs = offsetFlushTimeoutMs;
            return this;
        }
        @CustomType.Setter
        public Builder producerCompressionType(@Nullable String producerCompressionType) {
            this.producerCompressionType = producerCompressionType;
            return this;
        }
        @CustomType.Setter
        public Builder producerMaxRequestSize(@Nullable String producerMaxRequestSize) {
            this.producerMaxRequestSize = producerMaxRequestSize;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTimeoutMs(@Nullable String sessionTimeoutMs) {
            this.sessionTimeoutMs = sessionTimeoutMs;
            return this;
        }
        public KafkaKafkaUserConfigKafkaConnectConfig build() {
            final var o = new KafkaKafkaUserConfigKafkaConnectConfig();
            o.connectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
            o.consumerAutoOffsetReset = consumerAutoOffsetReset;
            o.consumerFetchMaxBytes = consumerFetchMaxBytes;
            o.consumerIsolationLevel = consumerIsolationLevel;
            o.consumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
            o.consumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
            o.consumerMaxPollRecords = consumerMaxPollRecords;
            o.offsetFlushIntervalMs = offsetFlushIntervalMs;
            o.offsetFlushTimeoutMs = offsetFlushTimeoutMs;
            o.producerCompressionType = producerCompressionType;
            o.producerMaxRequestSize = producerMaxRequestSize;
            o.sessionTimeoutMs = sessionTimeoutMs;
            return o;
        }
    }
}
