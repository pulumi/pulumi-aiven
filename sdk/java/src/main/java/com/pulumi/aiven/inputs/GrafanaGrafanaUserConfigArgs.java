// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigAuthAzureadArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigAuthGenericOauthArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigAuthGithubArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigAuthGitlabArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigAuthGoogleArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigDateFormatsArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigExternalImageStorageArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigPublicAccessArgs;
import com.pulumi.aiven.inputs.GrafanaGrafanaUserConfigSmtpServerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GrafanaGrafanaUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrafanaGrafanaUserConfigArgs Empty = new GrafanaGrafanaUserConfigArgs();

    /**
     * Additional Cloud Regions for Backup Replication.
     * 
     */
    @Import(name="additionalBackupRegions")
    private @Nullable Output<String> additionalBackupRegions;

    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<Output<String>> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }

    /**
     * Enable or disable Grafana legacy alerting functionality. This should not be enabled with unified*alerting*enabled.
     * 
     */
    @Import(name="alertingEnabled")
    private @Nullable Output<Boolean> alertingEnabled;

    /**
     * @return Enable or disable Grafana legacy alerting functionality. This should not be enabled with unified*alerting*enabled.
     * 
     */
    public Optional<Output<Boolean>> alertingEnabled() {
        return Optional.ofNullable(this.alertingEnabled);
    }

    /**
     * Enum: `alerting`, `keep_state`. Default error or timeout setting for new alerting rules.
     * 
     */
    @Import(name="alertingErrorOrTimeout")
    private @Nullable Output<String> alertingErrorOrTimeout;

    /**
     * @return Enum: `alerting`, `keep_state`. Default error or timeout setting for new alerting rules.
     * 
     */
    public Optional<Output<String>> alertingErrorOrTimeout() {
        return Optional.ofNullable(this.alertingErrorOrTimeout);
    }

    /**
     * Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations. Example: `0`.
     * 
     */
    @Import(name="alertingMaxAnnotationsToKeep")
    private @Nullable Output<Integer> alertingMaxAnnotationsToKeep;

    /**
     * @return Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations. Example: `0`.
     * 
     */
    public Optional<Output<Integer>> alertingMaxAnnotationsToKeep() {
        return Optional.ofNullable(this.alertingMaxAnnotationsToKeep);
    }

    /**
     * Enum: `alerting`, `no_data`, `keep_state`, `ok`. Default value for &#39;no data or null values&#39; for new alerting rules.
     * 
     */
    @Import(name="alertingNodataOrNullvalues")
    private @Nullable Output<String> alertingNodataOrNullvalues;

    /**
     * @return Enum: `alerting`, `no_data`, `keep_state`, `ok`. Default value for &#39;no data or null values&#39; for new alerting rules.
     * 
     */
    public Optional<Output<String>> alertingNodataOrNullvalues() {
        return Optional.ofNullable(this.alertingNodataOrNullvalues);
    }

    /**
     * Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking.
     * 
     */
    @Import(name="allowEmbedding")
    private @Nullable Output<Boolean> allowEmbedding;

    /**
     * @return Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking.
     * 
     */
    public Optional<Output<Boolean>> allowEmbedding() {
        return Optional.ofNullable(this.allowEmbedding);
    }

    /**
     * Azure AD OAuth integration
     * 
     */
    @Import(name="authAzuread")
    private @Nullable Output<GrafanaGrafanaUserConfigAuthAzureadArgs> authAzuread;

    /**
     * @return Azure AD OAuth integration
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigAuthAzureadArgs>> authAzuread() {
        return Optional.ofNullable(this.authAzuread);
    }

    /**
     * Enable or disable basic authentication form, used by Grafana built-in login.
     * 
     */
    @Import(name="authBasicEnabled")
    private @Nullable Output<Boolean> authBasicEnabled;

    /**
     * @return Enable or disable basic authentication form, used by Grafana built-in login.
     * 
     */
    public Optional<Output<Boolean>> authBasicEnabled() {
        return Optional.ofNullable(this.authBasicEnabled);
    }

    /**
     * Generic OAuth integration
     * 
     */
    @Import(name="authGenericOauth")
    private @Nullable Output<GrafanaGrafanaUserConfigAuthGenericOauthArgs> authGenericOauth;

    /**
     * @return Generic OAuth integration
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigAuthGenericOauthArgs>> authGenericOauth() {
        return Optional.ofNullable(this.authGenericOauth);
    }

    /**
     * Github Auth integration
     * 
     */
    @Import(name="authGithub")
    private @Nullable Output<GrafanaGrafanaUserConfigAuthGithubArgs> authGithub;

    /**
     * @return Github Auth integration
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigAuthGithubArgs>> authGithub() {
        return Optional.ofNullable(this.authGithub);
    }

    /**
     * GitLab Auth integration
     * 
     */
    @Import(name="authGitlab")
    private @Nullable Output<GrafanaGrafanaUserConfigAuthGitlabArgs> authGitlab;

    /**
     * @return GitLab Auth integration
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigAuthGitlabArgs>> authGitlab() {
        return Optional.ofNullable(this.authGitlab);
    }

    /**
     * Google Auth integration
     * 
     */
    @Import(name="authGoogle")
    private @Nullable Output<GrafanaGrafanaUserConfigAuthGoogleArgs> authGoogle;

    /**
     * @return Google Auth integration
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigAuthGoogleArgs>> authGoogle() {
        return Optional.ofNullable(this.authGoogle);
    }

    /**
     * Enum: `lax`, `strict`, `none`. Cookie SameSite attribute: `strict` prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. `lax` is the default value.
     * 
     */
    @Import(name="cookieSamesite")
    private @Nullable Output<String> cookieSamesite;

    /**
     * @return Enum: `lax`, `strict`, `none`. Cookie SameSite attribute: `strict` prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. `lax` is the default value.
     * 
     */
    public Optional<Output<String>> cookieSamesite() {
        return Optional.ofNullable(this.cookieSamesite);
    }

    /**
     * Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
     * 
     */
    @Import(name="customDomain")
    private @Nullable Output<String> customDomain;

    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
     * 
     */
    public Optional<Output<String>> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }

    /**
     * This feature is new in Grafana 9 and is quite resource intensive. It may cause low-end plans to work more slowly while the dashboard previews are rendering.
     * 
     */
    @Import(name="dashboardPreviewsEnabled")
    private @Nullable Output<Boolean> dashboardPreviewsEnabled;

    /**
     * @return This feature is new in Grafana 9 and is quite resource intensive. It may cause low-end plans to work more slowly while the dashboard previews are rendering.
     * 
     */
    public Optional<Output<Boolean>> dashboardPreviewsEnabled() {
        return Optional.ofNullable(this.dashboardPreviewsEnabled);
    }

    /**
     * Signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h. Example: `5s`.
     * 
     */
    @Import(name="dashboardsMinRefreshInterval")
    private @Nullable Output<String> dashboardsMinRefreshInterval;

    /**
     * @return Signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h. Example: `5s`.
     * 
     */
    public Optional<Output<String>> dashboardsMinRefreshInterval() {
        return Optional.ofNullable(this.dashboardsMinRefreshInterval);
    }

    /**
     * Dashboard versions to keep per dashboard. Example: `20`.
     * 
     */
    @Import(name="dashboardsVersionsToKeep")
    private @Nullable Output<Integer> dashboardsVersionsToKeep;

    /**
     * @return Dashboard versions to keep per dashboard. Example: `20`.
     * 
     */
    public Optional<Output<Integer>> dashboardsVersionsToKeep() {
        return Optional.ofNullable(this.dashboardsVersionsToKeep);
    }

    /**
     * Send `X-Grafana-User` header to data source.
     * 
     */
    @Import(name="dataproxySendUserHeader")
    private @Nullable Output<Boolean> dataproxySendUserHeader;

    /**
     * @return Send `X-Grafana-User` header to data source.
     * 
     */
    public Optional<Output<Boolean>> dataproxySendUserHeader() {
        return Optional.ofNullable(this.dataproxySendUserHeader);
    }

    /**
     * Timeout for data proxy requests in seconds. Example: `30`.
     * 
     */
    @Import(name="dataproxyTimeout")
    private @Nullable Output<Integer> dataproxyTimeout;

    /**
     * @return Timeout for data proxy requests in seconds. Example: `30`.
     * 
     */
    public Optional<Output<Integer>> dataproxyTimeout() {
        return Optional.ofNullable(this.dataproxyTimeout);
    }

    /**
     * Grafana date format specifications
     * 
     */
    @Import(name="dateFormats")
    private @Nullable Output<GrafanaGrafanaUserConfigDateFormatsArgs> dateFormats;

    /**
     * @return Grafana date format specifications
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigDateFormatsArgs>> dateFormats() {
        return Optional.ofNullable(this.dateFormats);
    }

    /**
     * Set to true to disable gravatar. Defaults to false (gravatar is enabled).
     * 
     */
    @Import(name="disableGravatar")
    private @Nullable Output<Boolean> disableGravatar;

    /**
     * @return Set to true to disable gravatar. Defaults to false (gravatar is enabled).
     * 
     */
    public Optional<Output<Boolean>> disableGravatar() {
        return Optional.ofNullable(this.disableGravatar);
    }

    /**
     * Editors can manage folders, teams and dashboards created by them.
     * 
     */
    @Import(name="editorsCanAdmin")
    private @Nullable Output<Boolean> editorsCanAdmin;

    /**
     * @return Editors can manage folders, teams and dashboards created by them.
     * 
     */
    public Optional<Output<Boolean>> editorsCanAdmin() {
        return Optional.ofNullable(this.editorsCanAdmin);
    }

    /**
     * External image store settings
     * 
     */
    @Import(name="externalImageStorage")
    private @Nullable Output<GrafanaGrafanaUserConfigExternalImageStorageArgs> externalImageStorage;

    /**
     * @return External image store settings
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigExternalImageStorageArgs>> externalImageStorage() {
        return Optional.ofNullable(this.externalImageStorage);
    }

    /**
     * Google Analytics ID. Example: `UA-123456-4`.
     * 
     */
    @Import(name="googleAnalyticsUaId")
    private @Nullable Output<String> googleAnalyticsUaId;

    /**
     * @return Google Analytics ID. Example: `UA-123456-4`.
     * 
     */
    public Optional<Output<String>> googleAnalyticsUaId() {
        return Optional.ofNullable(this.googleAnalyticsUaId);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    @Import(name="ipFilterObjects")
    private @Nullable Output<List<GrafanaGrafanaUserConfigIpFilterObjectArgs>> ipFilterObjects;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public Optional<Output<List<GrafanaGrafanaUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Enable Grafana /metrics endpoint.
     * 
     */
    @Import(name="metricsEnabled")
    private @Nullable Output<Boolean> metricsEnabled;

    /**
     * @return Enable Grafana /metrics endpoint.
     * 
     */
    public Optional<Output<Boolean>> metricsEnabled() {
        return Optional.ofNullable(this.metricsEnabled);
    }

    /**
     * Enforce user lookup based on email instead of the unique ID provided by the IdP.
     * 
     */
    @Import(name="oauthAllowInsecureEmailLookup")
    private @Nullable Output<Boolean> oauthAllowInsecureEmailLookup;

    /**
     * @return Enforce user lookup based on email instead of the unique ID provided by the IdP.
     * 
     */
    public Optional<Output<Boolean>> oauthAllowInsecureEmailLookup() {
        return Optional.ofNullable(this.oauthAllowInsecureEmailLookup);
    }

    /**
     * Allow access to selected service ports from private networks
     * 
     */
    @Import(name="privateAccess")
    private @Nullable Output<GrafanaGrafanaUserConfigPrivateAccessArgs> privateAccess;

    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    /**
     * Allow access to selected service components through Privatelink
     * 
     */
    @Import(name="privatelinkAccess")
    private @Nullable Output<GrafanaGrafanaUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    /**
     * Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<GrafanaGrafanaUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    @Import(name="recoveryBasebackupName")
    private @Nullable Output<String> recoveryBasebackupName;

    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    public Optional<Output<String>> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }

    /**
     * Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    /**
     * SMTP server settings
     * 
     */
    @Import(name="smtpServer")
    private @Nullable Output<GrafanaGrafanaUserConfigSmtpServerArgs> smtpServer;

    /**
     * @return SMTP server settings
     * 
     */
    public Optional<Output<GrafanaGrafanaUserConfigSmtpServerArgs>> smtpServer() {
        return Optional.ofNullable(this.smtpServer);
    }

    /**
     * Use static public IP addresses.
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    /**
     * Enable or disable Grafana unified alerting functionality. By default this is enabled and any legacy alerts will be migrated on upgrade to Grafana 9+. To stay on legacy alerting, set unified*alerting*enabled to false and alerting_enabled to true. See https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/ for more details.
     * 
     */
    @Import(name="unifiedAlertingEnabled")
    private @Nullable Output<Boolean> unifiedAlertingEnabled;

    /**
     * @return Enable or disable Grafana unified alerting functionality. By default this is enabled and any legacy alerts will be migrated on upgrade to Grafana 9+. To stay on legacy alerting, set unified*alerting*enabled to false and alerting_enabled to true. See https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/ for more details.
     * 
     */
    public Optional<Output<Boolean>> unifiedAlertingEnabled() {
        return Optional.ofNullable(this.unifiedAlertingEnabled);
    }

    /**
     * Auto-assign new users on signup to main organization. Defaults to false.
     * 
     */
    @Import(name="userAutoAssignOrg")
    private @Nullable Output<Boolean> userAutoAssignOrg;

    /**
     * @return Auto-assign new users on signup to main organization. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> userAutoAssignOrg() {
        return Optional.ofNullable(this.userAutoAssignOrg);
    }

    /**
     * Enum: `Viewer`, `Admin`, `Editor`. Set role for new signups. Defaults to Viewer.
     * 
     */
    @Import(name="userAutoAssignOrgRole")
    private @Nullable Output<String> userAutoAssignOrgRole;

    /**
     * @return Enum: `Viewer`, `Admin`, `Editor`. Set role for new signups. Defaults to Viewer.
     * 
     */
    public Optional<Output<String>> userAutoAssignOrgRole() {
        return Optional.ofNullable(this.userAutoAssignOrgRole);
    }

    /**
     * Users with view-only permission can edit but not save dashboards.
     * 
     */
    @Import(name="viewersCanEdit")
    private @Nullable Output<Boolean> viewersCanEdit;

    /**
     * @return Users with view-only permission can edit but not save dashboards.
     * 
     */
    public Optional<Output<Boolean>> viewersCanEdit() {
        return Optional.ofNullable(this.viewersCanEdit);
    }

    /**
     * Setting to enable/disable Write-Ahead Logging. The default value is false (disabled).
     * 
     */
    @Import(name="wal")
    private @Nullable Output<Boolean> wal;

    /**
     * @return Setting to enable/disable Write-Ahead Logging. The default value is false (disabled).
     * 
     */
    public Optional<Output<Boolean>> wal() {
        return Optional.ofNullable(this.wal);
    }

    private GrafanaGrafanaUserConfigArgs() {}

    private GrafanaGrafanaUserConfigArgs(GrafanaGrafanaUserConfigArgs $) {
        this.additionalBackupRegions = $.additionalBackupRegions;
        this.alertingEnabled = $.alertingEnabled;
        this.alertingErrorOrTimeout = $.alertingErrorOrTimeout;
        this.alertingMaxAnnotationsToKeep = $.alertingMaxAnnotationsToKeep;
        this.alertingNodataOrNullvalues = $.alertingNodataOrNullvalues;
        this.allowEmbedding = $.allowEmbedding;
        this.authAzuread = $.authAzuread;
        this.authBasicEnabled = $.authBasicEnabled;
        this.authGenericOauth = $.authGenericOauth;
        this.authGithub = $.authGithub;
        this.authGitlab = $.authGitlab;
        this.authGoogle = $.authGoogle;
        this.cookieSamesite = $.cookieSamesite;
        this.customDomain = $.customDomain;
        this.dashboardPreviewsEnabled = $.dashboardPreviewsEnabled;
        this.dashboardsMinRefreshInterval = $.dashboardsMinRefreshInterval;
        this.dashboardsVersionsToKeep = $.dashboardsVersionsToKeep;
        this.dataproxySendUserHeader = $.dataproxySendUserHeader;
        this.dataproxyTimeout = $.dataproxyTimeout;
        this.dateFormats = $.dateFormats;
        this.disableGravatar = $.disableGravatar;
        this.editorsCanAdmin = $.editorsCanAdmin;
        this.externalImageStorage = $.externalImageStorage;
        this.googleAnalyticsUaId = $.googleAnalyticsUaId;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.metricsEnabled = $.metricsEnabled;
        this.oauthAllowInsecureEmailLookup = $.oauthAllowInsecureEmailLookup;
        this.privateAccess = $.privateAccess;
        this.privatelinkAccess = $.privatelinkAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.recoveryBasebackupName = $.recoveryBasebackupName;
        this.serviceLog = $.serviceLog;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.smtpServer = $.smtpServer;
        this.staticIps = $.staticIps;
        this.unifiedAlertingEnabled = $.unifiedAlertingEnabled;
        this.userAutoAssignOrg = $.userAutoAssignOrg;
        this.userAutoAssignOrgRole = $.userAutoAssignOrgRole;
        this.viewersCanEdit = $.viewersCanEdit;
        this.wal = $.wal;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrafanaGrafanaUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrafanaGrafanaUserConfigArgs $;

        public Builder() {
            $ = new GrafanaGrafanaUserConfigArgs();
        }

        public Builder(GrafanaGrafanaUserConfigArgs defaults) {
            $ = new GrafanaGrafanaUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(@Nullable Output<String> additionalBackupRegions) {
            $.additionalBackupRegions = additionalBackupRegions;
            return this;
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(String additionalBackupRegions) {
            return additionalBackupRegions(Output.of(additionalBackupRegions));
        }

        /**
         * @param alertingEnabled Enable or disable Grafana legacy alerting functionality. This should not be enabled with unified*alerting*enabled.
         * 
         * @return builder
         * 
         */
        public Builder alertingEnabled(@Nullable Output<Boolean> alertingEnabled) {
            $.alertingEnabled = alertingEnabled;
            return this;
        }

        /**
         * @param alertingEnabled Enable or disable Grafana legacy alerting functionality. This should not be enabled with unified*alerting*enabled.
         * 
         * @return builder
         * 
         */
        public Builder alertingEnabled(Boolean alertingEnabled) {
            return alertingEnabled(Output.of(alertingEnabled));
        }

        /**
         * @param alertingErrorOrTimeout Enum: `alerting`, `keep_state`. Default error or timeout setting for new alerting rules.
         * 
         * @return builder
         * 
         */
        public Builder alertingErrorOrTimeout(@Nullable Output<String> alertingErrorOrTimeout) {
            $.alertingErrorOrTimeout = alertingErrorOrTimeout;
            return this;
        }

        /**
         * @param alertingErrorOrTimeout Enum: `alerting`, `keep_state`. Default error or timeout setting for new alerting rules.
         * 
         * @return builder
         * 
         */
        public Builder alertingErrorOrTimeout(String alertingErrorOrTimeout) {
            return alertingErrorOrTimeout(Output.of(alertingErrorOrTimeout));
        }

        /**
         * @param alertingMaxAnnotationsToKeep Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations. Example: `0`.
         * 
         * @return builder
         * 
         */
        public Builder alertingMaxAnnotationsToKeep(@Nullable Output<Integer> alertingMaxAnnotationsToKeep) {
            $.alertingMaxAnnotationsToKeep = alertingMaxAnnotationsToKeep;
            return this;
        }

        /**
         * @param alertingMaxAnnotationsToKeep Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations. Example: `0`.
         * 
         * @return builder
         * 
         */
        public Builder alertingMaxAnnotationsToKeep(Integer alertingMaxAnnotationsToKeep) {
            return alertingMaxAnnotationsToKeep(Output.of(alertingMaxAnnotationsToKeep));
        }

        /**
         * @param alertingNodataOrNullvalues Enum: `alerting`, `no_data`, `keep_state`, `ok`. Default value for &#39;no data or null values&#39; for new alerting rules.
         * 
         * @return builder
         * 
         */
        public Builder alertingNodataOrNullvalues(@Nullable Output<String> alertingNodataOrNullvalues) {
            $.alertingNodataOrNullvalues = alertingNodataOrNullvalues;
            return this;
        }

        /**
         * @param alertingNodataOrNullvalues Enum: `alerting`, `no_data`, `keep_state`, `ok`. Default value for &#39;no data or null values&#39; for new alerting rules.
         * 
         * @return builder
         * 
         */
        public Builder alertingNodataOrNullvalues(String alertingNodataOrNullvalues) {
            return alertingNodataOrNullvalues(Output.of(alertingNodataOrNullvalues));
        }

        /**
         * @param allowEmbedding Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking.
         * 
         * @return builder
         * 
         */
        public Builder allowEmbedding(@Nullable Output<Boolean> allowEmbedding) {
            $.allowEmbedding = allowEmbedding;
            return this;
        }

        /**
         * @param allowEmbedding Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking.
         * 
         * @return builder
         * 
         */
        public Builder allowEmbedding(Boolean allowEmbedding) {
            return allowEmbedding(Output.of(allowEmbedding));
        }

        /**
         * @param authAzuread Azure AD OAuth integration
         * 
         * @return builder
         * 
         */
        public Builder authAzuread(@Nullable Output<GrafanaGrafanaUserConfigAuthAzureadArgs> authAzuread) {
            $.authAzuread = authAzuread;
            return this;
        }

        /**
         * @param authAzuread Azure AD OAuth integration
         * 
         * @return builder
         * 
         */
        public Builder authAzuread(GrafanaGrafanaUserConfigAuthAzureadArgs authAzuread) {
            return authAzuread(Output.of(authAzuread));
        }

        /**
         * @param authBasicEnabled Enable or disable basic authentication form, used by Grafana built-in login.
         * 
         * @return builder
         * 
         */
        public Builder authBasicEnabled(@Nullable Output<Boolean> authBasicEnabled) {
            $.authBasicEnabled = authBasicEnabled;
            return this;
        }

        /**
         * @param authBasicEnabled Enable or disable basic authentication form, used by Grafana built-in login.
         * 
         * @return builder
         * 
         */
        public Builder authBasicEnabled(Boolean authBasicEnabled) {
            return authBasicEnabled(Output.of(authBasicEnabled));
        }

        /**
         * @param authGenericOauth Generic OAuth integration
         * 
         * @return builder
         * 
         */
        public Builder authGenericOauth(@Nullable Output<GrafanaGrafanaUserConfigAuthGenericOauthArgs> authGenericOauth) {
            $.authGenericOauth = authGenericOauth;
            return this;
        }

        /**
         * @param authGenericOauth Generic OAuth integration
         * 
         * @return builder
         * 
         */
        public Builder authGenericOauth(GrafanaGrafanaUserConfigAuthGenericOauthArgs authGenericOauth) {
            return authGenericOauth(Output.of(authGenericOauth));
        }

        /**
         * @param authGithub Github Auth integration
         * 
         * @return builder
         * 
         */
        public Builder authGithub(@Nullable Output<GrafanaGrafanaUserConfigAuthGithubArgs> authGithub) {
            $.authGithub = authGithub;
            return this;
        }

        /**
         * @param authGithub Github Auth integration
         * 
         * @return builder
         * 
         */
        public Builder authGithub(GrafanaGrafanaUserConfigAuthGithubArgs authGithub) {
            return authGithub(Output.of(authGithub));
        }

        /**
         * @param authGitlab GitLab Auth integration
         * 
         * @return builder
         * 
         */
        public Builder authGitlab(@Nullable Output<GrafanaGrafanaUserConfigAuthGitlabArgs> authGitlab) {
            $.authGitlab = authGitlab;
            return this;
        }

        /**
         * @param authGitlab GitLab Auth integration
         * 
         * @return builder
         * 
         */
        public Builder authGitlab(GrafanaGrafanaUserConfigAuthGitlabArgs authGitlab) {
            return authGitlab(Output.of(authGitlab));
        }

        /**
         * @param authGoogle Google Auth integration
         * 
         * @return builder
         * 
         */
        public Builder authGoogle(@Nullable Output<GrafanaGrafanaUserConfigAuthGoogleArgs> authGoogle) {
            $.authGoogle = authGoogle;
            return this;
        }

        /**
         * @param authGoogle Google Auth integration
         * 
         * @return builder
         * 
         */
        public Builder authGoogle(GrafanaGrafanaUserConfigAuthGoogleArgs authGoogle) {
            return authGoogle(Output.of(authGoogle));
        }

        /**
         * @param cookieSamesite Enum: `lax`, `strict`, `none`. Cookie SameSite attribute: `strict` prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. `lax` is the default value.
         * 
         * @return builder
         * 
         */
        public Builder cookieSamesite(@Nullable Output<String> cookieSamesite) {
            $.cookieSamesite = cookieSamesite;
            return this;
        }

        /**
         * @param cookieSamesite Enum: `lax`, `strict`, `none`. Cookie SameSite attribute: `strict` prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. `lax` is the default value.
         * 
         * @return builder
         * 
         */
        public Builder cookieSamesite(String cookieSamesite) {
            return cookieSamesite(Output.of(cookieSamesite));
        }

        /**
         * @param customDomain Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(@Nullable Output<String> customDomain) {
            $.customDomain = customDomain;
            return this;
        }

        /**
         * @param customDomain Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(String customDomain) {
            return customDomain(Output.of(customDomain));
        }

        /**
         * @param dashboardPreviewsEnabled This feature is new in Grafana 9 and is quite resource intensive. It may cause low-end plans to work more slowly while the dashboard previews are rendering.
         * 
         * @return builder
         * 
         */
        public Builder dashboardPreviewsEnabled(@Nullable Output<Boolean> dashboardPreviewsEnabled) {
            $.dashboardPreviewsEnabled = dashboardPreviewsEnabled;
            return this;
        }

        /**
         * @param dashboardPreviewsEnabled This feature is new in Grafana 9 and is quite resource intensive. It may cause low-end plans to work more slowly while the dashboard previews are rendering.
         * 
         * @return builder
         * 
         */
        public Builder dashboardPreviewsEnabled(Boolean dashboardPreviewsEnabled) {
            return dashboardPreviewsEnabled(Output.of(dashboardPreviewsEnabled));
        }

        /**
         * @param dashboardsMinRefreshInterval Signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h. Example: `5s`.
         * 
         * @return builder
         * 
         */
        public Builder dashboardsMinRefreshInterval(@Nullable Output<String> dashboardsMinRefreshInterval) {
            $.dashboardsMinRefreshInterval = dashboardsMinRefreshInterval;
            return this;
        }

        /**
         * @param dashboardsMinRefreshInterval Signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h. Example: `5s`.
         * 
         * @return builder
         * 
         */
        public Builder dashboardsMinRefreshInterval(String dashboardsMinRefreshInterval) {
            return dashboardsMinRefreshInterval(Output.of(dashboardsMinRefreshInterval));
        }

        /**
         * @param dashboardsVersionsToKeep Dashboard versions to keep per dashboard. Example: `20`.
         * 
         * @return builder
         * 
         */
        public Builder dashboardsVersionsToKeep(@Nullable Output<Integer> dashboardsVersionsToKeep) {
            $.dashboardsVersionsToKeep = dashboardsVersionsToKeep;
            return this;
        }

        /**
         * @param dashboardsVersionsToKeep Dashboard versions to keep per dashboard. Example: `20`.
         * 
         * @return builder
         * 
         */
        public Builder dashboardsVersionsToKeep(Integer dashboardsVersionsToKeep) {
            return dashboardsVersionsToKeep(Output.of(dashboardsVersionsToKeep));
        }

        /**
         * @param dataproxySendUserHeader Send `X-Grafana-User` header to data source.
         * 
         * @return builder
         * 
         */
        public Builder dataproxySendUserHeader(@Nullable Output<Boolean> dataproxySendUserHeader) {
            $.dataproxySendUserHeader = dataproxySendUserHeader;
            return this;
        }

        /**
         * @param dataproxySendUserHeader Send `X-Grafana-User` header to data source.
         * 
         * @return builder
         * 
         */
        public Builder dataproxySendUserHeader(Boolean dataproxySendUserHeader) {
            return dataproxySendUserHeader(Output.of(dataproxySendUserHeader));
        }

        /**
         * @param dataproxyTimeout Timeout for data proxy requests in seconds. Example: `30`.
         * 
         * @return builder
         * 
         */
        public Builder dataproxyTimeout(@Nullable Output<Integer> dataproxyTimeout) {
            $.dataproxyTimeout = dataproxyTimeout;
            return this;
        }

        /**
         * @param dataproxyTimeout Timeout for data proxy requests in seconds. Example: `30`.
         * 
         * @return builder
         * 
         */
        public Builder dataproxyTimeout(Integer dataproxyTimeout) {
            return dataproxyTimeout(Output.of(dataproxyTimeout));
        }

        /**
         * @param dateFormats Grafana date format specifications
         * 
         * @return builder
         * 
         */
        public Builder dateFormats(@Nullable Output<GrafanaGrafanaUserConfigDateFormatsArgs> dateFormats) {
            $.dateFormats = dateFormats;
            return this;
        }

        /**
         * @param dateFormats Grafana date format specifications
         * 
         * @return builder
         * 
         */
        public Builder dateFormats(GrafanaGrafanaUserConfigDateFormatsArgs dateFormats) {
            return dateFormats(Output.of(dateFormats));
        }

        /**
         * @param disableGravatar Set to true to disable gravatar. Defaults to false (gravatar is enabled).
         * 
         * @return builder
         * 
         */
        public Builder disableGravatar(@Nullable Output<Boolean> disableGravatar) {
            $.disableGravatar = disableGravatar;
            return this;
        }

        /**
         * @param disableGravatar Set to true to disable gravatar. Defaults to false (gravatar is enabled).
         * 
         * @return builder
         * 
         */
        public Builder disableGravatar(Boolean disableGravatar) {
            return disableGravatar(Output.of(disableGravatar));
        }

        /**
         * @param editorsCanAdmin Editors can manage folders, teams and dashboards created by them.
         * 
         * @return builder
         * 
         */
        public Builder editorsCanAdmin(@Nullable Output<Boolean> editorsCanAdmin) {
            $.editorsCanAdmin = editorsCanAdmin;
            return this;
        }

        /**
         * @param editorsCanAdmin Editors can manage folders, teams and dashboards created by them.
         * 
         * @return builder
         * 
         */
        public Builder editorsCanAdmin(Boolean editorsCanAdmin) {
            return editorsCanAdmin(Output.of(editorsCanAdmin));
        }

        /**
         * @param externalImageStorage External image store settings
         * 
         * @return builder
         * 
         */
        public Builder externalImageStorage(@Nullable Output<GrafanaGrafanaUserConfigExternalImageStorageArgs> externalImageStorage) {
            $.externalImageStorage = externalImageStorage;
            return this;
        }

        /**
         * @param externalImageStorage External image store settings
         * 
         * @return builder
         * 
         */
        public Builder externalImageStorage(GrafanaGrafanaUserConfigExternalImageStorageArgs externalImageStorage) {
            return externalImageStorage(Output.of(externalImageStorage));
        }

        /**
         * @param googleAnalyticsUaId Google Analytics ID. Example: `UA-123456-4`.
         * 
         * @return builder
         * 
         */
        public Builder googleAnalyticsUaId(@Nullable Output<String> googleAnalyticsUaId) {
            $.googleAnalyticsUaId = googleAnalyticsUaId;
            return this;
        }

        /**
         * @param googleAnalyticsUaId Google Analytics ID. Example: `UA-123456-4`.
         * 
         * @return builder
         * 
         */
        public Builder googleAnalyticsUaId(String googleAnalyticsUaId) {
            return googleAnalyticsUaId(Output.of(googleAnalyticsUaId));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(@Nullable Output<List<GrafanaGrafanaUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(List<GrafanaGrafanaUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(GrafanaGrafanaUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param metricsEnabled Enable Grafana /metrics endpoint.
         * 
         * @return builder
         * 
         */
        public Builder metricsEnabled(@Nullable Output<Boolean> metricsEnabled) {
            $.metricsEnabled = metricsEnabled;
            return this;
        }

        /**
         * @param metricsEnabled Enable Grafana /metrics endpoint.
         * 
         * @return builder
         * 
         */
        public Builder metricsEnabled(Boolean metricsEnabled) {
            return metricsEnabled(Output.of(metricsEnabled));
        }

        /**
         * @param oauthAllowInsecureEmailLookup Enforce user lookup based on email instead of the unique ID provided by the IdP.
         * 
         * @return builder
         * 
         */
        public Builder oauthAllowInsecureEmailLookup(@Nullable Output<Boolean> oauthAllowInsecureEmailLookup) {
            $.oauthAllowInsecureEmailLookup = oauthAllowInsecureEmailLookup;
            return this;
        }

        /**
         * @param oauthAllowInsecureEmailLookup Enforce user lookup based on email instead of the unique ID provided by the IdP.
         * 
         * @return builder
         * 
         */
        public Builder oauthAllowInsecureEmailLookup(Boolean oauthAllowInsecureEmailLookup) {
            return oauthAllowInsecureEmailLookup(Output.of(oauthAllowInsecureEmailLookup));
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(@Nullable Output<GrafanaGrafanaUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(GrafanaGrafanaUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(@Nullable Output<GrafanaGrafanaUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(GrafanaGrafanaUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<GrafanaGrafanaUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(GrafanaGrafanaUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(@Nullable Output<String> recoveryBasebackupName) {
            $.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(String recoveryBasebackupName) {
            return recoveryBasebackupName(Output.of(recoveryBasebackupName));
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        /**
         * @param smtpServer SMTP server settings
         * 
         * @return builder
         * 
         */
        public Builder smtpServer(@Nullable Output<GrafanaGrafanaUserConfigSmtpServerArgs> smtpServer) {
            $.smtpServer = smtpServer;
            return this;
        }

        /**
         * @param smtpServer SMTP server settings
         * 
         * @return builder
         * 
         */
        public Builder smtpServer(GrafanaGrafanaUserConfigSmtpServerArgs smtpServer) {
            return smtpServer(Output.of(smtpServer));
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        /**
         * @param unifiedAlertingEnabled Enable or disable Grafana unified alerting functionality. By default this is enabled and any legacy alerts will be migrated on upgrade to Grafana 9+. To stay on legacy alerting, set unified*alerting*enabled to false and alerting_enabled to true. See https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/ for more details.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAlertingEnabled(@Nullable Output<Boolean> unifiedAlertingEnabled) {
            $.unifiedAlertingEnabled = unifiedAlertingEnabled;
            return this;
        }

        /**
         * @param unifiedAlertingEnabled Enable or disable Grafana unified alerting functionality. By default this is enabled and any legacy alerts will be migrated on upgrade to Grafana 9+. To stay on legacy alerting, set unified*alerting*enabled to false and alerting_enabled to true. See https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/ for more details.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAlertingEnabled(Boolean unifiedAlertingEnabled) {
            return unifiedAlertingEnabled(Output.of(unifiedAlertingEnabled));
        }

        /**
         * @param userAutoAssignOrg Auto-assign new users on signup to main organization. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder userAutoAssignOrg(@Nullable Output<Boolean> userAutoAssignOrg) {
            $.userAutoAssignOrg = userAutoAssignOrg;
            return this;
        }

        /**
         * @param userAutoAssignOrg Auto-assign new users on signup to main organization. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder userAutoAssignOrg(Boolean userAutoAssignOrg) {
            return userAutoAssignOrg(Output.of(userAutoAssignOrg));
        }

        /**
         * @param userAutoAssignOrgRole Enum: `Viewer`, `Admin`, `Editor`. Set role for new signups. Defaults to Viewer.
         * 
         * @return builder
         * 
         */
        public Builder userAutoAssignOrgRole(@Nullable Output<String> userAutoAssignOrgRole) {
            $.userAutoAssignOrgRole = userAutoAssignOrgRole;
            return this;
        }

        /**
         * @param userAutoAssignOrgRole Enum: `Viewer`, `Admin`, `Editor`. Set role for new signups. Defaults to Viewer.
         * 
         * @return builder
         * 
         */
        public Builder userAutoAssignOrgRole(String userAutoAssignOrgRole) {
            return userAutoAssignOrgRole(Output.of(userAutoAssignOrgRole));
        }

        /**
         * @param viewersCanEdit Users with view-only permission can edit but not save dashboards.
         * 
         * @return builder
         * 
         */
        public Builder viewersCanEdit(@Nullable Output<Boolean> viewersCanEdit) {
            $.viewersCanEdit = viewersCanEdit;
            return this;
        }

        /**
         * @param viewersCanEdit Users with view-only permission can edit but not save dashboards.
         * 
         * @return builder
         * 
         */
        public Builder viewersCanEdit(Boolean viewersCanEdit) {
            return viewersCanEdit(Output.of(viewersCanEdit));
        }

        /**
         * @param wal Setting to enable/disable Write-Ahead Logging. The default value is false (disabled).
         * 
         * @return builder
         * 
         */
        public Builder wal(@Nullable Output<Boolean> wal) {
            $.wal = wal;
            return this;
        }

        /**
         * @param wal Setting to enable/disable Write-Ahead Logging. The default value is false (disabled).
         * 
         * @return builder
         * 
         */
        public Builder wal(Boolean wal) {
            return wal(Output.of(wal));
        }

        public GrafanaGrafanaUserConfigArgs build() {
            return $;
        }
    }

}
