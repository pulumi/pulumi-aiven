// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetM3DbM3db {
    /**
     * @return M3DB cluster URI.
     * 
     */
    private String httpClusterUri;
    /**
     * @return M3DB node URI.
     * 
     */
    private String httpNodeUri;
    /**
     * @return InfluxDB URI.
     * 
     */
    private String influxdbUri;
    /**
     * @return Prometheus remote read URI.
     * 
     */
    private String prometheusRemoteReadUri;
    /**
     * @return Prometheus remote write URI.
     * 
     */
    private String prometheusRemoteWriteUri;
    /**
     * @return M3DB server URIs.
     * 
     */
    private List<String> uris;

    private GetM3DbM3db() {}
    /**
     * @return M3DB cluster URI.
     * 
     */
    public String httpClusterUri() {
        return this.httpClusterUri;
    }
    /**
     * @return M3DB node URI.
     * 
     */
    public String httpNodeUri() {
        return this.httpNodeUri;
    }
    /**
     * @return InfluxDB URI.
     * 
     */
    public String influxdbUri() {
        return this.influxdbUri;
    }
    /**
     * @return Prometheus remote read URI.
     * 
     */
    public String prometheusRemoteReadUri() {
        return this.prometheusRemoteReadUri;
    }
    /**
     * @return Prometheus remote write URI.
     * 
     */
    public String prometheusRemoteWriteUri() {
        return this.prometheusRemoteWriteUri;
    }
    /**
     * @return M3DB server URIs.
     * 
     */
    public List<String> uris() {
        return this.uris;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetM3DbM3db defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String httpClusterUri;
        private String httpNodeUri;
        private String influxdbUri;
        private String prometheusRemoteReadUri;
        private String prometheusRemoteWriteUri;
        private List<String> uris;
        public Builder() {}
        public Builder(GetM3DbM3db defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpClusterUri = defaults.httpClusterUri;
    	      this.httpNodeUri = defaults.httpNodeUri;
    	      this.influxdbUri = defaults.influxdbUri;
    	      this.prometheusRemoteReadUri = defaults.prometheusRemoteReadUri;
    	      this.prometheusRemoteWriteUri = defaults.prometheusRemoteWriteUri;
    	      this.uris = defaults.uris;
        }

        @CustomType.Setter
        public Builder httpClusterUri(String httpClusterUri) {
            if (httpClusterUri == null) {
              throw new MissingRequiredPropertyException("GetM3DbM3db", "httpClusterUri");
            }
            this.httpClusterUri = httpClusterUri;
            return this;
        }
        @CustomType.Setter
        public Builder httpNodeUri(String httpNodeUri) {
            if (httpNodeUri == null) {
              throw new MissingRequiredPropertyException("GetM3DbM3db", "httpNodeUri");
            }
            this.httpNodeUri = httpNodeUri;
            return this;
        }
        @CustomType.Setter
        public Builder influxdbUri(String influxdbUri) {
            if (influxdbUri == null) {
              throw new MissingRequiredPropertyException("GetM3DbM3db", "influxdbUri");
            }
            this.influxdbUri = influxdbUri;
            return this;
        }
        @CustomType.Setter
        public Builder prometheusRemoteReadUri(String prometheusRemoteReadUri) {
            if (prometheusRemoteReadUri == null) {
              throw new MissingRequiredPropertyException("GetM3DbM3db", "prometheusRemoteReadUri");
            }
            this.prometheusRemoteReadUri = prometheusRemoteReadUri;
            return this;
        }
        @CustomType.Setter
        public Builder prometheusRemoteWriteUri(String prometheusRemoteWriteUri) {
            if (prometheusRemoteWriteUri == null) {
              throw new MissingRequiredPropertyException("GetM3DbM3db", "prometheusRemoteWriteUri");
            }
            this.prometheusRemoteWriteUri = prometheusRemoteWriteUri;
            return this;
        }
        @CustomType.Setter
        public Builder uris(List<String> uris) {
            if (uris == null) {
              throw new MissingRequiredPropertyException("GetM3DbM3db", "uris");
            }
            this.uris = uris;
            return this;
        }
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }
        public GetM3DbM3db build() {
            final var _resultValue = new GetM3DbM3db();
            _resultValue.httpClusterUri = httpClusterUri;
            _resultValue.httpNodeUri = httpNodeUri;
            _resultValue.influxdbUri = influxdbUri;
            _resultValue.prometheusRemoteReadUri = prometheusRemoteReadUri;
            _resultValue.prometheusRemoteWriteUri = prometheusRemoteWriteUri;
            _resultValue.uris = uris;
            return _resultValue;
        }
    }
}
