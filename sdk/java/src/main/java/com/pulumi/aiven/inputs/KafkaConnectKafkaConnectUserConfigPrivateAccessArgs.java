// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaConnectKafkaConnectUserConfigPrivateAccessArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaConnectKafkaConnectUserConfigPrivateAccessArgs Empty = new KafkaConnectKafkaConnectUserConfigPrivateAccessArgs();

    /**
     * Allow clients to connect to kafka_connect with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
     * 
     */
    @Import(name="kafkaConnect")
    private @Nullable Output<Boolean> kafkaConnect;

    /**
     * @return Allow clients to connect to kafka_connect with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
     * 
     */
    public Optional<Output<Boolean>> kafkaConnect() {
        return Optional.ofNullable(this.kafkaConnect);
    }

    /**
     * Allow clients to connect to prometheus with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
     * 
     */
    @Import(name="prometheus")
    private @Nullable Output<Boolean> prometheus;

    /**
     * @return Allow clients to connect to prometheus with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
     * 
     */
    public Optional<Output<Boolean>> prometheus() {
        return Optional.ofNullable(this.prometheus);
    }

    private KafkaConnectKafkaConnectUserConfigPrivateAccessArgs() {}

    private KafkaConnectKafkaConnectUserConfigPrivateAccessArgs(KafkaConnectKafkaConnectUserConfigPrivateAccessArgs $) {
        this.kafkaConnect = $.kafkaConnect;
        this.prometheus = $.prometheus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaConnectKafkaConnectUserConfigPrivateAccessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaConnectKafkaConnectUserConfigPrivateAccessArgs $;

        public Builder() {
            $ = new KafkaConnectKafkaConnectUserConfigPrivateAccessArgs();
        }

        public Builder(KafkaConnectKafkaConnectUserConfigPrivateAccessArgs defaults) {
            $ = new KafkaConnectKafkaConnectUserConfigPrivateAccessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kafkaConnect Allow clients to connect to kafka_connect with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
         * 
         * @return builder
         * 
         */
        public Builder kafkaConnect(@Nullable Output<Boolean> kafkaConnect) {
            $.kafkaConnect = kafkaConnect;
            return this;
        }

        /**
         * @param kafkaConnect Allow clients to connect to kafka_connect with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
         * 
         * @return builder
         * 
         */
        public Builder kafkaConnect(Boolean kafkaConnect) {
            return kafkaConnect(Output.of(kafkaConnect));
        }

        /**
         * @param prometheus Allow clients to connect to prometheus with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
         * 
         * @return builder
         * 
         */
        public Builder prometheus(@Nullable Output<Boolean> prometheus) {
            $.prometheus = prometheus;
            return this;
        }

        /**
         * @param prometheus Allow clients to connect to prometheus with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
         * 
         * @return builder
         * 
         */
        public Builder prometheus(Boolean prometheus) {
            return prometheus(Output.of(prometheus));
        }

        public KafkaConnectKafkaConnectUserConfigPrivateAccessArgs build() {
            return $;
        }
    }

}
