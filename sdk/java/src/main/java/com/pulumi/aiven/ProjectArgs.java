// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.aiven.inputs.ProjectTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     * @deprecated
     * Use parent_id instead. This field will be removed in the next major release.
     * 
     */
    @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     * @deprecated
     * Use parent_id instead. This field will be removed in the next major release.
     * 
     */
    @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
     * 
     */
    @Import(name="addAccountOwnersAdminAccess")
    private @Nullable Output<Boolean> addAccountOwnersAdminAccess;

    /**
     * @return If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> addAccountOwnersAdminAccess() {
        return Optional.ofNullable(this.addAccountOwnersAdminAccess);
    }

    /**
     * The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    @Import(name="billingGroup")
    private @Nullable Output<String> billingGroup;

    /**
     * @return The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public Optional<Output<String>> billingGroup() {
        return Optional.ofNullable(this.billingGroup);
    }

    /**
     * is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    @Import(name="copyFromProject")
    private @Nullable Output<String> copyFromProject;

    /**
     * @return is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public Optional<Output<String>> copyFromProject() {
        return Optional.ofNullable(this.copyFromProject);
    }

    /**
     * Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
     * 
     */
    @Import(name="defaultCloud")
    private @Nullable Output<String> defaultCloud;

    /**
     * @return Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
     * 
     */
    public Optional<Output<String>> defaultCloud() {
        return Optional.ofNullable(this.defaultCloud);
    }

    /**
     * An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Tags are key-value pairs that allow you to categorize projects.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ProjectTagArgs>> tags;

    /**
     * @return Tags are key-value pairs that allow you to categorize projects.
     * 
     */
    public Optional<Output<List<ProjectTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
     * 
     */
    @Import(name="technicalEmails")
    private @Nullable Output<List<String>> technicalEmails;

    /**
     * @return Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
     * 
     */
    public Optional<Output<List<String>>> technicalEmails() {
        return Optional.ofNullable(this.technicalEmails);
    }

    /**
     * Use the same billing group that is used in source project.
     * 
     */
    @Import(name="useSourceProjectBillingGroup")
    private @Nullable Output<Boolean> useSourceProjectBillingGroup;

    /**
     * @return Use the same billing group that is used in source project.
     * 
     */
    public Optional<Output<Boolean>> useSourceProjectBillingGroup() {
        return Optional.ofNullable(this.useSourceProjectBillingGroup);
    }

    private ProjectArgs() {}

    private ProjectArgs(ProjectArgs $) {
        this.accountId = $.accountId;
        this.addAccountOwnersAdminAccess = $.addAccountOwnersAdminAccess;
        this.billingGroup = $.billingGroup;
        this.copyFromProject = $.copyFromProject;
        this.defaultCloud = $.defaultCloud;
        this.parentId = $.parentId;
        this.project = $.project;
        this.tags = $.tags;
        this.technicalEmails = $.technicalEmails;
        this.useSourceProjectBillingGroup = $.useSourceProjectBillingGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectArgs $;

        public Builder() {
            $ = new ProjectArgs();
        }

        public Builder(ProjectArgs defaults) {
            $ = new ProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         * @deprecated
         * Use parent_id instead. This field will be removed in the next major release.
         * 
         */
        @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         * @deprecated
         * Use parent_id instead. This field will be removed in the next major release.
         * 
         */
        @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param addAccountOwnersAdminAccess If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder addAccountOwnersAdminAccess(@Nullable Output<Boolean> addAccountOwnersAdminAccess) {
            $.addAccountOwnersAdminAccess = addAccountOwnersAdminAccess;
            return this;
        }

        /**
         * @param addAccountOwnersAdminAccess If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder addAccountOwnersAdminAccess(Boolean addAccountOwnersAdminAccess) {
            return addAccountOwnersAdminAccess(Output.of(addAccountOwnersAdminAccess));
        }

        /**
         * @param billingGroup The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder billingGroup(@Nullable Output<String> billingGroup) {
            $.billingGroup = billingGroup;
            return this;
        }

        /**
         * @param billingGroup The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder billingGroup(String billingGroup) {
            return billingGroup(Output.of(billingGroup));
        }

        /**
         * @param copyFromProject is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder copyFromProject(@Nullable Output<String> copyFromProject) {
            $.copyFromProject = copyFromProject;
            return this;
        }

        /**
         * @param copyFromProject is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder copyFromProject(String copyFromProject) {
            return copyFromProject(Output.of(copyFromProject));
        }

        /**
         * @param defaultCloud Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
         * 
         * @return builder
         * 
         */
        public Builder defaultCloud(@Nullable Output<String> defaultCloud) {
            $.defaultCloud = defaultCloud;
            return this;
        }

        /**
         * @param defaultCloud Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
         * 
         * @return builder
         * 
         */
        public Builder defaultCloud(String defaultCloud) {
            return defaultCloud(Output.of(defaultCloud));
        }

        /**
         * @param parentId An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param project Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param tags Tags are key-value pairs that allow you to categorize projects.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ProjectTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags are key-value pairs that allow you to categorize projects.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ProjectTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags are key-value pairs that allow you to categorize projects.
         * 
         * @return builder
         * 
         */
        public Builder tags(ProjectTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param technicalEmails Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
         * 
         * @return builder
         * 
         */
        public Builder technicalEmails(@Nullable Output<List<String>> technicalEmails) {
            $.technicalEmails = technicalEmails;
            return this;
        }

        /**
         * @param technicalEmails Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
         * 
         * @return builder
         * 
         */
        public Builder technicalEmails(List<String> technicalEmails) {
            return technicalEmails(Output.of(technicalEmails));
        }

        /**
         * @param technicalEmails Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
         * 
         * @return builder
         * 
         */
        public Builder technicalEmails(String... technicalEmails) {
            return technicalEmails(List.of(technicalEmails));
        }

        /**
         * @param useSourceProjectBillingGroup Use the same billing group that is used in source project.
         * 
         * @return builder
         * 
         */
        public Builder useSourceProjectBillingGroup(@Nullable Output<Boolean> useSourceProjectBillingGroup) {
            $.useSourceProjectBillingGroup = useSourceProjectBillingGroup;
            return this;
        }

        /**
         * @param useSourceProjectBillingGroup Use the same billing group that is used in source project.
         * 
         * @return builder
         * 
         */
        public Builder useSourceProjectBillingGroup(Boolean useSourceProjectBillingGroup) {
            return useSourceProjectBillingGroup(Output.of(useSourceProjectBillingGroup));
        }

        public ProjectArgs build() {
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
