// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.MySqlMysqlUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigMigration;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigMysql;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MySqlMysqlUserConfig {
    private @Nullable String additionalBackupRegions;
    private @Nullable String adminPassword;
    private @Nullable String adminUsername;
    private @Nullable Integer backupHour;
    private @Nullable Integer backupMinute;
    private @Nullable Integer binlogRetentionPeriod;
    private @Nullable List<MySqlMysqlUserConfigIpFilterObject> ipFilterObjects;
    private @Nullable List<String> ipFilterStrings;
    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations. */
    private @Nullable List<String> ipFilters;
    private @Nullable MySqlMysqlUserConfigMigration migration;
    private @Nullable MySqlMysqlUserConfigMysql mysql;
    private @Nullable String mysqlVersion;
    private @Nullable MySqlMysqlUserConfigPrivateAccess privateAccess;
    private @Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess;
    private @Nullable String projectToForkFrom;
    private @Nullable MySqlMysqlUserConfigPublicAccess publicAccess;
    private @Nullable String recoveryTargetTime;
    private @Nullable String serviceToForkFrom;
    private @Nullable Boolean staticIps;

    private MySqlMysqlUserConfig() {}
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    public Optional<String> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    public Optional<Integer> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }
    public Optional<Integer> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }
    public Optional<Integer> binlogRetentionPeriod() {
        return Optional.ofNullable(this.binlogRetentionPeriod);
    }
    public List<MySqlMysqlUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<MySqlMysqlUserConfigMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    public Optional<MySqlMysqlUserConfigMysql> mysql() {
        return Optional.ofNullable(this.mysql);
    }
    public Optional<String> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }
    public Optional<MySqlMysqlUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<MySqlMysqlUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    public Optional<MySqlMysqlUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Optional<String> recoveryTargetTime() {
        return Optional.ofNullable(this.recoveryTargetTime);
    }
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MySqlMysqlUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable String adminPassword;
        private @Nullable String adminUsername;
        private @Nullable Integer backupHour;
        private @Nullable Integer backupMinute;
        private @Nullable Integer binlogRetentionPeriod;
        private @Nullable List<MySqlMysqlUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable MySqlMysqlUserConfigMigration migration;
        private @Nullable MySqlMysqlUserConfigMysql mysql;
        private @Nullable String mysqlVersion;
        private @Nullable MySqlMysqlUserConfigPrivateAccess privateAccess;
        private @Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable MySqlMysqlUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryTargetTime;
        private @Nullable String serviceToForkFrom;
        private @Nullable Boolean staticIps;
        public Builder() {}
        public Builder(MySqlMysqlUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.backupHour = defaults.backupHour;
    	      this.backupMinute = defaults.backupMinute;
    	      this.binlogRetentionPeriod = defaults.binlogRetentionPeriod;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.mysql = defaults.mysql;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryTargetTime = defaults.recoveryTargetTime;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {
            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder adminPassword(@Nullable String adminPassword) {
            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder adminUsername(@Nullable String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder backupHour(@Nullable Integer backupHour) {
            this.backupHour = backupHour;
            return this;
        }
        @CustomType.Setter
        public Builder backupMinute(@Nullable Integer backupMinute) {
            this.backupMinute = backupMinute;
            return this;
        }
        @CustomType.Setter
        public Builder binlogRetentionPeriod(@Nullable Integer binlogRetentionPeriod) {
            this.binlogRetentionPeriod = binlogRetentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<MySqlMysqlUserConfigIpFilterObject> ipFilterObjects) {
            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(MySqlMysqlUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {
            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder migration(@Nullable MySqlMysqlUserConfigMigration migration) {
            this.migration = migration;
            return this;
        }
        @CustomType.Setter
        public Builder mysql(@Nullable MySqlMysqlUserConfigMysql mysql) {
            this.mysql = mysql;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlVersion(@Nullable String mysqlVersion) {
            this.mysqlVersion = mysqlVersion;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable MySqlMysqlUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable MySqlMysqlUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryTargetTime(@Nullable String recoveryTargetTime) {
            this.recoveryTargetTime = recoveryTargetTime;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {
            this.staticIps = staticIps;
            return this;
        }
        public MySqlMysqlUserConfig build() {
            final var o = new MySqlMysqlUserConfig();
            o.additionalBackupRegions = additionalBackupRegions;
            o.adminPassword = adminPassword;
            o.adminUsername = adminUsername;
            o.backupHour = backupHour;
            o.backupMinute = backupMinute;
            o.binlogRetentionPeriod = binlogRetentionPeriod;
            o.ipFilterObjects = ipFilterObjects;
            o.ipFilterStrings = ipFilterStrings;
            o.ipFilters = ipFilters;
            o.migration = migration;
            o.mysql = mysql;
            o.mysqlVersion = mysqlVersion;
            o.privateAccess = privateAccess;
            o.privatelinkAccess = privatelinkAccess;
            o.projectToForkFrom = projectToForkFrom;
            o.publicAccess = publicAccess;
            o.recoveryTargetTime = recoveryTargetTime;
            o.serviceToForkFrom = serviceToForkFrom;
            o.staticIps = staticIps;
            return o;
        }
    }
}
