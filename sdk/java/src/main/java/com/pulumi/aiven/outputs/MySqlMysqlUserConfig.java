// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.MySqlMysqlUserConfigMigration;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigMysql;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MySqlMysqlUserConfig {
    private final @Nullable String adminPassword;
    private final @Nullable String adminUsername;
    private final @Nullable String backupHour;
    private final @Nullable String backupMinute;
    private final @Nullable String binlogRetentionPeriod;
    private final @Nullable List<String> ipFilters;
    private final @Nullable MySqlMysqlUserConfigMigration migration;
    private final @Nullable MySqlMysqlUserConfigMysql mysql;
    private final @Nullable String mysqlVersion;
    private final @Nullable MySqlMysqlUserConfigPrivateAccess privateAccess;
    private final @Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess;
    private final @Nullable String projectToForkFrom;
    private final @Nullable MySqlMysqlUserConfigPublicAccess publicAccess;
    private final @Nullable String recoveryTargetTime;
    private final @Nullable String serviceToForkFrom;
    private final @Nullable String staticIps;

    @CustomType.Constructor
    private MySqlMysqlUserConfig(
        @CustomType.Parameter("adminPassword") @Nullable String adminPassword,
        @CustomType.Parameter("adminUsername") @Nullable String adminUsername,
        @CustomType.Parameter("backupHour") @Nullable String backupHour,
        @CustomType.Parameter("backupMinute") @Nullable String backupMinute,
        @CustomType.Parameter("binlogRetentionPeriod") @Nullable String binlogRetentionPeriod,
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("migration") @Nullable MySqlMysqlUserConfigMigration migration,
        @CustomType.Parameter("mysql") @Nullable MySqlMysqlUserConfigMysql mysql,
        @CustomType.Parameter("mysqlVersion") @Nullable String mysqlVersion,
        @CustomType.Parameter("privateAccess") @Nullable MySqlMysqlUserConfigPrivateAccess privateAccess,
        @CustomType.Parameter("privatelinkAccess") @Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess,
        @CustomType.Parameter("projectToForkFrom") @Nullable String projectToForkFrom,
        @CustomType.Parameter("publicAccess") @Nullable MySqlMysqlUserConfigPublicAccess publicAccess,
        @CustomType.Parameter("recoveryTargetTime") @Nullable String recoveryTargetTime,
        @CustomType.Parameter("serviceToForkFrom") @Nullable String serviceToForkFrom,
        @CustomType.Parameter("staticIps") @Nullable String staticIps) {
        this.adminPassword = adminPassword;
        this.adminUsername = adminUsername;
        this.backupHour = backupHour;
        this.backupMinute = backupMinute;
        this.binlogRetentionPeriod = binlogRetentionPeriod;
        this.ipFilters = ipFilters;
        this.migration = migration;
        this.mysql = mysql;
        this.mysqlVersion = mysqlVersion;
        this.privateAccess = privateAccess;
        this.privatelinkAccess = privatelinkAccess;
        this.projectToForkFrom = projectToForkFrom;
        this.publicAccess = publicAccess;
        this.recoveryTargetTime = recoveryTargetTime;
        this.serviceToForkFrom = serviceToForkFrom;
        this.staticIps = staticIps;
    }

    public Optional<String> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    public Optional<String> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }
    public Optional<String> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }
    public Optional<String> binlogRetentionPeriod() {
        return Optional.ofNullable(this.binlogRetentionPeriod);
    }
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<MySqlMysqlUserConfigMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    public Optional<MySqlMysqlUserConfigMysql> mysql() {
        return Optional.ofNullable(this.mysql);
    }
    public Optional<String> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }
    public Optional<MySqlMysqlUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<MySqlMysqlUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    public Optional<MySqlMysqlUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Optional<String> recoveryTargetTime() {
        return Optional.ofNullable(this.recoveryTargetTime);
    }
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MySqlMysqlUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String adminPassword;
        private @Nullable String adminUsername;
        private @Nullable String backupHour;
        private @Nullable String backupMinute;
        private @Nullable String binlogRetentionPeriod;
        private @Nullable List<String> ipFilters;
        private @Nullable MySqlMysqlUserConfigMigration migration;
        private @Nullable MySqlMysqlUserConfigMysql mysql;
        private @Nullable String mysqlVersion;
        private @Nullable MySqlMysqlUserConfigPrivateAccess privateAccess;
        private @Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable MySqlMysqlUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryTargetTime;
        private @Nullable String serviceToForkFrom;
        private @Nullable String staticIps;

        public Builder() {
    	      // Empty
        }

        public Builder(MySqlMysqlUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.backupHour = defaults.backupHour;
    	      this.backupMinute = defaults.backupMinute;
    	      this.binlogRetentionPeriod = defaults.binlogRetentionPeriod;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.mysql = defaults.mysql;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryTargetTime = defaults.recoveryTargetTime;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        public Builder adminPassword(@Nullable String adminPassword) {
            this.adminPassword = adminPassword;
            return this;
        }
        public Builder adminUsername(@Nullable String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }
        public Builder backupHour(@Nullable String backupHour) {
            this.backupHour = backupHour;
            return this;
        }
        public Builder backupMinute(@Nullable String backupMinute) {
            this.backupMinute = backupMinute;
            return this;
        }
        public Builder binlogRetentionPeriod(@Nullable String binlogRetentionPeriod) {
            this.binlogRetentionPeriod = binlogRetentionPeriod;
            return this;
        }
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder migration(@Nullable MySqlMysqlUserConfigMigration migration) {
            this.migration = migration;
            return this;
        }
        public Builder mysql(@Nullable MySqlMysqlUserConfigMysql mysql) {
            this.mysql = mysql;
            return this;
        }
        public Builder mysqlVersion(@Nullable String mysqlVersion) {
            this.mysqlVersion = mysqlVersion;
            return this;
        }
        public Builder privateAccess(@Nullable MySqlMysqlUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        public Builder privatelinkAccess(@Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        public Builder publicAccess(@Nullable MySqlMysqlUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder recoveryTargetTime(@Nullable String recoveryTargetTime) {
            this.recoveryTargetTime = recoveryTargetTime;
            return this;
        }
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }        public MySqlMysqlUserConfig build() {
            return new MySqlMysqlUserConfig(adminPassword, adminUsername, backupHour, backupMinute, binlogRetentionPeriod, ipFilters, migration, mysql, mysqlVersion, privateAccess, privatelinkAccess, projectToForkFrom, publicAccess, recoveryTargetTime, serviceToForkFrom, staticIps);
        }
    }
}
