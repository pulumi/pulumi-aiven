// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.MySqlMysqlUserConfigMigration;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigMysql;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.MySqlMysqlUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MySqlMysqlUserConfig {
    /**
     * @return Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     * 
     */
    private final @Nullable String adminPassword;
    /**
     * @return Custom username for admin user. This must be set only when a new service is being created.
     * 
     */
    private final @Nullable String adminUsername;
    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    private final @Nullable String backupHour;
    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    private final @Nullable String backupMinute;
    /**
     * @return The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     * 
     */
    private final @Nullable String binlogRetentionPeriod;
    /**
     * @return IP filter
     * 
     */
    private final @Nullable List<String> ipFilters;
    /**
     * @return Migrate data from existing server
     * 
     */
    private final @Nullable MySqlMysqlUserConfigMigration migration;
    /**
     * @return mysql.conf configuration values
     * 
     */
    private final @Nullable MySqlMysqlUserConfigMysql mysql;
    /**
     * @return MySQL major version
     * 
     */
    private final @Nullable String mysqlVersion;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private final @Nullable MySqlMysqlUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private final @Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    private final @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private final @Nullable MySqlMysqlUserConfigPublicAccess publicAccess;
    /**
     * @return Recovery target time when forking a service. This has effect only when a new service is being created.
     * 
     */
    private final @Nullable String recoveryTargetTime;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    private final @Nullable String serviceToForkFrom;
    /**
     * @return Static IP addresses
     * 
     */
    private final @Nullable String staticIps;

    @CustomType.Constructor
    private MySqlMysqlUserConfig(
        @CustomType.Parameter("adminPassword") @Nullable String adminPassword,
        @CustomType.Parameter("adminUsername") @Nullable String adminUsername,
        @CustomType.Parameter("backupHour") @Nullable String backupHour,
        @CustomType.Parameter("backupMinute") @Nullable String backupMinute,
        @CustomType.Parameter("binlogRetentionPeriod") @Nullable String binlogRetentionPeriod,
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("migration") @Nullable MySqlMysqlUserConfigMigration migration,
        @CustomType.Parameter("mysql") @Nullable MySqlMysqlUserConfigMysql mysql,
        @CustomType.Parameter("mysqlVersion") @Nullable String mysqlVersion,
        @CustomType.Parameter("privateAccess") @Nullable MySqlMysqlUserConfigPrivateAccess privateAccess,
        @CustomType.Parameter("privatelinkAccess") @Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess,
        @CustomType.Parameter("projectToForkFrom") @Nullable String projectToForkFrom,
        @CustomType.Parameter("publicAccess") @Nullable MySqlMysqlUserConfigPublicAccess publicAccess,
        @CustomType.Parameter("recoveryTargetTime") @Nullable String recoveryTargetTime,
        @CustomType.Parameter("serviceToForkFrom") @Nullable String serviceToForkFrom,
        @CustomType.Parameter("staticIps") @Nullable String staticIps) {
        this.adminPassword = adminPassword;
        this.adminUsername = adminUsername;
        this.backupHour = backupHour;
        this.backupMinute = backupMinute;
        this.binlogRetentionPeriod = binlogRetentionPeriod;
        this.ipFilters = ipFilters;
        this.migration = migration;
        this.mysql = mysql;
        this.mysqlVersion = mysqlVersion;
        this.privateAccess = privateAccess;
        this.privatelinkAccess = privatelinkAccess;
        this.projectToForkFrom = projectToForkFrom;
        this.publicAccess = publicAccess;
        this.recoveryTargetTime = recoveryTargetTime;
        this.serviceToForkFrom = serviceToForkFrom;
        this.staticIps = staticIps;
    }

    /**
     * @return Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     * 
     */
    public Optional<String> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }
    /**
     * @return Custom username for admin user. This must be set only when a new service is being created.
     * 
     */
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<String> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }
    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<String> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }
    /**
     * @return The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     * 
     */
    public Optional<String> binlogRetentionPeriod() {
        return Optional.ofNullable(this.binlogRetentionPeriod);
    }
    /**
     * @return IP filter
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Migrate data from existing server
     * 
     */
    public Optional<MySqlMysqlUserConfigMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    /**
     * @return mysql.conf configuration values
     * 
     */
    public Optional<MySqlMysqlUserConfigMysql> mysql() {
        return Optional.ofNullable(this.mysql);
    }
    /**
     * @return MySQL major version
     * 
     */
    public Optional<String> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<MySqlMysqlUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<MySqlMysqlUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<MySqlMysqlUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Recovery target time when forking a service. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> recoveryTargetTime() {
        return Optional.ofNullable(this.recoveryTargetTime);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Static IP addresses
     * 
     */
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MySqlMysqlUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String adminPassword;
        private @Nullable String adminUsername;
        private @Nullable String backupHour;
        private @Nullable String backupMinute;
        private @Nullable String binlogRetentionPeriod;
        private @Nullable List<String> ipFilters;
        private @Nullable MySqlMysqlUserConfigMigration migration;
        private @Nullable MySqlMysqlUserConfigMysql mysql;
        private @Nullable String mysqlVersion;
        private @Nullable MySqlMysqlUserConfigPrivateAccess privateAccess;
        private @Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable MySqlMysqlUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryTargetTime;
        private @Nullable String serviceToForkFrom;
        private @Nullable String staticIps;

        public Builder() {
    	      // Empty
        }

        public Builder(MySqlMysqlUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.backupHour = defaults.backupHour;
    	      this.backupMinute = defaults.backupMinute;
    	      this.binlogRetentionPeriod = defaults.binlogRetentionPeriod;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.mysql = defaults.mysql;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryTargetTime = defaults.recoveryTargetTime;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        public Builder adminPassword(@Nullable String adminPassword) {
            this.adminPassword = adminPassword;
            return this;
        }
        public Builder adminUsername(@Nullable String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }
        public Builder backupHour(@Nullable String backupHour) {
            this.backupHour = backupHour;
            return this;
        }
        public Builder backupMinute(@Nullable String backupMinute) {
            this.backupMinute = backupMinute;
            return this;
        }
        public Builder binlogRetentionPeriod(@Nullable String binlogRetentionPeriod) {
            this.binlogRetentionPeriod = binlogRetentionPeriod;
            return this;
        }
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder migration(@Nullable MySqlMysqlUserConfigMigration migration) {
            this.migration = migration;
            return this;
        }
        public Builder mysql(@Nullable MySqlMysqlUserConfigMysql mysql) {
            this.mysql = mysql;
            return this;
        }
        public Builder mysqlVersion(@Nullable String mysqlVersion) {
            this.mysqlVersion = mysqlVersion;
            return this;
        }
        public Builder privateAccess(@Nullable MySqlMysqlUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        public Builder privatelinkAccess(@Nullable MySqlMysqlUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        public Builder publicAccess(@Nullable MySqlMysqlUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder recoveryTargetTime(@Nullable String recoveryTargetTime) {
            this.recoveryTargetTime = recoveryTargetTime;
            return this;
        }
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }        public MySqlMysqlUserConfig build() {
            return new MySqlMysqlUserConfig(adminPassword, adminUsername, backupHour, backupMinute, binlogRetentionPeriod, ipFilters, migration, mysql, mysqlVersion, privateAccess, privatelinkAccess, projectToForkFrom, publicAccess, recoveryTargetTime, serviceToForkFrom, staticIps);
        }
    }
}
