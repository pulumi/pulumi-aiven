// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.OrganizationApplicationUserTokenTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationApplicationUserTokenState extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationApplicationUserTokenState Empty = new OrganizationApplicationUserTokenState();

    /**
     * Time when the token was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time when the token was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * True for tokens explicitly created using the `access_tokens` API. False for tokens created when a user logs in.
     * 
     */
    @Import(name="createdManually")
    private @Nullable Output<Boolean> createdManually;

    /**
     * @return True for tokens explicitly created using the `access_tokens` API. False for tokens created when a user logs in.
     * 
     */
    public Optional<Output<Boolean>> createdManually() {
        return Optional.ofNullable(this.createdManually);
    }

    /**
     * True if the API request was made with this token.
     * 
     */
    @Import(name="currentlyActive")
    private @Nullable Output<Boolean> currentlyActive;

    /**
     * @return True if the API request was made with this token.
     * 
     */
    public Optional<Output<Boolean>> currentlyActive() {
        return Optional.ofNullable(this.currentlyActive);
    }

    /**
     * Description of the token.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the token.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Timestamp when the access token will expire unless extended.
     * 
     */
    @Import(name="expiryTime")
    private @Nullable Output<String> expiryTime;

    /**
     * @return Timestamp when the access token will expire unless extended.
     * 
     */
    public Optional<Output<String>> expiryTime() {
        return Optional.ofNullable(this.expiryTime);
    }

    /**
     * Extends the token session duration when the token is used. Only applicable if a value is set for `max_age_seconds`.
     * 
     */
    @Import(name="extendWhenUsed")
    private @Nullable Output<Boolean> extendWhenUsed;

    /**
     * @return Extends the token session duration when the token is used. Only applicable if a value is set for `max_age_seconds`.
     * 
     */
    public Optional<Output<Boolean>> extendWhenUsed() {
        return Optional.ofNullable(this.extendWhenUsed);
    }

    /**
     * Full token.
     * 
     */
    @Import(name="fullToken")
    private @Nullable Output<String> fullToken;

    /**
     * @return Full token.
     * 
     */
    public Optional<Output<String>> fullToken() {
        return Optional.ofNullable(this.fullToken);
    }

    /**
     * IP address of the last request made with this token.
     * 
     */
    @Import(name="lastIp")
    private @Nullable Output<String> lastIp;

    /**
     * @return IP address of the last request made with this token.
     * 
     */
    public Optional<Output<String>> lastIp() {
        return Optional.ofNullable(this.lastIp);
    }

    /**
     * Timestamp when the access token was last used.
     * 
     */
    @Import(name="lastUsedTime")
    private @Nullable Output<String> lastUsedTime;

    /**
     * @return Timestamp when the access token was last used.
     * 
     */
    public Optional<Output<String>> lastUsedTime() {
        return Optional.ofNullable(this.lastUsedTime);
    }

    /**
     * User agent of the last request made with this token.
     * 
     */
    @Import(name="lastUserAgent")
    private @Nullable Output<String> lastUserAgent;

    /**
     * @return User agent of the last request made with this token.
     * 
     */
    public Optional<Output<String>> lastUserAgent() {
        return Optional.ofNullable(this.lastUserAgent);
    }

    /**
     * User agent of the last request made with this token in human-readable format.
     * 
     */
    @Import(name="lastUserAgentHumanReadable")
    private @Nullable Output<String> lastUserAgentHumanReadable;

    /**
     * @return User agent of the last request made with this token in human-readable format.
     * 
     */
    public Optional<Output<String>> lastUserAgentHumanReadable() {
        return Optional.ofNullable(this.lastUserAgentHumanReadable);
    }

    /**
     * The number of hours after which a token expires. Default session duration is 10 hours.
     * 
     */
    @Import(name="maxAgeSeconds")
    private @Nullable Output<Double> maxAgeSeconds;

    /**
     * @return The number of hours after which a token expires. Default session duration is 10 hours.
     * 
     */
    public Optional<Output<Double>> maxAgeSeconds() {
        return Optional.ofNullable(this.maxAgeSeconds);
    }

    /**
     * The ID of the organization the application user belongs to.
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return The ID of the organization the application user belongs to.
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * Restricts the scopes for this token.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Restricts the scopes for this token.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    @Import(name="timeouts")
    private @Nullable Output<OrganizationApplicationUserTokenTimeoutsArgs> timeouts;

    public Optional<Output<OrganizationApplicationUserTokenTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Prefix of the token.
     * 
     */
    @Import(name="tokenPrefix")
    private @Nullable Output<String> tokenPrefix;

    /**
     * @return Prefix of the token.
     * 
     */
    public Optional<Output<String>> tokenPrefix() {
        return Optional.ofNullable(this.tokenPrefix);
    }

    /**
     * The ID of the application user the token is created for.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return The ID of the application user the token is created for.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private OrganizationApplicationUserTokenState() {}

    private OrganizationApplicationUserTokenState(OrganizationApplicationUserTokenState $) {
        this.createTime = $.createTime;
        this.createdManually = $.createdManually;
        this.currentlyActive = $.currentlyActive;
        this.description = $.description;
        this.expiryTime = $.expiryTime;
        this.extendWhenUsed = $.extendWhenUsed;
        this.fullToken = $.fullToken;
        this.lastIp = $.lastIp;
        this.lastUsedTime = $.lastUsedTime;
        this.lastUserAgent = $.lastUserAgent;
        this.lastUserAgentHumanReadable = $.lastUserAgentHumanReadable;
        this.maxAgeSeconds = $.maxAgeSeconds;
        this.organizationId = $.organizationId;
        this.scopes = $.scopes;
        this.timeouts = $.timeouts;
        this.tokenPrefix = $.tokenPrefix;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationApplicationUserTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationApplicationUserTokenState $;

        public Builder() {
            $ = new OrganizationApplicationUserTokenState();
        }

        public Builder(OrganizationApplicationUserTokenState defaults) {
            $ = new OrganizationApplicationUserTokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Time when the token was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time when the token was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param createdManually True for tokens explicitly created using the `access_tokens` API. False for tokens created when a user logs in.
         * 
         * @return builder
         * 
         */
        public Builder createdManually(@Nullable Output<Boolean> createdManually) {
            $.createdManually = createdManually;
            return this;
        }

        /**
         * @param createdManually True for tokens explicitly created using the `access_tokens` API. False for tokens created when a user logs in.
         * 
         * @return builder
         * 
         */
        public Builder createdManually(Boolean createdManually) {
            return createdManually(Output.of(createdManually));
        }

        /**
         * @param currentlyActive True if the API request was made with this token.
         * 
         * @return builder
         * 
         */
        public Builder currentlyActive(@Nullable Output<Boolean> currentlyActive) {
            $.currentlyActive = currentlyActive;
            return this;
        }

        /**
         * @param currentlyActive True if the API request was made with this token.
         * 
         * @return builder
         * 
         */
        public Builder currentlyActive(Boolean currentlyActive) {
            return currentlyActive(Output.of(currentlyActive));
        }

        /**
         * @param description Description of the token.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the token.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expiryTime Timestamp when the access token will expire unless extended.
         * 
         * @return builder
         * 
         */
        public Builder expiryTime(@Nullable Output<String> expiryTime) {
            $.expiryTime = expiryTime;
            return this;
        }

        /**
         * @param expiryTime Timestamp when the access token will expire unless extended.
         * 
         * @return builder
         * 
         */
        public Builder expiryTime(String expiryTime) {
            return expiryTime(Output.of(expiryTime));
        }

        /**
         * @param extendWhenUsed Extends the token session duration when the token is used. Only applicable if a value is set for `max_age_seconds`.
         * 
         * @return builder
         * 
         */
        public Builder extendWhenUsed(@Nullable Output<Boolean> extendWhenUsed) {
            $.extendWhenUsed = extendWhenUsed;
            return this;
        }

        /**
         * @param extendWhenUsed Extends the token session duration when the token is used. Only applicable if a value is set for `max_age_seconds`.
         * 
         * @return builder
         * 
         */
        public Builder extendWhenUsed(Boolean extendWhenUsed) {
            return extendWhenUsed(Output.of(extendWhenUsed));
        }

        /**
         * @param fullToken Full token.
         * 
         * @return builder
         * 
         */
        public Builder fullToken(@Nullable Output<String> fullToken) {
            $.fullToken = fullToken;
            return this;
        }

        /**
         * @param fullToken Full token.
         * 
         * @return builder
         * 
         */
        public Builder fullToken(String fullToken) {
            return fullToken(Output.of(fullToken));
        }

        /**
         * @param lastIp IP address of the last request made with this token.
         * 
         * @return builder
         * 
         */
        public Builder lastIp(@Nullable Output<String> lastIp) {
            $.lastIp = lastIp;
            return this;
        }

        /**
         * @param lastIp IP address of the last request made with this token.
         * 
         * @return builder
         * 
         */
        public Builder lastIp(String lastIp) {
            return lastIp(Output.of(lastIp));
        }

        /**
         * @param lastUsedTime Timestamp when the access token was last used.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedTime(@Nullable Output<String> lastUsedTime) {
            $.lastUsedTime = lastUsedTime;
            return this;
        }

        /**
         * @param lastUsedTime Timestamp when the access token was last used.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedTime(String lastUsedTime) {
            return lastUsedTime(Output.of(lastUsedTime));
        }

        /**
         * @param lastUserAgent User agent of the last request made with this token.
         * 
         * @return builder
         * 
         */
        public Builder lastUserAgent(@Nullable Output<String> lastUserAgent) {
            $.lastUserAgent = lastUserAgent;
            return this;
        }

        /**
         * @param lastUserAgent User agent of the last request made with this token.
         * 
         * @return builder
         * 
         */
        public Builder lastUserAgent(String lastUserAgent) {
            return lastUserAgent(Output.of(lastUserAgent));
        }

        /**
         * @param lastUserAgentHumanReadable User agent of the last request made with this token in human-readable format.
         * 
         * @return builder
         * 
         */
        public Builder lastUserAgentHumanReadable(@Nullable Output<String> lastUserAgentHumanReadable) {
            $.lastUserAgentHumanReadable = lastUserAgentHumanReadable;
            return this;
        }

        /**
         * @param lastUserAgentHumanReadable User agent of the last request made with this token in human-readable format.
         * 
         * @return builder
         * 
         */
        public Builder lastUserAgentHumanReadable(String lastUserAgentHumanReadable) {
            return lastUserAgentHumanReadable(Output.of(lastUserAgentHumanReadable));
        }

        /**
         * @param maxAgeSeconds The number of hours after which a token expires. Default session duration is 10 hours.
         * 
         * @return builder
         * 
         */
        public Builder maxAgeSeconds(@Nullable Output<Double> maxAgeSeconds) {
            $.maxAgeSeconds = maxAgeSeconds;
            return this;
        }

        /**
         * @param maxAgeSeconds The number of hours after which a token expires. Default session duration is 10 hours.
         * 
         * @return builder
         * 
         */
        public Builder maxAgeSeconds(Double maxAgeSeconds) {
            return maxAgeSeconds(Output.of(maxAgeSeconds));
        }

        /**
         * @param organizationId The ID of the organization the application user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId The ID of the organization the application user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param scopes Restricts the scopes for this token.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Restricts the scopes for this token.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Restricts the scopes for this token.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public Builder timeouts(@Nullable Output<OrganizationApplicationUserTokenTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(OrganizationApplicationUserTokenTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param tokenPrefix Prefix of the token.
         * 
         * @return builder
         * 
         */
        public Builder tokenPrefix(@Nullable Output<String> tokenPrefix) {
            $.tokenPrefix = tokenPrefix;
            return this;
        }

        /**
         * @param tokenPrefix Prefix of the token.
         * 
         * @return builder
         * 
         */
        public Builder tokenPrefix(String tokenPrefix) {
            return tokenPrefix(Output.of(tokenPrefix));
        }

        /**
         * @param userId The ID of the application user the token is created for.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of the application user the token is created for.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public OrganizationApplicationUserTokenState build() {
            return $;
        }
    }

}
