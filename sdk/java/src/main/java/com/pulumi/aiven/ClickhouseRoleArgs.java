// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ClickhouseRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClickhouseRoleArgs Empty = new ClickhouseRoleArgs();

    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The role that is to be created. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The role that is to be created. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private ClickhouseRoleArgs() {}

    private ClickhouseRoleArgs(ClickhouseRoleArgs $) {
        this.project = $.project;
        this.role = $.role;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClickhouseRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClickhouseRoleArgs $;

        public Builder() {
            $ = new ClickhouseRoleArgs();
        }

        public Builder(ClickhouseRoleArgs defaults) {
            $ = new ClickhouseRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param role The role that is to be created. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role that is to be created. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public ClickhouseRoleArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ClickhouseRoleArgs", "project");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("ClickhouseRoleArgs", "role");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("ClickhouseRoleArgs", "serviceName");
            }
            return $;
        }
    }

}
