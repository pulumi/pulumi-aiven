// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectUserState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectUserState Empty = new ProjectUserState();

    /**
     * Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
     * 
     */
    @Import(name="accepted")
    private @Nullable Output<Boolean> accepted;

    /**
     * @return Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
     * 
     */
    public Optional<Output<Boolean>> accepted() {
        return Optional.ofNullable(this.accepted);
    }

    /**
     * Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Project membership type. The possible values are `admin`, `developer` and `operator`.
     * 
     */
    @Import(name="memberType")
    private @Nullable Output<String> memberType;

    /**
     * @return Project membership type. The possible values are `admin`, `developer` and `operator`.
     * 
     */
    public Optional<Output<String>> memberType() {
        return Optional.ofNullable(this.memberType);
    }

    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private ProjectUserState() {}

    private ProjectUserState(ProjectUserState $) {
        this.accepted = $.accepted;
        this.email = $.email;
        this.memberType = $.memberType;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectUserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectUserState $;

        public Builder() {
            $ = new ProjectUserState();
        }

        public Builder(ProjectUserState defaults) {
            $ = new ProjectUserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accepted Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
         * 
         * @return builder
         * 
         */
        public Builder accepted(@Nullable Output<Boolean> accepted) {
            $.accepted = accepted;
            return this;
        }

        /**
         * @param accepted Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
         * 
         * @return builder
         * 
         */
        public Builder accepted(Boolean accepted) {
            return accepted(Output.of(accepted));
        }

        /**
         * @param email Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param memberType Project membership type. The possible values are `admin`, `developer` and `operator`.
         * 
         * @return builder
         * 
         */
        public Builder memberType(@Nullable Output<String> memberType) {
            $.memberType = memberType;
            return this;
        }

        /**
         * @param memberType Project membership type. The possible values are `admin`, `developer` and `operator`.
         * 
         * @return builder
         * 
         */
        public Builder memberType(String memberType) {
            return memberType(Output.of(memberType));
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public ProjectUserState build() {
            return $;
        }
    }

}
