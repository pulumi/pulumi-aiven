// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountAuthenticationSamlFieldMapping {
    /**
     * @return Field name for user email
     * 
     */
    private @Nullable String email;
    /**
     * @return Field name for user&#39;s first name
     * 
     */
    private @Nullable String firstName;
    /**
     * @return Field name for user&#39;s identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user id) is highly recommended, as email address may change, requiring relinking user to Aiven user.
     * 
     */
    private @Nullable String identity;
    /**
     * @return Field name for user&#39;s last name
     * 
     */
    private @Nullable String lastName;
    /**
     * @return Field name for user&#39;s full name. If specified, first*name and last*name mappings are ignored
     * 
     */
    private @Nullable String realName;

    private AccountAuthenticationSamlFieldMapping() {}
    /**
     * @return Field name for user email
     * 
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return Field name for user&#39;s first name
     * 
     */
    public Optional<String> firstName() {
        return Optional.ofNullable(this.firstName);
    }
    /**
     * @return Field name for user&#39;s identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user id) is highly recommended, as email address may change, requiring relinking user to Aiven user.
     * 
     */
    public Optional<String> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Field name for user&#39;s last name
     * 
     */
    public Optional<String> lastName() {
        return Optional.ofNullable(this.lastName);
    }
    /**
     * @return Field name for user&#39;s full name. If specified, first*name and last*name mappings are ignored
     * 
     */
    public Optional<String> realName() {
        return Optional.ofNullable(this.realName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountAuthenticationSamlFieldMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String email;
        private @Nullable String firstName;
        private @Nullable String identity;
        private @Nullable String lastName;
        private @Nullable String realName;
        public Builder() {}
        public Builder(AccountAuthenticationSamlFieldMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.firstName = defaults.firstName;
    	      this.identity = defaults.identity;
    	      this.lastName = defaults.lastName;
    	      this.realName = defaults.realName;
        }

        @CustomType.Setter
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(@Nullable String firstName) {
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable String identity) {
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(@Nullable String lastName) {
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder realName(@Nullable String realName) {
            this.realName = realName;
            return this;
        }
        public AccountAuthenticationSamlFieldMapping build() {
            final var _resultValue = new AccountAuthenticationSamlFieldMapping();
            _resultValue.email = email;
            _resultValue.firstName = firstName;
            _resultValue.identity = identity;
            _resultValue.lastName = lastName;
            _resultValue.realName = realName;
            return _resultValue;
        }
    }
}
