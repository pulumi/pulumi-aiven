// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BillingGroupState extends com.pulumi.resources.ResourceArgs {

    public static final BillingGroupState Empty = new BillingGroupState();

    /**
     * Account ID.
     * 
     * @deprecated
     * Use parent_id instead. This field will be removed in the next major release.
     * 
     */
    @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account ID.
     * 
     * @deprecated
     * Use parent_id instead. This field will be removed in the next major release.
     * 
     */
    @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Address lines 1 and 2. For example, street, PO box, or building.
     * 
     */
    @Import(name="addressLines")
    private @Nullable Output<List<String>> addressLines;

    /**
     * @return Address lines 1 and 2. For example, street, PO box, or building.
     * 
     */
    public Optional<Output<List<String>>> addressLines() {
        return Optional.ofNullable(this.addressLines);
    }

    /**
     * Billing currency for the billing group. Supported currencies are: AUD, CAD, CHF, DKK, EUR, GBP, JPY, NOK, NZD, SEK, SGD, and USD.
     * 
     */
    @Import(name="billingCurrency")
    private @Nullable Output<String> billingCurrency;

    /**
     * @return Billing currency for the billing group. Supported currencies are: AUD, CAD, CHF, DKK, EUR, GBP, JPY, NOK, NZD, SEK, SGD, and USD.
     * 
     */
    public Optional<Output<String>> billingCurrency() {
        return Optional.ofNullable(this.billingCurrency);
    }

    /**
     * Email address of billing contacts. Invoices and other payment notifications are emailed to all billing contacts.
     * 
     */
    @Import(name="billingEmails")
    private @Nullable Output<List<String>> billingEmails;

    /**
     * @return Email address of billing contacts. Invoices and other payment notifications are emailed to all billing contacts.
     * 
     */
    public Optional<Output<List<String>>> billingEmails() {
        return Optional.ofNullable(this.billingEmails);
    }

    /**
     * Additional information to include on your invoice (for example, a reference number).
     * 
     */
    @Import(name="billingExtraText")
    private @Nullable Output<String> billingExtraText;

    /**
     * @return Additional information to include on your invoice (for example, a reference number).
     * 
     */
    public Optional<Output<String>> billingExtraText() {
        return Optional.ofNullable(this.billingExtraText);
    }

    /**
     * Credit card ID.
     * 
     */
    @Import(name="cardId")
    private @Nullable Output<String> cardId;

    /**
     * @return Credit card ID.
     * 
     */
    public Optional<Output<String>> cardId() {
        return Optional.ofNullable(this.cardId);
    }

    /**
     * City, district, suburb, town, or village.
     * 
     */
    @Import(name="city")
    private @Nullable Output<String> city;

    /**
     * @return City, district, suburb, town, or village.
     * 
     */
    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * Your company name.
     * 
     */
    @Import(name="company")
    private @Nullable Output<String> company;

    /**
     * @return Your company name.
     * 
     */
    public Optional<Output<String>> company() {
        return Optional.ofNullable(this.company);
    }

    /**
     * ID of the billing group to copy the company name, address, currency, billing contacts, and extra text from.
     * 
     */
    @Import(name="copyFromBillingGroup")
    private @Nullable Output<String> copyFromBillingGroup;

    /**
     * @return ID of the billing group to copy the company name, address, currency, billing contacts, and extra text from.
     * 
     */
    public Optional<Output<String>> copyFromBillingGroup() {
        return Optional.ofNullable(this.copyFromBillingGroup);
    }

    /**
     * Two-letter country code.
     * 
     */
    @Import(name="countryCode")
    private @Nullable Output<String> countryCode;

    /**
     * @return Two-letter country code.
     * 
     */
    public Optional<Output<String>> countryCode() {
        return Optional.ofNullable(this.countryCode);
    }

    /**
     * Name of the billing group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the billing group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Link a billing group to an existing organization by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return Link a billing group to an existing organization by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * Address state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Address state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The VAT identification number for your company.
     * 
     */
    @Import(name="vatId")
    private @Nullable Output<String> vatId;

    /**
     * @return The VAT identification number for your company.
     * 
     */
    public Optional<Output<String>> vatId() {
        return Optional.ofNullable(this.vatId);
    }

    /**
     * Zip or postal code.
     * 
     */
    @Import(name="zipCode")
    private @Nullable Output<String> zipCode;

    /**
     * @return Zip or postal code.
     * 
     */
    public Optional<Output<String>> zipCode() {
        return Optional.ofNullable(this.zipCode);
    }

    private BillingGroupState() {}

    private BillingGroupState(BillingGroupState $) {
        this.accountId = $.accountId;
        this.addressLines = $.addressLines;
        this.billingCurrency = $.billingCurrency;
        this.billingEmails = $.billingEmails;
        this.billingExtraText = $.billingExtraText;
        this.cardId = $.cardId;
        this.city = $.city;
        this.company = $.company;
        this.copyFromBillingGroup = $.copyFromBillingGroup;
        this.countryCode = $.countryCode;
        this.name = $.name;
        this.parentId = $.parentId;
        this.state = $.state;
        this.vatId = $.vatId;
        this.zipCode = $.zipCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BillingGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BillingGroupState $;

        public Builder() {
            $ = new BillingGroupState();
        }

        public Builder(BillingGroupState defaults) {
            $ = new BillingGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account ID.
         * 
         * @return builder
         * 
         * @deprecated
         * Use parent_id instead. This field will be removed in the next major release.
         * 
         */
        @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account ID.
         * 
         * @return builder
         * 
         * @deprecated
         * Use parent_id instead. This field will be removed in the next major release.
         * 
         */
        @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param addressLines Address lines 1 and 2. For example, street, PO box, or building.
         * 
         * @return builder
         * 
         */
        public Builder addressLines(@Nullable Output<List<String>> addressLines) {
            $.addressLines = addressLines;
            return this;
        }

        /**
         * @param addressLines Address lines 1 and 2. For example, street, PO box, or building.
         * 
         * @return builder
         * 
         */
        public Builder addressLines(List<String> addressLines) {
            return addressLines(Output.of(addressLines));
        }

        /**
         * @param addressLines Address lines 1 and 2. For example, street, PO box, or building.
         * 
         * @return builder
         * 
         */
        public Builder addressLines(String... addressLines) {
            return addressLines(List.of(addressLines));
        }

        /**
         * @param billingCurrency Billing currency for the billing group. Supported currencies are: AUD, CAD, CHF, DKK, EUR, GBP, JPY, NOK, NZD, SEK, SGD, and USD.
         * 
         * @return builder
         * 
         */
        public Builder billingCurrency(@Nullable Output<String> billingCurrency) {
            $.billingCurrency = billingCurrency;
            return this;
        }

        /**
         * @param billingCurrency Billing currency for the billing group. Supported currencies are: AUD, CAD, CHF, DKK, EUR, GBP, JPY, NOK, NZD, SEK, SGD, and USD.
         * 
         * @return builder
         * 
         */
        public Builder billingCurrency(String billingCurrency) {
            return billingCurrency(Output.of(billingCurrency));
        }

        /**
         * @param billingEmails Email address of billing contacts. Invoices and other payment notifications are emailed to all billing contacts.
         * 
         * @return builder
         * 
         */
        public Builder billingEmails(@Nullable Output<List<String>> billingEmails) {
            $.billingEmails = billingEmails;
            return this;
        }

        /**
         * @param billingEmails Email address of billing contacts. Invoices and other payment notifications are emailed to all billing contacts.
         * 
         * @return builder
         * 
         */
        public Builder billingEmails(List<String> billingEmails) {
            return billingEmails(Output.of(billingEmails));
        }

        /**
         * @param billingEmails Email address of billing contacts. Invoices and other payment notifications are emailed to all billing contacts.
         * 
         * @return builder
         * 
         */
        public Builder billingEmails(String... billingEmails) {
            return billingEmails(List.of(billingEmails));
        }

        /**
         * @param billingExtraText Additional information to include on your invoice (for example, a reference number).
         * 
         * @return builder
         * 
         */
        public Builder billingExtraText(@Nullable Output<String> billingExtraText) {
            $.billingExtraText = billingExtraText;
            return this;
        }

        /**
         * @param billingExtraText Additional information to include on your invoice (for example, a reference number).
         * 
         * @return builder
         * 
         */
        public Builder billingExtraText(String billingExtraText) {
            return billingExtraText(Output.of(billingExtraText));
        }

        /**
         * @param cardId Credit card ID.
         * 
         * @return builder
         * 
         */
        public Builder cardId(@Nullable Output<String> cardId) {
            $.cardId = cardId;
            return this;
        }

        /**
         * @param cardId Credit card ID.
         * 
         * @return builder
         * 
         */
        public Builder cardId(String cardId) {
            return cardId(Output.of(cardId));
        }

        /**
         * @param city City, district, suburb, town, or village.
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city City, district, suburb, town, or village.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param company Your company name.
         * 
         * @return builder
         * 
         */
        public Builder company(@Nullable Output<String> company) {
            $.company = company;
            return this;
        }

        /**
         * @param company Your company name.
         * 
         * @return builder
         * 
         */
        public Builder company(String company) {
            return company(Output.of(company));
        }

        /**
         * @param copyFromBillingGroup ID of the billing group to copy the company name, address, currency, billing contacts, and extra text from.
         * 
         * @return builder
         * 
         */
        public Builder copyFromBillingGroup(@Nullable Output<String> copyFromBillingGroup) {
            $.copyFromBillingGroup = copyFromBillingGroup;
            return this;
        }

        /**
         * @param copyFromBillingGroup ID of the billing group to copy the company name, address, currency, billing contacts, and extra text from.
         * 
         * @return builder
         * 
         */
        public Builder copyFromBillingGroup(String copyFromBillingGroup) {
            return copyFromBillingGroup(Output.of(copyFromBillingGroup));
        }

        /**
         * @param countryCode Two-letter country code.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(@Nullable Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode Two-letter country code.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param name Name of the billing group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the billing group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentId Link a billing group to an existing organization by using its ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId Link a billing group to an existing organization by using its ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param state Address state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Address state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param vatId The VAT identification number for your company.
         * 
         * @return builder
         * 
         */
        public Builder vatId(@Nullable Output<String> vatId) {
            $.vatId = vatId;
            return this;
        }

        /**
         * @param vatId The VAT identification number for your company.
         * 
         * @return builder
         * 
         */
        public Builder vatId(String vatId) {
            return vatId(Output.of(vatId));
        }

        /**
         * @param zipCode Zip or postal code.
         * 
         * @return builder
         * 
         */
        public Builder zipCode(@Nullable Output<String> zipCode) {
            $.zipCode = zipCode;
            return this;
        }

        /**
         * @param zipCode Zip or postal code.
         * 
         * @return builder
         * 
         */
        public Builder zipCode(String zipCode) {
            return zipCode(Output.of(zipCode));
        }

        public BillingGroupState build() {
            return $;
        }
    }

}
