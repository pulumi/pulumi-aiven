// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceIntegrationEndpointExternalPostgresqlArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceIntegrationEndpointExternalPostgresqlArgs Empty = new ServiceIntegrationEndpointExternalPostgresqlArgs();

    /**
     * Hostname or IP address of the server.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return Hostname or IP address of the server.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * Password.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Password.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * Port number of the server.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return Port number of the server.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * SSL Mode. The default value is `verify-full`.
     * 
     */
    @Import(name="sslMode")
    private @Nullable Output<String> sslMode;

    /**
     * @return SSL Mode. The default value is `verify-full`.
     * 
     */
    public Optional<Output<String>> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }

    /**
     * SSL Root Cert.
     * 
     */
    @Import(name="sslRootCert")
    private @Nullable Output<String> sslRootCert;

    /**
     * @return SSL Root Cert.
     * 
     */
    public Optional<Output<String>> sslRootCert() {
        return Optional.ofNullable(this.sslRootCert);
    }

    /**
     * User name.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return User name.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ServiceIntegrationEndpointExternalPostgresqlArgs() {}

    private ServiceIntegrationEndpointExternalPostgresqlArgs(ServiceIntegrationEndpointExternalPostgresqlArgs $) {
        this.host = $.host;
        this.password = $.password;
        this.port = $.port;
        this.sslMode = $.sslMode;
        this.sslRootCert = $.sslRootCert;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceIntegrationEndpointExternalPostgresqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceIntegrationEndpointExternalPostgresqlArgs $;

        public Builder() {
            $ = new ServiceIntegrationEndpointExternalPostgresqlArgs();
        }

        public Builder(ServiceIntegrationEndpointExternalPostgresqlArgs defaults) {
            $ = new ServiceIntegrationEndpointExternalPostgresqlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host Hostname or IP address of the server.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Hostname or IP address of the server.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password Password.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port Port number of the server.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port number of the server.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param sslMode SSL Mode. The default value is `verify-full`.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(@Nullable Output<String> sslMode) {
            $.sslMode = sslMode;
            return this;
        }

        /**
         * @param sslMode SSL Mode. The default value is `verify-full`.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(String sslMode) {
            return sslMode(Output.of(sslMode));
        }

        /**
         * @param sslRootCert SSL Root Cert.
         * 
         * @return builder
         * 
         */
        public Builder sslRootCert(@Nullable Output<String> sslRootCert) {
            $.sslRootCert = sslRootCert;
            return this;
        }

        /**
         * @param sslRootCert SSL Root Cert.
         * 
         * @return builder
         * 
         */
        public Builder sslRootCert(String sslRootCert) {
            return sslRootCert(Output.of(sslRootCert));
        }

        /**
         * @param username User name.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username User name.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ServiceIntegrationEndpointExternalPostgresqlArgs build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("ServiceIntegrationEndpointExternalPostgresqlArgs", "host");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("ServiceIntegrationEndpointExternalPostgresqlArgs", "password");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("ServiceIntegrationEndpointExternalPostgresqlArgs", "port");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("ServiceIntegrationEndpointExternalPostgresqlArgs", "username");
            }
            return $;
        }
    }

}
