// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.DragonflyDragonflyUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.DragonflyDragonflyUserConfigMigrationArgs;
import com.pulumi.aiven.inputs.DragonflyDragonflyUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.DragonflyDragonflyUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.DragonflyDragonflyUserConfigPublicAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DragonflyDragonflyUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DragonflyDragonflyUserConfigArgs Empty = new DragonflyDragonflyUserConfigArgs();

    /**
     * Evict entries when getting close to maxmemory limit. The default value is `false`.
     * 
     */
    @Import(name="cacheMode")
    private @Nullable Output<Boolean> cacheMode;

    /**
     * @return Evict entries when getting close to maxmemory limit. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> cacheMode() {
        return Optional.ofNullable(this.cacheMode);
    }

    /**
     * Enum: `off`, `rdb`, `dfs`. When persistence is &#39;rdb&#39; or &#39;dfs&#39;, Dragonfly does RDB or DFS dumps every 10 minutes. Dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB/DFS dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    @Import(name="dragonflyPersistence")
    private @Nullable Output<String> dragonflyPersistence;

    /**
     * @return Enum: `off`, `rdb`, `dfs`. When persistence is &#39;rdb&#39; or &#39;dfs&#39;, Dragonfly does RDB or DFS dumps every 10 minutes. Dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB/DFS dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    public Optional<Output<String>> dragonflyPersistence() {
        return Optional.ofNullable(this.dragonflyPersistence);
    }

    /**
     * Require SSL to access Dragonfly. The default value is `true`.
     * 
     */
    @Import(name="dragonflySsl")
    private @Nullable Output<Boolean> dragonflySsl;

    /**
     * @return Require SSL to access Dragonfly. The default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> dragonflySsl() {
        return Optional.ofNullable(this.dragonflySsl);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
     * 
     */
    @Import(name="ipFilterObjects")
    private @Nullable Output<List<DragonflyDragonflyUserConfigIpFilterObjectArgs>> ipFilterObjects;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
     * 
     */
    public Optional<Output<List<DragonflyDragonflyUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Migrate data from existing server
     * 
     */
    @Import(name="migration")
    private @Nullable Output<DragonflyDragonflyUserConfigMigrationArgs> migration;

    /**
     * @return Migrate data from existing server
     * 
     */
    public Optional<Output<DragonflyDragonflyUserConfigMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    /**
     * Allow access to selected service ports from private networks
     * 
     */
    @Import(name="privateAccess")
    private @Nullable Output<DragonflyDragonflyUserConfigPrivateAccessArgs> privateAccess;

    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<Output<DragonflyDragonflyUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    /**
     * Allow access to selected service components through Privatelink
     * 
     */
    @Import(name="privatelinkAccess")
    private @Nullable Output<DragonflyDragonflyUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<Output<DragonflyDragonflyUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    /**
     * Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<DragonflyDragonflyUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<DragonflyDragonflyUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Name of the basebackup to restore in forked service.
     * 
     */
    @Import(name="recoveryBasebackupName")
    private @Nullable Output<String> recoveryBasebackupName;

    /**
     * @return Name of the basebackup to restore in forked service.
     * 
     */
    public Optional<Output<String>> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }

    /**
     * Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    /**
     * Use static public IP addresses.
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    private DragonflyDragonflyUserConfigArgs() {}

    private DragonflyDragonflyUserConfigArgs(DragonflyDragonflyUserConfigArgs $) {
        this.cacheMode = $.cacheMode;
        this.dragonflyPersistence = $.dragonflyPersistence;
        this.dragonflySsl = $.dragonflySsl;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.migration = $.migration;
        this.privateAccess = $.privateAccess;
        this.privatelinkAccess = $.privatelinkAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.recoveryBasebackupName = $.recoveryBasebackupName;
        this.serviceLog = $.serviceLog;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.staticIps = $.staticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DragonflyDragonflyUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DragonflyDragonflyUserConfigArgs $;

        public Builder() {
            $ = new DragonflyDragonflyUserConfigArgs();
        }

        public Builder(DragonflyDragonflyUserConfigArgs defaults) {
            $ = new DragonflyDragonflyUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheMode Evict entries when getting close to maxmemory limit. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder cacheMode(@Nullable Output<Boolean> cacheMode) {
            $.cacheMode = cacheMode;
            return this;
        }

        /**
         * @param cacheMode Evict entries when getting close to maxmemory limit. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder cacheMode(Boolean cacheMode) {
            return cacheMode(Output.of(cacheMode));
        }

        /**
         * @param dragonflyPersistence Enum: `off`, `rdb`, `dfs`. When persistence is &#39;rdb&#39; or &#39;dfs&#39;, Dragonfly does RDB or DFS dumps every 10 minutes. Dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB/DFS dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder dragonflyPersistence(@Nullable Output<String> dragonflyPersistence) {
            $.dragonflyPersistence = dragonflyPersistence;
            return this;
        }

        /**
         * @param dragonflyPersistence Enum: `off`, `rdb`, `dfs`. When persistence is &#39;rdb&#39; or &#39;dfs&#39;, Dragonfly does RDB or DFS dumps every 10 minutes. Dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB/DFS dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder dragonflyPersistence(String dragonflyPersistence) {
            return dragonflyPersistence(Output.of(dragonflyPersistence));
        }

        /**
         * @param dragonflySsl Require SSL to access Dragonfly. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder dragonflySsl(@Nullable Output<Boolean> dragonflySsl) {
            $.dragonflySsl = dragonflySsl;
            return this;
        }

        /**
         * @param dragonflySsl Require SSL to access Dragonfly. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder dragonflySsl(Boolean dragonflySsl) {
            return dragonflySsl(Output.of(dragonflySsl));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(@Nullable Output<List<DragonflyDragonflyUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(List<DragonflyDragonflyUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(DragonflyDragonflyUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(@Nullable Output<DragonflyDragonflyUserConfigMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(DragonflyDragonflyUserConfigMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(@Nullable Output<DragonflyDragonflyUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(DragonflyDragonflyUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(@Nullable Output<DragonflyDragonflyUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(DragonflyDragonflyUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<DragonflyDragonflyUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(DragonflyDragonflyUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(@Nullable Output<String> recoveryBasebackupName) {
            $.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(String recoveryBasebackupName) {
            return recoveryBasebackupName(Output.of(recoveryBasebackupName));
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        public DragonflyDragonflyUserConfigArgs build() {
            return $;
        }
    }

}
