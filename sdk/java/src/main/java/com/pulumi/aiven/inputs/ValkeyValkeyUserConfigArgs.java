// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.ValkeyValkeyUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.ValkeyValkeyUserConfigMigrationArgs;
import com.pulumi.aiven.inputs.ValkeyValkeyUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.ValkeyValkeyUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.ValkeyValkeyUserConfigPublicAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ValkeyValkeyUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ValkeyValkeyUserConfigArgs Empty = new ValkeyValkeyUserConfigArgs();

    /**
     * Additional Cloud Regions for Backup Replication.
     * 
     */
    @Import(name="additionalBackupRegions")
    private @Nullable Output<String> additionalBackupRegions;

    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<Output<String>> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }

    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
     * 
     */
    @Import(name="backupHour")
    private @Nullable Output<Integer> backupHour;

    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
     * 
     */
    public Optional<Output<Integer>> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }

    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
     * 
     */
    @Import(name="backupMinute")
    private @Nullable Output<Integer> backupMinute;

    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
     * 
     */
    public Optional<Output<Integer>> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }

    /**
     * Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
     * 
     */
    @Import(name="enableIpv6")
    private @Nullable Output<Boolean> enableIpv6;

    /**
     * @return Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
     * 
     */
    public Optional<Output<Boolean>> enableIpv6() {
        return Optional.ofNullable(this.enableIpv6);
    }

    /**
     * When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkey_persistence` is set to `off`. Default: `true`.
     * 
     */
    @Import(name="frequentSnapshots")
    private @Nullable Output<Boolean> frequentSnapshots;

    /**
     * @return When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkey_persistence` is set to `off`. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> frequentSnapshots() {
        return Optional.ofNullable(this.frequentSnapshots);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    @Import(name="ipFilterObjects")
    private @Nullable Output<List<ValkeyValkeyUserConfigIpFilterObjectArgs>> ipFilterObjects;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public Optional<Output<List<ValkeyValkeyUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Migrate data from existing server
     * 
     */
    @Import(name="migration")
    private @Nullable Output<ValkeyValkeyUserConfigMigrationArgs> migration;

    /**
     * @return Migrate data from existing server
     * 
     */
    public Optional<Output<ValkeyValkeyUserConfigMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    /**
     * Allow access to selected service ports from private networks
     * 
     */
    @Import(name="privateAccess")
    private @Nullable Output<ValkeyValkeyUserConfigPrivateAccessArgs> privateAccess;

    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<Output<ValkeyValkeyUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    /**
     * Allow access to selected service components through Privatelink
     * 
     */
    @Import(name="privatelinkAccess")
    private @Nullable Output<ValkeyValkeyUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<Output<ValkeyValkeyUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    /**
     * Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<ValkeyValkeyUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<ValkeyValkeyUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    @Import(name="recoveryBasebackupName")
    private @Nullable Output<String> recoveryBasebackupName;

    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    public Optional<Output<String>> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }

    /**
     * Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    /**
     * Use static public IP addresses.
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    /**
     * Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
     * 
     */
    @Import(name="valkeyAclChannelsDefault")
    private @Nullable Output<String> valkeyAclChannelsDefault;

    /**
     * @return Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
     * 
     */
    public Optional<Output<String>> valkeyAclChannelsDefault() {
        return Optional.ofNullable(this.valkeyAclChannelsDefault);
    }

    /**
     * Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency. Default: `1`.
     * 
     */
    @Import(name="valkeyActiveExpireEffort")
    private @Nullable Output<Integer> valkeyActiveExpireEffort;

    /**
     * @return Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency. Default: `1`.
     * 
     */
    public Optional<Output<Integer>> valkeyActiveExpireEffort() {
        return Optional.ofNullable(this.valkeyActiveExpireEffort);
    }

    /**
     * Set Valkey IO thread count. Changing this will cause a restart of the Valkey service. Example: `1`.
     * 
     */
    @Import(name="valkeyIoThreads")
    private @Nullable Output<Integer> valkeyIoThreads;

    /**
     * @return Set Valkey IO thread count. Changing this will cause a restart of the Valkey service. Example: `1`.
     * 
     */
    public Optional<Output<Integer>> valkeyIoThreads() {
        return Optional.ofNullable(this.valkeyIoThreads);
    }

    /**
     * LFU maxmemory-policy counter decay time in minutes. Default: `1`.
     * 
     */
    @Import(name="valkeyLfuDecayTime")
    private @Nullable Output<Integer> valkeyLfuDecayTime;

    /**
     * @return LFU maxmemory-policy counter decay time in minutes. Default: `1`.
     * 
     */
    public Optional<Output<Integer>> valkeyLfuDecayTime() {
        return Optional.ofNullable(this.valkeyLfuDecayTime);
    }

    /**
     * Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
     * 
     */
    @Import(name="valkeyLfuLogFactor")
    private @Nullable Output<Integer> valkeyLfuLogFactor;

    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
     * 
     */
    public Optional<Output<Integer>> valkeyLfuLogFactor() {
        return Optional.ofNullable(this.valkeyLfuLogFactor);
    }

    /**
     * Enum: `allkeys-lfu`, `allkeys-lru`, `allkeys-random`, `noeviction`, `volatile-lfu`, `volatile-lru`, `volatile-random`, `volatile-ttl`. Valkey maxmemory-policy. Default: `noeviction`.
     * 
     */
    @Import(name="valkeyMaxmemoryPolicy")
    private @Nullable Output<String> valkeyMaxmemoryPolicy;

    /**
     * @return Enum: `allkeys-lfu`, `allkeys-lru`, `allkeys-random`, `noeviction`, `volatile-lfu`, `volatile-lru`, `volatile-random`, `volatile-ttl`. Valkey maxmemory-policy. Default: `noeviction`.
     * 
     */
    public Optional<Output<String>> valkeyMaxmemoryPolicy() {
        return Optional.ofNullable(this.valkeyMaxmemoryPolicy);
    }

    /**
     * Set notify-keyspace-events option.
     * 
     */
    @Import(name="valkeyNotifyKeyspaceEvents")
    private @Nullable Output<String> valkeyNotifyKeyspaceEvents;

    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    public Optional<Output<String>> valkeyNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.valkeyNotifyKeyspaceEvents);
    }

    /**
     * Set number of Valkey databases. Changing this will cause a restart of the Valkey service. Example: `16`.
     * 
     */
    @Import(name="valkeyNumberOfDatabases")
    private @Nullable Output<Integer> valkeyNumberOfDatabases;

    /**
     * @return Set number of Valkey databases. Changing this will cause a restart of the Valkey service. Example: `16`.
     * 
     */
    public Optional<Output<Integer>> valkeyNumberOfDatabases() {
        return Optional.ofNullable(this.valkeyNumberOfDatabases);
    }

    /**
     * Enum: `off`, `rdb`. When persistence is `rdb`, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    @Import(name="valkeyPersistence")
    private @Nullable Output<String> valkeyPersistence;

    /**
     * @return Enum: `off`, `rdb`. When persistence is `rdb`, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    public Optional<Output<String>> valkeyPersistence() {
        return Optional.ofNullable(this.valkeyPersistence);
    }

    /**
     * Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
     * 
     */
    @Import(name="valkeyPubsubClientOutputBufferLimit")
    private @Nullable Output<Integer> valkeyPubsubClientOutputBufferLimit;

    /**
     * @return Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
     * 
     */
    public Optional<Output<Integer>> valkeyPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.valkeyPubsubClientOutputBufferLimit);
    }

    /**
     * Require SSL to access Valkey. Default: `true`.
     * 
     */
    @Import(name="valkeySsl")
    private @Nullable Output<Boolean> valkeySsl;

    /**
     * @return Require SSL to access Valkey. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> valkeySsl() {
        return Optional.ofNullable(this.valkeySsl);
    }

    /**
     * Valkey idle connection timeout in seconds. Default: `300`.
     * 
     */
    @Import(name="valkeyTimeout")
    private @Nullable Output<Integer> valkeyTimeout;

    /**
     * @return Valkey idle connection timeout in seconds. Default: `300`.
     * 
     */
    public Optional<Output<Integer>> valkeyTimeout() {
        return Optional.ofNullable(this.valkeyTimeout);
    }

    private ValkeyValkeyUserConfigArgs() {}

    private ValkeyValkeyUserConfigArgs(ValkeyValkeyUserConfigArgs $) {
        this.additionalBackupRegions = $.additionalBackupRegions;
        this.backupHour = $.backupHour;
        this.backupMinute = $.backupMinute;
        this.enableIpv6 = $.enableIpv6;
        this.frequentSnapshots = $.frequentSnapshots;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.migration = $.migration;
        this.privateAccess = $.privateAccess;
        this.privatelinkAccess = $.privatelinkAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.recoveryBasebackupName = $.recoveryBasebackupName;
        this.serviceLog = $.serviceLog;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.staticIps = $.staticIps;
        this.valkeyAclChannelsDefault = $.valkeyAclChannelsDefault;
        this.valkeyActiveExpireEffort = $.valkeyActiveExpireEffort;
        this.valkeyIoThreads = $.valkeyIoThreads;
        this.valkeyLfuDecayTime = $.valkeyLfuDecayTime;
        this.valkeyLfuLogFactor = $.valkeyLfuLogFactor;
        this.valkeyMaxmemoryPolicy = $.valkeyMaxmemoryPolicy;
        this.valkeyNotifyKeyspaceEvents = $.valkeyNotifyKeyspaceEvents;
        this.valkeyNumberOfDatabases = $.valkeyNumberOfDatabases;
        this.valkeyPersistence = $.valkeyPersistence;
        this.valkeyPubsubClientOutputBufferLimit = $.valkeyPubsubClientOutputBufferLimit;
        this.valkeySsl = $.valkeySsl;
        this.valkeyTimeout = $.valkeyTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ValkeyValkeyUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ValkeyValkeyUserConfigArgs $;

        public Builder() {
            $ = new ValkeyValkeyUserConfigArgs();
        }

        public Builder(ValkeyValkeyUserConfigArgs defaults) {
            $ = new ValkeyValkeyUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(@Nullable Output<String> additionalBackupRegions) {
            $.additionalBackupRegions = additionalBackupRegions;
            return this;
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(String additionalBackupRegions) {
            return additionalBackupRegions(Output.of(additionalBackupRegions));
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(@Nullable Output<Integer> backupHour) {
            $.backupHour = backupHour;
            return this;
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(Integer backupHour) {
            return backupHour(Output.of(backupHour));
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(@Nullable Output<Integer> backupMinute) {
            $.backupMinute = backupMinute;
            return this;
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(Integer backupMinute) {
            return backupMinute(Output.of(backupMinute));
        }

        /**
         * @param enableIpv6 Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(@Nullable Output<Boolean> enableIpv6) {
            $.enableIpv6 = enableIpv6;
            return this;
        }

        /**
         * @param enableIpv6 Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(Boolean enableIpv6) {
            return enableIpv6(Output.of(enableIpv6));
        }

        /**
         * @param frequentSnapshots When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkey_persistence` is set to `off`. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder frequentSnapshots(@Nullable Output<Boolean> frequentSnapshots) {
            $.frequentSnapshots = frequentSnapshots;
            return this;
        }

        /**
         * @param frequentSnapshots When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkey_persistence` is set to `off`. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder frequentSnapshots(Boolean frequentSnapshots) {
            return frequentSnapshots(Output.of(frequentSnapshots));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(@Nullable Output<List<ValkeyValkeyUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(List<ValkeyValkeyUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(ValkeyValkeyUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(@Nullable Output<ValkeyValkeyUserConfigMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(ValkeyValkeyUserConfigMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(@Nullable Output<ValkeyValkeyUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(ValkeyValkeyUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(@Nullable Output<ValkeyValkeyUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(ValkeyValkeyUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<ValkeyValkeyUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(ValkeyValkeyUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(@Nullable Output<String> recoveryBasebackupName) {
            $.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(String recoveryBasebackupName) {
            return recoveryBasebackupName(Output.of(recoveryBasebackupName));
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        /**
         * @param valkeyAclChannelsDefault Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
         * 
         * @return builder
         * 
         */
        public Builder valkeyAclChannelsDefault(@Nullable Output<String> valkeyAclChannelsDefault) {
            $.valkeyAclChannelsDefault = valkeyAclChannelsDefault;
            return this;
        }

        /**
         * @param valkeyAclChannelsDefault Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
         * 
         * @return builder
         * 
         */
        public Builder valkeyAclChannelsDefault(String valkeyAclChannelsDefault) {
            return valkeyAclChannelsDefault(Output.of(valkeyAclChannelsDefault));
        }

        /**
         * @param valkeyActiveExpireEffort Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyActiveExpireEffort(@Nullable Output<Integer> valkeyActiveExpireEffort) {
            $.valkeyActiveExpireEffort = valkeyActiveExpireEffort;
            return this;
        }

        /**
         * @param valkeyActiveExpireEffort Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyActiveExpireEffort(Integer valkeyActiveExpireEffort) {
            return valkeyActiveExpireEffort(Output.of(valkeyActiveExpireEffort));
        }

        /**
         * @param valkeyIoThreads Set Valkey IO thread count. Changing this will cause a restart of the Valkey service. Example: `1`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyIoThreads(@Nullable Output<Integer> valkeyIoThreads) {
            $.valkeyIoThreads = valkeyIoThreads;
            return this;
        }

        /**
         * @param valkeyIoThreads Set Valkey IO thread count. Changing this will cause a restart of the Valkey service. Example: `1`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyIoThreads(Integer valkeyIoThreads) {
            return valkeyIoThreads(Output.of(valkeyIoThreads));
        }

        /**
         * @param valkeyLfuDecayTime LFU maxmemory-policy counter decay time in minutes. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyLfuDecayTime(@Nullable Output<Integer> valkeyLfuDecayTime) {
            $.valkeyLfuDecayTime = valkeyLfuDecayTime;
            return this;
        }

        /**
         * @param valkeyLfuDecayTime LFU maxmemory-policy counter decay time in minutes. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyLfuDecayTime(Integer valkeyLfuDecayTime) {
            return valkeyLfuDecayTime(Output.of(valkeyLfuDecayTime));
        }

        /**
         * @param valkeyLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyLfuLogFactor(@Nullable Output<Integer> valkeyLfuLogFactor) {
            $.valkeyLfuLogFactor = valkeyLfuLogFactor;
            return this;
        }

        /**
         * @param valkeyLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyLfuLogFactor(Integer valkeyLfuLogFactor) {
            return valkeyLfuLogFactor(Output.of(valkeyLfuLogFactor));
        }

        /**
         * @param valkeyMaxmemoryPolicy Enum: `allkeys-lfu`, `allkeys-lru`, `allkeys-random`, `noeviction`, `volatile-lfu`, `volatile-lru`, `volatile-random`, `volatile-ttl`. Valkey maxmemory-policy. Default: `noeviction`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyMaxmemoryPolicy(@Nullable Output<String> valkeyMaxmemoryPolicy) {
            $.valkeyMaxmemoryPolicy = valkeyMaxmemoryPolicy;
            return this;
        }

        /**
         * @param valkeyMaxmemoryPolicy Enum: `allkeys-lfu`, `allkeys-lru`, `allkeys-random`, `noeviction`, `volatile-lfu`, `volatile-lru`, `volatile-random`, `volatile-ttl`. Valkey maxmemory-policy. Default: `noeviction`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyMaxmemoryPolicy(String valkeyMaxmemoryPolicy) {
            return valkeyMaxmemoryPolicy(Output.of(valkeyMaxmemoryPolicy));
        }

        /**
         * @param valkeyNotifyKeyspaceEvents Set notify-keyspace-events option.
         * 
         * @return builder
         * 
         */
        public Builder valkeyNotifyKeyspaceEvents(@Nullable Output<String> valkeyNotifyKeyspaceEvents) {
            $.valkeyNotifyKeyspaceEvents = valkeyNotifyKeyspaceEvents;
            return this;
        }

        /**
         * @param valkeyNotifyKeyspaceEvents Set notify-keyspace-events option.
         * 
         * @return builder
         * 
         */
        public Builder valkeyNotifyKeyspaceEvents(String valkeyNotifyKeyspaceEvents) {
            return valkeyNotifyKeyspaceEvents(Output.of(valkeyNotifyKeyspaceEvents));
        }

        /**
         * @param valkeyNumberOfDatabases Set number of Valkey databases. Changing this will cause a restart of the Valkey service. Example: `16`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyNumberOfDatabases(@Nullable Output<Integer> valkeyNumberOfDatabases) {
            $.valkeyNumberOfDatabases = valkeyNumberOfDatabases;
            return this;
        }

        /**
         * @param valkeyNumberOfDatabases Set number of Valkey databases. Changing this will cause a restart of the Valkey service. Example: `16`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyNumberOfDatabases(Integer valkeyNumberOfDatabases) {
            return valkeyNumberOfDatabases(Output.of(valkeyNumberOfDatabases));
        }

        /**
         * @param valkeyPersistence Enum: `off`, `rdb`. When persistence is `rdb`, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder valkeyPersistence(@Nullable Output<String> valkeyPersistence) {
            $.valkeyPersistence = valkeyPersistence;
            return this;
        }

        /**
         * @param valkeyPersistence Enum: `off`, `rdb`. When persistence is `rdb`, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder valkeyPersistence(String valkeyPersistence) {
            return valkeyPersistence(Output.of(valkeyPersistence));
        }

        /**
         * @param valkeyPubsubClientOutputBufferLimit Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyPubsubClientOutputBufferLimit(@Nullable Output<Integer> valkeyPubsubClientOutputBufferLimit) {
            $.valkeyPubsubClientOutputBufferLimit = valkeyPubsubClientOutputBufferLimit;
            return this;
        }

        /**
         * @param valkeyPubsubClientOutputBufferLimit Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyPubsubClientOutputBufferLimit(Integer valkeyPubsubClientOutputBufferLimit) {
            return valkeyPubsubClientOutputBufferLimit(Output.of(valkeyPubsubClientOutputBufferLimit));
        }

        /**
         * @param valkeySsl Require SSL to access Valkey. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder valkeySsl(@Nullable Output<Boolean> valkeySsl) {
            $.valkeySsl = valkeySsl;
            return this;
        }

        /**
         * @param valkeySsl Require SSL to access Valkey. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder valkeySsl(Boolean valkeySsl) {
            return valkeySsl(Output.of(valkeySsl));
        }

        /**
         * @param valkeyTimeout Valkey idle connection timeout in seconds. Default: `300`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyTimeout(@Nullable Output<Integer> valkeyTimeout) {
            $.valkeyTimeout = valkeyTimeout;
            return this;
        }

        /**
         * @param valkeyTimeout Valkey idle connection timeout in seconds. Default: `300`.
         * 
         * @return builder
         * 
         */
        public Builder valkeyTimeout(Integer valkeyTimeout) {
            return valkeyTimeout(Output.of(valkeyTimeout));
        }

        public ValkeyValkeyUserConfigArgs build() {
            return $;
        }
    }

}
