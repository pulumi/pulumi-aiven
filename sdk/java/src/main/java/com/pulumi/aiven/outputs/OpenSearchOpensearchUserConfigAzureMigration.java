// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OpenSearchOpensearchUserConfigAzureMigration {
    /**
     * @return Account name.
     * 
     */
    private String account;
    /**
     * @return The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    private String basePath;
    /**
     * @return Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    private @Nullable String chunkSize;
    /**
     * @return When set to true metadata files are stored in compressed format.
     * 
     */
    private @Nullable Boolean compress;
    /**
     * @return Azure container name.
     * 
     */
    private String container;
    /**
     * @return Defines the DNS suffix for Azure Storage endpoints.
     * 
     */
    private @Nullable String endpointSuffix;
    /**
     * @return Whether to restore aliases alongside their associated indexes. Default is true.
     * 
     */
    private @Nullable Boolean includeAliases;
    /**
     * @return A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. Example: `metrics*,logs*,data-20240823`.
     * 
     */
    private String indices;
    /**
     * @return Azure account secret key. One of key or sas_token should be specified.
     * 
     */
    private @Nullable String key;
    /**
     * @return Whether the repository is read-only. Default: `false`.
     * 
     */
    private @Nullable Boolean readonly;
    /**
     * @return If true, restore the cluster state. Defaults to false.
     * 
     */
    private @Nullable Boolean restoreGlobalState;
    /**
     * @return A shared access signatures (SAS) token. One of key or sas_token should be specified.
     * 
     */
    private @Nullable String sasToken;
    /**
     * @return The snapshot name to restore from.
     * 
     */
    private String snapshotName;

    private OpenSearchOpensearchUserConfigAzureMigration() {}
    /**
     * @return Account name.
     * 
     */
    public String account() {
        return this.account;
    }
    /**
     * @return The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    public String basePath() {
        return this.basePath;
    }
    /**
     * @return Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    public Optional<String> chunkSize() {
        return Optional.ofNullable(this.chunkSize);
    }
    /**
     * @return When set to true metadata files are stored in compressed format.
     * 
     */
    public Optional<Boolean> compress() {
        return Optional.ofNullable(this.compress);
    }
    /**
     * @return Azure container name.
     * 
     */
    public String container() {
        return this.container;
    }
    /**
     * @return Defines the DNS suffix for Azure Storage endpoints.
     * 
     */
    public Optional<String> endpointSuffix() {
        return Optional.ofNullable(this.endpointSuffix);
    }
    /**
     * @return Whether to restore aliases alongside their associated indexes. Default is true.
     * 
     */
    public Optional<Boolean> includeAliases() {
        return Optional.ofNullable(this.includeAliases);
    }
    /**
     * @return A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. Example: `metrics*,logs*,data-20240823`.
     * 
     */
    public String indices() {
        return this.indices;
    }
    /**
     * @return Azure account secret key. One of key or sas_token should be specified.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Whether the repository is read-only. Default: `false`.
     * 
     */
    public Optional<Boolean> readonly() {
        return Optional.ofNullable(this.readonly);
    }
    /**
     * @return If true, restore the cluster state. Defaults to false.
     * 
     */
    public Optional<Boolean> restoreGlobalState() {
        return Optional.ofNullable(this.restoreGlobalState);
    }
    /**
     * @return A shared access signatures (SAS) token. One of key or sas_token should be specified.
     * 
     */
    public Optional<String> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }
    /**
     * @return The snapshot name to restore from.
     * 
     */
    public String snapshotName() {
        return this.snapshotName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenSearchOpensearchUserConfigAzureMigration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String account;
        private String basePath;
        private @Nullable String chunkSize;
        private @Nullable Boolean compress;
        private String container;
        private @Nullable String endpointSuffix;
        private @Nullable Boolean includeAliases;
        private String indices;
        private @Nullable String key;
        private @Nullable Boolean readonly;
        private @Nullable Boolean restoreGlobalState;
        private @Nullable String sasToken;
        private String snapshotName;
        public Builder() {}
        public Builder(OpenSearchOpensearchUserConfigAzureMigration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.account = defaults.account;
    	      this.basePath = defaults.basePath;
    	      this.chunkSize = defaults.chunkSize;
    	      this.compress = defaults.compress;
    	      this.container = defaults.container;
    	      this.endpointSuffix = defaults.endpointSuffix;
    	      this.includeAliases = defaults.includeAliases;
    	      this.indices = defaults.indices;
    	      this.key = defaults.key;
    	      this.readonly = defaults.readonly;
    	      this.restoreGlobalState = defaults.restoreGlobalState;
    	      this.sasToken = defaults.sasToken;
    	      this.snapshotName = defaults.snapshotName;
        }

        @CustomType.Setter
        public Builder account(String account) {
            if (account == null) {
              throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigration", "account");
            }
            this.account = account;
            return this;
        }
        @CustomType.Setter
        public Builder basePath(String basePath) {
            if (basePath == null) {
              throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigration", "basePath");
            }
            this.basePath = basePath;
            return this;
        }
        @CustomType.Setter
        public Builder chunkSize(@Nullable String chunkSize) {

            this.chunkSize = chunkSize;
            return this;
        }
        @CustomType.Setter
        public Builder compress(@Nullable Boolean compress) {

            this.compress = compress;
            return this;
        }
        @CustomType.Setter
        public Builder container(String container) {
            if (container == null) {
              throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigration", "container");
            }
            this.container = container;
            return this;
        }
        @CustomType.Setter
        public Builder endpointSuffix(@Nullable String endpointSuffix) {

            this.endpointSuffix = endpointSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder includeAliases(@Nullable Boolean includeAliases) {

            this.includeAliases = includeAliases;
            return this;
        }
        @CustomType.Setter
        public Builder indices(String indices) {
            if (indices == null) {
              throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigration", "indices");
            }
            this.indices = indices;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder readonly(@Nullable Boolean readonly) {

            this.readonly = readonly;
            return this;
        }
        @CustomType.Setter
        public Builder restoreGlobalState(@Nullable Boolean restoreGlobalState) {

            this.restoreGlobalState = restoreGlobalState;
            return this;
        }
        @CustomType.Setter
        public Builder sasToken(@Nullable String sasToken) {

            this.sasToken = sasToken;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotName(String snapshotName) {
            if (snapshotName == null) {
              throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigration", "snapshotName");
            }
            this.snapshotName = snapshotName;
            return this;
        }
        public OpenSearchOpensearchUserConfigAzureMigration build() {
            final var _resultValue = new OpenSearchOpensearchUserConfigAzureMigration();
            _resultValue.account = account;
            _resultValue.basePath = basePath;
            _resultValue.chunkSize = chunkSize;
            _resultValue.compress = compress;
            _resultValue.container = container;
            _resultValue.endpointSuffix = endpointSuffix;
            _resultValue.includeAliases = includeAliases;
            _resultValue.indices = indices;
            _resultValue.key = key;
            _resultValue.readonly = readonly;
            _resultValue.restoreGlobalState = restoreGlobalState;
            _resultValue.sasToken = sasToken;
            _resultValue.snapshotName = snapshotName;
            return _resultValue;
        }
    }
}
