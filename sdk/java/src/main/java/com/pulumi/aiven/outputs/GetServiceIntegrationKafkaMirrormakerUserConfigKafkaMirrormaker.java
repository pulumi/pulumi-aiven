// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormaker {
    /**
     * @return Enum: `earliest`, `latest`. Set where consumer starts to consume data. Value `earliest`: Start replication from the earliest offset. Value `latest`: Start replication from the latest offset. Default is `earliest`.
     * 
     */
    private @Nullable String consumerAutoOffsetReset;
    /**
     * @return The minimum amount of data the server should return for a fetch request. Example: `1024`.
     * 
     */
    private @Nullable Integer consumerFetchMinBytes;
    /**
     * @return Set consumer max.poll.records. The default is 500. Example: `500`.
     * 
     */
    private @Nullable Integer consumerMaxPollRecords;
    /**
     * @return The batch size in bytes producer will attempt to collect before publishing to broker. Example: `1024`.
     * 
     */
    private @Nullable Integer producerBatchSize;
    /**
     * @return The amount of bytes producer can use for buffering data before publishing to broker. Example: `8388608`.
     * 
     */
    private @Nullable Integer producerBufferMemory;
    /**
     * @return Enum: `gzip`, `snappy`, `lz4`, `zstd`, `none`. Specify the default compression type for producers. This configuration accepts the standard compression codecs (`gzip`, `snappy`, `lz4`, `zstd`). It additionally accepts `none` which is the default and equivalent to no compression.
     * 
     */
    private @Nullable String producerCompressionType;
    /**
     * @return The linger time (ms) for waiting new data to arrive for publishing. Example: `100`.
     * 
     */
    private @Nullable Integer producerLingerMs;
    /**
     * @return The maximum request size in bytes. Example: `1048576`.
     * 
     */
    private @Nullable Integer producerMaxRequestSize;

    private GetServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormaker() {}
    /**
     * @return Enum: `earliest`, `latest`. Set where consumer starts to consume data. Value `earliest`: Start replication from the earliest offset. Value `latest`: Start replication from the latest offset. Default is `earliest`.
     * 
     */
    public Optional<String> consumerAutoOffsetReset() {
        return Optional.ofNullable(this.consumerAutoOffsetReset);
    }
    /**
     * @return The minimum amount of data the server should return for a fetch request. Example: `1024`.
     * 
     */
    public Optional<Integer> consumerFetchMinBytes() {
        return Optional.ofNullable(this.consumerFetchMinBytes);
    }
    /**
     * @return Set consumer max.poll.records. The default is 500. Example: `500`.
     * 
     */
    public Optional<Integer> consumerMaxPollRecords() {
        return Optional.ofNullable(this.consumerMaxPollRecords);
    }
    /**
     * @return The batch size in bytes producer will attempt to collect before publishing to broker. Example: `1024`.
     * 
     */
    public Optional<Integer> producerBatchSize() {
        return Optional.ofNullable(this.producerBatchSize);
    }
    /**
     * @return The amount of bytes producer can use for buffering data before publishing to broker. Example: `8388608`.
     * 
     */
    public Optional<Integer> producerBufferMemory() {
        return Optional.ofNullable(this.producerBufferMemory);
    }
    /**
     * @return Enum: `gzip`, `snappy`, `lz4`, `zstd`, `none`. Specify the default compression type for producers. This configuration accepts the standard compression codecs (`gzip`, `snappy`, `lz4`, `zstd`). It additionally accepts `none` which is the default and equivalent to no compression.
     * 
     */
    public Optional<String> producerCompressionType() {
        return Optional.ofNullable(this.producerCompressionType);
    }
    /**
     * @return The linger time (ms) for waiting new data to arrive for publishing. Example: `100`.
     * 
     */
    public Optional<Integer> producerLingerMs() {
        return Optional.ofNullable(this.producerLingerMs);
    }
    /**
     * @return The maximum request size in bytes. Example: `1048576`.
     * 
     */
    public Optional<Integer> producerMaxRequestSize() {
        return Optional.ofNullable(this.producerMaxRequestSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormaker defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String consumerAutoOffsetReset;
        private @Nullable Integer consumerFetchMinBytes;
        private @Nullable Integer consumerMaxPollRecords;
        private @Nullable Integer producerBatchSize;
        private @Nullable Integer producerBufferMemory;
        private @Nullable String producerCompressionType;
        private @Nullable Integer producerLingerMs;
        private @Nullable Integer producerMaxRequestSize;
        public Builder() {}
        public Builder(GetServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormaker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consumerAutoOffsetReset = defaults.consumerAutoOffsetReset;
    	      this.consumerFetchMinBytes = defaults.consumerFetchMinBytes;
    	      this.consumerMaxPollRecords = defaults.consumerMaxPollRecords;
    	      this.producerBatchSize = defaults.producerBatchSize;
    	      this.producerBufferMemory = defaults.producerBufferMemory;
    	      this.producerCompressionType = defaults.producerCompressionType;
    	      this.producerLingerMs = defaults.producerLingerMs;
    	      this.producerMaxRequestSize = defaults.producerMaxRequestSize;
        }

        @CustomType.Setter
        public Builder consumerAutoOffsetReset(@Nullable String consumerAutoOffsetReset) {

            this.consumerAutoOffsetReset = consumerAutoOffsetReset;
            return this;
        }
        @CustomType.Setter
        public Builder consumerFetchMinBytes(@Nullable Integer consumerFetchMinBytes) {

            this.consumerFetchMinBytes = consumerFetchMinBytes;
            return this;
        }
        @CustomType.Setter
        public Builder consumerMaxPollRecords(@Nullable Integer consumerMaxPollRecords) {

            this.consumerMaxPollRecords = consumerMaxPollRecords;
            return this;
        }
        @CustomType.Setter
        public Builder producerBatchSize(@Nullable Integer producerBatchSize) {

            this.producerBatchSize = producerBatchSize;
            return this;
        }
        @CustomType.Setter
        public Builder producerBufferMemory(@Nullable Integer producerBufferMemory) {

            this.producerBufferMemory = producerBufferMemory;
            return this;
        }
        @CustomType.Setter
        public Builder producerCompressionType(@Nullable String producerCompressionType) {

            this.producerCompressionType = producerCompressionType;
            return this;
        }
        @CustomType.Setter
        public Builder producerLingerMs(@Nullable Integer producerLingerMs) {

            this.producerLingerMs = producerLingerMs;
            return this;
        }
        @CustomType.Setter
        public Builder producerMaxRequestSize(@Nullable Integer producerMaxRequestSize) {

            this.producerMaxRequestSize = producerMaxRequestSize;
            return this;
        }
        public GetServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormaker build() {
            final var _resultValue = new GetServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormaker();
            _resultValue.consumerAutoOffsetReset = consumerAutoOffsetReset;
            _resultValue.consumerFetchMinBytes = consumerFetchMinBytes;
            _resultValue.consumerMaxPollRecords = consumerMaxPollRecords;
            _resultValue.producerBatchSize = producerBatchSize;
            _resultValue.producerBufferMemory = producerBufferMemory;
            _resultValue.producerCompressionType = producerCompressionType;
            _resultValue.producerLingerMs = producerLingerMs;
            _resultValue.producerMaxRequestSize = producerMaxRequestSize;
            return _resultValue;
        }
    }
}
