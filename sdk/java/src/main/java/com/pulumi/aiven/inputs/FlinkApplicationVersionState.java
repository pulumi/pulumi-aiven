// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.FlinkApplicationVersionSinkArgs;
import com.pulumi.aiven.inputs.FlinkApplicationVersionSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkApplicationVersionState extends com.pulumi.resources.ResourceArgs {

    public static final FlinkApplicationVersionState Empty = new FlinkApplicationVersionState();

    /**
     * Application ID
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return Application ID
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * Application version ID
     * 
     */
    @Import(name="applicationVersionId")
    private @Nullable Output<String> applicationVersionId;

    /**
     * @return Application version ID
     * 
     */
    public Optional<Output<String>> applicationVersionId() {
        return Optional.ofNullable(this.applicationVersionId);
    }

    /**
     * Application version creation time
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Application version creation time
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Application version creator
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Application version creator
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Application sink
     * 
     */
    @Import(name="sink")
    private @Nullable Output<List<FlinkApplicationVersionSinkArgs>> sink;

    /**
     * @return Application sink
     * 
     */
    public Optional<Output<List<FlinkApplicationVersionSinkArgs>>> sink() {
        return Optional.ofNullable(this.sink);
    }

    /**
     * Application sinks
     * 
     * @deprecated
     * This field is deprecated and will be removed in the next major release. Use `sink` instead.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
    @Import(name="sinks")
    private @Nullable Output<List<FlinkApplicationVersionSinkArgs>> sinks;

    /**
     * @return Application sinks
     * 
     * @deprecated
     * This field is deprecated and will be removed in the next major release. Use `sink` instead.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
    public Optional<Output<List<FlinkApplicationVersionSinkArgs>>> sinks() {
        return Optional.ofNullable(this.sinks);
    }

    /**
     * Application source
     * 
     */
    @Import(name="source")
    private @Nullable Output<List<FlinkApplicationVersionSourceArgs>> source;

    /**
     * @return Application source
     * 
     */
    public Optional<Output<List<FlinkApplicationVersionSourceArgs>>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Application sources
     * 
     * @deprecated
     * This field is deprecated and will be removed in the next major release. Use `source` instead.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
    @Import(name="sources")
    private @Nullable Output<List<FlinkApplicationVersionSourceArgs>> sources;

    /**
     * @return Application sources
     * 
     * @deprecated
     * This field is deprecated and will be removed in the next major release. Use `source` instead.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
    public Optional<Output<List<FlinkApplicationVersionSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * Job SQL statement
     * 
     */
    @Import(name="statement")
    private @Nullable Output<String> statement;

    /**
     * @return Job SQL statement
     * 
     */
    public Optional<Output<String>> statement() {
        return Optional.ofNullable(this.statement);
    }

    /**
     * Application version number
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return Application version number
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private FlinkApplicationVersionState() {}

    private FlinkApplicationVersionState(FlinkApplicationVersionState $) {
        this.applicationId = $.applicationId;
        this.applicationVersionId = $.applicationVersionId;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.project = $.project;
        this.serviceName = $.serviceName;
        this.sink = $.sink;
        this.sinks = $.sinks;
        this.source = $.source;
        this.sources = $.sources;
        this.statement = $.statement;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkApplicationVersionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkApplicationVersionState $;

        public Builder() {
            $ = new FlinkApplicationVersionState();
        }

        public Builder(FlinkApplicationVersionState defaults) {
            $ = new FlinkApplicationVersionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Application ID
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Application ID
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param applicationVersionId Application version ID
         * 
         * @return builder
         * 
         */
        public Builder applicationVersionId(@Nullable Output<String> applicationVersionId) {
            $.applicationVersionId = applicationVersionId;
            return this;
        }

        /**
         * @param applicationVersionId Application version ID
         * 
         * @return builder
         * 
         */
        public Builder applicationVersionId(String applicationVersionId) {
            return applicationVersionId(Output.of(applicationVersionId));
        }

        /**
         * @param createdAt Application version creation time
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Application version creation time
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy Application version creator
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Application version creator
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param sink Application sink
         * 
         * @return builder
         * 
         */
        public Builder sink(@Nullable Output<List<FlinkApplicationVersionSinkArgs>> sink) {
            $.sink = sink;
            return this;
        }

        /**
         * @param sink Application sink
         * 
         * @return builder
         * 
         */
        public Builder sink(List<FlinkApplicationVersionSinkArgs> sink) {
            return sink(Output.of(sink));
        }

        /**
         * @param sink Application sink
         * 
         * @return builder
         * 
         */
        public Builder sink(FlinkApplicationVersionSinkArgs... sink) {
            return sink(List.of(sink));
        }

        /**
         * @param sinks Application sinks
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `sink` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
        public Builder sinks(@Nullable Output<List<FlinkApplicationVersionSinkArgs>> sinks) {
            $.sinks = sinks;
            return this;
        }

        /**
         * @param sinks Application sinks
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `sink` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
        public Builder sinks(List<FlinkApplicationVersionSinkArgs> sinks) {
            return sinks(Output.of(sinks));
        }

        /**
         * @param sinks Application sinks
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `sink` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
        public Builder sinks(FlinkApplicationVersionSinkArgs... sinks) {
            return sinks(List.of(sinks));
        }

        /**
         * @param source Application source
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<List<FlinkApplicationVersionSourceArgs>> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Application source
         * 
         * @return builder
         * 
         */
        public Builder source(List<FlinkApplicationVersionSourceArgs> source) {
            return source(Output.of(source));
        }

        /**
         * @param source Application source
         * 
         * @return builder
         * 
         */
        public Builder source(FlinkApplicationVersionSourceArgs... source) {
            return source(List.of(source));
        }

        /**
         * @param sources Application sources
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `source` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
        public Builder sources(@Nullable Output<List<FlinkApplicationVersionSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Application sources
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `source` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
        public Builder sources(List<FlinkApplicationVersionSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources Application sources
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `source` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
        public Builder sources(FlinkApplicationVersionSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param statement Job SQL statement
         * 
         * @return builder
         * 
         */
        public Builder statement(@Nullable Output<String> statement) {
            $.statement = statement;
            return this;
        }

        /**
         * @param statement Job SQL statement
         * 
         * @return builder
         * 
         */
        public Builder statement(String statement) {
            return statement(Output.of(statement));
        }

        /**
         * @param version Application version number
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Application version number
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public FlinkApplicationVersionState build() {
            return $;
        }
    }

}
