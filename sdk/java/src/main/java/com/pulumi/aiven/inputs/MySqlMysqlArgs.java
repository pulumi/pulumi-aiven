// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.MySqlMysqlParamArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MySqlMysqlArgs extends com.pulumi.resources.ResourceArgs {

    public static final MySqlMysqlArgs Empty = new MySqlMysqlArgs();

    /**
     * MySQL connection parameters
     * 
     */
    @Import(name="params")
    private @Nullable Output<List<MySqlMysqlParamArgs>> params;

    /**
     * @return MySQL connection parameters
     * 
     */
    public Optional<Output<List<MySqlMysqlParamArgs>>> params() {
        return Optional.ofNullable(this.params);
    }

    /**
     * MySQL replica URI for services with a replica
     * 
     */
    @Import(name="replicaUri")
    private @Nullable Output<String> replicaUri;

    /**
     * @return MySQL replica URI for services with a replica
     * 
     */
    public Optional<Output<String>> replicaUri() {
        return Optional.ofNullable(this.replicaUri);
    }

    /**
     * MySQL standby connection URIs
     * 
     */
    @Import(name="standbyUris")
    private @Nullable Output<List<String>> standbyUris;

    /**
     * @return MySQL standby connection URIs
     * 
     */
    public Optional<Output<List<String>>> standbyUris() {
        return Optional.ofNullable(this.standbyUris);
    }

    /**
     * MySQL syncing connection URIs
     * 
     */
    @Import(name="syncingUris")
    private @Nullable Output<List<String>> syncingUris;

    /**
     * @return MySQL syncing connection URIs
     * 
     */
    public Optional<Output<List<String>>> syncingUris() {
        return Optional.ofNullable(this.syncingUris);
    }

    /**
     * MySQL master connection URIs
     * 
     */
    @Import(name="uris")
    private @Nullable Output<List<String>> uris;

    /**
     * @return MySQL master connection URIs
     * 
     */
    public Optional<Output<List<String>>> uris() {
        return Optional.ofNullable(this.uris);
    }

    private MySqlMysqlArgs() {}

    private MySqlMysqlArgs(MySqlMysqlArgs $) {
        this.params = $.params;
        this.replicaUri = $.replicaUri;
        this.standbyUris = $.standbyUris;
        this.syncingUris = $.syncingUris;
        this.uris = $.uris;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MySqlMysqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MySqlMysqlArgs $;

        public Builder() {
            $ = new MySqlMysqlArgs();
        }

        public Builder(MySqlMysqlArgs defaults) {
            $ = new MySqlMysqlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param params MySQL connection parameters
         * 
         * @return builder
         * 
         */
        public Builder params(@Nullable Output<List<MySqlMysqlParamArgs>> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params MySQL connection parameters
         * 
         * @return builder
         * 
         */
        public Builder params(List<MySqlMysqlParamArgs> params) {
            return params(Output.of(params));
        }

        /**
         * @param params MySQL connection parameters
         * 
         * @return builder
         * 
         */
        public Builder params(MySqlMysqlParamArgs... params) {
            return params(List.of(params));
        }

        /**
         * @param replicaUri MySQL replica URI for services with a replica
         * 
         * @return builder
         * 
         */
        public Builder replicaUri(@Nullable Output<String> replicaUri) {
            $.replicaUri = replicaUri;
            return this;
        }

        /**
         * @param replicaUri MySQL replica URI for services with a replica
         * 
         * @return builder
         * 
         */
        public Builder replicaUri(String replicaUri) {
            return replicaUri(Output.of(replicaUri));
        }

        /**
         * @param standbyUris MySQL standby connection URIs
         * 
         * @return builder
         * 
         */
        public Builder standbyUris(@Nullable Output<List<String>> standbyUris) {
            $.standbyUris = standbyUris;
            return this;
        }

        /**
         * @param standbyUris MySQL standby connection URIs
         * 
         * @return builder
         * 
         */
        public Builder standbyUris(List<String> standbyUris) {
            return standbyUris(Output.of(standbyUris));
        }

        /**
         * @param standbyUris MySQL standby connection URIs
         * 
         * @return builder
         * 
         */
        public Builder standbyUris(String... standbyUris) {
            return standbyUris(List.of(standbyUris));
        }

        /**
         * @param syncingUris MySQL syncing connection URIs
         * 
         * @return builder
         * 
         */
        public Builder syncingUris(@Nullable Output<List<String>> syncingUris) {
            $.syncingUris = syncingUris;
            return this;
        }

        /**
         * @param syncingUris MySQL syncing connection URIs
         * 
         * @return builder
         * 
         */
        public Builder syncingUris(List<String> syncingUris) {
            return syncingUris(Output.of(syncingUris));
        }

        /**
         * @param syncingUris MySQL syncing connection URIs
         * 
         * @return builder
         * 
         */
        public Builder syncingUris(String... syncingUris) {
            return syncingUris(List.of(syncingUris));
        }

        /**
         * @param uris MySQL master connection URIs
         * 
         * @return builder
         * 
         */
        public Builder uris(@Nullable Output<List<String>> uris) {
            $.uris = uris;
            return this;
        }

        /**
         * @param uris MySQL master connection URIs
         * 
         * @return builder
         * 
         */
        public Builder uris(List<String> uris) {
            return uris(Output.of(uris));
        }

        /**
         * @param uris MySQL master connection URIs
         * 
         * @return builder
         * 
         */
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }

        public MySqlMysqlArgs build() {
            return $;
        }
    }

}
