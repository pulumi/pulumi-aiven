// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetKafkaSchemaConfigurationResult {
    /**
     * @return Kafka Schemas compatibility level. The possible values are `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE` and `NONE`.
     * 
     */
    private String compatibilityLevel;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String project;
    /**
     * @return Kafka Schema configuration. Should be a valid Avro, JSON, or Protobuf schema, depending on the schema type.
     * 
     */
    private String schema;
    /**
     * @return Kafka Schema configuration type. Defaults to AVRO. Possible values are AVRO, JSON, and PROTOBUF.
     * 
     */
    private String schemaType;
    /**
     * @return Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String serviceName;
    /**
     * @return The Kafka Schema Subject name. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String subjectName;
    /**
     * @return Kafka Schema configuration version.
     * 
     */
    private Integer version;

    private GetKafkaSchemaConfigurationResult() {}
    /**
     * @return Kafka Schemas compatibility level. The possible values are `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE` and `NONE`.
     * 
     */
    public String compatibilityLevel() {
        return this.compatibilityLevel;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Kafka Schema configuration. Should be a valid Avro, JSON, or Protobuf schema, depending on the schema type.
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return Kafka Schema configuration type. Defaults to AVRO. Possible values are AVRO, JSON, and PROTOBUF.
     * 
     */
    public String schemaType() {
        return this.schemaType;
    }
    /**
     * @return Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return The Kafka Schema Subject name. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String subjectName() {
        return this.subjectName;
    }
    /**
     * @return Kafka Schema configuration version.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaSchemaConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compatibilityLevel;
        private String id;
        private String project;
        private String schema;
        private String schemaType;
        private String serviceName;
        private String subjectName;
        private Integer version;
        public Builder() {}
        public Builder(GetKafkaSchemaConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compatibilityLevel = defaults.compatibilityLevel;
    	      this.id = defaults.id;
    	      this.project = defaults.project;
    	      this.schema = defaults.schema;
    	      this.schemaType = defaults.schemaType;
    	      this.serviceName = defaults.serviceName;
    	      this.subjectName = defaults.subjectName;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder compatibilityLevel(String compatibilityLevel) {
            if (compatibilityLevel == null) {
              throw new MissingRequiredPropertyException("GetKafkaSchemaConfigurationResult", "compatibilityLevel");
            }
            this.compatibilityLevel = compatibilityLevel;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetKafkaSchemaConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetKafkaSchemaConfigurationResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetKafkaSchemaConfigurationResult", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder schemaType(String schemaType) {
            if (schemaType == null) {
              throw new MissingRequiredPropertyException("GetKafkaSchemaConfigurationResult", "schemaType");
            }
            this.schemaType = schemaType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetKafkaSchemaConfigurationResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder subjectName(String subjectName) {
            if (subjectName == null) {
              throw new MissingRequiredPropertyException("GetKafkaSchemaConfigurationResult", "subjectName");
            }
            this.subjectName = subjectName;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetKafkaSchemaConfigurationResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetKafkaSchemaConfigurationResult build() {
            final var _resultValue = new GetKafkaSchemaConfigurationResult();
            _resultValue.compatibilityLevel = compatibilityLevel;
            _resultValue.id = id;
            _resultValue.project = project;
            _resultValue.schema = schema;
            _resultValue.schemaType = schemaType;
            _resultValue.serviceName = serviceName;
            _resultValue.subjectName = subjectName;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
