// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OpenSearchOpensearchUserConfigOpensearchDashboards {
    /**
     * @return Enable or disable OpenSearch Dashboards. Default: `true`.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max*old*space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. Default: `128`.
     * 
     */
    private @Nullable Integer maxOldSpaceSize;
    /**
     * @return Enable or disable multiple data sources in OpenSearch Dashboards. Default: `true`.
     * 
     */
    private @Nullable Boolean multipleDataSourceEnabled;
    /**
     * @return Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch. Default: `30000`.
     * 
     */
    private @Nullable Integer opensearchRequestTimeout;

    private OpenSearchOpensearchUserConfigOpensearchDashboards() {}
    /**
     * @return Enable or disable OpenSearch Dashboards. Default: `true`.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max*old*space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. Default: `128`.
     * 
     */
    public Optional<Integer> maxOldSpaceSize() {
        return Optional.ofNullable(this.maxOldSpaceSize);
    }
    /**
     * @return Enable or disable multiple data sources in OpenSearch Dashboards. Default: `true`.
     * 
     */
    public Optional<Boolean> multipleDataSourceEnabled() {
        return Optional.ofNullable(this.multipleDataSourceEnabled);
    }
    /**
     * @return Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch. Default: `30000`.
     * 
     */
    public Optional<Integer> opensearchRequestTimeout() {
        return Optional.ofNullable(this.opensearchRequestTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenSearchOpensearchUserConfigOpensearchDashboards defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private @Nullable Integer maxOldSpaceSize;
        private @Nullable Boolean multipleDataSourceEnabled;
        private @Nullable Integer opensearchRequestTimeout;
        public Builder() {}
        public Builder(OpenSearchOpensearchUserConfigOpensearchDashboards defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.maxOldSpaceSize = defaults.maxOldSpaceSize;
    	      this.multipleDataSourceEnabled = defaults.multipleDataSourceEnabled;
    	      this.opensearchRequestTimeout = defaults.opensearchRequestTimeout;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder maxOldSpaceSize(@Nullable Integer maxOldSpaceSize) {

            this.maxOldSpaceSize = maxOldSpaceSize;
            return this;
        }
        @CustomType.Setter
        public Builder multipleDataSourceEnabled(@Nullable Boolean multipleDataSourceEnabled) {

            this.multipleDataSourceEnabled = multipleDataSourceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder opensearchRequestTimeout(@Nullable Integer opensearchRequestTimeout) {

            this.opensearchRequestTimeout = opensearchRequestTimeout;
            return this;
        }
        public OpenSearchOpensearchUserConfigOpensearchDashboards build() {
            final var _resultValue = new OpenSearchOpensearchUserConfigOpensearchDashboards();
            _resultValue.enabled = enabled;
            _resultValue.maxOldSpaceSize = maxOldSpaceSize;
            _resultValue.multipleDataSourceEnabled = multipleDataSourceEnabled;
            _resultValue.opensearchRequestTimeout = opensearchRequestTimeout;
            return _resultValue;
        }
    }
}
