// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.ServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormakerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceIntegrationKafkaMirrormakerUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceIntegrationKafkaMirrormakerUserConfigArgs Empty = new ServiceIntegrationKafkaMirrormakerUserConfigArgs();

    /**
     * The alias under which the Kafka cluster is known to MirrorMaker. Can contain the following symbols: ASCII alphanumerics, &#39;.&#39;, &#39;_&#39;, and &#39;-&#39;.
     * 
     */
    @Import(name="clusterAlias")
    private @Nullable Output<String> clusterAlias;

    /**
     * @return The alias under which the Kafka cluster is known to MirrorMaker. Can contain the following symbols: ASCII alphanumerics, &#39;.&#39;, &#39;_&#39;, and &#39;-&#39;.
     * 
     */
    public Optional<Output<String>> clusterAlias() {
        return Optional.ofNullable(this.clusterAlias);
    }

    /**
     * Kafka MirrorMaker configuration values.
     * 
     */
    @Import(name="kafkaMirrormaker")
    private @Nullable Output<ServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormakerArgs> kafkaMirrormaker;

    /**
     * @return Kafka MirrorMaker configuration values.
     * 
     */
    public Optional<Output<ServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormakerArgs>> kafkaMirrormaker() {
        return Optional.ofNullable(this.kafkaMirrormaker);
    }

    private ServiceIntegrationKafkaMirrormakerUserConfigArgs() {}

    private ServiceIntegrationKafkaMirrormakerUserConfigArgs(ServiceIntegrationKafkaMirrormakerUserConfigArgs $) {
        this.clusterAlias = $.clusterAlias;
        this.kafkaMirrormaker = $.kafkaMirrormaker;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceIntegrationKafkaMirrormakerUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceIntegrationKafkaMirrormakerUserConfigArgs $;

        public Builder() {
            $ = new ServiceIntegrationKafkaMirrormakerUserConfigArgs();
        }

        public Builder(ServiceIntegrationKafkaMirrormakerUserConfigArgs defaults) {
            $ = new ServiceIntegrationKafkaMirrormakerUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterAlias The alias under which the Kafka cluster is known to MirrorMaker. Can contain the following symbols: ASCII alphanumerics, &#39;.&#39;, &#39;_&#39;, and &#39;-&#39;.
         * 
         * @return builder
         * 
         */
        public Builder clusterAlias(@Nullable Output<String> clusterAlias) {
            $.clusterAlias = clusterAlias;
            return this;
        }

        /**
         * @param clusterAlias The alias under which the Kafka cluster is known to MirrorMaker. Can contain the following symbols: ASCII alphanumerics, &#39;.&#39;, &#39;_&#39;, and &#39;-&#39;.
         * 
         * @return builder
         * 
         */
        public Builder clusterAlias(String clusterAlias) {
            return clusterAlias(Output.of(clusterAlias));
        }

        /**
         * @param kafkaMirrormaker Kafka MirrorMaker configuration values.
         * 
         * @return builder
         * 
         */
        public Builder kafkaMirrormaker(@Nullable Output<ServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormakerArgs> kafkaMirrormaker) {
            $.kafkaMirrormaker = kafkaMirrormaker;
            return this;
        }

        /**
         * @param kafkaMirrormaker Kafka MirrorMaker configuration values.
         * 
         * @return builder
         * 
         */
        public Builder kafkaMirrormaker(ServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormakerArgs kafkaMirrormaker) {
            return kafkaMirrormaker(Output.of(kafkaMirrormaker));
        }

        public ServiceIntegrationKafkaMirrormakerUserConfigArgs build() {
            return $;
        }
    }

}
