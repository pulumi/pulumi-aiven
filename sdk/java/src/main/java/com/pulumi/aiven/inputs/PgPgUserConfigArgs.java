// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.PgPgUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigMigrationArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigPgArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigPgQualstatsArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigPgauditArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigPgbouncerArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigPglookoutArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigPublicAccessArgs;
import com.pulumi.aiven.inputs.PgPgUserConfigTimescaledbArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PgPgUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PgPgUserConfigArgs Empty = new PgPgUserConfigArgs();

    /**
     * Additional Cloud Regions for Backup Replication.
     * 
     */
    @Import(name="additionalBackupRegions")
    private @Nullable Output<String> additionalBackupRegions;

    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<Output<String>> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     * 
     */
    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    /**
     * @return Custom username for admin user. This must be set only when a new service is being created.
     * 
     */
    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    @Import(name="backupHour")
    private @Nullable Output<Integer> backupHour;

    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }

    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    @Import(name="backupMinute")
    private @Nullable Output<Integer> backupMinute;

    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }

    /**
     * Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
     * 
     */
    @Import(name="enableIpv6")
    private @Nullable Output<Boolean> enableIpv6;

    /**
     * @return Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
     * 
     */
    public Optional<Output<Boolean>> enableIpv6() {
        return Optional.ofNullable(this.enableIpv6);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
     * 
     */
    @Import(name="ipFilterObjects")
    private @Nullable Output<List<PgPgUserConfigIpFilterObjectArgs>> ipFilterObjects;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
     * 
     */
    public Optional<Output<List<PgPgUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Migrate data from existing server
     * 
     */
    @Import(name="migration")
    private @Nullable Output<PgPgUserConfigMigrationArgs> migration;

    /**
     * @return Migrate data from existing server
     * 
     */
    public Optional<Output<PgPgUserConfigMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    /**
     * postgresql.conf configuration values
     * 
     */
    @Import(name="pg")
    private @Nullable Output<PgPgUserConfigPgArgs> pg;

    /**
     * @return postgresql.conf configuration values
     * 
     */
    public Optional<Output<PgPgUserConfigPgArgs>> pg() {
        return Optional.ofNullable(this.pg);
    }

    /**
     * System-wide settings for the pg*qualstats extension
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    @Import(name="pgQualstats")
    private @Nullable Output<PgPgUserConfigPgQualstatsArgs> pgQualstats;

    /**
     * @return System-wide settings for the pg*qualstats extension
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    public Optional<Output<PgPgUserConfigPgQualstatsArgs>> pgQualstats() {
        return Optional.ofNullable(this.pgQualstats);
    }

    /**
     * Should the service which is being forked be a read replica (deprecated, use read_replica service integration instead).
     * 
     */
    @Import(name="pgReadReplica")
    private @Nullable Output<Boolean> pgReadReplica;

    /**
     * @return Should the service which is being forked be a read replica (deprecated, use read_replica service integration instead).
     * 
     */
    public Optional<Output<Boolean>> pgReadReplica() {
        return Optional.ofNullable(this.pgReadReplica);
    }

    /**
     * Name of the PG Service from which to fork (deprecated, use service*to*fork_from). This has effect only when a new service is being created.
     * 
     */
    @Import(name="pgServiceToForkFrom")
    private @Nullable Output<String> pgServiceToForkFrom;

    /**
     * @return Name of the PG Service from which to fork (deprecated, use service*to*fork_from). This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> pgServiceToForkFrom() {
        return Optional.ofNullable(this.pgServiceToForkFrom);
    }

    /**
     * Enable the pg*stat*monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg*stat*statements results for utility commands are unreliable. The default value is `false`.
     * 
     */
    @Import(name="pgStatMonitorEnable")
    private @Nullable Output<Boolean> pgStatMonitorEnable;

    /**
     * @return Enable the pg*stat*monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg*stat*statements results for utility commands are unreliable. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> pgStatMonitorEnable() {
        return Optional.ofNullable(this.pgStatMonitorEnable);
    }

    /**
     * Enum: `10`, `11`, `12`, `13`, `14`, `15`, `16`. PostgreSQL major version.
     * 
     */
    @Import(name="pgVersion")
    private @Nullable Output<String> pgVersion;

    /**
     * @return Enum: `10`, `11`, `12`, `13`, `14`, `15`, `16`. PostgreSQL major version.
     * 
     */
    public Optional<Output<String>> pgVersion() {
        return Optional.ofNullable(this.pgVersion);
    }

    /**
     * System-wide settings for the pgaudit extension
     * 
     */
    @Import(name="pgaudit")
    private @Nullable Output<PgPgUserConfigPgauditArgs> pgaudit;

    /**
     * @return System-wide settings for the pgaudit extension
     * 
     */
    public Optional<Output<PgPgUserConfigPgauditArgs>> pgaudit() {
        return Optional.ofNullable(this.pgaudit);
    }

    /**
     * PGBouncer connection pooling settings
     * 
     */
    @Import(name="pgbouncer")
    private @Nullable Output<PgPgUserConfigPgbouncerArgs> pgbouncer;

    /**
     * @return PGBouncer connection pooling settings
     * 
     */
    public Optional<Output<PgPgUserConfigPgbouncerArgs>> pgbouncer() {
        return Optional.ofNullable(this.pgbouncer);
    }

    /**
     * System-wide settings for pglookout
     * 
     */
    @Import(name="pglookout")
    private @Nullable Output<PgPgUserConfigPglookoutArgs> pglookout;

    /**
     * @return System-wide settings for pglookout
     * 
     */
    public Optional<Output<PgPgUserConfigPglookoutArgs>> pglookout() {
        return Optional.ofNullable(this.pglookout);
    }

    /**
     * Allow access to selected service ports from private networks
     * 
     */
    @Import(name="privateAccess")
    private @Nullable Output<PgPgUserConfigPrivateAccessArgs> privateAccess;

    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<Output<PgPgUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    /**
     * Allow access to selected service components through Privatelink
     * 
     */
    @Import(name="privatelinkAccess")
    private @Nullable Output<PgPgUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<Output<PgPgUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    /**
     * Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<PgPgUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<PgPgUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Recovery target time when forking a service. This has effect only when a new service is being created.
     * 
     */
    @Import(name="recoveryTargetTime")
    private @Nullable Output<String> recoveryTargetTime;

    /**
     * @return Recovery target time when forking a service. This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> recoveryTargetTime() {
        return Optional.ofNullable(this.recoveryTargetTime);
    }

    /**
     * Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     * 
     */
    @Import(name="sharedBuffersPercentage")
    private @Nullable Output<Double> sharedBuffersPercentage;

    /**
     * @return Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     * 
     */
    public Optional<Output<Double>> sharedBuffersPercentage() {
        return Optional.ofNullable(this.sharedBuffersPercentage);
    }

    /**
     * Use static public IP addresses.
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    /**
     * Enum: `quorum`, `off`. Synchronous replication type. Note that the service plan also needs to support synchronous replication.
     * 
     */
    @Import(name="synchronousReplication")
    private @Nullable Output<String> synchronousReplication;

    /**
     * @return Enum: `quorum`, `off`. Synchronous replication type. Note that the service plan also needs to support synchronous replication.
     * 
     */
    public Optional<Output<String>> synchronousReplication() {
        return Optional.ofNullable(this.synchronousReplication);
    }

    /**
     * System-wide settings for the timescaledb extension
     * 
     */
    @Import(name="timescaledb")
    private @Nullable Output<PgPgUserConfigTimescaledbArgs> timescaledb;

    /**
     * @return System-wide settings for the timescaledb extension
     * 
     */
    public Optional<Output<PgPgUserConfigTimescaledbArgs>> timescaledb() {
        return Optional.ofNullable(this.timescaledb);
    }

    /**
     * Enum: `aiven`, `timescale`. Variant of the PostgreSQL service, may affect the features that are exposed by default.
     * 
     */
    @Import(name="variant")
    private @Nullable Output<String> variant;

    /**
     * @return Enum: `aiven`, `timescale`. Variant of the PostgreSQL service, may affect the features that are exposed by default.
     * 
     */
    public Optional<Output<String>> variant() {
        return Optional.ofNullable(this.variant);
    }

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     * 
     */
    @Import(name="workMem")
    private @Nullable Output<Integer> workMem;

    /**
     * @return Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     * 
     */
    public Optional<Output<Integer>> workMem() {
        return Optional.ofNullable(this.workMem);
    }

    private PgPgUserConfigArgs() {}

    private PgPgUserConfigArgs(PgPgUserConfigArgs $) {
        this.additionalBackupRegions = $.additionalBackupRegions;
        this.adminPassword = $.adminPassword;
        this.adminUsername = $.adminUsername;
        this.backupHour = $.backupHour;
        this.backupMinute = $.backupMinute;
        this.enableIpv6 = $.enableIpv6;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.migration = $.migration;
        this.pg = $.pg;
        this.pgQualstats = $.pgQualstats;
        this.pgReadReplica = $.pgReadReplica;
        this.pgServiceToForkFrom = $.pgServiceToForkFrom;
        this.pgStatMonitorEnable = $.pgStatMonitorEnable;
        this.pgVersion = $.pgVersion;
        this.pgaudit = $.pgaudit;
        this.pgbouncer = $.pgbouncer;
        this.pglookout = $.pglookout;
        this.privateAccess = $.privateAccess;
        this.privatelinkAccess = $.privatelinkAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.recoveryTargetTime = $.recoveryTargetTime;
        this.serviceLog = $.serviceLog;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.sharedBuffersPercentage = $.sharedBuffersPercentage;
        this.staticIps = $.staticIps;
        this.synchronousReplication = $.synchronousReplication;
        this.timescaledb = $.timescaledb;
        this.variant = $.variant;
        this.workMem = $.workMem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PgPgUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PgPgUserConfigArgs $;

        public Builder() {
            $ = new PgPgUserConfigArgs();
        }

        public Builder(PgPgUserConfigArgs defaults) {
            $ = new PgPgUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(@Nullable Output<String> additionalBackupRegions) {
            $.additionalBackupRegions = additionalBackupRegions;
            return this;
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(String additionalBackupRegions) {
            return additionalBackupRegions(Output.of(additionalBackupRegions));
        }

        /**
         * @param adminPassword Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param adminUsername Custom username for admin user. This must be set only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername Custom username for admin user. This must be set only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(@Nullable Output<Integer> backupHour) {
            $.backupHour = backupHour;
            return this;
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(Integer backupHour) {
            return backupHour(Output.of(backupHour));
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(@Nullable Output<Integer> backupMinute) {
            $.backupMinute = backupMinute;
            return this;
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(Integer backupMinute) {
            return backupMinute(Output.of(backupMinute));
        }

        /**
         * @param enableIpv6 Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(@Nullable Output<Boolean> enableIpv6) {
            $.enableIpv6 = enableIpv6;
            return this;
        }

        /**
         * @param enableIpv6 Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(Boolean enableIpv6) {
            return enableIpv6(Output.of(enableIpv6));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(@Nullable Output<List<PgPgUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(List<PgPgUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(PgPgUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(@Nullable Output<PgPgUserConfigMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(PgPgUserConfigMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        /**
         * @param pg postgresql.conf configuration values
         * 
         * @return builder
         * 
         */
        public Builder pg(@Nullable Output<PgPgUserConfigPgArgs> pg) {
            $.pg = pg;
            return this;
        }

        /**
         * @param pg postgresql.conf configuration values
         * 
         * @return builder
         * 
         */
        public Builder pg(PgPgUserConfigPgArgs pg) {
            return pg(Output.of(pg));
        }

        /**
         * @param pgQualstats System-wide settings for the pg*qualstats extension
         * 
         * @return builder
         * 
         * @deprecated
         * This property is deprecated.
         * 
         */
        @Deprecated /* This property is deprecated. */
        public Builder pgQualstats(@Nullable Output<PgPgUserConfigPgQualstatsArgs> pgQualstats) {
            $.pgQualstats = pgQualstats;
            return this;
        }

        /**
         * @param pgQualstats System-wide settings for the pg*qualstats extension
         * 
         * @return builder
         * 
         * @deprecated
         * This property is deprecated.
         * 
         */
        @Deprecated /* This property is deprecated. */
        public Builder pgQualstats(PgPgUserConfigPgQualstatsArgs pgQualstats) {
            return pgQualstats(Output.of(pgQualstats));
        }

        /**
         * @param pgReadReplica Should the service which is being forked be a read replica (deprecated, use read_replica service integration instead).
         * 
         * @return builder
         * 
         */
        public Builder pgReadReplica(@Nullable Output<Boolean> pgReadReplica) {
            $.pgReadReplica = pgReadReplica;
            return this;
        }

        /**
         * @param pgReadReplica Should the service which is being forked be a read replica (deprecated, use read_replica service integration instead).
         * 
         * @return builder
         * 
         */
        public Builder pgReadReplica(Boolean pgReadReplica) {
            return pgReadReplica(Output.of(pgReadReplica));
        }

        /**
         * @param pgServiceToForkFrom Name of the PG Service from which to fork (deprecated, use service*to*fork_from). This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder pgServiceToForkFrom(@Nullable Output<String> pgServiceToForkFrom) {
            $.pgServiceToForkFrom = pgServiceToForkFrom;
            return this;
        }

        /**
         * @param pgServiceToForkFrom Name of the PG Service from which to fork (deprecated, use service*to*fork_from). This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder pgServiceToForkFrom(String pgServiceToForkFrom) {
            return pgServiceToForkFrom(Output.of(pgServiceToForkFrom));
        }

        /**
         * @param pgStatMonitorEnable Enable the pg*stat*monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg*stat*statements results for utility commands are unreliable. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorEnable(@Nullable Output<Boolean> pgStatMonitorEnable) {
            $.pgStatMonitorEnable = pgStatMonitorEnable;
            return this;
        }

        /**
         * @param pgStatMonitorEnable Enable the pg*stat*monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg*stat*statements results for utility commands are unreliable. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorEnable(Boolean pgStatMonitorEnable) {
            return pgStatMonitorEnable(Output.of(pgStatMonitorEnable));
        }

        /**
         * @param pgVersion Enum: `10`, `11`, `12`, `13`, `14`, `15`, `16`. PostgreSQL major version.
         * 
         * @return builder
         * 
         */
        public Builder pgVersion(@Nullable Output<String> pgVersion) {
            $.pgVersion = pgVersion;
            return this;
        }

        /**
         * @param pgVersion Enum: `10`, `11`, `12`, `13`, `14`, `15`, `16`. PostgreSQL major version.
         * 
         * @return builder
         * 
         */
        public Builder pgVersion(String pgVersion) {
            return pgVersion(Output.of(pgVersion));
        }

        /**
         * @param pgaudit System-wide settings for the pgaudit extension
         * 
         * @return builder
         * 
         */
        public Builder pgaudit(@Nullable Output<PgPgUserConfigPgauditArgs> pgaudit) {
            $.pgaudit = pgaudit;
            return this;
        }

        /**
         * @param pgaudit System-wide settings for the pgaudit extension
         * 
         * @return builder
         * 
         */
        public Builder pgaudit(PgPgUserConfigPgauditArgs pgaudit) {
            return pgaudit(Output.of(pgaudit));
        }

        /**
         * @param pgbouncer PGBouncer connection pooling settings
         * 
         * @return builder
         * 
         */
        public Builder pgbouncer(@Nullable Output<PgPgUserConfigPgbouncerArgs> pgbouncer) {
            $.pgbouncer = pgbouncer;
            return this;
        }

        /**
         * @param pgbouncer PGBouncer connection pooling settings
         * 
         * @return builder
         * 
         */
        public Builder pgbouncer(PgPgUserConfigPgbouncerArgs pgbouncer) {
            return pgbouncer(Output.of(pgbouncer));
        }

        /**
         * @param pglookout System-wide settings for pglookout
         * 
         * @return builder
         * 
         */
        public Builder pglookout(@Nullable Output<PgPgUserConfigPglookoutArgs> pglookout) {
            $.pglookout = pglookout;
            return this;
        }

        /**
         * @param pglookout System-wide settings for pglookout
         * 
         * @return builder
         * 
         */
        public Builder pglookout(PgPgUserConfigPglookoutArgs pglookout) {
            return pglookout(Output.of(pglookout));
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(@Nullable Output<PgPgUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(PgPgUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(@Nullable Output<PgPgUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(PgPgUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<PgPgUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(PgPgUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param recoveryTargetTime Recovery target time when forking a service. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder recoveryTargetTime(@Nullable Output<String> recoveryTargetTime) {
            $.recoveryTargetTime = recoveryTargetTime;
            return this;
        }

        /**
         * @param recoveryTargetTime Recovery target time when forking a service. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder recoveryTargetTime(String recoveryTargetTime) {
            return recoveryTargetTime(Output.of(recoveryTargetTime));
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        /**
         * @param sharedBuffersPercentage Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         * 
         * @return builder
         * 
         */
        public Builder sharedBuffersPercentage(@Nullable Output<Double> sharedBuffersPercentage) {
            $.sharedBuffersPercentage = sharedBuffersPercentage;
            return this;
        }

        /**
         * @param sharedBuffersPercentage Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         * 
         * @return builder
         * 
         */
        public Builder sharedBuffersPercentage(Double sharedBuffersPercentage) {
            return sharedBuffersPercentage(Output.of(sharedBuffersPercentage));
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        /**
         * @param synchronousReplication Enum: `quorum`, `off`. Synchronous replication type. Note that the service plan also needs to support synchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder synchronousReplication(@Nullable Output<String> synchronousReplication) {
            $.synchronousReplication = synchronousReplication;
            return this;
        }

        /**
         * @param synchronousReplication Enum: `quorum`, `off`. Synchronous replication type. Note that the service plan also needs to support synchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder synchronousReplication(String synchronousReplication) {
            return synchronousReplication(Output.of(synchronousReplication));
        }

        /**
         * @param timescaledb System-wide settings for the timescaledb extension
         * 
         * @return builder
         * 
         */
        public Builder timescaledb(@Nullable Output<PgPgUserConfigTimescaledbArgs> timescaledb) {
            $.timescaledb = timescaledb;
            return this;
        }

        /**
         * @param timescaledb System-wide settings for the timescaledb extension
         * 
         * @return builder
         * 
         */
        public Builder timescaledb(PgPgUserConfigTimescaledbArgs timescaledb) {
            return timescaledb(Output.of(timescaledb));
        }

        /**
         * @param variant Enum: `aiven`, `timescale`. Variant of the PostgreSQL service, may affect the features that are exposed by default.
         * 
         * @return builder
         * 
         */
        public Builder variant(@Nullable Output<String> variant) {
            $.variant = variant;
            return this;
        }

        /**
         * @param variant Enum: `aiven`, `timescale`. Variant of the PostgreSQL service, may affect the features that are exposed by default.
         * 
         * @return builder
         * 
         */
        public Builder variant(String variant) {
            return variant(Output.of(variant));
        }

        /**
         * @param workMem Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         * 
         * @return builder
         * 
         */
        public Builder workMem(@Nullable Output<Integer> workMem) {
            $.workMem = workMem;
            return this;
        }

        /**
         * @param workMem Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         * 
         * @return builder
         * 
         */
        public Builder workMem(Integer workMem) {
            return workMem(Output.of(workMem));
        }

        public PgPgUserConfigArgs build() {
            return $;
        }
    }

}
