// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.M3DbM3dbUserConfigLimits;
import com.pulumi.aiven.outputs.M3DbM3dbUserConfigNamespace;
import com.pulumi.aiven.outputs.M3DbM3dbUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.M3DbM3dbUserConfigPublicAccess;
import com.pulumi.aiven.outputs.M3DbM3dbUserConfigRules;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class M3DbM3dbUserConfig {
    /**
     * @return Custom domain
     * 
     */
    private final @Nullable String customDomain;
    /**
     * @return IP filter
     * 
     */
    private final @Nullable List<String> ipFilters;
    /**
     * @return M3 limits
     * 
     */
    private final @Nullable M3DbM3dbUserConfigLimits limits;
    /**
     * @return M3 major version (deprecated, use m3db_version)
     * 
     */
    private final @Nullable String m3Version;
    /**
     * @return Enable Graphite ingestion using Carbon plaintext protocol
     * 
     */
    private final @Nullable String m3coordinatorEnableGraphiteCarbonIngest;
    /**
     * @return M3 major version (the minimum compatible version)
     * 
     */
    private final @Nullable String m3dbVersion;
    /**
     * @return List of M3 namespaces
     * 
     */
    private final @Nullable List<M3DbM3dbUserConfigNamespace> namespaces;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private final @Nullable M3DbM3dbUserConfigPrivateAccess privateAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    private final @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private final @Nullable M3DbM3dbUserConfigPublicAccess publicAccess;
    /**
     * @return M3 rules
     * 
     */
    private final @Nullable M3DbM3dbUserConfigRules rules;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    private final @Nullable String serviceToForkFrom;
    /**
     * @return Static IP addresses
     * 
     */
    private final @Nullable String staticIps;

    @CustomType.Constructor
    private M3DbM3dbUserConfig(
        @CustomType.Parameter("customDomain") @Nullable String customDomain,
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("limits") @Nullable M3DbM3dbUserConfigLimits limits,
        @CustomType.Parameter("m3Version") @Nullable String m3Version,
        @CustomType.Parameter("m3coordinatorEnableGraphiteCarbonIngest") @Nullable String m3coordinatorEnableGraphiteCarbonIngest,
        @CustomType.Parameter("m3dbVersion") @Nullable String m3dbVersion,
        @CustomType.Parameter("namespaces") @Nullable List<M3DbM3dbUserConfigNamespace> namespaces,
        @CustomType.Parameter("privateAccess") @Nullable M3DbM3dbUserConfigPrivateAccess privateAccess,
        @CustomType.Parameter("projectToForkFrom") @Nullable String projectToForkFrom,
        @CustomType.Parameter("publicAccess") @Nullable M3DbM3dbUserConfigPublicAccess publicAccess,
        @CustomType.Parameter("rules") @Nullable M3DbM3dbUserConfigRules rules,
        @CustomType.Parameter("serviceToForkFrom") @Nullable String serviceToForkFrom,
        @CustomType.Parameter("staticIps") @Nullable String staticIps) {
        this.customDomain = customDomain;
        this.ipFilters = ipFilters;
        this.limits = limits;
        this.m3Version = m3Version;
        this.m3coordinatorEnableGraphiteCarbonIngest = m3coordinatorEnableGraphiteCarbonIngest;
        this.m3dbVersion = m3dbVersion;
        this.namespaces = namespaces;
        this.privateAccess = privateAccess;
        this.projectToForkFrom = projectToForkFrom;
        this.publicAccess = publicAccess;
        this.rules = rules;
        this.serviceToForkFrom = serviceToForkFrom;
        this.staticIps = staticIps;
    }

    /**
     * @return Custom domain
     * 
     */
    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    /**
     * @return IP filter
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return M3 limits
     * 
     */
    public Optional<M3DbM3dbUserConfigLimits> limits() {
        return Optional.ofNullable(this.limits);
    }
    /**
     * @return M3 major version (deprecated, use m3db_version)
     * 
     */
    public Optional<String> m3Version() {
        return Optional.ofNullable(this.m3Version);
    }
    /**
     * @return Enable Graphite ingestion using Carbon plaintext protocol
     * 
     */
    public Optional<String> m3coordinatorEnableGraphiteCarbonIngest() {
        return Optional.ofNullable(this.m3coordinatorEnableGraphiteCarbonIngest);
    }
    /**
     * @return M3 major version (the minimum compatible version)
     * 
     */
    public Optional<String> m3dbVersion() {
        return Optional.ofNullable(this.m3dbVersion);
    }
    /**
     * @return List of M3 namespaces
     * 
     */
    public List<M3DbM3dbUserConfigNamespace> namespaces() {
        return this.namespaces == null ? List.of() : this.namespaces;
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<M3DbM3dbUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<M3DbM3dbUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return M3 rules
     * 
     */
    public Optional<M3DbM3dbUserConfigRules> rules() {
        return Optional.ofNullable(this.rules);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Static IP addresses
     * 
     */
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(M3DbM3dbUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String customDomain;
        private @Nullable List<String> ipFilters;
        private @Nullable M3DbM3dbUserConfigLimits limits;
        private @Nullable String m3Version;
        private @Nullable String m3coordinatorEnableGraphiteCarbonIngest;
        private @Nullable String m3dbVersion;
        private @Nullable List<M3DbM3dbUserConfigNamespace> namespaces;
        private @Nullable M3DbM3dbUserConfigPrivateAccess privateAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable M3DbM3dbUserConfigPublicAccess publicAccess;
        private @Nullable M3DbM3dbUserConfigRules rules;
        private @Nullable String serviceToForkFrom;
        private @Nullable String staticIps;

        public Builder() {
    	      // Empty
        }

        public Builder(M3DbM3dbUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customDomain = defaults.customDomain;
    	      this.ipFilters = defaults.ipFilters;
    	      this.limits = defaults.limits;
    	      this.m3Version = defaults.m3Version;
    	      this.m3coordinatorEnableGraphiteCarbonIngest = defaults.m3coordinatorEnableGraphiteCarbonIngest;
    	      this.m3dbVersion = defaults.m3dbVersion;
    	      this.namespaces = defaults.namespaces;
    	      this.privateAccess = defaults.privateAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.rules = defaults.rules;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        public Builder customDomain(@Nullable String customDomain) {
            this.customDomain = customDomain;
            return this;
        }
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder limits(@Nullable M3DbM3dbUserConfigLimits limits) {
            this.limits = limits;
            return this;
        }
        public Builder m3Version(@Nullable String m3Version) {
            this.m3Version = m3Version;
            return this;
        }
        public Builder m3coordinatorEnableGraphiteCarbonIngest(@Nullable String m3coordinatorEnableGraphiteCarbonIngest) {
            this.m3coordinatorEnableGraphiteCarbonIngest = m3coordinatorEnableGraphiteCarbonIngest;
            return this;
        }
        public Builder m3dbVersion(@Nullable String m3dbVersion) {
            this.m3dbVersion = m3dbVersion;
            return this;
        }
        public Builder namespaces(@Nullable List<M3DbM3dbUserConfigNamespace> namespaces) {
            this.namespaces = namespaces;
            return this;
        }
        public Builder namespaces(M3DbM3dbUserConfigNamespace... namespaces) {
            return namespaces(List.of(namespaces));
        }
        public Builder privateAccess(@Nullable M3DbM3dbUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        public Builder publicAccess(@Nullable M3DbM3dbUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder rules(@Nullable M3DbM3dbUserConfigRules rules) {
            this.rules = rules;
            return this;
        }
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }        public M3DbM3dbUserConfig build() {
            return new M3DbM3dbUserConfig(customDomain, ipFilters, limits, m3Version, m3coordinatorEnableGraphiteCarbonIngest, m3dbVersion, namespaces, privateAccess, projectToForkFrom, publicAccess, rules, serviceToForkFrom, staticIps);
        }
    }
}
