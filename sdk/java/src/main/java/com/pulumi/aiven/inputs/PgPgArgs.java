// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.PgPgParamArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PgPgArgs extends com.pulumi.resources.ResourceArgs {

    public static final PgPgArgs Empty = new PgPgArgs();

    /**
     * PgBouncer connection details for [connection pooling](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling).
     * 
     */
    @Import(name="bouncer")
    private @Nullable Output<String> bouncer;

    /**
     * @return PgBouncer connection details for [connection pooling](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling).
     * 
     */
    public Optional<Output<String>> bouncer() {
        return Optional.ofNullable(this.bouncer);
    }

    /**
     * Primary PostgreSQL database name.
     * 
     */
    @Import(name="dbname")
    private @Nullable Output<String> dbname;

    /**
     * @return Primary PostgreSQL database name.
     * 
     */
    public Optional<Output<String>> dbname() {
        return Optional.ofNullable(this.dbname);
    }

    /**
     * PostgreSQL primary node host IP or name.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return PostgreSQL primary node host IP or name.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The [number of allowed connections](https://aiven.io/docs/products/postgresql/reference/pg-connection-limits). Varies based on the service plan.
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return The [number of allowed connections](https://aiven.io/docs/products/postgresql/reference/pg-connection-limits). Varies based on the service plan.
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * PostgreSQL connection parameters.
     * 
     */
    @Import(name="params")
    private @Nullable Output<List<PgPgParamArgs>> params;

    /**
     * @return PostgreSQL connection parameters.
     * 
     */
    public Optional<Output<List<PgPgParamArgs>>> params() {
        return Optional.ofNullable(this.params);
    }

    /**
     * PostgreSQL admin user password.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return PostgreSQL admin user password.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * PostgreSQL port.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return PostgreSQL port.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * PostgreSQL replica URI for services with a replica.
     * 
     */
    @Import(name="replicaUri")
    private @Nullable Output<String> replicaUri;

    /**
     * @return PostgreSQL replica URI for services with a replica.
     * 
     */
    public Optional<Output<String>> replicaUri() {
        return Optional.ofNullable(this.replicaUri);
    }

    /**
     * PostgreSQL SSL mode setting.
     * 
     */
    @Import(name="sslmode")
    private @Nullable Output<String> sslmode;

    /**
     * @return PostgreSQL SSL mode setting.
     * 
     */
    public Optional<Output<String>> sslmode() {
        return Optional.ofNullable(this.sslmode);
    }

    /**
     * PostgreSQL standby connection URIs.
     * 
     */
    @Import(name="standbyUris")
    private @Nullable Output<List<String>> standbyUris;

    /**
     * @return PostgreSQL standby connection URIs.
     * 
     */
    public Optional<Output<List<String>>> standbyUris() {
        return Optional.ofNullable(this.standbyUris);
    }

    /**
     * PostgreSQL syncing connection URIs.
     * 
     */
    @Import(name="syncingUris")
    private @Nullable Output<List<String>> syncingUris;

    /**
     * @return PostgreSQL syncing connection URIs.
     * 
     */
    public Optional<Output<List<String>>> syncingUris() {
        return Optional.ofNullable(this.syncingUris);
    }

    /**
     * PostgreSQL primary connection URI.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return PostgreSQL primary connection URI.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    /**
     * PostgreSQL primary connection URIs.
     * 
     */
    @Import(name="uris")
    private @Nullable Output<List<String>> uris;

    /**
     * @return PostgreSQL primary connection URIs.
     * 
     */
    public Optional<Output<List<String>>> uris() {
        return Optional.ofNullable(this.uris);
    }

    /**
     * PostgreSQL admin user name.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return PostgreSQL admin user name.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private PgPgArgs() {}

    private PgPgArgs(PgPgArgs $) {
        this.bouncer = $.bouncer;
        this.dbname = $.dbname;
        this.host = $.host;
        this.maxConnections = $.maxConnections;
        this.params = $.params;
        this.password = $.password;
        this.port = $.port;
        this.replicaUri = $.replicaUri;
        this.sslmode = $.sslmode;
        this.standbyUris = $.standbyUris;
        this.syncingUris = $.syncingUris;
        this.uri = $.uri;
        this.uris = $.uris;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PgPgArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PgPgArgs $;

        public Builder() {
            $ = new PgPgArgs();
        }

        public Builder(PgPgArgs defaults) {
            $ = new PgPgArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bouncer PgBouncer connection details for [connection pooling](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling).
         * 
         * @return builder
         * 
         */
        public Builder bouncer(@Nullable Output<String> bouncer) {
            $.bouncer = bouncer;
            return this;
        }

        /**
         * @param bouncer PgBouncer connection details for [connection pooling](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling).
         * 
         * @return builder
         * 
         */
        public Builder bouncer(String bouncer) {
            return bouncer(Output.of(bouncer));
        }

        /**
         * @param dbname Primary PostgreSQL database name.
         * 
         * @return builder
         * 
         */
        public Builder dbname(@Nullable Output<String> dbname) {
            $.dbname = dbname;
            return this;
        }

        /**
         * @param dbname Primary PostgreSQL database name.
         * 
         * @return builder
         * 
         */
        public Builder dbname(String dbname) {
            return dbname(Output.of(dbname));
        }

        /**
         * @param host PostgreSQL primary node host IP or name.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host PostgreSQL primary node host IP or name.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param maxConnections The [number of allowed connections](https://aiven.io/docs/products/postgresql/reference/pg-connection-limits). Varies based on the service plan.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections The [number of allowed connections](https://aiven.io/docs/products/postgresql/reference/pg-connection-limits). Varies based on the service plan.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param params PostgreSQL connection parameters.
         * 
         * @return builder
         * 
         */
        public Builder params(@Nullable Output<List<PgPgParamArgs>> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params PostgreSQL connection parameters.
         * 
         * @return builder
         * 
         */
        public Builder params(List<PgPgParamArgs> params) {
            return params(Output.of(params));
        }

        /**
         * @param params PostgreSQL connection parameters.
         * 
         * @return builder
         * 
         */
        public Builder params(PgPgParamArgs... params) {
            return params(List.of(params));
        }

        /**
         * @param password PostgreSQL admin user password.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password PostgreSQL admin user password.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port PostgreSQL port.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port PostgreSQL port.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param replicaUri PostgreSQL replica URI for services with a replica.
         * 
         * @return builder
         * 
         */
        public Builder replicaUri(@Nullable Output<String> replicaUri) {
            $.replicaUri = replicaUri;
            return this;
        }

        /**
         * @param replicaUri PostgreSQL replica URI for services with a replica.
         * 
         * @return builder
         * 
         */
        public Builder replicaUri(String replicaUri) {
            return replicaUri(Output.of(replicaUri));
        }

        /**
         * @param sslmode PostgreSQL SSL mode setting.
         * 
         * @return builder
         * 
         */
        public Builder sslmode(@Nullable Output<String> sslmode) {
            $.sslmode = sslmode;
            return this;
        }

        /**
         * @param sslmode PostgreSQL SSL mode setting.
         * 
         * @return builder
         * 
         */
        public Builder sslmode(String sslmode) {
            return sslmode(Output.of(sslmode));
        }

        /**
         * @param standbyUris PostgreSQL standby connection URIs.
         * 
         * @return builder
         * 
         */
        public Builder standbyUris(@Nullable Output<List<String>> standbyUris) {
            $.standbyUris = standbyUris;
            return this;
        }

        /**
         * @param standbyUris PostgreSQL standby connection URIs.
         * 
         * @return builder
         * 
         */
        public Builder standbyUris(List<String> standbyUris) {
            return standbyUris(Output.of(standbyUris));
        }

        /**
         * @param standbyUris PostgreSQL standby connection URIs.
         * 
         * @return builder
         * 
         */
        public Builder standbyUris(String... standbyUris) {
            return standbyUris(List.of(standbyUris));
        }

        /**
         * @param syncingUris PostgreSQL syncing connection URIs.
         * 
         * @return builder
         * 
         */
        public Builder syncingUris(@Nullable Output<List<String>> syncingUris) {
            $.syncingUris = syncingUris;
            return this;
        }

        /**
         * @param syncingUris PostgreSQL syncing connection URIs.
         * 
         * @return builder
         * 
         */
        public Builder syncingUris(List<String> syncingUris) {
            return syncingUris(Output.of(syncingUris));
        }

        /**
         * @param syncingUris PostgreSQL syncing connection URIs.
         * 
         * @return builder
         * 
         */
        public Builder syncingUris(String... syncingUris) {
            return syncingUris(List.of(syncingUris));
        }

        /**
         * @param uri PostgreSQL primary connection URI.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri PostgreSQL primary connection URI.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        /**
         * @param uris PostgreSQL primary connection URIs.
         * 
         * @return builder
         * 
         */
        public Builder uris(@Nullable Output<List<String>> uris) {
            $.uris = uris;
            return this;
        }

        /**
         * @param uris PostgreSQL primary connection URIs.
         * 
         * @return builder
         * 
         */
        public Builder uris(List<String> uris) {
            return uris(Output.of(uris));
        }

        /**
         * @param uris PostgreSQL primary connection URIs.
         * 
         * @return builder
         * 
         */
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }

        /**
         * @param user PostgreSQL admin user name.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user PostgreSQL admin user name.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public PgPgArgs build() {
            return $;
        }
    }

}
