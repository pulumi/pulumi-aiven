// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PgPgArgs extends com.pulumi.resources.ResourceArgs {

    public static final PgPgArgs Empty = new PgPgArgs();

    @Import(name="dbname")
    private @Nullable Output<String> dbname;

    public Optional<Output<String>> dbname() {
        return Optional.ofNullable(this.dbname);
    }

    @Import(name="host")
    private @Nullable Output<String> host;

    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="replicaUri")
    private @Nullable Output<String> replicaUri;

    public Optional<Output<String>> replicaUri() {
        return Optional.ofNullable(this.replicaUri);
    }

    @Import(name="sslmode")
    private @Nullable Output<String> sslmode;

    public Optional<Output<String>> sslmode() {
        return Optional.ofNullable(this.sslmode);
    }

    @Import(name="uri")
    private @Nullable Output<String> uri;

    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    @Import(name="user")
    private @Nullable Output<String> user;

    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private PgPgArgs() {}

    private PgPgArgs(PgPgArgs $) {
        this.dbname = $.dbname;
        this.host = $.host;
        this.password = $.password;
        this.port = $.port;
        this.replicaUri = $.replicaUri;
        this.sslmode = $.sslmode;
        this.uri = $.uri;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PgPgArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PgPgArgs $;

        public Builder() {
            $ = new PgPgArgs();
        }

        public Builder(PgPgArgs defaults) {
            $ = new PgPgArgs(Objects.requireNonNull(defaults));
        }

        public Builder dbname(@Nullable Output<String> dbname) {
            $.dbname = dbname;
            return this;
        }

        public Builder dbname(String dbname) {
            return dbname(Output.of(dbname));
        }

        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder replicaUri(@Nullable Output<String> replicaUri) {
            $.replicaUri = replicaUri;
            return this;
        }

        public Builder replicaUri(String replicaUri) {
            return replicaUri(Output.of(replicaUri));
        }

        public Builder sslmode(@Nullable Output<String> sslmode) {
            $.sslmode = sslmode;
            return this;
        }

        public Builder sslmode(String sslmode) {
            return sslmode(Output.of(sslmode));
        }

        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        public Builder user(String user) {
            return user(Output.of(user));
        }

        public PgPgArgs build() {
            return $;
        }
    }

}
