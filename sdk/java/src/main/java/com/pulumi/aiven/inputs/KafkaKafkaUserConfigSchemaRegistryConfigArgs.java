// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaKafkaUserConfigSchemaRegistryConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaKafkaUserConfigSchemaRegistryConfigArgs Empty = new KafkaKafkaUserConfigSchemaRegistryConfigArgs();

    /**
     * If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
     * 
     */
    @Import(name="leaderEligibility")
    private @Nullable Output<Boolean> leaderEligibility;

    /**
     * @return If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> leaderEligibility() {
        return Optional.ofNullable(this.leaderEligibility);
    }

    /**
     * The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It&#39;s only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
     * 
     */
    @Import(name="topicName")
    private @Nullable Output<String> topicName;

    /**
     * @return The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It&#39;s only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
     * 
     */
    public Optional<Output<String>> topicName() {
        return Optional.ofNullable(this.topicName);
    }

    private KafkaKafkaUserConfigSchemaRegistryConfigArgs() {}

    private KafkaKafkaUserConfigSchemaRegistryConfigArgs(KafkaKafkaUserConfigSchemaRegistryConfigArgs $) {
        this.leaderEligibility = $.leaderEligibility;
        this.topicName = $.topicName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaKafkaUserConfigSchemaRegistryConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaKafkaUserConfigSchemaRegistryConfigArgs $;

        public Builder() {
            $ = new KafkaKafkaUserConfigSchemaRegistryConfigArgs();
        }

        public Builder(KafkaKafkaUserConfigSchemaRegistryConfigArgs defaults) {
            $ = new KafkaKafkaUserConfigSchemaRegistryConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param leaderEligibility If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder leaderEligibility(@Nullable Output<Boolean> leaderEligibility) {
            $.leaderEligibility = leaderEligibility;
            return this;
        }

        /**
         * @param leaderEligibility If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder leaderEligibility(Boolean leaderEligibility) {
            return leaderEligibility(Output.of(leaderEligibility));
        }

        /**
         * @param topicName The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It&#39;s only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
         * 
         * @return builder
         * 
         */
        public Builder topicName(@Nullable Output<String> topicName) {
            $.topicName = topicName;
            return this;
        }

        /**
         * @param topicName The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It&#39;s only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
         * 
         * @return builder
         * 
         */
        public Builder topicName(String topicName) {
            return topicName(Output.of(topicName));
        }

        public KafkaKafkaUserConfigSchemaRegistryConfigArgs build() {
            return $;
        }
    }

}
