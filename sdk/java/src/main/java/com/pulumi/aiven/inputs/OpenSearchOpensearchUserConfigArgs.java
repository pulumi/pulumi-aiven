// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigIndexPatternArgs;
import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigIndexTemplateArgs;
import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigOpenidArgs;
import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigOpensearchArgs;
import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigOpensearchDashboardsArgs;
import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigPublicAccessArgs;
import com.pulumi.aiven.inputs.OpenSearchOpensearchUserConfigSamlArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenSearchOpensearchUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenSearchOpensearchUserConfigArgs Empty = new OpenSearchOpensearchUserConfigArgs();

    /**
     * Additional Cloud Regions for Backup Replication.
     * 
     */
    @Import(name="additionalBackupRegions")
    private @Nullable Output<String> additionalBackupRegions;

    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<Output<String>> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }

    /**
     * Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
     * 
     */
    @Import(name="customDomain")
    private @Nullable Output<String> customDomain;

    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
     * 
     */
    public Optional<Output<String>> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }

    /**
     * Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.
     * 
     */
    @Import(name="disableReplicationFactorAdjustment")
    private @Nullable Output<Boolean> disableReplicationFactorAdjustment;

    /**
     * @return Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.
     * 
     */
    public Optional<Output<Boolean>> disableReplicationFactorAdjustment() {
        return Optional.ofNullable(this.disableReplicationFactorAdjustment);
    }

    /**
     * Index patterns
     * 
     */
    @Import(name="indexPatterns")
    private @Nullable Output<List<OpenSearchOpensearchUserConfigIndexPatternArgs>> indexPatterns;

    /**
     * @return Index patterns
     * 
     */
    public Optional<Output<List<OpenSearchOpensearchUserConfigIndexPatternArgs>>> indexPatterns() {
        return Optional.ofNullable(this.indexPatterns);
    }

    /**
     * Template settings for all new indexes
     * 
     */
    @Import(name="indexTemplate")
    private @Nullable Output<OpenSearchOpensearchUserConfigIndexTemplateArgs> indexTemplate;

    /**
     * @return Template settings for all new indexes
     * 
     */
    public Optional<Output<OpenSearchOpensearchUserConfigIndexTemplateArgs>> indexTemplate() {
        return Optional.ofNullable(this.indexTemplate);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    @Import(name="ipFilterObjects")
    private @Nullable Output<List<OpenSearchOpensearchUserConfigIpFilterObjectArgs>> ipFilterObjects;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public Optional<Output<List<OpenSearchOpensearchUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    @Import(name="keepIndexRefreshInterval")
    private @Nullable Output<Boolean> keepIndexRefreshInterval;

    /**
     * @return Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    public Optional<Output<Boolean>> keepIndexRefreshInterval() {
        return Optional.ofNullable(this.keepIndexRefreshInterval);
    }

    /**
     * Use index_patterns instead. Default: `0`.
     * 
     */
    @Import(name="maxIndexCount")
    private @Nullable Output<Integer> maxIndexCount;

    /**
     * @return Use index_patterns instead. Default: `0`.
     * 
     */
    public Optional<Output<Integer>> maxIndexCount() {
        return Optional.ofNullable(this.maxIndexCount);
    }

    /**
     * OpenSearch OpenID Connect Configuration
     * 
     */
    @Import(name="openid")
    private @Nullable Output<OpenSearchOpensearchUserConfigOpenidArgs> openid;

    /**
     * @return OpenSearch OpenID Connect Configuration
     * 
     */
    public Optional<Output<OpenSearchOpensearchUserConfigOpenidArgs>> openid() {
        return Optional.ofNullable(this.openid);
    }

    /**
     * OpenSearch settings
     * 
     */
    @Import(name="opensearch")
    private @Nullable Output<OpenSearchOpensearchUserConfigOpensearchArgs> opensearch;

    /**
     * @return OpenSearch settings
     * 
     */
    public Optional<Output<OpenSearchOpensearchUserConfigOpensearchArgs>> opensearch() {
        return Optional.ofNullable(this.opensearch);
    }

    /**
     * OpenSearch Dashboards settings
     * 
     */
    @Import(name="opensearchDashboards")
    private @Nullable Output<OpenSearchOpensearchUserConfigOpensearchDashboardsArgs> opensearchDashboards;

    /**
     * @return OpenSearch Dashboards settings
     * 
     */
    public Optional<Output<OpenSearchOpensearchUserConfigOpensearchDashboardsArgs>> opensearchDashboards() {
        return Optional.ofNullable(this.opensearchDashboards);
    }

    /**
     * Enum: `1`, `2`, and newer. OpenSearch major version.
     * 
     */
    @Import(name="opensearchVersion")
    private @Nullable Output<String> opensearchVersion;

    /**
     * @return Enum: `1`, `2`, and newer. OpenSearch major version.
     * 
     */
    public Optional<Output<String>> opensearchVersion() {
        return Optional.ofNullable(this.opensearchVersion);
    }

    /**
     * Allow access to selected service ports from private networks
     * 
     */
    @Import(name="privateAccess")
    private @Nullable Output<OpenSearchOpensearchUserConfigPrivateAccessArgs> privateAccess;

    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<Output<OpenSearchOpensearchUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    /**
     * Allow access to selected service components through Privatelink
     * 
     */
    @Import(name="privatelinkAccess")
    private @Nullable Output<OpenSearchOpensearchUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<Output<OpenSearchOpensearchUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    /**
     * Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<OpenSearchOpensearchUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<OpenSearchOpensearchUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    @Import(name="recoveryBasebackupName")
    private @Nullable Output<String> recoveryBasebackupName;

    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    public Optional<Output<String>> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }

    /**
     * OpenSearch SAML configuration
     * 
     */
    @Import(name="saml")
    private @Nullable Output<OpenSearchOpensearchUserConfigSamlArgs> saml;

    /**
     * @return OpenSearch SAML configuration
     * 
     */
    public Optional<Output<OpenSearchOpensearchUserConfigSamlArgs>> saml() {
        return Optional.ofNullable(this.saml);
    }

    /**
     * Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    /**
     * Use static public IP addresses.
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    private OpenSearchOpensearchUserConfigArgs() {}

    private OpenSearchOpensearchUserConfigArgs(OpenSearchOpensearchUserConfigArgs $) {
        this.additionalBackupRegions = $.additionalBackupRegions;
        this.customDomain = $.customDomain;
        this.disableReplicationFactorAdjustment = $.disableReplicationFactorAdjustment;
        this.indexPatterns = $.indexPatterns;
        this.indexTemplate = $.indexTemplate;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.keepIndexRefreshInterval = $.keepIndexRefreshInterval;
        this.maxIndexCount = $.maxIndexCount;
        this.openid = $.openid;
        this.opensearch = $.opensearch;
        this.opensearchDashboards = $.opensearchDashboards;
        this.opensearchVersion = $.opensearchVersion;
        this.privateAccess = $.privateAccess;
        this.privatelinkAccess = $.privatelinkAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.recoveryBasebackupName = $.recoveryBasebackupName;
        this.saml = $.saml;
        this.serviceLog = $.serviceLog;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.staticIps = $.staticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenSearchOpensearchUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenSearchOpensearchUserConfigArgs $;

        public Builder() {
            $ = new OpenSearchOpensearchUserConfigArgs();
        }

        public Builder(OpenSearchOpensearchUserConfigArgs defaults) {
            $ = new OpenSearchOpensearchUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(@Nullable Output<String> additionalBackupRegions) {
            $.additionalBackupRegions = additionalBackupRegions;
            return this;
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(String additionalBackupRegions) {
            return additionalBackupRegions(Output.of(additionalBackupRegions));
        }

        /**
         * @param customDomain Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(@Nullable Output<String> customDomain) {
            $.customDomain = customDomain;
            return this;
        }

        /**
         * @param customDomain Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(String customDomain) {
            return customDomain(Output.of(customDomain));
        }

        /**
         * @param disableReplicationFactorAdjustment Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.
         * 
         * @return builder
         * 
         */
        public Builder disableReplicationFactorAdjustment(@Nullable Output<Boolean> disableReplicationFactorAdjustment) {
            $.disableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            return this;
        }

        /**
         * @param disableReplicationFactorAdjustment Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.
         * 
         * @return builder
         * 
         */
        public Builder disableReplicationFactorAdjustment(Boolean disableReplicationFactorAdjustment) {
            return disableReplicationFactorAdjustment(Output.of(disableReplicationFactorAdjustment));
        }

        /**
         * @param indexPatterns Index patterns
         * 
         * @return builder
         * 
         */
        public Builder indexPatterns(@Nullable Output<List<OpenSearchOpensearchUserConfigIndexPatternArgs>> indexPatterns) {
            $.indexPatterns = indexPatterns;
            return this;
        }

        /**
         * @param indexPatterns Index patterns
         * 
         * @return builder
         * 
         */
        public Builder indexPatterns(List<OpenSearchOpensearchUserConfigIndexPatternArgs> indexPatterns) {
            return indexPatterns(Output.of(indexPatterns));
        }

        /**
         * @param indexPatterns Index patterns
         * 
         * @return builder
         * 
         */
        public Builder indexPatterns(OpenSearchOpensearchUserConfigIndexPatternArgs... indexPatterns) {
            return indexPatterns(List.of(indexPatterns));
        }

        /**
         * @param indexTemplate Template settings for all new indexes
         * 
         * @return builder
         * 
         */
        public Builder indexTemplate(@Nullable Output<OpenSearchOpensearchUserConfigIndexTemplateArgs> indexTemplate) {
            $.indexTemplate = indexTemplate;
            return this;
        }

        /**
         * @param indexTemplate Template settings for all new indexes
         * 
         * @return builder
         * 
         */
        public Builder indexTemplate(OpenSearchOpensearchUserConfigIndexTemplateArgs indexTemplate) {
            return indexTemplate(Output.of(indexTemplate));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(@Nullable Output<List<OpenSearchOpensearchUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(List<OpenSearchOpensearchUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(OpenSearchOpensearchUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param keepIndexRefreshInterval Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
         * 
         * @return builder
         * 
         */
        public Builder keepIndexRefreshInterval(@Nullable Output<Boolean> keepIndexRefreshInterval) {
            $.keepIndexRefreshInterval = keepIndexRefreshInterval;
            return this;
        }

        /**
         * @param keepIndexRefreshInterval Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
         * 
         * @return builder
         * 
         */
        public Builder keepIndexRefreshInterval(Boolean keepIndexRefreshInterval) {
            return keepIndexRefreshInterval(Output.of(keepIndexRefreshInterval));
        }

        /**
         * @param maxIndexCount Use index_patterns instead. Default: `0`.
         * 
         * @return builder
         * 
         */
        public Builder maxIndexCount(@Nullable Output<Integer> maxIndexCount) {
            $.maxIndexCount = maxIndexCount;
            return this;
        }

        /**
         * @param maxIndexCount Use index_patterns instead. Default: `0`.
         * 
         * @return builder
         * 
         */
        public Builder maxIndexCount(Integer maxIndexCount) {
            return maxIndexCount(Output.of(maxIndexCount));
        }

        /**
         * @param openid OpenSearch OpenID Connect Configuration
         * 
         * @return builder
         * 
         */
        public Builder openid(@Nullable Output<OpenSearchOpensearchUserConfigOpenidArgs> openid) {
            $.openid = openid;
            return this;
        }

        /**
         * @param openid OpenSearch OpenID Connect Configuration
         * 
         * @return builder
         * 
         */
        public Builder openid(OpenSearchOpensearchUserConfigOpenidArgs openid) {
            return openid(Output.of(openid));
        }

        /**
         * @param opensearch OpenSearch settings
         * 
         * @return builder
         * 
         */
        public Builder opensearch(@Nullable Output<OpenSearchOpensearchUserConfigOpensearchArgs> opensearch) {
            $.opensearch = opensearch;
            return this;
        }

        /**
         * @param opensearch OpenSearch settings
         * 
         * @return builder
         * 
         */
        public Builder opensearch(OpenSearchOpensearchUserConfigOpensearchArgs opensearch) {
            return opensearch(Output.of(opensearch));
        }

        /**
         * @param opensearchDashboards OpenSearch Dashboards settings
         * 
         * @return builder
         * 
         */
        public Builder opensearchDashboards(@Nullable Output<OpenSearchOpensearchUserConfigOpensearchDashboardsArgs> opensearchDashboards) {
            $.opensearchDashboards = opensearchDashboards;
            return this;
        }

        /**
         * @param opensearchDashboards OpenSearch Dashboards settings
         * 
         * @return builder
         * 
         */
        public Builder opensearchDashboards(OpenSearchOpensearchUserConfigOpensearchDashboardsArgs opensearchDashboards) {
            return opensearchDashboards(Output.of(opensearchDashboards));
        }

        /**
         * @param opensearchVersion Enum: `1`, `2`, and newer. OpenSearch major version.
         * 
         * @return builder
         * 
         */
        public Builder opensearchVersion(@Nullable Output<String> opensearchVersion) {
            $.opensearchVersion = opensearchVersion;
            return this;
        }

        /**
         * @param opensearchVersion Enum: `1`, `2`, and newer. OpenSearch major version.
         * 
         * @return builder
         * 
         */
        public Builder opensearchVersion(String opensearchVersion) {
            return opensearchVersion(Output.of(opensearchVersion));
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(@Nullable Output<OpenSearchOpensearchUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(OpenSearchOpensearchUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(@Nullable Output<OpenSearchOpensearchUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(OpenSearchOpensearchUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<OpenSearchOpensearchUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(OpenSearchOpensearchUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(@Nullable Output<String> recoveryBasebackupName) {
            $.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(String recoveryBasebackupName) {
            return recoveryBasebackupName(Output.of(recoveryBasebackupName));
        }

        /**
         * @param saml OpenSearch SAML configuration
         * 
         * @return builder
         * 
         */
        public Builder saml(@Nullable Output<OpenSearchOpensearchUserConfigSamlArgs> saml) {
            $.saml = saml;
            return this;
        }

        /**
         * @param saml OpenSearch SAML configuration
         * 
         * @return builder
         * 
         */
        public Builder saml(OpenSearchOpensearchUserConfigSamlArgs saml) {
            return saml(Output.of(saml));
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        public OpenSearchOpensearchUserConfigArgs build() {
            return $;
        }
    }

}
