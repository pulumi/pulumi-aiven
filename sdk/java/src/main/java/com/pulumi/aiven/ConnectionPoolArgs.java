// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionPoolArgs Empty = new ConnectionPoolArgs();

    /**
     * The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The mode the pool operates in. The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
     * 
     */
    @Import(name="poolMode")
    private @Nullable Output<String> poolMode;

    /**
     * @return The mode the pool operates in. The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
     * 
     */
    public Optional<Output<String>> poolMode() {
        return Optional.ofNullable(this.poolMode);
    }

    /**
     * The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="poolName", required=true)
    private Output<String> poolName;

    /**
     * @return The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> poolName() {
        return this.poolName;
    }

    /**
     * The number of connections the pool may create towards the backend server. This does not affect the number of incoming connections, which is always a much larger number. The default value is `10`.
     * 
     */
    @Import(name="poolSize")
    private @Nullable Output<Integer> poolSize;

    /**
     * @return The number of connections the pool may create towards the backend server. This does not affect the number of incoming connections, which is always a much larger number. The default value is `10`.
     * 
     */
    public Optional<Output<Integer>> poolSize() {
        return Optional.ofNullable(this.poolSize);
    }

    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ConnectionPoolArgs() {}

    private ConnectionPoolArgs(ConnectionPoolArgs $) {
        this.databaseName = $.databaseName;
        this.poolMode = $.poolMode;
        this.poolName = $.poolName;
        this.poolSize = $.poolSize;
        this.project = $.project;
        this.serviceName = $.serviceName;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionPoolArgs $;

        public Builder() {
            $ = new ConnectionPoolArgs();
        }

        public Builder(ConnectionPoolArgs defaults) {
            $ = new ConnectionPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param poolMode The mode the pool operates in. The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
         * 
         * @return builder
         * 
         */
        public Builder poolMode(@Nullable Output<String> poolMode) {
            $.poolMode = poolMode;
            return this;
        }

        /**
         * @param poolMode The mode the pool operates in. The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
         * 
         * @return builder
         * 
         */
        public Builder poolMode(String poolMode) {
            return poolMode(Output.of(poolMode));
        }

        /**
         * @param poolName The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder poolName(Output<String> poolName) {
            $.poolName = poolName;
            return this;
        }

        /**
         * @param poolName The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder poolName(String poolName) {
            return poolName(Output.of(poolName));
        }

        /**
         * @param poolSize The number of connections the pool may create towards the backend server. This does not affect the number of incoming connections, which is always a much larger number. The default value is `10`.
         * 
         * @return builder
         * 
         */
        public Builder poolSize(@Nullable Output<Integer> poolSize) {
            $.poolSize = poolSize;
            return this;
        }

        /**
         * @param poolSize The number of connections the pool may create towards the backend server. This does not affect the number of incoming connections, which is always a much larger number. The default value is `10`.
         * 
         * @return builder
         * 
         */
        public Builder poolSize(Integer poolSize) {
            return poolSize(Output.of(poolSize));
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param username The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ConnectionPoolArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.poolName = Objects.requireNonNull($.poolName, "expected parameter 'poolName' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
