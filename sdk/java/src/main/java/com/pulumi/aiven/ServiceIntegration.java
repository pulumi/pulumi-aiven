// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.aiven.ServiceIntegrationArgs;
import com.pulumi.aiven.Utilities;
import com.pulumi.aiven.inputs.ServiceIntegrationState;
import com.pulumi.aiven.outputs.ServiceIntegrationKafkaConnectUserConfig;
import com.pulumi.aiven.outputs.ServiceIntegrationKafkaLogsUserConfig;
import com.pulumi.aiven.outputs.ServiceIntegrationKafkaMirrormakerUserConfig;
import com.pulumi.aiven.outputs.ServiceIntegrationLogsUserConfig;
import com.pulumi.aiven.outputs.ServiceIntegrationMetricsUserConfig;
import com.pulumi.aiven.outputs.ServiceIntegrationMirrormakerUserConfig;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The Service Integration resource allows the creation and management of Aiven Service Integrations.
 * 
 * **Note** For services running on `hobbyist` plan service integrations are not supported.
 * 
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external
 * integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service,
 * getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to
 * Elasticsearch, etc.
 * 
 * ## Example Usage
 * 
 * {{tffile &#34;examples/resources/aiven_service_integration/resource.tf&#34;}}
 * 
 * ## Import
 * 
 * {{codefile &#34;shell&#34; &#34;examples/resources/aiven_service_integration/import.sh&#34;}}
 * 
 */
@ResourceType(type="aiven:index/serviceIntegration:ServiceIntegration")
public class ServiceIntegration extends com.pulumi.resources.CustomResource {
    /**
     * Destination endpoint for the integration (if any)
     * 
     */
    @Export(name="destinationEndpointId", type=String.class, parameters={})
    private Output</* @Nullable */ String> destinationEndpointId;

    /**
     * @return Destination endpoint for the integration (if any)
     * 
     */
    public Output<Optional<String>> destinationEndpointId() {
        return Codegen.optional(this.destinationEndpointId);
    }
    /**
     * Destination service for the integration (if any)
     * 
     */
    @Export(name="destinationServiceName", type=String.class, parameters={})
    private Output</* @Nullable */ String> destinationServiceName;

    /**
     * @return Destination service for the integration (if any)
     * 
     */
    public Output<Optional<String>> destinationServiceName() {
        return Codegen.optional(this.destinationServiceName);
    }
    /**
     * Service Integration Id at aiven
     * 
     */
    @Export(name="integrationId", type=String.class, parameters={})
    private Output<String> integrationId;

    /**
     * @return Service Integration Id at aiven
     * 
     */
    public Output<String> integrationId() {
        return this.integrationId;
    }
    /**
     * Type of the service integration
     * 
     */
    @Export(name="integrationType", type=String.class, parameters={})
    private Output<String> integrationType;

    /**
     * @return Type of the service integration
     * 
     */
    public Output<String> integrationType() {
        return this.integrationType;
    }
    /**
     * Kafka Connect specific user configurable settings
     * 
     */
    @Export(name="kafkaConnectUserConfig", type=ServiceIntegrationKafkaConnectUserConfig.class, parameters={})
    private Output</* @Nullable */ ServiceIntegrationKafkaConnectUserConfig> kafkaConnectUserConfig;

    /**
     * @return Kafka Connect specific user configurable settings
     * 
     */
    public Output<Optional<ServiceIntegrationKafkaConnectUserConfig>> kafkaConnectUserConfig() {
        return Codegen.optional(this.kafkaConnectUserConfig);
    }
    /**
     * Kafka Logs specific user configurable settings
     * 
     */
    @Export(name="kafkaLogsUserConfig", type=ServiceIntegrationKafkaLogsUserConfig.class, parameters={})
    private Output</* @Nullable */ ServiceIntegrationKafkaLogsUserConfig> kafkaLogsUserConfig;

    /**
     * @return Kafka Logs specific user configurable settings
     * 
     */
    public Output<Optional<ServiceIntegrationKafkaLogsUserConfig>> kafkaLogsUserConfig() {
        return Codegen.optional(this.kafkaLogsUserConfig);
    }
    /**
     * Mirrormaker 2 integration specific user configurable settings
     * 
     */
    @Export(name="kafkaMirrormakerUserConfig", type=ServiceIntegrationKafkaMirrormakerUserConfig.class, parameters={})
    private Output</* @Nullable */ ServiceIntegrationKafkaMirrormakerUserConfig> kafkaMirrormakerUserConfig;

    /**
     * @return Mirrormaker 2 integration specific user configurable settings
     * 
     */
    public Output<Optional<ServiceIntegrationKafkaMirrormakerUserConfig>> kafkaMirrormakerUserConfig() {
        return Codegen.optional(this.kafkaMirrormakerUserConfig);
    }
    /**
     * Log integration specific user configurable settings
     * 
     */
    @Export(name="logsUserConfig", type=ServiceIntegrationLogsUserConfig.class, parameters={})
    private Output</* @Nullable */ ServiceIntegrationLogsUserConfig> logsUserConfig;

    /**
     * @return Log integration specific user configurable settings
     * 
     */
    public Output<Optional<ServiceIntegrationLogsUserConfig>> logsUserConfig() {
        return Codegen.optional(this.logsUserConfig);
    }
    /**
     * Metrics specific user configurable settings
     * 
     */
    @Export(name="metricsUserConfig", type=ServiceIntegrationMetricsUserConfig.class, parameters={})
    private Output</* @Nullable */ ServiceIntegrationMetricsUserConfig> metricsUserConfig;

    /**
     * @return Metrics specific user configurable settings
     * 
     */
    public Output<Optional<ServiceIntegrationMetricsUserConfig>> metricsUserConfig() {
        return Codegen.optional(this.metricsUserConfig);
    }
    /**
     * Mirrormaker 1 integration specific user configurable settings
     * 
     */
    @Export(name="mirrormakerUserConfig", type=ServiceIntegrationMirrormakerUserConfig.class, parameters={})
    private Output</* @Nullable */ ServiceIntegrationMirrormakerUserConfig> mirrormakerUserConfig;

    /**
     * @return Mirrormaker 1 integration specific user configurable settings
     * 
     */
    public Output<Optional<ServiceIntegrationMirrormakerUserConfig>> mirrormakerUserConfig() {
        return Codegen.optional(this.mirrormakerUserConfig);
    }
    /**
     * Project the integration belongs to
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return Project the integration belongs to
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Source endpoint for the integration (if any)
     * 
     */
    @Export(name="sourceEndpointId", type=String.class, parameters={})
    private Output</* @Nullable */ String> sourceEndpointId;

    /**
     * @return Source endpoint for the integration (if any)
     * 
     */
    public Output<Optional<String>> sourceEndpointId() {
        return Codegen.optional(this.sourceEndpointId);
    }
    /**
     * Source service for the integration (if any)
     * 
     */
    @Export(name="sourceServiceName", type=String.class, parameters={})
    private Output</* @Nullable */ String> sourceServiceName;

    /**
     * @return Source service for the integration (if any)
     * 
     */
    public Output<Optional<String>> sourceServiceName() {
        return Codegen.optional(this.sourceServiceName);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceIntegration(String name) {
        this(name, ServiceIntegrationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceIntegration(String name, ServiceIntegrationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceIntegration(String name, ServiceIntegrationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aiven:index/serviceIntegration:ServiceIntegration", name, args == null ? ServiceIntegrationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServiceIntegration(String name, Output<String> id, @Nullable ServiceIntegrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aiven:index/serviceIntegration:ServiceIntegration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceIntegration get(String name, Output<String> id, @Nullable ServiceIntegrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceIntegration(name, id, state, options);
    }
}
