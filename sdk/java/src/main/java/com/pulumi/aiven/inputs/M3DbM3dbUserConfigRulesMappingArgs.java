// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.M3DbM3dbUserConfigRulesMappingNamespacesObjectArgs;
import com.pulumi.aiven.inputs.M3DbM3dbUserConfigRulesMappingTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class M3DbM3dbUserConfigRulesMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final M3DbM3dbUserConfigRulesMappingArgs Empty = new M3DbM3dbUserConfigRulesMappingArgs();

    @Import(name="aggregations")
    private @Nullable Output<List<String>> aggregations;

    public Optional<Output<List<String>>> aggregations() {
        return Optional.ofNullable(this.aggregations);
    }

    @Import(name="drop")
    private @Nullable Output<Boolean> drop;

    public Optional<Output<Boolean>> drop() {
        return Optional.ofNullable(this.drop);
    }

    @Import(name="filter", required=true)
    private Output<String> filter;

    public Output<String> filter() {
        return this.filter;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with namespaces_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with namespaces_string instead. */
    @Import(name="namespaces")
    private @Nullable Output<List<String>> namespaces;

    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with namespaces_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with namespaces_string instead. */
    public Optional<Output<List<String>>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    @Import(name="namespacesObjects")
    private @Nullable Output<List<M3DbM3dbUserConfigRulesMappingNamespacesObjectArgs>> namespacesObjects;

    public Optional<Output<List<M3DbM3dbUserConfigRulesMappingNamespacesObjectArgs>>> namespacesObjects() {
        return Optional.ofNullable(this.namespacesObjects);
    }

    @Import(name="tags")
    private @Nullable Output<List<M3DbM3dbUserConfigRulesMappingTagArgs>> tags;

    public Optional<Output<List<M3DbM3dbUserConfigRulesMappingTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private M3DbM3dbUserConfigRulesMappingArgs() {}

    private M3DbM3dbUserConfigRulesMappingArgs(M3DbM3dbUserConfigRulesMappingArgs $) {
        this.aggregations = $.aggregations;
        this.drop = $.drop;
        this.filter = $.filter;
        this.name = $.name;
        this.namespaces = $.namespaces;
        this.namespacesObjects = $.namespacesObjects;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(M3DbM3dbUserConfigRulesMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private M3DbM3dbUserConfigRulesMappingArgs $;

        public Builder() {
            $ = new M3DbM3dbUserConfigRulesMappingArgs();
        }

        public Builder(M3DbM3dbUserConfigRulesMappingArgs defaults) {
            $ = new M3DbM3dbUserConfigRulesMappingArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregations(@Nullable Output<List<String>> aggregations) {
            $.aggregations = aggregations;
            return this;
        }

        public Builder aggregations(List<String> aggregations) {
            return aggregations(Output.of(aggregations));
        }

        public Builder aggregations(String... aggregations) {
            return aggregations(List.of(aggregations));
        }

        public Builder drop(@Nullable Output<Boolean> drop) {
            $.drop = drop;
            return this;
        }

        public Builder drop(Boolean drop) {
            return drop(Output.of(drop));
        }

        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with namespaces_string instead.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with namespaces_string instead. */
        public Builder namespaces(@Nullable Output<List<String>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with namespaces_string instead.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with namespaces_string instead. */
        public Builder namespaces(List<String> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with namespaces_string instead.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with namespaces_string instead. */
        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        public Builder namespacesObjects(@Nullable Output<List<M3DbM3dbUserConfigRulesMappingNamespacesObjectArgs>> namespacesObjects) {
            $.namespacesObjects = namespacesObjects;
            return this;
        }

        public Builder namespacesObjects(List<M3DbM3dbUserConfigRulesMappingNamespacesObjectArgs> namespacesObjects) {
            return namespacesObjects(Output.of(namespacesObjects));
        }

        public Builder namespacesObjects(M3DbM3dbUserConfigRulesMappingNamespacesObjectArgs... namespacesObjects) {
            return namespacesObjects(List.of(namespacesObjects));
        }

        public Builder tags(@Nullable Output<List<M3DbM3dbUserConfigRulesMappingTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<M3DbM3dbUserConfigRulesMappingTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(M3DbM3dbUserConfigRulesMappingTagArgs... tags) {
            return tags(List.of(tags));
        }

        public M3DbM3dbUserConfigRulesMappingArgs build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            return $;
        }
    }

}
