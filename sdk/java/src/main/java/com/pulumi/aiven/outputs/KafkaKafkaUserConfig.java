// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafka;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafkaAuthenticationMethods;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafkaConnectConfig;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafkaRestConfig;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigPublicAccess;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigSchemaRegistryConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KafkaKafkaUserConfig {
    private final @Nullable String customDomain;
    private final @Nullable List<String> ipFilters;
    private final @Nullable KafkaKafkaUserConfigKafka kafka;
    private final @Nullable KafkaKafkaUserConfigKafkaAuthenticationMethods kafkaAuthenticationMethods;
    private final @Nullable String kafkaConnect;
    private final @Nullable KafkaKafkaUserConfigKafkaConnectConfig kafkaConnectConfig;
    private final @Nullable String kafkaRest;
    private final @Nullable KafkaKafkaUserConfigKafkaRestConfig kafkaRestConfig;
    private final @Nullable String kafkaVersion;
    private final @Nullable KafkaKafkaUserConfigPrivateAccess privateAccess;
    private final @Nullable KafkaKafkaUserConfigPrivatelinkAccess privatelinkAccess;
    private final @Nullable KafkaKafkaUserConfigPublicAccess publicAccess;
    private final @Nullable String schemaRegistry;
    private final @Nullable KafkaKafkaUserConfigSchemaRegistryConfig schemaRegistryConfig;
    private final @Nullable String staticIps;

    @CustomType.Constructor
    private KafkaKafkaUserConfig(
        @CustomType.Parameter("customDomain") @Nullable String customDomain,
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("kafka") @Nullable KafkaKafkaUserConfigKafka kafka,
        @CustomType.Parameter("kafkaAuthenticationMethods") @Nullable KafkaKafkaUserConfigKafkaAuthenticationMethods kafkaAuthenticationMethods,
        @CustomType.Parameter("kafkaConnect") @Nullable String kafkaConnect,
        @CustomType.Parameter("kafkaConnectConfig") @Nullable KafkaKafkaUserConfigKafkaConnectConfig kafkaConnectConfig,
        @CustomType.Parameter("kafkaRest") @Nullable String kafkaRest,
        @CustomType.Parameter("kafkaRestConfig") @Nullable KafkaKafkaUserConfigKafkaRestConfig kafkaRestConfig,
        @CustomType.Parameter("kafkaVersion") @Nullable String kafkaVersion,
        @CustomType.Parameter("privateAccess") @Nullable KafkaKafkaUserConfigPrivateAccess privateAccess,
        @CustomType.Parameter("privatelinkAccess") @Nullable KafkaKafkaUserConfigPrivatelinkAccess privatelinkAccess,
        @CustomType.Parameter("publicAccess") @Nullable KafkaKafkaUserConfigPublicAccess publicAccess,
        @CustomType.Parameter("schemaRegistry") @Nullable String schemaRegistry,
        @CustomType.Parameter("schemaRegistryConfig") @Nullable KafkaKafkaUserConfigSchemaRegistryConfig schemaRegistryConfig,
        @CustomType.Parameter("staticIps") @Nullable String staticIps) {
        this.customDomain = customDomain;
        this.ipFilters = ipFilters;
        this.kafka = kafka;
        this.kafkaAuthenticationMethods = kafkaAuthenticationMethods;
        this.kafkaConnect = kafkaConnect;
        this.kafkaConnectConfig = kafkaConnectConfig;
        this.kafkaRest = kafkaRest;
        this.kafkaRestConfig = kafkaRestConfig;
        this.kafkaVersion = kafkaVersion;
        this.privateAccess = privateAccess;
        this.privatelinkAccess = privatelinkAccess;
        this.publicAccess = publicAccess;
        this.schemaRegistry = schemaRegistry;
        this.schemaRegistryConfig = schemaRegistryConfig;
        this.staticIps = staticIps;
    }

    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<KafkaKafkaUserConfigKafka> kafka() {
        return Optional.ofNullable(this.kafka);
    }
    public Optional<KafkaKafkaUserConfigKafkaAuthenticationMethods> kafkaAuthenticationMethods() {
        return Optional.ofNullable(this.kafkaAuthenticationMethods);
    }
    public Optional<String> kafkaConnect() {
        return Optional.ofNullable(this.kafkaConnect);
    }
    public Optional<KafkaKafkaUserConfigKafkaConnectConfig> kafkaConnectConfig() {
        return Optional.ofNullable(this.kafkaConnectConfig);
    }
    public Optional<String> kafkaRest() {
        return Optional.ofNullable(this.kafkaRest);
    }
    public Optional<KafkaKafkaUserConfigKafkaRestConfig> kafkaRestConfig() {
        return Optional.ofNullable(this.kafkaRestConfig);
    }
    public Optional<String> kafkaVersion() {
        return Optional.ofNullable(this.kafkaVersion);
    }
    public Optional<KafkaKafkaUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<KafkaKafkaUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    public Optional<KafkaKafkaUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Optional<String> schemaRegistry() {
        return Optional.ofNullable(this.schemaRegistry);
    }
    public Optional<KafkaKafkaUserConfigSchemaRegistryConfig> schemaRegistryConfig() {
        return Optional.ofNullable(this.schemaRegistryConfig);
    }
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KafkaKafkaUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String customDomain;
        private @Nullable List<String> ipFilters;
        private @Nullable KafkaKafkaUserConfigKafka kafka;
        private @Nullable KafkaKafkaUserConfigKafkaAuthenticationMethods kafkaAuthenticationMethods;
        private @Nullable String kafkaConnect;
        private @Nullable KafkaKafkaUserConfigKafkaConnectConfig kafkaConnectConfig;
        private @Nullable String kafkaRest;
        private @Nullable KafkaKafkaUserConfigKafkaRestConfig kafkaRestConfig;
        private @Nullable String kafkaVersion;
        private @Nullable KafkaKafkaUserConfigPrivateAccess privateAccess;
        private @Nullable KafkaKafkaUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable KafkaKafkaUserConfigPublicAccess publicAccess;
        private @Nullable String schemaRegistry;
        private @Nullable KafkaKafkaUserConfigSchemaRegistryConfig schemaRegistryConfig;
        private @Nullable String staticIps;

        public Builder() {
    	      // Empty
        }

        public Builder(KafkaKafkaUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customDomain = defaults.customDomain;
    	      this.ipFilters = defaults.ipFilters;
    	      this.kafka = defaults.kafka;
    	      this.kafkaAuthenticationMethods = defaults.kafkaAuthenticationMethods;
    	      this.kafkaConnect = defaults.kafkaConnect;
    	      this.kafkaConnectConfig = defaults.kafkaConnectConfig;
    	      this.kafkaRest = defaults.kafkaRest;
    	      this.kafkaRestConfig = defaults.kafkaRestConfig;
    	      this.kafkaVersion = defaults.kafkaVersion;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.publicAccess = defaults.publicAccess;
    	      this.schemaRegistry = defaults.schemaRegistry;
    	      this.schemaRegistryConfig = defaults.schemaRegistryConfig;
    	      this.staticIps = defaults.staticIps;
        }

        public Builder customDomain(@Nullable String customDomain) {
            this.customDomain = customDomain;
            return this;
        }
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder kafka(@Nullable KafkaKafkaUserConfigKafka kafka) {
            this.kafka = kafka;
            return this;
        }
        public Builder kafkaAuthenticationMethods(@Nullable KafkaKafkaUserConfigKafkaAuthenticationMethods kafkaAuthenticationMethods) {
            this.kafkaAuthenticationMethods = kafkaAuthenticationMethods;
            return this;
        }
        public Builder kafkaConnect(@Nullable String kafkaConnect) {
            this.kafkaConnect = kafkaConnect;
            return this;
        }
        public Builder kafkaConnectConfig(@Nullable KafkaKafkaUserConfigKafkaConnectConfig kafkaConnectConfig) {
            this.kafkaConnectConfig = kafkaConnectConfig;
            return this;
        }
        public Builder kafkaRest(@Nullable String kafkaRest) {
            this.kafkaRest = kafkaRest;
            return this;
        }
        public Builder kafkaRestConfig(@Nullable KafkaKafkaUserConfigKafkaRestConfig kafkaRestConfig) {
            this.kafkaRestConfig = kafkaRestConfig;
            return this;
        }
        public Builder kafkaVersion(@Nullable String kafkaVersion) {
            this.kafkaVersion = kafkaVersion;
            return this;
        }
        public Builder privateAccess(@Nullable KafkaKafkaUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        public Builder privatelinkAccess(@Nullable KafkaKafkaUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        public Builder publicAccess(@Nullable KafkaKafkaUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder schemaRegistry(@Nullable String schemaRegistry) {
            this.schemaRegistry = schemaRegistry;
            return this;
        }
        public Builder schemaRegistryConfig(@Nullable KafkaKafkaUserConfigSchemaRegistryConfig schemaRegistryConfig) {
            this.schemaRegistryConfig = schemaRegistryConfig;
            return this;
        }
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }        public KafkaKafkaUserConfig build() {
            return new KafkaKafkaUserConfig(customDomain, ipFilters, kafka, kafkaAuthenticationMethods, kafkaConnect, kafkaConnectConfig, kafkaRest, kafkaRestConfig, kafkaVersion, privateAccess, privatelinkAccess, publicAccess, schemaRegistry, schemaRegistryConfig, staticIps);
        }
    }
}
