// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.KafkaKafkaUserConfigFollowerFetching;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafka;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafkaAuthenticationMethods;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafkaConnectConfig;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafkaConnectSecretProvider;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafkaRestConfig;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigKafkaSaslMechanisms;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigPublicAccess;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigSchemaRegistryConfig;
import com.pulumi.aiven.outputs.KafkaKafkaUserConfigTieredStorage;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KafkaKafkaUserConfig {
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    private @Nullable String additionalBackupRegions;
    /**
     * @return Allow access to read Kafka topic messages in the Aiven Console and REST API.
     * 
     */
    private @Nullable Boolean aivenKafkaTopicMessages;
    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
     * 
     */
    private @Nullable String customDomain;
    /**
     * @return Enable follower fetching
     * 
     */
    private @Nullable KafkaKafkaUserConfigFollowerFetching followerFetching;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    private @Nullable List<KafkaKafkaUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return Kafka broker configuration values
     * 
     */
    private @Nullable KafkaKafkaUserConfigKafka kafka;
    /**
     * @return Kafka authentication methods
     * 
     */
    private @Nullable KafkaKafkaUserConfigKafkaAuthenticationMethods kafkaAuthenticationMethods;
    /**
     * @return Enable Kafka Connect service. Default: `false`.
     * 
     */
    private @Nullable Boolean kafkaConnect;
    /**
     * @return Kafka Connect configuration values
     * 
     */
    private @Nullable KafkaKafkaUserConfigKafkaConnectConfig kafkaConnectConfig;
    private @Nullable List<KafkaKafkaUserConfigKafkaConnectSecretProvider> kafkaConnectSecretProviders;
    /**
     * @return Enable Kafka-REST service. Default: `false`.
     * 
     */
    private @Nullable Boolean kafkaRest;
    /**
     * @return Enable authorization in Kafka-REST service.
     * 
     */
    private @Nullable Boolean kafkaRestAuthorization;
    /**
     * @return Kafka REST configuration
     * 
     */
    private @Nullable KafkaKafkaUserConfigKafkaRestConfig kafkaRestConfig;
    /**
     * @return Kafka SASL mechanisms
     * 
     */
    private @Nullable KafkaKafkaUserConfigKafkaSaslMechanisms kafkaSaslMechanisms;
    /**
     * @return Enum: `3.1`, `3.2`, `3.3`, `3.4`, `3.5`, `3.6`, `3.7`, `3.8`, and newer. Kafka major version.
     * 
     */
    private @Nullable String kafkaVersion;
    /**
     * @return Use Letsencrypt CA for Kafka SASL via Privatelink.
     * 
     */
    private @Nullable Boolean letsencryptSaslPrivatelink;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private @Nullable KafkaKafkaUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private @Nullable KafkaKafkaUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable KafkaKafkaUserConfigPublicAccess publicAccess;
    /**
     * @return Enable Schema-Registry service. Default: `false`.
     * 
     */
    private @Nullable Boolean schemaRegistry;
    /**
     * @return Schema Registry configuration
     * 
     */
    private @Nullable KafkaKafkaUserConfigSchemaRegistryConfig schemaRegistryConfig;
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Use static public IP addresses.
     * 
     */
    private @Nullable Boolean staticIps;
    /**
     * @return Tiered storage configuration
     * 
     */
    private @Nullable KafkaKafkaUserConfigTieredStorage tieredStorage;

    private KafkaKafkaUserConfig() {}
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    /**
     * @return Allow access to read Kafka topic messages in the Aiven Console and REST API.
     * 
     */
    public Optional<Boolean> aivenKafkaTopicMessages() {
        return Optional.ofNullable(this.aivenKafkaTopicMessages);
    }
    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
     * 
     */
    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    /**
     * @return Enable follower fetching
     * 
     */
    public Optional<KafkaKafkaUserConfigFollowerFetching> followerFetching() {
        return Optional.ofNullable(this.followerFetching);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public List<KafkaKafkaUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Kafka broker configuration values
     * 
     */
    public Optional<KafkaKafkaUserConfigKafka> kafka() {
        return Optional.ofNullable(this.kafka);
    }
    /**
     * @return Kafka authentication methods
     * 
     */
    public Optional<KafkaKafkaUserConfigKafkaAuthenticationMethods> kafkaAuthenticationMethods() {
        return Optional.ofNullable(this.kafkaAuthenticationMethods);
    }
    /**
     * @return Enable Kafka Connect service. Default: `false`.
     * 
     */
    public Optional<Boolean> kafkaConnect() {
        return Optional.ofNullable(this.kafkaConnect);
    }
    /**
     * @return Kafka Connect configuration values
     * 
     */
    public Optional<KafkaKafkaUserConfigKafkaConnectConfig> kafkaConnectConfig() {
        return Optional.ofNullable(this.kafkaConnectConfig);
    }
    public List<KafkaKafkaUserConfigKafkaConnectSecretProvider> kafkaConnectSecretProviders() {
        return this.kafkaConnectSecretProviders == null ? List.of() : this.kafkaConnectSecretProviders;
    }
    /**
     * @return Enable Kafka-REST service. Default: `false`.
     * 
     */
    public Optional<Boolean> kafkaRest() {
        return Optional.ofNullable(this.kafkaRest);
    }
    /**
     * @return Enable authorization in Kafka-REST service.
     * 
     */
    public Optional<Boolean> kafkaRestAuthorization() {
        return Optional.ofNullable(this.kafkaRestAuthorization);
    }
    /**
     * @return Kafka REST configuration
     * 
     */
    public Optional<KafkaKafkaUserConfigKafkaRestConfig> kafkaRestConfig() {
        return Optional.ofNullable(this.kafkaRestConfig);
    }
    /**
     * @return Kafka SASL mechanisms
     * 
     */
    public Optional<KafkaKafkaUserConfigKafkaSaslMechanisms> kafkaSaslMechanisms() {
        return Optional.ofNullable(this.kafkaSaslMechanisms);
    }
    /**
     * @return Enum: `3.1`, `3.2`, `3.3`, `3.4`, `3.5`, `3.6`, `3.7`, `3.8`, and newer. Kafka major version.
     * 
     */
    public Optional<String> kafkaVersion() {
        return Optional.ofNullable(this.kafkaVersion);
    }
    /**
     * @return Use Letsencrypt CA for Kafka SASL via Privatelink.
     * 
     */
    public Optional<Boolean> letsencryptSaslPrivatelink() {
        return Optional.ofNullable(this.letsencryptSaslPrivatelink);
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<KafkaKafkaUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<KafkaKafkaUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<KafkaKafkaUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Enable Schema-Registry service. Default: `false`.
     * 
     */
    public Optional<Boolean> schemaRegistry() {
        return Optional.ofNullable(this.schemaRegistry);
    }
    /**
     * @return Schema Registry configuration
     * 
     */
    public Optional<KafkaKafkaUserConfigSchemaRegistryConfig> schemaRegistryConfig() {
        return Optional.ofNullable(this.schemaRegistryConfig);
    }
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }
    /**
     * @return Tiered storage configuration
     * 
     */
    public Optional<KafkaKafkaUserConfigTieredStorage> tieredStorage() {
        return Optional.ofNullable(this.tieredStorage);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KafkaKafkaUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable Boolean aivenKafkaTopicMessages;
        private @Nullable String customDomain;
        private @Nullable KafkaKafkaUserConfigFollowerFetching followerFetching;
        private @Nullable List<KafkaKafkaUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable KafkaKafkaUserConfigKafka kafka;
        private @Nullable KafkaKafkaUserConfigKafkaAuthenticationMethods kafkaAuthenticationMethods;
        private @Nullable Boolean kafkaConnect;
        private @Nullable KafkaKafkaUserConfigKafkaConnectConfig kafkaConnectConfig;
        private @Nullable List<KafkaKafkaUserConfigKafkaConnectSecretProvider> kafkaConnectSecretProviders;
        private @Nullable Boolean kafkaRest;
        private @Nullable Boolean kafkaRestAuthorization;
        private @Nullable KafkaKafkaUserConfigKafkaRestConfig kafkaRestConfig;
        private @Nullable KafkaKafkaUserConfigKafkaSaslMechanisms kafkaSaslMechanisms;
        private @Nullable String kafkaVersion;
        private @Nullable Boolean letsencryptSaslPrivatelink;
        private @Nullable KafkaKafkaUserConfigPrivateAccess privateAccess;
        private @Nullable KafkaKafkaUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable KafkaKafkaUserConfigPublicAccess publicAccess;
        private @Nullable Boolean schemaRegistry;
        private @Nullable KafkaKafkaUserConfigSchemaRegistryConfig schemaRegistryConfig;
        private @Nullable Boolean serviceLog;
        private @Nullable Boolean staticIps;
        private @Nullable KafkaKafkaUserConfigTieredStorage tieredStorage;
        public Builder() {}
        public Builder(KafkaKafkaUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.aivenKafkaTopicMessages = defaults.aivenKafkaTopicMessages;
    	      this.customDomain = defaults.customDomain;
    	      this.followerFetching = defaults.followerFetching;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.kafka = defaults.kafka;
    	      this.kafkaAuthenticationMethods = defaults.kafkaAuthenticationMethods;
    	      this.kafkaConnect = defaults.kafkaConnect;
    	      this.kafkaConnectConfig = defaults.kafkaConnectConfig;
    	      this.kafkaConnectSecretProviders = defaults.kafkaConnectSecretProviders;
    	      this.kafkaRest = defaults.kafkaRest;
    	      this.kafkaRestAuthorization = defaults.kafkaRestAuthorization;
    	      this.kafkaRestConfig = defaults.kafkaRestConfig;
    	      this.kafkaSaslMechanisms = defaults.kafkaSaslMechanisms;
    	      this.kafkaVersion = defaults.kafkaVersion;
    	      this.letsencryptSaslPrivatelink = defaults.letsencryptSaslPrivatelink;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.publicAccess = defaults.publicAccess;
    	      this.schemaRegistry = defaults.schemaRegistry;
    	      this.schemaRegistryConfig = defaults.schemaRegistryConfig;
    	      this.serviceLog = defaults.serviceLog;
    	      this.staticIps = defaults.staticIps;
    	      this.tieredStorage = defaults.tieredStorage;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {

            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder aivenKafkaTopicMessages(@Nullable Boolean aivenKafkaTopicMessages) {

            this.aivenKafkaTopicMessages = aivenKafkaTopicMessages;
            return this;
        }
        @CustomType.Setter
        public Builder customDomain(@Nullable String customDomain) {

            this.customDomain = customDomain;
            return this;
        }
        @CustomType.Setter
        public Builder followerFetching(@Nullable KafkaKafkaUserConfigFollowerFetching followerFetching) {

            this.followerFetching = followerFetching;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<KafkaKafkaUserConfigIpFilterObject> ipFilterObjects) {

            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(KafkaKafkaUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {

            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder kafka(@Nullable KafkaKafkaUserConfigKafka kafka) {

            this.kafka = kafka;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaAuthenticationMethods(@Nullable KafkaKafkaUserConfigKafkaAuthenticationMethods kafkaAuthenticationMethods) {

            this.kafkaAuthenticationMethods = kafkaAuthenticationMethods;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaConnect(@Nullable Boolean kafkaConnect) {

            this.kafkaConnect = kafkaConnect;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaConnectConfig(@Nullable KafkaKafkaUserConfigKafkaConnectConfig kafkaConnectConfig) {

            this.kafkaConnectConfig = kafkaConnectConfig;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaConnectSecretProviders(@Nullable List<KafkaKafkaUserConfigKafkaConnectSecretProvider> kafkaConnectSecretProviders) {

            this.kafkaConnectSecretProviders = kafkaConnectSecretProviders;
            return this;
        }
        public Builder kafkaConnectSecretProviders(KafkaKafkaUserConfigKafkaConnectSecretProvider... kafkaConnectSecretProviders) {
            return kafkaConnectSecretProviders(List.of(kafkaConnectSecretProviders));
        }
        @CustomType.Setter
        public Builder kafkaRest(@Nullable Boolean kafkaRest) {

            this.kafkaRest = kafkaRest;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaRestAuthorization(@Nullable Boolean kafkaRestAuthorization) {

            this.kafkaRestAuthorization = kafkaRestAuthorization;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaRestConfig(@Nullable KafkaKafkaUserConfigKafkaRestConfig kafkaRestConfig) {

            this.kafkaRestConfig = kafkaRestConfig;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaSaslMechanisms(@Nullable KafkaKafkaUserConfigKafkaSaslMechanisms kafkaSaslMechanisms) {

            this.kafkaSaslMechanisms = kafkaSaslMechanisms;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaVersion(@Nullable String kafkaVersion) {

            this.kafkaVersion = kafkaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder letsencryptSaslPrivatelink(@Nullable Boolean letsencryptSaslPrivatelink) {

            this.letsencryptSaslPrivatelink = letsencryptSaslPrivatelink;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable KafkaKafkaUserConfigPrivateAccess privateAccess) {

            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable KafkaKafkaUserConfigPrivatelinkAccess privatelinkAccess) {

            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable KafkaKafkaUserConfigPublicAccess publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistry(@Nullable Boolean schemaRegistry) {

            this.schemaRegistry = schemaRegistry;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryConfig(@Nullable KafkaKafkaUserConfigSchemaRegistryConfig schemaRegistryConfig) {

            this.schemaRegistryConfig = schemaRegistryConfig;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {

            this.staticIps = staticIps;
            return this;
        }
        @CustomType.Setter
        public Builder tieredStorage(@Nullable KafkaKafkaUserConfigTieredStorage tieredStorage) {

            this.tieredStorage = tieredStorage;
            return this;
        }
        public KafkaKafkaUserConfig build() {
            final var _resultValue = new KafkaKafkaUserConfig();
            _resultValue.additionalBackupRegions = additionalBackupRegions;
            _resultValue.aivenKafkaTopicMessages = aivenKafkaTopicMessages;
            _resultValue.customDomain = customDomain;
            _resultValue.followerFetching = followerFetching;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.kafka = kafka;
            _resultValue.kafkaAuthenticationMethods = kafkaAuthenticationMethods;
            _resultValue.kafkaConnect = kafkaConnect;
            _resultValue.kafkaConnectConfig = kafkaConnectConfig;
            _resultValue.kafkaConnectSecretProviders = kafkaConnectSecretProviders;
            _resultValue.kafkaRest = kafkaRest;
            _resultValue.kafkaRestAuthorization = kafkaRestAuthorization;
            _resultValue.kafkaRestConfig = kafkaRestConfig;
            _resultValue.kafkaSaslMechanisms = kafkaSaslMechanisms;
            _resultValue.kafkaVersion = kafkaVersion;
            _resultValue.letsencryptSaslPrivatelink = letsencryptSaslPrivatelink;
            _resultValue.privateAccess = privateAccess;
            _resultValue.privatelinkAccess = privatelinkAccess;
            _resultValue.publicAccess = publicAccess;
            _resultValue.schemaRegistry = schemaRegistry;
            _resultValue.schemaRegistryConfig = schemaRegistryConfig;
            _resultValue.serviceLog = serviceLog;
            _resultValue.staticIps = staticIps;
            _resultValue.tieredStorage = tieredStorage;
            return _resultValue;
        }
    }
}
