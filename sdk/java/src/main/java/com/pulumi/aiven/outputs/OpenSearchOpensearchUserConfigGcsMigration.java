// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OpenSearchOpensearchUserConfigGcsMigration {
    /**
     * @return The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    private String basePath;
    /**
     * @return The path to the repository data within its container.
     * 
     */
    private String bucket;
    /**
     * @return Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    private @Nullable String chunkSize;
    /**
     * @return When set to true metadata files are stored in compressed format.
     * 
     */
    private @Nullable Boolean compress;
    /**
     * @return Google Cloud Storage credentials file content.
     * 
     */
    private String credentials;
    /**
     * @return The snapshot name to restore from.
     * 
     */
    private String snapshotName;

    private OpenSearchOpensearchUserConfigGcsMigration() {}
    /**
     * @return The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    public String basePath() {
        return this.basePath;
    }
    /**
     * @return The path to the repository data within its container.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    public Optional<String> chunkSize() {
        return Optional.ofNullable(this.chunkSize);
    }
    /**
     * @return When set to true metadata files are stored in compressed format.
     * 
     */
    public Optional<Boolean> compress() {
        return Optional.ofNullable(this.compress);
    }
    /**
     * @return Google Cloud Storage credentials file content.
     * 
     */
    public String credentials() {
        return this.credentials;
    }
    /**
     * @return The snapshot name to restore from.
     * 
     */
    public String snapshotName() {
        return this.snapshotName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenSearchOpensearchUserConfigGcsMigration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String basePath;
        private String bucket;
        private @Nullable String chunkSize;
        private @Nullable Boolean compress;
        private String credentials;
        private String snapshotName;
        public Builder() {}
        public Builder(OpenSearchOpensearchUserConfigGcsMigration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.basePath = defaults.basePath;
    	      this.bucket = defaults.bucket;
    	      this.chunkSize = defaults.chunkSize;
    	      this.compress = defaults.compress;
    	      this.credentials = defaults.credentials;
    	      this.snapshotName = defaults.snapshotName;
        }

        @CustomType.Setter
        public Builder basePath(String basePath) {
            if (basePath == null) {
              throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigGcsMigration", "basePath");
            }
            this.basePath = basePath;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigGcsMigration", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder chunkSize(@Nullable String chunkSize) {

            this.chunkSize = chunkSize;
            return this;
        }
        @CustomType.Setter
        public Builder compress(@Nullable Boolean compress) {

            this.compress = compress;
            return this;
        }
        @CustomType.Setter
        public Builder credentials(String credentials) {
            if (credentials == null) {
              throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigGcsMigration", "credentials");
            }
            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotName(String snapshotName) {
            if (snapshotName == null) {
              throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigGcsMigration", "snapshotName");
            }
            this.snapshotName = snapshotName;
            return this;
        }
        public OpenSearchOpensearchUserConfigGcsMigration build() {
            final var _resultValue = new OpenSearchOpensearchUserConfigGcsMigration();
            _resultValue.basePath = basePath;
            _resultValue.bucket = bucket;
            _resultValue.chunkSize = chunkSize;
            _resultValue.compress = compress;
            _resultValue.credentials = credentials;
            _resultValue.snapshotName = snapshotName;
            return _resultValue;
        }
    }
}
