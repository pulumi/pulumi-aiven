// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetM3AggregatorComponent;
import com.pulumi.aiven.outputs.GetM3AggregatorM3aggregator;
import com.pulumi.aiven.outputs.GetM3AggregatorM3aggregatorUserConfig;
import com.pulumi.aiven.outputs.GetM3AggregatorServiceIntegration;
import com.pulumi.aiven.outputs.GetM3AggregatorTag;
import com.pulumi.aiven.outputs.GetM3AggregatorTechEmail;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetM3AggregatorResult {
    private String additionalDiskSpace;
    private String cloudName;
    private List<GetM3AggregatorComponent> components;
    private String diskSpace;
    private String diskSpaceCap;
    private String diskSpaceDefault;
    private String diskSpaceStep;
    private String diskSpaceUsed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetM3AggregatorM3aggregatorUserConfig> m3aggregatorUserConfigs;
    private List<GetM3AggregatorM3aggregator> m3aggregators;
    private String maintenanceWindowDow;
    private String maintenanceWindowTime;
    private String plan;
    private String project;
    private String projectVpcId;
    private String serviceHost;
    private List<GetM3AggregatorServiceIntegration> serviceIntegrations;
    private String serviceName;
    private String servicePassword;
    private Integer servicePort;
    private String serviceType;
    private String serviceUri;
    private String serviceUsername;
    private String state;
    private List<String> staticIps;
    private List<GetM3AggregatorTag> tags;
    private List<GetM3AggregatorTechEmail> techEmails;
    private Boolean terminationProtection;

    private GetM3AggregatorResult() {}
    public String additionalDiskSpace() {
        return this.additionalDiskSpace;
    }
    public String cloudName() {
        return this.cloudName;
    }
    public List<GetM3AggregatorComponent> components() {
        return this.components;
    }
    public String diskSpace() {
        return this.diskSpace;
    }
    public String diskSpaceCap() {
        return this.diskSpaceCap;
    }
    public String diskSpaceDefault() {
        return this.diskSpaceDefault;
    }
    public String diskSpaceStep() {
        return this.diskSpaceStep;
    }
    public String diskSpaceUsed() {
        return this.diskSpaceUsed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetM3AggregatorM3aggregatorUserConfig> m3aggregatorUserConfigs() {
        return this.m3aggregatorUserConfigs;
    }
    public List<GetM3AggregatorM3aggregator> m3aggregators() {
        return this.m3aggregators;
    }
    public String maintenanceWindowDow() {
        return this.maintenanceWindowDow;
    }
    public String maintenanceWindowTime() {
        return this.maintenanceWindowTime;
    }
    public String plan() {
        return this.plan;
    }
    public String project() {
        return this.project;
    }
    public String projectVpcId() {
        return this.projectVpcId;
    }
    public String serviceHost() {
        return this.serviceHost;
    }
    public List<GetM3AggregatorServiceIntegration> serviceIntegrations() {
        return this.serviceIntegrations;
    }
    public String serviceName() {
        return this.serviceName;
    }
    public String servicePassword() {
        return this.servicePassword;
    }
    public Integer servicePort() {
        return this.servicePort;
    }
    public String serviceType() {
        return this.serviceType;
    }
    public String serviceUri() {
        return this.serviceUri;
    }
    public String serviceUsername() {
        return this.serviceUsername;
    }
    public String state() {
        return this.state;
    }
    public List<String> staticIps() {
        return this.staticIps;
    }
    public List<GetM3AggregatorTag> tags() {
        return this.tags;
    }
    public List<GetM3AggregatorTechEmail> techEmails() {
        return this.techEmails;
    }
    public Boolean terminationProtection() {
        return this.terminationProtection;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetM3AggregatorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String additionalDiskSpace;
        private String cloudName;
        private List<GetM3AggregatorComponent> components;
        private String diskSpace;
        private String diskSpaceCap;
        private String diskSpaceDefault;
        private String diskSpaceStep;
        private String diskSpaceUsed;
        private String id;
        private List<GetM3AggregatorM3aggregatorUserConfig> m3aggregatorUserConfigs;
        private List<GetM3AggregatorM3aggregator> m3aggregators;
        private String maintenanceWindowDow;
        private String maintenanceWindowTime;
        private String plan;
        private String project;
        private String projectVpcId;
        private String serviceHost;
        private List<GetM3AggregatorServiceIntegration> serviceIntegrations;
        private String serviceName;
        private String servicePassword;
        private Integer servicePort;
        private String serviceType;
        private String serviceUri;
        private String serviceUsername;
        private String state;
        private List<String> staticIps;
        private List<GetM3AggregatorTag> tags;
        private List<GetM3AggregatorTechEmail> techEmails;
        private Boolean terminationProtection;
        public Builder() {}
        public Builder(GetM3AggregatorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDiskSpace = defaults.additionalDiskSpace;
    	      this.cloudName = defaults.cloudName;
    	      this.components = defaults.components;
    	      this.diskSpace = defaults.diskSpace;
    	      this.diskSpaceCap = defaults.diskSpaceCap;
    	      this.diskSpaceDefault = defaults.diskSpaceDefault;
    	      this.diskSpaceStep = defaults.diskSpaceStep;
    	      this.diskSpaceUsed = defaults.diskSpaceUsed;
    	      this.id = defaults.id;
    	      this.m3aggregatorUserConfigs = defaults.m3aggregatorUserConfigs;
    	      this.m3aggregators = defaults.m3aggregators;
    	      this.maintenanceWindowDow = defaults.maintenanceWindowDow;
    	      this.maintenanceWindowTime = defaults.maintenanceWindowTime;
    	      this.plan = defaults.plan;
    	      this.project = defaults.project;
    	      this.projectVpcId = defaults.projectVpcId;
    	      this.serviceHost = defaults.serviceHost;
    	      this.serviceIntegrations = defaults.serviceIntegrations;
    	      this.serviceName = defaults.serviceName;
    	      this.servicePassword = defaults.servicePassword;
    	      this.servicePort = defaults.servicePort;
    	      this.serviceType = defaults.serviceType;
    	      this.serviceUri = defaults.serviceUri;
    	      this.serviceUsername = defaults.serviceUsername;
    	      this.state = defaults.state;
    	      this.staticIps = defaults.staticIps;
    	      this.tags = defaults.tags;
    	      this.techEmails = defaults.techEmails;
    	      this.terminationProtection = defaults.terminationProtection;
        }

        @CustomType.Setter
        public Builder additionalDiskSpace(String additionalDiskSpace) {
            if (additionalDiskSpace == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "additionalDiskSpace");
            }
            this.additionalDiskSpace = additionalDiskSpace;
            return this;
        }
        @CustomType.Setter
        public Builder cloudName(String cloudName) {
            if (cloudName == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "cloudName");
            }
            this.cloudName = cloudName;
            return this;
        }
        @CustomType.Setter
        public Builder components(List<GetM3AggregatorComponent> components) {
            if (components == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "components");
            }
            this.components = components;
            return this;
        }
        public Builder components(GetM3AggregatorComponent... components) {
            return components(List.of(components));
        }
        @CustomType.Setter
        public Builder diskSpace(String diskSpace) {
            if (diskSpace == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "diskSpace");
            }
            this.diskSpace = diskSpace;
            return this;
        }
        @CustomType.Setter
        public Builder diskSpaceCap(String diskSpaceCap) {
            if (diskSpaceCap == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "diskSpaceCap");
            }
            this.diskSpaceCap = diskSpaceCap;
            return this;
        }
        @CustomType.Setter
        public Builder diskSpaceDefault(String diskSpaceDefault) {
            if (diskSpaceDefault == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "diskSpaceDefault");
            }
            this.diskSpaceDefault = diskSpaceDefault;
            return this;
        }
        @CustomType.Setter
        public Builder diskSpaceStep(String diskSpaceStep) {
            if (diskSpaceStep == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "diskSpaceStep");
            }
            this.diskSpaceStep = diskSpaceStep;
            return this;
        }
        @CustomType.Setter
        public Builder diskSpaceUsed(String diskSpaceUsed) {
            if (diskSpaceUsed == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "diskSpaceUsed");
            }
            this.diskSpaceUsed = diskSpaceUsed;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder m3aggregatorUserConfigs(List<GetM3AggregatorM3aggregatorUserConfig> m3aggregatorUserConfigs) {
            if (m3aggregatorUserConfigs == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "m3aggregatorUserConfigs");
            }
            this.m3aggregatorUserConfigs = m3aggregatorUserConfigs;
            return this;
        }
        public Builder m3aggregatorUserConfigs(GetM3AggregatorM3aggregatorUserConfig... m3aggregatorUserConfigs) {
            return m3aggregatorUserConfigs(List.of(m3aggregatorUserConfigs));
        }
        @CustomType.Setter
        public Builder m3aggregators(List<GetM3AggregatorM3aggregator> m3aggregators) {
            if (m3aggregators == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "m3aggregators");
            }
            this.m3aggregators = m3aggregators;
            return this;
        }
        public Builder m3aggregators(GetM3AggregatorM3aggregator... m3aggregators) {
            return m3aggregators(List.of(m3aggregators));
        }
        @CustomType.Setter
        public Builder maintenanceWindowDow(String maintenanceWindowDow) {
            if (maintenanceWindowDow == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "maintenanceWindowDow");
            }
            this.maintenanceWindowDow = maintenanceWindowDow;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindowTime(String maintenanceWindowTime) {
            if (maintenanceWindowTime == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "maintenanceWindowTime");
            }
            this.maintenanceWindowTime = maintenanceWindowTime;
            return this;
        }
        @CustomType.Setter
        public Builder plan(String plan) {
            if (plan == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "plan");
            }
            this.plan = plan;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder projectVpcId(String projectVpcId) {
            if (projectVpcId == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "projectVpcId");
            }
            this.projectVpcId = projectVpcId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceHost(String serviceHost) {
            if (serviceHost == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "serviceHost");
            }
            this.serviceHost = serviceHost;
            return this;
        }
        @CustomType.Setter
        public Builder serviceIntegrations(List<GetM3AggregatorServiceIntegration> serviceIntegrations) {
            if (serviceIntegrations == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "serviceIntegrations");
            }
            this.serviceIntegrations = serviceIntegrations;
            return this;
        }
        public Builder serviceIntegrations(GetM3AggregatorServiceIntegration... serviceIntegrations) {
            return serviceIntegrations(List.of(serviceIntegrations));
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder servicePassword(String servicePassword) {
            if (servicePassword == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "servicePassword");
            }
            this.servicePassword = servicePassword;
            return this;
        }
        @CustomType.Setter
        public Builder servicePort(Integer servicePort) {
            if (servicePort == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "servicePort");
            }
            this.servicePort = servicePort;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceUri(String serviceUri) {
            if (serviceUri == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "serviceUri");
            }
            this.serviceUri = serviceUri;
            return this;
        }
        @CustomType.Setter
        public Builder serviceUsername(String serviceUsername) {
            if (serviceUsername == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "serviceUsername");
            }
            this.serviceUsername = serviceUsername;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(List<String> staticIps) {
            if (staticIps == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "staticIps");
            }
            this.staticIps = staticIps;
            return this;
        }
        public Builder staticIps(String... staticIps) {
            return staticIps(List.of(staticIps));
        }
        @CustomType.Setter
        public Builder tags(List<GetM3AggregatorTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetM3AggregatorTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder techEmails(List<GetM3AggregatorTechEmail> techEmails) {
            if (techEmails == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "techEmails");
            }
            this.techEmails = techEmails;
            return this;
        }
        public Builder techEmails(GetM3AggregatorTechEmail... techEmails) {
            return techEmails(List.of(techEmails));
        }
        @CustomType.Setter
        public Builder terminationProtection(Boolean terminationProtection) {
            if (terminationProtection == null) {
              throw new MissingRequiredPropertyException("GetM3AggregatorResult", "terminationProtection");
            }
            this.terminationProtection = terminationProtection;
            return this;
        }
        public GetM3AggregatorResult build() {
            final var _resultValue = new GetM3AggregatorResult();
            _resultValue.additionalDiskSpace = additionalDiskSpace;
            _resultValue.cloudName = cloudName;
            _resultValue.components = components;
            _resultValue.diskSpace = diskSpace;
            _resultValue.diskSpaceCap = diskSpaceCap;
            _resultValue.diskSpaceDefault = diskSpaceDefault;
            _resultValue.diskSpaceStep = diskSpaceStep;
            _resultValue.diskSpaceUsed = diskSpaceUsed;
            _resultValue.id = id;
            _resultValue.m3aggregatorUserConfigs = m3aggregatorUserConfigs;
            _resultValue.m3aggregators = m3aggregators;
            _resultValue.maintenanceWindowDow = maintenanceWindowDow;
            _resultValue.maintenanceWindowTime = maintenanceWindowTime;
            _resultValue.plan = plan;
            _resultValue.project = project;
            _resultValue.projectVpcId = projectVpcId;
            _resultValue.serviceHost = serviceHost;
            _resultValue.serviceIntegrations = serviceIntegrations;
            _resultValue.serviceName = serviceName;
            _resultValue.servicePassword = servicePassword;
            _resultValue.servicePort = servicePort;
            _resultValue.serviceType = serviceType;
            _resultValue.serviceUri = serviceUri;
            _resultValue.serviceUsername = serviceUsername;
            _resultValue.state = state;
            _resultValue.staticIps = staticIps;
            _resultValue.tags = tags;
            _resultValue.techEmails = techEmails;
            _resultValue.terminationProtection = terminationProtection;
            return _resultValue;
        }
    }
}
