// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPgPgUserConfigPgbouncer {
    /**
     * @return If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. (seconds). Default: `3600`.
     * 
     */
    private @Nullable Integer autodbIdleTimeout;
    /**
     * @return Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited. Example: `0`.
     * 
     */
    private @Nullable Integer autodbMaxDbConnections;
    /**
     * @return Enum: `session`, `transaction`, `statement`. PGBouncer pool mode. Default: `transaction`.
     * 
     */
    private @Nullable String autodbPoolMode;
    /**
     * @return If non-zero then create automatically a pool of that size per user when a pool doesn&#39;t exist. Default: `0`.
     * 
     */
    private @Nullable Integer autodbPoolSize;
    /**
     * @return List of parameters to ignore when given in startup packet.
     * 
     */
    private @Nullable List<String> ignoreStartupParameters;
    /**
     * @return Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size. Default: `0`.
     * 
     */
    private @Nullable Integer minPoolSize;
    /**
     * @return If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. (seconds). Default: `600`.
     * 
     */
    private @Nullable Integer serverIdleTimeout;
    /**
     * @return The pooler will close an unused server connection that has been connected longer than this. (seconds). Default: `3600`.
     * 
     */
    private @Nullable Integer serverLifetime;
    /**
     * @return Run server_reset_query (DISCARD ALL) in all pooling modes. Default: `false`.
     * 
     */
    private @Nullable Boolean serverResetQueryAlways;

    private GetPgPgUserConfigPgbouncer() {}
    /**
     * @return If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. (seconds). Default: `3600`.
     * 
     */
    public Optional<Integer> autodbIdleTimeout() {
        return Optional.ofNullable(this.autodbIdleTimeout);
    }
    /**
     * @return Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited. Example: `0`.
     * 
     */
    public Optional<Integer> autodbMaxDbConnections() {
        return Optional.ofNullable(this.autodbMaxDbConnections);
    }
    /**
     * @return Enum: `session`, `transaction`, `statement`. PGBouncer pool mode. Default: `transaction`.
     * 
     */
    public Optional<String> autodbPoolMode() {
        return Optional.ofNullable(this.autodbPoolMode);
    }
    /**
     * @return If non-zero then create automatically a pool of that size per user when a pool doesn&#39;t exist. Default: `0`.
     * 
     */
    public Optional<Integer> autodbPoolSize() {
        return Optional.ofNullable(this.autodbPoolSize);
    }
    /**
     * @return List of parameters to ignore when given in startup packet.
     * 
     */
    public List<String> ignoreStartupParameters() {
        return this.ignoreStartupParameters == null ? List.of() : this.ignoreStartupParameters;
    }
    /**
     * @return Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size. Default: `0`.
     * 
     */
    public Optional<Integer> minPoolSize() {
        return Optional.ofNullable(this.minPoolSize);
    }
    /**
     * @return If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. (seconds). Default: `600`.
     * 
     */
    public Optional<Integer> serverIdleTimeout() {
        return Optional.ofNullable(this.serverIdleTimeout);
    }
    /**
     * @return The pooler will close an unused server connection that has been connected longer than this. (seconds). Default: `3600`.
     * 
     */
    public Optional<Integer> serverLifetime() {
        return Optional.ofNullable(this.serverLifetime);
    }
    /**
     * @return Run server_reset_query (DISCARD ALL) in all pooling modes. Default: `false`.
     * 
     */
    public Optional<Boolean> serverResetQueryAlways() {
        return Optional.ofNullable(this.serverResetQueryAlways);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPgPgUserConfigPgbouncer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer autodbIdleTimeout;
        private @Nullable Integer autodbMaxDbConnections;
        private @Nullable String autodbPoolMode;
        private @Nullable Integer autodbPoolSize;
        private @Nullable List<String> ignoreStartupParameters;
        private @Nullable Integer minPoolSize;
        private @Nullable Integer serverIdleTimeout;
        private @Nullable Integer serverLifetime;
        private @Nullable Boolean serverResetQueryAlways;
        public Builder() {}
        public Builder(GetPgPgUserConfigPgbouncer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autodbIdleTimeout = defaults.autodbIdleTimeout;
    	      this.autodbMaxDbConnections = defaults.autodbMaxDbConnections;
    	      this.autodbPoolMode = defaults.autodbPoolMode;
    	      this.autodbPoolSize = defaults.autodbPoolSize;
    	      this.ignoreStartupParameters = defaults.ignoreStartupParameters;
    	      this.minPoolSize = defaults.minPoolSize;
    	      this.serverIdleTimeout = defaults.serverIdleTimeout;
    	      this.serverLifetime = defaults.serverLifetime;
    	      this.serverResetQueryAlways = defaults.serverResetQueryAlways;
        }

        @CustomType.Setter
        public Builder autodbIdleTimeout(@Nullable Integer autodbIdleTimeout) {

            this.autodbIdleTimeout = autodbIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder autodbMaxDbConnections(@Nullable Integer autodbMaxDbConnections) {

            this.autodbMaxDbConnections = autodbMaxDbConnections;
            return this;
        }
        @CustomType.Setter
        public Builder autodbPoolMode(@Nullable String autodbPoolMode) {

            this.autodbPoolMode = autodbPoolMode;
            return this;
        }
        @CustomType.Setter
        public Builder autodbPoolSize(@Nullable Integer autodbPoolSize) {

            this.autodbPoolSize = autodbPoolSize;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreStartupParameters(@Nullable List<String> ignoreStartupParameters) {

            this.ignoreStartupParameters = ignoreStartupParameters;
            return this;
        }
        public Builder ignoreStartupParameters(String... ignoreStartupParameters) {
            return ignoreStartupParameters(List.of(ignoreStartupParameters));
        }
        @CustomType.Setter
        public Builder minPoolSize(@Nullable Integer minPoolSize) {

            this.minPoolSize = minPoolSize;
            return this;
        }
        @CustomType.Setter
        public Builder serverIdleTimeout(@Nullable Integer serverIdleTimeout) {

            this.serverIdleTimeout = serverIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder serverLifetime(@Nullable Integer serverLifetime) {

            this.serverLifetime = serverLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder serverResetQueryAlways(@Nullable Boolean serverResetQueryAlways) {

            this.serverResetQueryAlways = serverResetQueryAlways;
            return this;
        }
        public GetPgPgUserConfigPgbouncer build() {
            final var _resultValue = new GetPgPgUserConfigPgbouncer();
            _resultValue.autodbIdleTimeout = autodbIdleTimeout;
            _resultValue.autodbMaxDbConnections = autodbMaxDbConnections;
            _resultValue.autodbPoolMode = autodbPoolMode;
            _resultValue.autodbPoolSize = autodbPoolSize;
            _resultValue.ignoreStartupParameters = ignoreStartupParameters;
            _resultValue.minPoolSize = minPoolSize;
            _resultValue.serverIdleTimeout = serverIdleTimeout;
            _resultValue.serverLifetime = serverLifetime;
            _resultValue.serverResetQueryAlways = serverResetQueryAlways;
            return _resultValue;
        }
    }
}
