// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs Empty = new KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs();

    /**
     * Access key used to authenticate with aws.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return Access key used to authenticate with aws.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * Enum: `credentials`. Auth method of the vault secret provider.
     * 
     */
    @Import(name="authMethod", required=true)
    private Output<String> authMethod;

    /**
     * @return Enum: `credentials`. Auth method of the vault secret provider.
     * 
     */
    public Output<String> authMethod() {
        return this.authMethod;
    }

    /**
     * Region used to lookup secrets with AWS SecretManager.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region used to lookup secrets with AWS SecretManager.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * Secret key used to authenticate with aws.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return Secret key used to authenticate with aws.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    private KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs() {}

    private KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs(KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs $) {
        this.accessKey = $.accessKey;
        this.authMethod = $.authMethod;
        this.region = $.region;
        this.secretKey = $.secretKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs $;

        public Builder() {
            $ = new KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs();
        }

        public Builder(KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs defaults) {
            $ = new KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey Access key used to authenticate with aws.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey Access key used to authenticate with aws.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param authMethod Enum: `credentials`. Auth method of the vault secret provider.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(Output<String> authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        /**
         * @param authMethod Enum: `credentials`. Auth method of the vault secret provider.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(String authMethod) {
            return authMethod(Output.of(authMethod));
        }

        /**
         * @param region Region used to lookup secrets with AWS SecretManager.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region used to lookup secrets with AWS SecretManager.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretKey Secret key used to authenticate with aws.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey Secret key used to authenticate with aws.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        public KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs build() {
            if ($.authMethod == null) {
                throw new MissingRequiredPropertyException("KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs", "authMethod");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("KafkaConnectKafkaConnectUserConfigSecretProviderAwsArgs", "region");
            }
            return $;
        }
    }

}
