// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetPgComponent;
import com.pulumi.aiven.outputs.GetPgPg;
import com.pulumi.aiven.outputs.GetPgPgUserConfig;
import com.pulumi.aiven.outputs.GetPgServiceIntegration;
import com.pulumi.aiven.outputs.GetPgTag;
import com.pulumi.aiven.outputs.GetPgTechEmail;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPgResult {
    /**
     * @return Add [disk storage](https://aiven.io/docs/platform/howto/add-storage-space) in increments of 30  GiB to scale your service. The maximum value depends on the service type and cloud provider. Removing additional storage causes the service nodes to go through a rolling restart and there might be a short downtime for services with no HA capabilities.
     * 
     */
    private String additionalDiskSpace;
    /**
     * @return The cloud provider and region the service is hosted in. The format is `provider-region`, for example: `google-europe-west1`. The [available cloud regions](https://aiven.io/docs/platform/reference/list_of_clouds) can differ per project and service. Changing this value [migrates the service to another cloud provider or region](https://aiven.io/docs/platform/howto/migrate-services-cloud-region). The migration runs in the background and includes a DNS update to redirect traffic to the new region. Most services experience no downtime, but some databases may have a brief interruption during DNS propagation.
     * 
     */
    private String cloudName;
    /**
     * @return Service component information objects
     * 
     */
    private List<GetPgComponent> components;
    /**
     * @return Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
     * 
     */
    private String diskSpace;
    /**
     * @return The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
     * 
     */
    private String diskSpaceCap;
    /**
     * @return The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `disk_space`
     * 
     */
    private String diskSpaceDefault;
    /**
     * @return The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
     * 
     */
    private String diskSpaceStep;
    /**
     * @return Disk space that service is currently using
     * 
     */
    private String diskSpaceUsed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     * 
     */
    private String maintenanceWindowDow;
    /**
     * @return Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     * 
     */
    private String maintenanceWindowTime;
    /**
     * @return Pg user configurable settings. **Warning:** There&#39;s no way to reset advanced configuration options to default. Options that you add cannot be removed later
     * 
     */
    private List<GetPgPgUserConfig> pgUserConfigs;
    /**
     * @return Values provided by the PostgreSQL server.
     * 
     */
    private List<GetPgPg> pgs;
    /**
     * @return Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seen from the [Aiven pricing page](https://aiven.io/pricing).
     * 
     */
    private String plan;
    /**
     * @return The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    private String project;
    /**
     * @return Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
     * 
     */
    private String projectVpcId;
    /**
     * @return The hostname of the service.
     * 
     */
    private String serviceHost;
    /**
     * @return Service integrations to specify when creating a service. Not applied after initial service creation
     * 
     */
    private List<GetPgServiceIntegration> serviceIntegrations;
    /**
     * @return Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
     * 
     */
    private String serviceName;
    /**
     * @return Password used for connecting to the service, if applicable
     * 
     */
    private String servicePassword;
    /**
     * @return The port of the service
     * 
     */
    private Integer servicePort;
    /**
     * @return Aiven internal service type code
     * 
     */
    private String serviceType;
    /**
     * @return URI for connecting to the service. Service specific info is under &#34;kafka&#34;, &#34;pg&#34;, etc.
     * 
     */
    private String serviceUri;
    /**
     * @return Username used for connecting to the service, if applicable
     * 
     */
    private String serviceUsername;
    /**
     * @return Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
     * 
     */
    private String state;
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    private List<String> staticIps;
    /**
     * @return Tags are key-value pairs that allow you to categorize services.
     * 
     */
    private List<GetPgTag> tags;
    /**
     * @return The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
     * 
     */
    private List<GetPgTechEmail> techEmails;
    /**
     * @return Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
     * 
     */
    private Boolean terminationProtection;

    private GetPgResult() {}
    /**
     * @return Add [disk storage](https://aiven.io/docs/platform/howto/add-storage-space) in increments of 30  GiB to scale your service. The maximum value depends on the service type and cloud provider. Removing additional storage causes the service nodes to go through a rolling restart and there might be a short downtime for services with no HA capabilities.
     * 
     */
    public String additionalDiskSpace() {
        return this.additionalDiskSpace;
    }
    /**
     * @return The cloud provider and region the service is hosted in. The format is `provider-region`, for example: `google-europe-west1`. The [available cloud regions](https://aiven.io/docs/platform/reference/list_of_clouds) can differ per project and service. Changing this value [migrates the service to another cloud provider or region](https://aiven.io/docs/platform/howto/migrate-services-cloud-region). The migration runs in the background and includes a DNS update to redirect traffic to the new region. Most services experience no downtime, but some databases may have a brief interruption during DNS propagation.
     * 
     */
    public String cloudName() {
        return this.cloudName;
    }
    /**
     * @return Service component information objects
     * 
     */
    public List<GetPgComponent> components() {
        return this.components;
    }
    /**
     * @return Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
     * 
     */
    public String diskSpace() {
        return this.diskSpace;
    }
    /**
     * @return The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
     * 
     */
    public String diskSpaceCap() {
        return this.diskSpaceCap;
    }
    /**
     * @return The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `disk_space`
     * 
     */
    public String diskSpaceDefault() {
        return this.diskSpaceDefault;
    }
    /**
     * @return The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
     * 
     */
    public String diskSpaceStep() {
        return this.diskSpaceStep;
    }
    /**
     * @return Disk space that service is currently using
     * 
     */
    public String diskSpaceUsed() {
        return this.diskSpaceUsed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     * 
     */
    public String maintenanceWindowDow() {
        return this.maintenanceWindowDow;
    }
    /**
     * @return Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     * 
     */
    public String maintenanceWindowTime() {
        return this.maintenanceWindowTime;
    }
    /**
     * @return Pg user configurable settings. **Warning:** There&#39;s no way to reset advanced configuration options to default. Options that you add cannot be removed later
     * 
     */
    public List<GetPgPgUserConfig> pgUserConfigs() {
        return this.pgUserConfigs;
    }
    /**
     * @return Values provided by the PostgreSQL server.
     * 
     */
    public List<GetPgPg> pgs() {
        return this.pgs;
    }
    /**
     * @return Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seen from the [Aiven pricing page](https://aiven.io/pricing).
     * 
     */
    public String plan() {
        return this.plan;
    }
    /**
     * @return The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
     * 
     */
    public String projectVpcId() {
        return this.projectVpcId;
    }
    /**
     * @return The hostname of the service.
     * 
     */
    public String serviceHost() {
        return this.serviceHost;
    }
    /**
     * @return Service integrations to specify when creating a service. Not applied after initial service creation
     * 
     */
    public List<GetPgServiceIntegration> serviceIntegrations() {
        return this.serviceIntegrations;
    }
    /**
     * @return Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Password used for connecting to the service, if applicable
     * 
     */
    public String servicePassword() {
        return this.servicePassword;
    }
    /**
     * @return The port of the service
     * 
     */
    public Integer servicePort() {
        return this.servicePort;
    }
    /**
     * @return Aiven internal service type code
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return URI for connecting to the service. Service specific info is under &#34;kafka&#34;, &#34;pg&#34;, etc.
     * 
     */
    public String serviceUri() {
        return this.serviceUri;
    }
    /**
     * @return Username used for connecting to the service, if applicable
     * 
     */
    public String serviceUsername() {
        return this.serviceUsername;
    }
    /**
     * @return Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    public List<String> staticIps() {
        return this.staticIps;
    }
    /**
     * @return Tags are key-value pairs that allow you to categorize services.
     * 
     */
    public List<GetPgTag> tags() {
        return this.tags;
    }
    /**
     * @return The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
     * 
     */
    public List<GetPgTechEmail> techEmails() {
        return this.techEmails;
    }
    /**
     * @return Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
     * 
     */
    public Boolean terminationProtection() {
        return this.terminationProtection;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPgResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String additionalDiskSpace;
        private String cloudName;
        private List<GetPgComponent> components;
        private String diskSpace;
        private String diskSpaceCap;
        private String diskSpaceDefault;
        private String diskSpaceStep;
        private String diskSpaceUsed;
        private String id;
        private String maintenanceWindowDow;
        private String maintenanceWindowTime;
        private List<GetPgPgUserConfig> pgUserConfigs;
        private List<GetPgPg> pgs;
        private String plan;
        private String project;
        private String projectVpcId;
        private String serviceHost;
        private List<GetPgServiceIntegration> serviceIntegrations;
        private String serviceName;
        private String servicePassword;
        private Integer servicePort;
        private String serviceType;
        private String serviceUri;
        private String serviceUsername;
        private String state;
        private List<String> staticIps;
        private List<GetPgTag> tags;
        private List<GetPgTechEmail> techEmails;
        private Boolean terminationProtection;
        public Builder() {}
        public Builder(GetPgResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDiskSpace = defaults.additionalDiskSpace;
    	      this.cloudName = defaults.cloudName;
    	      this.components = defaults.components;
    	      this.diskSpace = defaults.diskSpace;
    	      this.diskSpaceCap = defaults.diskSpaceCap;
    	      this.diskSpaceDefault = defaults.diskSpaceDefault;
    	      this.diskSpaceStep = defaults.diskSpaceStep;
    	      this.diskSpaceUsed = defaults.diskSpaceUsed;
    	      this.id = defaults.id;
    	      this.maintenanceWindowDow = defaults.maintenanceWindowDow;
    	      this.maintenanceWindowTime = defaults.maintenanceWindowTime;
    	      this.pgUserConfigs = defaults.pgUserConfigs;
    	      this.pgs = defaults.pgs;
    	      this.plan = defaults.plan;
    	      this.project = defaults.project;
    	      this.projectVpcId = defaults.projectVpcId;
    	      this.serviceHost = defaults.serviceHost;
    	      this.serviceIntegrations = defaults.serviceIntegrations;
    	      this.serviceName = defaults.serviceName;
    	      this.servicePassword = defaults.servicePassword;
    	      this.servicePort = defaults.servicePort;
    	      this.serviceType = defaults.serviceType;
    	      this.serviceUri = defaults.serviceUri;
    	      this.serviceUsername = defaults.serviceUsername;
    	      this.state = defaults.state;
    	      this.staticIps = defaults.staticIps;
    	      this.tags = defaults.tags;
    	      this.techEmails = defaults.techEmails;
    	      this.terminationProtection = defaults.terminationProtection;
        }

        @CustomType.Setter
        public Builder additionalDiskSpace(String additionalDiskSpace) {
            if (additionalDiskSpace == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "additionalDiskSpace");
            }
            this.additionalDiskSpace = additionalDiskSpace;
            return this;
        }
        @CustomType.Setter
        public Builder cloudName(String cloudName) {
            if (cloudName == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "cloudName");
            }
            this.cloudName = cloudName;
            return this;
        }
        @CustomType.Setter
        public Builder components(List<GetPgComponent> components) {
            if (components == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "components");
            }
            this.components = components;
            return this;
        }
        public Builder components(GetPgComponent... components) {
            return components(List.of(components));
        }
        @CustomType.Setter
        public Builder diskSpace(String diskSpace) {
            if (diskSpace == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "diskSpace");
            }
            this.diskSpace = diskSpace;
            return this;
        }
        @CustomType.Setter
        public Builder diskSpaceCap(String diskSpaceCap) {
            if (diskSpaceCap == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "diskSpaceCap");
            }
            this.diskSpaceCap = diskSpaceCap;
            return this;
        }
        @CustomType.Setter
        public Builder diskSpaceDefault(String diskSpaceDefault) {
            if (diskSpaceDefault == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "diskSpaceDefault");
            }
            this.diskSpaceDefault = diskSpaceDefault;
            return this;
        }
        @CustomType.Setter
        public Builder diskSpaceStep(String diskSpaceStep) {
            if (diskSpaceStep == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "diskSpaceStep");
            }
            this.diskSpaceStep = diskSpaceStep;
            return this;
        }
        @CustomType.Setter
        public Builder diskSpaceUsed(String diskSpaceUsed) {
            if (diskSpaceUsed == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "diskSpaceUsed");
            }
            this.diskSpaceUsed = diskSpaceUsed;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindowDow(String maintenanceWindowDow) {
            if (maintenanceWindowDow == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "maintenanceWindowDow");
            }
            this.maintenanceWindowDow = maintenanceWindowDow;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindowTime(String maintenanceWindowTime) {
            if (maintenanceWindowTime == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "maintenanceWindowTime");
            }
            this.maintenanceWindowTime = maintenanceWindowTime;
            return this;
        }
        @CustomType.Setter
        public Builder pgUserConfigs(List<GetPgPgUserConfig> pgUserConfigs) {
            if (pgUserConfigs == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "pgUserConfigs");
            }
            this.pgUserConfigs = pgUserConfigs;
            return this;
        }
        public Builder pgUserConfigs(GetPgPgUserConfig... pgUserConfigs) {
            return pgUserConfigs(List.of(pgUserConfigs));
        }
        @CustomType.Setter
        public Builder pgs(List<GetPgPg> pgs) {
            if (pgs == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "pgs");
            }
            this.pgs = pgs;
            return this;
        }
        public Builder pgs(GetPgPg... pgs) {
            return pgs(List.of(pgs));
        }
        @CustomType.Setter
        public Builder plan(String plan) {
            if (plan == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "plan");
            }
            this.plan = plan;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder projectVpcId(String projectVpcId) {
            if (projectVpcId == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "projectVpcId");
            }
            this.projectVpcId = projectVpcId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceHost(String serviceHost) {
            if (serviceHost == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "serviceHost");
            }
            this.serviceHost = serviceHost;
            return this;
        }
        @CustomType.Setter
        public Builder serviceIntegrations(List<GetPgServiceIntegration> serviceIntegrations) {
            if (serviceIntegrations == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "serviceIntegrations");
            }
            this.serviceIntegrations = serviceIntegrations;
            return this;
        }
        public Builder serviceIntegrations(GetPgServiceIntegration... serviceIntegrations) {
            return serviceIntegrations(List.of(serviceIntegrations));
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder servicePassword(String servicePassword) {
            if (servicePassword == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "servicePassword");
            }
            this.servicePassword = servicePassword;
            return this;
        }
        @CustomType.Setter
        public Builder servicePort(Integer servicePort) {
            if (servicePort == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "servicePort");
            }
            this.servicePort = servicePort;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceUri(String serviceUri) {
            if (serviceUri == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "serviceUri");
            }
            this.serviceUri = serviceUri;
            return this;
        }
        @CustomType.Setter
        public Builder serviceUsername(String serviceUsername) {
            if (serviceUsername == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "serviceUsername");
            }
            this.serviceUsername = serviceUsername;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(List<String> staticIps) {
            if (staticIps == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "staticIps");
            }
            this.staticIps = staticIps;
            return this;
        }
        public Builder staticIps(String... staticIps) {
            return staticIps(List.of(staticIps));
        }
        @CustomType.Setter
        public Builder tags(List<GetPgTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetPgTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder techEmails(List<GetPgTechEmail> techEmails) {
            if (techEmails == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "techEmails");
            }
            this.techEmails = techEmails;
            return this;
        }
        public Builder techEmails(GetPgTechEmail... techEmails) {
            return techEmails(List.of(techEmails));
        }
        @CustomType.Setter
        public Builder terminationProtection(Boolean terminationProtection) {
            if (terminationProtection == null) {
              throw new MissingRequiredPropertyException("GetPgResult", "terminationProtection");
            }
            this.terminationProtection = terminationProtection;
            return this;
        }
        public GetPgResult build() {
            final var _resultValue = new GetPgResult();
            _resultValue.additionalDiskSpace = additionalDiskSpace;
            _resultValue.cloudName = cloudName;
            _resultValue.components = components;
            _resultValue.diskSpace = diskSpace;
            _resultValue.diskSpaceCap = diskSpaceCap;
            _resultValue.diskSpaceDefault = diskSpaceDefault;
            _resultValue.diskSpaceStep = diskSpaceStep;
            _resultValue.diskSpaceUsed = diskSpaceUsed;
            _resultValue.id = id;
            _resultValue.maintenanceWindowDow = maintenanceWindowDow;
            _resultValue.maintenanceWindowTime = maintenanceWindowTime;
            _resultValue.pgUserConfigs = pgUserConfigs;
            _resultValue.pgs = pgs;
            _resultValue.plan = plan;
            _resultValue.project = project;
            _resultValue.projectVpcId = projectVpcId;
            _resultValue.serviceHost = serviceHost;
            _resultValue.serviceIntegrations = serviceIntegrations;
            _resultValue.serviceName = serviceName;
            _resultValue.servicePassword = servicePassword;
            _resultValue.servicePort = servicePort;
            _resultValue.serviceType = serviceType;
            _resultValue.serviceUri = serviceUri;
            _resultValue.serviceUsername = serviceUsername;
            _resultValue.state = state;
            _resultValue.staticIps = staticIps;
            _resultValue.tags = tags;
            _resultValue.techEmails = techEmails;
            _resultValue.terminationProtection = terminationProtection;
            return _resultValue;
        }
    }
}
