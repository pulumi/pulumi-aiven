// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGrafanaGrafanaUserConfigExternalImageStorage {
    /**
     * @return S3 access key. Requires permissions to the S3 bucket for the s3:PutObject and s3:PutObjectAcl actions. Example: `AAAAAAAAAAAAAAAAAAA`.
     * 
     */
    private String accessKey;
    /**
     * @return Bucket URL for S3. Example: `https://grafana.s3-ap-southeast-2.amazonaws.com/`.
     * 
     */
    private String bucketUrl;
    /**
     * @return Enum: `s3`. External image store provider.
     * 
     */
    private String provider;
    /**
     * @return S3 secret key. Example: `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA`.
     * 
     */
    private String secretKey;

    private GetGrafanaGrafanaUserConfigExternalImageStorage() {}
    /**
     * @return S3 access key. Requires permissions to the S3 bucket for the s3:PutObject and s3:PutObjectAcl actions. Example: `AAAAAAAAAAAAAAAAAAA`.
     * 
     */
    public String accessKey() {
        return this.accessKey;
    }
    /**
     * @return Bucket URL for S3. Example: `https://grafana.s3-ap-southeast-2.amazonaws.com/`.
     * 
     */
    public String bucketUrl() {
        return this.bucketUrl;
    }
    /**
     * @return Enum: `s3`. External image store provider.
     * 
     */
    public String provider() {
        return this.provider;
    }
    /**
     * @return S3 secret key. Example: `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA`.
     * 
     */
    public String secretKey() {
        return this.secretKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGrafanaGrafanaUserConfigExternalImageStorage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessKey;
        private String bucketUrl;
        private String provider;
        private String secretKey;
        public Builder() {}
        public Builder(GetGrafanaGrafanaUserConfigExternalImageStorage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.bucketUrl = defaults.bucketUrl;
    	      this.provider = defaults.provider;
    	      this.secretKey = defaults.secretKey;
        }

        @CustomType.Setter
        public Builder accessKey(String accessKey) {
            if (accessKey == null) {
              throw new MissingRequiredPropertyException("GetGrafanaGrafanaUserConfigExternalImageStorage", "accessKey");
            }
            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder bucketUrl(String bucketUrl) {
            if (bucketUrl == null) {
              throw new MissingRequiredPropertyException("GetGrafanaGrafanaUserConfigExternalImageStorage", "bucketUrl");
            }
            this.bucketUrl = bucketUrl;
            return this;
        }
        @CustomType.Setter
        public Builder provider(String provider) {
            if (provider == null) {
              throw new MissingRequiredPropertyException("GetGrafanaGrafanaUserConfigExternalImageStorage", "provider");
            }
            this.provider = provider;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(String secretKey) {
            if (secretKey == null) {
              throw new MissingRequiredPropertyException("GetGrafanaGrafanaUserConfigExternalImageStorage", "secretKey");
            }
            this.secretKey = secretKey;
            return this;
        }
        public GetGrafanaGrafanaUserConfigExternalImageStorage build() {
            final var _resultValue = new GetGrafanaGrafanaUserConfigExternalImageStorage();
            _resultValue.accessKey = accessKey;
            _resultValue.bucketUrl = bucketUrl;
            _resultValue.provider = provider;
            _resultValue.secretKey = secretKey;
            return _resultValue;
        }
    }
}
