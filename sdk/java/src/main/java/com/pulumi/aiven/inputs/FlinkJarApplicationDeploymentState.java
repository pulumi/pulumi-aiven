// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkJarApplicationDeploymentState extends com.pulumi.resources.ResourceArgs {

    public static final FlinkJarApplicationDeploymentState Empty = new FlinkJarApplicationDeploymentState();

    /**
     * Application Id. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return Application Id. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * The creation timestamp of this entity in ISO 8601 format, always in UTC.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The creation timestamp of this entity in ISO 8601 format, always in UTC.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The creator of this entity.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The creator of this entity.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Deployment ID.
     * 
     */
    @Import(name="deploymentId")
    private @Nullable Output<String> deploymentId;

    /**
     * @return Deployment ID.
     * 
     */
    public Optional<Output<String>> deploymentId() {
        return Optional.ofNullable(this.deploymentId);
    }

    /**
     * The fully qualified name of the entry class to pass during Flink job submission through the entryClass parameter. Maximum length: `128`.
     * 
     */
    @Import(name="entryClass")
    private @Nullable Output<String> entryClass;

    /**
     * @return The fully qualified name of the entry class to pass during Flink job submission through the entryClass parameter. Maximum length: `128`.
     * 
     */
    public Optional<Output<String>> entryClass() {
        return Optional.ofNullable(this.entryClass);
    }

    /**
     * Error message describing what caused deployment to fail.
     * 
     */
    @Import(name="errorMsg")
    private @Nullable Output<String> errorMsg;

    /**
     * @return Error message describing what caused deployment to fail.
     * 
     */
    public Optional<Output<String>> errorMsg() {
        return Optional.ofNullable(this.errorMsg);
    }

    /**
     * Job ID.
     * 
     */
    @Import(name="jobId")
    private @Nullable Output<String> jobId;

    /**
     * @return Job ID.
     * 
     */
    public Optional<Output<String>> jobId() {
        return Optional.ofNullable(this.jobId);
    }

    /**
     * Job savepoint.
     * 
     */
    @Import(name="lastSavepoint")
    private @Nullable Output<String> lastSavepoint;

    /**
     * @return Job savepoint.
     * 
     */
    public Optional<Output<String>> lastSavepoint() {
        return Optional.ofNullable(this.lastSavepoint);
    }

    /**
     * Reading of Flink parallel execution documentation is recommended before setting this value to other than 1. Please do not set this value higher than (total number of nodes x number*of*task_slots), or every new job created will fail.
     * 
     */
    @Import(name="parallelism")
    private @Nullable Output<Integer> parallelism;

    /**
     * @return Reading of Flink parallel execution documentation is recommended before setting this value to other than 1. Please do not set this value higher than (total number of nodes x number*of*task_slots), or every new job created will fail.
     * 
     */
    public Optional<Output<Integer>> parallelism() {
        return Optional.ofNullable(this.parallelism);
    }

    /**
     * Arguments to pass during Flink job submission through the programArgsList parameter.
     * 
     */
    @Import(name="programArgs")
    private @Nullable Output<List<String>> programArgs;

    /**
     * @return Arguments to pass during Flink job submission through the programArgsList parameter.
     * 
     */
    public Optional<Output<List<String>>> programArgs() {
        return Optional.ofNullable(this.programArgs);
    }

    /**
     * Project name. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return Project name. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Specifies whether a Flink Job is restarted in case it fails. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="restartEnabled")
    private @Nullable Output<Boolean> restartEnabled;

    /**
     * @return Specifies whether a Flink Job is restarted in case it fails. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<Boolean>> restartEnabled() {
        return Optional.ofNullable(this.restartEnabled);
    }

    /**
     * Service name. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return Service name. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Job savepoint. Maximum length: `2048`.
     * 
     */
    @Import(name="startingSavepoint")
    private @Nullable Output<String> startingSavepoint;

    /**
     * @return Job savepoint. Maximum length: `2048`.
     * 
     */
    public Optional<Output<String>> startingSavepoint() {
        return Optional.ofNullable(this.startingSavepoint);
    }

    /**
     * Deployment status. The possible values are `CANCELED`, `CANCELLING`, `CANCELLING_REQUESTED`, `CREATED`, `DELETE_REQUESTED`, `DELETING`, `FAILED`, `FAILING`, `FINISHED`, `INITIALIZING`, `RECONCILING`, `RESTARTING`, `RUNNING`, `SAVING`, `SAVING_AND_STOP`, `SAVING_AND_STOP_REQUESTED` and `SUSPENDED`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Deployment status. The possible values are `CANCELED`, `CANCELLING`, `CANCELLING_REQUESTED`, `CREATED`, `DELETE_REQUESTED`, `DELETING`, `FAILED`, `FAILING`, `FINISHED`, `INITIALIZING`, `RECONCILING`, `RESTARTING`, `RUNNING`, `SAVING`, `SAVING_AND_STOP`, `SAVING_AND_STOP_REQUESTED` and `SUSPENDED`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * ApplicationVersion ID. Maximum length: `36`. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="versionId")
    private @Nullable Output<String> versionId;

    /**
     * @return ApplicationVersion ID. Maximum length: `36`. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> versionId() {
        return Optional.ofNullable(this.versionId);
    }

    private FlinkJarApplicationDeploymentState() {}

    private FlinkJarApplicationDeploymentState(FlinkJarApplicationDeploymentState $) {
        this.applicationId = $.applicationId;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.deploymentId = $.deploymentId;
        this.entryClass = $.entryClass;
        this.errorMsg = $.errorMsg;
        this.jobId = $.jobId;
        this.lastSavepoint = $.lastSavepoint;
        this.parallelism = $.parallelism;
        this.programArgs = $.programArgs;
        this.project = $.project;
        this.restartEnabled = $.restartEnabled;
        this.serviceName = $.serviceName;
        this.startingSavepoint = $.startingSavepoint;
        this.status = $.status;
        this.versionId = $.versionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkJarApplicationDeploymentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkJarApplicationDeploymentState $;

        public Builder() {
            $ = new FlinkJarApplicationDeploymentState();
        }

        public Builder(FlinkJarApplicationDeploymentState defaults) {
            $ = new FlinkJarApplicationDeploymentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Application Id. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Application Id. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param createdAt The creation timestamp of this entity in ISO 8601 format, always in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The creation timestamp of this entity in ISO 8601 format, always in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy The creator of this entity.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The creator of this entity.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param deploymentId Deployment ID.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(@Nullable Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId Deployment ID.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        /**
         * @param entryClass The fully qualified name of the entry class to pass during Flink job submission through the entryClass parameter. Maximum length: `128`.
         * 
         * @return builder
         * 
         */
        public Builder entryClass(@Nullable Output<String> entryClass) {
            $.entryClass = entryClass;
            return this;
        }

        /**
         * @param entryClass The fully qualified name of the entry class to pass during Flink job submission through the entryClass parameter. Maximum length: `128`.
         * 
         * @return builder
         * 
         */
        public Builder entryClass(String entryClass) {
            return entryClass(Output.of(entryClass));
        }

        /**
         * @param errorMsg Error message describing what caused deployment to fail.
         * 
         * @return builder
         * 
         */
        public Builder errorMsg(@Nullable Output<String> errorMsg) {
            $.errorMsg = errorMsg;
            return this;
        }

        /**
         * @param errorMsg Error message describing what caused deployment to fail.
         * 
         * @return builder
         * 
         */
        public Builder errorMsg(String errorMsg) {
            return errorMsg(Output.of(errorMsg));
        }

        /**
         * @param jobId Job ID.
         * 
         * @return builder
         * 
         */
        public Builder jobId(@Nullable Output<String> jobId) {
            $.jobId = jobId;
            return this;
        }

        /**
         * @param jobId Job ID.
         * 
         * @return builder
         * 
         */
        public Builder jobId(String jobId) {
            return jobId(Output.of(jobId));
        }

        /**
         * @param lastSavepoint Job savepoint.
         * 
         * @return builder
         * 
         */
        public Builder lastSavepoint(@Nullable Output<String> lastSavepoint) {
            $.lastSavepoint = lastSavepoint;
            return this;
        }

        /**
         * @param lastSavepoint Job savepoint.
         * 
         * @return builder
         * 
         */
        public Builder lastSavepoint(String lastSavepoint) {
            return lastSavepoint(Output.of(lastSavepoint));
        }

        /**
         * @param parallelism Reading of Flink parallel execution documentation is recommended before setting this value to other than 1. Please do not set this value higher than (total number of nodes x number*of*task_slots), or every new job created will fail.
         * 
         * @return builder
         * 
         */
        public Builder parallelism(@Nullable Output<Integer> parallelism) {
            $.parallelism = parallelism;
            return this;
        }

        /**
         * @param parallelism Reading of Flink parallel execution documentation is recommended before setting this value to other than 1. Please do not set this value higher than (total number of nodes x number*of*task_slots), or every new job created will fail.
         * 
         * @return builder
         * 
         */
        public Builder parallelism(Integer parallelism) {
            return parallelism(Output.of(parallelism));
        }

        /**
         * @param programArgs Arguments to pass during Flink job submission through the programArgsList parameter.
         * 
         * @return builder
         * 
         */
        public Builder programArgs(@Nullable Output<List<String>> programArgs) {
            $.programArgs = programArgs;
            return this;
        }

        /**
         * @param programArgs Arguments to pass during Flink job submission through the programArgsList parameter.
         * 
         * @return builder
         * 
         */
        public Builder programArgs(List<String> programArgs) {
            return programArgs(Output.of(programArgs));
        }

        /**
         * @param programArgs Arguments to pass during Flink job submission through the programArgsList parameter.
         * 
         * @return builder
         * 
         */
        public Builder programArgs(String... programArgs) {
            return programArgs(List.of(programArgs));
        }

        /**
         * @param project Project name. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project name. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param restartEnabled Specifies whether a Flink Job is restarted in case it fails. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder restartEnabled(@Nullable Output<Boolean> restartEnabled) {
            $.restartEnabled = restartEnabled;
            return this;
        }

        /**
         * @param restartEnabled Specifies whether a Flink Job is restarted in case it fails. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder restartEnabled(Boolean restartEnabled) {
            return restartEnabled(Output.of(restartEnabled));
        }

        /**
         * @param serviceName Service name. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Service name. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param startingSavepoint Job savepoint. Maximum length: `2048`.
         * 
         * @return builder
         * 
         */
        public Builder startingSavepoint(@Nullable Output<String> startingSavepoint) {
            $.startingSavepoint = startingSavepoint;
            return this;
        }

        /**
         * @param startingSavepoint Job savepoint. Maximum length: `2048`.
         * 
         * @return builder
         * 
         */
        public Builder startingSavepoint(String startingSavepoint) {
            return startingSavepoint(Output.of(startingSavepoint));
        }

        /**
         * @param status Deployment status. The possible values are `CANCELED`, `CANCELLING`, `CANCELLING_REQUESTED`, `CREATED`, `DELETE_REQUESTED`, `DELETING`, `FAILED`, `FAILING`, `FINISHED`, `INITIALIZING`, `RECONCILING`, `RESTARTING`, `RUNNING`, `SAVING`, `SAVING_AND_STOP`, `SAVING_AND_STOP_REQUESTED` and `SUSPENDED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Deployment status. The possible values are `CANCELED`, `CANCELLING`, `CANCELLING_REQUESTED`, `CREATED`, `DELETE_REQUESTED`, `DELETING`, `FAILED`, `FAILING`, `FINISHED`, `INITIALIZING`, `RECONCILING`, `RESTARTING`, `RUNNING`, `SAVING`, `SAVING_AND_STOP`, `SAVING_AND_STOP_REQUESTED` and `SUSPENDED`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param versionId ApplicationVersion ID. Maximum length: `36`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder versionId(@Nullable Output<String> versionId) {
            $.versionId = versionId;
            return this;
        }

        /**
         * @param versionId ApplicationVersion ID. Maximum length: `36`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder versionId(String versionId) {
            return versionId(Output.of(versionId));
        }

        public FlinkJarApplicationDeploymentState build() {
            return $;
        }
    }

}
