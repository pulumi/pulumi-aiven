// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBillingGroupResult {
    /**
     * @return Account ID.
     * 
     */
    private String accountId;
    /**
     * @return Address lines 1 and 2. For example, street, PO box, or building.
     * 
     */
    private List<String> addressLines;
    /**
     * @return Billing currency for the billing group. Supported currencies are: AUD, CAD, CHF, DKK, EUR, GBP, JPY, NOK, NZD, SEK, SGD, and USD.
     * 
     */
    private String billingCurrency;
    /**
     * @return Email address of billing contacts. Invoices and other payment notifications are emailed to all billing contacts.
     * 
     */
    private List<String> billingEmails;
    /**
     * @return Additional information to include on your invoice (for example, a reference number).
     * 
     */
    private String billingExtraText;
    /**
     * @return The ID of the billing group. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String billingGroupId;
    /**
     * @return Credit card ID.
     * 
     */
    private String cardId;
    /**
     * @return City, district, suburb, town, or village.
     * 
     */
    private String city;
    /**
     * @return Your company name.
     * 
     */
    private String company;
    /**
     * @return ID of the billing group to copy the company name, address, currency, billing contacts, and extra text from.
     * 
     */
    private String copyFromBillingGroup;
    /**
     * @return Two-letter country code.
     * 
     */
    private String countryCode;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Name of the billing group.
     * 
     */
    private String name;
    /**
     * @return Link a billing group to an existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String parentId;
    /**
     * @return Address state.
     * 
     */
    private String state;
    /**
     * @return The VAT identification number for your company.
     * 
     */
    private String vatId;
    /**
     * @return Zip or postal code.
     * 
     */
    private String zipCode;

    private GetBillingGroupResult() {}
    /**
     * @return Account ID.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Address lines 1 and 2. For example, street, PO box, or building.
     * 
     */
    public List<String> addressLines() {
        return this.addressLines;
    }
    /**
     * @return Billing currency for the billing group. Supported currencies are: AUD, CAD, CHF, DKK, EUR, GBP, JPY, NOK, NZD, SEK, SGD, and USD.
     * 
     */
    public String billingCurrency() {
        return this.billingCurrency;
    }
    /**
     * @return Email address of billing contacts. Invoices and other payment notifications are emailed to all billing contacts.
     * 
     */
    public List<String> billingEmails() {
        return this.billingEmails;
    }
    /**
     * @return Additional information to include on your invoice (for example, a reference number).
     * 
     */
    public String billingExtraText() {
        return this.billingExtraText;
    }
    /**
     * @return The ID of the billing group. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String billingGroupId() {
        return this.billingGroupId;
    }
    /**
     * @return Credit card ID.
     * 
     */
    public String cardId() {
        return this.cardId;
    }
    /**
     * @return City, district, suburb, town, or village.
     * 
     */
    public String city() {
        return this.city;
    }
    /**
     * @return Your company name.
     * 
     */
    public String company() {
        return this.company;
    }
    /**
     * @return ID of the billing group to copy the company name, address, currency, billing contacts, and extra text from.
     * 
     */
    public String copyFromBillingGroup() {
        return this.copyFromBillingGroup;
    }
    /**
     * @return Two-letter country code.
     * 
     */
    public String countryCode() {
        return this.countryCode;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the billing group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Link a billing group to an existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return Address state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The VAT identification number for your company.
     * 
     */
    public String vatId() {
        return this.vatId;
    }
    /**
     * @return Zip or postal code.
     * 
     */
    public String zipCode() {
        return this.zipCode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBillingGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private List<String> addressLines;
        private String billingCurrency;
        private List<String> billingEmails;
        private String billingExtraText;
        private String billingGroupId;
        private String cardId;
        private String city;
        private String company;
        private String copyFromBillingGroup;
        private String countryCode;
        private String id;
        private String name;
        private String parentId;
        private String state;
        private String vatId;
        private String zipCode;
        public Builder() {}
        public Builder(GetBillingGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.addressLines = defaults.addressLines;
    	      this.billingCurrency = defaults.billingCurrency;
    	      this.billingEmails = defaults.billingEmails;
    	      this.billingExtraText = defaults.billingExtraText;
    	      this.billingGroupId = defaults.billingGroupId;
    	      this.cardId = defaults.cardId;
    	      this.city = defaults.city;
    	      this.company = defaults.company;
    	      this.copyFromBillingGroup = defaults.copyFromBillingGroup;
    	      this.countryCode = defaults.countryCode;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.parentId = defaults.parentId;
    	      this.state = defaults.state;
    	      this.vatId = defaults.vatId;
    	      this.zipCode = defaults.zipCode;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder addressLines(List<String> addressLines) {
            if (addressLines == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "addressLines");
            }
            this.addressLines = addressLines;
            return this;
        }
        public Builder addressLines(String... addressLines) {
            return addressLines(List.of(addressLines));
        }
        @CustomType.Setter
        public Builder billingCurrency(String billingCurrency) {
            if (billingCurrency == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "billingCurrency");
            }
            this.billingCurrency = billingCurrency;
            return this;
        }
        @CustomType.Setter
        public Builder billingEmails(List<String> billingEmails) {
            if (billingEmails == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "billingEmails");
            }
            this.billingEmails = billingEmails;
            return this;
        }
        public Builder billingEmails(String... billingEmails) {
            return billingEmails(List.of(billingEmails));
        }
        @CustomType.Setter
        public Builder billingExtraText(String billingExtraText) {
            if (billingExtraText == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "billingExtraText");
            }
            this.billingExtraText = billingExtraText;
            return this;
        }
        @CustomType.Setter
        public Builder billingGroupId(String billingGroupId) {
            if (billingGroupId == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "billingGroupId");
            }
            this.billingGroupId = billingGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder cardId(String cardId) {
            if (cardId == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "cardId");
            }
            this.cardId = cardId;
            return this;
        }
        @CustomType.Setter
        public Builder city(String city) {
            if (city == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "city");
            }
            this.city = city;
            return this;
        }
        @CustomType.Setter
        public Builder company(String company) {
            if (company == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "company");
            }
            this.company = company;
            return this;
        }
        @CustomType.Setter
        public Builder copyFromBillingGroup(String copyFromBillingGroup) {
            if (copyFromBillingGroup == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "copyFromBillingGroup");
            }
            this.copyFromBillingGroup = copyFromBillingGroup;
            return this;
        }
        @CustomType.Setter
        public Builder countryCode(String countryCode) {
            if (countryCode == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "countryCode");
            }
            this.countryCode = countryCode;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            if (parentId == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "parentId");
            }
            this.parentId = parentId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder vatId(String vatId) {
            if (vatId == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "vatId");
            }
            this.vatId = vatId;
            return this;
        }
        @CustomType.Setter
        public Builder zipCode(String zipCode) {
            if (zipCode == null) {
              throw new MissingRequiredPropertyException("GetBillingGroupResult", "zipCode");
            }
            this.zipCode = zipCode;
            return this;
        }
        public GetBillingGroupResult build() {
            final var _resultValue = new GetBillingGroupResult();
            _resultValue.accountId = accountId;
            _resultValue.addressLines = addressLines;
            _resultValue.billingCurrency = billingCurrency;
            _resultValue.billingEmails = billingEmails;
            _resultValue.billingExtraText = billingExtraText;
            _resultValue.billingGroupId = billingGroupId;
            _resultValue.cardId = cardId;
            _resultValue.city = city;
            _resultValue.company = company;
            _resultValue.copyFromBillingGroup = copyFromBillingGroup;
            _resultValue.countryCode = countryCode;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.parentId = parentId;
            _resultValue.state = state;
            _resultValue.vatId = vatId;
            _resultValue.zipCode = zipCode;
            return _resultValue;
        }
    }
}
