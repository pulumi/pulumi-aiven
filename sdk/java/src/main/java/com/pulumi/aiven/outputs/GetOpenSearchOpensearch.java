// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetOpenSearchOpensearch {
    /**
     * @return URI for Kibana dashboard frontend.
     * 
     * @deprecated
     * This field was added by mistake and has never worked. It will be removed in future versions.
     * 
     */
    @Deprecated /* This field was added by mistake and has never worked. It will be removed in future versions. */
    private String kibanaUri;
    /**
     * @return URI for OpenSearch dashboard frontend.
     * 
     */
    private String opensearchDashboardsUri;
    /**
     * @return OpenSearch password.
     * 
     */
    private String password;
    /**
     * @return OpenSearch server URIs.
     * 
     */
    private List<String> uris;
    /**
     * @return OpenSearch username.
     * 
     */
    private String username;

    private GetOpenSearchOpensearch() {}
    /**
     * @return URI for Kibana dashboard frontend.
     * 
     * @deprecated
     * This field was added by mistake and has never worked. It will be removed in future versions.
     * 
     */
    @Deprecated /* This field was added by mistake and has never worked. It will be removed in future versions. */
    public String kibanaUri() {
        return this.kibanaUri;
    }
    /**
     * @return URI for OpenSearch dashboard frontend.
     * 
     */
    public String opensearchDashboardsUri() {
        return this.opensearchDashboardsUri;
    }
    /**
     * @return OpenSearch password.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return OpenSearch server URIs.
     * 
     */
    public List<String> uris() {
        return this.uris;
    }
    /**
     * @return OpenSearch username.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOpenSearchOpensearch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String kibanaUri;
        private String opensearchDashboardsUri;
        private String password;
        private List<String> uris;
        private String username;
        public Builder() {}
        public Builder(GetOpenSearchOpensearch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kibanaUri = defaults.kibanaUri;
    	      this.opensearchDashboardsUri = defaults.opensearchDashboardsUri;
    	      this.password = defaults.password;
    	      this.uris = defaults.uris;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder kibanaUri(String kibanaUri) {
            if (kibanaUri == null) {
              throw new MissingRequiredPropertyException("GetOpenSearchOpensearch", "kibanaUri");
            }
            this.kibanaUri = kibanaUri;
            return this;
        }
        @CustomType.Setter
        public Builder opensearchDashboardsUri(String opensearchDashboardsUri) {
            if (opensearchDashboardsUri == null) {
              throw new MissingRequiredPropertyException("GetOpenSearchOpensearch", "opensearchDashboardsUri");
            }
            this.opensearchDashboardsUri = opensearchDashboardsUri;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetOpenSearchOpensearch", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder uris(List<String> uris) {
            if (uris == null) {
              throw new MissingRequiredPropertyException("GetOpenSearchOpensearch", "uris");
            }
            this.uris = uris;
            return this;
        }
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetOpenSearchOpensearch", "username");
            }
            this.username = username;
            return this;
        }
        public GetOpenSearchOpensearch build() {
            final var _resultValue = new GetOpenSearchOpensearch();
            _resultValue.kibanaUri = kibanaUri;
            _resultValue.opensearchDashboardsUri = opensearchDashboardsUri;
            _resultValue.password = password;
            _resultValue.uris = uris;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
