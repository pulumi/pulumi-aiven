// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetExternalIdentityResult {
    /**
     * @return The name of the external service. The possible value is `github`.
     * 
     */
    private String externalServiceName;
    /**
     * @return The user&#39;s ID on the external service. For GitHub, this is their GitHub username.
     * 
     */
    private String externalUserId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Aiven user ID.
     * 
     */
    private String internalUserId;
    /**
     * @return The ID of the Aiven organization that the user is part of.
     * 
     */
    private String organizationId;

    private GetExternalIdentityResult() {}
    /**
     * @return The name of the external service. The possible value is `github`.
     * 
     */
    public String externalServiceName() {
        return this.externalServiceName;
    }
    /**
     * @return The user&#39;s ID on the external service. For GitHub, this is their GitHub username.
     * 
     */
    public String externalUserId() {
        return this.externalUserId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Aiven user ID.
     * 
     */
    public String internalUserId() {
        return this.internalUserId;
    }
    /**
     * @return The ID of the Aiven organization that the user is part of.
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalIdentityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String externalServiceName;
        private String externalUserId;
        private String id;
        private String internalUserId;
        private String organizationId;
        public Builder() {}
        public Builder(GetExternalIdentityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.externalServiceName = defaults.externalServiceName;
    	      this.externalUserId = defaults.externalUserId;
    	      this.id = defaults.id;
    	      this.internalUserId = defaults.internalUserId;
    	      this.organizationId = defaults.organizationId;
        }

        @CustomType.Setter
        public Builder externalServiceName(String externalServiceName) {
            if (externalServiceName == null) {
              throw new MissingRequiredPropertyException("GetExternalIdentityResult", "externalServiceName");
            }
            this.externalServiceName = externalServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder externalUserId(String externalUserId) {
            if (externalUserId == null) {
              throw new MissingRequiredPropertyException("GetExternalIdentityResult", "externalUserId");
            }
            this.externalUserId = externalUserId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalIdentityResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder internalUserId(String internalUserId) {
            if (internalUserId == null) {
              throw new MissingRequiredPropertyException("GetExternalIdentityResult", "internalUserId");
            }
            this.internalUserId = internalUserId;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            if (organizationId == null) {
              throw new MissingRequiredPropertyException("GetExternalIdentityResult", "organizationId");
            }
            this.organizationId = organizationId;
            return this;
        }
        public GetExternalIdentityResult build() {
            final var _resultValue = new GetExternalIdentityResult();
            _resultValue.externalServiceName = externalServiceName;
            _resultValue.externalUserId = externalUserId;
            _resultValue.id = id;
            _resultValue.internalUserId = internalUserId;
            _resultValue.organizationId = organizationId;
            return _resultValue;
        }
    }
}
