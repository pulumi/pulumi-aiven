// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMySqlComponent {
    private String component;
    private String connectionUri;
    private String host;
    private String kafkaAuthenticationMethod;
    private Integer port;
    private String route;
    private Boolean ssl;
    private String usage;

    private GetMySqlComponent() {}
    public String component() {
        return this.component;
    }
    public String connectionUri() {
        return this.connectionUri;
    }
    public String host() {
        return this.host;
    }
    public String kafkaAuthenticationMethod() {
        return this.kafkaAuthenticationMethod;
    }
    public Integer port() {
        return this.port;
    }
    public String route() {
        return this.route;
    }
    public Boolean ssl() {
        return this.ssl;
    }
    public String usage() {
        return this.usage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMySqlComponent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String component;
        private String connectionUri;
        private String host;
        private String kafkaAuthenticationMethod;
        private Integer port;
        private String route;
        private Boolean ssl;
        private String usage;
        public Builder() {}
        public Builder(GetMySqlComponent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.component = defaults.component;
    	      this.connectionUri = defaults.connectionUri;
    	      this.host = defaults.host;
    	      this.kafkaAuthenticationMethod = defaults.kafkaAuthenticationMethod;
    	      this.port = defaults.port;
    	      this.route = defaults.route;
    	      this.ssl = defaults.ssl;
    	      this.usage = defaults.usage;
        }

        @CustomType.Setter
        public Builder component(String component) {
            if (component == null) {
              throw new MissingRequiredPropertyException("GetMySqlComponent", "component");
            }
            this.component = component;
            return this;
        }
        @CustomType.Setter
        public Builder connectionUri(String connectionUri) {
            if (connectionUri == null) {
              throw new MissingRequiredPropertyException("GetMySqlComponent", "connectionUri");
            }
            this.connectionUri = connectionUri;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetMySqlComponent", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaAuthenticationMethod(String kafkaAuthenticationMethod) {
            if (kafkaAuthenticationMethod == null) {
              throw new MissingRequiredPropertyException("GetMySqlComponent", "kafkaAuthenticationMethod");
            }
            this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetMySqlComponent", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder route(String route) {
            if (route == null) {
              throw new MissingRequiredPropertyException("GetMySqlComponent", "route");
            }
            this.route = route;
            return this;
        }
        @CustomType.Setter
        public Builder ssl(Boolean ssl) {
            if (ssl == null) {
              throw new MissingRequiredPropertyException("GetMySqlComponent", "ssl");
            }
            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder usage(String usage) {
            if (usage == null) {
              throw new MissingRequiredPropertyException("GetMySqlComponent", "usage");
            }
            this.usage = usage;
            return this;
        }
        public GetMySqlComponent build() {
            final var _resultValue = new GetMySqlComponent();
            _resultValue.component = component;
            _resultValue.connectionUri = connectionUri;
            _resultValue.host = host;
            _resultValue.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
            _resultValue.port = port;
            _resultValue.route = route;
            _resultValue.ssl = ssl;
            _resultValue.usage = usage;
            return _resultValue;
        }
    }
}
