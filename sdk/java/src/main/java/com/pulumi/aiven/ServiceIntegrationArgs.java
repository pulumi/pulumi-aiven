// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.aiven.inputs.ServiceIntegrationClickhouseKafkaUserConfigArgs;
import com.pulumi.aiven.inputs.ServiceIntegrationClickhousePostgresqlUserConfigArgs;
import com.pulumi.aiven.inputs.ServiceIntegrationDatadogUserConfigArgs;
import com.pulumi.aiven.inputs.ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigArgs;
import com.pulumi.aiven.inputs.ServiceIntegrationKafkaConnectUserConfigArgs;
import com.pulumi.aiven.inputs.ServiceIntegrationKafkaLogsUserConfigArgs;
import com.pulumi.aiven.inputs.ServiceIntegrationKafkaMirrormakerUserConfigArgs;
import com.pulumi.aiven.inputs.ServiceIntegrationLogsUserConfigArgs;
import com.pulumi.aiven.inputs.ServiceIntegrationMetricsUserConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceIntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceIntegrationArgs Empty = new ServiceIntegrationArgs();

    /**
     * ClickhouseKafka user configurable settings
     * 
     */
    @Import(name="clickhouseKafkaUserConfig")
    private @Nullable Output<ServiceIntegrationClickhouseKafkaUserConfigArgs> clickhouseKafkaUserConfig;

    /**
     * @return ClickhouseKafka user configurable settings
     * 
     */
    public Optional<Output<ServiceIntegrationClickhouseKafkaUserConfigArgs>> clickhouseKafkaUserConfig() {
        return Optional.ofNullable(this.clickhouseKafkaUserConfig);
    }

    /**
     * ClickhousePostgresql user configurable settings
     * 
     */
    @Import(name="clickhousePostgresqlUserConfig")
    private @Nullable Output<ServiceIntegrationClickhousePostgresqlUserConfigArgs> clickhousePostgresqlUserConfig;

    /**
     * @return ClickhousePostgresql user configurable settings
     * 
     */
    public Optional<Output<ServiceIntegrationClickhousePostgresqlUserConfigArgs>> clickhousePostgresqlUserConfig() {
        return Optional.ofNullable(this.clickhousePostgresqlUserConfig);
    }

    /**
     * Datadog user configurable settings
     * 
     */
    @Import(name="datadogUserConfig")
    private @Nullable Output<ServiceIntegrationDatadogUserConfigArgs> datadogUserConfig;

    /**
     * @return Datadog user configurable settings
     * 
     */
    public Optional<Output<ServiceIntegrationDatadogUserConfigArgs>> datadogUserConfig() {
        return Optional.ofNullable(this.datadogUserConfig);
    }

    /**
     * Destination endpoint for the integration (if any)
     * 
     */
    @Import(name="destinationEndpointId")
    private @Nullable Output<String> destinationEndpointId;

    /**
     * @return Destination endpoint for the integration (if any)
     * 
     */
    public Optional<Output<String>> destinationEndpointId() {
        return Optional.ofNullable(this.destinationEndpointId);
    }

    /**
     * Destination service for the integration (if any)
     * 
     */
    @Import(name="destinationServiceName")
    private @Nullable Output<String> destinationServiceName;

    /**
     * @return Destination service for the integration (if any)
     * 
     */
    public Optional<Output<String>> destinationServiceName() {
        return Optional.ofNullable(this.destinationServiceName);
    }

    /**
     * ExternalAwsCloudwatchMetrics user configurable settings
     * 
     */
    @Import(name="externalAwsCloudwatchMetricsUserConfig")
    private @Nullable Output<ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigArgs> externalAwsCloudwatchMetricsUserConfig;

    /**
     * @return ExternalAwsCloudwatchMetrics user configurable settings
     * 
     */
    public Optional<Output<ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigArgs>> externalAwsCloudwatchMetricsUserConfig() {
        return Optional.ofNullable(this.externalAwsCloudwatchMetricsUserConfig);
    }

    /**
     * Type of the service integration. Possible values: `alertmanager`, `cassandra_cross_service_cluster`, `clickhouse_kafka`, `clickhouse_postgresql`, `dashboard`, `datadog`, `datasource`, `external_aws_cloudwatch_logs`, `external_aws_cloudwatch_metrics`, `external_elasticsearch_logs`, `external_google_cloud_logging`, `external_opensearch_logs`, `flink`, `internal_connectivity`, `jolokia`, `kafka_connect`, `kafka_logs`, `kafka_mirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearch_cross_cluster_replication`, `opensearch_cross_cluster_search`, `prometheus`, `read_replica`, `rsyslog`, `schema_registry_proxy`
     * 
     */
    @Import(name="integrationType", required=true)
    private Output<String> integrationType;

    /**
     * @return Type of the service integration. Possible values: `alertmanager`, `cassandra_cross_service_cluster`, `clickhouse_kafka`, `clickhouse_postgresql`, `dashboard`, `datadog`, `datasource`, `external_aws_cloudwatch_logs`, `external_aws_cloudwatch_metrics`, `external_elasticsearch_logs`, `external_google_cloud_logging`, `external_opensearch_logs`, `flink`, `internal_connectivity`, `jolokia`, `kafka_connect`, `kafka_logs`, `kafka_mirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearch_cross_cluster_replication`, `opensearch_cross_cluster_search`, `prometheus`, `read_replica`, `rsyslog`, `schema_registry_proxy`
     * 
     */
    public Output<String> integrationType() {
        return this.integrationType;
    }

    /**
     * KafkaConnect user configurable settings
     * 
     */
    @Import(name="kafkaConnectUserConfig")
    private @Nullable Output<ServiceIntegrationKafkaConnectUserConfigArgs> kafkaConnectUserConfig;

    /**
     * @return KafkaConnect user configurable settings
     * 
     */
    public Optional<Output<ServiceIntegrationKafkaConnectUserConfigArgs>> kafkaConnectUserConfig() {
        return Optional.ofNullable(this.kafkaConnectUserConfig);
    }

    /**
     * KafkaLogs user configurable settings
     * 
     */
    @Import(name="kafkaLogsUserConfig")
    private @Nullable Output<ServiceIntegrationKafkaLogsUserConfigArgs> kafkaLogsUserConfig;

    /**
     * @return KafkaLogs user configurable settings
     * 
     */
    public Optional<Output<ServiceIntegrationKafkaLogsUserConfigArgs>> kafkaLogsUserConfig() {
        return Optional.ofNullable(this.kafkaLogsUserConfig);
    }

    /**
     * KafkaMirrormaker user configurable settings
     * 
     */
    @Import(name="kafkaMirrormakerUserConfig")
    private @Nullable Output<ServiceIntegrationKafkaMirrormakerUserConfigArgs> kafkaMirrormakerUserConfig;

    /**
     * @return KafkaMirrormaker user configurable settings
     * 
     */
    public Optional<Output<ServiceIntegrationKafkaMirrormakerUserConfigArgs>> kafkaMirrormakerUserConfig() {
        return Optional.ofNullable(this.kafkaMirrormakerUserConfig);
    }

    /**
     * Logs user configurable settings
     * 
     */
    @Import(name="logsUserConfig")
    private @Nullable Output<ServiceIntegrationLogsUserConfigArgs> logsUserConfig;

    /**
     * @return Logs user configurable settings
     * 
     */
    public Optional<Output<ServiceIntegrationLogsUserConfigArgs>> logsUserConfig() {
        return Optional.ofNullable(this.logsUserConfig);
    }

    /**
     * Metrics user configurable settings
     * 
     */
    @Import(name="metricsUserConfig")
    private @Nullable Output<ServiceIntegrationMetricsUserConfigArgs> metricsUserConfig;

    /**
     * @return Metrics user configurable settings
     * 
     */
    public Optional<Output<ServiceIntegrationMetricsUserConfigArgs>> metricsUserConfig() {
        return Optional.ofNullable(this.metricsUserConfig);
    }

    /**
     * Project the integration belongs to
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Project the integration belongs to
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Source endpoint for the integration (if any)
     * 
     */
    @Import(name="sourceEndpointId")
    private @Nullable Output<String> sourceEndpointId;

    /**
     * @return Source endpoint for the integration (if any)
     * 
     */
    public Optional<Output<String>> sourceEndpointId() {
        return Optional.ofNullable(this.sourceEndpointId);
    }

    /**
     * Source service for the integration (if any)
     * 
     */
    @Import(name="sourceServiceName")
    private @Nullable Output<String> sourceServiceName;

    /**
     * @return Source service for the integration (if any)
     * 
     */
    public Optional<Output<String>> sourceServiceName() {
        return Optional.ofNullable(this.sourceServiceName);
    }

    private ServiceIntegrationArgs() {}

    private ServiceIntegrationArgs(ServiceIntegrationArgs $) {
        this.clickhouseKafkaUserConfig = $.clickhouseKafkaUserConfig;
        this.clickhousePostgresqlUserConfig = $.clickhousePostgresqlUserConfig;
        this.datadogUserConfig = $.datadogUserConfig;
        this.destinationEndpointId = $.destinationEndpointId;
        this.destinationServiceName = $.destinationServiceName;
        this.externalAwsCloudwatchMetricsUserConfig = $.externalAwsCloudwatchMetricsUserConfig;
        this.integrationType = $.integrationType;
        this.kafkaConnectUserConfig = $.kafkaConnectUserConfig;
        this.kafkaLogsUserConfig = $.kafkaLogsUserConfig;
        this.kafkaMirrormakerUserConfig = $.kafkaMirrormakerUserConfig;
        this.logsUserConfig = $.logsUserConfig;
        this.metricsUserConfig = $.metricsUserConfig;
        this.project = $.project;
        this.sourceEndpointId = $.sourceEndpointId;
        this.sourceServiceName = $.sourceServiceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceIntegrationArgs $;

        public Builder() {
            $ = new ServiceIntegrationArgs();
        }

        public Builder(ServiceIntegrationArgs defaults) {
            $ = new ServiceIntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clickhouseKafkaUserConfig ClickhouseKafka user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder clickhouseKafkaUserConfig(@Nullable Output<ServiceIntegrationClickhouseKafkaUserConfigArgs> clickhouseKafkaUserConfig) {
            $.clickhouseKafkaUserConfig = clickhouseKafkaUserConfig;
            return this;
        }

        /**
         * @param clickhouseKafkaUserConfig ClickhouseKafka user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder clickhouseKafkaUserConfig(ServiceIntegrationClickhouseKafkaUserConfigArgs clickhouseKafkaUserConfig) {
            return clickhouseKafkaUserConfig(Output.of(clickhouseKafkaUserConfig));
        }

        /**
         * @param clickhousePostgresqlUserConfig ClickhousePostgresql user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder clickhousePostgresqlUserConfig(@Nullable Output<ServiceIntegrationClickhousePostgresqlUserConfigArgs> clickhousePostgresqlUserConfig) {
            $.clickhousePostgresqlUserConfig = clickhousePostgresqlUserConfig;
            return this;
        }

        /**
         * @param clickhousePostgresqlUserConfig ClickhousePostgresql user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder clickhousePostgresqlUserConfig(ServiceIntegrationClickhousePostgresqlUserConfigArgs clickhousePostgresqlUserConfig) {
            return clickhousePostgresqlUserConfig(Output.of(clickhousePostgresqlUserConfig));
        }

        /**
         * @param datadogUserConfig Datadog user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder datadogUserConfig(@Nullable Output<ServiceIntegrationDatadogUserConfigArgs> datadogUserConfig) {
            $.datadogUserConfig = datadogUserConfig;
            return this;
        }

        /**
         * @param datadogUserConfig Datadog user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder datadogUserConfig(ServiceIntegrationDatadogUserConfigArgs datadogUserConfig) {
            return datadogUserConfig(Output.of(datadogUserConfig));
        }

        /**
         * @param destinationEndpointId Destination endpoint for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder destinationEndpointId(@Nullable Output<String> destinationEndpointId) {
            $.destinationEndpointId = destinationEndpointId;
            return this;
        }

        /**
         * @param destinationEndpointId Destination endpoint for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder destinationEndpointId(String destinationEndpointId) {
            return destinationEndpointId(Output.of(destinationEndpointId));
        }

        /**
         * @param destinationServiceName Destination service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder destinationServiceName(@Nullable Output<String> destinationServiceName) {
            $.destinationServiceName = destinationServiceName;
            return this;
        }

        /**
         * @param destinationServiceName Destination service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder destinationServiceName(String destinationServiceName) {
            return destinationServiceName(Output.of(destinationServiceName));
        }

        /**
         * @param externalAwsCloudwatchMetricsUserConfig ExternalAwsCloudwatchMetrics user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder externalAwsCloudwatchMetricsUserConfig(@Nullable Output<ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigArgs> externalAwsCloudwatchMetricsUserConfig) {
            $.externalAwsCloudwatchMetricsUserConfig = externalAwsCloudwatchMetricsUserConfig;
            return this;
        }

        /**
         * @param externalAwsCloudwatchMetricsUserConfig ExternalAwsCloudwatchMetrics user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder externalAwsCloudwatchMetricsUserConfig(ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigArgs externalAwsCloudwatchMetricsUserConfig) {
            return externalAwsCloudwatchMetricsUserConfig(Output.of(externalAwsCloudwatchMetricsUserConfig));
        }

        /**
         * @param integrationType Type of the service integration. Possible values: `alertmanager`, `cassandra_cross_service_cluster`, `clickhouse_kafka`, `clickhouse_postgresql`, `dashboard`, `datadog`, `datasource`, `external_aws_cloudwatch_logs`, `external_aws_cloudwatch_metrics`, `external_elasticsearch_logs`, `external_google_cloud_logging`, `external_opensearch_logs`, `flink`, `internal_connectivity`, `jolokia`, `kafka_connect`, `kafka_logs`, `kafka_mirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearch_cross_cluster_replication`, `opensearch_cross_cluster_search`, `prometheus`, `read_replica`, `rsyslog`, `schema_registry_proxy`
         * 
         * @return builder
         * 
         */
        public Builder integrationType(Output<String> integrationType) {
            $.integrationType = integrationType;
            return this;
        }

        /**
         * @param integrationType Type of the service integration. Possible values: `alertmanager`, `cassandra_cross_service_cluster`, `clickhouse_kafka`, `clickhouse_postgresql`, `dashboard`, `datadog`, `datasource`, `external_aws_cloudwatch_logs`, `external_aws_cloudwatch_metrics`, `external_elasticsearch_logs`, `external_google_cloud_logging`, `external_opensearch_logs`, `flink`, `internal_connectivity`, `jolokia`, `kafka_connect`, `kafka_logs`, `kafka_mirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearch_cross_cluster_replication`, `opensearch_cross_cluster_search`, `prometheus`, `read_replica`, `rsyslog`, `schema_registry_proxy`
         * 
         * @return builder
         * 
         */
        public Builder integrationType(String integrationType) {
            return integrationType(Output.of(integrationType));
        }

        /**
         * @param kafkaConnectUserConfig KafkaConnect user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder kafkaConnectUserConfig(@Nullable Output<ServiceIntegrationKafkaConnectUserConfigArgs> kafkaConnectUserConfig) {
            $.kafkaConnectUserConfig = kafkaConnectUserConfig;
            return this;
        }

        /**
         * @param kafkaConnectUserConfig KafkaConnect user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder kafkaConnectUserConfig(ServiceIntegrationKafkaConnectUserConfigArgs kafkaConnectUserConfig) {
            return kafkaConnectUserConfig(Output.of(kafkaConnectUserConfig));
        }

        /**
         * @param kafkaLogsUserConfig KafkaLogs user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder kafkaLogsUserConfig(@Nullable Output<ServiceIntegrationKafkaLogsUserConfigArgs> kafkaLogsUserConfig) {
            $.kafkaLogsUserConfig = kafkaLogsUserConfig;
            return this;
        }

        /**
         * @param kafkaLogsUserConfig KafkaLogs user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder kafkaLogsUserConfig(ServiceIntegrationKafkaLogsUserConfigArgs kafkaLogsUserConfig) {
            return kafkaLogsUserConfig(Output.of(kafkaLogsUserConfig));
        }

        /**
         * @param kafkaMirrormakerUserConfig KafkaMirrormaker user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder kafkaMirrormakerUserConfig(@Nullable Output<ServiceIntegrationKafkaMirrormakerUserConfigArgs> kafkaMirrormakerUserConfig) {
            $.kafkaMirrormakerUserConfig = kafkaMirrormakerUserConfig;
            return this;
        }

        /**
         * @param kafkaMirrormakerUserConfig KafkaMirrormaker user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder kafkaMirrormakerUserConfig(ServiceIntegrationKafkaMirrormakerUserConfigArgs kafkaMirrormakerUserConfig) {
            return kafkaMirrormakerUserConfig(Output.of(kafkaMirrormakerUserConfig));
        }

        /**
         * @param logsUserConfig Logs user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder logsUserConfig(@Nullable Output<ServiceIntegrationLogsUserConfigArgs> logsUserConfig) {
            $.logsUserConfig = logsUserConfig;
            return this;
        }

        /**
         * @param logsUserConfig Logs user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder logsUserConfig(ServiceIntegrationLogsUserConfigArgs logsUserConfig) {
            return logsUserConfig(Output.of(logsUserConfig));
        }

        /**
         * @param metricsUserConfig Metrics user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder metricsUserConfig(@Nullable Output<ServiceIntegrationMetricsUserConfigArgs> metricsUserConfig) {
            $.metricsUserConfig = metricsUserConfig;
            return this;
        }

        /**
         * @param metricsUserConfig Metrics user configurable settings
         * 
         * @return builder
         * 
         */
        public Builder metricsUserConfig(ServiceIntegrationMetricsUserConfigArgs metricsUserConfig) {
            return metricsUserConfig(Output.of(metricsUserConfig));
        }

        /**
         * @param project Project the integration belongs to
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project the integration belongs to
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sourceEndpointId Source endpoint for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointId(@Nullable Output<String> sourceEndpointId) {
            $.sourceEndpointId = sourceEndpointId;
            return this;
        }

        /**
         * @param sourceEndpointId Source endpoint for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointId(String sourceEndpointId) {
            return sourceEndpointId(Output.of(sourceEndpointId));
        }

        /**
         * @param sourceServiceName Source service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder sourceServiceName(@Nullable Output<String> sourceServiceName) {
            $.sourceServiceName = sourceServiceName;
            return this;
        }

        /**
         * @param sourceServiceName Source service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder sourceServiceName(String sourceServiceName) {
            return sourceServiceName(Output.of(sourceServiceName));
        }

        public ServiceIntegrationArgs build() {
            $.integrationType = Objects.requireNonNull($.integrationType, "expected parameter 'integrationType' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
