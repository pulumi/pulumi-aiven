// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAccountTeamMemberResult {
    /**
     * @return is a boolean flag that determines whether an invitation was accepted or not by the user. `false` value means that the invitation was sent to the user but not yet accepted. `true` means that the user accepted the invitation and now a member of an account team.
     * 
     */
    private Boolean accepted;
    /**
     * @return The unique account id. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String accountId;
    /**
     * @return Time of creation
     * 
     */
    private String createTime;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The email address that invited this user.
     * 
     */
    private String invitedByUserEmail;
    /**
     * @return An account team id. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String teamId;
    /**
     * @return Is a user email address that first will be invited, and after accepting an invitation, he or she becomes a member of a team. Should be lowercase. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String userEmail;

    private GetAccountTeamMemberResult() {}
    /**
     * @return is a boolean flag that determines whether an invitation was accepted or not by the user. `false` value means that the invitation was sent to the user but not yet accepted. `true` means that the user accepted the invitation and now a member of an account team.
     * 
     */
    public Boolean accepted() {
        return this.accepted;
    }
    /**
     * @return The unique account id. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Time of creation
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The email address that invited this user.
     * 
     */
    public String invitedByUserEmail() {
        return this.invitedByUserEmail;
    }
    /**
     * @return An account team id. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String teamId() {
        return this.teamId;
    }
    /**
     * @return Is a user email address that first will be invited, and after accepting an invitation, he or she becomes a member of a team. Should be lowercase. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String userEmail() {
        return this.userEmail;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountTeamMemberResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accepted;
        private String accountId;
        private String createTime;
        private String id;
        private String invitedByUserEmail;
        private String teamId;
        private String userEmail;
        public Builder() {}
        public Builder(GetAccountTeamMemberResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepted = defaults.accepted;
    	      this.accountId = defaults.accountId;
    	      this.createTime = defaults.createTime;
    	      this.id = defaults.id;
    	      this.invitedByUserEmail = defaults.invitedByUserEmail;
    	      this.teamId = defaults.teamId;
    	      this.userEmail = defaults.userEmail;
        }

        @CustomType.Setter
        public Builder accepted(Boolean accepted) {
            if (accepted == null) {
              throw new MissingRequiredPropertyException("GetAccountTeamMemberResult", "accepted");
            }
            this.accepted = accepted;
            return this;
        }
        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetAccountTeamMemberResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetAccountTeamMemberResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAccountTeamMemberResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder invitedByUserEmail(String invitedByUserEmail) {
            if (invitedByUserEmail == null) {
              throw new MissingRequiredPropertyException("GetAccountTeamMemberResult", "invitedByUserEmail");
            }
            this.invitedByUserEmail = invitedByUserEmail;
            return this;
        }
        @CustomType.Setter
        public Builder teamId(String teamId) {
            if (teamId == null) {
              throw new MissingRequiredPropertyException("GetAccountTeamMemberResult", "teamId");
            }
            this.teamId = teamId;
            return this;
        }
        @CustomType.Setter
        public Builder userEmail(String userEmail) {
            if (userEmail == null) {
              throw new MissingRequiredPropertyException("GetAccountTeamMemberResult", "userEmail");
            }
            this.userEmail = userEmail;
            return this;
        }
        public GetAccountTeamMemberResult build() {
            final var _resultValue = new GetAccountTeamMemberResult();
            _resultValue.accepted = accepted;
            _resultValue.accountId = accountId;
            _resultValue.createTime = createTime;
            _resultValue.id = id;
            _resultValue.invitedByUserEmail = invitedByUserEmail;
            _resultValue.teamId = teamId;
            _resultValue.userEmail = userEmail;
            return _resultValue;
        }
    }
}
