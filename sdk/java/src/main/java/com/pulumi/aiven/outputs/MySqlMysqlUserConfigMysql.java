// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MySqlMysqlUserConfigMysql {
    private @Nullable Integer connectTimeout;
    private @Nullable String defaultTimeZone;
    private @Nullable Integer groupConcatMaxLen;
    private @Nullable Integer informationSchemaStatsExpiry;
    private @Nullable Integer innodbChangeBufferMaxSize;
    private @Nullable Integer innodbFlushNeighbors;
    private @Nullable Integer innodbFtMinTokenSize;
    private @Nullable String innodbFtServerStopwordTable;
    private @Nullable Integer innodbLockWaitTimeout;
    private @Nullable Integer innodbLogBufferSize;
    private @Nullable Integer innodbOnlineAlterLogMaxSize;
    private @Nullable Boolean innodbPrintAllDeadlocks;
    private @Nullable Integer innodbReadIoThreads;
    private @Nullable Boolean innodbRollbackOnTimeout;
    private @Nullable Integer innodbThreadConcurrency;
    private @Nullable Integer innodbWriteIoThreads;
    private @Nullable Integer interactiveTimeout;
    private @Nullable String internalTmpMemStorageEngine;
    private @Nullable Double longQueryTime;
    private @Nullable Integer maxAllowedPacket;
    private @Nullable Integer maxHeapTableSize;
    private @Nullable Integer netBufferLength;
    private @Nullable Integer netReadTimeout;
    private @Nullable Integer netWriteTimeout;
    private @Nullable Boolean slowQueryLog;
    private @Nullable Integer sortBufferSize;
    private @Nullable String sqlMode;
    private @Nullable Boolean sqlRequirePrimaryKey;
    private @Nullable Integer tmpTableSize;
    private @Nullable Integer waitTimeout;

    private MySqlMysqlUserConfigMysql() {}
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    public Optional<String> defaultTimeZone() {
        return Optional.ofNullable(this.defaultTimeZone);
    }
    public Optional<Integer> groupConcatMaxLen() {
        return Optional.ofNullable(this.groupConcatMaxLen);
    }
    public Optional<Integer> informationSchemaStatsExpiry() {
        return Optional.ofNullable(this.informationSchemaStatsExpiry);
    }
    public Optional<Integer> innodbChangeBufferMaxSize() {
        return Optional.ofNullable(this.innodbChangeBufferMaxSize);
    }
    public Optional<Integer> innodbFlushNeighbors() {
        return Optional.ofNullable(this.innodbFlushNeighbors);
    }
    public Optional<Integer> innodbFtMinTokenSize() {
        return Optional.ofNullable(this.innodbFtMinTokenSize);
    }
    public Optional<String> innodbFtServerStopwordTable() {
        return Optional.ofNullable(this.innodbFtServerStopwordTable);
    }
    public Optional<Integer> innodbLockWaitTimeout() {
        return Optional.ofNullable(this.innodbLockWaitTimeout);
    }
    public Optional<Integer> innodbLogBufferSize() {
        return Optional.ofNullable(this.innodbLogBufferSize);
    }
    public Optional<Integer> innodbOnlineAlterLogMaxSize() {
        return Optional.ofNullable(this.innodbOnlineAlterLogMaxSize);
    }
    public Optional<Boolean> innodbPrintAllDeadlocks() {
        return Optional.ofNullable(this.innodbPrintAllDeadlocks);
    }
    public Optional<Integer> innodbReadIoThreads() {
        return Optional.ofNullable(this.innodbReadIoThreads);
    }
    public Optional<Boolean> innodbRollbackOnTimeout() {
        return Optional.ofNullable(this.innodbRollbackOnTimeout);
    }
    public Optional<Integer> innodbThreadConcurrency() {
        return Optional.ofNullable(this.innodbThreadConcurrency);
    }
    public Optional<Integer> innodbWriteIoThreads() {
        return Optional.ofNullable(this.innodbWriteIoThreads);
    }
    public Optional<Integer> interactiveTimeout() {
        return Optional.ofNullable(this.interactiveTimeout);
    }
    public Optional<String> internalTmpMemStorageEngine() {
        return Optional.ofNullable(this.internalTmpMemStorageEngine);
    }
    public Optional<Double> longQueryTime() {
        return Optional.ofNullable(this.longQueryTime);
    }
    public Optional<Integer> maxAllowedPacket() {
        return Optional.ofNullable(this.maxAllowedPacket);
    }
    public Optional<Integer> maxHeapTableSize() {
        return Optional.ofNullable(this.maxHeapTableSize);
    }
    public Optional<Integer> netBufferLength() {
        return Optional.ofNullable(this.netBufferLength);
    }
    public Optional<Integer> netReadTimeout() {
        return Optional.ofNullable(this.netReadTimeout);
    }
    public Optional<Integer> netWriteTimeout() {
        return Optional.ofNullable(this.netWriteTimeout);
    }
    public Optional<Boolean> slowQueryLog() {
        return Optional.ofNullable(this.slowQueryLog);
    }
    public Optional<Integer> sortBufferSize() {
        return Optional.ofNullable(this.sortBufferSize);
    }
    public Optional<String> sqlMode() {
        return Optional.ofNullable(this.sqlMode);
    }
    public Optional<Boolean> sqlRequirePrimaryKey() {
        return Optional.ofNullable(this.sqlRequirePrimaryKey);
    }
    public Optional<Integer> tmpTableSize() {
        return Optional.ofNullable(this.tmpTableSize);
    }
    public Optional<Integer> waitTimeout() {
        return Optional.ofNullable(this.waitTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MySqlMysqlUserConfigMysql defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer connectTimeout;
        private @Nullable String defaultTimeZone;
        private @Nullable Integer groupConcatMaxLen;
        private @Nullable Integer informationSchemaStatsExpiry;
        private @Nullable Integer innodbChangeBufferMaxSize;
        private @Nullable Integer innodbFlushNeighbors;
        private @Nullable Integer innodbFtMinTokenSize;
        private @Nullable String innodbFtServerStopwordTable;
        private @Nullable Integer innodbLockWaitTimeout;
        private @Nullable Integer innodbLogBufferSize;
        private @Nullable Integer innodbOnlineAlterLogMaxSize;
        private @Nullable Boolean innodbPrintAllDeadlocks;
        private @Nullable Integer innodbReadIoThreads;
        private @Nullable Boolean innodbRollbackOnTimeout;
        private @Nullable Integer innodbThreadConcurrency;
        private @Nullable Integer innodbWriteIoThreads;
        private @Nullable Integer interactiveTimeout;
        private @Nullable String internalTmpMemStorageEngine;
        private @Nullable Double longQueryTime;
        private @Nullable Integer maxAllowedPacket;
        private @Nullable Integer maxHeapTableSize;
        private @Nullable Integer netBufferLength;
        private @Nullable Integer netReadTimeout;
        private @Nullable Integer netWriteTimeout;
        private @Nullable Boolean slowQueryLog;
        private @Nullable Integer sortBufferSize;
        private @Nullable String sqlMode;
        private @Nullable Boolean sqlRequirePrimaryKey;
        private @Nullable Integer tmpTableSize;
        private @Nullable Integer waitTimeout;
        public Builder() {}
        public Builder(MySqlMysqlUserConfigMysql defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.defaultTimeZone = defaults.defaultTimeZone;
    	      this.groupConcatMaxLen = defaults.groupConcatMaxLen;
    	      this.informationSchemaStatsExpiry = defaults.informationSchemaStatsExpiry;
    	      this.innodbChangeBufferMaxSize = defaults.innodbChangeBufferMaxSize;
    	      this.innodbFlushNeighbors = defaults.innodbFlushNeighbors;
    	      this.innodbFtMinTokenSize = defaults.innodbFtMinTokenSize;
    	      this.innodbFtServerStopwordTable = defaults.innodbFtServerStopwordTable;
    	      this.innodbLockWaitTimeout = defaults.innodbLockWaitTimeout;
    	      this.innodbLogBufferSize = defaults.innodbLogBufferSize;
    	      this.innodbOnlineAlterLogMaxSize = defaults.innodbOnlineAlterLogMaxSize;
    	      this.innodbPrintAllDeadlocks = defaults.innodbPrintAllDeadlocks;
    	      this.innodbReadIoThreads = defaults.innodbReadIoThreads;
    	      this.innodbRollbackOnTimeout = defaults.innodbRollbackOnTimeout;
    	      this.innodbThreadConcurrency = defaults.innodbThreadConcurrency;
    	      this.innodbWriteIoThreads = defaults.innodbWriteIoThreads;
    	      this.interactiveTimeout = defaults.interactiveTimeout;
    	      this.internalTmpMemStorageEngine = defaults.internalTmpMemStorageEngine;
    	      this.longQueryTime = defaults.longQueryTime;
    	      this.maxAllowedPacket = defaults.maxAllowedPacket;
    	      this.maxHeapTableSize = defaults.maxHeapTableSize;
    	      this.netBufferLength = defaults.netBufferLength;
    	      this.netReadTimeout = defaults.netReadTimeout;
    	      this.netWriteTimeout = defaults.netWriteTimeout;
    	      this.slowQueryLog = defaults.slowQueryLog;
    	      this.sortBufferSize = defaults.sortBufferSize;
    	      this.sqlMode = defaults.sqlMode;
    	      this.sqlRequirePrimaryKey = defaults.sqlRequirePrimaryKey;
    	      this.tmpTableSize = defaults.tmpTableSize;
    	      this.waitTimeout = defaults.waitTimeout;
        }

        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {

            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTimeZone(@Nullable String defaultTimeZone) {

            this.defaultTimeZone = defaultTimeZone;
            return this;
        }
        @CustomType.Setter
        public Builder groupConcatMaxLen(@Nullable Integer groupConcatMaxLen) {

            this.groupConcatMaxLen = groupConcatMaxLen;
            return this;
        }
        @CustomType.Setter
        public Builder informationSchemaStatsExpiry(@Nullable Integer informationSchemaStatsExpiry) {

            this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder innodbChangeBufferMaxSize(@Nullable Integer innodbChangeBufferMaxSize) {

            this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFlushNeighbors(@Nullable Integer innodbFlushNeighbors) {

            this.innodbFlushNeighbors = innodbFlushNeighbors;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtMinTokenSize(@Nullable Integer innodbFtMinTokenSize) {

            this.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtServerStopwordTable(@Nullable String innodbFtServerStopwordTable) {

            this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }
        @CustomType.Setter
        public Builder innodbLockWaitTimeout(@Nullable Integer innodbLockWaitTimeout) {

            this.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder innodbLogBufferSize(@Nullable Integer innodbLogBufferSize) {

            this.innodbLogBufferSize = innodbLogBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbOnlineAlterLogMaxSize(@Nullable Integer innodbOnlineAlterLogMaxSize) {

            this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbPrintAllDeadlocks(@Nullable Boolean innodbPrintAllDeadlocks) {

            this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
            return this;
        }
        @CustomType.Setter
        public Builder innodbReadIoThreads(@Nullable Integer innodbReadIoThreads) {

            this.innodbReadIoThreads = innodbReadIoThreads;
            return this;
        }
        @CustomType.Setter
        public Builder innodbRollbackOnTimeout(@Nullable Boolean innodbRollbackOnTimeout) {

            this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder innodbThreadConcurrency(@Nullable Integer innodbThreadConcurrency) {

            this.innodbThreadConcurrency = innodbThreadConcurrency;
            return this;
        }
        @CustomType.Setter
        public Builder innodbWriteIoThreads(@Nullable Integer innodbWriteIoThreads) {

            this.innodbWriteIoThreads = innodbWriteIoThreads;
            return this;
        }
        @CustomType.Setter
        public Builder interactiveTimeout(@Nullable Integer interactiveTimeout) {

            this.interactiveTimeout = interactiveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder internalTmpMemStorageEngine(@Nullable String internalTmpMemStorageEngine) {

            this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
            return this;
        }
        @CustomType.Setter
        public Builder longQueryTime(@Nullable Double longQueryTime) {

            this.longQueryTime = longQueryTime;
            return this;
        }
        @CustomType.Setter
        public Builder maxAllowedPacket(@Nullable Integer maxAllowedPacket) {

            this.maxAllowedPacket = maxAllowedPacket;
            return this;
        }
        @CustomType.Setter
        public Builder maxHeapTableSize(@Nullable Integer maxHeapTableSize) {

            this.maxHeapTableSize = maxHeapTableSize;
            return this;
        }
        @CustomType.Setter
        public Builder netBufferLength(@Nullable Integer netBufferLength) {

            this.netBufferLength = netBufferLength;
            return this;
        }
        @CustomType.Setter
        public Builder netReadTimeout(@Nullable Integer netReadTimeout) {

            this.netReadTimeout = netReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder netWriteTimeout(@Nullable Integer netWriteTimeout) {

            this.netWriteTimeout = netWriteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder slowQueryLog(@Nullable Boolean slowQueryLog) {

            this.slowQueryLog = slowQueryLog;
            return this;
        }
        @CustomType.Setter
        public Builder sortBufferSize(@Nullable Integer sortBufferSize) {

            this.sortBufferSize = sortBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder sqlMode(@Nullable String sqlMode) {

            this.sqlMode = sqlMode;
            return this;
        }
        @CustomType.Setter
        public Builder sqlRequirePrimaryKey(@Nullable Boolean sqlRequirePrimaryKey) {

            this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder tmpTableSize(@Nullable Integer tmpTableSize) {

            this.tmpTableSize = tmpTableSize;
            return this;
        }
        @CustomType.Setter
        public Builder waitTimeout(@Nullable Integer waitTimeout) {

            this.waitTimeout = waitTimeout;
            return this;
        }
        public MySqlMysqlUserConfigMysql build() {
            final var _resultValue = new MySqlMysqlUserConfigMysql();
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.defaultTimeZone = defaultTimeZone;
            _resultValue.groupConcatMaxLen = groupConcatMaxLen;
            _resultValue.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            _resultValue.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
            _resultValue.innodbFlushNeighbors = innodbFlushNeighbors;
            _resultValue.innodbFtMinTokenSize = innodbFtMinTokenSize;
            _resultValue.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            _resultValue.innodbLockWaitTimeout = innodbLockWaitTimeout;
            _resultValue.innodbLogBufferSize = innodbLogBufferSize;
            _resultValue.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            _resultValue.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
            _resultValue.innodbReadIoThreads = innodbReadIoThreads;
            _resultValue.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            _resultValue.innodbThreadConcurrency = innodbThreadConcurrency;
            _resultValue.innodbWriteIoThreads = innodbWriteIoThreads;
            _resultValue.interactiveTimeout = interactiveTimeout;
            _resultValue.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
            _resultValue.longQueryTime = longQueryTime;
            _resultValue.maxAllowedPacket = maxAllowedPacket;
            _resultValue.maxHeapTableSize = maxHeapTableSize;
            _resultValue.netBufferLength = netBufferLength;
            _resultValue.netReadTimeout = netReadTimeout;
            _resultValue.netWriteTimeout = netWriteTimeout;
            _resultValue.slowQueryLog = slowQueryLog;
            _resultValue.sortBufferSize = sortBufferSize;
            _resultValue.sqlMode = sqlMode;
            _resultValue.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            _resultValue.tmpTableSize = tmpTableSize;
            _resultValue.waitTimeout = waitTimeout;
            return _resultValue;
        }
    }
}
