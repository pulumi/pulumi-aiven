// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenSearchOpensearchUserConfigAzureMigrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenSearchOpensearchUserConfigAzureMigrationArgs Empty = new OpenSearchOpensearchUserConfigAzureMigrationArgs();

    /**
     * Account name.
     * 
     */
    @Import(name="account", required=true)
    private Output<String> account;

    /**
     * @return Account name.
     * 
     */
    public Output<String> account() {
        return this.account;
    }

    /**
     * The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    @Import(name="basePath", required=true)
    private Output<String> basePath;

    /**
     * @return The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    public Output<String> basePath() {
        return this.basePath;
    }

    /**
     * Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    @Import(name="chunkSize")
    private @Nullable Output<String> chunkSize;

    /**
     * @return Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    public Optional<Output<String>> chunkSize() {
        return Optional.ofNullable(this.chunkSize);
    }

    /**
     * When set to true metadata files are stored in compressed format.
     * 
     */
    @Import(name="compress")
    private @Nullable Output<Boolean> compress;

    /**
     * @return When set to true metadata files are stored in compressed format.
     * 
     */
    public Optional<Output<Boolean>> compress() {
        return Optional.ofNullable(this.compress);
    }

    /**
     * Azure container name.
     * 
     */
    @Import(name="container", required=true)
    private Output<String> container;

    /**
     * @return Azure container name.
     * 
     */
    public Output<String> container() {
        return this.container;
    }

    /**
     * Defines the DNS suffix for Azure Storage endpoints.
     * 
     */
    @Import(name="endpointSuffix")
    private @Nullable Output<String> endpointSuffix;

    /**
     * @return Defines the DNS suffix for Azure Storage endpoints.
     * 
     */
    public Optional<Output<String>> endpointSuffix() {
        return Optional.ofNullable(this.endpointSuffix);
    }

    /**
     * Whether to restore aliases alongside their associated indexes. Default is true.
     * 
     */
    @Import(name="includeAliases")
    private @Nullable Output<Boolean> includeAliases;

    /**
     * @return Whether to restore aliases alongside their associated indexes. Default is true.
     * 
     */
    public Optional<Output<Boolean>> includeAliases() {
        return Optional.ofNullable(this.includeAliases);
    }

    /**
     * A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. Example: `metrics*,logs*,data-20240823`.
     * 
     */
    @Import(name="indices", required=true)
    private Output<String> indices;

    /**
     * @return A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. Example: `metrics*,logs*,data-20240823`.
     * 
     */
    public Output<String> indices() {
        return this.indices;
    }

    /**
     * Azure account secret key. One of key or sas_token should be specified.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Azure account secret key. One of key or sas_token should be specified.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * If true, restore the cluster state. Defaults to false.
     * 
     */
    @Import(name="restoreGlobalState")
    private @Nullable Output<Boolean> restoreGlobalState;

    /**
     * @return If true, restore the cluster state. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> restoreGlobalState() {
        return Optional.ofNullable(this.restoreGlobalState);
    }

    /**
     * A shared access signatures (SAS) token. One of key or sas_token should be specified.
     * 
     */
    @Import(name="sasToken")
    private @Nullable Output<String> sasToken;

    /**
     * @return A shared access signatures (SAS) token. One of key or sas_token should be specified.
     * 
     */
    public Optional<Output<String>> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }

    /**
     * The snapshot name to restore from.
     * 
     */
    @Import(name="snapshotName", required=true)
    private Output<String> snapshotName;

    /**
     * @return The snapshot name to restore from.
     * 
     */
    public Output<String> snapshotName() {
        return this.snapshotName;
    }

    private OpenSearchOpensearchUserConfigAzureMigrationArgs() {}

    private OpenSearchOpensearchUserConfigAzureMigrationArgs(OpenSearchOpensearchUserConfigAzureMigrationArgs $) {
        this.account = $.account;
        this.basePath = $.basePath;
        this.chunkSize = $.chunkSize;
        this.compress = $.compress;
        this.container = $.container;
        this.endpointSuffix = $.endpointSuffix;
        this.includeAliases = $.includeAliases;
        this.indices = $.indices;
        this.key = $.key;
        this.restoreGlobalState = $.restoreGlobalState;
        this.sasToken = $.sasToken;
        this.snapshotName = $.snapshotName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenSearchOpensearchUserConfigAzureMigrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenSearchOpensearchUserConfigAzureMigrationArgs $;

        public Builder() {
            $ = new OpenSearchOpensearchUserConfigAzureMigrationArgs();
        }

        public Builder(OpenSearchOpensearchUserConfigAzureMigrationArgs defaults) {
            $ = new OpenSearchOpensearchUserConfigAzureMigrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account Account name.
         * 
         * @return builder
         * 
         */
        public Builder account(Output<String> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account Account name.
         * 
         * @return builder
         * 
         */
        public Builder account(String account) {
            return account(Output.of(account));
        }

        /**
         * @param basePath The path to the repository data within its container. The value of this setting should not start or end with a /.
         * 
         * @return builder
         * 
         */
        public Builder basePath(Output<String> basePath) {
            $.basePath = basePath;
            return this;
        }

        /**
         * @param basePath The path to the repository data within its container. The value of this setting should not start or end with a /.
         * 
         * @return builder
         * 
         */
        public Builder basePath(String basePath) {
            return basePath(Output.of(basePath));
        }

        /**
         * @param chunkSize Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
         * 
         * @return builder
         * 
         */
        public Builder chunkSize(@Nullable Output<String> chunkSize) {
            $.chunkSize = chunkSize;
            return this;
        }

        /**
         * @param chunkSize Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
         * 
         * @return builder
         * 
         */
        public Builder chunkSize(String chunkSize) {
            return chunkSize(Output.of(chunkSize));
        }

        /**
         * @param compress When set to true metadata files are stored in compressed format.
         * 
         * @return builder
         * 
         */
        public Builder compress(@Nullable Output<Boolean> compress) {
            $.compress = compress;
            return this;
        }

        /**
         * @param compress When set to true metadata files are stored in compressed format.
         * 
         * @return builder
         * 
         */
        public Builder compress(Boolean compress) {
            return compress(Output.of(compress));
        }

        /**
         * @param container Azure container name.
         * 
         * @return builder
         * 
         */
        public Builder container(Output<String> container) {
            $.container = container;
            return this;
        }

        /**
         * @param container Azure container name.
         * 
         * @return builder
         * 
         */
        public Builder container(String container) {
            return container(Output.of(container));
        }

        /**
         * @param endpointSuffix Defines the DNS suffix for Azure Storage endpoints.
         * 
         * @return builder
         * 
         */
        public Builder endpointSuffix(@Nullable Output<String> endpointSuffix) {
            $.endpointSuffix = endpointSuffix;
            return this;
        }

        /**
         * @param endpointSuffix Defines the DNS suffix for Azure Storage endpoints.
         * 
         * @return builder
         * 
         */
        public Builder endpointSuffix(String endpointSuffix) {
            return endpointSuffix(Output.of(endpointSuffix));
        }

        /**
         * @param includeAliases Whether to restore aliases alongside their associated indexes. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder includeAliases(@Nullable Output<Boolean> includeAliases) {
            $.includeAliases = includeAliases;
            return this;
        }

        /**
         * @param includeAliases Whether to restore aliases alongside their associated indexes. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder includeAliases(Boolean includeAliases) {
            return includeAliases(Output.of(includeAliases));
        }

        /**
         * @param indices A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. Example: `metrics*,logs*,data-20240823`.
         * 
         * @return builder
         * 
         */
        public Builder indices(Output<String> indices) {
            $.indices = indices;
            return this;
        }

        /**
         * @param indices A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. Example: `metrics*,logs*,data-20240823`.
         * 
         * @return builder
         * 
         */
        public Builder indices(String indices) {
            return indices(Output.of(indices));
        }

        /**
         * @param key Azure account secret key. One of key or sas_token should be specified.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Azure account secret key. One of key or sas_token should be specified.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param restoreGlobalState If true, restore the cluster state. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder restoreGlobalState(@Nullable Output<Boolean> restoreGlobalState) {
            $.restoreGlobalState = restoreGlobalState;
            return this;
        }

        /**
         * @param restoreGlobalState If true, restore the cluster state. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder restoreGlobalState(Boolean restoreGlobalState) {
            return restoreGlobalState(Output.of(restoreGlobalState));
        }

        /**
         * @param sasToken A shared access signatures (SAS) token. One of key or sas_token should be specified.
         * 
         * @return builder
         * 
         */
        public Builder sasToken(@Nullable Output<String> sasToken) {
            $.sasToken = sasToken;
            return this;
        }

        /**
         * @param sasToken A shared access signatures (SAS) token. One of key or sas_token should be specified.
         * 
         * @return builder
         * 
         */
        public Builder sasToken(String sasToken) {
            return sasToken(Output.of(sasToken));
        }

        /**
         * @param snapshotName The snapshot name to restore from.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        /**
         * @param snapshotName The snapshot name to restore from.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        public OpenSearchOpensearchUserConfigAzureMigrationArgs build() {
            if ($.account == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigrationArgs", "account");
            }
            if ($.basePath == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigrationArgs", "basePath");
            }
            if ($.container == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigrationArgs", "container");
            }
            if ($.indices == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigrationArgs", "indices");
            }
            if ($.snapshotName == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigAzureMigrationArgs", "snapshotName");
            }
            return $;
        }
    }

}
