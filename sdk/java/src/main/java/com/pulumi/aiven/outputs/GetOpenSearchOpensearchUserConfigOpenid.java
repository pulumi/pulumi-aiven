// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOpenSearchOpensearchUserConfigOpenid {
    /**
     * @return The ID of the OpenID Connect client configured in your IdP. Required.
     * 
     */
    private String clientId;
    /**
     * @return The client secret of the OpenID Connect client configured in your IdP. Required.
     * 
     */
    private String clientSecret;
    /**
     * @return The URL of your IdP where the Security plugin can find the OpenID Connect metadata/configuration settings.
     * 
     */
    private String connectUrl;
    /**
     * @return Enables or disables OpenID Connect authentication for OpenSearch. When enabled, users can authenticate using OpenID Connect with an Identity Provider. The default value is `true`.
     * 
     */
    private Boolean enabled;
    /**
     * @return HTTP header name of the JWT token. Optional. Default is Authorization. The default value is `Authorization`.
     * 
     */
    private @Nullable String header;
    /**
     * @return The HTTP header that stores the token. Typically the Authorization header with the Bearer schema: Authorization: Bearer &lt;token&gt;. Optional. Default is Authorization.
     * 
     */
    private @Nullable String jwtHeader;
    /**
     * @return If the token is not transmitted in the HTTP header, but as an URL parameter, define the name of the parameter here. Optional.
     * 
     */
    private @Nullable String jwtUrlParameter;
    /**
     * @return The maximum number of unknown key IDs in the time frame. Default is 10. Optional. The default value is `10`.
     * 
     */
    private @Nullable Integer refreshRateLimitCount;
    /**
     * @return The time frame to use when checking the maximum number of unknown key IDs, in milliseconds. Optional.Default is 10000 (10 seconds). The default value is `10000`.
     * 
     */
    private @Nullable Integer refreshRateLimitTimeWindowMs;
    /**
     * @return The key in the JSON payload that stores the user’s roles. The value of this key must be a comma-separated list of roles. Required only if you want to use roles in the JWT.
     * 
     */
    private @Nullable String rolesKey;
    /**
     * @return The scope of the identity token issued by the IdP. Optional. Default is openid profile email address phone.
     * 
     */
    private @Nullable String scope;
    /**
     * @return The key in the JSON payload that stores the user’s name. If not defined, the subject registered claim is used. Most IdP providers use the preferred_username claim. Optional.
     * 
     */
    private @Nullable String subjectKey;

    private GetOpenSearchOpensearchUserConfigOpenid() {}
    /**
     * @return The ID of the OpenID Connect client configured in your IdP. Required.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The client secret of the OpenID Connect client configured in your IdP. Required.
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return The URL of your IdP where the Security plugin can find the OpenID Connect metadata/configuration settings.
     * 
     */
    public String connectUrl() {
        return this.connectUrl;
    }
    /**
     * @return Enables or disables OpenID Connect authentication for OpenSearch. When enabled, users can authenticate using OpenID Connect with an Identity Provider. The default value is `true`.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return HTTP header name of the JWT token. Optional. Default is Authorization. The default value is `Authorization`.
     * 
     */
    public Optional<String> header() {
        return Optional.ofNullable(this.header);
    }
    /**
     * @return The HTTP header that stores the token. Typically the Authorization header with the Bearer schema: Authorization: Bearer &lt;token&gt;. Optional. Default is Authorization.
     * 
     */
    public Optional<String> jwtHeader() {
        return Optional.ofNullable(this.jwtHeader);
    }
    /**
     * @return If the token is not transmitted in the HTTP header, but as an URL parameter, define the name of the parameter here. Optional.
     * 
     */
    public Optional<String> jwtUrlParameter() {
        return Optional.ofNullable(this.jwtUrlParameter);
    }
    /**
     * @return The maximum number of unknown key IDs in the time frame. Default is 10. Optional. The default value is `10`.
     * 
     */
    public Optional<Integer> refreshRateLimitCount() {
        return Optional.ofNullable(this.refreshRateLimitCount);
    }
    /**
     * @return The time frame to use when checking the maximum number of unknown key IDs, in milliseconds. Optional.Default is 10000 (10 seconds). The default value is `10000`.
     * 
     */
    public Optional<Integer> refreshRateLimitTimeWindowMs() {
        return Optional.ofNullable(this.refreshRateLimitTimeWindowMs);
    }
    /**
     * @return The key in the JSON payload that stores the user’s roles. The value of this key must be a comma-separated list of roles. Required only if you want to use roles in the JWT.
     * 
     */
    public Optional<String> rolesKey() {
        return Optional.ofNullable(this.rolesKey);
    }
    /**
     * @return The scope of the identity token issued by the IdP. Optional. Default is openid profile email address phone.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The key in the JSON payload that stores the user’s name. If not defined, the subject registered claim is used. Most IdP providers use the preferred_username claim. Optional.
     * 
     */
    public Optional<String> subjectKey() {
        return Optional.ofNullable(this.subjectKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOpenSearchOpensearchUserConfigOpenid defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientId;
        private String clientSecret;
        private String connectUrl;
        private Boolean enabled;
        private @Nullable String header;
        private @Nullable String jwtHeader;
        private @Nullable String jwtUrlParameter;
        private @Nullable Integer refreshRateLimitCount;
        private @Nullable Integer refreshRateLimitTimeWindowMs;
        private @Nullable String rolesKey;
        private @Nullable String scope;
        private @Nullable String subjectKey;
        public Builder() {}
        public Builder(GetOpenSearchOpensearchUserConfigOpenid defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.connectUrl = defaults.connectUrl;
    	      this.enabled = defaults.enabled;
    	      this.header = defaults.header;
    	      this.jwtHeader = defaults.jwtHeader;
    	      this.jwtUrlParameter = defaults.jwtUrlParameter;
    	      this.refreshRateLimitCount = defaults.refreshRateLimitCount;
    	      this.refreshRateLimitTimeWindowMs = defaults.refreshRateLimitTimeWindowMs;
    	      this.rolesKey = defaults.rolesKey;
    	      this.scope = defaults.scope;
    	      this.subjectKey = defaults.subjectKey;
        }

        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetOpenSearchOpensearchUserConfigOpenid", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("GetOpenSearchOpensearchUserConfigOpenid", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder connectUrl(String connectUrl) {
            if (connectUrl == null) {
              throw new MissingRequiredPropertyException("GetOpenSearchOpensearchUserConfigOpenid", "connectUrl");
            }
            this.connectUrl = connectUrl;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetOpenSearchOpensearchUserConfigOpenid", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder header(@Nullable String header) {

            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder jwtHeader(@Nullable String jwtHeader) {

            this.jwtHeader = jwtHeader;
            return this;
        }
        @CustomType.Setter
        public Builder jwtUrlParameter(@Nullable String jwtUrlParameter) {

            this.jwtUrlParameter = jwtUrlParameter;
            return this;
        }
        @CustomType.Setter
        public Builder refreshRateLimitCount(@Nullable Integer refreshRateLimitCount) {

            this.refreshRateLimitCount = refreshRateLimitCount;
            return this;
        }
        @CustomType.Setter
        public Builder refreshRateLimitTimeWindowMs(@Nullable Integer refreshRateLimitTimeWindowMs) {

            this.refreshRateLimitTimeWindowMs = refreshRateLimitTimeWindowMs;
            return this;
        }
        @CustomType.Setter
        public Builder rolesKey(@Nullable String rolesKey) {

            this.rolesKey = rolesKey;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder subjectKey(@Nullable String subjectKey) {

            this.subjectKey = subjectKey;
            return this;
        }
        public GetOpenSearchOpensearchUserConfigOpenid build() {
            final var _resultValue = new GetOpenSearchOpensearchUserConfigOpenid();
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.connectUrl = connectUrl;
            _resultValue.enabled = enabled;
            _resultValue.header = header;
            _resultValue.jwtHeader = jwtHeader;
            _resultValue.jwtUrlParameter = jwtUrlParameter;
            _resultValue.refreshRateLimitCount = refreshRateLimitCount;
            _resultValue.refreshRateLimitTimeWindowMs = refreshRateLimitTimeWindowMs;
            _resultValue.rolesKey = rolesKey;
            _resultValue.scope = scope;
            _resultValue.subjectKey = subjectKey;
            return _resultValue;
        }
    }
}
