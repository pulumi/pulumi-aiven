// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.RedisRedisUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigMigrationArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigPublicAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RedisRedisUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RedisRedisUserConfigArgs Empty = new RedisRedisUserConfigArgs();

    @Import(name="additionalBackupRegions")
    private @Nullable Output<String> additionalBackupRegions;

    public Optional<Output<String>> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }

    @Import(name="ipFilterObjects")
    private @Nullable Output<List<RedisRedisUserConfigIpFilterObjectArgs>> ipFilterObjects;

    public Optional<Output<List<RedisRedisUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    @Import(name="migration")
    private @Nullable Output<RedisRedisUserConfigMigrationArgs> migration;

    public Optional<Output<RedisRedisUserConfigMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    @Import(name="privateAccess")
    private @Nullable Output<RedisRedisUserConfigPrivateAccessArgs> privateAccess;

    public Optional<Output<RedisRedisUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    @Import(name="privatelinkAccess")
    private @Nullable Output<RedisRedisUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    public Optional<Output<RedisRedisUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    @Import(name="publicAccess")
    private @Nullable Output<RedisRedisUserConfigPublicAccessArgs> publicAccess;

    public Optional<Output<RedisRedisUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    @Import(name="recoveryBasebackupName")
    private @Nullable Output<String> recoveryBasebackupName;

    public Optional<Output<String>> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }

    @Import(name="redisAclChannelsDefault")
    private @Nullable Output<String> redisAclChannelsDefault;

    public Optional<Output<String>> redisAclChannelsDefault() {
        return Optional.ofNullable(this.redisAclChannelsDefault);
    }

    @Import(name="redisIoThreads")
    private @Nullable Output<Integer> redisIoThreads;

    public Optional<Output<Integer>> redisIoThreads() {
        return Optional.ofNullable(this.redisIoThreads);
    }

    @Import(name="redisLfuDecayTime")
    private @Nullable Output<Integer> redisLfuDecayTime;

    public Optional<Output<Integer>> redisLfuDecayTime() {
        return Optional.ofNullable(this.redisLfuDecayTime);
    }

    @Import(name="redisLfuLogFactor")
    private @Nullable Output<Integer> redisLfuLogFactor;

    public Optional<Output<Integer>> redisLfuLogFactor() {
        return Optional.ofNullable(this.redisLfuLogFactor);
    }

    @Import(name="redisMaxmemoryPolicy")
    private @Nullable Output<String> redisMaxmemoryPolicy;

    public Optional<Output<String>> redisMaxmemoryPolicy() {
        return Optional.ofNullable(this.redisMaxmemoryPolicy);
    }

    @Import(name="redisNotifyKeyspaceEvents")
    private @Nullable Output<String> redisNotifyKeyspaceEvents;

    public Optional<Output<String>> redisNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.redisNotifyKeyspaceEvents);
    }

    @Import(name="redisNumberOfDatabases")
    private @Nullable Output<Integer> redisNumberOfDatabases;

    public Optional<Output<Integer>> redisNumberOfDatabases() {
        return Optional.ofNullable(this.redisNumberOfDatabases);
    }

    @Import(name="redisPersistence")
    private @Nullable Output<String> redisPersistence;

    public Optional<Output<String>> redisPersistence() {
        return Optional.ofNullable(this.redisPersistence);
    }

    @Import(name="redisPubsubClientOutputBufferLimit")
    private @Nullable Output<Integer> redisPubsubClientOutputBufferLimit;

    public Optional<Output<Integer>> redisPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.redisPubsubClientOutputBufferLimit);
    }

    @Import(name="redisSsl")
    private @Nullable Output<Boolean> redisSsl;

    public Optional<Output<Boolean>> redisSsl() {
        return Optional.ofNullable(this.redisSsl);
    }

    @Import(name="redisTimeout")
    private @Nullable Output<Integer> redisTimeout;

    public Optional<Output<Integer>> redisTimeout() {
        return Optional.ofNullable(this.redisTimeout);
    }

    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    private RedisRedisUserConfigArgs() {}

    private RedisRedisUserConfigArgs(RedisRedisUserConfigArgs $) {
        this.additionalBackupRegions = $.additionalBackupRegions;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.migration = $.migration;
        this.privateAccess = $.privateAccess;
        this.privatelinkAccess = $.privatelinkAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.recoveryBasebackupName = $.recoveryBasebackupName;
        this.redisAclChannelsDefault = $.redisAclChannelsDefault;
        this.redisIoThreads = $.redisIoThreads;
        this.redisLfuDecayTime = $.redisLfuDecayTime;
        this.redisLfuLogFactor = $.redisLfuLogFactor;
        this.redisMaxmemoryPolicy = $.redisMaxmemoryPolicy;
        this.redisNotifyKeyspaceEvents = $.redisNotifyKeyspaceEvents;
        this.redisNumberOfDatabases = $.redisNumberOfDatabases;
        this.redisPersistence = $.redisPersistence;
        this.redisPubsubClientOutputBufferLimit = $.redisPubsubClientOutputBufferLimit;
        this.redisSsl = $.redisSsl;
        this.redisTimeout = $.redisTimeout;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.staticIps = $.staticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedisRedisUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedisRedisUserConfigArgs $;

        public Builder() {
            $ = new RedisRedisUserConfigArgs();
        }

        public Builder(RedisRedisUserConfigArgs defaults) {
            $ = new RedisRedisUserConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder additionalBackupRegions(@Nullable Output<String> additionalBackupRegions) {
            $.additionalBackupRegions = additionalBackupRegions;
            return this;
        }

        public Builder additionalBackupRegions(String additionalBackupRegions) {
            return additionalBackupRegions(Output.of(additionalBackupRegions));
        }

        public Builder ipFilterObjects(@Nullable Output<List<RedisRedisUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        public Builder ipFilterObjects(List<RedisRedisUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        public Builder ipFilterObjects(RedisRedisUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        public Builder migration(@Nullable Output<RedisRedisUserConfigMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        public Builder migration(RedisRedisUserConfigMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        public Builder privateAccess(@Nullable Output<RedisRedisUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        public Builder privateAccess(RedisRedisUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        public Builder privatelinkAccess(@Nullable Output<RedisRedisUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        public Builder privatelinkAccess(RedisRedisUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        public Builder publicAccess(@Nullable Output<RedisRedisUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        public Builder publicAccess(RedisRedisUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        public Builder recoveryBasebackupName(@Nullable Output<String> recoveryBasebackupName) {
            $.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }

        public Builder recoveryBasebackupName(String recoveryBasebackupName) {
            return recoveryBasebackupName(Output.of(recoveryBasebackupName));
        }

        public Builder redisAclChannelsDefault(@Nullable Output<String> redisAclChannelsDefault) {
            $.redisAclChannelsDefault = redisAclChannelsDefault;
            return this;
        }

        public Builder redisAclChannelsDefault(String redisAclChannelsDefault) {
            return redisAclChannelsDefault(Output.of(redisAclChannelsDefault));
        }

        public Builder redisIoThreads(@Nullable Output<Integer> redisIoThreads) {
            $.redisIoThreads = redisIoThreads;
            return this;
        }

        public Builder redisIoThreads(Integer redisIoThreads) {
            return redisIoThreads(Output.of(redisIoThreads));
        }

        public Builder redisLfuDecayTime(@Nullable Output<Integer> redisLfuDecayTime) {
            $.redisLfuDecayTime = redisLfuDecayTime;
            return this;
        }

        public Builder redisLfuDecayTime(Integer redisLfuDecayTime) {
            return redisLfuDecayTime(Output.of(redisLfuDecayTime));
        }

        public Builder redisLfuLogFactor(@Nullable Output<Integer> redisLfuLogFactor) {
            $.redisLfuLogFactor = redisLfuLogFactor;
            return this;
        }

        public Builder redisLfuLogFactor(Integer redisLfuLogFactor) {
            return redisLfuLogFactor(Output.of(redisLfuLogFactor));
        }

        public Builder redisMaxmemoryPolicy(@Nullable Output<String> redisMaxmemoryPolicy) {
            $.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            return this;
        }

        public Builder redisMaxmemoryPolicy(String redisMaxmemoryPolicy) {
            return redisMaxmemoryPolicy(Output.of(redisMaxmemoryPolicy));
        }

        public Builder redisNotifyKeyspaceEvents(@Nullable Output<String> redisNotifyKeyspaceEvents) {
            $.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            return this;
        }

        public Builder redisNotifyKeyspaceEvents(String redisNotifyKeyspaceEvents) {
            return redisNotifyKeyspaceEvents(Output.of(redisNotifyKeyspaceEvents));
        }

        public Builder redisNumberOfDatabases(@Nullable Output<Integer> redisNumberOfDatabases) {
            $.redisNumberOfDatabases = redisNumberOfDatabases;
            return this;
        }

        public Builder redisNumberOfDatabases(Integer redisNumberOfDatabases) {
            return redisNumberOfDatabases(Output.of(redisNumberOfDatabases));
        }

        public Builder redisPersistence(@Nullable Output<String> redisPersistence) {
            $.redisPersistence = redisPersistence;
            return this;
        }

        public Builder redisPersistence(String redisPersistence) {
            return redisPersistence(Output.of(redisPersistence));
        }

        public Builder redisPubsubClientOutputBufferLimit(@Nullable Output<Integer> redisPubsubClientOutputBufferLimit) {
            $.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            return this;
        }

        public Builder redisPubsubClientOutputBufferLimit(Integer redisPubsubClientOutputBufferLimit) {
            return redisPubsubClientOutputBufferLimit(Output.of(redisPubsubClientOutputBufferLimit));
        }

        public Builder redisSsl(@Nullable Output<Boolean> redisSsl) {
            $.redisSsl = redisSsl;
            return this;
        }

        public Builder redisSsl(Boolean redisSsl) {
            return redisSsl(Output.of(redisSsl));
        }

        public Builder redisTimeout(@Nullable Output<Integer> redisTimeout) {
            $.redisTimeout = redisTimeout;
            return this;
        }

        public Builder redisTimeout(Integer redisTimeout) {
            return redisTimeout(Output.of(redisTimeout));
        }

        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        public RedisRedisUserConfigArgs build() {
            return $;
        }
    }

}
