// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.RedisRedisUserConfigMigrationArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigPublicAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RedisRedisUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RedisRedisUserConfigArgs Empty = new RedisRedisUserConfigArgs();

    /**
     * IP filter
     * 
     */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return IP filter
     * 
     */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Migrate data from existing server
     * 
     */
    @Import(name="migration")
    private @Nullable Output<RedisRedisUserConfigMigrationArgs> migration;

    /**
     * @return Migrate data from existing server
     * 
     */
    public Optional<Output<RedisRedisUserConfigMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    /**
     * Allow access to selected service ports from private networks
     * 
     */
    @Import(name="privateAccess")
    private @Nullable Output<RedisRedisUserConfigPrivateAccessArgs> privateAccess;

    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<Output<RedisRedisUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    /**
     * Allow access to selected service components through Privatelink
     * 
     */
    @Import(name="privatelinkAccess")
    private @Nullable Output<RedisRedisUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<Output<RedisRedisUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    /**
     * Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<RedisRedisUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<RedisRedisUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Name of the basebackup to restore in forked service
     * 
     */
    @Import(name="recoveryBasebackupName")
    private @Nullable Output<String> recoveryBasebackupName;

    /**
     * @return Name of the basebackup to restore in forked service
     * 
     */
    public Optional<Output<String>> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }

    /**
     * Default ACL for pub/sub channels used when Redis user is created
     * 
     */
    @Import(name="redisAclChannelsDefault")
    private @Nullable Output<String> redisAclChannelsDefault;

    /**
     * @return Default ACL for pub/sub channels used when Redis user is created
     * 
     */
    public Optional<Output<String>> redisAclChannelsDefault() {
        return Optional.ofNullable(this.redisAclChannelsDefault);
    }

    /**
     * Redis IO thread count
     * 
     */
    @Import(name="redisIoThreads")
    private @Nullable Output<String> redisIoThreads;

    /**
     * @return Redis IO thread count
     * 
     */
    public Optional<Output<String>> redisIoThreads() {
        return Optional.ofNullable(this.redisIoThreads);
    }

    /**
     * LFU maxmemory-policy counter decay time in minutes
     * 
     */
    @Import(name="redisLfuDecayTime")
    private @Nullable Output<String> redisLfuDecayTime;

    /**
     * @return LFU maxmemory-policy counter decay time in minutes
     * 
     */
    public Optional<Output<String>> redisLfuDecayTime() {
        return Optional.ofNullable(this.redisLfuDecayTime);
    }

    /**
     * Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies
     * 
     */
    @Import(name="redisLfuLogFactor")
    private @Nullable Output<String> redisLfuLogFactor;

    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies
     * 
     */
    public Optional<Output<String>> redisLfuLogFactor() {
        return Optional.ofNullable(this.redisLfuLogFactor);
    }

    /**
     * Redis maxmemory-policy
     * 
     */
    @Import(name="redisMaxmemoryPolicy")
    private @Nullable Output<String> redisMaxmemoryPolicy;

    /**
     * @return Redis maxmemory-policy
     * 
     */
    public Optional<Output<String>> redisMaxmemoryPolicy() {
        return Optional.ofNullable(this.redisMaxmemoryPolicy);
    }

    /**
     * Set notify-keyspace-events option
     * 
     */
    @Import(name="redisNotifyKeyspaceEvents")
    private @Nullable Output<String> redisNotifyKeyspaceEvents;

    /**
     * @return Set notify-keyspace-events option
     * 
     */
    public Optional<Output<String>> redisNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.redisNotifyKeyspaceEvents);
    }

    /**
     * Number of redis databases
     * 
     */
    @Import(name="redisNumberOfDatabases")
    private @Nullable Output<String> redisNumberOfDatabases;

    /**
     * @return Number of redis databases
     * 
     */
    public Optional<Output<String>> redisNumberOfDatabases() {
        return Optional.ofNullable(this.redisNumberOfDatabases);
    }

    /**
     * Redis persistence
     * 
     */
    @Import(name="redisPersistence")
    private @Nullable Output<String> redisPersistence;

    /**
     * @return Redis persistence
     * 
     */
    public Optional<Output<String>> redisPersistence() {
        return Optional.ofNullable(this.redisPersistence);
    }

    /**
     * Pub/sub client output buffer hard limit in MB
     * 
     */
    @Import(name="redisPubsubClientOutputBufferLimit")
    private @Nullable Output<String> redisPubsubClientOutputBufferLimit;

    /**
     * @return Pub/sub client output buffer hard limit in MB
     * 
     */
    public Optional<Output<String>> redisPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.redisPubsubClientOutputBufferLimit);
    }

    /**
     * Require SSL to access Redis
     * 
     */
    @Import(name="redisSsl")
    private @Nullable Output<String> redisSsl;

    /**
     * @return Require SSL to access Redis
     * 
     */
    public Optional<Output<String>> redisSsl() {
        return Optional.ofNullable(this.redisSsl);
    }

    /**
     * Redis idle connection timeout in seconds
     * 
     */
    @Import(name="redisTimeout")
    private @Nullable Output<String> redisTimeout;

    /**
     * @return Redis idle connection timeout in seconds
     * 
     */
    public Optional<Output<String>> redisTimeout() {
        return Optional.ofNullable(this.redisTimeout);
    }

    /**
     * Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    /**
     * Static IP addresses
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<String> staticIps;

    /**
     * @return Static IP addresses
     * 
     */
    public Optional<Output<String>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    private RedisRedisUserConfigArgs() {}

    private RedisRedisUserConfigArgs(RedisRedisUserConfigArgs $) {
        this.ipFilters = $.ipFilters;
        this.migration = $.migration;
        this.privateAccess = $.privateAccess;
        this.privatelinkAccess = $.privatelinkAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.recoveryBasebackupName = $.recoveryBasebackupName;
        this.redisAclChannelsDefault = $.redisAclChannelsDefault;
        this.redisIoThreads = $.redisIoThreads;
        this.redisLfuDecayTime = $.redisLfuDecayTime;
        this.redisLfuLogFactor = $.redisLfuLogFactor;
        this.redisMaxmemoryPolicy = $.redisMaxmemoryPolicy;
        this.redisNotifyKeyspaceEvents = $.redisNotifyKeyspaceEvents;
        this.redisNumberOfDatabases = $.redisNumberOfDatabases;
        this.redisPersistence = $.redisPersistence;
        this.redisPubsubClientOutputBufferLimit = $.redisPubsubClientOutputBufferLimit;
        this.redisSsl = $.redisSsl;
        this.redisTimeout = $.redisTimeout;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.staticIps = $.staticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedisRedisUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedisRedisUserConfigArgs $;

        public Builder() {
            $ = new RedisRedisUserConfigArgs();
        }

        public Builder(RedisRedisUserConfigArgs defaults) {
            $ = new RedisRedisUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipFilters IP filter
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters IP filter
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters IP filter
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(@Nullable Output<RedisRedisUserConfigMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(RedisRedisUserConfigMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(@Nullable Output<RedisRedisUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(RedisRedisUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(@Nullable Output<RedisRedisUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(RedisRedisUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<RedisRedisUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(RedisRedisUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(@Nullable Output<String> recoveryBasebackupName) {
            $.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(String recoveryBasebackupName) {
            return recoveryBasebackupName(Output.of(recoveryBasebackupName));
        }

        /**
         * @param redisAclChannelsDefault Default ACL for pub/sub channels used when Redis user is created
         * 
         * @return builder
         * 
         */
        public Builder redisAclChannelsDefault(@Nullable Output<String> redisAclChannelsDefault) {
            $.redisAclChannelsDefault = redisAclChannelsDefault;
            return this;
        }

        /**
         * @param redisAclChannelsDefault Default ACL for pub/sub channels used when Redis user is created
         * 
         * @return builder
         * 
         */
        public Builder redisAclChannelsDefault(String redisAclChannelsDefault) {
            return redisAclChannelsDefault(Output.of(redisAclChannelsDefault));
        }

        /**
         * @param redisIoThreads Redis IO thread count
         * 
         * @return builder
         * 
         */
        public Builder redisIoThreads(@Nullable Output<String> redisIoThreads) {
            $.redisIoThreads = redisIoThreads;
            return this;
        }

        /**
         * @param redisIoThreads Redis IO thread count
         * 
         * @return builder
         * 
         */
        public Builder redisIoThreads(String redisIoThreads) {
            return redisIoThreads(Output.of(redisIoThreads));
        }

        /**
         * @param redisLfuDecayTime LFU maxmemory-policy counter decay time in minutes
         * 
         * @return builder
         * 
         */
        public Builder redisLfuDecayTime(@Nullable Output<String> redisLfuDecayTime) {
            $.redisLfuDecayTime = redisLfuDecayTime;
            return this;
        }

        /**
         * @param redisLfuDecayTime LFU maxmemory-policy counter decay time in minutes
         * 
         * @return builder
         * 
         */
        public Builder redisLfuDecayTime(String redisLfuDecayTime) {
            return redisLfuDecayTime(Output.of(redisLfuDecayTime));
        }

        /**
         * @param redisLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies
         * 
         * @return builder
         * 
         */
        public Builder redisLfuLogFactor(@Nullable Output<String> redisLfuLogFactor) {
            $.redisLfuLogFactor = redisLfuLogFactor;
            return this;
        }

        /**
         * @param redisLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies
         * 
         * @return builder
         * 
         */
        public Builder redisLfuLogFactor(String redisLfuLogFactor) {
            return redisLfuLogFactor(Output.of(redisLfuLogFactor));
        }

        /**
         * @param redisMaxmemoryPolicy Redis maxmemory-policy
         * 
         * @return builder
         * 
         */
        public Builder redisMaxmemoryPolicy(@Nullable Output<String> redisMaxmemoryPolicy) {
            $.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            return this;
        }

        /**
         * @param redisMaxmemoryPolicy Redis maxmemory-policy
         * 
         * @return builder
         * 
         */
        public Builder redisMaxmemoryPolicy(String redisMaxmemoryPolicy) {
            return redisMaxmemoryPolicy(Output.of(redisMaxmemoryPolicy));
        }

        /**
         * @param redisNotifyKeyspaceEvents Set notify-keyspace-events option
         * 
         * @return builder
         * 
         */
        public Builder redisNotifyKeyspaceEvents(@Nullable Output<String> redisNotifyKeyspaceEvents) {
            $.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            return this;
        }

        /**
         * @param redisNotifyKeyspaceEvents Set notify-keyspace-events option
         * 
         * @return builder
         * 
         */
        public Builder redisNotifyKeyspaceEvents(String redisNotifyKeyspaceEvents) {
            return redisNotifyKeyspaceEvents(Output.of(redisNotifyKeyspaceEvents));
        }

        /**
         * @param redisNumberOfDatabases Number of redis databases
         * 
         * @return builder
         * 
         */
        public Builder redisNumberOfDatabases(@Nullable Output<String> redisNumberOfDatabases) {
            $.redisNumberOfDatabases = redisNumberOfDatabases;
            return this;
        }

        /**
         * @param redisNumberOfDatabases Number of redis databases
         * 
         * @return builder
         * 
         */
        public Builder redisNumberOfDatabases(String redisNumberOfDatabases) {
            return redisNumberOfDatabases(Output.of(redisNumberOfDatabases));
        }

        /**
         * @param redisPersistence Redis persistence
         * 
         * @return builder
         * 
         */
        public Builder redisPersistence(@Nullable Output<String> redisPersistence) {
            $.redisPersistence = redisPersistence;
            return this;
        }

        /**
         * @param redisPersistence Redis persistence
         * 
         * @return builder
         * 
         */
        public Builder redisPersistence(String redisPersistence) {
            return redisPersistence(Output.of(redisPersistence));
        }

        /**
         * @param redisPubsubClientOutputBufferLimit Pub/sub client output buffer hard limit in MB
         * 
         * @return builder
         * 
         */
        public Builder redisPubsubClientOutputBufferLimit(@Nullable Output<String> redisPubsubClientOutputBufferLimit) {
            $.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            return this;
        }

        /**
         * @param redisPubsubClientOutputBufferLimit Pub/sub client output buffer hard limit in MB
         * 
         * @return builder
         * 
         */
        public Builder redisPubsubClientOutputBufferLimit(String redisPubsubClientOutputBufferLimit) {
            return redisPubsubClientOutputBufferLimit(Output.of(redisPubsubClientOutputBufferLimit));
        }

        /**
         * @param redisSsl Require SSL to access Redis
         * 
         * @return builder
         * 
         */
        public Builder redisSsl(@Nullable Output<String> redisSsl) {
            $.redisSsl = redisSsl;
            return this;
        }

        /**
         * @param redisSsl Require SSL to access Redis
         * 
         * @return builder
         * 
         */
        public Builder redisSsl(String redisSsl) {
            return redisSsl(Output.of(redisSsl));
        }

        /**
         * @param redisTimeout Redis idle connection timeout in seconds
         * 
         * @return builder
         * 
         */
        public Builder redisTimeout(@Nullable Output<String> redisTimeout) {
            $.redisTimeout = redisTimeout;
            return this;
        }

        /**
         * @param redisTimeout Redis idle connection timeout in seconds
         * 
         * @return builder
         * 
         */
        public Builder redisTimeout(String redisTimeout) {
            return redisTimeout(Output.of(redisTimeout));
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        /**
         * @param staticIps Static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<String> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticIps(String staticIps) {
            return staticIps(Output.of(staticIps));
        }

        public RedisRedisUserConfigArgs build() {
            return $;
        }
    }

}
