// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.RedisRedisUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigMigrationArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.RedisRedisUserConfigPublicAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RedisRedisUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RedisRedisUserConfigArgs Empty = new RedisRedisUserConfigArgs();

    /**
     * Additional Cloud Regions for Backup Replication.
     * 
     */
    @Import(name="additionalBackupRegions")
    private @Nullable Output<String> additionalBackupRegions;

    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<Output<String>> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }

    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
     * 
     */
    @Import(name="backupHour")
    private @Nullable Output<Integer> backupHour;

    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
     * 
     */
    public Optional<Output<Integer>> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }

    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
     * 
     */
    @Import(name="backupMinute")
    private @Nullable Output<Integer> backupMinute;

    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
     * 
     */
    public Optional<Output<Integer>> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    @Import(name="ipFilterObjects")
    private @Nullable Output<List<RedisRedisUserConfigIpFilterObjectArgs>> ipFilterObjects;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public Optional<Output<List<RedisRedisUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Migrate data from existing server
     * 
     */
    @Import(name="migration")
    private @Nullable Output<RedisRedisUserConfigMigrationArgs> migration;

    /**
     * @return Migrate data from existing server
     * 
     */
    public Optional<Output<RedisRedisUserConfigMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    /**
     * Allow access to selected service ports from private networks
     * 
     */
    @Import(name="privateAccess")
    private @Nullable Output<RedisRedisUserConfigPrivateAccessArgs> privateAccess;

    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<Output<RedisRedisUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    /**
     * Allow access to selected service components through Privatelink
     * 
     */
    @Import(name="privatelinkAccess")
    private @Nullable Output<RedisRedisUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<Output<RedisRedisUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    /**
     * Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<RedisRedisUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<RedisRedisUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    @Import(name="recoveryBasebackupName")
    private @Nullable Output<String> recoveryBasebackupName;

    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    public Optional<Output<String>> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }

    /**
     * Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
     * 
     */
    @Import(name="redisAclChannelsDefault")
    private @Nullable Output<String> redisAclChannelsDefault;

    /**
     * @return Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
     * 
     */
    public Optional<Output<String>> redisAclChannelsDefault() {
        return Optional.ofNullable(this.redisAclChannelsDefault);
    }

    /**
     * Set Redis IO thread count. Changing this will cause a restart of the Redis service. Example: `1`.
     * 
     */
    @Import(name="redisIoThreads")
    private @Nullable Output<Integer> redisIoThreads;

    /**
     * @return Set Redis IO thread count. Changing this will cause a restart of the Redis service. Example: `1`.
     * 
     */
    public Optional<Output<Integer>> redisIoThreads() {
        return Optional.ofNullable(this.redisIoThreads);
    }

    /**
     * LFU maxmemory-policy counter decay time in minutes. Default: `1`.
     * 
     */
    @Import(name="redisLfuDecayTime")
    private @Nullable Output<Integer> redisLfuDecayTime;

    /**
     * @return LFU maxmemory-policy counter decay time in minutes. Default: `1`.
     * 
     */
    public Optional<Output<Integer>> redisLfuDecayTime() {
        return Optional.ofNullable(this.redisLfuDecayTime);
    }

    /**
     * Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
     * 
     */
    @Import(name="redisLfuLogFactor")
    private @Nullable Output<Integer> redisLfuLogFactor;

    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
     * 
     */
    public Optional<Output<Integer>> redisLfuLogFactor() {
        return Optional.ofNullable(this.redisLfuLogFactor);
    }

    /**
     * Enum: `allkeys-lfu`, `allkeys-lru`, `allkeys-random`, `noeviction`, `volatile-lfu`, `volatile-lru`, `volatile-random`, `volatile-ttl`. Redis maxmemory-policy. Default: `noeviction`.
     * 
     */
    @Import(name="redisMaxmemoryPolicy")
    private @Nullable Output<String> redisMaxmemoryPolicy;

    /**
     * @return Enum: `allkeys-lfu`, `allkeys-lru`, `allkeys-random`, `noeviction`, `volatile-lfu`, `volatile-lru`, `volatile-random`, `volatile-ttl`. Redis maxmemory-policy. Default: `noeviction`.
     * 
     */
    public Optional<Output<String>> redisMaxmemoryPolicy() {
        return Optional.ofNullable(this.redisMaxmemoryPolicy);
    }

    /**
     * Set notify-keyspace-events option.
     * 
     */
    @Import(name="redisNotifyKeyspaceEvents")
    private @Nullable Output<String> redisNotifyKeyspaceEvents;

    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    public Optional<Output<String>> redisNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.redisNotifyKeyspaceEvents);
    }

    /**
     * Set number of Redis databases. Changing this will cause a restart of the Redis service. Example: `16`.
     * 
     */
    @Import(name="redisNumberOfDatabases")
    private @Nullable Output<Integer> redisNumberOfDatabases;

    /**
     * @return Set number of Redis databases. Changing this will cause a restart of the Redis service. Example: `16`.
     * 
     */
    public Optional<Output<Integer>> redisNumberOfDatabases() {
        return Optional.ofNullable(this.redisNumberOfDatabases);
    }

    /**
     * Enum: `off`, `rdb`. When persistence is `rdb`, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is `off`, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    @Import(name="redisPersistence")
    private @Nullable Output<String> redisPersistence;

    /**
     * @return Enum: `off`, `rdb`. When persistence is `rdb`, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is `off`, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    public Optional<Output<String>> redisPersistence() {
        return Optional.ofNullable(this.redisPersistence);
    }

    /**
     * Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
     * 
     */
    @Import(name="redisPubsubClientOutputBufferLimit")
    private @Nullable Output<Integer> redisPubsubClientOutputBufferLimit;

    /**
     * @return Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
     * 
     */
    public Optional<Output<Integer>> redisPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.redisPubsubClientOutputBufferLimit);
    }

    /**
     * Require SSL to access Redis. Default: `true`.
     * 
     */
    @Import(name="redisSsl")
    private @Nullable Output<Boolean> redisSsl;

    /**
     * @return Require SSL to access Redis. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> redisSsl() {
        return Optional.ofNullable(this.redisSsl);
    }

    /**
     * Redis idle connection timeout in seconds. Default: `300`.
     * 
     */
    @Import(name="redisTimeout")
    private @Nullable Output<Integer> redisTimeout;

    /**
     * @return Redis idle connection timeout in seconds. Default: `300`.
     * 
     */
    public Optional<Output<Integer>> redisTimeout() {
        return Optional.ofNullable(this.redisTimeout);
    }

    /**
     * Enum: `7.0`, and newer. Redis major version.
     * 
     */
    @Import(name="redisVersion")
    private @Nullable Output<String> redisVersion;

    /**
     * @return Enum: `7.0`, and newer. Redis major version.
     * 
     */
    public Optional<Output<String>> redisVersion() {
        return Optional.ofNullable(this.redisVersion);
    }

    /**
     * Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    /**
     * Use static public IP addresses.
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    private RedisRedisUserConfigArgs() {}

    private RedisRedisUserConfigArgs(RedisRedisUserConfigArgs $) {
        this.additionalBackupRegions = $.additionalBackupRegions;
        this.backupHour = $.backupHour;
        this.backupMinute = $.backupMinute;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.migration = $.migration;
        this.privateAccess = $.privateAccess;
        this.privatelinkAccess = $.privatelinkAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.recoveryBasebackupName = $.recoveryBasebackupName;
        this.redisAclChannelsDefault = $.redisAclChannelsDefault;
        this.redisIoThreads = $.redisIoThreads;
        this.redisLfuDecayTime = $.redisLfuDecayTime;
        this.redisLfuLogFactor = $.redisLfuLogFactor;
        this.redisMaxmemoryPolicy = $.redisMaxmemoryPolicy;
        this.redisNotifyKeyspaceEvents = $.redisNotifyKeyspaceEvents;
        this.redisNumberOfDatabases = $.redisNumberOfDatabases;
        this.redisPersistence = $.redisPersistence;
        this.redisPubsubClientOutputBufferLimit = $.redisPubsubClientOutputBufferLimit;
        this.redisSsl = $.redisSsl;
        this.redisTimeout = $.redisTimeout;
        this.redisVersion = $.redisVersion;
        this.serviceLog = $.serviceLog;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.staticIps = $.staticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedisRedisUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedisRedisUserConfigArgs $;

        public Builder() {
            $ = new RedisRedisUserConfigArgs();
        }

        public Builder(RedisRedisUserConfigArgs defaults) {
            $ = new RedisRedisUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(@Nullable Output<String> additionalBackupRegions) {
            $.additionalBackupRegions = additionalBackupRegions;
            return this;
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(String additionalBackupRegions) {
            return additionalBackupRegions(Output.of(additionalBackupRegions));
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(@Nullable Output<Integer> backupHour) {
            $.backupHour = backupHour;
            return this;
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(Integer backupHour) {
            return backupHour(Output.of(backupHour));
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(@Nullable Output<Integer> backupMinute) {
            $.backupMinute = backupMinute;
            return this;
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(Integer backupMinute) {
            return backupMinute(Output.of(backupMinute));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(@Nullable Output<List<RedisRedisUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(List<RedisRedisUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(RedisRedisUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(@Nullable Output<RedisRedisUserConfigMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        /**
         * @param migration Migrate data from existing server
         * 
         * @return builder
         * 
         */
        public Builder migration(RedisRedisUserConfigMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(@Nullable Output<RedisRedisUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(RedisRedisUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(@Nullable Output<RedisRedisUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(RedisRedisUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<RedisRedisUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(RedisRedisUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(@Nullable Output<String> recoveryBasebackupName) {
            $.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }

        /**
         * @param recoveryBasebackupName Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
         * 
         * @return builder
         * 
         */
        public Builder recoveryBasebackupName(String recoveryBasebackupName) {
            return recoveryBasebackupName(Output.of(recoveryBasebackupName));
        }

        /**
         * @param redisAclChannelsDefault Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
         * 
         * @return builder
         * 
         */
        public Builder redisAclChannelsDefault(@Nullable Output<String> redisAclChannelsDefault) {
            $.redisAclChannelsDefault = redisAclChannelsDefault;
            return this;
        }

        /**
         * @param redisAclChannelsDefault Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
         * 
         * @return builder
         * 
         */
        public Builder redisAclChannelsDefault(String redisAclChannelsDefault) {
            return redisAclChannelsDefault(Output.of(redisAclChannelsDefault));
        }

        /**
         * @param redisIoThreads Set Redis IO thread count. Changing this will cause a restart of the Redis service. Example: `1`.
         * 
         * @return builder
         * 
         */
        public Builder redisIoThreads(@Nullable Output<Integer> redisIoThreads) {
            $.redisIoThreads = redisIoThreads;
            return this;
        }

        /**
         * @param redisIoThreads Set Redis IO thread count. Changing this will cause a restart of the Redis service. Example: `1`.
         * 
         * @return builder
         * 
         */
        public Builder redisIoThreads(Integer redisIoThreads) {
            return redisIoThreads(Output.of(redisIoThreads));
        }

        /**
         * @param redisLfuDecayTime LFU maxmemory-policy counter decay time in minutes. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder redisLfuDecayTime(@Nullable Output<Integer> redisLfuDecayTime) {
            $.redisLfuDecayTime = redisLfuDecayTime;
            return this;
        }

        /**
         * @param redisLfuDecayTime LFU maxmemory-policy counter decay time in minutes. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder redisLfuDecayTime(Integer redisLfuDecayTime) {
            return redisLfuDecayTime(Output.of(redisLfuDecayTime));
        }

        /**
         * @param redisLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
         * 
         * @return builder
         * 
         */
        public Builder redisLfuLogFactor(@Nullable Output<Integer> redisLfuLogFactor) {
            $.redisLfuLogFactor = redisLfuLogFactor;
            return this;
        }

        /**
         * @param redisLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
         * 
         * @return builder
         * 
         */
        public Builder redisLfuLogFactor(Integer redisLfuLogFactor) {
            return redisLfuLogFactor(Output.of(redisLfuLogFactor));
        }

        /**
         * @param redisMaxmemoryPolicy Enum: `allkeys-lfu`, `allkeys-lru`, `allkeys-random`, `noeviction`, `volatile-lfu`, `volatile-lru`, `volatile-random`, `volatile-ttl`. Redis maxmemory-policy. Default: `noeviction`.
         * 
         * @return builder
         * 
         */
        public Builder redisMaxmemoryPolicy(@Nullable Output<String> redisMaxmemoryPolicy) {
            $.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            return this;
        }

        /**
         * @param redisMaxmemoryPolicy Enum: `allkeys-lfu`, `allkeys-lru`, `allkeys-random`, `noeviction`, `volatile-lfu`, `volatile-lru`, `volatile-random`, `volatile-ttl`. Redis maxmemory-policy. Default: `noeviction`.
         * 
         * @return builder
         * 
         */
        public Builder redisMaxmemoryPolicy(String redisMaxmemoryPolicy) {
            return redisMaxmemoryPolicy(Output.of(redisMaxmemoryPolicy));
        }

        /**
         * @param redisNotifyKeyspaceEvents Set notify-keyspace-events option.
         * 
         * @return builder
         * 
         */
        public Builder redisNotifyKeyspaceEvents(@Nullable Output<String> redisNotifyKeyspaceEvents) {
            $.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            return this;
        }

        /**
         * @param redisNotifyKeyspaceEvents Set notify-keyspace-events option.
         * 
         * @return builder
         * 
         */
        public Builder redisNotifyKeyspaceEvents(String redisNotifyKeyspaceEvents) {
            return redisNotifyKeyspaceEvents(Output.of(redisNotifyKeyspaceEvents));
        }

        /**
         * @param redisNumberOfDatabases Set number of Redis databases. Changing this will cause a restart of the Redis service. Example: `16`.
         * 
         * @return builder
         * 
         */
        public Builder redisNumberOfDatabases(@Nullable Output<Integer> redisNumberOfDatabases) {
            $.redisNumberOfDatabases = redisNumberOfDatabases;
            return this;
        }

        /**
         * @param redisNumberOfDatabases Set number of Redis databases. Changing this will cause a restart of the Redis service. Example: `16`.
         * 
         * @return builder
         * 
         */
        public Builder redisNumberOfDatabases(Integer redisNumberOfDatabases) {
            return redisNumberOfDatabases(Output.of(redisNumberOfDatabases));
        }

        /**
         * @param redisPersistence Enum: `off`, `rdb`. When persistence is `rdb`, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is `off`, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder redisPersistence(@Nullable Output<String> redisPersistence) {
            $.redisPersistence = redisPersistence;
            return this;
        }

        /**
         * @param redisPersistence Enum: `off`, `rdb`. When persistence is `rdb`, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is `off`, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder redisPersistence(String redisPersistence) {
            return redisPersistence(Output.of(redisPersistence));
        }

        /**
         * @param redisPubsubClientOutputBufferLimit Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
         * 
         * @return builder
         * 
         */
        public Builder redisPubsubClientOutputBufferLimit(@Nullable Output<Integer> redisPubsubClientOutputBufferLimit) {
            $.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            return this;
        }

        /**
         * @param redisPubsubClientOutputBufferLimit Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
         * 
         * @return builder
         * 
         */
        public Builder redisPubsubClientOutputBufferLimit(Integer redisPubsubClientOutputBufferLimit) {
            return redisPubsubClientOutputBufferLimit(Output.of(redisPubsubClientOutputBufferLimit));
        }

        /**
         * @param redisSsl Require SSL to access Redis. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder redisSsl(@Nullable Output<Boolean> redisSsl) {
            $.redisSsl = redisSsl;
            return this;
        }

        /**
         * @param redisSsl Require SSL to access Redis. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder redisSsl(Boolean redisSsl) {
            return redisSsl(Output.of(redisSsl));
        }

        /**
         * @param redisTimeout Redis idle connection timeout in seconds. Default: `300`.
         * 
         * @return builder
         * 
         */
        public Builder redisTimeout(@Nullable Output<Integer> redisTimeout) {
            $.redisTimeout = redisTimeout;
            return this;
        }

        /**
         * @param redisTimeout Redis idle connection timeout in seconds. Default: `300`.
         * 
         * @return builder
         * 
         */
        public Builder redisTimeout(Integer redisTimeout) {
            return redisTimeout(Output.of(redisTimeout));
        }

        /**
         * @param redisVersion Enum: `7.0`, and newer. Redis major version.
         * 
         * @return builder
         * 
         */
        public Builder redisVersion(@Nullable Output<String> redisVersion) {
            $.redisVersion = redisVersion;
            return this;
        }

        /**
         * @param redisVersion Enum: `7.0`, and newer. Redis major version.
         * 
         * @return builder
         * 
         */
        public Builder redisVersion(String redisVersion) {
            return redisVersion(Output.of(redisVersion));
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        public RedisRedisUserConfigArgs build() {
            return $;
        }
    }

}
