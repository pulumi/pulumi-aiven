// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetCassandraCassandraUserConfigCassandra;
import com.pulumi.aiven.outputs.GetCassandraCassandraUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GetCassandraCassandraUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCassandraCassandraUserConfig {
    /**
     * @return Cassandra server provided values
     * 
     */
    private final @Nullable GetCassandraCassandraUserConfigCassandra cassandra;
    private final @Nullable String cassandraVersion;
    private final @Nullable List<String> ipFilters;
    private final @Nullable String migrateSstableloader;
    private final @Nullable GetCassandraCassandraUserConfigPrivateAccess privateAccess;
    private final @Nullable String projectToForkFrom;
    private final @Nullable GetCassandraCassandraUserConfigPublicAccess publicAccess;
    private final @Nullable String serviceToForkFrom;
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    private final @Nullable String staticIps;

    @CustomType.Constructor
    private GetCassandraCassandraUserConfig(
        @CustomType.Parameter("cassandra") @Nullable GetCassandraCassandraUserConfigCassandra cassandra,
        @CustomType.Parameter("cassandraVersion") @Nullable String cassandraVersion,
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("migrateSstableloader") @Nullable String migrateSstableloader,
        @CustomType.Parameter("privateAccess") @Nullable GetCassandraCassandraUserConfigPrivateAccess privateAccess,
        @CustomType.Parameter("projectToForkFrom") @Nullable String projectToForkFrom,
        @CustomType.Parameter("publicAccess") @Nullable GetCassandraCassandraUserConfigPublicAccess publicAccess,
        @CustomType.Parameter("serviceToForkFrom") @Nullable String serviceToForkFrom,
        @CustomType.Parameter("staticIps") @Nullable String staticIps) {
        this.cassandra = cassandra;
        this.cassandraVersion = cassandraVersion;
        this.ipFilters = ipFilters;
        this.migrateSstableloader = migrateSstableloader;
        this.privateAccess = privateAccess;
        this.projectToForkFrom = projectToForkFrom;
        this.publicAccess = publicAccess;
        this.serviceToForkFrom = serviceToForkFrom;
        this.staticIps = staticIps;
    }

    /**
     * @return Cassandra server provided values
     * 
     */
    public Optional<GetCassandraCassandraUserConfigCassandra> cassandra() {
        return Optional.ofNullable(this.cassandra);
    }
    public Optional<String> cassandraVersion() {
        return Optional.ofNullable(this.cassandraVersion);
    }
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<String> migrateSstableloader() {
        return Optional.ofNullable(this.migrateSstableloader);
    }
    public Optional<GetCassandraCassandraUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    public Optional<GetCassandraCassandraUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCassandraCassandraUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable GetCassandraCassandraUserConfigCassandra cassandra;
        private @Nullable String cassandraVersion;
        private @Nullable List<String> ipFilters;
        private @Nullable String migrateSstableloader;
        private @Nullable GetCassandraCassandraUserConfigPrivateAccess privateAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable GetCassandraCassandraUserConfigPublicAccess publicAccess;
        private @Nullable String serviceToForkFrom;
        private @Nullable String staticIps;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCassandraCassandraUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cassandra = defaults.cassandra;
    	      this.cassandraVersion = defaults.cassandraVersion;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migrateSstableloader = defaults.migrateSstableloader;
    	      this.privateAccess = defaults.privateAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        public Builder cassandra(@Nullable GetCassandraCassandraUserConfigCassandra cassandra) {
            this.cassandra = cassandra;
            return this;
        }
        public Builder cassandraVersion(@Nullable String cassandraVersion) {
            this.cassandraVersion = cassandraVersion;
            return this;
        }
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder migrateSstableloader(@Nullable String migrateSstableloader) {
            this.migrateSstableloader = migrateSstableloader;
            return this;
        }
        public Builder privateAccess(@Nullable GetCassandraCassandraUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        public Builder publicAccess(@Nullable GetCassandraCassandraUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }        public GetCassandraCassandraUserConfig build() {
            return new GetCassandraCassandraUserConfig(cassandra, cassandraVersion, ipFilters, migrateSstableloader, privateAccess, projectToForkFrom, publicAccess, serviceToForkFrom, staticIps);
        }
    }
}
