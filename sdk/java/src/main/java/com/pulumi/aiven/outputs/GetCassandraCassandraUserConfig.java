// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetCassandraCassandraUserConfigCassandra;
import com.pulumi.aiven.outputs.GetCassandraCassandraUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.GetCassandraCassandraUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GetCassandraCassandraUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCassandraCassandraUserConfig {
    private @Nullable String additionalBackupRegions;
    /**
     * @return Cassandra server provided values
     * 
     */
    private @Nullable GetCassandraCassandraUserConfigCassandra cassandra;
    private @Nullable String cassandraVersion;
    private @Nullable List<GetCassandraCassandraUserConfigIpFilterObject> ipFilterObjects;
    private @Nullable List<String> ipFilterStrings;
    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations. */
    private @Nullable List<String> ipFilters;
    private @Nullable Boolean migrateSstableloader;
    private @Nullable GetCassandraCassandraUserConfigPrivateAccess privateAccess;
    private @Nullable String projectToForkFrom;
    private @Nullable GetCassandraCassandraUserConfigPublicAccess publicAccess;
    private @Nullable String serviceToForkFrom;
    private @Nullable String serviceToJoinWith;
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    private @Nullable Boolean staticIps;

    private GetCassandraCassandraUserConfig() {}
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    /**
     * @return Cassandra server provided values
     * 
     */
    public Optional<GetCassandraCassandraUserConfigCassandra> cassandra() {
        return Optional.ofNullable(this.cassandra);
    }
    public Optional<String> cassandraVersion() {
        return Optional.ofNullable(this.cassandraVersion);
    }
    public List<GetCassandraCassandraUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. When switching to ip_filter_string, please apply the changes twice due to technical limitations. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<Boolean> migrateSstableloader() {
        return Optional.ofNullable(this.migrateSstableloader);
    }
    public Optional<GetCassandraCassandraUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    public Optional<GetCassandraCassandraUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    public Optional<String> serviceToJoinWith() {
        return Optional.ofNullable(this.serviceToJoinWith);
    }
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCassandraCassandraUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable GetCassandraCassandraUserConfigCassandra cassandra;
        private @Nullable String cassandraVersion;
        private @Nullable List<GetCassandraCassandraUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable Boolean migrateSstableloader;
        private @Nullable GetCassandraCassandraUserConfigPrivateAccess privateAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable GetCassandraCassandraUserConfigPublicAccess publicAccess;
        private @Nullable String serviceToForkFrom;
        private @Nullable String serviceToJoinWith;
        private @Nullable Boolean staticIps;
        public Builder() {}
        public Builder(GetCassandraCassandraUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.cassandra = defaults.cassandra;
    	      this.cassandraVersion = defaults.cassandraVersion;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migrateSstableloader = defaults.migrateSstableloader;
    	      this.privateAccess = defaults.privateAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.serviceToJoinWith = defaults.serviceToJoinWith;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {
            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder cassandra(@Nullable GetCassandraCassandraUserConfigCassandra cassandra) {
            this.cassandra = cassandra;
            return this;
        }
        @CustomType.Setter
        public Builder cassandraVersion(@Nullable String cassandraVersion) {
            this.cassandraVersion = cassandraVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<GetCassandraCassandraUserConfigIpFilterObject> ipFilterObjects) {
            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(GetCassandraCassandraUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {
            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder migrateSstableloader(@Nullable Boolean migrateSstableloader) {
            this.migrateSstableloader = migrateSstableloader;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable GetCassandraCassandraUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable GetCassandraCassandraUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToJoinWith(@Nullable String serviceToJoinWith) {
            this.serviceToJoinWith = serviceToJoinWith;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {
            this.staticIps = staticIps;
            return this;
        }
        public GetCassandraCassandraUserConfig build() {
            final var o = new GetCassandraCassandraUserConfig();
            o.additionalBackupRegions = additionalBackupRegions;
            o.cassandra = cassandra;
            o.cassandraVersion = cassandraVersion;
            o.ipFilterObjects = ipFilterObjects;
            o.ipFilterStrings = ipFilterStrings;
            o.ipFilters = ipFilters;
            o.migrateSstableloader = migrateSstableloader;
            o.privateAccess = privateAccess;
            o.projectToForkFrom = projectToForkFrom;
            o.publicAccess = publicAccess;
            o.serviceToForkFrom = serviceToForkFrom;
            o.serviceToJoinWith = serviceToJoinWith;
            o.staticIps = staticIps;
            return o;
        }
    }
}
