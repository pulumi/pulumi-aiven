// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaKafkaUserConfigKafkaRestConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaKafkaUserConfigKafkaRestConfigArgs Empty = new KafkaKafkaUserConfigKafkaRestConfigArgs();

    /**
     * If true the consumer&#39;s offset will be periodically committed to Kafka in the background. The default value is `true`.
     * 
     */
    @Import(name="consumerEnableAutoCommit")
    private @Nullable Output<Boolean> consumerEnableAutoCommit;

    /**
     * @return If true the consumer&#39;s offset will be periodically committed to Kafka in the background. The default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> consumerEnableAutoCommit() {
        return Optional.ofNullable(this.consumerEnableAutoCommit);
    }

    /**
     * Maximum number of bytes in unencoded message keys and values by a single request. The default value is `67108864`.
     * 
     */
    @Import(name="consumerRequestMaxBytes")
    private @Nullable Output<Integer> consumerRequestMaxBytes;

    /**
     * @return Maximum number of bytes in unencoded message keys and values by a single request. The default value is `67108864`.
     * 
     */
    public Optional<Output<Integer>> consumerRequestMaxBytes() {
        return Optional.ofNullable(this.consumerRequestMaxBytes);
    }

    /**
     * Enum: `1000`, `15000`, `30000`. The maximum total time to wait for messages for a request if the maximum number of messages has not yet been reached. The default value is `1000`.
     * 
     */
    @Import(name="consumerRequestTimeoutMs")
    private @Nullable Output<Integer> consumerRequestTimeoutMs;

    /**
     * @return Enum: `1000`, `15000`, `30000`. The maximum total time to wait for messages for a request if the maximum number of messages has not yet been reached. The default value is `1000`.
     * 
     */
    public Optional<Output<Integer>> consumerRequestTimeoutMs() {
        return Optional.ofNullable(this.consumerRequestTimeoutMs);
    }

    /**
     * Enum: `topic_name`, `record_name`, `topic_record_name`. Name strategy to use when selecting subject for storing schemas. The default value is `topic_name`.
     * 
     */
    @Import(name="nameStrategy")
    private @Nullable Output<String> nameStrategy;

    /**
     * @return Enum: `topic_name`, `record_name`, `topic_record_name`. Name strategy to use when selecting subject for storing schemas. The default value is `topic_name`.
     * 
     */
    public Optional<Output<String>> nameStrategy() {
        return Optional.ofNullable(this.nameStrategy);
    }

    /**
     * If true, validate that given schema is registered under expected subject name by the used name strategy when producing messages. The default value is `true`.
     * 
     */
    @Import(name="nameStrategyValidation")
    private @Nullable Output<Boolean> nameStrategyValidation;

    /**
     * @return If true, validate that given schema is registered under expected subject name by the used name strategy when producing messages. The default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> nameStrategyValidation() {
        return Optional.ofNullable(this.nameStrategyValidation);
    }

    /**
     * Enum: `all`, `-1`, `0`, `1`. The number of acknowledgments the producer requires the leader to have received before considering a request complete. If set to &#39;all&#39; or &#39;-1&#39;, the leader will wait for the full set of in-sync replicas to acknowledge the record. The default value is `1`.
     * 
     */
    @Import(name="producerAcks")
    private @Nullable Output<String> producerAcks;

    /**
     * @return Enum: `all`, `-1`, `0`, `1`. The number of acknowledgments the producer requires the leader to have received before considering a request complete. If set to &#39;all&#39; or &#39;-1&#39;, the leader will wait for the full set of in-sync replicas to acknowledge the record. The default value is `1`.
     * 
     */
    public Optional<Output<String>> producerAcks() {
        return Optional.ofNullable(this.producerAcks);
    }

    /**
     * Enum: `gzip`, `snappy`, `lz4`, `zstd`, `none`. Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
     * 
     */
    @Import(name="producerCompressionType")
    private @Nullable Output<String> producerCompressionType;

    /**
     * @return Enum: `gzip`, `snappy`, `lz4`, `zstd`, `none`. Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
     * 
     */
    public Optional<Output<String>> producerCompressionType() {
        return Optional.ofNullable(this.producerCompressionType);
    }

    /**
     * Wait for up to the given delay to allow batching records together. The default value is `0`.
     * 
     */
    @Import(name="producerLingerMs")
    private @Nullable Output<Integer> producerLingerMs;

    /**
     * @return Wait for up to the given delay to allow batching records together. The default value is `0`.
     * 
     */
    public Optional<Output<Integer>> producerLingerMs() {
        return Optional.ofNullable(this.producerLingerMs);
    }

    /**
     * The maximum size of a request in bytes. Note that Kafka broker can also cap the record batch size. The default value is `1048576`.
     * 
     */
    @Import(name="producerMaxRequestSize")
    private @Nullable Output<Integer> producerMaxRequestSize;

    /**
     * @return The maximum size of a request in bytes. Note that Kafka broker can also cap the record batch size. The default value is `1048576`.
     * 
     */
    public Optional<Output<Integer>> producerMaxRequestSize() {
        return Optional.ofNullable(this.producerMaxRequestSize);
    }

    /**
     * Maximum number of SimpleConsumers that can be instantiated per broker. The default value is `25`.
     * 
     */
    @Import(name="simpleconsumerPoolSizeMax")
    private @Nullable Output<Integer> simpleconsumerPoolSizeMax;

    /**
     * @return Maximum number of SimpleConsumers that can be instantiated per broker. The default value is `25`.
     * 
     */
    public Optional<Output<Integer>> simpleconsumerPoolSizeMax() {
        return Optional.ofNullable(this.simpleconsumerPoolSizeMax);
    }

    private KafkaKafkaUserConfigKafkaRestConfigArgs() {}

    private KafkaKafkaUserConfigKafkaRestConfigArgs(KafkaKafkaUserConfigKafkaRestConfigArgs $) {
        this.consumerEnableAutoCommit = $.consumerEnableAutoCommit;
        this.consumerRequestMaxBytes = $.consumerRequestMaxBytes;
        this.consumerRequestTimeoutMs = $.consumerRequestTimeoutMs;
        this.nameStrategy = $.nameStrategy;
        this.nameStrategyValidation = $.nameStrategyValidation;
        this.producerAcks = $.producerAcks;
        this.producerCompressionType = $.producerCompressionType;
        this.producerLingerMs = $.producerLingerMs;
        this.producerMaxRequestSize = $.producerMaxRequestSize;
        this.simpleconsumerPoolSizeMax = $.simpleconsumerPoolSizeMax;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaKafkaUserConfigKafkaRestConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaKafkaUserConfigKafkaRestConfigArgs $;

        public Builder() {
            $ = new KafkaKafkaUserConfigKafkaRestConfigArgs();
        }

        public Builder(KafkaKafkaUserConfigKafkaRestConfigArgs defaults) {
            $ = new KafkaKafkaUserConfigKafkaRestConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerEnableAutoCommit If true the consumer&#39;s offset will be periodically committed to Kafka in the background. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder consumerEnableAutoCommit(@Nullable Output<Boolean> consumerEnableAutoCommit) {
            $.consumerEnableAutoCommit = consumerEnableAutoCommit;
            return this;
        }

        /**
         * @param consumerEnableAutoCommit If true the consumer&#39;s offset will be periodically committed to Kafka in the background. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder consumerEnableAutoCommit(Boolean consumerEnableAutoCommit) {
            return consumerEnableAutoCommit(Output.of(consumerEnableAutoCommit));
        }

        /**
         * @param consumerRequestMaxBytes Maximum number of bytes in unencoded message keys and values by a single request. The default value is `67108864`.
         * 
         * @return builder
         * 
         */
        public Builder consumerRequestMaxBytes(@Nullable Output<Integer> consumerRequestMaxBytes) {
            $.consumerRequestMaxBytes = consumerRequestMaxBytes;
            return this;
        }

        /**
         * @param consumerRequestMaxBytes Maximum number of bytes in unencoded message keys and values by a single request. The default value is `67108864`.
         * 
         * @return builder
         * 
         */
        public Builder consumerRequestMaxBytes(Integer consumerRequestMaxBytes) {
            return consumerRequestMaxBytes(Output.of(consumerRequestMaxBytes));
        }

        /**
         * @param consumerRequestTimeoutMs Enum: `1000`, `15000`, `30000`. The maximum total time to wait for messages for a request if the maximum number of messages has not yet been reached. The default value is `1000`.
         * 
         * @return builder
         * 
         */
        public Builder consumerRequestTimeoutMs(@Nullable Output<Integer> consumerRequestTimeoutMs) {
            $.consumerRequestTimeoutMs = consumerRequestTimeoutMs;
            return this;
        }

        /**
         * @param consumerRequestTimeoutMs Enum: `1000`, `15000`, `30000`. The maximum total time to wait for messages for a request if the maximum number of messages has not yet been reached. The default value is `1000`.
         * 
         * @return builder
         * 
         */
        public Builder consumerRequestTimeoutMs(Integer consumerRequestTimeoutMs) {
            return consumerRequestTimeoutMs(Output.of(consumerRequestTimeoutMs));
        }

        /**
         * @param nameStrategy Enum: `topic_name`, `record_name`, `topic_record_name`. Name strategy to use when selecting subject for storing schemas. The default value is `topic_name`.
         * 
         * @return builder
         * 
         */
        public Builder nameStrategy(@Nullable Output<String> nameStrategy) {
            $.nameStrategy = nameStrategy;
            return this;
        }

        /**
         * @param nameStrategy Enum: `topic_name`, `record_name`, `topic_record_name`. Name strategy to use when selecting subject for storing schemas. The default value is `topic_name`.
         * 
         * @return builder
         * 
         */
        public Builder nameStrategy(String nameStrategy) {
            return nameStrategy(Output.of(nameStrategy));
        }

        /**
         * @param nameStrategyValidation If true, validate that given schema is registered under expected subject name by the used name strategy when producing messages. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder nameStrategyValidation(@Nullable Output<Boolean> nameStrategyValidation) {
            $.nameStrategyValidation = nameStrategyValidation;
            return this;
        }

        /**
         * @param nameStrategyValidation If true, validate that given schema is registered under expected subject name by the used name strategy when producing messages. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder nameStrategyValidation(Boolean nameStrategyValidation) {
            return nameStrategyValidation(Output.of(nameStrategyValidation));
        }

        /**
         * @param producerAcks Enum: `all`, `-1`, `0`, `1`. The number of acknowledgments the producer requires the leader to have received before considering a request complete. If set to &#39;all&#39; or &#39;-1&#39;, the leader will wait for the full set of in-sync replicas to acknowledge the record. The default value is `1`.
         * 
         * @return builder
         * 
         */
        public Builder producerAcks(@Nullable Output<String> producerAcks) {
            $.producerAcks = producerAcks;
            return this;
        }

        /**
         * @param producerAcks Enum: `all`, `-1`, `0`, `1`. The number of acknowledgments the producer requires the leader to have received before considering a request complete. If set to &#39;all&#39; or &#39;-1&#39;, the leader will wait for the full set of in-sync replicas to acknowledge the record. The default value is `1`.
         * 
         * @return builder
         * 
         */
        public Builder producerAcks(String producerAcks) {
            return producerAcks(Output.of(producerAcks));
        }

        /**
         * @param producerCompressionType Enum: `gzip`, `snappy`, `lz4`, `zstd`, `none`. Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
         * 
         * @return builder
         * 
         */
        public Builder producerCompressionType(@Nullable Output<String> producerCompressionType) {
            $.producerCompressionType = producerCompressionType;
            return this;
        }

        /**
         * @param producerCompressionType Enum: `gzip`, `snappy`, `lz4`, `zstd`, `none`. Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
         * 
         * @return builder
         * 
         */
        public Builder producerCompressionType(String producerCompressionType) {
            return producerCompressionType(Output.of(producerCompressionType));
        }

        /**
         * @param producerLingerMs Wait for up to the given delay to allow batching records together. The default value is `0`.
         * 
         * @return builder
         * 
         */
        public Builder producerLingerMs(@Nullable Output<Integer> producerLingerMs) {
            $.producerLingerMs = producerLingerMs;
            return this;
        }

        /**
         * @param producerLingerMs Wait for up to the given delay to allow batching records together. The default value is `0`.
         * 
         * @return builder
         * 
         */
        public Builder producerLingerMs(Integer producerLingerMs) {
            return producerLingerMs(Output.of(producerLingerMs));
        }

        /**
         * @param producerMaxRequestSize The maximum size of a request in bytes. Note that Kafka broker can also cap the record batch size. The default value is `1048576`.
         * 
         * @return builder
         * 
         */
        public Builder producerMaxRequestSize(@Nullable Output<Integer> producerMaxRequestSize) {
            $.producerMaxRequestSize = producerMaxRequestSize;
            return this;
        }

        /**
         * @param producerMaxRequestSize The maximum size of a request in bytes. Note that Kafka broker can also cap the record batch size. The default value is `1048576`.
         * 
         * @return builder
         * 
         */
        public Builder producerMaxRequestSize(Integer producerMaxRequestSize) {
            return producerMaxRequestSize(Output.of(producerMaxRequestSize));
        }

        /**
         * @param simpleconsumerPoolSizeMax Maximum number of SimpleConsumers that can be instantiated per broker. The default value is `25`.
         * 
         * @return builder
         * 
         */
        public Builder simpleconsumerPoolSizeMax(@Nullable Output<Integer> simpleconsumerPoolSizeMax) {
            $.simpleconsumerPoolSizeMax = simpleconsumerPoolSizeMax;
            return this;
        }

        /**
         * @param simpleconsumerPoolSizeMax Maximum number of SimpleConsumers that can be instantiated per broker. The default value is `25`.
         * 
         * @return builder
         * 
         */
        public Builder simpleconsumerPoolSizeMax(Integer simpleconsumerPoolSizeMax) {
            return simpleconsumerPoolSizeMax(Output.of(simpleconsumerPoolSizeMax));
        }

        public KafkaKafkaUserConfigKafkaRestConfigArgs build() {
            return $;
        }
    }

}
