// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KafkaKafkaUserConfigKafkaConnectSecretProviderVault {
    /**
     * @return Address of the Vault server.
     * 
     */
    private String address;
    /**
     * @return Enum: `token`. Auth method of the vault secret provider.
     * 
     */
    private String authMethod;
    /**
     * @return Enum: `1`, `2`, and newer. KV Secrets Engine version of the Vault server instance.
     * 
     */
    private @Nullable Integer engineVersion;
    /**
     * @return Prefix path depth of the secrets Engine. Default is 1. If the secrets engine path has more than one segment it has to be increased to the number of segments.
     * 
     */
    private @Nullable Integer prefixPathDepth;
    /**
     * @return Token used to authenticate with vault and auth method `token`.
     * 
     */
    private @Nullable String token;

    private KafkaKafkaUserConfigKafkaConnectSecretProviderVault() {}
    /**
     * @return Address of the Vault server.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Enum: `token`. Auth method of the vault secret provider.
     * 
     */
    public String authMethod() {
        return this.authMethod;
    }
    /**
     * @return Enum: `1`, `2`, and newer. KV Secrets Engine version of the Vault server instance.
     * 
     */
    public Optional<Integer> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }
    /**
     * @return Prefix path depth of the secrets Engine. Default is 1. If the secrets engine path has more than one segment it has to be increased to the number of segments.
     * 
     */
    public Optional<Integer> prefixPathDepth() {
        return Optional.ofNullable(this.prefixPathDepth);
    }
    /**
     * @return Token used to authenticate with vault and auth method `token`.
     * 
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KafkaKafkaUserConfigKafkaConnectSecretProviderVault defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private String authMethod;
        private @Nullable Integer engineVersion;
        private @Nullable Integer prefixPathDepth;
        private @Nullable String token;
        public Builder() {}
        public Builder(KafkaKafkaUserConfigKafkaConnectSecretProviderVault defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.authMethod = defaults.authMethod;
    	      this.engineVersion = defaults.engineVersion;
    	      this.prefixPathDepth = defaults.prefixPathDepth;
    	      this.token = defaults.token;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("KafkaKafkaUserConfigKafkaConnectSecretProviderVault", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder authMethod(String authMethod) {
            if (authMethod == null) {
              throw new MissingRequiredPropertyException("KafkaKafkaUserConfigKafkaConnectSecretProviderVault", "authMethod");
            }
            this.authMethod = authMethod;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(@Nullable Integer engineVersion) {

            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder prefixPathDepth(@Nullable Integer prefixPathDepth) {

            this.prefixPathDepth = prefixPathDepth;
            return this;
        }
        @CustomType.Setter
        public Builder token(@Nullable String token) {

            this.token = token;
            return this;
        }
        public KafkaKafkaUserConfigKafkaConnectSecretProviderVault build() {
            final var _resultValue = new KafkaKafkaUserConfigKafkaConnectSecretProviderVault();
            _resultValue.address = address;
            _resultValue.authMethod = authMethod;
            _resultValue.engineVersion = engineVersion;
            _resultValue.prefixPathDepth = prefixPathDepth;
            _resultValue.token = token;
            return _resultValue;
        }
    }
}
