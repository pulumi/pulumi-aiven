// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PgPgUserConfigMigrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PgPgUserConfigMigrationArgs Empty = new PgPgUserConfigMigrationArgs();

    /**
     * Primary PostgreSQL database name
     * 
     */
    @Import(name="dbname")
    private @Nullable Output<String> dbname;

    /**
     * @return Primary PostgreSQL database name
     * 
     */
    public Optional<Output<String>> dbname() {
        return Optional.ofNullable(this.dbname);
    }

    @Import(name="host", required=true)
    private Output<String> host;

    public Output<String> host() {
        return this.host;
    }

    /**
     * Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
     * 
     */
    @Import(name="ignoreDbs")
    private @Nullable Output<String> ignoreDbs;

    /**
     * @return Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
     * 
     */
    public Optional<Output<String>> ignoreDbs() {
        return Optional.ofNullable(this.ignoreDbs);
    }

    /**
     * The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * PostgreSQL admin user password
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return PostgreSQL admin user password
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="port", required=true)
    private Output<Integer> port;

    public Output<Integer> port() {
        return this.port;
    }

    @Import(name="ssl")
    private @Nullable Output<Boolean> ssl;

    public Optional<Output<Boolean>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * User name for authentication with the server where to migrate data from.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return User name for authentication with the server where to migrate data from.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private PgPgUserConfigMigrationArgs() {}

    private PgPgUserConfigMigrationArgs(PgPgUserConfigMigrationArgs $) {
        this.dbname = $.dbname;
        this.host = $.host;
        this.ignoreDbs = $.ignoreDbs;
        this.method = $.method;
        this.password = $.password;
        this.port = $.port;
        this.ssl = $.ssl;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PgPgUserConfigMigrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PgPgUserConfigMigrationArgs $;

        public Builder() {
            $ = new PgPgUserConfigMigrationArgs();
        }

        public Builder(PgPgUserConfigMigrationArgs defaults) {
            $ = new PgPgUserConfigMigrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbname Primary PostgreSQL database name
         * 
         * @return builder
         * 
         */
        public Builder dbname(@Nullable Output<String> dbname) {
            $.dbname = dbname;
            return this;
        }

        /**
         * @param dbname Primary PostgreSQL database name
         * 
         * @return builder
         * 
         */
        public Builder dbname(String dbname) {
            return dbname(Output.of(dbname));
        }

        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param ignoreDbs Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
         * 
         * @return builder
         * 
         */
        public Builder ignoreDbs(@Nullable Output<String> ignoreDbs) {
            $.ignoreDbs = ignoreDbs;
            return this;
        }

        /**
         * @param ignoreDbs Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
         * 
         * @return builder
         * 
         */
        public Builder ignoreDbs(String ignoreDbs) {
            return ignoreDbs(Output.of(ignoreDbs));
        }

        /**
         * @param method The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param password PostgreSQL admin user password
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password PostgreSQL admin user password
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder ssl(@Nullable Output<Boolean> ssl) {
            $.ssl = ssl;
            return this;
        }

        public Builder ssl(Boolean ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param username User name for authentication with the server where to migrate data from.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username User name for authentication with the server where to migrate data from.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public PgPgUserConfigMigrationArgs build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("PgPgUserConfigMigrationArgs", "host");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("PgPgUserConfigMigrationArgs", "port");
            }
            return $;
        }
    }

}
