// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.aiven.inputs.FlinkApplicationVersionSinkArgs;
import com.pulumi.aiven.inputs.FlinkApplicationVersionSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkApplicationVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlinkApplicationVersionArgs Empty = new FlinkApplicationVersionArgs();

    /**
     * Application ID.
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return Application ID.
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * The sink table for the application.
     * 
     */
    @Import(name="sink")
    private @Nullable Output<List<FlinkApplicationVersionSinkArgs>> sink;

    /**
     * @return The sink table for the application.
     * 
     */
    public Optional<Output<List<FlinkApplicationVersionSinkArgs>>> sink() {
        return Optional.ofNullable(this.sink);
    }

    /**
     * Application sinks
     * 
     * @deprecated
     * This field is deprecated and will be removed in the next major release. Use `sink` instead.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
    @Import(name="sinks")
    private @Nullable Output<List<FlinkApplicationVersionSinkArgs>> sinks;

    /**
     * @return Application sinks
     * 
     * @deprecated
     * This field is deprecated and will be removed in the next major release. Use `sink` instead.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
    public Optional<Output<List<FlinkApplicationVersionSinkArgs>>> sinks() {
        return Optional.ofNullable(this.sinks);
    }

    /**
     * The source table for the application.
     * 
     */
    @Import(name="source")
    private @Nullable Output<List<FlinkApplicationVersionSourceArgs>> source;

    /**
     * @return The source table for the application.
     * 
     */
    public Optional<Output<List<FlinkApplicationVersionSourceArgs>>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Application sources
     * 
     * @deprecated
     * This field is deprecated and will be removed in the next major release. Use `source` instead.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
    @Import(name="sources")
    private @Nullable Output<List<FlinkApplicationVersionSourceArgs>> sources;

    /**
     * @return Application sources
     * 
     * @deprecated
     * This field is deprecated and will be removed in the next major release. Use `source` instead.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
    public Optional<Output<List<FlinkApplicationVersionSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * Job SQL statement.
     * 
     */
    @Import(name="statement", required=true)
    private Output<String> statement;

    /**
     * @return Job SQL statement.
     * 
     */
    public Output<String> statement() {
        return this.statement;
    }

    private FlinkApplicationVersionArgs() {}

    private FlinkApplicationVersionArgs(FlinkApplicationVersionArgs $) {
        this.applicationId = $.applicationId;
        this.project = $.project;
        this.serviceName = $.serviceName;
        this.sink = $.sink;
        this.sinks = $.sinks;
        this.source = $.source;
        this.sources = $.sources;
        this.statement = $.statement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkApplicationVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkApplicationVersionArgs $;

        public Builder() {
            $ = new FlinkApplicationVersionArgs();
        }

        public Builder(FlinkApplicationVersionArgs defaults) {
            $ = new FlinkApplicationVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Application ID.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Application ID.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param project The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceName The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param sink The sink table for the application.
         * 
         * @return builder
         * 
         */
        public Builder sink(@Nullable Output<List<FlinkApplicationVersionSinkArgs>> sink) {
            $.sink = sink;
            return this;
        }

        /**
         * @param sink The sink table for the application.
         * 
         * @return builder
         * 
         */
        public Builder sink(List<FlinkApplicationVersionSinkArgs> sink) {
            return sink(Output.of(sink));
        }

        /**
         * @param sink The sink table for the application.
         * 
         * @return builder
         * 
         */
        public Builder sink(FlinkApplicationVersionSinkArgs... sink) {
            return sink(List.of(sink));
        }

        /**
         * @param sinks Application sinks
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `sink` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
        public Builder sinks(@Nullable Output<List<FlinkApplicationVersionSinkArgs>> sinks) {
            $.sinks = sinks;
            return this;
        }

        /**
         * @param sinks Application sinks
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `sink` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
        public Builder sinks(List<FlinkApplicationVersionSinkArgs> sinks) {
            return sinks(Output.of(sinks));
        }

        /**
         * @param sinks Application sinks
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `sink` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `sink` instead. */
        public Builder sinks(FlinkApplicationVersionSinkArgs... sinks) {
            return sinks(List.of(sinks));
        }

        /**
         * @param source The source table for the application.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<List<FlinkApplicationVersionSourceArgs>> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source table for the application.
         * 
         * @return builder
         * 
         */
        public Builder source(List<FlinkApplicationVersionSourceArgs> source) {
            return source(Output.of(source));
        }

        /**
         * @param source The source table for the application.
         * 
         * @return builder
         * 
         */
        public Builder source(FlinkApplicationVersionSourceArgs... source) {
            return source(List.of(source));
        }

        /**
         * @param sources Application sources
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `source` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
        public Builder sources(@Nullable Output<List<FlinkApplicationVersionSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Application sources
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `source` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
        public Builder sources(List<FlinkApplicationVersionSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources Application sources
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in the next major release. Use `source` instead.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in the next major release. Use `source` instead. */
        public Builder sources(FlinkApplicationVersionSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param statement Job SQL statement.
         * 
         * @return builder
         * 
         */
        public Builder statement(Output<String> statement) {
            $.statement = statement;
            return this;
        }

        /**
         * @param statement Job SQL statement.
         * 
         * @return builder
         * 
         */
        public Builder statement(String statement) {
            return statement(Output.of(statement));
        }

        public FlinkApplicationVersionArgs build() {
            if ($.applicationId == null) {
                throw new MissingRequiredPropertyException("FlinkApplicationVersionArgs", "applicationId");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("FlinkApplicationVersionArgs", "project");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("FlinkApplicationVersionArgs", "serviceName");
            }
            if ($.statement == null) {
                throw new MissingRequiredPropertyException("FlinkApplicationVersionArgs", "statement");
            }
            return $;
        }
    }

}
