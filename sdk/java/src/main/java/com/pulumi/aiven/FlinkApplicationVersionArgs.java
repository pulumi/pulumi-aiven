// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.aiven.inputs.FlinkApplicationVersionSinkArgs;
import com.pulumi.aiven.inputs.FlinkApplicationVersionSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class FlinkApplicationVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlinkApplicationVersionArgs Empty = new FlinkApplicationVersionArgs();

    /**
     * Application ID
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return Application ID
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Application sinks
     * 
     */
    @Import(name="sinks", required=true)
    private Output<List<FlinkApplicationVersionSinkArgs>> sinks;

    /**
     * @return Application sinks
     * 
     */
    public Output<List<FlinkApplicationVersionSinkArgs>> sinks() {
        return this.sinks;
    }

    /**
     * Application sources
     * 
     */
    @Import(name="sources", required=true)
    private Output<List<FlinkApplicationVersionSourceArgs>> sources;

    /**
     * @return Application sources
     * 
     */
    public Output<List<FlinkApplicationVersionSourceArgs>> sources() {
        return this.sources;
    }

    /**
     * Job SQL statement
     * 
     */
    @Import(name="statement", required=true)
    private Output<String> statement;

    /**
     * @return Job SQL statement
     * 
     */
    public Output<String> statement() {
        return this.statement;
    }

    private FlinkApplicationVersionArgs() {}

    private FlinkApplicationVersionArgs(FlinkApplicationVersionArgs $) {
        this.applicationId = $.applicationId;
        this.project = $.project;
        this.serviceName = $.serviceName;
        this.sinks = $.sinks;
        this.sources = $.sources;
        this.statement = $.statement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkApplicationVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkApplicationVersionArgs $;

        public Builder() {
            $ = new FlinkApplicationVersionArgs();
        }

        public Builder(FlinkApplicationVersionArgs defaults) {
            $ = new FlinkApplicationVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Application ID
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Application ID
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param sinks Application sinks
         * 
         * @return builder
         * 
         */
        public Builder sinks(Output<List<FlinkApplicationVersionSinkArgs>> sinks) {
            $.sinks = sinks;
            return this;
        }

        /**
         * @param sinks Application sinks
         * 
         * @return builder
         * 
         */
        public Builder sinks(List<FlinkApplicationVersionSinkArgs> sinks) {
            return sinks(Output.of(sinks));
        }

        /**
         * @param sinks Application sinks
         * 
         * @return builder
         * 
         */
        public Builder sinks(FlinkApplicationVersionSinkArgs... sinks) {
            return sinks(List.of(sinks));
        }

        /**
         * @param sources Application sources
         * 
         * @return builder
         * 
         */
        public Builder sources(Output<List<FlinkApplicationVersionSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Application sources
         * 
         * @return builder
         * 
         */
        public Builder sources(List<FlinkApplicationVersionSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources Application sources
         * 
         * @return builder
         * 
         */
        public Builder sources(FlinkApplicationVersionSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param statement Job SQL statement
         * 
         * @return builder
         * 
         */
        public Builder statement(Output<String> statement) {
            $.statement = statement;
            return this;
        }

        /**
         * @param statement Job SQL statement
         * 
         * @return builder
         * 
         */
        public Builder statement(String statement) {
            return statement(Output.of(statement));
        }

        public FlinkApplicationVersionArgs build() {
            $.applicationId = Objects.requireNonNull($.applicationId, "expected parameter 'applicationId' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.sinks = Objects.requireNonNull($.sinks, "expected parameter 'sinks' to be non-null");
            $.sources = Objects.requireNonNull($.sources, "expected parameter 'sources' to be non-null");
            $.statement = Objects.requireNonNull($.statement, "expected parameter 'statement' to be non-null");
            return $;
        }
    }

}
