// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetThanosThanosUserConfigQuery {
    /**
     * @return Set the default evaluation interval for subqueries. Default: `1m`.
     * 
     */
    private @Nullable String queryDefaultEvaluationInterval;
    /**
     * @return The maximum lookback duration for retrieving metrics during expression evaluations in PromQL. PromQL always evaluates the query for a certain timestamp, and it looks back for the given amount of time to get the latest sample. If it exceeds the maximum lookback delta, it assumes the series is stale and returns none (a gap). The lookback delta should be set to at least 2 times the slowest scrape interval. If unset, it will use the promql default of 5m. Default: `5m`.
     * 
     */
    private @Nullable String queryLookbackDelta;
    /**
     * @return The default metadata time range duration for retrieving labels through Labels and Series API when the range parameters are not specified. The zero value means the range covers the time since the beginning. Default: `0s`.
     * 
     */
    private @Nullable String queryMetadataDefaultTimeRange;
    /**
     * @return Maximum time to process a query by the query node. Default: `2m`.
     * 
     */
    private @Nullable String queryTimeout;
    /**
     * @return The maximum samples allowed for a single Series request. The Series call fails if this limit is exceeded. Set to 0 for no limit. NOTE: For efficiency, the limit is internally implemented as &#39;chunks limit&#39; considering each chunk contains a maximum of 120 samples. The default value is 100 * store.limits.request-series. Default: `0`.
     * 
     */
    private @Nullable Integer storeLimitsRequestSamples;
    /**
     * @return The maximum series allowed for a single Series request. The Series call fails if this limit is exceeded. Set to 0 for no limit. The default value is 1000 * cpu_count. Default: `0`.
     * 
     */
    private @Nullable Integer storeLimitsRequestSeries;

    private GetThanosThanosUserConfigQuery() {}
    /**
     * @return Set the default evaluation interval for subqueries. Default: `1m`.
     * 
     */
    public Optional<String> queryDefaultEvaluationInterval() {
        return Optional.ofNullable(this.queryDefaultEvaluationInterval);
    }
    /**
     * @return The maximum lookback duration for retrieving metrics during expression evaluations in PromQL. PromQL always evaluates the query for a certain timestamp, and it looks back for the given amount of time to get the latest sample. If it exceeds the maximum lookback delta, it assumes the series is stale and returns none (a gap). The lookback delta should be set to at least 2 times the slowest scrape interval. If unset, it will use the promql default of 5m. Default: `5m`.
     * 
     */
    public Optional<String> queryLookbackDelta() {
        return Optional.ofNullable(this.queryLookbackDelta);
    }
    /**
     * @return The default metadata time range duration for retrieving labels through Labels and Series API when the range parameters are not specified. The zero value means the range covers the time since the beginning. Default: `0s`.
     * 
     */
    public Optional<String> queryMetadataDefaultTimeRange() {
        return Optional.ofNullable(this.queryMetadataDefaultTimeRange);
    }
    /**
     * @return Maximum time to process a query by the query node. Default: `2m`.
     * 
     */
    public Optional<String> queryTimeout() {
        return Optional.ofNullable(this.queryTimeout);
    }
    /**
     * @return The maximum samples allowed for a single Series request. The Series call fails if this limit is exceeded. Set to 0 for no limit. NOTE: For efficiency, the limit is internally implemented as &#39;chunks limit&#39; considering each chunk contains a maximum of 120 samples. The default value is 100 * store.limits.request-series. Default: `0`.
     * 
     */
    public Optional<Integer> storeLimitsRequestSamples() {
        return Optional.ofNullable(this.storeLimitsRequestSamples);
    }
    /**
     * @return The maximum series allowed for a single Series request. The Series call fails if this limit is exceeded. Set to 0 for no limit. The default value is 1000 * cpu_count. Default: `0`.
     * 
     */
    public Optional<Integer> storeLimitsRequestSeries() {
        return Optional.ofNullable(this.storeLimitsRequestSeries);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetThanosThanosUserConfigQuery defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String queryDefaultEvaluationInterval;
        private @Nullable String queryLookbackDelta;
        private @Nullable String queryMetadataDefaultTimeRange;
        private @Nullable String queryTimeout;
        private @Nullable Integer storeLimitsRequestSamples;
        private @Nullable Integer storeLimitsRequestSeries;
        public Builder() {}
        public Builder(GetThanosThanosUserConfigQuery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.queryDefaultEvaluationInterval = defaults.queryDefaultEvaluationInterval;
    	      this.queryLookbackDelta = defaults.queryLookbackDelta;
    	      this.queryMetadataDefaultTimeRange = defaults.queryMetadataDefaultTimeRange;
    	      this.queryTimeout = defaults.queryTimeout;
    	      this.storeLimitsRequestSamples = defaults.storeLimitsRequestSamples;
    	      this.storeLimitsRequestSeries = defaults.storeLimitsRequestSeries;
        }

        @CustomType.Setter
        public Builder queryDefaultEvaluationInterval(@Nullable String queryDefaultEvaluationInterval) {

            this.queryDefaultEvaluationInterval = queryDefaultEvaluationInterval;
            return this;
        }
        @CustomType.Setter
        public Builder queryLookbackDelta(@Nullable String queryLookbackDelta) {

            this.queryLookbackDelta = queryLookbackDelta;
            return this;
        }
        @CustomType.Setter
        public Builder queryMetadataDefaultTimeRange(@Nullable String queryMetadataDefaultTimeRange) {

            this.queryMetadataDefaultTimeRange = queryMetadataDefaultTimeRange;
            return this;
        }
        @CustomType.Setter
        public Builder queryTimeout(@Nullable String queryTimeout) {

            this.queryTimeout = queryTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder storeLimitsRequestSamples(@Nullable Integer storeLimitsRequestSamples) {

            this.storeLimitsRequestSamples = storeLimitsRequestSamples;
            return this;
        }
        @CustomType.Setter
        public Builder storeLimitsRequestSeries(@Nullable Integer storeLimitsRequestSeries) {

            this.storeLimitsRequestSeries = storeLimitsRequestSeries;
            return this;
        }
        public GetThanosThanosUserConfigQuery build() {
            final var _resultValue = new GetThanosThanosUserConfigQuery();
            _resultValue.queryDefaultEvaluationInterval = queryDefaultEvaluationInterval;
            _resultValue.queryLookbackDelta = queryLookbackDelta;
            _resultValue.queryMetadataDefaultTimeRange = queryMetadataDefaultTimeRange;
            _resultValue.queryTimeout = queryTimeout;
            _resultValue.storeLimitsRequestSamples = storeLimitsRequestSamples;
            _resultValue.storeLimitsRequestSeries = storeLimitsRequestSeries;
            return _resultValue;
        }
    }
}
