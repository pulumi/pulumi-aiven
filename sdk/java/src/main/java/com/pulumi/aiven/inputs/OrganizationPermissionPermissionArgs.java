// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationPermissionPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationPermissionPermissionArgs Empty = new OrganizationPermissionPermissionArgs();

    /**
     * Create Time
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Create Time
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * List of permissions. The possible values are `admin`, `developer`, `operator` and `read_only`.
     * 
     */
    @Import(name="permissions", required=true)
    private Output<List<String>> permissions;

    /**
     * @return List of permissions. The possible values are `admin`, `developer`, `operator` and `read_only`.
     * 
     */
    public Output<List<String>> permissions() {
        return this.permissions;
    }

    /**
     * ID of the principal.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return ID of the principal.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * Type of the principal. The possible values are `user` and `user_group`.
     * 
     */
    @Import(name="principalType", required=true)
    private Output<String> principalType;

    /**
     * @return Type of the principal. The possible values are `user` and `user_group`.
     * 
     */
    public Output<String> principalType() {
        return this.principalType;
    }

    /**
     * Update Time
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Update Time
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private OrganizationPermissionPermissionArgs() {}

    private OrganizationPermissionPermissionArgs(OrganizationPermissionPermissionArgs $) {
        this.createTime = $.createTime;
        this.permissions = $.permissions;
        this.principalId = $.principalId;
        this.principalType = $.principalType;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationPermissionPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationPermissionPermissionArgs $;

        public Builder() {
            $ = new OrganizationPermissionPermissionArgs();
        }

        public Builder(OrganizationPermissionPermissionArgs defaults) {
            $ = new OrganizationPermissionPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Create Time
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Create Time
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param permissions List of permissions. The possible values are `admin`, `developer`, `operator` and `read_only`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions List of permissions. The possible values are `admin`, `developer`, `operator` and `read_only`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions List of permissions. The possible values are `admin`, `developer`, `operator` and `read_only`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param principalId ID of the principal.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId ID of the principal.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalType Type of the principal. The possible values are `user` and `user_group`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType Type of the principal. The possible values are `user` and `user_group`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        /**
         * @param updateTime Update Time
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Update Time
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public OrganizationPermissionPermissionArgs build() {
            if ($.permissions == null) {
                throw new MissingRequiredPropertyException("OrganizationPermissionPermissionArgs", "permissions");
            }
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("OrganizationPermissionPermissionArgs", "principalId");
            }
            if ($.principalType == null) {
                throw new MissingRequiredPropertyException("OrganizationPermissionPermissionArgs", "principalType");
            }
            return $;
        }
    }

}
