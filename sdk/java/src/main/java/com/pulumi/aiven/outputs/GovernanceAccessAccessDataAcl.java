// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GovernanceAccessAccessDataAcl {
    /**
     * @return The IP address from which a principal is allowed or denied access to the resource. Use `*` for all hosts. Maximum length: `256`. Changing this property forces recreation of the resource.
     * 
     */
    private @Nullable String host;
    /**
     * @return The ACL ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return The action that will be allowed for the service user. The possible values are `Read` and `Write`. Changing this property forces recreation of the resource.
     * 
     */
    private String operation;
    /**
     * @return Pattern used to match specified resources. The possible value is `LITERAL`.
     * 
     */
    private @Nullable String patternType;
    /**
     * @return Explicitly allows or denies the action for the service user on the specified resource. The possible value is `ALLOW`. Changing this property forces recreation of the resource.
     * 
     */
    private String permissionType;
    /**
     * @return Identities in `user:name` format that the permissions apply to.
     * 
     */
    private @Nullable String principal;
    /**
     * @return The name of the resource the permission applies to, such as the topic name or group ID in the Kafka service. Maximum length: `256`. Changing this property forces recreation of the resource.
     * 
     */
    private String resourceName;
    /**
     * @return The type of resource. The possible value is `Topic`. Changing this property forces recreation of the resource.
     * 
     */
    private String resourceType;

    private GovernanceAccessAccessDataAcl() {}
    /**
     * @return The IP address from which a principal is allowed or denied access to the resource. Use `*` for all hosts. Maximum length: `256`. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return The ACL ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The action that will be allowed for the service user. The possible values are `Read` and `Write`. Changing this property forces recreation of the resource.
     * 
     */
    public String operation() {
        return this.operation;
    }
    /**
     * @return Pattern used to match specified resources. The possible value is `LITERAL`.
     * 
     */
    public Optional<String> patternType() {
        return Optional.ofNullable(this.patternType);
    }
    /**
     * @return Explicitly allows or denies the action for the service user on the specified resource. The possible value is `ALLOW`. Changing this property forces recreation of the resource.
     * 
     */
    public String permissionType() {
        return this.permissionType;
    }
    /**
     * @return Identities in `user:name` format that the permissions apply to.
     * 
     */
    public Optional<String> principal() {
        return Optional.ofNullable(this.principal);
    }
    /**
     * @return The name of the resource the permission applies to, such as the topic name or group ID in the Kafka service. Maximum length: `256`. Changing this property forces recreation of the resource.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }
    /**
     * @return The type of resource. The possible value is `Topic`. Changing this property forces recreation of the resource.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GovernanceAccessAccessDataAcl defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String host;
        private @Nullable String id;
        private String operation;
        private @Nullable String patternType;
        private String permissionType;
        private @Nullable String principal;
        private String resourceName;
        private String resourceType;
        public Builder() {}
        public Builder(GovernanceAccessAccessDataAcl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.operation = defaults.operation;
    	      this.patternType = defaults.patternType;
    	      this.permissionType = defaults.permissionType;
    	      this.principal = defaults.principal;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceType = defaults.resourceType;
        }

        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder operation(String operation) {
            if (operation == null) {
              throw new MissingRequiredPropertyException("GovernanceAccessAccessDataAcl", "operation");
            }
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder patternType(@Nullable String patternType) {

            this.patternType = patternType;
            return this;
        }
        @CustomType.Setter
        public Builder permissionType(String permissionType) {
            if (permissionType == null) {
              throw new MissingRequiredPropertyException("GovernanceAccessAccessDataAcl", "permissionType");
            }
            this.permissionType = permissionType;
            return this;
        }
        @CustomType.Setter
        public Builder principal(@Nullable String principal) {

            this.principal = principal;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(String resourceName) {
            if (resourceName == null) {
              throw new MissingRequiredPropertyException("GovernanceAccessAccessDataAcl", "resourceName");
            }
            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GovernanceAccessAccessDataAcl", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        public GovernanceAccessAccessDataAcl build() {
            final var _resultValue = new GovernanceAccessAccessDataAcl();
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.operation = operation;
            _resultValue.patternType = patternType;
            _resultValue.permissionType = permissionType;
            _resultValue.principal = principal;
            _resultValue.resourceName = resourceName;
            _resultValue.resourceType = resourceType;
            return _resultValue;
        }
    }
}
