// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaTopicConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaTopicConfigArgs Empty = new KafkaTopicConfigArgs();

    /**
     * The retention policy to use on old segments. Possible values include &#39;delete&#39;, &#39;compact&#39;, or a comma-separated list of them. The default policy (&#39;delete&#39;) will discard old segments when their retention time or size limit has been reached. The &#39;compact&#39; setting will enable log compaction on the topic. The possible values are `compact`, `compact,delete` and `delete`.
     * 
     */
    @Import(name="cleanupPolicy")
    private @Nullable Output<String> cleanupPolicy;

    /**
     * @return The retention policy to use on old segments. Possible values include &#39;delete&#39;, &#39;compact&#39;, or a comma-separated list of them. The default policy (&#39;delete&#39;) will discard old segments when their retention time or size limit has been reached. The &#39;compact&#39; setting will enable log compaction on the topic. The possible values are `compact`, `compact,delete` and `delete`.
     * 
     */
    public Optional<Output<String>> cleanupPolicy() {
        return Optional.ofNullable(this.cleanupPolicy);
    }

    /**
     * Specify the final compression type for a given topic. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;uncompressed&#39; which is equivalent to no compression; and &#39;producer&#39; which means retain the original compression codec set by the producer. The possible values are `gzip`, `lz4`, `producer`, `snappy`, `uncompressed` and `zstd`.
     * 
     */
    @Import(name="compressionType")
    private @Nullable Output<String> compressionType;

    /**
     * @return Specify the final compression type for a given topic. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;uncompressed&#39; which is equivalent to no compression; and &#39;producer&#39; which means retain the original compression codec set by the producer. The possible values are `gzip`, `lz4`, `producer`, `snappy`, `uncompressed` and `zstd`.
     * 
     */
    public Optional<Output<String>> compressionType() {
        return Optional.ofNullable(this.compressionType);
    }

    /**
     * The amount of time to retain delete tombstone markers for log compacted topics. This setting also gives a bound on the time in which a consumer must complete a read if they begin from offset 0 to ensure that they get a valid snapshot of the final stage (otherwise delete tombstones may be collected before they complete their scan).
     * 
     */
    @Import(name="deleteRetentionMs")
    private @Nullable Output<String> deleteRetentionMs;

    /**
     * @return The amount of time to retain delete tombstone markers for log compacted topics. This setting also gives a bound on the time in which a consumer must complete a read if they begin from offset 0 to ensure that they get a valid snapshot of the final stage (otherwise delete tombstones may be collected before they complete their scan).
     * 
     */
    public Optional<Output<String>> deleteRetentionMs() {
        return Optional.ofNullable(this.deleteRetentionMs);
    }

    /**
     * The time to wait before deleting a file from the filesystem.
     * 
     */
    @Import(name="fileDeleteDelayMs")
    private @Nullable Output<String> fileDeleteDelayMs;

    /**
     * @return The time to wait before deleting a file from the filesystem.
     * 
     */
    public Optional<Output<String>> fileDeleteDelayMs() {
        return Optional.ofNullable(this.fileDeleteDelayMs);
    }

    /**
     * This setting allows specifying an interval at which we will force an fsync of data written to the log. For example if this was set to 1 we would fsync after every message; if it were 5 we would fsync after every five messages. In general we recommend you not set this and use replication for durability and allow the operating system&#39;s background flush capabilities as it is more efficient.
     * 
     */
    @Import(name="flushMessages")
    private @Nullable Output<String> flushMessages;

    /**
     * @return This setting allows specifying an interval at which we will force an fsync of data written to the log. For example if this was set to 1 we would fsync after every message; if it were 5 we would fsync after every five messages. In general we recommend you not set this and use replication for durability and allow the operating system&#39;s background flush capabilities as it is more efficient.
     * 
     */
    public Optional<Output<String>> flushMessages() {
        return Optional.ofNullable(this.flushMessages);
    }

    /**
     * This setting allows specifying a time interval at which we will force an fsync of data written to the log. For example if this was set to 1000 we would fsync after 1000 ms had passed. In general we recommend you not set this and use replication for durability and allow the operating system&#39;s background flush capabilities as it is more efficient.
     * 
     */
    @Import(name="flushMs")
    private @Nullable Output<String> flushMs;

    /**
     * @return This setting allows specifying a time interval at which we will force an fsync of data written to the log. For example if this was set to 1000 we would fsync after 1000 ms had passed. In general we recommend you not set this and use replication for durability and allow the operating system&#39;s background flush capabilities as it is more efficient.
     * 
     */
    public Optional<Output<String>> flushMs() {
        return Optional.ofNullable(this.flushMs);
    }

    /**
     * This setting controls how frequently Kafka adds an index entry to its offset index. The default setting ensures that we index a message roughly every 4096 bytes. More indexing allows reads to jump closer to the exact position in the log but makes the index larger. You probably don&#39;t need to change this.
     * 
     */
    @Import(name="indexIntervalBytes")
    private @Nullable Output<String> indexIntervalBytes;

    /**
     * @return This setting controls how frequently Kafka adds an index entry to its offset index. The default setting ensures that we index a message roughly every 4096 bytes. More indexing allows reads to jump closer to the exact position in the log but makes the index larger. You probably don&#39;t need to change this.
     * 
     */
    public Optional<Output<String>> indexIntervalBytes() {
        return Optional.ofNullable(this.indexIntervalBytes);
    }

    /**
     * Creates a [diskless topic](https://aiven.io/docs/products/diskless). You can only do this when you create the topic and you cannot change it later. Diskless topics are only available for bring your own cloud (BYOC) services that have the feature enabled.
     * 
     */
    @Import(name="inklessEnable")
    private @Nullable Output<Boolean> inklessEnable;

    /**
     * @return Creates a [diskless topic](https://aiven.io/docs/products/diskless). You can only do this when you create the topic and you cannot change it later. Diskless topics are only available for bring your own cloud (BYOC) services that have the feature enabled.
     * 
     */
    public Optional<Output<Boolean>> inklessEnable() {
        return Optional.ofNullable(this.inklessEnable);
    }

    /**
     * This configuration controls the maximum bytes tiered storage will retain segment files locally before it will discard old log segments to free up space. If set to -2, the limit is equal to overall retention time. If set to -1, no limit is applied but it&#39;s possible only if overall retention is also -1.
     * 
     */
    @Import(name="localRetentionBytes")
    private @Nullable Output<String> localRetentionBytes;

    /**
     * @return This configuration controls the maximum bytes tiered storage will retain segment files locally before it will discard old log segments to free up space. If set to -2, the limit is equal to overall retention time. If set to -1, no limit is applied but it&#39;s possible only if overall retention is also -1.
     * 
     */
    public Optional<Output<String>> localRetentionBytes() {
        return Optional.ofNullable(this.localRetentionBytes);
    }

    /**
     * This configuration controls the maximum time tiered storage will retain segment files locally before it will discard old log segments to free up space. If set to -2, the time limit is equal to overall retention time. If set to -1, no time limit is applied but it&#39;s possible only if overall retention is also -1.
     * 
     */
    @Import(name="localRetentionMs")
    private @Nullable Output<String> localRetentionMs;

    /**
     * @return This configuration controls the maximum time tiered storage will retain segment files locally before it will discard old log segments to free up space. If set to -2, the time limit is equal to overall retention time. If set to -1, no time limit is applied but it&#39;s possible only if overall retention is also -1.
     * 
     */
    public Optional<Output<String>> localRetentionMs() {
        return Optional.ofNullable(this.localRetentionMs);
    }

    /**
     * The maximum time a message will remain ineligible for compaction in the log. Only applicable for logs that are being compacted.
     * 
     */
    @Import(name="maxCompactionLagMs")
    private @Nullable Output<String> maxCompactionLagMs;

    /**
     * @return The maximum time a message will remain ineligible for compaction in the log. Only applicable for logs that are being compacted.
     * 
     */
    public Optional<Output<String>> maxCompactionLagMs() {
        return Optional.ofNullable(this.maxCompactionLagMs);
    }

    /**
     * The largest record batch size allowed by Kafka (after compression if compression is enabled). If this is increased and there are consumers older than 0.10.2, the consumers&#39; fetch size must also be increased so that the they can fetch record batches this large. In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case.
     * 
     */
    @Import(name="maxMessageBytes")
    private @Nullable Output<String> maxMessageBytes;

    /**
     * @return The largest record batch size allowed by Kafka (after compression if compression is enabled). If this is increased and there are consumers older than 0.10.2, the consumers&#39; fetch size must also be increased so that the they can fetch record batches this large. In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case.
     * 
     */
    public Optional<Output<String>> maxMessageBytes() {
        return Optional.ofNullable(this.maxMessageBytes);
    }

    /**
     * This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to false, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with UNSUPPORTED_VERSION error for consume requests from such older clients. This configuration does not apply to any message format conversion that might be required for replication to followers.
     * 
     */
    @Import(name="messageDownconversionEnable")
    private @Nullable Output<Boolean> messageDownconversionEnable;

    /**
     * @return This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to false, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with UNSUPPORTED_VERSION error for consume requests from such older clients. This configuration does not apply to any message format conversion that might be required for replication to followers.
     * 
     */
    public Optional<Output<Boolean>> messageDownconversionEnable() {
        return Optional.ofNullable(this.messageDownconversionEnable);
    }

    /**
     * Specify the message format version the broker will use to append messages to the logs. The value should be a valid ApiVersion. Some examples are: 0.8.2, 0.9.0.0, 0.10.0, check ApiVersion for more details. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don&#39;t understand. The possible values are `0.10.0`, `0.10.0-IV0`, `0.10.0-IV1`, `0.10.1`, `0.10.1-IV0`, `0.10.1-IV1`, `0.10.1-IV2`, `0.10.2`, `0.10.2-IV0`, `0.11.0`, `0.11.0-IV0`, `0.11.0-IV1`, `0.11.0-IV2`, `0.8.0`, `0.8.1`, `0.8.2`, `0.9.0`, `1.0`, `1.0-IV0`, `1.1`, `1.1-IV0`, `2.0`, `2.0-IV0`, `2.0-IV1`, `2.1`, `2.1-IV0`, `2.1-IV1`, `2.1-IV2`, `2.2`, `2.2-IV0`, `2.2-IV1`, `2.3`, `2.3-IV0`, `2.3-IV1`, `2.4`, `2.4-IV0`, `2.4-IV1`, `2.5`, `2.5-IV0`, `2.6`, `2.6-IV0`, `2.7`, `2.7-IV0`, `2.7-IV1`, `2.7-IV2`, `2.8`, `2.8-IV0`, `2.8-IV1`, `3.0`, `3.0-IV0`, `3.0-IV1`, `3.1`, `3.1-IV0`, `3.2`, `3.2-IV0`, `3.3`, `3.3-IV0`, `3.3-IV1`, `3.3-IV2`, `3.3-IV3`, `3.4`, `3.4-IV0`, `3.5`, `3.5-IV0`, `3.5-IV1`, `3.5-IV2`, `3.6`, `3.6-IV0`, `3.6-IV1`, `3.6-IV2`, `3.7`, `3.7-IV0`, `3.7-IV1`, `3.7-IV2`, `3.7-IV3`, `3.7-IV4`, `3.8`, `3.8-IV0`, `3.9`, `3.9-IV0`, `3.9-IV1`, `4.0`, `4.0-IV0`, `4.1` and `4.1-IV0`.
     * 
     */
    @Import(name="messageFormatVersion")
    private @Nullable Output<String> messageFormatVersion;

    /**
     * @return Specify the message format version the broker will use to append messages to the logs. The value should be a valid ApiVersion. Some examples are: 0.8.2, 0.9.0.0, 0.10.0, check ApiVersion for more details. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don&#39;t understand. The possible values are `0.10.0`, `0.10.0-IV0`, `0.10.0-IV1`, `0.10.1`, `0.10.1-IV0`, `0.10.1-IV1`, `0.10.1-IV2`, `0.10.2`, `0.10.2-IV0`, `0.11.0`, `0.11.0-IV0`, `0.11.0-IV1`, `0.11.0-IV2`, `0.8.0`, `0.8.1`, `0.8.2`, `0.9.0`, `1.0`, `1.0-IV0`, `1.1`, `1.1-IV0`, `2.0`, `2.0-IV0`, `2.0-IV1`, `2.1`, `2.1-IV0`, `2.1-IV1`, `2.1-IV2`, `2.2`, `2.2-IV0`, `2.2-IV1`, `2.3`, `2.3-IV0`, `2.3-IV1`, `2.4`, `2.4-IV0`, `2.4-IV1`, `2.5`, `2.5-IV0`, `2.6`, `2.6-IV0`, `2.7`, `2.7-IV0`, `2.7-IV1`, `2.7-IV2`, `2.8`, `2.8-IV0`, `2.8-IV1`, `3.0`, `3.0-IV0`, `3.0-IV1`, `3.1`, `3.1-IV0`, `3.2`, `3.2-IV0`, `3.3`, `3.3-IV0`, `3.3-IV1`, `3.3-IV2`, `3.3-IV3`, `3.4`, `3.4-IV0`, `3.5`, `3.5-IV0`, `3.5-IV1`, `3.5-IV2`, `3.6`, `3.6-IV0`, `3.6-IV1`, `3.6-IV2`, `3.7`, `3.7-IV0`, `3.7-IV1`, `3.7-IV2`, `3.7-IV3`, `3.7-IV4`, `3.8`, `3.8-IV0`, `3.9`, `3.9-IV0`, `3.9-IV1`, `4.0`, `4.0-IV0`, `4.1` and `4.1-IV0`.
     * 
     */
    public Optional<Output<String>> messageFormatVersion() {
        return Optional.ofNullable(this.messageFormatVersion);
    }

    /**
     * The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if message.timestamp.type=LogAppendTime.
     * 
     */
    @Import(name="messageTimestampDifferenceMaxMs")
    private @Nullable Output<String> messageTimestampDifferenceMaxMs;

    /**
     * @return The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if message.timestamp.type=LogAppendTime.
     * 
     */
    public Optional<Output<String>> messageTimestampDifferenceMaxMs() {
        return Optional.ofNullable(this.messageTimestampDifferenceMaxMs);
    }

    /**
     * Define whether the timestamp in the message is message create time or log append time. The possible values are `CreateTime` and `LogAppendTime`.
     * 
     */
    @Import(name="messageTimestampType")
    private @Nullable Output<String> messageTimestampType;

    /**
     * @return Define whether the timestamp in the message is message create time or log append time. The possible values are `CreateTime` and `LogAppendTime`.
     * 
     */
    public Optional<Output<String>> messageTimestampType() {
        return Optional.ofNullable(this.messageTimestampType);
    }

    /**
     * This configuration controls how frequently the log compactor will attempt to clean the log (assuming log compaction is enabled). By default we will avoid cleaning a log where more than 50% of the log has been compacted. This ratio bounds the maximum space wasted in the log by duplicates (at 50% at most 50% of the log could be duplicates). A higher ratio will mean fewer, more efficient cleanings but will mean more wasted space in the log. If the max.compaction.lag.ms or the min.compaction.lag.ms configurations are also specified, then the log compactor considers the log to be eligible for compaction as soon as either: (i) the dirty ratio threshold has been met and the log has had dirty (uncompacted) records for at least the min.compaction.lag.ms duration, or (ii) if the log has had dirty (uncompacted) records for at most the max.compaction.lag.ms period.
     * 
     */
    @Import(name="minCleanableDirtyRatio")
    private @Nullable Output<Double> minCleanableDirtyRatio;

    /**
     * @return This configuration controls how frequently the log compactor will attempt to clean the log (assuming log compaction is enabled). By default we will avoid cleaning a log where more than 50% of the log has been compacted. This ratio bounds the maximum space wasted in the log by duplicates (at 50% at most 50% of the log could be duplicates). A higher ratio will mean fewer, more efficient cleanings but will mean more wasted space in the log. If the max.compaction.lag.ms or the min.compaction.lag.ms configurations are also specified, then the log compactor considers the log to be eligible for compaction as soon as either: (i) the dirty ratio threshold has been met and the log has had dirty (uncompacted) records for at least the min.compaction.lag.ms duration, or (ii) if the log has had dirty (uncompacted) records for at most the max.compaction.lag.ms period.
     * 
     */
    public Optional<Output<Double>> minCleanableDirtyRatio() {
        return Optional.ofNullable(this.minCleanableDirtyRatio);
    }

    /**
     * The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
     * 
     */
    @Import(name="minCompactionLagMs")
    private @Nullable Output<String> minCompactionLagMs;

    /**
     * @return The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
     * 
     */
    public Optional<Output<String>> minCompactionLagMs() {
        return Optional.ofNullable(this.minCompactionLagMs);
    }

    /**
     * When a producer sets acks to &#39;all&#39; (or &#39;-1&#39;), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend). When used together, min.insync.replicas and acks allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set min.insync.replicas to 2, and produce with acks of &#39;all&#39;. This will ensure that the producer raises an exception if a majority of replicas do not receive a write.
     * 
     */
    @Import(name="minInsyncReplicas")
    private @Nullable Output<String> minInsyncReplicas;

    /**
     * @return When a producer sets acks to &#39;all&#39; (or &#39;-1&#39;), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend). When used together, min.insync.replicas and acks allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set min.insync.replicas to 2, and produce with acks of &#39;all&#39;. This will ensure that the producer raises an exception if a majority of replicas do not receive a write.
     * 
     */
    public Optional<Output<String>> minInsyncReplicas() {
        return Optional.ofNullable(this.minInsyncReplicas);
    }

    /**
     * True if we should preallocate the file on disk when creating a new log segment.
     * 
     */
    @Import(name="preallocate")
    private @Nullable Output<Boolean> preallocate;

    /**
     * @return True if we should preallocate the file on disk when creating a new log segment.
     * 
     */
    public Optional<Output<Boolean>> preallocate() {
        return Optional.ofNullable(this.preallocate);
    }

    /**
     * Indicates whether tiered storage should be enabled.
     * 
     */
    @Import(name="remoteStorageEnable")
    private @Nullable Output<Boolean> remoteStorageEnable;

    /**
     * @return Indicates whether tiered storage should be enabled.
     * 
     */
    public Optional<Output<Boolean>> remoteStorageEnable() {
        return Optional.ofNullable(this.remoteStorageEnable);
    }

    /**
     * This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the &#39;delete&#39; retention policy. By default there is no size limit only a time limit. Since this limit is enforced at the partition level, multiply it by the number of partitions to compute the topic retention in bytes.
     * 
     */
    @Import(name="retentionBytes")
    private @Nullable Output<String> retentionBytes;

    /**
     * @return This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the &#39;delete&#39; retention policy. By default there is no size limit only a time limit. Since this limit is enforced at the partition level, multiply it by the number of partitions to compute the topic retention in bytes.
     * 
     */
    public Optional<Output<String>> retentionBytes() {
        return Optional.ofNullable(this.retentionBytes);
    }

    /**
     * This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the &#39;delete&#39; retention policy. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied.
     * 
     */
    @Import(name="retentionMs")
    private @Nullable Output<String> retentionMs;

    /**
     * @return This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the &#39;delete&#39; retention policy. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied.
     * 
     */
    public Optional<Output<String>> retentionMs() {
        return Optional.ofNullable(this.retentionMs);
    }

    /**
     * This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.
     * 
     */
    @Import(name="segmentBytes")
    private @Nullable Output<String> segmentBytes;

    /**
     * @return This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.
     * 
     */
    public Optional<Output<String>> segmentBytes() {
        return Optional.ofNullable(this.segmentBytes);
    }

    /**
     * This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.
     * 
     */
    @Import(name="segmentIndexBytes")
    private @Nullable Output<String> segmentIndexBytes;

    /**
     * @return This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.
     * 
     */
    public Optional<Output<String>> segmentIndexBytes() {
        return Optional.ofNullable(this.segmentIndexBytes);
    }

    /**
     * The maximum random jitter subtracted from the scheduled segment roll time to avoid thundering herds of segment rolling
     * 
     */
    @Import(name="segmentJitterMs")
    private @Nullable Output<String> segmentJitterMs;

    /**
     * @return The maximum random jitter subtracted from the scheduled segment roll time to avoid thundering herds of segment rolling
     * 
     */
    public Optional<Output<String>> segmentJitterMs() {
        return Optional.ofNullable(this.segmentJitterMs);
    }

    /**
     * This configuration controls the period of time after which Kafka will force the log to roll even if the segment file isn&#39;t full to ensure that retention can delete or compact old data. Setting this to a very low value has consequences, and the Aiven management plane ignores values less than 10 seconds.
     * 
     */
    @Import(name="segmentMs")
    private @Nullable Output<String> segmentMs;

    /**
     * @return This configuration controls the period of time after which Kafka will force the log to roll even if the segment file isn&#39;t full to ensure that retention can delete or compact old data. Setting this to a very low value has consequences, and the Aiven management plane ignores values less than 10 seconds.
     * 
     */
    public Optional<Output<String>> segmentMs() {
        return Optional.ofNullable(this.segmentMs);
    }

    /**
     * Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss.
     * 
     */
    @Import(name="uncleanLeaderElectionEnable")
    private @Nullable Output<Boolean> uncleanLeaderElectionEnable;

    /**
     * @return Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss.
     * 
     */
    public Optional<Output<Boolean>> uncleanLeaderElectionEnable() {
        return Optional.ofNullable(this.uncleanLeaderElectionEnable);
    }

    private KafkaTopicConfigArgs() {}

    private KafkaTopicConfigArgs(KafkaTopicConfigArgs $) {
        this.cleanupPolicy = $.cleanupPolicy;
        this.compressionType = $.compressionType;
        this.deleteRetentionMs = $.deleteRetentionMs;
        this.fileDeleteDelayMs = $.fileDeleteDelayMs;
        this.flushMessages = $.flushMessages;
        this.flushMs = $.flushMs;
        this.indexIntervalBytes = $.indexIntervalBytes;
        this.inklessEnable = $.inklessEnable;
        this.localRetentionBytes = $.localRetentionBytes;
        this.localRetentionMs = $.localRetentionMs;
        this.maxCompactionLagMs = $.maxCompactionLagMs;
        this.maxMessageBytes = $.maxMessageBytes;
        this.messageDownconversionEnable = $.messageDownconversionEnable;
        this.messageFormatVersion = $.messageFormatVersion;
        this.messageTimestampDifferenceMaxMs = $.messageTimestampDifferenceMaxMs;
        this.messageTimestampType = $.messageTimestampType;
        this.minCleanableDirtyRatio = $.minCleanableDirtyRatio;
        this.minCompactionLagMs = $.minCompactionLagMs;
        this.minInsyncReplicas = $.minInsyncReplicas;
        this.preallocate = $.preallocate;
        this.remoteStorageEnable = $.remoteStorageEnable;
        this.retentionBytes = $.retentionBytes;
        this.retentionMs = $.retentionMs;
        this.segmentBytes = $.segmentBytes;
        this.segmentIndexBytes = $.segmentIndexBytes;
        this.segmentJitterMs = $.segmentJitterMs;
        this.segmentMs = $.segmentMs;
        this.uncleanLeaderElectionEnable = $.uncleanLeaderElectionEnable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaTopicConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaTopicConfigArgs $;

        public Builder() {
            $ = new KafkaTopicConfigArgs();
        }

        public Builder(KafkaTopicConfigArgs defaults) {
            $ = new KafkaTopicConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cleanupPolicy The retention policy to use on old segments. Possible values include &#39;delete&#39;, &#39;compact&#39;, or a comma-separated list of them. The default policy (&#39;delete&#39;) will discard old segments when their retention time or size limit has been reached. The &#39;compact&#39; setting will enable log compaction on the topic. The possible values are `compact`, `compact,delete` and `delete`.
         * 
         * @return builder
         * 
         */
        public Builder cleanupPolicy(@Nullable Output<String> cleanupPolicy) {
            $.cleanupPolicy = cleanupPolicy;
            return this;
        }

        /**
         * @param cleanupPolicy The retention policy to use on old segments. Possible values include &#39;delete&#39;, &#39;compact&#39;, or a comma-separated list of them. The default policy (&#39;delete&#39;) will discard old segments when their retention time or size limit has been reached. The &#39;compact&#39; setting will enable log compaction on the topic. The possible values are `compact`, `compact,delete` and `delete`.
         * 
         * @return builder
         * 
         */
        public Builder cleanupPolicy(String cleanupPolicy) {
            return cleanupPolicy(Output.of(cleanupPolicy));
        }

        /**
         * @param compressionType Specify the final compression type for a given topic. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;uncompressed&#39; which is equivalent to no compression; and &#39;producer&#39; which means retain the original compression codec set by the producer. The possible values are `gzip`, `lz4`, `producer`, `snappy`, `uncompressed` and `zstd`.
         * 
         * @return builder
         * 
         */
        public Builder compressionType(@Nullable Output<String> compressionType) {
            $.compressionType = compressionType;
            return this;
        }

        /**
         * @param compressionType Specify the final compression type for a given topic. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;uncompressed&#39; which is equivalent to no compression; and &#39;producer&#39; which means retain the original compression codec set by the producer. The possible values are `gzip`, `lz4`, `producer`, `snappy`, `uncompressed` and `zstd`.
         * 
         * @return builder
         * 
         */
        public Builder compressionType(String compressionType) {
            return compressionType(Output.of(compressionType));
        }

        /**
         * @param deleteRetentionMs The amount of time to retain delete tombstone markers for log compacted topics. This setting also gives a bound on the time in which a consumer must complete a read if they begin from offset 0 to ensure that they get a valid snapshot of the final stage (otherwise delete tombstones may be collected before they complete their scan).
         * 
         * @return builder
         * 
         */
        public Builder deleteRetentionMs(@Nullable Output<String> deleteRetentionMs) {
            $.deleteRetentionMs = deleteRetentionMs;
            return this;
        }

        /**
         * @param deleteRetentionMs The amount of time to retain delete tombstone markers for log compacted topics. This setting also gives a bound on the time in which a consumer must complete a read if they begin from offset 0 to ensure that they get a valid snapshot of the final stage (otherwise delete tombstones may be collected before they complete their scan).
         * 
         * @return builder
         * 
         */
        public Builder deleteRetentionMs(String deleteRetentionMs) {
            return deleteRetentionMs(Output.of(deleteRetentionMs));
        }

        /**
         * @param fileDeleteDelayMs The time to wait before deleting a file from the filesystem.
         * 
         * @return builder
         * 
         */
        public Builder fileDeleteDelayMs(@Nullable Output<String> fileDeleteDelayMs) {
            $.fileDeleteDelayMs = fileDeleteDelayMs;
            return this;
        }

        /**
         * @param fileDeleteDelayMs The time to wait before deleting a file from the filesystem.
         * 
         * @return builder
         * 
         */
        public Builder fileDeleteDelayMs(String fileDeleteDelayMs) {
            return fileDeleteDelayMs(Output.of(fileDeleteDelayMs));
        }

        /**
         * @param flushMessages This setting allows specifying an interval at which we will force an fsync of data written to the log. For example if this was set to 1 we would fsync after every message; if it were 5 we would fsync after every five messages. In general we recommend you not set this and use replication for durability and allow the operating system&#39;s background flush capabilities as it is more efficient.
         * 
         * @return builder
         * 
         */
        public Builder flushMessages(@Nullable Output<String> flushMessages) {
            $.flushMessages = flushMessages;
            return this;
        }

        /**
         * @param flushMessages This setting allows specifying an interval at which we will force an fsync of data written to the log. For example if this was set to 1 we would fsync after every message; if it were 5 we would fsync after every five messages. In general we recommend you not set this and use replication for durability and allow the operating system&#39;s background flush capabilities as it is more efficient.
         * 
         * @return builder
         * 
         */
        public Builder flushMessages(String flushMessages) {
            return flushMessages(Output.of(flushMessages));
        }

        /**
         * @param flushMs This setting allows specifying a time interval at which we will force an fsync of data written to the log. For example if this was set to 1000 we would fsync after 1000 ms had passed. In general we recommend you not set this and use replication for durability and allow the operating system&#39;s background flush capabilities as it is more efficient.
         * 
         * @return builder
         * 
         */
        public Builder flushMs(@Nullable Output<String> flushMs) {
            $.flushMs = flushMs;
            return this;
        }

        /**
         * @param flushMs This setting allows specifying a time interval at which we will force an fsync of data written to the log. For example if this was set to 1000 we would fsync after 1000 ms had passed. In general we recommend you not set this and use replication for durability and allow the operating system&#39;s background flush capabilities as it is more efficient.
         * 
         * @return builder
         * 
         */
        public Builder flushMs(String flushMs) {
            return flushMs(Output.of(flushMs));
        }

        /**
         * @param indexIntervalBytes This setting controls how frequently Kafka adds an index entry to its offset index. The default setting ensures that we index a message roughly every 4096 bytes. More indexing allows reads to jump closer to the exact position in the log but makes the index larger. You probably don&#39;t need to change this.
         * 
         * @return builder
         * 
         */
        public Builder indexIntervalBytes(@Nullable Output<String> indexIntervalBytes) {
            $.indexIntervalBytes = indexIntervalBytes;
            return this;
        }

        /**
         * @param indexIntervalBytes This setting controls how frequently Kafka adds an index entry to its offset index. The default setting ensures that we index a message roughly every 4096 bytes. More indexing allows reads to jump closer to the exact position in the log but makes the index larger. You probably don&#39;t need to change this.
         * 
         * @return builder
         * 
         */
        public Builder indexIntervalBytes(String indexIntervalBytes) {
            return indexIntervalBytes(Output.of(indexIntervalBytes));
        }

        /**
         * @param inklessEnable Creates a [diskless topic](https://aiven.io/docs/products/diskless). You can only do this when you create the topic and you cannot change it later. Diskless topics are only available for bring your own cloud (BYOC) services that have the feature enabled.
         * 
         * @return builder
         * 
         */
        public Builder inklessEnable(@Nullable Output<Boolean> inklessEnable) {
            $.inklessEnable = inklessEnable;
            return this;
        }

        /**
         * @param inklessEnable Creates a [diskless topic](https://aiven.io/docs/products/diskless). You can only do this when you create the topic and you cannot change it later. Diskless topics are only available for bring your own cloud (BYOC) services that have the feature enabled.
         * 
         * @return builder
         * 
         */
        public Builder inklessEnable(Boolean inklessEnable) {
            return inklessEnable(Output.of(inklessEnable));
        }

        /**
         * @param localRetentionBytes This configuration controls the maximum bytes tiered storage will retain segment files locally before it will discard old log segments to free up space. If set to -2, the limit is equal to overall retention time. If set to -1, no limit is applied but it&#39;s possible only if overall retention is also -1.
         * 
         * @return builder
         * 
         */
        public Builder localRetentionBytes(@Nullable Output<String> localRetentionBytes) {
            $.localRetentionBytes = localRetentionBytes;
            return this;
        }

        /**
         * @param localRetentionBytes This configuration controls the maximum bytes tiered storage will retain segment files locally before it will discard old log segments to free up space. If set to -2, the limit is equal to overall retention time. If set to -1, no limit is applied but it&#39;s possible only if overall retention is also -1.
         * 
         * @return builder
         * 
         */
        public Builder localRetentionBytes(String localRetentionBytes) {
            return localRetentionBytes(Output.of(localRetentionBytes));
        }

        /**
         * @param localRetentionMs This configuration controls the maximum time tiered storage will retain segment files locally before it will discard old log segments to free up space. If set to -2, the time limit is equal to overall retention time. If set to -1, no time limit is applied but it&#39;s possible only if overall retention is also -1.
         * 
         * @return builder
         * 
         */
        public Builder localRetentionMs(@Nullable Output<String> localRetentionMs) {
            $.localRetentionMs = localRetentionMs;
            return this;
        }

        /**
         * @param localRetentionMs This configuration controls the maximum time tiered storage will retain segment files locally before it will discard old log segments to free up space. If set to -2, the time limit is equal to overall retention time. If set to -1, no time limit is applied but it&#39;s possible only if overall retention is also -1.
         * 
         * @return builder
         * 
         */
        public Builder localRetentionMs(String localRetentionMs) {
            return localRetentionMs(Output.of(localRetentionMs));
        }

        /**
         * @param maxCompactionLagMs The maximum time a message will remain ineligible for compaction in the log. Only applicable for logs that are being compacted.
         * 
         * @return builder
         * 
         */
        public Builder maxCompactionLagMs(@Nullable Output<String> maxCompactionLagMs) {
            $.maxCompactionLagMs = maxCompactionLagMs;
            return this;
        }

        /**
         * @param maxCompactionLagMs The maximum time a message will remain ineligible for compaction in the log. Only applicable for logs that are being compacted.
         * 
         * @return builder
         * 
         */
        public Builder maxCompactionLagMs(String maxCompactionLagMs) {
            return maxCompactionLagMs(Output.of(maxCompactionLagMs));
        }

        /**
         * @param maxMessageBytes The largest record batch size allowed by Kafka (after compression if compression is enabled). If this is increased and there are consumers older than 0.10.2, the consumers&#39; fetch size must also be increased so that the they can fetch record batches this large. In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case.
         * 
         * @return builder
         * 
         */
        public Builder maxMessageBytes(@Nullable Output<String> maxMessageBytes) {
            $.maxMessageBytes = maxMessageBytes;
            return this;
        }

        /**
         * @param maxMessageBytes The largest record batch size allowed by Kafka (after compression if compression is enabled). If this is increased and there are consumers older than 0.10.2, the consumers&#39; fetch size must also be increased so that the they can fetch record batches this large. In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case.
         * 
         * @return builder
         * 
         */
        public Builder maxMessageBytes(String maxMessageBytes) {
            return maxMessageBytes(Output.of(maxMessageBytes));
        }

        /**
         * @param messageDownconversionEnable This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to false, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with UNSUPPORTED_VERSION error for consume requests from such older clients. This configuration does not apply to any message format conversion that might be required for replication to followers.
         * 
         * @return builder
         * 
         */
        public Builder messageDownconversionEnable(@Nullable Output<Boolean> messageDownconversionEnable) {
            $.messageDownconversionEnable = messageDownconversionEnable;
            return this;
        }

        /**
         * @param messageDownconversionEnable This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to false, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with UNSUPPORTED_VERSION error for consume requests from such older clients. This configuration does not apply to any message format conversion that might be required for replication to followers.
         * 
         * @return builder
         * 
         */
        public Builder messageDownconversionEnable(Boolean messageDownconversionEnable) {
            return messageDownconversionEnable(Output.of(messageDownconversionEnable));
        }

        /**
         * @param messageFormatVersion Specify the message format version the broker will use to append messages to the logs. The value should be a valid ApiVersion. Some examples are: 0.8.2, 0.9.0.0, 0.10.0, check ApiVersion for more details. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don&#39;t understand. The possible values are `0.10.0`, `0.10.0-IV0`, `0.10.0-IV1`, `0.10.1`, `0.10.1-IV0`, `0.10.1-IV1`, `0.10.1-IV2`, `0.10.2`, `0.10.2-IV0`, `0.11.0`, `0.11.0-IV0`, `0.11.0-IV1`, `0.11.0-IV2`, `0.8.0`, `0.8.1`, `0.8.2`, `0.9.0`, `1.0`, `1.0-IV0`, `1.1`, `1.1-IV0`, `2.0`, `2.0-IV0`, `2.0-IV1`, `2.1`, `2.1-IV0`, `2.1-IV1`, `2.1-IV2`, `2.2`, `2.2-IV0`, `2.2-IV1`, `2.3`, `2.3-IV0`, `2.3-IV1`, `2.4`, `2.4-IV0`, `2.4-IV1`, `2.5`, `2.5-IV0`, `2.6`, `2.6-IV0`, `2.7`, `2.7-IV0`, `2.7-IV1`, `2.7-IV2`, `2.8`, `2.8-IV0`, `2.8-IV1`, `3.0`, `3.0-IV0`, `3.0-IV1`, `3.1`, `3.1-IV0`, `3.2`, `3.2-IV0`, `3.3`, `3.3-IV0`, `3.3-IV1`, `3.3-IV2`, `3.3-IV3`, `3.4`, `3.4-IV0`, `3.5`, `3.5-IV0`, `3.5-IV1`, `3.5-IV2`, `3.6`, `3.6-IV0`, `3.6-IV1`, `3.6-IV2`, `3.7`, `3.7-IV0`, `3.7-IV1`, `3.7-IV2`, `3.7-IV3`, `3.7-IV4`, `3.8`, `3.8-IV0`, `3.9`, `3.9-IV0`, `3.9-IV1`, `4.0`, `4.0-IV0`, `4.1` and `4.1-IV0`.
         * 
         * @return builder
         * 
         */
        public Builder messageFormatVersion(@Nullable Output<String> messageFormatVersion) {
            $.messageFormatVersion = messageFormatVersion;
            return this;
        }

        /**
         * @param messageFormatVersion Specify the message format version the broker will use to append messages to the logs. The value should be a valid ApiVersion. Some examples are: 0.8.2, 0.9.0.0, 0.10.0, check ApiVersion for more details. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don&#39;t understand. The possible values are `0.10.0`, `0.10.0-IV0`, `0.10.0-IV1`, `0.10.1`, `0.10.1-IV0`, `0.10.1-IV1`, `0.10.1-IV2`, `0.10.2`, `0.10.2-IV0`, `0.11.0`, `0.11.0-IV0`, `0.11.0-IV1`, `0.11.0-IV2`, `0.8.0`, `0.8.1`, `0.8.2`, `0.9.0`, `1.0`, `1.0-IV0`, `1.1`, `1.1-IV0`, `2.0`, `2.0-IV0`, `2.0-IV1`, `2.1`, `2.1-IV0`, `2.1-IV1`, `2.1-IV2`, `2.2`, `2.2-IV0`, `2.2-IV1`, `2.3`, `2.3-IV0`, `2.3-IV1`, `2.4`, `2.4-IV0`, `2.4-IV1`, `2.5`, `2.5-IV0`, `2.6`, `2.6-IV0`, `2.7`, `2.7-IV0`, `2.7-IV1`, `2.7-IV2`, `2.8`, `2.8-IV0`, `2.8-IV1`, `3.0`, `3.0-IV0`, `3.0-IV1`, `3.1`, `3.1-IV0`, `3.2`, `3.2-IV0`, `3.3`, `3.3-IV0`, `3.3-IV1`, `3.3-IV2`, `3.3-IV3`, `3.4`, `3.4-IV0`, `3.5`, `3.5-IV0`, `3.5-IV1`, `3.5-IV2`, `3.6`, `3.6-IV0`, `3.6-IV1`, `3.6-IV2`, `3.7`, `3.7-IV0`, `3.7-IV1`, `3.7-IV2`, `3.7-IV3`, `3.7-IV4`, `3.8`, `3.8-IV0`, `3.9`, `3.9-IV0`, `3.9-IV1`, `4.0`, `4.0-IV0`, `4.1` and `4.1-IV0`.
         * 
         * @return builder
         * 
         */
        public Builder messageFormatVersion(String messageFormatVersion) {
            return messageFormatVersion(Output.of(messageFormatVersion));
        }

        /**
         * @param messageTimestampDifferenceMaxMs The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if message.timestamp.type=LogAppendTime.
         * 
         * @return builder
         * 
         */
        public Builder messageTimestampDifferenceMaxMs(@Nullable Output<String> messageTimestampDifferenceMaxMs) {
            $.messageTimestampDifferenceMaxMs = messageTimestampDifferenceMaxMs;
            return this;
        }

        /**
         * @param messageTimestampDifferenceMaxMs The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if message.timestamp.type=LogAppendTime.
         * 
         * @return builder
         * 
         */
        public Builder messageTimestampDifferenceMaxMs(String messageTimestampDifferenceMaxMs) {
            return messageTimestampDifferenceMaxMs(Output.of(messageTimestampDifferenceMaxMs));
        }

        /**
         * @param messageTimestampType Define whether the timestamp in the message is message create time or log append time. The possible values are `CreateTime` and `LogAppendTime`.
         * 
         * @return builder
         * 
         */
        public Builder messageTimestampType(@Nullable Output<String> messageTimestampType) {
            $.messageTimestampType = messageTimestampType;
            return this;
        }

        /**
         * @param messageTimestampType Define whether the timestamp in the message is message create time or log append time. The possible values are `CreateTime` and `LogAppendTime`.
         * 
         * @return builder
         * 
         */
        public Builder messageTimestampType(String messageTimestampType) {
            return messageTimestampType(Output.of(messageTimestampType));
        }

        /**
         * @param minCleanableDirtyRatio This configuration controls how frequently the log compactor will attempt to clean the log (assuming log compaction is enabled). By default we will avoid cleaning a log where more than 50% of the log has been compacted. This ratio bounds the maximum space wasted in the log by duplicates (at 50% at most 50% of the log could be duplicates). A higher ratio will mean fewer, more efficient cleanings but will mean more wasted space in the log. If the max.compaction.lag.ms or the min.compaction.lag.ms configurations are also specified, then the log compactor considers the log to be eligible for compaction as soon as either: (i) the dirty ratio threshold has been met and the log has had dirty (uncompacted) records for at least the min.compaction.lag.ms duration, or (ii) if the log has had dirty (uncompacted) records for at most the max.compaction.lag.ms period.
         * 
         * @return builder
         * 
         */
        public Builder minCleanableDirtyRatio(@Nullable Output<Double> minCleanableDirtyRatio) {
            $.minCleanableDirtyRatio = minCleanableDirtyRatio;
            return this;
        }

        /**
         * @param minCleanableDirtyRatio This configuration controls how frequently the log compactor will attempt to clean the log (assuming log compaction is enabled). By default we will avoid cleaning a log where more than 50% of the log has been compacted. This ratio bounds the maximum space wasted in the log by duplicates (at 50% at most 50% of the log could be duplicates). A higher ratio will mean fewer, more efficient cleanings but will mean more wasted space in the log. If the max.compaction.lag.ms or the min.compaction.lag.ms configurations are also specified, then the log compactor considers the log to be eligible for compaction as soon as either: (i) the dirty ratio threshold has been met and the log has had dirty (uncompacted) records for at least the min.compaction.lag.ms duration, or (ii) if the log has had dirty (uncompacted) records for at most the max.compaction.lag.ms period.
         * 
         * @return builder
         * 
         */
        public Builder minCleanableDirtyRatio(Double minCleanableDirtyRatio) {
            return minCleanableDirtyRatio(Output.of(minCleanableDirtyRatio));
        }

        /**
         * @param minCompactionLagMs The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
         * 
         * @return builder
         * 
         */
        public Builder minCompactionLagMs(@Nullable Output<String> minCompactionLagMs) {
            $.minCompactionLagMs = minCompactionLagMs;
            return this;
        }

        /**
         * @param minCompactionLagMs The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
         * 
         * @return builder
         * 
         */
        public Builder minCompactionLagMs(String minCompactionLagMs) {
            return minCompactionLagMs(Output.of(minCompactionLagMs));
        }

        /**
         * @param minInsyncReplicas When a producer sets acks to &#39;all&#39; (or &#39;-1&#39;), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend). When used together, min.insync.replicas and acks allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set min.insync.replicas to 2, and produce with acks of &#39;all&#39;. This will ensure that the producer raises an exception if a majority of replicas do not receive a write.
         * 
         * @return builder
         * 
         */
        public Builder minInsyncReplicas(@Nullable Output<String> minInsyncReplicas) {
            $.minInsyncReplicas = minInsyncReplicas;
            return this;
        }

        /**
         * @param minInsyncReplicas When a producer sets acks to &#39;all&#39; (or &#39;-1&#39;), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend). When used together, min.insync.replicas and acks allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set min.insync.replicas to 2, and produce with acks of &#39;all&#39;. This will ensure that the producer raises an exception if a majority of replicas do not receive a write.
         * 
         * @return builder
         * 
         */
        public Builder minInsyncReplicas(String minInsyncReplicas) {
            return minInsyncReplicas(Output.of(minInsyncReplicas));
        }

        /**
         * @param preallocate True if we should preallocate the file on disk when creating a new log segment.
         * 
         * @return builder
         * 
         */
        public Builder preallocate(@Nullable Output<Boolean> preallocate) {
            $.preallocate = preallocate;
            return this;
        }

        /**
         * @param preallocate True if we should preallocate the file on disk when creating a new log segment.
         * 
         * @return builder
         * 
         */
        public Builder preallocate(Boolean preallocate) {
            return preallocate(Output.of(preallocate));
        }

        /**
         * @param remoteStorageEnable Indicates whether tiered storage should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder remoteStorageEnable(@Nullable Output<Boolean> remoteStorageEnable) {
            $.remoteStorageEnable = remoteStorageEnable;
            return this;
        }

        /**
         * @param remoteStorageEnable Indicates whether tiered storage should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder remoteStorageEnable(Boolean remoteStorageEnable) {
            return remoteStorageEnable(Output.of(remoteStorageEnable));
        }

        /**
         * @param retentionBytes This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the &#39;delete&#39; retention policy. By default there is no size limit only a time limit. Since this limit is enforced at the partition level, multiply it by the number of partitions to compute the topic retention in bytes.
         * 
         * @return builder
         * 
         */
        public Builder retentionBytes(@Nullable Output<String> retentionBytes) {
            $.retentionBytes = retentionBytes;
            return this;
        }

        /**
         * @param retentionBytes This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the &#39;delete&#39; retention policy. By default there is no size limit only a time limit. Since this limit is enforced at the partition level, multiply it by the number of partitions to compute the topic retention in bytes.
         * 
         * @return builder
         * 
         */
        public Builder retentionBytes(String retentionBytes) {
            return retentionBytes(Output.of(retentionBytes));
        }

        /**
         * @param retentionMs This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the &#39;delete&#39; retention policy. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied.
         * 
         * @return builder
         * 
         */
        public Builder retentionMs(@Nullable Output<String> retentionMs) {
            $.retentionMs = retentionMs;
            return this;
        }

        /**
         * @param retentionMs This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the &#39;delete&#39; retention policy. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied.
         * 
         * @return builder
         * 
         */
        public Builder retentionMs(String retentionMs) {
            return retentionMs(Output.of(retentionMs));
        }

        /**
         * @param segmentBytes This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.
         * 
         * @return builder
         * 
         */
        public Builder segmentBytes(@Nullable Output<String> segmentBytes) {
            $.segmentBytes = segmentBytes;
            return this;
        }

        /**
         * @param segmentBytes This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.
         * 
         * @return builder
         * 
         */
        public Builder segmentBytes(String segmentBytes) {
            return segmentBytes(Output.of(segmentBytes));
        }

        /**
         * @param segmentIndexBytes This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.
         * 
         * @return builder
         * 
         */
        public Builder segmentIndexBytes(@Nullable Output<String> segmentIndexBytes) {
            $.segmentIndexBytes = segmentIndexBytes;
            return this;
        }

        /**
         * @param segmentIndexBytes This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.
         * 
         * @return builder
         * 
         */
        public Builder segmentIndexBytes(String segmentIndexBytes) {
            return segmentIndexBytes(Output.of(segmentIndexBytes));
        }

        /**
         * @param segmentJitterMs The maximum random jitter subtracted from the scheduled segment roll time to avoid thundering herds of segment rolling
         * 
         * @return builder
         * 
         */
        public Builder segmentJitterMs(@Nullable Output<String> segmentJitterMs) {
            $.segmentJitterMs = segmentJitterMs;
            return this;
        }

        /**
         * @param segmentJitterMs The maximum random jitter subtracted from the scheduled segment roll time to avoid thundering herds of segment rolling
         * 
         * @return builder
         * 
         */
        public Builder segmentJitterMs(String segmentJitterMs) {
            return segmentJitterMs(Output.of(segmentJitterMs));
        }

        /**
         * @param segmentMs This configuration controls the period of time after which Kafka will force the log to roll even if the segment file isn&#39;t full to ensure that retention can delete or compact old data. Setting this to a very low value has consequences, and the Aiven management plane ignores values less than 10 seconds.
         * 
         * @return builder
         * 
         */
        public Builder segmentMs(@Nullable Output<String> segmentMs) {
            $.segmentMs = segmentMs;
            return this;
        }

        /**
         * @param segmentMs This configuration controls the period of time after which Kafka will force the log to roll even if the segment file isn&#39;t full to ensure that retention can delete or compact old data. Setting this to a very low value has consequences, and the Aiven management plane ignores values less than 10 seconds.
         * 
         * @return builder
         * 
         */
        public Builder segmentMs(String segmentMs) {
            return segmentMs(Output.of(segmentMs));
        }

        /**
         * @param uncleanLeaderElectionEnable Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss.
         * 
         * @return builder
         * 
         */
        public Builder uncleanLeaderElectionEnable(@Nullable Output<Boolean> uncleanLeaderElectionEnable) {
            $.uncleanLeaderElectionEnable = uncleanLeaderElectionEnable;
            return this;
        }

        /**
         * @param uncleanLeaderElectionEnable Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss.
         * 
         * @return builder
         * 
         */
        public Builder uncleanLeaderElectionEnable(Boolean uncleanLeaderElectionEnable) {
            return uncleanLeaderElectionEnable(Output.of(uncleanLeaderElectionEnable));
        }

        public KafkaTopicConfigArgs build() {
            return $;
        }
    }

}
