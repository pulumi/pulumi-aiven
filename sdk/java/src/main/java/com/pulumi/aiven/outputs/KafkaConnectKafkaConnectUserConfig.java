// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigKafkaConnect;
import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigPluginVersion;
import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigPublicAccess;
import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigSecretProvider;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KafkaConnectKafkaConnectUserConfig {
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    private @Nullable String additionalBackupRegions;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    private @Nullable List<KafkaConnectKafkaConnectUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return Kafka Connect configuration values
     * 
     */
    private @Nullable KafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect;
    /**
     * @return The plugin selected by the user
     * 
     */
    private @Nullable List<KafkaConnectKafkaConnectUserConfigPluginVersion> pluginVersions;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private @Nullable KafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private @Nullable KafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable KafkaConnectKafkaConnectUserConfigPublicAccess publicAccess;
    private @Nullable List<KafkaConnectKafkaConnectUserConfigSecretProvider> secretProviders;
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Use static public IP addresses.
     * 
     */
    private @Nullable Boolean staticIps;

    private KafkaConnectKafkaConnectUserConfig() {}
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public List<KafkaConnectKafkaConnectUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Kafka Connect configuration values
     * 
     */
    public Optional<KafkaConnectKafkaConnectUserConfigKafkaConnect> kafkaConnect() {
        return Optional.ofNullable(this.kafkaConnect);
    }
    /**
     * @return The plugin selected by the user
     * 
     */
    public List<KafkaConnectKafkaConnectUserConfigPluginVersion> pluginVersions() {
        return this.pluginVersions == null ? List.of() : this.pluginVersions;
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<KafkaConnectKafkaConnectUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<KafkaConnectKafkaConnectUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<KafkaConnectKafkaConnectUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public List<KafkaConnectKafkaConnectUserConfigSecretProvider> secretProviders() {
        return this.secretProviders == null ? List.of() : this.secretProviders;
    }
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KafkaConnectKafkaConnectUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable List<KafkaConnectKafkaConnectUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable KafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect;
        private @Nullable List<KafkaConnectKafkaConnectUserConfigPluginVersion> pluginVersions;
        private @Nullable KafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess;
        private @Nullable KafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable KafkaConnectKafkaConnectUserConfigPublicAccess publicAccess;
        private @Nullable List<KafkaConnectKafkaConnectUserConfigSecretProvider> secretProviders;
        private @Nullable Boolean serviceLog;
        private @Nullable Boolean staticIps;
        public Builder() {}
        public Builder(KafkaConnectKafkaConnectUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.kafkaConnect = defaults.kafkaConnect;
    	      this.pluginVersions = defaults.pluginVersions;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.publicAccess = defaults.publicAccess;
    	      this.secretProviders = defaults.secretProviders;
    	      this.serviceLog = defaults.serviceLog;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {

            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<KafkaConnectKafkaConnectUserConfigIpFilterObject> ipFilterObjects) {

            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(KafkaConnectKafkaConnectUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {

            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder kafkaConnect(@Nullable KafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect) {

            this.kafkaConnect = kafkaConnect;
            return this;
        }
        @CustomType.Setter
        public Builder pluginVersions(@Nullable List<KafkaConnectKafkaConnectUserConfigPluginVersion> pluginVersions) {

            this.pluginVersions = pluginVersions;
            return this;
        }
        public Builder pluginVersions(KafkaConnectKafkaConnectUserConfigPluginVersion... pluginVersions) {
            return pluginVersions(List.of(pluginVersions));
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable KafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess) {

            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable KafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess) {

            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable KafkaConnectKafkaConnectUserConfigPublicAccess publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder secretProviders(@Nullable List<KafkaConnectKafkaConnectUserConfigSecretProvider> secretProviders) {

            this.secretProviders = secretProviders;
            return this;
        }
        public Builder secretProviders(KafkaConnectKafkaConnectUserConfigSecretProvider... secretProviders) {
            return secretProviders(List.of(secretProviders));
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {

            this.staticIps = staticIps;
            return this;
        }
        public KafkaConnectKafkaConnectUserConfig build() {
            final var _resultValue = new KafkaConnectKafkaConnectUserConfig();
            _resultValue.additionalBackupRegions = additionalBackupRegions;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.kafkaConnect = kafkaConnect;
            _resultValue.pluginVersions = pluginVersions;
            _resultValue.privateAccess = privateAccess;
            _resultValue.privatelinkAccess = privatelinkAccess;
            _resultValue.publicAccess = publicAccess;
            _resultValue.secretProviders = secretProviders;
            _resultValue.serviceLog = serviceLog;
            _resultValue.staticIps = staticIps;
            return _resultValue;
        }
    }
}
