// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigKafkaConnect;
import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.KafkaConnectKafkaConnectUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KafkaConnectKafkaConnectUserConfig {
    private final @Nullable List<String> ipFilters;
    private final @Nullable KafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect;
    private final @Nullable KafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess;
    private final @Nullable KafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess;
    private final @Nullable KafkaConnectKafkaConnectUserConfigPublicAccess publicAccess;
    private final @Nullable String staticIps;

    @CustomType.Constructor
    private KafkaConnectKafkaConnectUserConfig(
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("kafkaConnect") @Nullable KafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect,
        @CustomType.Parameter("privateAccess") @Nullable KafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess,
        @CustomType.Parameter("privatelinkAccess") @Nullable KafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess,
        @CustomType.Parameter("publicAccess") @Nullable KafkaConnectKafkaConnectUserConfigPublicAccess publicAccess,
        @CustomType.Parameter("staticIps") @Nullable String staticIps) {
        this.ipFilters = ipFilters;
        this.kafkaConnect = kafkaConnect;
        this.privateAccess = privateAccess;
        this.privatelinkAccess = privatelinkAccess;
        this.publicAccess = publicAccess;
        this.staticIps = staticIps;
    }

    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<KafkaConnectKafkaConnectUserConfigKafkaConnect> kafkaConnect() {
        return Optional.ofNullable(this.kafkaConnect);
    }
    public Optional<KafkaConnectKafkaConnectUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<KafkaConnectKafkaConnectUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    public Optional<KafkaConnectKafkaConnectUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KafkaConnectKafkaConnectUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> ipFilters;
        private @Nullable KafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect;
        private @Nullable KafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess;
        private @Nullable KafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable KafkaConnectKafkaConnectUserConfigPublicAccess publicAccess;
        private @Nullable String staticIps;

        public Builder() {
    	      // Empty
        }

        public Builder(KafkaConnectKafkaConnectUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipFilters = defaults.ipFilters;
    	      this.kafkaConnect = defaults.kafkaConnect;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.publicAccess = defaults.publicAccess;
    	      this.staticIps = defaults.staticIps;
        }

        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder kafkaConnect(@Nullable KafkaConnectKafkaConnectUserConfigKafkaConnect kafkaConnect) {
            this.kafkaConnect = kafkaConnect;
            return this;
        }
        public Builder privateAccess(@Nullable KafkaConnectKafkaConnectUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        public Builder privatelinkAccess(@Nullable KafkaConnectKafkaConnectUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        public Builder publicAccess(@Nullable KafkaConnectKafkaConnectUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }        public KafkaConnectKafkaConnectUserConfig build() {
            return new KafkaConnectKafkaConnectUserConfig(ipFilters, kafkaConnect, privateAccess, privatelinkAccess, publicAccess, staticIps);
        }
    }
}
