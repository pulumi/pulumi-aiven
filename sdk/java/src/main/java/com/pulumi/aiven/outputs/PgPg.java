// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PgPg {
    /**
     * @return Primary PostgreSQL database name
     * 
     */
    private @Nullable String dbname;
    /**
     * @return PostgreSQL master node host IP or name
     * 
     */
    private @Nullable String host;
    /**
     * @return Connection limit
     * 
     */
    private @Nullable Integer maxConnections;
    /**
     * @return PostgreSQL admin user password
     * 
     */
    private @Nullable String password;
    /**
     * @return PostgreSQL port
     * 
     */
    private @Nullable Integer port;
    /**
     * @return PostgreSQL replica URI for services with a replica
     * 
     */
    private @Nullable String replicaUri;
    /**
     * @return PostgreSQL sslmode setting (currently always &#34;require&#34;)
     * 
     */
    private @Nullable String sslmode;
    /**
     * @return PostgreSQL master connection URI
     * 
     */
    private @Nullable String uri;
    /**
     * @return PostgreSQL admin user name
     * 
     */
    private @Nullable String user;

    private PgPg() {}
    /**
     * @return Primary PostgreSQL database name
     * 
     */
    public Optional<String> dbname() {
        return Optional.ofNullable(this.dbname);
    }
    /**
     * @return PostgreSQL master node host IP or name
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return Connection limit
     * 
     */
    public Optional<Integer> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }
    /**
     * @return PostgreSQL admin user password
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return PostgreSQL port
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return PostgreSQL replica URI for services with a replica
     * 
     */
    public Optional<String> replicaUri() {
        return Optional.ofNullable(this.replicaUri);
    }
    /**
     * @return PostgreSQL sslmode setting (currently always &#34;require&#34;)
     * 
     */
    public Optional<String> sslmode() {
        return Optional.ofNullable(this.sslmode);
    }
    /**
     * @return PostgreSQL master connection URI
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }
    /**
     * @return PostgreSQL admin user name
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PgPg defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dbname;
        private @Nullable String host;
        private @Nullable Integer maxConnections;
        private @Nullable String password;
        private @Nullable Integer port;
        private @Nullable String replicaUri;
        private @Nullable String sslmode;
        private @Nullable String uri;
        private @Nullable String user;
        public Builder() {}
        public Builder(PgPg defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbname = defaults.dbname;
    	      this.host = defaults.host;
    	      this.maxConnections = defaults.maxConnections;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.replicaUri = defaults.replicaUri;
    	      this.sslmode = defaults.sslmode;
    	      this.uri = defaults.uri;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder dbname(@Nullable String dbname) {
            this.dbname = dbname;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(@Nullable Integer maxConnections) {
            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder replicaUri(@Nullable String replicaUri) {
            this.replicaUri = replicaUri;
            return this;
        }
        @CustomType.Setter
        public Builder sslmode(@Nullable String sslmode) {
            this.sslmode = sslmode;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {
            this.user = user;
            return this;
        }
        public PgPg build() {
            final var o = new PgPg();
            o.dbname = dbname;
            o.host = host;
            o.maxConnections = maxConnections;
            o.password = password;
            o.port = port;
            o.replicaUri = replicaUri;
            o.sslmode = sslmode;
            o.uri = uri;
            o.user = user;
            return o;
        }
    }
}
