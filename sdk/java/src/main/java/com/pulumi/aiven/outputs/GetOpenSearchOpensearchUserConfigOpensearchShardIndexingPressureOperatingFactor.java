// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOpenSearchOpensearchUserConfigOpensearchShardIndexingPressureOperatingFactor {
    /**
     * @return Specify the lower occupancy limit of the allocated quota of memory for the shard.
     *                     If the total memory usage of a shard is below this limit,
     *                     shard indexing backpressure decreases the current allocated memory for that shard.
     *                     Default is 0.75.
     * 
     */
    private @Nullable Double lower;
    /**
     * @return Specify the optimal occupancy of the allocated quota of memory for the shard.
     *                     If the total memory usage of a shard is at this level,
     *                     shard indexing backpressure doesn’t change the current allocated memory for that shard.
     *                     Default is 0.85.
     * 
     */
    private @Nullable Double optimal;
    /**
     * @return Specify the upper occupancy limit of the allocated quota of memory for the shard.
     *                     If the total memory usage of a shard is above this limit,
     *                     shard indexing backpressure increases the current allocated memory for that shard.
     *                     Default is 0.95.
     * 
     */
    private @Nullable Double upper;

    private GetOpenSearchOpensearchUserConfigOpensearchShardIndexingPressureOperatingFactor() {}
    /**
     * @return Specify the lower occupancy limit of the allocated quota of memory for the shard.
     *                     If the total memory usage of a shard is below this limit,
     *                     shard indexing backpressure decreases the current allocated memory for that shard.
     *                     Default is 0.75.
     * 
     */
    public Optional<Double> lower() {
        return Optional.ofNullable(this.lower);
    }
    /**
     * @return Specify the optimal occupancy of the allocated quota of memory for the shard.
     *                     If the total memory usage of a shard is at this level,
     *                     shard indexing backpressure doesn’t change the current allocated memory for that shard.
     *                     Default is 0.85.
     * 
     */
    public Optional<Double> optimal() {
        return Optional.ofNullable(this.optimal);
    }
    /**
     * @return Specify the upper occupancy limit of the allocated quota of memory for the shard.
     *                     If the total memory usage of a shard is above this limit,
     *                     shard indexing backpressure increases the current allocated memory for that shard.
     *                     Default is 0.95.
     * 
     */
    public Optional<Double> upper() {
        return Optional.ofNullable(this.upper);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOpenSearchOpensearchUserConfigOpensearchShardIndexingPressureOperatingFactor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double lower;
        private @Nullable Double optimal;
        private @Nullable Double upper;
        public Builder() {}
        public Builder(GetOpenSearchOpensearchUserConfigOpensearchShardIndexingPressureOperatingFactor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lower = defaults.lower;
    	      this.optimal = defaults.optimal;
    	      this.upper = defaults.upper;
        }

        @CustomType.Setter
        public Builder lower(@Nullable Double lower) {

            this.lower = lower;
            return this;
        }
        @CustomType.Setter
        public Builder optimal(@Nullable Double optimal) {

            this.optimal = optimal;
            return this;
        }
        @CustomType.Setter
        public Builder upper(@Nullable Double upper) {

            this.upper = upper;
            return this;
        }
        public GetOpenSearchOpensearchUserConfigOpensearchShardIndexingPressureOperatingFactor build() {
            final var _resultValue = new GetOpenSearchOpensearchUserConfigOpensearchShardIndexingPressureOperatingFactor();
            _resultValue.lower = lower;
            _resultValue.optimal = optimal;
            _resultValue.upper = upper;
            return _resultValue;
        }
    }
}
