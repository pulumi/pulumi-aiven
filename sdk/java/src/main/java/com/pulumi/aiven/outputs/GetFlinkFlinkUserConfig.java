// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetFlinkFlinkUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.GetFlinkFlinkUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.GetFlinkFlinkUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFlinkFlinkUserConfig {
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    private @Nullable String additionalBackupRegions;
    /**
     * @return Enum: `1.16`, `1.19`, and newer. Flink major version.
     * 
     */
    private @Nullable String flinkVersion;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    private @Nullable List<GetFlinkFlinkUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return Task slots per node. For a 3 node plan, total number of task slots is 3x this value. Example: `1`.
     * 
     */
    private @Nullable Integer numberOfTaskSlots;
    /**
     * @return Timeout in seconds used for all futures and blocking Pekko requests. Example: `10`.
     * 
     */
    private @Nullable Integer pekkoAskTimeoutS;
    /**
     * @return Maximum size in bytes for messages exchanged between the JobManager and the TaskManagers. Example: `10485760`.
     * 
     */
    private @Nullable Integer pekkoFramesizeB;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private @Nullable GetFlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable GetFlinkFlinkUserConfigPublicAccess publicAccess;
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Use static public IP addresses.
     * 
     */
    private @Nullable Boolean staticIps;

    private GetFlinkFlinkUserConfig() {}
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    /**
     * @return Enum: `1.16`, `1.19`, and newer. Flink major version.
     * 
     */
    public Optional<String> flinkVersion() {
        return Optional.ofNullable(this.flinkVersion);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public List<GetFlinkFlinkUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Task slots per node. For a 3 node plan, total number of task slots is 3x this value. Example: `1`.
     * 
     */
    public Optional<Integer> numberOfTaskSlots() {
        return Optional.ofNullable(this.numberOfTaskSlots);
    }
    /**
     * @return Timeout in seconds used for all futures and blocking Pekko requests. Example: `10`.
     * 
     */
    public Optional<Integer> pekkoAskTimeoutS() {
        return Optional.ofNullable(this.pekkoAskTimeoutS);
    }
    /**
     * @return Maximum size in bytes for messages exchanged between the JobManager and the TaskManagers. Example: `10485760`.
     * 
     */
    public Optional<Integer> pekkoFramesizeB() {
        return Optional.ofNullable(this.pekkoFramesizeB);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<GetFlinkFlinkUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<GetFlinkFlinkUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFlinkFlinkUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable String flinkVersion;
        private @Nullable List<GetFlinkFlinkUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable Integer numberOfTaskSlots;
        private @Nullable Integer pekkoAskTimeoutS;
        private @Nullable Integer pekkoFramesizeB;
        private @Nullable GetFlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable GetFlinkFlinkUserConfigPublicAccess publicAccess;
        private @Nullable Boolean serviceLog;
        private @Nullable Boolean staticIps;
        public Builder() {}
        public Builder(GetFlinkFlinkUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.flinkVersion = defaults.flinkVersion;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.numberOfTaskSlots = defaults.numberOfTaskSlots;
    	      this.pekkoAskTimeoutS = defaults.pekkoAskTimeoutS;
    	      this.pekkoFramesizeB = defaults.pekkoFramesizeB;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.publicAccess = defaults.publicAccess;
    	      this.serviceLog = defaults.serviceLog;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {

            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder flinkVersion(@Nullable String flinkVersion) {

            this.flinkVersion = flinkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<GetFlinkFlinkUserConfigIpFilterObject> ipFilterObjects) {

            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(GetFlinkFlinkUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {

            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder numberOfTaskSlots(@Nullable Integer numberOfTaskSlots) {

            this.numberOfTaskSlots = numberOfTaskSlots;
            return this;
        }
        @CustomType.Setter
        public Builder pekkoAskTimeoutS(@Nullable Integer pekkoAskTimeoutS) {

            this.pekkoAskTimeoutS = pekkoAskTimeoutS;
            return this;
        }
        @CustomType.Setter
        public Builder pekkoFramesizeB(@Nullable Integer pekkoFramesizeB) {

            this.pekkoFramesizeB = pekkoFramesizeB;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable GetFlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess) {

            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable GetFlinkFlinkUserConfigPublicAccess publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {

            this.staticIps = staticIps;
            return this;
        }
        public GetFlinkFlinkUserConfig build() {
            final var _resultValue = new GetFlinkFlinkUserConfig();
            _resultValue.additionalBackupRegions = additionalBackupRegions;
            _resultValue.flinkVersion = flinkVersion;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.numberOfTaskSlots = numberOfTaskSlots;
            _resultValue.pekkoAskTimeoutS = pekkoAskTimeoutS;
            _resultValue.pekkoFramesizeB = pekkoFramesizeB;
            _resultValue.privatelinkAccess = privatelinkAccess;
            _resultValue.publicAccess = publicAccess;
            _resultValue.serviceLog = serviceLog;
            _resultValue.staticIps = staticIps;
            return _resultValue;
        }
    }
}
