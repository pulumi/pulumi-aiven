// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetFlinkFlinkUserConfigPrivatelinkAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFlinkFlinkUserConfig {
    private final @Nullable String executionCheckpointingIntervalMs;
    private final @Nullable String executionCheckpointingTimeoutMs;
    private final @Nullable String flinkVersion;
    private final @Nullable List<String> ipFilters;
    private final @Nullable String numberOfTaskSlots;
    private final @Nullable String parallelismDefault;
    private final @Nullable GetFlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess;
    private final @Nullable String restartStrategy;
    private final @Nullable String restartStrategyDelaySec;
    private final @Nullable String restartStrategyFailureRateIntervalMin;
    private final @Nullable String restartStrategyMaxFailures;

    @CustomType.Constructor
    private GetFlinkFlinkUserConfig(
        @CustomType.Parameter("executionCheckpointingIntervalMs") @Nullable String executionCheckpointingIntervalMs,
        @CustomType.Parameter("executionCheckpointingTimeoutMs") @Nullable String executionCheckpointingTimeoutMs,
        @CustomType.Parameter("flinkVersion") @Nullable String flinkVersion,
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("numberOfTaskSlots") @Nullable String numberOfTaskSlots,
        @CustomType.Parameter("parallelismDefault") @Nullable String parallelismDefault,
        @CustomType.Parameter("privatelinkAccess") @Nullable GetFlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess,
        @CustomType.Parameter("restartStrategy") @Nullable String restartStrategy,
        @CustomType.Parameter("restartStrategyDelaySec") @Nullable String restartStrategyDelaySec,
        @CustomType.Parameter("restartStrategyFailureRateIntervalMin") @Nullable String restartStrategyFailureRateIntervalMin,
        @CustomType.Parameter("restartStrategyMaxFailures") @Nullable String restartStrategyMaxFailures) {
        this.executionCheckpointingIntervalMs = executionCheckpointingIntervalMs;
        this.executionCheckpointingTimeoutMs = executionCheckpointingTimeoutMs;
        this.flinkVersion = flinkVersion;
        this.ipFilters = ipFilters;
        this.numberOfTaskSlots = numberOfTaskSlots;
        this.parallelismDefault = parallelismDefault;
        this.privatelinkAccess = privatelinkAccess;
        this.restartStrategy = restartStrategy;
        this.restartStrategyDelaySec = restartStrategyDelaySec;
        this.restartStrategyFailureRateIntervalMin = restartStrategyFailureRateIntervalMin;
        this.restartStrategyMaxFailures = restartStrategyMaxFailures;
    }

    public Optional<String> executionCheckpointingIntervalMs() {
        return Optional.ofNullable(this.executionCheckpointingIntervalMs);
    }
    public Optional<String> executionCheckpointingTimeoutMs() {
        return Optional.ofNullable(this.executionCheckpointingTimeoutMs);
    }
    public Optional<String> flinkVersion() {
        return Optional.ofNullable(this.flinkVersion);
    }
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<String> numberOfTaskSlots() {
        return Optional.ofNullable(this.numberOfTaskSlots);
    }
    public Optional<String> parallelismDefault() {
        return Optional.ofNullable(this.parallelismDefault);
    }
    public Optional<GetFlinkFlinkUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    public Optional<String> restartStrategy() {
        return Optional.ofNullable(this.restartStrategy);
    }
    public Optional<String> restartStrategyDelaySec() {
        return Optional.ofNullable(this.restartStrategyDelaySec);
    }
    public Optional<String> restartStrategyFailureRateIntervalMin() {
        return Optional.ofNullable(this.restartStrategyFailureRateIntervalMin);
    }
    public Optional<String> restartStrategyMaxFailures() {
        return Optional.ofNullable(this.restartStrategyMaxFailures);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFlinkFlinkUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String executionCheckpointingIntervalMs;
        private @Nullable String executionCheckpointingTimeoutMs;
        private @Nullable String flinkVersion;
        private @Nullable List<String> ipFilters;
        private @Nullable String numberOfTaskSlots;
        private @Nullable String parallelismDefault;
        private @Nullable GetFlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String restartStrategy;
        private @Nullable String restartStrategyDelaySec;
        private @Nullable String restartStrategyFailureRateIntervalMin;
        private @Nullable String restartStrategyMaxFailures;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFlinkFlinkUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.executionCheckpointingIntervalMs = defaults.executionCheckpointingIntervalMs;
    	      this.executionCheckpointingTimeoutMs = defaults.executionCheckpointingTimeoutMs;
    	      this.flinkVersion = defaults.flinkVersion;
    	      this.ipFilters = defaults.ipFilters;
    	      this.numberOfTaskSlots = defaults.numberOfTaskSlots;
    	      this.parallelismDefault = defaults.parallelismDefault;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.restartStrategy = defaults.restartStrategy;
    	      this.restartStrategyDelaySec = defaults.restartStrategyDelaySec;
    	      this.restartStrategyFailureRateIntervalMin = defaults.restartStrategyFailureRateIntervalMin;
    	      this.restartStrategyMaxFailures = defaults.restartStrategyMaxFailures;
        }

        public Builder executionCheckpointingIntervalMs(@Nullable String executionCheckpointingIntervalMs) {
            this.executionCheckpointingIntervalMs = executionCheckpointingIntervalMs;
            return this;
        }
        public Builder executionCheckpointingTimeoutMs(@Nullable String executionCheckpointingTimeoutMs) {
            this.executionCheckpointingTimeoutMs = executionCheckpointingTimeoutMs;
            return this;
        }
        public Builder flinkVersion(@Nullable String flinkVersion) {
            this.flinkVersion = flinkVersion;
            return this;
        }
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder numberOfTaskSlots(@Nullable String numberOfTaskSlots) {
            this.numberOfTaskSlots = numberOfTaskSlots;
            return this;
        }
        public Builder parallelismDefault(@Nullable String parallelismDefault) {
            this.parallelismDefault = parallelismDefault;
            return this;
        }
        public Builder privatelinkAccess(@Nullable GetFlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        public Builder restartStrategy(@Nullable String restartStrategy) {
            this.restartStrategy = restartStrategy;
            return this;
        }
        public Builder restartStrategyDelaySec(@Nullable String restartStrategyDelaySec) {
            this.restartStrategyDelaySec = restartStrategyDelaySec;
            return this;
        }
        public Builder restartStrategyFailureRateIntervalMin(@Nullable String restartStrategyFailureRateIntervalMin) {
            this.restartStrategyFailureRateIntervalMin = restartStrategyFailureRateIntervalMin;
            return this;
        }
        public Builder restartStrategyMaxFailures(@Nullable String restartStrategyMaxFailures) {
            this.restartStrategyMaxFailures = restartStrategyMaxFailures;
            return this;
        }        public GetFlinkFlinkUserConfig build() {
            return new GetFlinkFlinkUserConfig(executionCheckpointingIntervalMs, executionCheckpointingTimeoutMs, flinkVersion, ipFilters, numberOfTaskSlots, parallelismDefault, privatelinkAccess, restartStrategy, restartStrategyDelaySec, restartStrategyFailureRateIntervalMin, restartStrategyMaxFailures);
        }
    }
}
