// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.ServiceIntegrationClickhouseKafkaUserConfigTableArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceIntegrationClickhouseKafkaUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceIntegrationClickhouseKafkaUserConfigArgs Empty = new ServiceIntegrationClickhouseKafkaUserConfigArgs();

    /**
     * Array of table configurations that define how Kafka topics are mapped to ClickHouse tables. Each table configuration specifies the table structure, associated Kafka topics, and read/write settings
     * 
     */
    @Import(name="tables")
    private @Nullable Output<List<ServiceIntegrationClickhouseKafkaUserConfigTableArgs>> tables;

    /**
     * @return Array of table configurations that define how Kafka topics are mapped to ClickHouse tables. Each table configuration specifies the table structure, associated Kafka topics, and read/write settings
     * 
     */
    public Optional<Output<List<ServiceIntegrationClickhouseKafkaUserConfigTableArgs>>> tables() {
        return Optional.ofNullable(this.tables);
    }

    private ServiceIntegrationClickhouseKafkaUserConfigArgs() {}

    private ServiceIntegrationClickhouseKafkaUserConfigArgs(ServiceIntegrationClickhouseKafkaUserConfigArgs $) {
        this.tables = $.tables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceIntegrationClickhouseKafkaUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceIntegrationClickhouseKafkaUserConfigArgs $;

        public Builder() {
            $ = new ServiceIntegrationClickhouseKafkaUserConfigArgs();
        }

        public Builder(ServiceIntegrationClickhouseKafkaUserConfigArgs defaults) {
            $ = new ServiceIntegrationClickhouseKafkaUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param tables Array of table configurations that define how Kafka topics are mapped to ClickHouse tables. Each table configuration specifies the table structure, associated Kafka topics, and read/write settings
         * 
         * @return builder
         * 
         */
        public Builder tables(@Nullable Output<List<ServiceIntegrationClickhouseKafkaUserConfigTableArgs>> tables) {
            $.tables = tables;
            return this;
        }

        /**
         * @param tables Array of table configurations that define how Kafka topics are mapped to ClickHouse tables. Each table configuration specifies the table structure, associated Kafka topics, and read/write settings
         * 
         * @return builder
         * 
         */
        public Builder tables(List<ServiceIntegrationClickhouseKafkaUserConfigTableArgs> tables) {
            return tables(Output.of(tables));
        }

        /**
         * @param tables Array of table configurations that define how Kafka topics are mapped to ClickHouse tables. Each table configuration specifies the table structure, associated Kafka topics, and read/write settings
         * 
         * @return builder
         * 
         */
        public Builder tables(ServiceIntegrationClickhouseKafkaUserConfigTableArgs... tables) {
            return tables(List.of(tables));
        }

        public ServiceIntegrationClickhouseKafkaUserConfigArgs build() {
            return $;
        }
    }

}
