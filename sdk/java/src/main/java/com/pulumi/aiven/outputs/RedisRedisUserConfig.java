// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.RedisRedisUserConfigMigration;
import com.pulumi.aiven.outputs.RedisRedisUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.RedisRedisUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.RedisRedisUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RedisRedisUserConfig {
    /**
     * @return IP filter
     * 
     */
    private @Nullable List<String> ipFilters;
    /**
     * @return Migrate data from existing server
     * 
     */
    private @Nullable RedisRedisUserConfigMigration migration;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private @Nullable RedisRedisUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private @Nullable RedisRedisUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable RedisRedisUserConfigPublicAccess publicAccess;
    /**
     * @return Name of the basebackup to restore in forked service
     * 
     */
    private @Nullable String recoveryBasebackupName;
    /**
     * @return Default ACL for pub/sub channels used when Redis user is created
     * 
     */
    private @Nullable String redisAclChannelsDefault;
    /**
     * @return Redis IO thread count
     * 
     */
    private @Nullable String redisIoThreads;
    /**
     * @return LFU maxmemory-policy counter decay time in minutes
     * 
     */
    private @Nullable String redisLfuDecayTime;
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies
     * 
     */
    private @Nullable String redisLfuLogFactor;
    /**
     * @return Redis maxmemory-policy
     * 
     */
    private @Nullable String redisMaxmemoryPolicy;
    /**
     * @return Set notify-keyspace-events option
     * 
     */
    private @Nullable String redisNotifyKeyspaceEvents;
    /**
     * @return Number of redis databases
     * 
     */
    private @Nullable String redisNumberOfDatabases;
    /**
     * @return Redis persistence
     * 
     */
    private @Nullable String redisPersistence;
    /**
     * @return Pub/sub client output buffer hard limit in MB
     * 
     */
    private @Nullable String redisPubsubClientOutputBufferLimit;
    /**
     * @return Require SSL to access Redis
     * 
     */
    private @Nullable String redisSsl;
    /**
     * @return Redis idle connection timeout in seconds
     * 
     */
    private @Nullable String redisTimeout;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String serviceToForkFrom;
    /**
     * @return Static IP addresses
     * 
     */
    private @Nullable String staticIps;

    private RedisRedisUserConfig() {}
    /**
     * @return IP filter
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Migrate data from existing server
     * 
     */
    public Optional<RedisRedisUserConfigMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<RedisRedisUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<RedisRedisUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<RedisRedisUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Name of the basebackup to restore in forked service
     * 
     */
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    /**
     * @return Default ACL for pub/sub channels used when Redis user is created
     * 
     */
    public Optional<String> redisAclChannelsDefault() {
        return Optional.ofNullable(this.redisAclChannelsDefault);
    }
    /**
     * @return Redis IO thread count
     * 
     */
    public Optional<String> redisIoThreads() {
        return Optional.ofNullable(this.redisIoThreads);
    }
    /**
     * @return LFU maxmemory-policy counter decay time in minutes
     * 
     */
    public Optional<String> redisLfuDecayTime() {
        return Optional.ofNullable(this.redisLfuDecayTime);
    }
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies
     * 
     */
    public Optional<String> redisLfuLogFactor() {
        return Optional.ofNullable(this.redisLfuLogFactor);
    }
    /**
     * @return Redis maxmemory-policy
     * 
     */
    public Optional<String> redisMaxmemoryPolicy() {
        return Optional.ofNullable(this.redisMaxmemoryPolicy);
    }
    /**
     * @return Set notify-keyspace-events option
     * 
     */
    public Optional<String> redisNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.redisNotifyKeyspaceEvents);
    }
    /**
     * @return Number of redis databases
     * 
     */
    public Optional<String> redisNumberOfDatabases() {
        return Optional.ofNullable(this.redisNumberOfDatabases);
    }
    /**
     * @return Redis persistence
     * 
     */
    public Optional<String> redisPersistence() {
        return Optional.ofNullable(this.redisPersistence);
    }
    /**
     * @return Pub/sub client output buffer hard limit in MB
     * 
     */
    public Optional<String> redisPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.redisPubsubClientOutputBufferLimit);
    }
    /**
     * @return Require SSL to access Redis
     * 
     */
    public Optional<String> redisSsl() {
        return Optional.ofNullable(this.redisSsl);
    }
    /**
     * @return Redis idle connection timeout in seconds
     * 
     */
    public Optional<String> redisTimeout() {
        return Optional.ofNullable(this.redisTimeout);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Static IP addresses
     * 
     */
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RedisRedisUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> ipFilters;
        private @Nullable RedisRedisUserConfigMigration migration;
        private @Nullable RedisRedisUserConfigPrivateAccess privateAccess;
        private @Nullable RedisRedisUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable RedisRedisUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable String redisAclChannelsDefault;
        private @Nullable String redisIoThreads;
        private @Nullable String redisLfuDecayTime;
        private @Nullable String redisLfuLogFactor;
        private @Nullable String redisMaxmemoryPolicy;
        private @Nullable String redisNotifyKeyspaceEvents;
        private @Nullable String redisNumberOfDatabases;
        private @Nullable String redisPersistence;
        private @Nullable String redisPubsubClientOutputBufferLimit;
        private @Nullable String redisSsl;
        private @Nullable String redisTimeout;
        private @Nullable String serviceToForkFrom;
        private @Nullable String staticIps;
        public Builder() {}
        public Builder(RedisRedisUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.redisAclChannelsDefault = defaults.redisAclChannelsDefault;
    	      this.redisIoThreads = defaults.redisIoThreads;
    	      this.redisLfuDecayTime = defaults.redisLfuDecayTime;
    	      this.redisLfuLogFactor = defaults.redisLfuLogFactor;
    	      this.redisMaxmemoryPolicy = defaults.redisMaxmemoryPolicy;
    	      this.redisNotifyKeyspaceEvents = defaults.redisNotifyKeyspaceEvents;
    	      this.redisNumberOfDatabases = defaults.redisNumberOfDatabases;
    	      this.redisPersistence = defaults.redisPersistence;
    	      this.redisPubsubClientOutputBufferLimit = defaults.redisPubsubClientOutputBufferLimit;
    	      this.redisSsl = defaults.redisSsl;
    	      this.redisTimeout = defaults.redisTimeout;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder migration(@Nullable RedisRedisUserConfigMigration migration) {
            this.migration = migration;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable RedisRedisUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable RedisRedisUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable RedisRedisUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {
            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        @CustomType.Setter
        public Builder redisAclChannelsDefault(@Nullable String redisAclChannelsDefault) {
            this.redisAclChannelsDefault = redisAclChannelsDefault;
            return this;
        }
        @CustomType.Setter
        public Builder redisIoThreads(@Nullable String redisIoThreads) {
            this.redisIoThreads = redisIoThreads;
            return this;
        }
        @CustomType.Setter
        public Builder redisLfuDecayTime(@Nullable String redisLfuDecayTime) {
            this.redisLfuDecayTime = redisLfuDecayTime;
            return this;
        }
        @CustomType.Setter
        public Builder redisLfuLogFactor(@Nullable String redisLfuLogFactor) {
            this.redisLfuLogFactor = redisLfuLogFactor;
            return this;
        }
        @CustomType.Setter
        public Builder redisMaxmemoryPolicy(@Nullable String redisMaxmemoryPolicy) {
            this.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder redisNotifyKeyspaceEvents(@Nullable String redisNotifyKeyspaceEvents) {
            this.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            return this;
        }
        @CustomType.Setter
        public Builder redisNumberOfDatabases(@Nullable String redisNumberOfDatabases) {
            this.redisNumberOfDatabases = redisNumberOfDatabases;
            return this;
        }
        @CustomType.Setter
        public Builder redisPersistence(@Nullable String redisPersistence) {
            this.redisPersistence = redisPersistence;
            return this;
        }
        @CustomType.Setter
        public Builder redisPubsubClientOutputBufferLimit(@Nullable String redisPubsubClientOutputBufferLimit) {
            this.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            return this;
        }
        @CustomType.Setter
        public Builder redisSsl(@Nullable String redisSsl) {
            this.redisSsl = redisSsl;
            return this;
        }
        @CustomType.Setter
        public Builder redisTimeout(@Nullable String redisTimeout) {
            this.redisTimeout = redisTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }
        public RedisRedisUserConfig build() {
            final var o = new RedisRedisUserConfig();
            o.ipFilters = ipFilters;
            o.migration = migration;
            o.privateAccess = privateAccess;
            o.privatelinkAccess = privatelinkAccess;
            o.projectToForkFrom = projectToForkFrom;
            o.publicAccess = publicAccess;
            o.recoveryBasebackupName = recoveryBasebackupName;
            o.redisAclChannelsDefault = redisAclChannelsDefault;
            o.redisIoThreads = redisIoThreads;
            o.redisLfuDecayTime = redisLfuDecayTime;
            o.redisLfuLogFactor = redisLfuLogFactor;
            o.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            o.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            o.redisNumberOfDatabases = redisNumberOfDatabases;
            o.redisPersistence = redisPersistence;
            o.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            o.redisSsl = redisSsl;
            o.redisTimeout = redisTimeout;
            o.serviceToForkFrom = serviceToForkFrom;
            o.staticIps = staticIps;
            return o;
        }
    }
}
