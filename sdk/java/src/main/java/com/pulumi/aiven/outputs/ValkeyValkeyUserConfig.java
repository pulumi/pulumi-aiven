// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.ValkeyValkeyUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.ValkeyValkeyUserConfigMigration;
import com.pulumi.aiven.outputs.ValkeyValkeyUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.ValkeyValkeyUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.ValkeyValkeyUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ValkeyValkeyUserConfig {
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    private @Nullable String additionalBackupRegions;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    private @Nullable List<ValkeyValkeyUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return Migrate data from existing server
     * 
     */
    private @Nullable ValkeyValkeyUserConfigMigration migration;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private @Nullable ValkeyValkeyUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private @Nullable ValkeyValkeyUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    private @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable ValkeyValkeyUserConfigPublicAccess publicAccess;
    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    private @Nullable String recoveryBasebackupName;
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    private @Nullable String serviceToForkFrom;
    /**
     * @return Use static public IP addresses.
     * 
     */
    private @Nullable Boolean staticIps;
    /**
     * @return Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
     * 
     */
    private @Nullable String valkeyAclChannelsDefault;
    /**
     * @return Set Valkey IO thread count. Changing this will cause a restart of the Valkey service. Example: `1`.
     * 
     */
    private @Nullable Integer valkeyIoThreads;
    /**
     * @return LFU maxmemory-policy counter decay time in minutes. Default: `1`.
     * 
     */
    private @Nullable Integer valkeyLfuDecayTime;
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
     * 
     */
    private @Nullable Integer valkeyLfuLogFactor;
    /**
     * @return Enum: `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`. Valkey maxmemory-policy. Default: `noeviction`.
     * 
     */
    private @Nullable String valkeyMaxmemoryPolicy;
    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    private @Nullable String valkeyNotifyKeyspaceEvents;
    /**
     * @return Set number of Valkey databases. Changing this will cause a restart of the Valkey service. Example: `16`.
     * 
     */
    private @Nullable Integer valkeyNumberOfDatabases;
    /**
     * @return Enum: `off`, `rdb`. When persistence is `rdb`, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    private @Nullable String valkeyPersistence;
    /**
     * @return Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
     * 
     */
    private @Nullable Integer valkeyPubsubClientOutputBufferLimit;
    /**
     * @return Require SSL to access Valkey. Default: `true`.
     * 
     */
    private @Nullable Boolean valkeySsl;
    /**
     * @return Valkey idle connection timeout in seconds. Default: `300`.
     * 
     */
    private @Nullable Integer valkeyTimeout;

    private ValkeyValkeyUserConfig() {}
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public List<ValkeyValkeyUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Migrate data from existing server
     * 
     */
    public Optional<ValkeyValkeyUserConfigMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<ValkeyValkeyUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<ValkeyValkeyUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<ValkeyValkeyUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }
    /**
     * @return Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
     * 
     */
    public Optional<String> valkeyAclChannelsDefault() {
        return Optional.ofNullable(this.valkeyAclChannelsDefault);
    }
    /**
     * @return Set Valkey IO thread count. Changing this will cause a restart of the Valkey service. Example: `1`.
     * 
     */
    public Optional<Integer> valkeyIoThreads() {
        return Optional.ofNullable(this.valkeyIoThreads);
    }
    /**
     * @return LFU maxmemory-policy counter decay time in minutes. Default: `1`.
     * 
     */
    public Optional<Integer> valkeyLfuDecayTime() {
        return Optional.ofNullable(this.valkeyLfuDecayTime);
    }
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
     * 
     */
    public Optional<Integer> valkeyLfuLogFactor() {
        return Optional.ofNullable(this.valkeyLfuLogFactor);
    }
    /**
     * @return Enum: `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`. Valkey maxmemory-policy. Default: `noeviction`.
     * 
     */
    public Optional<String> valkeyMaxmemoryPolicy() {
        return Optional.ofNullable(this.valkeyMaxmemoryPolicy);
    }
    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    public Optional<String> valkeyNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.valkeyNotifyKeyspaceEvents);
    }
    /**
     * @return Set number of Valkey databases. Changing this will cause a restart of the Valkey service. Example: `16`.
     * 
     */
    public Optional<Integer> valkeyNumberOfDatabases() {
        return Optional.ofNullable(this.valkeyNumberOfDatabases);
    }
    /**
     * @return Enum: `off`, `rdb`. When persistence is `rdb`, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    public Optional<String> valkeyPersistence() {
        return Optional.ofNullable(this.valkeyPersistence);
    }
    /**
     * @return Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
     * 
     */
    public Optional<Integer> valkeyPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.valkeyPubsubClientOutputBufferLimit);
    }
    /**
     * @return Require SSL to access Valkey. Default: `true`.
     * 
     */
    public Optional<Boolean> valkeySsl() {
        return Optional.ofNullable(this.valkeySsl);
    }
    /**
     * @return Valkey idle connection timeout in seconds. Default: `300`.
     * 
     */
    public Optional<Integer> valkeyTimeout() {
        return Optional.ofNullable(this.valkeyTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ValkeyValkeyUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable List<ValkeyValkeyUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable ValkeyValkeyUserConfigMigration migration;
        private @Nullable ValkeyValkeyUserConfigPrivateAccess privateAccess;
        private @Nullable ValkeyValkeyUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable ValkeyValkeyUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable Boolean serviceLog;
        private @Nullable String serviceToForkFrom;
        private @Nullable Boolean staticIps;
        private @Nullable String valkeyAclChannelsDefault;
        private @Nullable Integer valkeyIoThreads;
        private @Nullable Integer valkeyLfuDecayTime;
        private @Nullable Integer valkeyLfuLogFactor;
        private @Nullable String valkeyMaxmemoryPolicy;
        private @Nullable String valkeyNotifyKeyspaceEvents;
        private @Nullable Integer valkeyNumberOfDatabases;
        private @Nullable String valkeyPersistence;
        private @Nullable Integer valkeyPubsubClientOutputBufferLimit;
        private @Nullable Boolean valkeySsl;
        private @Nullable Integer valkeyTimeout;
        public Builder() {}
        public Builder(ValkeyValkeyUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.serviceLog = defaults.serviceLog;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
    	      this.valkeyAclChannelsDefault = defaults.valkeyAclChannelsDefault;
    	      this.valkeyIoThreads = defaults.valkeyIoThreads;
    	      this.valkeyLfuDecayTime = defaults.valkeyLfuDecayTime;
    	      this.valkeyLfuLogFactor = defaults.valkeyLfuLogFactor;
    	      this.valkeyMaxmemoryPolicy = defaults.valkeyMaxmemoryPolicy;
    	      this.valkeyNotifyKeyspaceEvents = defaults.valkeyNotifyKeyspaceEvents;
    	      this.valkeyNumberOfDatabases = defaults.valkeyNumberOfDatabases;
    	      this.valkeyPersistence = defaults.valkeyPersistence;
    	      this.valkeyPubsubClientOutputBufferLimit = defaults.valkeyPubsubClientOutputBufferLimit;
    	      this.valkeySsl = defaults.valkeySsl;
    	      this.valkeyTimeout = defaults.valkeyTimeout;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {

            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<ValkeyValkeyUserConfigIpFilterObject> ipFilterObjects) {

            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(ValkeyValkeyUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {

            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder migration(@Nullable ValkeyValkeyUserConfigMigration migration) {

            this.migration = migration;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable ValkeyValkeyUserConfigPrivateAccess privateAccess) {

            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable ValkeyValkeyUserConfigPrivatelinkAccess privatelinkAccess) {

            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {

            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable ValkeyValkeyUserConfigPublicAccess publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {

            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {

            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {

            this.staticIps = staticIps;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyAclChannelsDefault(@Nullable String valkeyAclChannelsDefault) {

            this.valkeyAclChannelsDefault = valkeyAclChannelsDefault;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyIoThreads(@Nullable Integer valkeyIoThreads) {

            this.valkeyIoThreads = valkeyIoThreads;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyLfuDecayTime(@Nullable Integer valkeyLfuDecayTime) {

            this.valkeyLfuDecayTime = valkeyLfuDecayTime;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyLfuLogFactor(@Nullable Integer valkeyLfuLogFactor) {

            this.valkeyLfuLogFactor = valkeyLfuLogFactor;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyMaxmemoryPolicy(@Nullable String valkeyMaxmemoryPolicy) {

            this.valkeyMaxmemoryPolicy = valkeyMaxmemoryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyNotifyKeyspaceEvents(@Nullable String valkeyNotifyKeyspaceEvents) {

            this.valkeyNotifyKeyspaceEvents = valkeyNotifyKeyspaceEvents;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyNumberOfDatabases(@Nullable Integer valkeyNumberOfDatabases) {

            this.valkeyNumberOfDatabases = valkeyNumberOfDatabases;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyPersistence(@Nullable String valkeyPersistence) {

            this.valkeyPersistence = valkeyPersistence;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyPubsubClientOutputBufferLimit(@Nullable Integer valkeyPubsubClientOutputBufferLimit) {

            this.valkeyPubsubClientOutputBufferLimit = valkeyPubsubClientOutputBufferLimit;
            return this;
        }
        @CustomType.Setter
        public Builder valkeySsl(@Nullable Boolean valkeySsl) {

            this.valkeySsl = valkeySsl;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyTimeout(@Nullable Integer valkeyTimeout) {

            this.valkeyTimeout = valkeyTimeout;
            return this;
        }
        public ValkeyValkeyUserConfig build() {
            final var _resultValue = new ValkeyValkeyUserConfig();
            _resultValue.additionalBackupRegions = additionalBackupRegions;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.migration = migration;
            _resultValue.privateAccess = privateAccess;
            _resultValue.privatelinkAccess = privatelinkAccess;
            _resultValue.projectToForkFrom = projectToForkFrom;
            _resultValue.publicAccess = publicAccess;
            _resultValue.recoveryBasebackupName = recoveryBasebackupName;
            _resultValue.serviceLog = serviceLog;
            _resultValue.serviceToForkFrom = serviceToForkFrom;
            _resultValue.staticIps = staticIps;
            _resultValue.valkeyAclChannelsDefault = valkeyAclChannelsDefault;
            _resultValue.valkeyIoThreads = valkeyIoThreads;
            _resultValue.valkeyLfuDecayTime = valkeyLfuDecayTime;
            _resultValue.valkeyLfuLogFactor = valkeyLfuLogFactor;
            _resultValue.valkeyMaxmemoryPolicy = valkeyMaxmemoryPolicy;
            _resultValue.valkeyNotifyKeyspaceEvents = valkeyNotifyKeyspaceEvents;
            _resultValue.valkeyNumberOfDatabases = valkeyNumberOfDatabases;
            _resultValue.valkeyPersistence = valkeyPersistence;
            _resultValue.valkeyPubsubClientOutputBufferLimit = valkeyPubsubClientOutputBufferLimit;
            _resultValue.valkeySsl = valkeySsl;
            _resultValue.valkeyTimeout = valkeyTimeout;
            return _resultValue;
        }
    }
}
