// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MySqlMysqlUserConfigMysqlArgs extends com.pulumi.resources.ResourceArgs {

    public static final MySqlMysqlUserConfigMysqlArgs Empty = new MySqlMysqlUserConfigMysqlArgs();

    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<Integer> connectTimeout;

    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     */
    public Optional<Output<Integer>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or &#39;SYSTEM&#39; to use the MySQL server default.
     * 
     */
    @Import(name="defaultTimeZone")
    private @Nullable Output<String> defaultTimeZone;

    /**
     * @return Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or &#39;SYSTEM&#39; to use the MySQL server default.
     * 
     */
    public Optional<Output<String>> defaultTimeZone() {
        return Optional.ofNullable(this.defaultTimeZone);
    }

    /**
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * 
     */
    @Import(name="groupConcatMaxLen")
    private @Nullable Output<Integer> groupConcatMaxLen;

    /**
     * @return The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * 
     */
    public Optional<Output<Integer>> groupConcatMaxLen() {
        return Optional.ofNullable(this.groupConcatMaxLen);
    }

    /**
     * The time, in seconds, before cached statistics expire.
     * 
     */
    @Import(name="informationSchemaStatsExpiry")
    private @Nullable Output<Integer> informationSchemaStatsExpiry;

    /**
     * @return The time, in seconds, before cached statistics expire.
     * 
     */
    public Optional<Output<Integer>> informationSchemaStatsExpiry() {
        return Optional.ofNullable(this.informationSchemaStatsExpiry);
    }

    /**
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
     * 
     */
    @Import(name="innodbChangeBufferMaxSize")
    private @Nullable Output<Integer> innodbChangeBufferMaxSize;

    /**
     * @return Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
     * 
     */
    public Optional<Output<Integer>> innodbChangeBufferMaxSize() {
        return Optional.ofNullable(this.innodbChangeBufferMaxSize);
    }

    /**
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
     * 
     */
    @Import(name="innodbFlushNeighbors")
    private @Nullable Output<Integer> innodbFlushNeighbors;

    /**
     * @return Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
     * 
     */
    public Optional<Output<Integer>> innodbFlushNeighbors() {
        return Optional.ofNullable(this.innodbFlushNeighbors);
    }

    /**
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Import(name="innodbFtMinTokenSize")
    private @Nullable Output<Integer> innodbFtMinTokenSize;

    /**
     * @return Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Optional<Output<Integer>> innodbFtMinTokenSize() {
        return Optional.ofNullable(this.innodbFtMinTokenSize);
    }

    /**
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
     * 
     */
    @Import(name="innodbFtServerStopwordTable")
    private @Nullable Output<String> innodbFtServerStopwordTable;

    /**
     * @return This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
     * 
     */
    public Optional<Output<String>> innodbFtServerStopwordTable() {
        return Optional.ofNullable(this.innodbFtServerStopwordTable);
    }

    /**
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     * 
     */
    @Import(name="innodbLockWaitTimeout")
    private @Nullable Output<Integer> innodbLockWaitTimeout;

    /**
     * @return The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     * 
     */
    public Optional<Output<Integer>> innodbLockWaitTimeout() {
        return Optional.ofNullable(this.innodbLockWaitTimeout);
    }

    /**
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * 
     */
    @Import(name="innodbLogBufferSize")
    private @Nullable Output<Integer> innodbLogBufferSize;

    /**
     * @return The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * 
     */
    public Optional<Output<Integer>> innodbLogBufferSize() {
        return Optional.ofNullable(this.innodbLogBufferSize);
    }

    /**
     * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     * 
     */
    @Import(name="innodbOnlineAlterLogMaxSize")
    private @Nullable Output<Integer> innodbOnlineAlterLogMaxSize;

    /**
     * @return The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     * 
     */
    public Optional<Output<Integer>> innodbOnlineAlterLogMaxSize() {
        return Optional.ofNullable(this.innodbOnlineAlterLogMaxSize);
    }

    /**
     * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
     * 
     */
    @Import(name="innodbPrintAllDeadlocks")
    private @Nullable Output<Boolean> innodbPrintAllDeadlocks;

    /**
     * @return When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
     * 
     */
    public Optional<Output<Boolean>> innodbPrintAllDeadlocks() {
        return Optional.ofNullable(this.innodbPrintAllDeadlocks);
    }

    /**
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Import(name="innodbReadIoThreads")
    private @Nullable Output<Integer> innodbReadIoThreads;

    /**
     * @return The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Optional<Output<Integer>> innodbReadIoThreads() {
        return Optional.ofNullable(this.innodbReadIoThreads);
    }

    /**
     * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Import(name="innodbRollbackOnTimeout")
    private @Nullable Output<Boolean> innodbRollbackOnTimeout;

    /**
     * @return When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Optional<Output<Boolean>> innodbRollbackOnTimeout() {
        return Optional.ofNullable(this.innodbRollbackOnTimeout);
    }

    /**
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
     * 
     */
    @Import(name="innodbThreadConcurrency")
    private @Nullable Output<Integer> innodbThreadConcurrency;

    /**
     * @return Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
     * 
     */
    public Optional<Output<Integer>> innodbThreadConcurrency() {
        return Optional.ofNullable(this.innodbThreadConcurrency);
    }

    /**
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Import(name="innodbWriteIoThreads")
    private @Nullable Output<Integer> innodbWriteIoThreads;

    /**
     * @return The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Optional<Output<Integer>> innodbWriteIoThreads() {
        return Optional.ofNullable(this.innodbWriteIoThreads);
    }

    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     */
    @Import(name="interactiveTimeout")
    private @Nullable Output<Integer> interactiveTimeout;

    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     */
    public Optional<Output<Integer>> interactiveTimeout() {
        return Optional.ofNullable(this.interactiveTimeout);
    }

    /**
     * Enum: `TempTable`, `MEMORY`. The storage engine for in-memory internal temporary tables.
     * 
     */
    @Import(name="internalTmpMemStorageEngine")
    private @Nullable Output<String> internalTmpMemStorageEngine;

    /**
     * @return Enum: `TempTable`, `MEMORY`. The storage engine for in-memory internal temporary tables.
     * 
     */
    public Optional<Output<String>> internalTmpMemStorageEngine() {
        return Optional.ofNullable(this.internalTmpMemStorageEngine);
    }

    /**
     * The slow*query*logs work as SQL statements that take more than long*query*time seconds to execute. Default is 10s.
     * 
     */
    @Import(name="longQueryTime")
    private @Nullable Output<Double> longQueryTime;

    /**
     * @return The slow*query*logs work as SQL statements that take more than long*query*time seconds to execute. Default is 10s.
     * 
     */
    public Optional<Output<Double>> longQueryTime() {
        return Optional.ofNullable(this.longQueryTime);
    }

    /**
     * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
     * 
     */
    @Import(name="maxAllowedPacket")
    private @Nullable Output<Integer> maxAllowedPacket;

    /**
     * @return Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
     * 
     */
    public Optional<Output<Integer>> maxAllowedPacket() {
        return Optional.ofNullable(this.maxAllowedPacket);
    }

    /**
     * Limits the size of internal in-memory tables. Also set tmp*table*size. Default is 16777216 (16M).
     * 
     */
    @Import(name="maxHeapTableSize")
    private @Nullable Output<Integer> maxHeapTableSize;

    /**
     * @return Limits the size of internal in-memory tables. Also set tmp*table*size. Default is 16777216 (16M).
     * 
     */
    public Optional<Output<Integer>> maxHeapTableSize() {
        return Optional.ofNullable(this.maxHeapTableSize);
    }

    /**
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Import(name="netBufferLength")
    private @Nullable Output<Integer> netBufferLength;

    /**
     * @return Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Optional<Output<Integer>> netBufferLength() {
        return Optional.ofNullable(this.netBufferLength);
    }

    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     * 
     */
    @Import(name="netReadTimeout")
    private @Nullable Output<Integer> netReadTimeout;

    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     */
    public Optional<Output<Integer>> netReadTimeout() {
        return Optional.ofNullable(this.netReadTimeout);
    }

    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    @Import(name="netWriteTimeout")
    private @Nullable Output<Integer> netWriteTimeout;

    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    public Optional<Output<Integer>> netWriteTimeout() {
        return Optional.ofNullable(this.netWriteTimeout);
    }

    /**
     * Slow query log enables capturing of slow queries. Setting slow*query*log to false also truncates the mysql.slow_log table. Default is off.
     * 
     */
    @Import(name="slowQueryLog")
    private @Nullable Output<Boolean> slowQueryLog;

    /**
     * @return Slow query log enables capturing of slow queries. Setting slow*query*log to false also truncates the mysql.slow_log table. Default is off.
     * 
     */
    public Optional<Output<Boolean>> slowQueryLog() {
        return Optional.ofNullable(this.slowQueryLog);
    }

    /**
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
     * 
     */
    @Import(name="sortBufferSize")
    private @Nullable Output<Integer> sortBufferSize;

    /**
     * @return Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
     * 
     */
    public Optional<Output<Integer>> sortBufferSize() {
        return Optional.ofNullable(this.sortBufferSize);
    }

    /**
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
     * 
     */
    @Import(name="sqlMode")
    private @Nullable Output<String> sqlMode;

    /**
     * @return Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
     * 
     */
    public Optional<Output<String>> sqlMode() {
        return Optional.ofNullable(this.sqlMode);
    }

    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     * 
     */
    @Import(name="sqlRequirePrimaryKey")
    private @Nullable Output<Boolean> sqlRequirePrimaryKey;

    /**
     * @return Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     * 
     */
    public Optional<Output<Boolean>> sqlRequirePrimaryKey() {
        return Optional.ofNullable(this.sqlRequirePrimaryKey);
    }

    /**
     * Limits the size of internal in-memory tables. Also set max*heap*table_size. Default is 16777216 (16M).
     * 
     */
    @Import(name="tmpTableSize")
    private @Nullable Output<Integer> tmpTableSize;

    /**
     * @return Limits the size of internal in-memory tables. Also set max*heap*table_size. Default is 16777216 (16M).
     * 
     */
    public Optional<Output<Integer>> tmpTableSize() {
        return Optional.ofNullable(this.tmpTableSize);
    }

    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    @Import(name="waitTimeout")
    private @Nullable Output<Integer> waitTimeout;

    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    public Optional<Output<Integer>> waitTimeout() {
        return Optional.ofNullable(this.waitTimeout);
    }

    private MySqlMysqlUserConfigMysqlArgs() {}

    private MySqlMysqlUserConfigMysqlArgs(MySqlMysqlUserConfigMysqlArgs $) {
        this.connectTimeout = $.connectTimeout;
        this.defaultTimeZone = $.defaultTimeZone;
        this.groupConcatMaxLen = $.groupConcatMaxLen;
        this.informationSchemaStatsExpiry = $.informationSchemaStatsExpiry;
        this.innodbChangeBufferMaxSize = $.innodbChangeBufferMaxSize;
        this.innodbFlushNeighbors = $.innodbFlushNeighbors;
        this.innodbFtMinTokenSize = $.innodbFtMinTokenSize;
        this.innodbFtServerStopwordTable = $.innodbFtServerStopwordTable;
        this.innodbLockWaitTimeout = $.innodbLockWaitTimeout;
        this.innodbLogBufferSize = $.innodbLogBufferSize;
        this.innodbOnlineAlterLogMaxSize = $.innodbOnlineAlterLogMaxSize;
        this.innodbPrintAllDeadlocks = $.innodbPrintAllDeadlocks;
        this.innodbReadIoThreads = $.innodbReadIoThreads;
        this.innodbRollbackOnTimeout = $.innodbRollbackOnTimeout;
        this.innodbThreadConcurrency = $.innodbThreadConcurrency;
        this.innodbWriteIoThreads = $.innodbWriteIoThreads;
        this.interactiveTimeout = $.interactiveTimeout;
        this.internalTmpMemStorageEngine = $.internalTmpMemStorageEngine;
        this.longQueryTime = $.longQueryTime;
        this.maxAllowedPacket = $.maxAllowedPacket;
        this.maxHeapTableSize = $.maxHeapTableSize;
        this.netBufferLength = $.netBufferLength;
        this.netReadTimeout = $.netReadTimeout;
        this.netWriteTimeout = $.netWriteTimeout;
        this.slowQueryLog = $.slowQueryLog;
        this.sortBufferSize = $.sortBufferSize;
        this.sqlMode = $.sqlMode;
        this.sqlRequirePrimaryKey = $.sqlRequirePrimaryKey;
        this.tmpTableSize = $.tmpTableSize;
        this.waitTimeout = $.waitTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MySqlMysqlUserConfigMysqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MySqlMysqlUserConfigMysqlArgs $;

        public Builder() {
            $ = new MySqlMysqlUserConfigMysqlArgs();
        }

        public Builder(MySqlMysqlUserConfigMysqlArgs defaults) {
            $ = new MySqlMysqlUserConfigMysqlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectTimeout The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<Integer> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(Integer connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param defaultTimeZone Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or &#39;SYSTEM&#39; to use the MySQL server default.
         * 
         * @return builder
         * 
         */
        public Builder defaultTimeZone(@Nullable Output<String> defaultTimeZone) {
            $.defaultTimeZone = defaultTimeZone;
            return this;
        }

        /**
         * @param defaultTimeZone Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or &#39;SYSTEM&#39; to use the MySQL server default.
         * 
         * @return builder
         * 
         */
        public Builder defaultTimeZone(String defaultTimeZone) {
            return defaultTimeZone(Output.of(defaultTimeZone));
        }

        /**
         * @param groupConcatMaxLen The maximum permitted result length in bytes for the GROUP_CONCAT() function.
         * 
         * @return builder
         * 
         */
        public Builder groupConcatMaxLen(@Nullable Output<Integer> groupConcatMaxLen) {
            $.groupConcatMaxLen = groupConcatMaxLen;
            return this;
        }

        /**
         * @param groupConcatMaxLen The maximum permitted result length in bytes for the GROUP_CONCAT() function.
         * 
         * @return builder
         * 
         */
        public Builder groupConcatMaxLen(Integer groupConcatMaxLen) {
            return groupConcatMaxLen(Output.of(groupConcatMaxLen));
        }

        /**
         * @param informationSchemaStatsExpiry The time, in seconds, before cached statistics expire.
         * 
         * @return builder
         * 
         */
        public Builder informationSchemaStatsExpiry(@Nullable Output<Integer> informationSchemaStatsExpiry) {
            $.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }

        /**
         * @param informationSchemaStatsExpiry The time, in seconds, before cached statistics expire.
         * 
         * @return builder
         * 
         */
        public Builder informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
            return informationSchemaStatsExpiry(Output.of(informationSchemaStatsExpiry));
        }

        /**
         * @param innodbChangeBufferMaxSize Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
         * 
         * @return builder
         * 
         */
        public Builder innodbChangeBufferMaxSize(@Nullable Output<Integer> innodbChangeBufferMaxSize) {
            $.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
            return this;
        }

        /**
         * @param innodbChangeBufferMaxSize Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
         * 
         * @return builder
         * 
         */
        public Builder innodbChangeBufferMaxSize(Integer innodbChangeBufferMaxSize) {
            return innodbChangeBufferMaxSize(Output.of(innodbChangeBufferMaxSize));
        }

        /**
         * @param innodbFlushNeighbors Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
         * 
         * @return builder
         * 
         */
        public Builder innodbFlushNeighbors(@Nullable Output<Integer> innodbFlushNeighbors) {
            $.innodbFlushNeighbors = innodbFlushNeighbors;
            return this;
        }

        /**
         * @param innodbFlushNeighbors Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
         * 
         * @return builder
         * 
         */
        public Builder innodbFlushNeighbors(Integer innodbFlushNeighbors) {
            return innodbFlushNeighbors(Output.of(innodbFlushNeighbors));
        }

        /**
         * @param innodbFtMinTokenSize Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMinTokenSize(@Nullable Output<Integer> innodbFtMinTokenSize) {
            $.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }

        /**
         * @param innodbFtMinTokenSize Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
            return innodbFtMinTokenSize(Output.of(innodbFtMinTokenSize));
        }

        /**
         * @param innodbFtServerStopwordTable This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
         * 
         * @return builder
         * 
         */
        public Builder innodbFtServerStopwordTable(@Nullable Output<String> innodbFtServerStopwordTable) {
            $.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }

        /**
         * @param innodbFtServerStopwordTable This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
         * 
         * @return builder
         * 
         */
        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            return innodbFtServerStopwordTable(Output.of(innodbFtServerStopwordTable));
        }

        /**
         * @param innodbLockWaitTimeout The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
         * 
         * @return builder
         * 
         */
        public Builder innodbLockWaitTimeout(@Nullable Output<Integer> innodbLockWaitTimeout) {
            $.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }

        /**
         * @param innodbLockWaitTimeout The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
         * 
         * @return builder
         * 
         */
        public Builder innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
            return innodbLockWaitTimeout(Output.of(innodbLockWaitTimeout));
        }

        /**
         * @param innodbLogBufferSize The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
         * 
         * @return builder
         * 
         */
        public Builder innodbLogBufferSize(@Nullable Output<Integer> innodbLogBufferSize) {
            $.innodbLogBufferSize = innodbLogBufferSize;
            return this;
        }

        /**
         * @param innodbLogBufferSize The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
         * 
         * @return builder
         * 
         */
        public Builder innodbLogBufferSize(Integer innodbLogBufferSize) {
            return innodbLogBufferSize(Output.of(innodbLogBufferSize));
        }

        /**
         * @param innodbOnlineAlterLogMaxSize The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
         * 
         * @return builder
         * 
         */
        public Builder innodbOnlineAlterLogMaxSize(@Nullable Output<Integer> innodbOnlineAlterLogMaxSize) {
            $.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            return this;
        }

        /**
         * @param innodbOnlineAlterLogMaxSize The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
         * 
         * @return builder
         * 
         */
        public Builder innodbOnlineAlterLogMaxSize(Integer innodbOnlineAlterLogMaxSize) {
            return innodbOnlineAlterLogMaxSize(Output.of(innodbOnlineAlterLogMaxSize));
        }

        /**
         * @param innodbPrintAllDeadlocks When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder innodbPrintAllDeadlocks(@Nullable Output<Boolean> innodbPrintAllDeadlocks) {
            $.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
            return this;
        }

        /**
         * @param innodbPrintAllDeadlocks When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder innodbPrintAllDeadlocks(Boolean innodbPrintAllDeadlocks) {
            return innodbPrintAllDeadlocks(Output.of(innodbPrintAllDeadlocks));
        }

        /**
         * @param innodbReadIoThreads The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder innodbReadIoThreads(@Nullable Output<Integer> innodbReadIoThreads) {
            $.innodbReadIoThreads = innodbReadIoThreads;
            return this;
        }

        /**
         * @param innodbReadIoThreads The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder innodbReadIoThreads(Integer innodbReadIoThreads) {
            return innodbReadIoThreads(Output.of(innodbReadIoThreads));
        }

        /**
         * @param innodbRollbackOnTimeout When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder innodbRollbackOnTimeout(@Nullable Output<Boolean> innodbRollbackOnTimeout) {
            $.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            return this;
        }

        /**
         * @param innodbRollbackOnTimeout When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder innodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
            return innodbRollbackOnTimeout(Output.of(innodbRollbackOnTimeout));
        }

        /**
         * @param innodbThreadConcurrency Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
         * 
         * @return builder
         * 
         */
        public Builder innodbThreadConcurrency(@Nullable Output<Integer> innodbThreadConcurrency) {
            $.innodbThreadConcurrency = innodbThreadConcurrency;
            return this;
        }

        /**
         * @param innodbThreadConcurrency Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
         * 
         * @return builder
         * 
         */
        public Builder innodbThreadConcurrency(Integer innodbThreadConcurrency) {
            return innodbThreadConcurrency(Output.of(innodbThreadConcurrency));
        }

        /**
         * @param innodbWriteIoThreads The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder innodbWriteIoThreads(@Nullable Output<Integer> innodbWriteIoThreads) {
            $.innodbWriteIoThreads = innodbWriteIoThreads;
            return this;
        }

        /**
         * @param innodbWriteIoThreads The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder innodbWriteIoThreads(Integer innodbWriteIoThreads) {
            return innodbWriteIoThreads(Output.of(innodbWriteIoThreads));
        }

        /**
         * @param interactiveTimeout The number of seconds the server waits for activity on an interactive connection before closing it.
         * 
         * @return builder
         * 
         */
        public Builder interactiveTimeout(@Nullable Output<Integer> interactiveTimeout) {
            $.interactiveTimeout = interactiveTimeout;
            return this;
        }

        /**
         * @param interactiveTimeout The number of seconds the server waits for activity on an interactive connection before closing it.
         * 
         * @return builder
         * 
         */
        public Builder interactiveTimeout(Integer interactiveTimeout) {
            return interactiveTimeout(Output.of(interactiveTimeout));
        }

        /**
         * @param internalTmpMemStorageEngine Enum: `TempTable`, `MEMORY`. The storage engine for in-memory internal temporary tables.
         * 
         * @return builder
         * 
         */
        public Builder internalTmpMemStorageEngine(@Nullable Output<String> internalTmpMemStorageEngine) {
            $.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
            return this;
        }

        /**
         * @param internalTmpMemStorageEngine Enum: `TempTable`, `MEMORY`. The storage engine for in-memory internal temporary tables.
         * 
         * @return builder
         * 
         */
        public Builder internalTmpMemStorageEngine(String internalTmpMemStorageEngine) {
            return internalTmpMemStorageEngine(Output.of(internalTmpMemStorageEngine));
        }

        /**
         * @param longQueryTime The slow*query*logs work as SQL statements that take more than long*query*time seconds to execute. Default is 10s.
         * 
         * @return builder
         * 
         */
        public Builder longQueryTime(@Nullable Output<Double> longQueryTime) {
            $.longQueryTime = longQueryTime;
            return this;
        }

        /**
         * @param longQueryTime The slow*query*logs work as SQL statements that take more than long*query*time seconds to execute. Default is 10s.
         * 
         * @return builder
         * 
         */
        public Builder longQueryTime(Double longQueryTime) {
            return longQueryTime(Output.of(longQueryTime));
        }

        /**
         * @param maxAllowedPacket Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedPacket(@Nullable Output<Integer> maxAllowedPacket) {
            $.maxAllowedPacket = maxAllowedPacket;
            return this;
        }

        /**
         * @param maxAllowedPacket Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedPacket(Integer maxAllowedPacket) {
            return maxAllowedPacket(Output.of(maxAllowedPacket));
        }

        /**
         * @param maxHeapTableSize Limits the size of internal in-memory tables. Also set tmp*table*size. Default is 16777216 (16M).
         * 
         * @return builder
         * 
         */
        public Builder maxHeapTableSize(@Nullable Output<Integer> maxHeapTableSize) {
            $.maxHeapTableSize = maxHeapTableSize;
            return this;
        }

        /**
         * @param maxHeapTableSize Limits the size of internal in-memory tables. Also set tmp*table*size. Default is 16777216 (16M).
         * 
         * @return builder
         * 
         */
        public Builder maxHeapTableSize(Integer maxHeapTableSize) {
            return maxHeapTableSize(Output.of(maxHeapTableSize));
        }

        /**
         * @param netBufferLength Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder netBufferLength(@Nullable Output<Integer> netBufferLength) {
            $.netBufferLength = netBufferLength;
            return this;
        }

        /**
         * @param netBufferLength Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder netBufferLength(Integer netBufferLength) {
            return netBufferLength(Output.of(netBufferLength));
        }

        /**
         * @param netReadTimeout The number of seconds to wait for more data from a connection before aborting the read.
         * 
         * @return builder
         * 
         */
        public Builder netReadTimeout(@Nullable Output<Integer> netReadTimeout) {
            $.netReadTimeout = netReadTimeout;
            return this;
        }

        /**
         * @param netReadTimeout The number of seconds to wait for more data from a connection before aborting the read.
         * 
         * @return builder
         * 
         */
        public Builder netReadTimeout(Integer netReadTimeout) {
            return netReadTimeout(Output.of(netReadTimeout));
        }

        /**
         * @param netWriteTimeout The number of seconds to wait for a block to be written to a connection before aborting the write.
         * 
         * @return builder
         * 
         */
        public Builder netWriteTimeout(@Nullable Output<Integer> netWriteTimeout) {
            $.netWriteTimeout = netWriteTimeout;
            return this;
        }

        /**
         * @param netWriteTimeout The number of seconds to wait for a block to be written to a connection before aborting the write.
         * 
         * @return builder
         * 
         */
        public Builder netWriteTimeout(Integer netWriteTimeout) {
            return netWriteTimeout(Output.of(netWriteTimeout));
        }

        /**
         * @param slowQueryLog Slow query log enables capturing of slow queries. Setting slow*query*log to false also truncates the mysql.slow_log table. Default is off.
         * 
         * @return builder
         * 
         */
        public Builder slowQueryLog(@Nullable Output<Boolean> slowQueryLog) {
            $.slowQueryLog = slowQueryLog;
            return this;
        }

        /**
         * @param slowQueryLog Slow query log enables capturing of slow queries. Setting slow*query*log to false also truncates the mysql.slow_log table. Default is off.
         * 
         * @return builder
         * 
         */
        public Builder slowQueryLog(Boolean slowQueryLog) {
            return slowQueryLog(Output.of(slowQueryLog));
        }

        /**
         * @param sortBufferSize Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
         * 
         * @return builder
         * 
         */
        public Builder sortBufferSize(@Nullable Output<Integer> sortBufferSize) {
            $.sortBufferSize = sortBufferSize;
            return this;
        }

        /**
         * @param sortBufferSize Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
         * 
         * @return builder
         * 
         */
        public Builder sortBufferSize(Integer sortBufferSize) {
            return sortBufferSize(Output.of(sortBufferSize));
        }

        /**
         * @param sqlMode Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(@Nullable Output<String> sqlMode) {
            $.sqlMode = sqlMode;
            return this;
        }

        /**
         * @param sqlMode Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(String sqlMode) {
            return sqlMode(Output.of(sqlMode));
        }

        /**
         * @param sqlRequirePrimaryKey Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
         * 
         * @return builder
         * 
         */
        public Builder sqlRequirePrimaryKey(@Nullable Output<Boolean> sqlRequirePrimaryKey) {
            $.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }

        /**
         * @param sqlRequirePrimaryKey Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
         * 
         * @return builder
         * 
         */
        public Builder sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
            return sqlRequirePrimaryKey(Output.of(sqlRequirePrimaryKey));
        }

        /**
         * @param tmpTableSize Limits the size of internal in-memory tables. Also set max*heap*table_size. Default is 16777216 (16M).
         * 
         * @return builder
         * 
         */
        public Builder tmpTableSize(@Nullable Output<Integer> tmpTableSize) {
            $.tmpTableSize = tmpTableSize;
            return this;
        }

        /**
         * @param tmpTableSize Limits the size of internal in-memory tables. Also set max*heap*table_size. Default is 16777216 (16M).
         * 
         * @return builder
         * 
         */
        public Builder tmpTableSize(Integer tmpTableSize) {
            return tmpTableSize(Output.of(tmpTableSize));
        }

        /**
         * @param waitTimeout The number of seconds the server waits for activity on a noninteractive connection before closing it.
         * 
         * @return builder
         * 
         */
        public Builder waitTimeout(@Nullable Output<Integer> waitTimeout) {
            $.waitTimeout = waitTimeout;
            return this;
        }

        /**
         * @param waitTimeout The number of seconds the server waits for activity on a noninteractive connection before closing it.
         * 
         * @return builder
         * 
         */
        public Builder waitTimeout(Integer waitTimeout) {
            return waitTimeout(Output.of(waitTimeout));
        }

        public MySqlMysqlUserConfigMysqlArgs build() {
            return $;
        }
    }

}
