// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MySqlMysqlUserConfigMysqlArgs extends com.pulumi.resources.ResourceArgs {

    public static final MySqlMysqlUserConfigMysqlArgs Empty = new MySqlMysqlUserConfigMysqlArgs();

    @Import(name="connectTimeout")
    private @Nullable Output<Integer> connectTimeout;

    public Optional<Output<Integer>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    @Import(name="defaultTimeZone")
    private @Nullable Output<String> defaultTimeZone;

    public Optional<Output<String>> defaultTimeZone() {
        return Optional.ofNullable(this.defaultTimeZone);
    }

    @Import(name="groupConcatMaxLen")
    private @Nullable Output<Integer> groupConcatMaxLen;

    public Optional<Output<Integer>> groupConcatMaxLen() {
        return Optional.ofNullable(this.groupConcatMaxLen);
    }

    @Import(name="informationSchemaStatsExpiry")
    private @Nullable Output<Integer> informationSchemaStatsExpiry;

    public Optional<Output<Integer>> informationSchemaStatsExpiry() {
        return Optional.ofNullable(this.informationSchemaStatsExpiry);
    }

    @Import(name="innodbChangeBufferMaxSize")
    private @Nullable Output<Integer> innodbChangeBufferMaxSize;

    public Optional<Output<Integer>> innodbChangeBufferMaxSize() {
        return Optional.ofNullable(this.innodbChangeBufferMaxSize);
    }

    @Import(name="innodbFlushNeighbors")
    private @Nullable Output<Integer> innodbFlushNeighbors;

    public Optional<Output<Integer>> innodbFlushNeighbors() {
        return Optional.ofNullable(this.innodbFlushNeighbors);
    }

    @Import(name="innodbFtMinTokenSize")
    private @Nullable Output<Integer> innodbFtMinTokenSize;

    public Optional<Output<Integer>> innodbFtMinTokenSize() {
        return Optional.ofNullable(this.innodbFtMinTokenSize);
    }

    @Import(name="innodbFtServerStopwordTable")
    private @Nullable Output<String> innodbFtServerStopwordTable;

    public Optional<Output<String>> innodbFtServerStopwordTable() {
        return Optional.ofNullable(this.innodbFtServerStopwordTable);
    }

    @Import(name="innodbLockWaitTimeout")
    private @Nullable Output<Integer> innodbLockWaitTimeout;

    public Optional<Output<Integer>> innodbLockWaitTimeout() {
        return Optional.ofNullable(this.innodbLockWaitTimeout);
    }

    @Import(name="innodbLogBufferSize")
    private @Nullable Output<Integer> innodbLogBufferSize;

    public Optional<Output<Integer>> innodbLogBufferSize() {
        return Optional.ofNullable(this.innodbLogBufferSize);
    }

    @Import(name="innodbOnlineAlterLogMaxSize")
    private @Nullable Output<Integer> innodbOnlineAlterLogMaxSize;

    public Optional<Output<Integer>> innodbOnlineAlterLogMaxSize() {
        return Optional.ofNullable(this.innodbOnlineAlterLogMaxSize);
    }

    @Import(name="innodbPrintAllDeadlocks")
    private @Nullable Output<Boolean> innodbPrintAllDeadlocks;

    public Optional<Output<Boolean>> innodbPrintAllDeadlocks() {
        return Optional.ofNullable(this.innodbPrintAllDeadlocks);
    }

    @Import(name="innodbReadIoThreads")
    private @Nullable Output<Integer> innodbReadIoThreads;

    public Optional<Output<Integer>> innodbReadIoThreads() {
        return Optional.ofNullable(this.innodbReadIoThreads);
    }

    @Import(name="innodbRollbackOnTimeout")
    private @Nullable Output<Boolean> innodbRollbackOnTimeout;

    public Optional<Output<Boolean>> innodbRollbackOnTimeout() {
        return Optional.ofNullable(this.innodbRollbackOnTimeout);
    }

    @Import(name="innodbThreadConcurrency")
    private @Nullable Output<Integer> innodbThreadConcurrency;

    public Optional<Output<Integer>> innodbThreadConcurrency() {
        return Optional.ofNullable(this.innodbThreadConcurrency);
    }

    @Import(name="innodbWriteIoThreads")
    private @Nullable Output<Integer> innodbWriteIoThreads;

    public Optional<Output<Integer>> innodbWriteIoThreads() {
        return Optional.ofNullable(this.innodbWriteIoThreads);
    }

    @Import(name="interactiveTimeout")
    private @Nullable Output<Integer> interactiveTimeout;

    public Optional<Output<Integer>> interactiveTimeout() {
        return Optional.ofNullable(this.interactiveTimeout);
    }

    @Import(name="internalTmpMemStorageEngine")
    private @Nullable Output<String> internalTmpMemStorageEngine;

    public Optional<Output<String>> internalTmpMemStorageEngine() {
        return Optional.ofNullable(this.internalTmpMemStorageEngine);
    }

    @Import(name="longQueryTime")
    private @Nullable Output<Double> longQueryTime;

    public Optional<Output<Double>> longQueryTime() {
        return Optional.ofNullable(this.longQueryTime);
    }

    @Import(name="maxAllowedPacket")
    private @Nullable Output<Integer> maxAllowedPacket;

    public Optional<Output<Integer>> maxAllowedPacket() {
        return Optional.ofNullable(this.maxAllowedPacket);
    }

    @Import(name="maxHeapTableSize")
    private @Nullable Output<Integer> maxHeapTableSize;

    public Optional<Output<Integer>> maxHeapTableSize() {
        return Optional.ofNullable(this.maxHeapTableSize);
    }

    @Import(name="netBufferLength")
    private @Nullable Output<Integer> netBufferLength;

    public Optional<Output<Integer>> netBufferLength() {
        return Optional.ofNullable(this.netBufferLength);
    }

    @Import(name="netReadTimeout")
    private @Nullable Output<Integer> netReadTimeout;

    public Optional<Output<Integer>> netReadTimeout() {
        return Optional.ofNullable(this.netReadTimeout);
    }

    @Import(name="netWriteTimeout")
    private @Nullable Output<Integer> netWriteTimeout;

    public Optional<Output<Integer>> netWriteTimeout() {
        return Optional.ofNullable(this.netWriteTimeout);
    }

    @Import(name="slowQueryLog")
    private @Nullable Output<Boolean> slowQueryLog;

    public Optional<Output<Boolean>> slowQueryLog() {
        return Optional.ofNullable(this.slowQueryLog);
    }

    @Import(name="sortBufferSize")
    private @Nullable Output<Integer> sortBufferSize;

    public Optional<Output<Integer>> sortBufferSize() {
        return Optional.ofNullable(this.sortBufferSize);
    }

    @Import(name="sqlMode")
    private @Nullable Output<String> sqlMode;

    public Optional<Output<String>> sqlMode() {
        return Optional.ofNullable(this.sqlMode);
    }

    @Import(name="sqlRequirePrimaryKey")
    private @Nullable Output<Boolean> sqlRequirePrimaryKey;

    public Optional<Output<Boolean>> sqlRequirePrimaryKey() {
        return Optional.ofNullable(this.sqlRequirePrimaryKey);
    }

    @Import(name="tmpTableSize")
    private @Nullable Output<Integer> tmpTableSize;

    public Optional<Output<Integer>> tmpTableSize() {
        return Optional.ofNullable(this.tmpTableSize);
    }

    @Import(name="waitTimeout")
    private @Nullable Output<Integer> waitTimeout;

    public Optional<Output<Integer>> waitTimeout() {
        return Optional.ofNullable(this.waitTimeout);
    }

    private MySqlMysqlUserConfigMysqlArgs() {}

    private MySqlMysqlUserConfigMysqlArgs(MySqlMysqlUserConfigMysqlArgs $) {
        this.connectTimeout = $.connectTimeout;
        this.defaultTimeZone = $.defaultTimeZone;
        this.groupConcatMaxLen = $.groupConcatMaxLen;
        this.informationSchemaStatsExpiry = $.informationSchemaStatsExpiry;
        this.innodbChangeBufferMaxSize = $.innodbChangeBufferMaxSize;
        this.innodbFlushNeighbors = $.innodbFlushNeighbors;
        this.innodbFtMinTokenSize = $.innodbFtMinTokenSize;
        this.innodbFtServerStopwordTable = $.innodbFtServerStopwordTable;
        this.innodbLockWaitTimeout = $.innodbLockWaitTimeout;
        this.innodbLogBufferSize = $.innodbLogBufferSize;
        this.innodbOnlineAlterLogMaxSize = $.innodbOnlineAlterLogMaxSize;
        this.innodbPrintAllDeadlocks = $.innodbPrintAllDeadlocks;
        this.innodbReadIoThreads = $.innodbReadIoThreads;
        this.innodbRollbackOnTimeout = $.innodbRollbackOnTimeout;
        this.innodbThreadConcurrency = $.innodbThreadConcurrency;
        this.innodbWriteIoThreads = $.innodbWriteIoThreads;
        this.interactiveTimeout = $.interactiveTimeout;
        this.internalTmpMemStorageEngine = $.internalTmpMemStorageEngine;
        this.longQueryTime = $.longQueryTime;
        this.maxAllowedPacket = $.maxAllowedPacket;
        this.maxHeapTableSize = $.maxHeapTableSize;
        this.netBufferLength = $.netBufferLength;
        this.netReadTimeout = $.netReadTimeout;
        this.netWriteTimeout = $.netWriteTimeout;
        this.slowQueryLog = $.slowQueryLog;
        this.sortBufferSize = $.sortBufferSize;
        this.sqlMode = $.sqlMode;
        this.sqlRequirePrimaryKey = $.sqlRequirePrimaryKey;
        this.tmpTableSize = $.tmpTableSize;
        this.waitTimeout = $.waitTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MySqlMysqlUserConfigMysqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MySqlMysqlUserConfigMysqlArgs $;

        public Builder() {
            $ = new MySqlMysqlUserConfigMysqlArgs();
        }

        public Builder(MySqlMysqlUserConfigMysqlArgs defaults) {
            $ = new MySqlMysqlUserConfigMysqlArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectTimeout(@Nullable Output<Integer> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        public Builder connectTimeout(Integer connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        public Builder defaultTimeZone(@Nullable Output<String> defaultTimeZone) {
            $.defaultTimeZone = defaultTimeZone;
            return this;
        }

        public Builder defaultTimeZone(String defaultTimeZone) {
            return defaultTimeZone(Output.of(defaultTimeZone));
        }

        public Builder groupConcatMaxLen(@Nullable Output<Integer> groupConcatMaxLen) {
            $.groupConcatMaxLen = groupConcatMaxLen;
            return this;
        }

        public Builder groupConcatMaxLen(Integer groupConcatMaxLen) {
            return groupConcatMaxLen(Output.of(groupConcatMaxLen));
        }

        public Builder informationSchemaStatsExpiry(@Nullable Output<Integer> informationSchemaStatsExpiry) {
            $.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }

        public Builder informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
            return informationSchemaStatsExpiry(Output.of(informationSchemaStatsExpiry));
        }

        public Builder innodbChangeBufferMaxSize(@Nullable Output<Integer> innodbChangeBufferMaxSize) {
            $.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
            return this;
        }

        public Builder innodbChangeBufferMaxSize(Integer innodbChangeBufferMaxSize) {
            return innodbChangeBufferMaxSize(Output.of(innodbChangeBufferMaxSize));
        }

        public Builder innodbFlushNeighbors(@Nullable Output<Integer> innodbFlushNeighbors) {
            $.innodbFlushNeighbors = innodbFlushNeighbors;
            return this;
        }

        public Builder innodbFlushNeighbors(Integer innodbFlushNeighbors) {
            return innodbFlushNeighbors(Output.of(innodbFlushNeighbors));
        }

        public Builder innodbFtMinTokenSize(@Nullable Output<Integer> innodbFtMinTokenSize) {
            $.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }

        public Builder innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
            return innodbFtMinTokenSize(Output.of(innodbFtMinTokenSize));
        }

        public Builder innodbFtServerStopwordTable(@Nullable Output<String> innodbFtServerStopwordTable) {
            $.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }

        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            return innodbFtServerStopwordTable(Output.of(innodbFtServerStopwordTable));
        }

        public Builder innodbLockWaitTimeout(@Nullable Output<Integer> innodbLockWaitTimeout) {
            $.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }

        public Builder innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
            return innodbLockWaitTimeout(Output.of(innodbLockWaitTimeout));
        }

        public Builder innodbLogBufferSize(@Nullable Output<Integer> innodbLogBufferSize) {
            $.innodbLogBufferSize = innodbLogBufferSize;
            return this;
        }

        public Builder innodbLogBufferSize(Integer innodbLogBufferSize) {
            return innodbLogBufferSize(Output.of(innodbLogBufferSize));
        }

        public Builder innodbOnlineAlterLogMaxSize(@Nullable Output<Integer> innodbOnlineAlterLogMaxSize) {
            $.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            return this;
        }

        public Builder innodbOnlineAlterLogMaxSize(Integer innodbOnlineAlterLogMaxSize) {
            return innodbOnlineAlterLogMaxSize(Output.of(innodbOnlineAlterLogMaxSize));
        }

        public Builder innodbPrintAllDeadlocks(@Nullable Output<Boolean> innodbPrintAllDeadlocks) {
            $.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
            return this;
        }

        public Builder innodbPrintAllDeadlocks(Boolean innodbPrintAllDeadlocks) {
            return innodbPrintAllDeadlocks(Output.of(innodbPrintAllDeadlocks));
        }

        public Builder innodbReadIoThreads(@Nullable Output<Integer> innodbReadIoThreads) {
            $.innodbReadIoThreads = innodbReadIoThreads;
            return this;
        }

        public Builder innodbReadIoThreads(Integer innodbReadIoThreads) {
            return innodbReadIoThreads(Output.of(innodbReadIoThreads));
        }

        public Builder innodbRollbackOnTimeout(@Nullable Output<Boolean> innodbRollbackOnTimeout) {
            $.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            return this;
        }

        public Builder innodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
            return innodbRollbackOnTimeout(Output.of(innodbRollbackOnTimeout));
        }

        public Builder innodbThreadConcurrency(@Nullable Output<Integer> innodbThreadConcurrency) {
            $.innodbThreadConcurrency = innodbThreadConcurrency;
            return this;
        }

        public Builder innodbThreadConcurrency(Integer innodbThreadConcurrency) {
            return innodbThreadConcurrency(Output.of(innodbThreadConcurrency));
        }

        public Builder innodbWriteIoThreads(@Nullable Output<Integer> innodbWriteIoThreads) {
            $.innodbWriteIoThreads = innodbWriteIoThreads;
            return this;
        }

        public Builder innodbWriteIoThreads(Integer innodbWriteIoThreads) {
            return innodbWriteIoThreads(Output.of(innodbWriteIoThreads));
        }

        public Builder interactiveTimeout(@Nullable Output<Integer> interactiveTimeout) {
            $.interactiveTimeout = interactiveTimeout;
            return this;
        }

        public Builder interactiveTimeout(Integer interactiveTimeout) {
            return interactiveTimeout(Output.of(interactiveTimeout));
        }

        public Builder internalTmpMemStorageEngine(@Nullable Output<String> internalTmpMemStorageEngine) {
            $.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
            return this;
        }

        public Builder internalTmpMemStorageEngine(String internalTmpMemStorageEngine) {
            return internalTmpMemStorageEngine(Output.of(internalTmpMemStorageEngine));
        }

        public Builder longQueryTime(@Nullable Output<Double> longQueryTime) {
            $.longQueryTime = longQueryTime;
            return this;
        }

        public Builder longQueryTime(Double longQueryTime) {
            return longQueryTime(Output.of(longQueryTime));
        }

        public Builder maxAllowedPacket(@Nullable Output<Integer> maxAllowedPacket) {
            $.maxAllowedPacket = maxAllowedPacket;
            return this;
        }

        public Builder maxAllowedPacket(Integer maxAllowedPacket) {
            return maxAllowedPacket(Output.of(maxAllowedPacket));
        }

        public Builder maxHeapTableSize(@Nullable Output<Integer> maxHeapTableSize) {
            $.maxHeapTableSize = maxHeapTableSize;
            return this;
        }

        public Builder maxHeapTableSize(Integer maxHeapTableSize) {
            return maxHeapTableSize(Output.of(maxHeapTableSize));
        }

        public Builder netBufferLength(@Nullable Output<Integer> netBufferLength) {
            $.netBufferLength = netBufferLength;
            return this;
        }

        public Builder netBufferLength(Integer netBufferLength) {
            return netBufferLength(Output.of(netBufferLength));
        }

        public Builder netReadTimeout(@Nullable Output<Integer> netReadTimeout) {
            $.netReadTimeout = netReadTimeout;
            return this;
        }

        public Builder netReadTimeout(Integer netReadTimeout) {
            return netReadTimeout(Output.of(netReadTimeout));
        }

        public Builder netWriteTimeout(@Nullable Output<Integer> netWriteTimeout) {
            $.netWriteTimeout = netWriteTimeout;
            return this;
        }

        public Builder netWriteTimeout(Integer netWriteTimeout) {
            return netWriteTimeout(Output.of(netWriteTimeout));
        }

        public Builder slowQueryLog(@Nullable Output<Boolean> slowQueryLog) {
            $.slowQueryLog = slowQueryLog;
            return this;
        }

        public Builder slowQueryLog(Boolean slowQueryLog) {
            return slowQueryLog(Output.of(slowQueryLog));
        }

        public Builder sortBufferSize(@Nullable Output<Integer> sortBufferSize) {
            $.sortBufferSize = sortBufferSize;
            return this;
        }

        public Builder sortBufferSize(Integer sortBufferSize) {
            return sortBufferSize(Output.of(sortBufferSize));
        }

        public Builder sqlMode(@Nullable Output<String> sqlMode) {
            $.sqlMode = sqlMode;
            return this;
        }

        public Builder sqlMode(String sqlMode) {
            return sqlMode(Output.of(sqlMode));
        }

        public Builder sqlRequirePrimaryKey(@Nullable Output<Boolean> sqlRequirePrimaryKey) {
            $.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }

        public Builder sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
            return sqlRequirePrimaryKey(Output.of(sqlRequirePrimaryKey));
        }

        public Builder tmpTableSize(@Nullable Output<Integer> tmpTableSize) {
            $.tmpTableSize = tmpTableSize;
            return this;
        }

        public Builder tmpTableSize(Integer tmpTableSize) {
            return tmpTableSize(Output.of(tmpTableSize));
        }

        public Builder waitTimeout(@Nullable Output<Integer> waitTimeout) {
            $.waitTimeout = waitTimeout;
            return this;
        }

        public Builder waitTimeout(Integer waitTimeout) {
            return waitTimeout(Output.of(waitTimeout));
        }

        public MySqlMysqlUserConfigMysqlArgs build() {
            return $;
        }
    }

}
