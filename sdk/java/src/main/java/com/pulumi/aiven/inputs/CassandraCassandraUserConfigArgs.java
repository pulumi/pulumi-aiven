// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.CassandraCassandraUserConfigCassandraArgs;
import com.pulumi.aiven.inputs.CassandraCassandraUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.CassandraCassandraUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.CassandraCassandraUserConfigPublicAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CassandraCassandraUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CassandraCassandraUserConfigArgs Empty = new CassandraCassandraUserConfigArgs();

    /**
     * Additional Cloud Regions for Backup Replication.
     * 
     */
    @Import(name="additionalBackupRegions")
    private @Nullable Output<String> additionalBackupRegions;

    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<Output<String>> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }

    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
     * 
     */
    @Import(name="backupHour")
    private @Nullable Output<Integer> backupHour;

    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
     * 
     */
    public Optional<Output<Integer>> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }

    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
     * 
     */
    @Import(name="backupMinute")
    private @Nullable Output<Integer> backupMinute;

    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
     * 
     */
    public Optional<Output<Integer>> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }

    /**
     * Cassandra configuration values
     * 
     */
    @Import(name="cassandra")
    private @Nullable Output<CassandraCassandraUserConfigCassandraArgs> cassandra;

    /**
     * @return Cassandra configuration values
     * 
     */
    public Optional<Output<CassandraCassandraUserConfigCassandraArgs>> cassandra() {
        return Optional.ofNullable(this.cassandra);
    }

    /**
     * Enum: `3`, `4`, `4.1`, and newer. Cassandra version.
     * 
     */
    @Import(name="cassandraVersion")
    private @Nullable Output<String> cassandraVersion;

    /**
     * @return Enum: `3`, `4`, `4.1`, and newer. Cassandra version.
     * 
     */
    public Optional<Output<String>> cassandraVersion() {
        return Optional.ofNullable(this.cassandraVersion);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    @Import(name="ipFilterObjects")
    private @Nullable Output<List<CassandraCassandraUserConfigIpFilterObjectArgs>> ipFilterObjects;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public Optional<Output<List<CassandraCassandraUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Sets the service into migration mode enabling the sstableloader utility to be used to upload Cassandra data files. Available only on service create.
     * 
     */
    @Import(name="migrateSstableloader")
    private @Nullable Output<Boolean> migrateSstableloader;

    /**
     * @return Sets the service into migration mode enabling the sstableloader utility to be used to upload Cassandra data files. Available only on service create.
     * 
     */
    public Optional<Output<Boolean>> migrateSstableloader() {
        return Optional.ofNullable(this.migrateSstableloader);
    }

    /**
     * Allow access to selected service ports from private networks
     * 
     */
    @Import(name="privateAccess")
    private @Nullable Output<CassandraCassandraUserConfigPrivateAccessArgs> privateAccess;

    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<Output<CassandraCassandraUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    /**
     * Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<CassandraCassandraUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<CassandraCassandraUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    /**
     * When bootstrapping, instead of creating a new Cassandra cluster try to join an existing one from another service. Can only be set on service creation. Example: `my-test-cassandra`.
     * 
     */
    @Import(name="serviceToJoinWith")
    private @Nullable Output<String> serviceToJoinWith;

    /**
     * @return When bootstrapping, instead of creating a new Cassandra cluster try to join an existing one from another service. Can only be set on service creation. Example: `my-test-cassandra`.
     * 
     */
    public Optional<Output<String>> serviceToJoinWith() {
        return Optional.ofNullable(this.serviceToJoinWith);
    }

    /**
     * Use static public IP addresses.
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    private CassandraCassandraUserConfigArgs() {}

    private CassandraCassandraUserConfigArgs(CassandraCassandraUserConfigArgs $) {
        this.additionalBackupRegions = $.additionalBackupRegions;
        this.backupHour = $.backupHour;
        this.backupMinute = $.backupMinute;
        this.cassandra = $.cassandra;
        this.cassandraVersion = $.cassandraVersion;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.migrateSstableloader = $.migrateSstableloader;
        this.privateAccess = $.privateAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.serviceLog = $.serviceLog;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.serviceToJoinWith = $.serviceToJoinWith;
        this.staticIps = $.staticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CassandraCassandraUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CassandraCassandraUserConfigArgs $;

        public Builder() {
            $ = new CassandraCassandraUserConfigArgs();
        }

        public Builder(CassandraCassandraUserConfigArgs defaults) {
            $ = new CassandraCassandraUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(@Nullable Output<String> additionalBackupRegions) {
            $.additionalBackupRegions = additionalBackupRegions;
            return this;
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         */
        public Builder additionalBackupRegions(String additionalBackupRegions) {
            return additionalBackupRegions(Output.of(additionalBackupRegions));
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(@Nullable Output<Integer> backupHour) {
            $.backupHour = backupHour;
            return this;
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(Integer backupHour) {
            return backupHour(Output.of(backupHour));
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(@Nullable Output<Integer> backupMinute) {
            $.backupMinute = backupMinute;
            return this;
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(Integer backupMinute) {
            return backupMinute(Output.of(backupMinute));
        }

        /**
         * @param cassandra Cassandra configuration values
         * 
         * @return builder
         * 
         */
        public Builder cassandra(@Nullable Output<CassandraCassandraUserConfigCassandraArgs> cassandra) {
            $.cassandra = cassandra;
            return this;
        }

        /**
         * @param cassandra Cassandra configuration values
         * 
         * @return builder
         * 
         */
        public Builder cassandra(CassandraCassandraUserConfigCassandraArgs cassandra) {
            return cassandra(Output.of(cassandra));
        }

        /**
         * @param cassandraVersion Enum: `3`, `4`, `4.1`, and newer. Cassandra version.
         * 
         * @return builder
         * 
         */
        public Builder cassandraVersion(@Nullable Output<String> cassandraVersion) {
            $.cassandraVersion = cassandraVersion;
            return this;
        }

        /**
         * @param cassandraVersion Enum: `3`, `4`, `4.1`, and newer. Cassandra version.
         * 
         * @return builder
         * 
         */
        public Builder cassandraVersion(String cassandraVersion) {
            return cassandraVersion(Output.of(cassandraVersion));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(@Nullable Output<List<CassandraCassandraUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(List<CassandraCassandraUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(CassandraCassandraUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param migrateSstableloader Sets the service into migration mode enabling the sstableloader utility to be used to upload Cassandra data files. Available only on service create.
         * 
         * @return builder
         * 
         */
        public Builder migrateSstableloader(@Nullable Output<Boolean> migrateSstableloader) {
            $.migrateSstableloader = migrateSstableloader;
            return this;
        }

        /**
         * @param migrateSstableloader Sets the service into migration mode enabling the sstableloader utility to be used to upload Cassandra data files. Available only on service create.
         * 
         * @return builder
         * 
         */
        public Builder migrateSstableloader(Boolean migrateSstableloader) {
            return migrateSstableloader(Output.of(migrateSstableloader));
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(@Nullable Output<CassandraCassandraUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(CassandraCassandraUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<CassandraCassandraUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(CassandraCassandraUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        /**
         * @param serviceToJoinWith When bootstrapping, instead of creating a new Cassandra cluster try to join an existing one from another service. Can only be set on service creation. Example: `my-test-cassandra`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToJoinWith(@Nullable Output<String> serviceToJoinWith) {
            $.serviceToJoinWith = serviceToJoinWith;
            return this;
        }

        /**
         * @param serviceToJoinWith When bootstrapping, instead of creating a new Cassandra cluster try to join an existing one from another service. Can only be set on service creation. Example: `my-test-cassandra`.
         * 
         * @return builder
         * 
         */
        public Builder serviceToJoinWith(String serviceToJoinWith) {
            return serviceToJoinWith(Output.of(serviceToJoinWith));
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        public CassandraCassandraUserConfigArgs build() {
            return $;
        }
    }

}
