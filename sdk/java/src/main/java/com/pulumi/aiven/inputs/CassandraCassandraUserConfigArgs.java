// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.CassandraCassandraUserConfigCassandraArgs;
import com.pulumi.aiven.inputs.CassandraCassandraUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.CassandraCassandraUserConfigPublicAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CassandraCassandraUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CassandraCassandraUserConfigArgs Empty = new CassandraCassandraUserConfigArgs();

    /**
     * cassandra configuration values
     * 
     */
    @Import(name="cassandra")
    private @Nullable Output<CassandraCassandraUserConfigCassandraArgs> cassandra;

    /**
     * @return cassandra configuration values
     * 
     */
    public Optional<Output<CassandraCassandraUserConfigCassandraArgs>> cassandra() {
        return Optional.ofNullable(this.cassandra);
    }

    /**
     * Cassandra major version
     * 
     */
    @Import(name="cassandraVersion")
    private @Nullable Output<String> cassandraVersion;

    /**
     * @return Cassandra major version
     * 
     */
    public Optional<Output<String>> cassandraVersion() {
        return Optional.ofNullable(this.cassandraVersion);
    }

    /**
     * IP filter
     * 
     */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return IP filter
     * 
     */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Migration mode for the sstableloader utility
     * 
     */
    @Import(name="migrateSstableloader")
    private @Nullable Output<String> migrateSstableloader;

    /**
     * @return Migration mode for the sstableloader utility
     * 
     */
    public Optional<Output<String>> migrateSstableloader() {
        return Optional.ofNullable(this.migrateSstableloader);
    }

    /**
     * Allow access to selected service ports from private networks
     * 
     */
    @Import(name="privateAccess")
    private @Nullable Output<CassandraCassandraUserConfigPrivateAccessArgs> privateAccess;

    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<Output<CassandraCassandraUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    /**
     * Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<CassandraCassandraUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<CassandraCassandraUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    /**
     * Static IP addresses
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<String> staticIps;

    /**
     * @return Static IP addresses
     * 
     */
    public Optional<Output<String>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    private CassandraCassandraUserConfigArgs() {}

    private CassandraCassandraUserConfigArgs(CassandraCassandraUserConfigArgs $) {
        this.cassandra = $.cassandra;
        this.cassandraVersion = $.cassandraVersion;
        this.ipFilters = $.ipFilters;
        this.migrateSstableloader = $.migrateSstableloader;
        this.privateAccess = $.privateAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.staticIps = $.staticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CassandraCassandraUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CassandraCassandraUserConfigArgs $;

        public Builder() {
            $ = new CassandraCassandraUserConfigArgs();
        }

        public Builder(CassandraCassandraUserConfigArgs defaults) {
            $ = new CassandraCassandraUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cassandra cassandra configuration values
         * 
         * @return builder
         * 
         */
        public Builder cassandra(@Nullable Output<CassandraCassandraUserConfigCassandraArgs> cassandra) {
            $.cassandra = cassandra;
            return this;
        }

        /**
         * @param cassandra cassandra configuration values
         * 
         * @return builder
         * 
         */
        public Builder cassandra(CassandraCassandraUserConfigCassandraArgs cassandra) {
            return cassandra(Output.of(cassandra));
        }

        /**
         * @param cassandraVersion Cassandra major version
         * 
         * @return builder
         * 
         */
        public Builder cassandraVersion(@Nullable Output<String> cassandraVersion) {
            $.cassandraVersion = cassandraVersion;
            return this;
        }

        /**
         * @param cassandraVersion Cassandra major version
         * 
         * @return builder
         * 
         */
        public Builder cassandraVersion(String cassandraVersion) {
            return cassandraVersion(Output.of(cassandraVersion));
        }

        /**
         * @param ipFilters IP filter
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters IP filter
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters IP filter
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param migrateSstableloader Migration mode for the sstableloader utility
         * 
         * @return builder
         * 
         */
        public Builder migrateSstableloader(@Nullable Output<String> migrateSstableloader) {
            $.migrateSstableloader = migrateSstableloader;
            return this;
        }

        /**
         * @param migrateSstableloader Migration mode for the sstableloader utility
         * 
         * @return builder
         * 
         */
        public Builder migrateSstableloader(String migrateSstableloader) {
            return migrateSstableloader(Output.of(migrateSstableloader));
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(@Nullable Output<CassandraCassandraUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        /**
         * @param privateAccess Allow access to selected service ports from private networks
         * 
         * @return builder
         * 
         */
        public Builder privateAccess(CassandraCassandraUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        /**
         * @param projectToForkFrom Name of another project to fork a service from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<CassandraCassandraUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(CassandraCassandraUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        /**
         * @param serviceToForkFrom Name of another service to fork from. This has effect only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        /**
         * @param staticIps Static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<String> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticIps(String staticIps) {
            return staticIps(Output.of(staticIps));
        }

        public CassandraCassandraUserConfigArgs build() {
            return $;
        }
    }

}
