// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetKafkaKafka {
    /**
     * @return The Kafka client certificate.
     * 
     */
    private String accessCert;
    /**
     * @return The Kafka client certificate key.
     * 
     */
    private String accessKey;
    /**
     * @return The Kafka Connect URI.
     * 
     */
    private String connectUri;
    /**
     * @return The Kafka REST URI.
     * 
     */
    private String restUri;
    /**
     * @return The Schema Registry URI.
     * 
     */
    private String schemaRegistryUri;
    /**
     * @return Kafka server URIs.
     * 
     */
    private List<String> uris;

    private GetKafkaKafka() {}
    /**
     * @return The Kafka client certificate.
     * 
     */
    public String accessCert() {
        return this.accessCert;
    }
    /**
     * @return The Kafka client certificate key.
     * 
     */
    public String accessKey() {
        return this.accessKey;
    }
    /**
     * @return The Kafka Connect URI.
     * 
     */
    public String connectUri() {
        return this.connectUri;
    }
    /**
     * @return The Kafka REST URI.
     * 
     */
    public String restUri() {
        return this.restUri;
    }
    /**
     * @return The Schema Registry URI.
     * 
     */
    public String schemaRegistryUri() {
        return this.schemaRegistryUri;
    }
    /**
     * @return Kafka server URIs.
     * 
     */
    public List<String> uris() {
        return this.uris;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaKafka defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessCert;
        private String accessKey;
        private String connectUri;
        private String restUri;
        private String schemaRegistryUri;
        private List<String> uris;
        public Builder() {}
        public Builder(GetKafkaKafka defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessCert = defaults.accessCert;
    	      this.accessKey = defaults.accessKey;
    	      this.connectUri = defaults.connectUri;
    	      this.restUri = defaults.restUri;
    	      this.schemaRegistryUri = defaults.schemaRegistryUri;
    	      this.uris = defaults.uris;
        }

        @CustomType.Setter
        public Builder accessCert(String accessCert) {
            if (accessCert == null) {
              throw new MissingRequiredPropertyException("GetKafkaKafka", "accessCert");
            }
            this.accessCert = accessCert;
            return this;
        }
        @CustomType.Setter
        public Builder accessKey(String accessKey) {
            if (accessKey == null) {
              throw new MissingRequiredPropertyException("GetKafkaKafka", "accessKey");
            }
            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder connectUri(String connectUri) {
            if (connectUri == null) {
              throw new MissingRequiredPropertyException("GetKafkaKafka", "connectUri");
            }
            this.connectUri = connectUri;
            return this;
        }
        @CustomType.Setter
        public Builder restUri(String restUri) {
            if (restUri == null) {
              throw new MissingRequiredPropertyException("GetKafkaKafka", "restUri");
            }
            this.restUri = restUri;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryUri(String schemaRegistryUri) {
            if (schemaRegistryUri == null) {
              throw new MissingRequiredPropertyException("GetKafkaKafka", "schemaRegistryUri");
            }
            this.schemaRegistryUri = schemaRegistryUri;
            return this;
        }
        @CustomType.Setter
        public Builder uris(List<String> uris) {
            if (uris == null) {
              throw new MissingRequiredPropertyException("GetKafkaKafka", "uris");
            }
            this.uris = uris;
            return this;
        }
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }
        public GetKafkaKafka build() {
            final var _resultValue = new GetKafkaKafka();
            _resultValue.accessCert = accessCert;
            _resultValue.accessKey = accessKey;
            _resultValue.connectUri = connectUri;
            _resultValue.restUri = restUri;
            _resultValue.schemaRegistryUri = schemaRegistryUri;
            _resultValue.uris = uris;
            return _resultValue;
        }
    }
}
