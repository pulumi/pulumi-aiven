// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaConnectKafkaConnectUserConfigKafkaConnectArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaConnectKafkaConnectUserConfigKafkaConnectArgs Empty = new KafkaConnectKafkaConnectUserConfigKafkaConnectArgs();

    /**
     * Defines what client configurations can be overridden by the connector. Default is None.
     * 
     */
    @Import(name="connectorClientConfigOverridePolicy")
    private @Nullable Output<String> connectorClientConfigOverridePolicy;

    /**
     * @return Defines what client configurations can be overridden by the connector. Default is None.
     * 
     */
    public Optional<Output<String>> connectorClientConfigOverridePolicy() {
        return Optional.ofNullable(this.connectorClientConfigOverridePolicy);
    }

    /**
     * What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest.
     * 
     */
    @Import(name="consumerAutoOffsetReset")
    private @Nullable Output<String> consumerAutoOffsetReset;

    /**
     * @return What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest.
     * 
     */
    public Optional<Output<String>> consumerAutoOffsetReset() {
        return Optional.ofNullable(this.consumerAutoOffsetReset);
    }

    /**
     * Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
     * 
     */
    @Import(name="consumerFetchMaxBytes")
    private @Nullable Output<Integer> consumerFetchMaxBytes;

    /**
     * @return Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
     * 
     */
    public Optional<Output<Integer>> consumerFetchMaxBytes() {
        return Optional.ofNullable(this.consumerFetchMaxBytes);
    }

    /**
     * Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
     * 
     */
    @Import(name="consumerIsolationLevel")
    private @Nullable Output<String> consumerIsolationLevel;

    /**
     * @return Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
     * 
     */
    public Optional<Output<String>> consumerIsolationLevel() {
        return Optional.ofNullable(this.consumerIsolationLevel);
    }

    /**
     * Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. .
     * 
     */
    @Import(name="consumerMaxPartitionFetchBytes")
    private @Nullable Output<Integer> consumerMaxPartitionFetchBytes;

    /**
     * @return Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. .
     * 
     */
    public Optional<Output<Integer>> consumerMaxPartitionFetchBytes() {
        return Optional.ofNullable(this.consumerMaxPartitionFetchBytes);
    }

    /**
     * The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
     * 
     */
    @Import(name="consumerMaxPollIntervalMs")
    private @Nullable Output<Integer> consumerMaxPollIntervalMs;

    /**
     * @return The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
     * 
     */
    public Optional<Output<Integer>> consumerMaxPollIntervalMs() {
        return Optional.ofNullable(this.consumerMaxPollIntervalMs);
    }

    /**
     * The maximum number of records returned in a single call to poll() (defaults to 500).
     * 
     */
    @Import(name="consumerMaxPollRecords")
    private @Nullable Output<Integer> consumerMaxPollRecords;

    /**
     * @return The maximum number of records returned in a single call to poll() (defaults to 500).
     * 
     */
    public Optional<Output<Integer>> consumerMaxPollRecords() {
        return Optional.ofNullable(this.consumerMaxPollRecords);
    }

    /**
     * The interval at which to try committing offsets for tasks (defaults to 60000).
     * 
     */
    @Import(name="offsetFlushIntervalMs")
    private @Nullable Output<Integer> offsetFlushIntervalMs;

    /**
     * @return The interval at which to try committing offsets for tasks (defaults to 60000).
     * 
     */
    public Optional<Output<Integer>> offsetFlushIntervalMs() {
        return Optional.ofNullable(this.offsetFlushIntervalMs);
    }

    /**
     * Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
     * 
     */
    @Import(name="offsetFlushTimeoutMs")
    private @Nullable Output<Integer> offsetFlushTimeoutMs;

    /**
     * @return Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
     * 
     */
    public Optional<Output<Integer>> offsetFlushTimeoutMs() {
        return Optional.ofNullable(this.offsetFlushTimeoutMs);
    }

    /**
     * This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will &#39;linger&#39; for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
     * 
     */
    @Import(name="producerBatchSize")
    private @Nullable Output<Integer> producerBatchSize;

    /**
     * @return This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will &#39;linger&#39; for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
     * 
     */
    public Optional<Output<Integer>> producerBatchSize() {
        return Optional.ofNullable(this.producerBatchSize);
    }

    /**
     * The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
     * 
     */
    @Import(name="producerBufferMemory")
    private @Nullable Output<Integer> producerBufferMemory;

    /**
     * @return The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
     * 
     */
    public Optional<Output<Integer>> producerBufferMemory() {
        return Optional.ofNullable(this.producerBufferMemory);
    }

    /**
     * Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
     * 
     */
    @Import(name="producerCompressionType")
    private @Nullable Output<String> producerCompressionType;

    /**
     * @return Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
     * 
     */
    public Optional<Output<String>> producerCompressionType() {
        return Optional.ofNullable(this.producerCompressionType);
    }

    /**
     * This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will &#39;linger&#39; for the specified time waiting for more records to show up. Defaults to 0.
     * 
     */
    @Import(name="producerLingerMs")
    private @Nullable Output<Integer> producerLingerMs;

    /**
     * @return This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will &#39;linger&#39; for the specified time waiting for more records to show up. Defaults to 0.
     * 
     */
    public Optional<Output<Integer>> producerLingerMs() {
        return Optional.ofNullable(this.producerLingerMs);
    }

    /**
     * This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
     * 
     */
    @Import(name="producerMaxRequestSize")
    private @Nullable Output<Integer> producerMaxRequestSize;

    /**
     * @return This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
     * 
     */
    public Optional<Output<Integer>> producerMaxRequestSize() {
        return Optional.ofNullable(this.producerMaxRequestSize);
    }

    /**
     * The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned. Defaults to 5 minutes.
     * 
     */
    @Import(name="scheduledRebalanceMaxDelayMs")
    private @Nullable Output<Integer> scheduledRebalanceMaxDelayMs;

    /**
     * @return The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned. Defaults to 5 minutes.
     * 
     */
    public Optional<Output<Integer>> scheduledRebalanceMaxDelayMs() {
        return Optional.ofNullable(this.scheduledRebalanceMaxDelayMs);
    }

    /**
     * The timeout in milliseconds used to detect failures when using Kafka’s group management facilities (defaults to 10000).
     * 
     */
    @Import(name="sessionTimeoutMs")
    private @Nullable Output<Integer> sessionTimeoutMs;

    /**
     * @return The timeout in milliseconds used to detect failures when using Kafka’s group management facilities (defaults to 10000).
     * 
     */
    public Optional<Output<Integer>> sessionTimeoutMs() {
        return Optional.ofNullable(this.sessionTimeoutMs);
    }

    private KafkaConnectKafkaConnectUserConfigKafkaConnectArgs() {}

    private KafkaConnectKafkaConnectUserConfigKafkaConnectArgs(KafkaConnectKafkaConnectUserConfigKafkaConnectArgs $) {
        this.connectorClientConfigOverridePolicy = $.connectorClientConfigOverridePolicy;
        this.consumerAutoOffsetReset = $.consumerAutoOffsetReset;
        this.consumerFetchMaxBytes = $.consumerFetchMaxBytes;
        this.consumerIsolationLevel = $.consumerIsolationLevel;
        this.consumerMaxPartitionFetchBytes = $.consumerMaxPartitionFetchBytes;
        this.consumerMaxPollIntervalMs = $.consumerMaxPollIntervalMs;
        this.consumerMaxPollRecords = $.consumerMaxPollRecords;
        this.offsetFlushIntervalMs = $.offsetFlushIntervalMs;
        this.offsetFlushTimeoutMs = $.offsetFlushTimeoutMs;
        this.producerBatchSize = $.producerBatchSize;
        this.producerBufferMemory = $.producerBufferMemory;
        this.producerCompressionType = $.producerCompressionType;
        this.producerLingerMs = $.producerLingerMs;
        this.producerMaxRequestSize = $.producerMaxRequestSize;
        this.scheduledRebalanceMaxDelayMs = $.scheduledRebalanceMaxDelayMs;
        this.sessionTimeoutMs = $.sessionTimeoutMs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaConnectKafkaConnectUserConfigKafkaConnectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaConnectKafkaConnectUserConfigKafkaConnectArgs $;

        public Builder() {
            $ = new KafkaConnectKafkaConnectUserConfigKafkaConnectArgs();
        }

        public Builder(KafkaConnectKafkaConnectUserConfigKafkaConnectArgs defaults) {
            $ = new KafkaConnectKafkaConnectUserConfigKafkaConnectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorClientConfigOverridePolicy Defines what client configurations can be overridden by the connector. Default is None.
         * 
         * @return builder
         * 
         */
        public Builder connectorClientConfigOverridePolicy(@Nullable Output<String> connectorClientConfigOverridePolicy) {
            $.connectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
            return this;
        }

        /**
         * @param connectorClientConfigOverridePolicy Defines what client configurations can be overridden by the connector. Default is None.
         * 
         * @return builder
         * 
         */
        public Builder connectorClientConfigOverridePolicy(String connectorClientConfigOverridePolicy) {
            return connectorClientConfigOverridePolicy(Output.of(connectorClientConfigOverridePolicy));
        }

        /**
         * @param consumerAutoOffsetReset What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest.
         * 
         * @return builder
         * 
         */
        public Builder consumerAutoOffsetReset(@Nullable Output<String> consumerAutoOffsetReset) {
            $.consumerAutoOffsetReset = consumerAutoOffsetReset;
            return this;
        }

        /**
         * @param consumerAutoOffsetReset What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest.
         * 
         * @return builder
         * 
         */
        public Builder consumerAutoOffsetReset(String consumerAutoOffsetReset) {
            return consumerAutoOffsetReset(Output.of(consumerAutoOffsetReset));
        }

        /**
         * @param consumerFetchMaxBytes Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
         * 
         * @return builder
         * 
         */
        public Builder consumerFetchMaxBytes(@Nullable Output<Integer> consumerFetchMaxBytes) {
            $.consumerFetchMaxBytes = consumerFetchMaxBytes;
            return this;
        }

        /**
         * @param consumerFetchMaxBytes Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
         * 
         * @return builder
         * 
         */
        public Builder consumerFetchMaxBytes(Integer consumerFetchMaxBytes) {
            return consumerFetchMaxBytes(Output.of(consumerFetchMaxBytes));
        }

        /**
         * @param consumerIsolationLevel Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
         * 
         * @return builder
         * 
         */
        public Builder consumerIsolationLevel(@Nullable Output<String> consumerIsolationLevel) {
            $.consumerIsolationLevel = consumerIsolationLevel;
            return this;
        }

        /**
         * @param consumerIsolationLevel Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
         * 
         * @return builder
         * 
         */
        public Builder consumerIsolationLevel(String consumerIsolationLevel) {
            return consumerIsolationLevel(Output.of(consumerIsolationLevel));
        }

        /**
         * @param consumerMaxPartitionFetchBytes Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. .
         * 
         * @return builder
         * 
         */
        public Builder consumerMaxPartitionFetchBytes(@Nullable Output<Integer> consumerMaxPartitionFetchBytes) {
            $.consumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
            return this;
        }

        /**
         * @param consumerMaxPartitionFetchBytes Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. .
         * 
         * @return builder
         * 
         */
        public Builder consumerMaxPartitionFetchBytes(Integer consumerMaxPartitionFetchBytes) {
            return consumerMaxPartitionFetchBytes(Output.of(consumerMaxPartitionFetchBytes));
        }

        /**
         * @param consumerMaxPollIntervalMs The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
         * 
         * @return builder
         * 
         */
        public Builder consumerMaxPollIntervalMs(@Nullable Output<Integer> consumerMaxPollIntervalMs) {
            $.consumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
            return this;
        }

        /**
         * @param consumerMaxPollIntervalMs The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
         * 
         * @return builder
         * 
         */
        public Builder consumerMaxPollIntervalMs(Integer consumerMaxPollIntervalMs) {
            return consumerMaxPollIntervalMs(Output.of(consumerMaxPollIntervalMs));
        }

        /**
         * @param consumerMaxPollRecords The maximum number of records returned in a single call to poll() (defaults to 500).
         * 
         * @return builder
         * 
         */
        public Builder consumerMaxPollRecords(@Nullable Output<Integer> consumerMaxPollRecords) {
            $.consumerMaxPollRecords = consumerMaxPollRecords;
            return this;
        }

        /**
         * @param consumerMaxPollRecords The maximum number of records returned in a single call to poll() (defaults to 500).
         * 
         * @return builder
         * 
         */
        public Builder consumerMaxPollRecords(Integer consumerMaxPollRecords) {
            return consumerMaxPollRecords(Output.of(consumerMaxPollRecords));
        }

        /**
         * @param offsetFlushIntervalMs The interval at which to try committing offsets for tasks (defaults to 60000).
         * 
         * @return builder
         * 
         */
        public Builder offsetFlushIntervalMs(@Nullable Output<Integer> offsetFlushIntervalMs) {
            $.offsetFlushIntervalMs = offsetFlushIntervalMs;
            return this;
        }

        /**
         * @param offsetFlushIntervalMs The interval at which to try committing offsets for tasks (defaults to 60000).
         * 
         * @return builder
         * 
         */
        public Builder offsetFlushIntervalMs(Integer offsetFlushIntervalMs) {
            return offsetFlushIntervalMs(Output.of(offsetFlushIntervalMs));
        }

        /**
         * @param offsetFlushTimeoutMs Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
         * 
         * @return builder
         * 
         */
        public Builder offsetFlushTimeoutMs(@Nullable Output<Integer> offsetFlushTimeoutMs) {
            $.offsetFlushTimeoutMs = offsetFlushTimeoutMs;
            return this;
        }

        /**
         * @param offsetFlushTimeoutMs Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
         * 
         * @return builder
         * 
         */
        public Builder offsetFlushTimeoutMs(Integer offsetFlushTimeoutMs) {
            return offsetFlushTimeoutMs(Output.of(offsetFlushTimeoutMs));
        }

        /**
         * @param producerBatchSize This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will &#39;linger&#39; for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
         * 
         * @return builder
         * 
         */
        public Builder producerBatchSize(@Nullable Output<Integer> producerBatchSize) {
            $.producerBatchSize = producerBatchSize;
            return this;
        }

        /**
         * @param producerBatchSize This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will &#39;linger&#39; for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
         * 
         * @return builder
         * 
         */
        public Builder producerBatchSize(Integer producerBatchSize) {
            return producerBatchSize(Output.of(producerBatchSize));
        }

        /**
         * @param producerBufferMemory The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
         * 
         * @return builder
         * 
         */
        public Builder producerBufferMemory(@Nullable Output<Integer> producerBufferMemory) {
            $.producerBufferMemory = producerBufferMemory;
            return this;
        }

        /**
         * @param producerBufferMemory The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
         * 
         * @return builder
         * 
         */
        public Builder producerBufferMemory(Integer producerBufferMemory) {
            return producerBufferMemory(Output.of(producerBufferMemory));
        }

        /**
         * @param producerCompressionType Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
         * 
         * @return builder
         * 
         */
        public Builder producerCompressionType(@Nullable Output<String> producerCompressionType) {
            $.producerCompressionType = producerCompressionType;
            return this;
        }

        /**
         * @param producerCompressionType Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
         * 
         * @return builder
         * 
         */
        public Builder producerCompressionType(String producerCompressionType) {
            return producerCompressionType(Output.of(producerCompressionType));
        }

        /**
         * @param producerLingerMs This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will &#39;linger&#39; for the specified time waiting for more records to show up. Defaults to 0.
         * 
         * @return builder
         * 
         */
        public Builder producerLingerMs(@Nullable Output<Integer> producerLingerMs) {
            $.producerLingerMs = producerLingerMs;
            return this;
        }

        /**
         * @param producerLingerMs This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will &#39;linger&#39; for the specified time waiting for more records to show up. Defaults to 0.
         * 
         * @return builder
         * 
         */
        public Builder producerLingerMs(Integer producerLingerMs) {
            return producerLingerMs(Output.of(producerLingerMs));
        }

        /**
         * @param producerMaxRequestSize This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
         * 
         * @return builder
         * 
         */
        public Builder producerMaxRequestSize(@Nullable Output<Integer> producerMaxRequestSize) {
            $.producerMaxRequestSize = producerMaxRequestSize;
            return this;
        }

        /**
         * @param producerMaxRequestSize This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
         * 
         * @return builder
         * 
         */
        public Builder producerMaxRequestSize(Integer producerMaxRequestSize) {
            return producerMaxRequestSize(Output.of(producerMaxRequestSize));
        }

        /**
         * @param scheduledRebalanceMaxDelayMs The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned. Defaults to 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder scheduledRebalanceMaxDelayMs(@Nullable Output<Integer> scheduledRebalanceMaxDelayMs) {
            $.scheduledRebalanceMaxDelayMs = scheduledRebalanceMaxDelayMs;
            return this;
        }

        /**
         * @param scheduledRebalanceMaxDelayMs The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned. Defaults to 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder scheduledRebalanceMaxDelayMs(Integer scheduledRebalanceMaxDelayMs) {
            return scheduledRebalanceMaxDelayMs(Output.of(scheduledRebalanceMaxDelayMs));
        }

        /**
         * @param sessionTimeoutMs The timeout in milliseconds used to detect failures when using Kafka’s group management facilities (defaults to 10000).
         * 
         * @return builder
         * 
         */
        public Builder sessionTimeoutMs(@Nullable Output<Integer> sessionTimeoutMs) {
            $.sessionTimeoutMs = sessionTimeoutMs;
            return this;
        }

        /**
         * @param sessionTimeoutMs The timeout in milliseconds used to detect failures when using Kafka’s group management facilities (defaults to 10000).
         * 
         * @return builder
         * 
         */
        public Builder sessionTimeoutMs(Integer sessionTimeoutMs) {
            return sessionTimeoutMs(Output.of(sessionTimeoutMs));
        }

        public KafkaConnectKafkaConnectUserConfigKafkaConnectArgs build() {
            return $;
        }
    }

}
