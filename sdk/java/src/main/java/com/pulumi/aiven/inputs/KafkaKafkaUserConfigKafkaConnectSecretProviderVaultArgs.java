// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs Empty = new KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs();

    /**
     * Address of the Vault server.
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return Address of the Vault server.
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * Enum: `token`. Auth method of the vault secret provider.
     * 
     */
    @Import(name="authMethod", required=true)
    private Output<String> authMethod;

    /**
     * @return Enum: `token`. Auth method of the vault secret provider.
     * 
     */
    public Output<String> authMethod() {
        return this.authMethod;
    }

    /**
     * Enum: `1`, `2`, and newer. KV Secrets Engine version of the Vault server instance.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<Integer> engineVersion;

    /**
     * @return Enum: `1`, `2`, and newer. KV Secrets Engine version of the Vault server instance.
     * 
     */
    public Optional<Output<Integer>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * Prefix path depth of the secrets Engine. Default is 1. If the secrets engine path has more than one segment it has to be increased to the number of segments.
     * 
     */
    @Import(name="prefixPathDepth")
    private @Nullable Output<Integer> prefixPathDepth;

    /**
     * @return Prefix path depth of the secrets Engine. Default is 1. If the secrets engine path has more than one segment it has to be increased to the number of segments.
     * 
     */
    public Optional<Output<Integer>> prefixPathDepth() {
        return Optional.ofNullable(this.prefixPathDepth);
    }

    /**
     * Token used to authenticate with vault and auth method `token`.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Token used to authenticate with vault and auth method `token`.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs() {}

    private KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs(KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs $) {
        this.address = $.address;
        this.authMethod = $.authMethod;
        this.engineVersion = $.engineVersion;
        this.prefixPathDepth = $.prefixPathDepth;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs $;

        public Builder() {
            $ = new KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs();
        }

        public Builder(KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs defaults) {
            $ = new KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Address of the Vault server.
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Address of the Vault server.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param authMethod Enum: `token`. Auth method of the vault secret provider.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(Output<String> authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        /**
         * @param authMethod Enum: `token`. Auth method of the vault secret provider.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(String authMethod) {
            return authMethod(Output.of(authMethod));
        }

        /**
         * @param engineVersion Enum: `1`, `2`, and newer. KV Secrets Engine version of the Vault server instance.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<Integer> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion Enum: `1`, `2`, and newer. KV Secrets Engine version of the Vault server instance.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(Integer engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param prefixPathDepth Prefix path depth of the secrets Engine. Default is 1. If the secrets engine path has more than one segment it has to be increased to the number of segments.
         * 
         * @return builder
         * 
         */
        public Builder prefixPathDepth(@Nullable Output<Integer> prefixPathDepth) {
            $.prefixPathDepth = prefixPathDepth;
            return this;
        }

        /**
         * @param prefixPathDepth Prefix path depth of the secrets Engine. Default is 1. If the secrets engine path has more than one segment it has to be increased to the number of segments.
         * 
         * @return builder
         * 
         */
        public Builder prefixPathDepth(Integer prefixPathDepth) {
            return prefixPathDepth(Output.of(prefixPathDepth));
        }

        /**
         * @param token Token used to authenticate with vault and auth method `token`.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Token used to authenticate with vault and auth method `token`.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs", "address");
            }
            if ($.authMethod == null) {
                throw new MissingRequiredPropertyException("KafkaKafkaUserConfigKafkaConnectSecretProviderVaultArgs", "authMethod");
            }
            return $;
        }
    }

}
