// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenSearchOpensearchUserConfigS3MigrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenSearchOpensearchUserConfigS3MigrationArgs Empty = new OpenSearchOpensearchUserConfigS3MigrationArgs();

    /**
     * AWS Access key.
     * 
     */
    @Import(name="accessKey", required=true)
    private Output<String> accessKey;

    /**
     * @return AWS Access key.
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }

    /**
     * The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    @Import(name="basePath", required=true)
    private Output<String> basePath;

    /**
     * @return The path to the repository data within its container. The value of this setting should not start or end with a /.
     * 
     */
    public Output<String> basePath() {
        return this.basePath;
    }

    /**
     * S3 bucket name.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return S3 bucket name.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    @Import(name="chunkSize")
    private @Nullable Output<String> chunkSize;

    /**
     * @return Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
     * 
     */
    public Optional<Output<String>> chunkSize() {
        return Optional.ofNullable(this.chunkSize);
    }

    /**
     * When set to true metadata files are stored in compressed format.
     * 
     */
    @Import(name="compress")
    private @Nullable Output<Boolean> compress;

    /**
     * @return When set to true metadata files are stored in compressed format.
     * 
     */
    public Optional<Output<Boolean>> compress() {
        return Optional.ofNullable(this.compress);
    }

    /**
     * The S3 service endpoint to connect to. If you are using an S3-compatible service then you should set this to the service’s endpoint.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The S3 service endpoint to connect to. If you are using an S3-compatible service then you should set this to the service’s endpoint.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. By default, a restore operation includes all data streams and indices in the snapshot. If this argument is provided, the restore operation only includes the data streams and indices that you specify. Example: `metrics*,logs*,data-20240823`.
     * 
     */
    @Import(name="indices")
    private @Nullable Output<String> indices;

    /**
     * @return A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. By default, a restore operation includes all data streams and indices in the snapshot. If this argument is provided, the restore operation only includes the data streams and indices that you specify. Example: `metrics*,logs*,data-20240823`.
     * 
     */
    public Optional<Output<String>> indices() {
        return Optional.ofNullable(this.indices);
    }

    /**
     * S3 region.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return S3 region.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * AWS secret key.
     * 
     */
    @Import(name="secretKey", required=true)
    private Output<String> secretKey;

    /**
     * @return AWS secret key.
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }

    /**
     * When set to true files are encrypted on server side.
     * 
     */
    @Import(name="serverSideEncryption")
    private @Nullable Output<Boolean> serverSideEncryption;

    /**
     * @return When set to true files are encrypted on server side.
     * 
     */
    public Optional<Output<Boolean>> serverSideEncryption() {
        return Optional.ofNullable(this.serverSideEncryption);
    }

    /**
     * The snapshot name to restore from.
     * 
     */
    @Import(name="snapshotName", required=true)
    private Output<String> snapshotName;

    /**
     * @return The snapshot name to restore from.
     * 
     */
    public Output<String> snapshotName() {
        return this.snapshotName;
    }

    private OpenSearchOpensearchUserConfigS3MigrationArgs() {}

    private OpenSearchOpensearchUserConfigS3MigrationArgs(OpenSearchOpensearchUserConfigS3MigrationArgs $) {
        this.accessKey = $.accessKey;
        this.basePath = $.basePath;
        this.bucket = $.bucket;
        this.chunkSize = $.chunkSize;
        this.compress = $.compress;
        this.endpoint = $.endpoint;
        this.indices = $.indices;
        this.region = $.region;
        this.secretKey = $.secretKey;
        this.serverSideEncryption = $.serverSideEncryption;
        this.snapshotName = $.snapshotName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenSearchOpensearchUserConfigS3MigrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenSearchOpensearchUserConfigS3MigrationArgs $;

        public Builder() {
            $ = new OpenSearchOpensearchUserConfigS3MigrationArgs();
        }

        public Builder(OpenSearchOpensearchUserConfigS3MigrationArgs defaults) {
            $ = new OpenSearchOpensearchUserConfigS3MigrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey AWS Access key.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey AWS Access key.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param basePath The path to the repository data within its container. The value of this setting should not start or end with a /.
         * 
         * @return builder
         * 
         */
        public Builder basePath(Output<String> basePath) {
            $.basePath = basePath;
            return this;
        }

        /**
         * @param basePath The path to the repository data within its container. The value of this setting should not start or end with a /.
         * 
         * @return builder
         * 
         */
        public Builder basePath(String basePath) {
            return basePath(Output.of(basePath));
        }

        /**
         * @param bucket S3 bucket name.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket S3 bucket name.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param chunkSize Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
         * 
         * @return builder
         * 
         */
        public Builder chunkSize(@Nullable Output<String> chunkSize) {
            $.chunkSize = chunkSize;
            return this;
        }

        /**
         * @param chunkSize Big files can be broken down into chunks during snapshotting if needed. Should be the same as for the 3rd party repository.
         * 
         * @return builder
         * 
         */
        public Builder chunkSize(String chunkSize) {
            return chunkSize(Output.of(chunkSize));
        }

        /**
         * @param compress When set to true metadata files are stored in compressed format.
         * 
         * @return builder
         * 
         */
        public Builder compress(@Nullable Output<Boolean> compress) {
            $.compress = compress;
            return this;
        }

        /**
         * @param compress When set to true metadata files are stored in compressed format.
         * 
         * @return builder
         * 
         */
        public Builder compress(Boolean compress) {
            return compress(Output.of(compress));
        }

        /**
         * @param endpoint The S3 service endpoint to connect to. If you are using an S3-compatible service then you should set this to the service’s endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The S3 service endpoint to connect to. If you are using an S3-compatible service then you should set this to the service’s endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param indices A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. By default, a restore operation includes all data streams and indices in the snapshot. If this argument is provided, the restore operation only includes the data streams and indices that you specify. Example: `metrics*,logs*,data-20240823`.
         * 
         * @return builder
         * 
         */
        public Builder indices(@Nullable Output<String> indices) {
            $.indices = indices;
            return this;
        }

        /**
         * @param indices A comma-delimited list of indices to restore from the snapshot. Multi-index syntax is supported. By default, a restore operation includes all data streams and indices in the snapshot. If this argument is provided, the restore operation only includes the data streams and indices that you specify. Example: `metrics*,logs*,data-20240823`.
         * 
         * @return builder
         * 
         */
        public Builder indices(String indices) {
            return indices(Output.of(indices));
        }

        /**
         * @param region S3 region.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region S3 region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretKey AWS secret key.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey AWS secret key.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param serverSideEncryption When set to true files are encrypted on server side.
         * 
         * @return builder
         * 
         */
        public Builder serverSideEncryption(@Nullable Output<Boolean> serverSideEncryption) {
            $.serverSideEncryption = serverSideEncryption;
            return this;
        }

        /**
         * @param serverSideEncryption When set to true files are encrypted on server side.
         * 
         * @return builder
         * 
         */
        public Builder serverSideEncryption(Boolean serverSideEncryption) {
            return serverSideEncryption(Output.of(serverSideEncryption));
        }

        /**
         * @param snapshotName The snapshot name to restore from.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        /**
         * @param snapshotName The snapshot name to restore from.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        public OpenSearchOpensearchUserConfigS3MigrationArgs build() {
            if ($.accessKey == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigS3MigrationArgs", "accessKey");
            }
            if ($.basePath == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigS3MigrationArgs", "basePath");
            }
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigS3MigrationArgs", "bucket");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigS3MigrationArgs", "region");
            }
            if ($.secretKey == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigS3MigrationArgs", "secretKey");
            }
            if ($.snapshotName == null) {
                throw new MissingRequiredPropertyException("OpenSearchOpensearchUserConfigS3MigrationArgs", "snapshotName");
            }
            return $;
        }
    }

}
