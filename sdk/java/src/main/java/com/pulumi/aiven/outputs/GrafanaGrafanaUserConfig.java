// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthAzuread;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthGenericOauth;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthGithub;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthGitlab;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthGoogle;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigDateFormats;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigExternalImageStorage;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigPublicAccess;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigSmtpServer;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GrafanaGrafanaUserConfig {
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    private @Nullable String additionalBackupRegions;
    /**
     * @return Setting has no effect with Grafana 11 and onward. Enable or disable Grafana legacy alerting functionality. This should not be enabled with unified*alerting*enabled.
     * 
     */
    private @Nullable Boolean alertingEnabled;
    /**
     * @return Enum: `alerting`, `keepState`. Default error or timeout setting for new alerting rules.
     * 
     */
    private @Nullable String alertingErrorOrTimeout;
    /**
     * @return Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations. Example: `0`.
     * 
     */
    private @Nullable Integer alertingMaxAnnotationsToKeep;
    /**
     * @return Enum: `alerting`, `keepState`, `noData`, `ok`. Default value for &#39;no data or null values&#39; for new alerting rules.
     * 
     */
    private @Nullable String alertingNodataOrNullvalues;
    /**
     * @return Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking.
     * 
     */
    private @Nullable Boolean allowEmbedding;
    /**
     * @return Azure AD OAuth integration
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigAuthAzuread authAzuread;
    /**
     * @return Enable or disable basic authentication form, used by Grafana built-in login.
     * 
     */
    private @Nullable Boolean authBasicEnabled;
    /**
     * @return Generic OAuth integration
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigAuthGenericOauth authGenericOauth;
    /**
     * @return Github Auth integration
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigAuthGithub authGithub;
    /**
     * @return GitLab Auth integration
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigAuthGitlab authGitlab;
    /**
     * @return Google Auth integration
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigAuthGoogle authGoogle;
    /**
     * @return Enum: `lax`, `none`, `strict`. Cookie SameSite attribute: `strict` prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. `lax` is the default value.
     * 
     */
    private @Nullable String cookieSamesite;
    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
     * 
     */
    private @Nullable String customDomain;
    /**
     * @return Enable browsing of dashboards in grid (pictures) mode. This feature is new in Grafana 9 and is quite resource intensive. It may cause low-end plans to work more slowly while the dashboard previews are rendering.
     * 
     */
    private @Nullable Boolean dashboardPreviewsEnabled;
    /**
     * @return Enable use of the Grafana Scenes Library as the dashboard engine. i.e. the `dashboardScene` feature flag. Upstream blog post at https://grafana.com/blog/2024/10/31/grafana-dashboards-are-now-powered-by-scenes-big-changes-same-ui/.
     * 
     */
    private @Nullable Boolean dashboardScenesEnabled;
    /**
     * @return Signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h. Example: `5s`.
     * 
     */
    private @Nullable String dashboardsMinRefreshInterval;
    /**
     * @return Dashboard versions to keep per dashboard. Example: `20`.
     * 
     */
    private @Nullable Integer dashboardsVersionsToKeep;
    /**
     * @return Send `X-Grafana-User` header to data source.
     * 
     */
    private @Nullable Boolean dataproxySendUserHeader;
    /**
     * @return Timeout for data proxy requests in seconds. Example: `30`.
     * 
     */
    private @Nullable Integer dataproxyTimeout;
    /**
     * @return Grafana date format specifications
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigDateFormats dateFormats;
    /**
     * @return Set to true to disable gravatar. Defaults to false (gravatar is enabled).
     * 
     */
    private @Nullable Boolean disableGravatar;
    /**
     * @return Editors can manage folders, teams and dashboards created by them.
     * 
     */
    private @Nullable Boolean editorsCanAdmin;
    /**
     * @return External image store settings
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigExternalImageStorage externalImageStorage;
    /**
     * @return Google Analytics ID. Example: `UA-123456-4`.
     * 
     */
    private @Nullable String googleAnalyticsUaId;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    private @Nullable List<GrafanaGrafanaUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ipFilterString` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ipFilterString` instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return Enable Grafana&#39;s /metrics endpoint.
     * 
     */
    private @Nullable Boolean metricsEnabled;
    /**
     * @return Enforce user lookup based on email instead of the unique ID provided by the IdP. This setup introduces significant security risks, such as potential phishing, spoofing, and other data breaches.
     * 
     */
    private @Nullable Boolean oauthAllowInsecureEmailLookup;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    private @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigPublicAccess publicAccess;
    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    private @Nullable String recoveryBasebackupName;
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    private @Nullable String serviceToForkFrom;
    /**
     * @return SMTP server settings
     * 
     */
    private @Nullable GrafanaGrafanaUserConfigSmtpServer smtpServer;
    /**
     * @return Use static public IP addresses.
     * 
     */
    private @Nullable Boolean staticIps;
    /**
     * @return Enable or disable Grafana unified alerting functionality. By default this is enabled and any legacy alerts will be migrated on upgrade to Grafana 9+. To stay on legacy alerting, set unified*alerting*enabled to false and alertingEnabled to true. See https://grafana.com/docs/grafana/latest/alerting/ for more details.
     * 
     */
    private @Nullable Boolean unifiedAlertingEnabled;
    /**
     * @return Auto-assign new users on signup to main organization. Defaults to false.
     * 
     */
    private @Nullable Boolean userAutoAssignOrg;
    /**
     * @return Enum: `Admin`, `Editor`, `Viewer`. Set role for new signups. Defaults to Viewer.
     * 
     */
    private @Nullable String userAutoAssignOrgRole;
    /**
     * @return Users with view-only permission can edit but not save dashboards.
     * 
     */
    private @Nullable Boolean viewersCanEdit;
    /**
     * @return Setting to enable/disable Write-Ahead Logging. The default value is false (disabled).
     * 
     */
    private @Nullable Boolean wal;

    private GrafanaGrafanaUserConfig() {}
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    /**
     * @return Setting has no effect with Grafana 11 and onward. Enable or disable Grafana legacy alerting functionality. This should not be enabled with unified*alerting*enabled.
     * 
     */
    public Optional<Boolean> alertingEnabled() {
        return Optional.ofNullable(this.alertingEnabled);
    }
    /**
     * @return Enum: `alerting`, `keepState`. Default error or timeout setting for new alerting rules.
     * 
     */
    public Optional<String> alertingErrorOrTimeout() {
        return Optional.ofNullable(this.alertingErrorOrTimeout);
    }
    /**
     * @return Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations. Example: `0`.
     * 
     */
    public Optional<Integer> alertingMaxAnnotationsToKeep() {
        return Optional.ofNullable(this.alertingMaxAnnotationsToKeep);
    }
    /**
     * @return Enum: `alerting`, `keepState`, `noData`, `ok`. Default value for &#39;no data or null values&#39; for new alerting rules.
     * 
     */
    public Optional<String> alertingNodataOrNullvalues() {
        return Optional.ofNullable(this.alertingNodataOrNullvalues);
    }
    /**
     * @return Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking.
     * 
     */
    public Optional<Boolean> allowEmbedding() {
        return Optional.ofNullable(this.allowEmbedding);
    }
    /**
     * @return Azure AD OAuth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthAzuread> authAzuread() {
        return Optional.ofNullable(this.authAzuread);
    }
    /**
     * @return Enable or disable basic authentication form, used by Grafana built-in login.
     * 
     */
    public Optional<Boolean> authBasicEnabled() {
        return Optional.ofNullable(this.authBasicEnabled);
    }
    /**
     * @return Generic OAuth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthGenericOauth> authGenericOauth() {
        return Optional.ofNullable(this.authGenericOauth);
    }
    /**
     * @return Github Auth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthGithub> authGithub() {
        return Optional.ofNullable(this.authGithub);
    }
    /**
     * @return GitLab Auth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthGitlab> authGitlab() {
        return Optional.ofNullable(this.authGitlab);
    }
    /**
     * @return Google Auth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthGoogle> authGoogle() {
        return Optional.ofNullable(this.authGoogle);
    }
    /**
     * @return Enum: `lax`, `none`, `strict`. Cookie SameSite attribute: `strict` prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. `lax` is the default value.
     * 
     */
    public Optional<String> cookieSamesite() {
        return Optional.ofNullable(this.cookieSamesite);
    }
    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
     * 
     */
    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    /**
     * @return Enable browsing of dashboards in grid (pictures) mode. This feature is new in Grafana 9 and is quite resource intensive. It may cause low-end plans to work more slowly while the dashboard previews are rendering.
     * 
     */
    public Optional<Boolean> dashboardPreviewsEnabled() {
        return Optional.ofNullable(this.dashboardPreviewsEnabled);
    }
    /**
     * @return Enable use of the Grafana Scenes Library as the dashboard engine. i.e. the `dashboardScene` feature flag. Upstream blog post at https://grafana.com/blog/2024/10/31/grafana-dashboards-are-now-powered-by-scenes-big-changes-same-ui/.
     * 
     */
    public Optional<Boolean> dashboardScenesEnabled() {
        return Optional.ofNullable(this.dashboardScenesEnabled);
    }
    /**
     * @return Signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h. Example: `5s`.
     * 
     */
    public Optional<String> dashboardsMinRefreshInterval() {
        return Optional.ofNullable(this.dashboardsMinRefreshInterval);
    }
    /**
     * @return Dashboard versions to keep per dashboard. Example: `20`.
     * 
     */
    public Optional<Integer> dashboardsVersionsToKeep() {
        return Optional.ofNullable(this.dashboardsVersionsToKeep);
    }
    /**
     * @return Send `X-Grafana-User` header to data source.
     * 
     */
    public Optional<Boolean> dataproxySendUserHeader() {
        return Optional.ofNullable(this.dataproxySendUserHeader);
    }
    /**
     * @return Timeout for data proxy requests in seconds. Example: `30`.
     * 
     */
    public Optional<Integer> dataproxyTimeout() {
        return Optional.ofNullable(this.dataproxyTimeout);
    }
    /**
     * @return Grafana date format specifications
     * 
     */
    public Optional<GrafanaGrafanaUserConfigDateFormats> dateFormats() {
        return Optional.ofNullable(this.dateFormats);
    }
    /**
     * @return Set to true to disable gravatar. Defaults to false (gravatar is enabled).
     * 
     */
    public Optional<Boolean> disableGravatar() {
        return Optional.ofNullable(this.disableGravatar);
    }
    /**
     * @return Editors can manage folders, teams and dashboards created by them.
     * 
     */
    public Optional<Boolean> editorsCanAdmin() {
        return Optional.ofNullable(this.editorsCanAdmin);
    }
    /**
     * @return External image store settings
     * 
     */
    public Optional<GrafanaGrafanaUserConfigExternalImageStorage> externalImageStorage() {
        return Optional.ofNullable(this.externalImageStorage);
    }
    /**
     * @return Google Analytics ID. Example: `UA-123456-4`.
     * 
     */
    public Optional<String> googleAnalyticsUaId() {
        return Optional.ofNullable(this.googleAnalyticsUaId);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public List<GrafanaGrafanaUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ipFilterString` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ipFilterString` instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Enable Grafana&#39;s /metrics endpoint.
     * 
     */
    public Optional<Boolean> metricsEnabled() {
        return Optional.ofNullable(this.metricsEnabled);
    }
    /**
     * @return Enforce user lookup based on email instead of the unique ID provided by the IdP. This setup introduces significant security risks, such as potential phishing, spoofing, and other data breaches.
     * 
     */
    public Optional<Boolean> oauthAllowInsecureEmailLookup() {
        return Optional.ofNullable(this.oauthAllowInsecureEmailLookup);
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<GrafanaGrafanaUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<GrafanaGrafanaUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<GrafanaGrafanaUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return SMTP server settings
     * 
     */
    public Optional<GrafanaGrafanaUserConfigSmtpServer> smtpServer() {
        return Optional.ofNullable(this.smtpServer);
    }
    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }
    /**
     * @return Enable or disable Grafana unified alerting functionality. By default this is enabled and any legacy alerts will be migrated on upgrade to Grafana 9+. To stay on legacy alerting, set unified*alerting*enabled to false and alertingEnabled to true. See https://grafana.com/docs/grafana/latest/alerting/ for more details.
     * 
     */
    public Optional<Boolean> unifiedAlertingEnabled() {
        return Optional.ofNullable(this.unifiedAlertingEnabled);
    }
    /**
     * @return Auto-assign new users on signup to main organization. Defaults to false.
     * 
     */
    public Optional<Boolean> userAutoAssignOrg() {
        return Optional.ofNullable(this.userAutoAssignOrg);
    }
    /**
     * @return Enum: `Admin`, `Editor`, `Viewer`. Set role for new signups. Defaults to Viewer.
     * 
     */
    public Optional<String> userAutoAssignOrgRole() {
        return Optional.ofNullable(this.userAutoAssignOrgRole);
    }
    /**
     * @return Users with view-only permission can edit but not save dashboards.
     * 
     */
    public Optional<Boolean> viewersCanEdit() {
        return Optional.ofNullable(this.viewersCanEdit);
    }
    /**
     * @return Setting to enable/disable Write-Ahead Logging. The default value is false (disabled).
     * 
     */
    public Optional<Boolean> wal() {
        return Optional.ofNullable(this.wal);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GrafanaGrafanaUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable Boolean alertingEnabled;
        private @Nullable String alertingErrorOrTimeout;
        private @Nullable Integer alertingMaxAnnotationsToKeep;
        private @Nullable String alertingNodataOrNullvalues;
        private @Nullable Boolean allowEmbedding;
        private @Nullable GrafanaGrafanaUserConfigAuthAzuread authAzuread;
        private @Nullable Boolean authBasicEnabled;
        private @Nullable GrafanaGrafanaUserConfigAuthGenericOauth authGenericOauth;
        private @Nullable GrafanaGrafanaUserConfigAuthGithub authGithub;
        private @Nullable GrafanaGrafanaUserConfigAuthGitlab authGitlab;
        private @Nullable GrafanaGrafanaUserConfigAuthGoogle authGoogle;
        private @Nullable String cookieSamesite;
        private @Nullable String customDomain;
        private @Nullable Boolean dashboardPreviewsEnabled;
        private @Nullable Boolean dashboardScenesEnabled;
        private @Nullable String dashboardsMinRefreshInterval;
        private @Nullable Integer dashboardsVersionsToKeep;
        private @Nullable Boolean dataproxySendUserHeader;
        private @Nullable Integer dataproxyTimeout;
        private @Nullable GrafanaGrafanaUserConfigDateFormats dateFormats;
        private @Nullable Boolean disableGravatar;
        private @Nullable Boolean editorsCanAdmin;
        private @Nullable GrafanaGrafanaUserConfigExternalImageStorage externalImageStorage;
        private @Nullable String googleAnalyticsUaId;
        private @Nullable List<GrafanaGrafanaUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable Boolean metricsEnabled;
        private @Nullable Boolean oauthAllowInsecureEmailLookup;
        private @Nullable GrafanaGrafanaUserConfigPrivateAccess privateAccess;
        private @Nullable GrafanaGrafanaUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable GrafanaGrafanaUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable Boolean serviceLog;
        private @Nullable String serviceToForkFrom;
        private @Nullable GrafanaGrafanaUserConfigSmtpServer smtpServer;
        private @Nullable Boolean staticIps;
        private @Nullable Boolean unifiedAlertingEnabled;
        private @Nullable Boolean userAutoAssignOrg;
        private @Nullable String userAutoAssignOrgRole;
        private @Nullable Boolean viewersCanEdit;
        private @Nullable Boolean wal;
        public Builder() {}
        public Builder(GrafanaGrafanaUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.alertingEnabled = defaults.alertingEnabled;
    	      this.alertingErrorOrTimeout = defaults.alertingErrorOrTimeout;
    	      this.alertingMaxAnnotationsToKeep = defaults.alertingMaxAnnotationsToKeep;
    	      this.alertingNodataOrNullvalues = defaults.alertingNodataOrNullvalues;
    	      this.allowEmbedding = defaults.allowEmbedding;
    	      this.authAzuread = defaults.authAzuread;
    	      this.authBasicEnabled = defaults.authBasicEnabled;
    	      this.authGenericOauth = defaults.authGenericOauth;
    	      this.authGithub = defaults.authGithub;
    	      this.authGitlab = defaults.authGitlab;
    	      this.authGoogle = defaults.authGoogle;
    	      this.cookieSamesite = defaults.cookieSamesite;
    	      this.customDomain = defaults.customDomain;
    	      this.dashboardPreviewsEnabled = defaults.dashboardPreviewsEnabled;
    	      this.dashboardScenesEnabled = defaults.dashboardScenesEnabled;
    	      this.dashboardsMinRefreshInterval = defaults.dashboardsMinRefreshInterval;
    	      this.dashboardsVersionsToKeep = defaults.dashboardsVersionsToKeep;
    	      this.dataproxySendUserHeader = defaults.dataproxySendUserHeader;
    	      this.dataproxyTimeout = defaults.dataproxyTimeout;
    	      this.dateFormats = defaults.dateFormats;
    	      this.disableGravatar = defaults.disableGravatar;
    	      this.editorsCanAdmin = defaults.editorsCanAdmin;
    	      this.externalImageStorage = defaults.externalImageStorage;
    	      this.googleAnalyticsUaId = defaults.googleAnalyticsUaId;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.metricsEnabled = defaults.metricsEnabled;
    	      this.oauthAllowInsecureEmailLookup = defaults.oauthAllowInsecureEmailLookup;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.serviceLog = defaults.serviceLog;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.smtpServer = defaults.smtpServer;
    	      this.staticIps = defaults.staticIps;
    	      this.unifiedAlertingEnabled = defaults.unifiedAlertingEnabled;
    	      this.userAutoAssignOrg = defaults.userAutoAssignOrg;
    	      this.userAutoAssignOrgRole = defaults.userAutoAssignOrgRole;
    	      this.viewersCanEdit = defaults.viewersCanEdit;
    	      this.wal = defaults.wal;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {

            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder alertingEnabled(@Nullable Boolean alertingEnabled) {

            this.alertingEnabled = alertingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder alertingErrorOrTimeout(@Nullable String alertingErrorOrTimeout) {

            this.alertingErrorOrTimeout = alertingErrorOrTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder alertingMaxAnnotationsToKeep(@Nullable Integer alertingMaxAnnotationsToKeep) {

            this.alertingMaxAnnotationsToKeep = alertingMaxAnnotationsToKeep;
            return this;
        }
        @CustomType.Setter
        public Builder alertingNodataOrNullvalues(@Nullable String alertingNodataOrNullvalues) {

            this.alertingNodataOrNullvalues = alertingNodataOrNullvalues;
            return this;
        }
        @CustomType.Setter
        public Builder allowEmbedding(@Nullable Boolean allowEmbedding) {

            this.allowEmbedding = allowEmbedding;
            return this;
        }
        @CustomType.Setter
        public Builder authAzuread(@Nullable GrafanaGrafanaUserConfigAuthAzuread authAzuread) {

            this.authAzuread = authAzuread;
            return this;
        }
        @CustomType.Setter
        public Builder authBasicEnabled(@Nullable Boolean authBasicEnabled) {

            this.authBasicEnabled = authBasicEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder authGenericOauth(@Nullable GrafanaGrafanaUserConfigAuthGenericOauth authGenericOauth) {

            this.authGenericOauth = authGenericOauth;
            return this;
        }
        @CustomType.Setter
        public Builder authGithub(@Nullable GrafanaGrafanaUserConfigAuthGithub authGithub) {

            this.authGithub = authGithub;
            return this;
        }
        @CustomType.Setter
        public Builder authGitlab(@Nullable GrafanaGrafanaUserConfigAuthGitlab authGitlab) {

            this.authGitlab = authGitlab;
            return this;
        }
        @CustomType.Setter
        public Builder authGoogle(@Nullable GrafanaGrafanaUserConfigAuthGoogle authGoogle) {

            this.authGoogle = authGoogle;
            return this;
        }
        @CustomType.Setter
        public Builder cookieSamesite(@Nullable String cookieSamesite) {

            this.cookieSamesite = cookieSamesite;
            return this;
        }
        @CustomType.Setter
        public Builder customDomain(@Nullable String customDomain) {

            this.customDomain = customDomain;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardPreviewsEnabled(@Nullable Boolean dashboardPreviewsEnabled) {

            this.dashboardPreviewsEnabled = dashboardPreviewsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardScenesEnabled(@Nullable Boolean dashboardScenesEnabled) {

            this.dashboardScenesEnabled = dashboardScenesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardsMinRefreshInterval(@Nullable String dashboardsMinRefreshInterval) {

            this.dashboardsMinRefreshInterval = dashboardsMinRefreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardsVersionsToKeep(@Nullable Integer dashboardsVersionsToKeep) {

            this.dashboardsVersionsToKeep = dashboardsVersionsToKeep;
            return this;
        }
        @CustomType.Setter
        public Builder dataproxySendUserHeader(@Nullable Boolean dataproxySendUserHeader) {

            this.dataproxySendUserHeader = dataproxySendUserHeader;
            return this;
        }
        @CustomType.Setter
        public Builder dataproxyTimeout(@Nullable Integer dataproxyTimeout) {

            this.dataproxyTimeout = dataproxyTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder dateFormats(@Nullable GrafanaGrafanaUserConfigDateFormats dateFormats) {

            this.dateFormats = dateFormats;
            return this;
        }
        @CustomType.Setter
        public Builder disableGravatar(@Nullable Boolean disableGravatar) {

            this.disableGravatar = disableGravatar;
            return this;
        }
        @CustomType.Setter
        public Builder editorsCanAdmin(@Nullable Boolean editorsCanAdmin) {

            this.editorsCanAdmin = editorsCanAdmin;
            return this;
        }
        @CustomType.Setter
        public Builder externalImageStorage(@Nullable GrafanaGrafanaUserConfigExternalImageStorage externalImageStorage) {

            this.externalImageStorage = externalImageStorage;
            return this;
        }
        @CustomType.Setter
        public Builder googleAnalyticsUaId(@Nullable String googleAnalyticsUaId) {

            this.googleAnalyticsUaId = googleAnalyticsUaId;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<GrafanaGrafanaUserConfigIpFilterObject> ipFilterObjects) {

            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(GrafanaGrafanaUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {

            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder metricsEnabled(@Nullable Boolean metricsEnabled) {

            this.metricsEnabled = metricsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder oauthAllowInsecureEmailLookup(@Nullable Boolean oauthAllowInsecureEmailLookup) {

            this.oauthAllowInsecureEmailLookup = oauthAllowInsecureEmailLookup;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable GrafanaGrafanaUserConfigPrivateAccess privateAccess) {

            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable GrafanaGrafanaUserConfigPrivatelinkAccess privatelinkAccess) {

            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {

            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable GrafanaGrafanaUserConfigPublicAccess publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {

            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {

            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder smtpServer(@Nullable GrafanaGrafanaUserConfigSmtpServer smtpServer) {

            this.smtpServer = smtpServer;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {

            this.staticIps = staticIps;
            return this;
        }
        @CustomType.Setter
        public Builder unifiedAlertingEnabled(@Nullable Boolean unifiedAlertingEnabled) {

            this.unifiedAlertingEnabled = unifiedAlertingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder userAutoAssignOrg(@Nullable Boolean userAutoAssignOrg) {

            this.userAutoAssignOrg = userAutoAssignOrg;
            return this;
        }
        @CustomType.Setter
        public Builder userAutoAssignOrgRole(@Nullable String userAutoAssignOrgRole) {

            this.userAutoAssignOrgRole = userAutoAssignOrgRole;
            return this;
        }
        @CustomType.Setter
        public Builder viewersCanEdit(@Nullable Boolean viewersCanEdit) {

            this.viewersCanEdit = viewersCanEdit;
            return this;
        }
        @CustomType.Setter
        public Builder wal(@Nullable Boolean wal) {

            this.wal = wal;
            return this;
        }
        public GrafanaGrafanaUserConfig build() {
            final var _resultValue = new GrafanaGrafanaUserConfig();
            _resultValue.additionalBackupRegions = additionalBackupRegions;
            _resultValue.alertingEnabled = alertingEnabled;
            _resultValue.alertingErrorOrTimeout = alertingErrorOrTimeout;
            _resultValue.alertingMaxAnnotationsToKeep = alertingMaxAnnotationsToKeep;
            _resultValue.alertingNodataOrNullvalues = alertingNodataOrNullvalues;
            _resultValue.allowEmbedding = allowEmbedding;
            _resultValue.authAzuread = authAzuread;
            _resultValue.authBasicEnabled = authBasicEnabled;
            _resultValue.authGenericOauth = authGenericOauth;
            _resultValue.authGithub = authGithub;
            _resultValue.authGitlab = authGitlab;
            _resultValue.authGoogle = authGoogle;
            _resultValue.cookieSamesite = cookieSamesite;
            _resultValue.customDomain = customDomain;
            _resultValue.dashboardPreviewsEnabled = dashboardPreviewsEnabled;
            _resultValue.dashboardScenesEnabled = dashboardScenesEnabled;
            _resultValue.dashboardsMinRefreshInterval = dashboardsMinRefreshInterval;
            _resultValue.dashboardsVersionsToKeep = dashboardsVersionsToKeep;
            _resultValue.dataproxySendUserHeader = dataproxySendUserHeader;
            _resultValue.dataproxyTimeout = dataproxyTimeout;
            _resultValue.dateFormats = dateFormats;
            _resultValue.disableGravatar = disableGravatar;
            _resultValue.editorsCanAdmin = editorsCanAdmin;
            _resultValue.externalImageStorage = externalImageStorage;
            _resultValue.googleAnalyticsUaId = googleAnalyticsUaId;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.metricsEnabled = metricsEnabled;
            _resultValue.oauthAllowInsecureEmailLookup = oauthAllowInsecureEmailLookup;
            _resultValue.privateAccess = privateAccess;
            _resultValue.privatelinkAccess = privatelinkAccess;
            _resultValue.projectToForkFrom = projectToForkFrom;
            _resultValue.publicAccess = publicAccess;
            _resultValue.recoveryBasebackupName = recoveryBasebackupName;
            _resultValue.serviceLog = serviceLog;
            _resultValue.serviceToForkFrom = serviceToForkFrom;
            _resultValue.smtpServer = smtpServer;
            _resultValue.staticIps = staticIps;
            _resultValue.unifiedAlertingEnabled = unifiedAlertingEnabled;
            _resultValue.userAutoAssignOrg = userAutoAssignOrg;
            _resultValue.userAutoAssignOrgRole = userAutoAssignOrgRole;
            _resultValue.viewersCanEdit = viewersCanEdit;
            _resultValue.wal = wal;
            return _resultValue;
        }
    }
}
