// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthAzuread;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthGenericOauth;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthGithub;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthGitlab;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigAuthGoogle;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigDateFormats;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigExternalImageStorage;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigPublicAccess;
import com.pulumi.aiven.outputs.GrafanaGrafanaUserConfigSmtpServer;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GrafanaGrafanaUserConfig {
    /**
     * @return Enable or disable Grafana alerting functionality
     * 
     */
    private final @Nullable String alertingEnabled;
    /**
     * @return Default error or timeout setting for new alerting rules
     * 
     */
    private final @Nullable String alertingErrorOrTimeout;
    /**
     * @return Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations.
     * 
     */
    private final @Nullable String alertingMaxAnnotationsToKeep;
    /**
     * @return Default value for &#39;no data or null values&#39; for new alerting rules
     * 
     */
    private final @Nullable String alertingNodataOrNullvalues;
    /**
     * @return Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking
     * 
     */
    private final @Nullable String allowEmbedding;
    /**
     * @return Azure AD OAuth integration
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigAuthAzuread authAzuread;
    /**
     * @return Enable or disable basic authentication form, used by Grafana built-in login
     * 
     */
    private final @Nullable String authBasicEnabled;
    /**
     * @return Generic OAuth integration
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigAuthGenericOauth authGenericOauth;
    /**
     * @return Github Auth integration
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigAuthGithub authGithub;
    /**
     * @return GitLab Auth integration
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigAuthGitlab authGitlab;
    /**
     * @return Google Auth integration
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigAuthGoogle authGoogle;
    /**
     * @return Cookie SameSite attribute: &#39;strict&#39; prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. &#39;lax&#39; is the default value.
     * 
     */
    private final @Nullable String cookieSamesite;
    /**
     * @return Custom domain
     * 
     */
    private final @Nullable String customDomain;
    /**
     * @return Minimum refresh interval
     * 
     */
    private final @Nullable String dashboardsMinRefreshInterval;
    /**
     * @return Dashboard versions to keep per dashboard
     * 
     */
    private final @Nullable String dashboardsVersionsToKeep;
    /**
     * @return Send &#39;X-Grafana-User&#39; header to data source
     * 
     */
    private final @Nullable String dataproxySendUserHeader;
    /**
     * @return Timeout for data proxy requests in seconds
     * 
     */
    private final @Nullable String dataproxyTimeout;
    /**
     * @return Grafana date format specifications
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigDateFormats dateFormats;
    /**
     * @return Set to true to disable gravatar. Defaults to false (gravatar is enabled)
     * 
     */
    private final @Nullable String disableGravatar;
    /**
     * @return Editors can manage folders, teams and dashboards created by them
     * 
     */
    private final @Nullable String editorsCanAdmin;
    /**
     * @return External image store settings
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigExternalImageStorage externalImageStorage;
    /**
     * @return Google Analytics ID
     * 
     */
    private final @Nullable String googleAnalyticsUaId;
    /**
     * @return IP filter
     * 
     */
    private final @Nullable List<String> ipFilters;
    /**
     * @return Enable Grafana /metrics endpoint
     * 
     */
    private final @Nullable String metricsEnabled;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    private final @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigPublicAccess publicAccess;
    /**
     * @return Name of the basebackup to restore in forked service
     * 
     */
    private final @Nullable String recoveryBasebackupName;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    private final @Nullable String serviceToForkFrom;
    /**
     * @return SMTP server settings
     * 
     */
    private final @Nullable GrafanaGrafanaUserConfigSmtpServer smtpServer;
    /**
     * @return Static IP addresses
     * 
     */
    private final @Nullable String staticIps;
    /**
     * @return Auto-assign new users on signup to main organization. Defaults to false
     * 
     */
    private final @Nullable String userAutoAssignOrg;
    /**
     * @return Set role for new signups. Defaults to Viewer
     * 
     */
    private final @Nullable String userAutoAssignOrgRole;
    /**
     * @return Users with view-only permission can edit but not save dashboards
     * 
     */
    private final @Nullable String viewersCanEdit;

    @CustomType.Constructor
    private GrafanaGrafanaUserConfig(
        @CustomType.Parameter("alertingEnabled") @Nullable String alertingEnabled,
        @CustomType.Parameter("alertingErrorOrTimeout") @Nullable String alertingErrorOrTimeout,
        @CustomType.Parameter("alertingMaxAnnotationsToKeep") @Nullable String alertingMaxAnnotationsToKeep,
        @CustomType.Parameter("alertingNodataOrNullvalues") @Nullable String alertingNodataOrNullvalues,
        @CustomType.Parameter("allowEmbedding") @Nullable String allowEmbedding,
        @CustomType.Parameter("authAzuread") @Nullable GrafanaGrafanaUserConfigAuthAzuread authAzuread,
        @CustomType.Parameter("authBasicEnabled") @Nullable String authBasicEnabled,
        @CustomType.Parameter("authGenericOauth") @Nullable GrafanaGrafanaUserConfigAuthGenericOauth authGenericOauth,
        @CustomType.Parameter("authGithub") @Nullable GrafanaGrafanaUserConfigAuthGithub authGithub,
        @CustomType.Parameter("authGitlab") @Nullable GrafanaGrafanaUserConfigAuthGitlab authGitlab,
        @CustomType.Parameter("authGoogle") @Nullable GrafanaGrafanaUserConfigAuthGoogle authGoogle,
        @CustomType.Parameter("cookieSamesite") @Nullable String cookieSamesite,
        @CustomType.Parameter("customDomain") @Nullable String customDomain,
        @CustomType.Parameter("dashboardsMinRefreshInterval") @Nullable String dashboardsMinRefreshInterval,
        @CustomType.Parameter("dashboardsVersionsToKeep") @Nullable String dashboardsVersionsToKeep,
        @CustomType.Parameter("dataproxySendUserHeader") @Nullable String dataproxySendUserHeader,
        @CustomType.Parameter("dataproxyTimeout") @Nullable String dataproxyTimeout,
        @CustomType.Parameter("dateFormats") @Nullable GrafanaGrafanaUserConfigDateFormats dateFormats,
        @CustomType.Parameter("disableGravatar") @Nullable String disableGravatar,
        @CustomType.Parameter("editorsCanAdmin") @Nullable String editorsCanAdmin,
        @CustomType.Parameter("externalImageStorage") @Nullable GrafanaGrafanaUserConfigExternalImageStorage externalImageStorage,
        @CustomType.Parameter("googleAnalyticsUaId") @Nullable String googleAnalyticsUaId,
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("metricsEnabled") @Nullable String metricsEnabled,
        @CustomType.Parameter("privateAccess") @Nullable GrafanaGrafanaUserConfigPrivateAccess privateAccess,
        @CustomType.Parameter("privatelinkAccess") @Nullable GrafanaGrafanaUserConfigPrivatelinkAccess privatelinkAccess,
        @CustomType.Parameter("projectToForkFrom") @Nullable String projectToForkFrom,
        @CustomType.Parameter("publicAccess") @Nullable GrafanaGrafanaUserConfigPublicAccess publicAccess,
        @CustomType.Parameter("recoveryBasebackupName") @Nullable String recoveryBasebackupName,
        @CustomType.Parameter("serviceToForkFrom") @Nullable String serviceToForkFrom,
        @CustomType.Parameter("smtpServer") @Nullable GrafanaGrafanaUserConfigSmtpServer smtpServer,
        @CustomType.Parameter("staticIps") @Nullable String staticIps,
        @CustomType.Parameter("userAutoAssignOrg") @Nullable String userAutoAssignOrg,
        @CustomType.Parameter("userAutoAssignOrgRole") @Nullable String userAutoAssignOrgRole,
        @CustomType.Parameter("viewersCanEdit") @Nullable String viewersCanEdit) {
        this.alertingEnabled = alertingEnabled;
        this.alertingErrorOrTimeout = alertingErrorOrTimeout;
        this.alertingMaxAnnotationsToKeep = alertingMaxAnnotationsToKeep;
        this.alertingNodataOrNullvalues = alertingNodataOrNullvalues;
        this.allowEmbedding = allowEmbedding;
        this.authAzuread = authAzuread;
        this.authBasicEnabled = authBasicEnabled;
        this.authGenericOauth = authGenericOauth;
        this.authGithub = authGithub;
        this.authGitlab = authGitlab;
        this.authGoogle = authGoogle;
        this.cookieSamesite = cookieSamesite;
        this.customDomain = customDomain;
        this.dashboardsMinRefreshInterval = dashboardsMinRefreshInterval;
        this.dashboardsVersionsToKeep = dashboardsVersionsToKeep;
        this.dataproxySendUserHeader = dataproxySendUserHeader;
        this.dataproxyTimeout = dataproxyTimeout;
        this.dateFormats = dateFormats;
        this.disableGravatar = disableGravatar;
        this.editorsCanAdmin = editorsCanAdmin;
        this.externalImageStorage = externalImageStorage;
        this.googleAnalyticsUaId = googleAnalyticsUaId;
        this.ipFilters = ipFilters;
        this.metricsEnabled = metricsEnabled;
        this.privateAccess = privateAccess;
        this.privatelinkAccess = privatelinkAccess;
        this.projectToForkFrom = projectToForkFrom;
        this.publicAccess = publicAccess;
        this.recoveryBasebackupName = recoveryBasebackupName;
        this.serviceToForkFrom = serviceToForkFrom;
        this.smtpServer = smtpServer;
        this.staticIps = staticIps;
        this.userAutoAssignOrg = userAutoAssignOrg;
        this.userAutoAssignOrgRole = userAutoAssignOrgRole;
        this.viewersCanEdit = viewersCanEdit;
    }

    /**
     * @return Enable or disable Grafana alerting functionality
     * 
     */
    public Optional<String> alertingEnabled() {
        return Optional.ofNullable(this.alertingEnabled);
    }
    /**
     * @return Default error or timeout setting for new alerting rules
     * 
     */
    public Optional<String> alertingErrorOrTimeout() {
        return Optional.ofNullable(this.alertingErrorOrTimeout);
    }
    /**
     * @return Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations.
     * 
     */
    public Optional<String> alertingMaxAnnotationsToKeep() {
        return Optional.ofNullable(this.alertingMaxAnnotationsToKeep);
    }
    /**
     * @return Default value for &#39;no data or null values&#39; for new alerting rules
     * 
     */
    public Optional<String> alertingNodataOrNullvalues() {
        return Optional.ofNullable(this.alertingNodataOrNullvalues);
    }
    /**
     * @return Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking
     * 
     */
    public Optional<String> allowEmbedding() {
        return Optional.ofNullable(this.allowEmbedding);
    }
    /**
     * @return Azure AD OAuth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthAzuread> authAzuread() {
        return Optional.ofNullable(this.authAzuread);
    }
    /**
     * @return Enable or disable basic authentication form, used by Grafana built-in login
     * 
     */
    public Optional<String> authBasicEnabled() {
        return Optional.ofNullable(this.authBasicEnabled);
    }
    /**
     * @return Generic OAuth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthGenericOauth> authGenericOauth() {
        return Optional.ofNullable(this.authGenericOauth);
    }
    /**
     * @return Github Auth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthGithub> authGithub() {
        return Optional.ofNullable(this.authGithub);
    }
    /**
     * @return GitLab Auth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthGitlab> authGitlab() {
        return Optional.ofNullable(this.authGitlab);
    }
    /**
     * @return Google Auth integration
     * 
     */
    public Optional<GrafanaGrafanaUserConfigAuthGoogle> authGoogle() {
        return Optional.ofNullable(this.authGoogle);
    }
    /**
     * @return Cookie SameSite attribute: &#39;strict&#39; prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. &#39;lax&#39; is the default value.
     * 
     */
    public Optional<String> cookieSamesite() {
        return Optional.ofNullable(this.cookieSamesite);
    }
    /**
     * @return Custom domain
     * 
     */
    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    /**
     * @return Minimum refresh interval
     * 
     */
    public Optional<String> dashboardsMinRefreshInterval() {
        return Optional.ofNullable(this.dashboardsMinRefreshInterval);
    }
    /**
     * @return Dashboard versions to keep per dashboard
     * 
     */
    public Optional<String> dashboardsVersionsToKeep() {
        return Optional.ofNullable(this.dashboardsVersionsToKeep);
    }
    /**
     * @return Send &#39;X-Grafana-User&#39; header to data source
     * 
     */
    public Optional<String> dataproxySendUserHeader() {
        return Optional.ofNullable(this.dataproxySendUserHeader);
    }
    /**
     * @return Timeout for data proxy requests in seconds
     * 
     */
    public Optional<String> dataproxyTimeout() {
        return Optional.ofNullable(this.dataproxyTimeout);
    }
    /**
     * @return Grafana date format specifications
     * 
     */
    public Optional<GrafanaGrafanaUserConfigDateFormats> dateFormats() {
        return Optional.ofNullable(this.dateFormats);
    }
    /**
     * @return Set to true to disable gravatar. Defaults to false (gravatar is enabled)
     * 
     */
    public Optional<String> disableGravatar() {
        return Optional.ofNullable(this.disableGravatar);
    }
    /**
     * @return Editors can manage folders, teams and dashboards created by them
     * 
     */
    public Optional<String> editorsCanAdmin() {
        return Optional.ofNullable(this.editorsCanAdmin);
    }
    /**
     * @return External image store settings
     * 
     */
    public Optional<GrafanaGrafanaUserConfigExternalImageStorage> externalImageStorage() {
        return Optional.ofNullable(this.externalImageStorage);
    }
    /**
     * @return Google Analytics ID
     * 
     */
    public Optional<String> googleAnalyticsUaId() {
        return Optional.ofNullable(this.googleAnalyticsUaId);
    }
    /**
     * @return IP filter
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Enable Grafana /metrics endpoint
     * 
     */
    public Optional<String> metricsEnabled() {
        return Optional.ofNullable(this.metricsEnabled);
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<GrafanaGrafanaUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<GrafanaGrafanaUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<GrafanaGrafanaUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Name of the basebackup to restore in forked service
     * 
     */
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return SMTP server settings
     * 
     */
    public Optional<GrafanaGrafanaUserConfigSmtpServer> smtpServer() {
        return Optional.ofNullable(this.smtpServer);
    }
    /**
     * @return Static IP addresses
     * 
     */
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }
    /**
     * @return Auto-assign new users on signup to main organization. Defaults to false
     * 
     */
    public Optional<String> userAutoAssignOrg() {
        return Optional.ofNullable(this.userAutoAssignOrg);
    }
    /**
     * @return Set role for new signups. Defaults to Viewer
     * 
     */
    public Optional<String> userAutoAssignOrgRole() {
        return Optional.ofNullable(this.userAutoAssignOrgRole);
    }
    /**
     * @return Users with view-only permission can edit but not save dashboards
     * 
     */
    public Optional<String> viewersCanEdit() {
        return Optional.ofNullable(this.viewersCanEdit);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GrafanaGrafanaUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String alertingEnabled;
        private @Nullable String alertingErrorOrTimeout;
        private @Nullable String alertingMaxAnnotationsToKeep;
        private @Nullable String alertingNodataOrNullvalues;
        private @Nullable String allowEmbedding;
        private @Nullable GrafanaGrafanaUserConfigAuthAzuread authAzuread;
        private @Nullable String authBasicEnabled;
        private @Nullable GrafanaGrafanaUserConfigAuthGenericOauth authGenericOauth;
        private @Nullable GrafanaGrafanaUserConfigAuthGithub authGithub;
        private @Nullable GrafanaGrafanaUserConfigAuthGitlab authGitlab;
        private @Nullable GrafanaGrafanaUserConfigAuthGoogle authGoogle;
        private @Nullable String cookieSamesite;
        private @Nullable String customDomain;
        private @Nullable String dashboardsMinRefreshInterval;
        private @Nullable String dashboardsVersionsToKeep;
        private @Nullable String dataproxySendUserHeader;
        private @Nullable String dataproxyTimeout;
        private @Nullable GrafanaGrafanaUserConfigDateFormats dateFormats;
        private @Nullable String disableGravatar;
        private @Nullable String editorsCanAdmin;
        private @Nullable GrafanaGrafanaUserConfigExternalImageStorage externalImageStorage;
        private @Nullable String googleAnalyticsUaId;
        private @Nullable List<String> ipFilters;
        private @Nullable String metricsEnabled;
        private @Nullable GrafanaGrafanaUserConfigPrivateAccess privateAccess;
        private @Nullable GrafanaGrafanaUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable GrafanaGrafanaUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable String serviceToForkFrom;
        private @Nullable GrafanaGrafanaUserConfigSmtpServer smtpServer;
        private @Nullable String staticIps;
        private @Nullable String userAutoAssignOrg;
        private @Nullable String userAutoAssignOrgRole;
        private @Nullable String viewersCanEdit;

        public Builder() {
    	      // Empty
        }

        public Builder(GrafanaGrafanaUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertingEnabled = defaults.alertingEnabled;
    	      this.alertingErrorOrTimeout = defaults.alertingErrorOrTimeout;
    	      this.alertingMaxAnnotationsToKeep = defaults.alertingMaxAnnotationsToKeep;
    	      this.alertingNodataOrNullvalues = defaults.alertingNodataOrNullvalues;
    	      this.allowEmbedding = defaults.allowEmbedding;
    	      this.authAzuread = defaults.authAzuread;
    	      this.authBasicEnabled = defaults.authBasicEnabled;
    	      this.authGenericOauth = defaults.authGenericOauth;
    	      this.authGithub = defaults.authGithub;
    	      this.authGitlab = defaults.authGitlab;
    	      this.authGoogle = defaults.authGoogle;
    	      this.cookieSamesite = defaults.cookieSamesite;
    	      this.customDomain = defaults.customDomain;
    	      this.dashboardsMinRefreshInterval = defaults.dashboardsMinRefreshInterval;
    	      this.dashboardsVersionsToKeep = defaults.dashboardsVersionsToKeep;
    	      this.dataproxySendUserHeader = defaults.dataproxySendUserHeader;
    	      this.dataproxyTimeout = defaults.dataproxyTimeout;
    	      this.dateFormats = defaults.dateFormats;
    	      this.disableGravatar = defaults.disableGravatar;
    	      this.editorsCanAdmin = defaults.editorsCanAdmin;
    	      this.externalImageStorage = defaults.externalImageStorage;
    	      this.googleAnalyticsUaId = defaults.googleAnalyticsUaId;
    	      this.ipFilters = defaults.ipFilters;
    	      this.metricsEnabled = defaults.metricsEnabled;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.smtpServer = defaults.smtpServer;
    	      this.staticIps = defaults.staticIps;
    	      this.userAutoAssignOrg = defaults.userAutoAssignOrg;
    	      this.userAutoAssignOrgRole = defaults.userAutoAssignOrgRole;
    	      this.viewersCanEdit = defaults.viewersCanEdit;
        }

        public Builder alertingEnabled(@Nullable String alertingEnabled) {
            this.alertingEnabled = alertingEnabled;
            return this;
        }
        public Builder alertingErrorOrTimeout(@Nullable String alertingErrorOrTimeout) {
            this.alertingErrorOrTimeout = alertingErrorOrTimeout;
            return this;
        }
        public Builder alertingMaxAnnotationsToKeep(@Nullable String alertingMaxAnnotationsToKeep) {
            this.alertingMaxAnnotationsToKeep = alertingMaxAnnotationsToKeep;
            return this;
        }
        public Builder alertingNodataOrNullvalues(@Nullable String alertingNodataOrNullvalues) {
            this.alertingNodataOrNullvalues = alertingNodataOrNullvalues;
            return this;
        }
        public Builder allowEmbedding(@Nullable String allowEmbedding) {
            this.allowEmbedding = allowEmbedding;
            return this;
        }
        public Builder authAzuread(@Nullable GrafanaGrafanaUserConfigAuthAzuread authAzuread) {
            this.authAzuread = authAzuread;
            return this;
        }
        public Builder authBasicEnabled(@Nullable String authBasicEnabled) {
            this.authBasicEnabled = authBasicEnabled;
            return this;
        }
        public Builder authGenericOauth(@Nullable GrafanaGrafanaUserConfigAuthGenericOauth authGenericOauth) {
            this.authGenericOauth = authGenericOauth;
            return this;
        }
        public Builder authGithub(@Nullable GrafanaGrafanaUserConfigAuthGithub authGithub) {
            this.authGithub = authGithub;
            return this;
        }
        public Builder authGitlab(@Nullable GrafanaGrafanaUserConfigAuthGitlab authGitlab) {
            this.authGitlab = authGitlab;
            return this;
        }
        public Builder authGoogle(@Nullable GrafanaGrafanaUserConfigAuthGoogle authGoogle) {
            this.authGoogle = authGoogle;
            return this;
        }
        public Builder cookieSamesite(@Nullable String cookieSamesite) {
            this.cookieSamesite = cookieSamesite;
            return this;
        }
        public Builder customDomain(@Nullable String customDomain) {
            this.customDomain = customDomain;
            return this;
        }
        public Builder dashboardsMinRefreshInterval(@Nullable String dashboardsMinRefreshInterval) {
            this.dashboardsMinRefreshInterval = dashboardsMinRefreshInterval;
            return this;
        }
        public Builder dashboardsVersionsToKeep(@Nullable String dashboardsVersionsToKeep) {
            this.dashboardsVersionsToKeep = dashboardsVersionsToKeep;
            return this;
        }
        public Builder dataproxySendUserHeader(@Nullable String dataproxySendUserHeader) {
            this.dataproxySendUserHeader = dataproxySendUserHeader;
            return this;
        }
        public Builder dataproxyTimeout(@Nullable String dataproxyTimeout) {
            this.dataproxyTimeout = dataproxyTimeout;
            return this;
        }
        public Builder dateFormats(@Nullable GrafanaGrafanaUserConfigDateFormats dateFormats) {
            this.dateFormats = dateFormats;
            return this;
        }
        public Builder disableGravatar(@Nullable String disableGravatar) {
            this.disableGravatar = disableGravatar;
            return this;
        }
        public Builder editorsCanAdmin(@Nullable String editorsCanAdmin) {
            this.editorsCanAdmin = editorsCanAdmin;
            return this;
        }
        public Builder externalImageStorage(@Nullable GrafanaGrafanaUserConfigExternalImageStorage externalImageStorage) {
            this.externalImageStorage = externalImageStorage;
            return this;
        }
        public Builder googleAnalyticsUaId(@Nullable String googleAnalyticsUaId) {
            this.googleAnalyticsUaId = googleAnalyticsUaId;
            return this;
        }
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder metricsEnabled(@Nullable String metricsEnabled) {
            this.metricsEnabled = metricsEnabled;
            return this;
        }
        public Builder privateAccess(@Nullable GrafanaGrafanaUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        public Builder privatelinkAccess(@Nullable GrafanaGrafanaUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        public Builder publicAccess(@Nullable GrafanaGrafanaUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {
            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        public Builder smtpServer(@Nullable GrafanaGrafanaUserConfigSmtpServer smtpServer) {
            this.smtpServer = smtpServer;
            return this;
        }
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }
        public Builder userAutoAssignOrg(@Nullable String userAutoAssignOrg) {
            this.userAutoAssignOrg = userAutoAssignOrg;
            return this;
        }
        public Builder userAutoAssignOrgRole(@Nullable String userAutoAssignOrgRole) {
            this.userAutoAssignOrgRole = userAutoAssignOrgRole;
            return this;
        }
        public Builder viewersCanEdit(@Nullable String viewersCanEdit) {
            this.viewersCanEdit = viewersCanEdit;
            return this;
        }        public GrafanaGrafanaUserConfig build() {
            return new GrafanaGrafanaUserConfig(alertingEnabled, alertingErrorOrTimeout, alertingMaxAnnotationsToKeep, alertingNodataOrNullvalues, allowEmbedding, authAzuread, authBasicEnabled, authGenericOauth, authGithub, authGitlab, authGoogle, cookieSamesite, customDomain, dashboardsMinRefreshInterval, dashboardsVersionsToKeep, dataproxySendUserHeader, dataproxyTimeout, dateFormats, disableGravatar, editorsCanAdmin, externalImageStorage, googleAnalyticsUaId, ipFilters, metricsEnabled, privateAccess, privatelinkAccess, projectToForkFrom, publicAccess, recoveryBasebackupName, serviceToForkFrom, smtpServer, staticIps, userAutoAssignOrg, userAutoAssignOrgRole, viewersCanEdit);
        }
    }
}
