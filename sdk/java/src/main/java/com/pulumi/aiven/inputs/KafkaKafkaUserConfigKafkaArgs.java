// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaKafkaUserConfigKafkaArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaKafkaUserConfigKafkaArgs Empty = new KafkaKafkaUserConfigKafkaArgs();

    @Import(name="autoCreateTopicsEnable")
    private @Nullable Output<String> autoCreateTopicsEnable;

    public Optional<Output<String>> autoCreateTopicsEnable() {
        return Optional.ofNullable(this.autoCreateTopicsEnable);
    }

    @Import(name="compressionType")
    private @Nullable Output<String> compressionType;

    public Optional<Output<String>> compressionType() {
        return Optional.ofNullable(this.compressionType);
    }

    @Import(name="connectionsMaxIdleMs")
    private @Nullable Output<String> connectionsMaxIdleMs;

    public Optional<Output<String>> connectionsMaxIdleMs() {
        return Optional.ofNullable(this.connectionsMaxIdleMs);
    }

    @Import(name="defaultReplicationFactor")
    private @Nullable Output<String> defaultReplicationFactor;

    public Optional<Output<String>> defaultReplicationFactor() {
        return Optional.ofNullable(this.defaultReplicationFactor);
    }

    @Import(name="groupInitialRebalanceDelayMs")
    private @Nullable Output<String> groupInitialRebalanceDelayMs;

    public Optional<Output<String>> groupInitialRebalanceDelayMs() {
        return Optional.ofNullable(this.groupInitialRebalanceDelayMs);
    }

    @Import(name="groupMaxSessionTimeoutMs")
    private @Nullable Output<String> groupMaxSessionTimeoutMs;

    public Optional<Output<String>> groupMaxSessionTimeoutMs() {
        return Optional.ofNullable(this.groupMaxSessionTimeoutMs);
    }

    @Import(name="groupMinSessionTimeoutMs")
    private @Nullable Output<String> groupMinSessionTimeoutMs;

    public Optional<Output<String>> groupMinSessionTimeoutMs() {
        return Optional.ofNullable(this.groupMinSessionTimeoutMs);
    }

    @Import(name="logCleanerDeleteRetentionMs")
    private @Nullable Output<String> logCleanerDeleteRetentionMs;

    public Optional<Output<String>> logCleanerDeleteRetentionMs() {
        return Optional.ofNullable(this.logCleanerDeleteRetentionMs);
    }

    @Import(name="logCleanerMaxCompactionLagMs")
    private @Nullable Output<String> logCleanerMaxCompactionLagMs;

    public Optional<Output<String>> logCleanerMaxCompactionLagMs() {
        return Optional.ofNullable(this.logCleanerMaxCompactionLagMs);
    }

    @Import(name="logCleanerMinCleanableRatio")
    private @Nullable Output<String> logCleanerMinCleanableRatio;

    public Optional<Output<String>> logCleanerMinCleanableRatio() {
        return Optional.ofNullable(this.logCleanerMinCleanableRatio);
    }

    @Import(name="logCleanerMinCompactionLagMs")
    private @Nullable Output<String> logCleanerMinCompactionLagMs;

    public Optional<Output<String>> logCleanerMinCompactionLagMs() {
        return Optional.ofNullable(this.logCleanerMinCompactionLagMs);
    }

    @Import(name="logCleanupPolicy")
    private @Nullable Output<String> logCleanupPolicy;

    public Optional<Output<String>> logCleanupPolicy() {
        return Optional.ofNullable(this.logCleanupPolicy);
    }

    @Import(name="logFlushIntervalMessages")
    private @Nullable Output<String> logFlushIntervalMessages;

    public Optional<Output<String>> logFlushIntervalMessages() {
        return Optional.ofNullable(this.logFlushIntervalMessages);
    }

    @Import(name="logFlushIntervalMs")
    private @Nullable Output<String> logFlushIntervalMs;

    public Optional<Output<String>> logFlushIntervalMs() {
        return Optional.ofNullable(this.logFlushIntervalMs);
    }

    @Import(name="logIndexIntervalBytes")
    private @Nullable Output<String> logIndexIntervalBytes;

    public Optional<Output<String>> logIndexIntervalBytes() {
        return Optional.ofNullable(this.logIndexIntervalBytes);
    }

    @Import(name="logIndexSizeMaxBytes")
    private @Nullable Output<String> logIndexSizeMaxBytes;

    public Optional<Output<String>> logIndexSizeMaxBytes() {
        return Optional.ofNullable(this.logIndexSizeMaxBytes);
    }

    @Import(name="logMessageDownconversionEnable")
    private @Nullable Output<String> logMessageDownconversionEnable;

    public Optional<Output<String>> logMessageDownconversionEnable() {
        return Optional.ofNullable(this.logMessageDownconversionEnable);
    }

    @Import(name="logMessageTimestampDifferenceMaxMs")
    private @Nullable Output<String> logMessageTimestampDifferenceMaxMs;

    public Optional<Output<String>> logMessageTimestampDifferenceMaxMs() {
        return Optional.ofNullable(this.logMessageTimestampDifferenceMaxMs);
    }

    @Import(name="logMessageTimestampType")
    private @Nullable Output<String> logMessageTimestampType;

    public Optional<Output<String>> logMessageTimestampType() {
        return Optional.ofNullable(this.logMessageTimestampType);
    }

    @Import(name="logPreallocate")
    private @Nullable Output<String> logPreallocate;

    public Optional<Output<String>> logPreallocate() {
        return Optional.ofNullable(this.logPreallocate);
    }

    @Import(name="logRetentionBytes")
    private @Nullable Output<String> logRetentionBytes;

    public Optional<Output<String>> logRetentionBytes() {
        return Optional.ofNullable(this.logRetentionBytes);
    }

    @Import(name="logRetentionHours")
    private @Nullable Output<String> logRetentionHours;

    public Optional<Output<String>> logRetentionHours() {
        return Optional.ofNullable(this.logRetentionHours);
    }

    @Import(name="logRetentionMs")
    private @Nullable Output<String> logRetentionMs;

    public Optional<Output<String>> logRetentionMs() {
        return Optional.ofNullable(this.logRetentionMs);
    }

    @Import(name="logRollJitterMs")
    private @Nullable Output<String> logRollJitterMs;

    public Optional<Output<String>> logRollJitterMs() {
        return Optional.ofNullable(this.logRollJitterMs);
    }

    @Import(name="logRollMs")
    private @Nullable Output<String> logRollMs;

    public Optional<Output<String>> logRollMs() {
        return Optional.ofNullable(this.logRollMs);
    }

    @Import(name="logSegmentBytes")
    private @Nullable Output<String> logSegmentBytes;

    public Optional<Output<String>> logSegmentBytes() {
        return Optional.ofNullable(this.logSegmentBytes);
    }

    @Import(name="logSegmentDeleteDelayMs")
    private @Nullable Output<String> logSegmentDeleteDelayMs;

    public Optional<Output<String>> logSegmentDeleteDelayMs() {
        return Optional.ofNullable(this.logSegmentDeleteDelayMs);
    }

    @Import(name="maxConnectionsPerIp")
    private @Nullable Output<String> maxConnectionsPerIp;

    public Optional<Output<String>> maxConnectionsPerIp() {
        return Optional.ofNullable(this.maxConnectionsPerIp);
    }

    @Import(name="maxIncrementalFetchSessionCacheSlots")
    private @Nullable Output<String> maxIncrementalFetchSessionCacheSlots;

    public Optional<Output<String>> maxIncrementalFetchSessionCacheSlots() {
        return Optional.ofNullable(this.maxIncrementalFetchSessionCacheSlots);
    }

    @Import(name="messageMaxBytes")
    private @Nullable Output<String> messageMaxBytes;

    public Optional<Output<String>> messageMaxBytes() {
        return Optional.ofNullable(this.messageMaxBytes);
    }

    @Import(name="minInsyncReplicas")
    private @Nullable Output<String> minInsyncReplicas;

    public Optional<Output<String>> minInsyncReplicas() {
        return Optional.ofNullable(this.minInsyncReplicas);
    }

    @Import(name="numPartitions")
    private @Nullable Output<String> numPartitions;

    public Optional<Output<String>> numPartitions() {
        return Optional.ofNullable(this.numPartitions);
    }

    @Import(name="offsetsRetentionMinutes")
    private @Nullable Output<String> offsetsRetentionMinutes;

    public Optional<Output<String>> offsetsRetentionMinutes() {
        return Optional.ofNullable(this.offsetsRetentionMinutes);
    }

    @Import(name="producerPurgatoryPurgeIntervalRequests")
    private @Nullable Output<String> producerPurgatoryPurgeIntervalRequests;

    public Optional<Output<String>> producerPurgatoryPurgeIntervalRequests() {
        return Optional.ofNullable(this.producerPurgatoryPurgeIntervalRequests);
    }

    @Import(name="replicaFetchMaxBytes")
    private @Nullable Output<String> replicaFetchMaxBytes;

    public Optional<Output<String>> replicaFetchMaxBytes() {
        return Optional.ofNullable(this.replicaFetchMaxBytes);
    }

    @Import(name="replicaFetchResponseMaxBytes")
    private @Nullable Output<String> replicaFetchResponseMaxBytes;

    public Optional<Output<String>> replicaFetchResponseMaxBytes() {
        return Optional.ofNullable(this.replicaFetchResponseMaxBytes);
    }

    @Import(name="socketRequestMaxBytes")
    private @Nullable Output<String> socketRequestMaxBytes;

    public Optional<Output<String>> socketRequestMaxBytes() {
        return Optional.ofNullable(this.socketRequestMaxBytes);
    }

    @Import(name="transactionRemoveExpiredTransactionCleanupIntervalMs")
    private @Nullable Output<String> transactionRemoveExpiredTransactionCleanupIntervalMs;

    public Optional<Output<String>> transactionRemoveExpiredTransactionCleanupIntervalMs() {
        return Optional.ofNullable(this.transactionRemoveExpiredTransactionCleanupIntervalMs);
    }

    @Import(name="transactionStateLogSegmentBytes")
    private @Nullable Output<String> transactionStateLogSegmentBytes;

    public Optional<Output<String>> transactionStateLogSegmentBytes() {
        return Optional.ofNullable(this.transactionStateLogSegmentBytes);
    }

    private KafkaKafkaUserConfigKafkaArgs() {}

    private KafkaKafkaUserConfigKafkaArgs(KafkaKafkaUserConfigKafkaArgs $) {
        this.autoCreateTopicsEnable = $.autoCreateTopicsEnable;
        this.compressionType = $.compressionType;
        this.connectionsMaxIdleMs = $.connectionsMaxIdleMs;
        this.defaultReplicationFactor = $.defaultReplicationFactor;
        this.groupInitialRebalanceDelayMs = $.groupInitialRebalanceDelayMs;
        this.groupMaxSessionTimeoutMs = $.groupMaxSessionTimeoutMs;
        this.groupMinSessionTimeoutMs = $.groupMinSessionTimeoutMs;
        this.logCleanerDeleteRetentionMs = $.logCleanerDeleteRetentionMs;
        this.logCleanerMaxCompactionLagMs = $.logCleanerMaxCompactionLagMs;
        this.logCleanerMinCleanableRatio = $.logCleanerMinCleanableRatio;
        this.logCleanerMinCompactionLagMs = $.logCleanerMinCompactionLagMs;
        this.logCleanupPolicy = $.logCleanupPolicy;
        this.logFlushIntervalMessages = $.logFlushIntervalMessages;
        this.logFlushIntervalMs = $.logFlushIntervalMs;
        this.logIndexIntervalBytes = $.logIndexIntervalBytes;
        this.logIndexSizeMaxBytes = $.logIndexSizeMaxBytes;
        this.logMessageDownconversionEnable = $.logMessageDownconversionEnable;
        this.logMessageTimestampDifferenceMaxMs = $.logMessageTimestampDifferenceMaxMs;
        this.logMessageTimestampType = $.logMessageTimestampType;
        this.logPreallocate = $.logPreallocate;
        this.logRetentionBytes = $.logRetentionBytes;
        this.logRetentionHours = $.logRetentionHours;
        this.logRetentionMs = $.logRetentionMs;
        this.logRollJitterMs = $.logRollJitterMs;
        this.logRollMs = $.logRollMs;
        this.logSegmentBytes = $.logSegmentBytes;
        this.logSegmentDeleteDelayMs = $.logSegmentDeleteDelayMs;
        this.maxConnectionsPerIp = $.maxConnectionsPerIp;
        this.maxIncrementalFetchSessionCacheSlots = $.maxIncrementalFetchSessionCacheSlots;
        this.messageMaxBytes = $.messageMaxBytes;
        this.minInsyncReplicas = $.minInsyncReplicas;
        this.numPartitions = $.numPartitions;
        this.offsetsRetentionMinutes = $.offsetsRetentionMinutes;
        this.producerPurgatoryPurgeIntervalRequests = $.producerPurgatoryPurgeIntervalRequests;
        this.replicaFetchMaxBytes = $.replicaFetchMaxBytes;
        this.replicaFetchResponseMaxBytes = $.replicaFetchResponseMaxBytes;
        this.socketRequestMaxBytes = $.socketRequestMaxBytes;
        this.transactionRemoveExpiredTransactionCleanupIntervalMs = $.transactionRemoveExpiredTransactionCleanupIntervalMs;
        this.transactionStateLogSegmentBytes = $.transactionStateLogSegmentBytes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaKafkaUserConfigKafkaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaKafkaUserConfigKafkaArgs $;

        public Builder() {
            $ = new KafkaKafkaUserConfigKafkaArgs();
        }

        public Builder(KafkaKafkaUserConfigKafkaArgs defaults) {
            $ = new KafkaKafkaUserConfigKafkaArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoCreateTopicsEnable(@Nullable Output<String> autoCreateTopicsEnable) {
            $.autoCreateTopicsEnable = autoCreateTopicsEnable;
            return this;
        }

        public Builder autoCreateTopicsEnable(String autoCreateTopicsEnable) {
            return autoCreateTopicsEnable(Output.of(autoCreateTopicsEnable));
        }

        public Builder compressionType(@Nullable Output<String> compressionType) {
            $.compressionType = compressionType;
            return this;
        }

        public Builder compressionType(String compressionType) {
            return compressionType(Output.of(compressionType));
        }

        public Builder connectionsMaxIdleMs(@Nullable Output<String> connectionsMaxIdleMs) {
            $.connectionsMaxIdleMs = connectionsMaxIdleMs;
            return this;
        }

        public Builder connectionsMaxIdleMs(String connectionsMaxIdleMs) {
            return connectionsMaxIdleMs(Output.of(connectionsMaxIdleMs));
        }

        public Builder defaultReplicationFactor(@Nullable Output<String> defaultReplicationFactor) {
            $.defaultReplicationFactor = defaultReplicationFactor;
            return this;
        }

        public Builder defaultReplicationFactor(String defaultReplicationFactor) {
            return defaultReplicationFactor(Output.of(defaultReplicationFactor));
        }

        public Builder groupInitialRebalanceDelayMs(@Nullable Output<String> groupInitialRebalanceDelayMs) {
            $.groupInitialRebalanceDelayMs = groupInitialRebalanceDelayMs;
            return this;
        }

        public Builder groupInitialRebalanceDelayMs(String groupInitialRebalanceDelayMs) {
            return groupInitialRebalanceDelayMs(Output.of(groupInitialRebalanceDelayMs));
        }

        public Builder groupMaxSessionTimeoutMs(@Nullable Output<String> groupMaxSessionTimeoutMs) {
            $.groupMaxSessionTimeoutMs = groupMaxSessionTimeoutMs;
            return this;
        }

        public Builder groupMaxSessionTimeoutMs(String groupMaxSessionTimeoutMs) {
            return groupMaxSessionTimeoutMs(Output.of(groupMaxSessionTimeoutMs));
        }

        public Builder groupMinSessionTimeoutMs(@Nullable Output<String> groupMinSessionTimeoutMs) {
            $.groupMinSessionTimeoutMs = groupMinSessionTimeoutMs;
            return this;
        }

        public Builder groupMinSessionTimeoutMs(String groupMinSessionTimeoutMs) {
            return groupMinSessionTimeoutMs(Output.of(groupMinSessionTimeoutMs));
        }

        public Builder logCleanerDeleteRetentionMs(@Nullable Output<String> logCleanerDeleteRetentionMs) {
            $.logCleanerDeleteRetentionMs = logCleanerDeleteRetentionMs;
            return this;
        }

        public Builder logCleanerDeleteRetentionMs(String logCleanerDeleteRetentionMs) {
            return logCleanerDeleteRetentionMs(Output.of(logCleanerDeleteRetentionMs));
        }

        public Builder logCleanerMaxCompactionLagMs(@Nullable Output<String> logCleanerMaxCompactionLagMs) {
            $.logCleanerMaxCompactionLagMs = logCleanerMaxCompactionLagMs;
            return this;
        }

        public Builder logCleanerMaxCompactionLagMs(String logCleanerMaxCompactionLagMs) {
            return logCleanerMaxCompactionLagMs(Output.of(logCleanerMaxCompactionLagMs));
        }

        public Builder logCleanerMinCleanableRatio(@Nullable Output<String> logCleanerMinCleanableRatio) {
            $.logCleanerMinCleanableRatio = logCleanerMinCleanableRatio;
            return this;
        }

        public Builder logCleanerMinCleanableRatio(String logCleanerMinCleanableRatio) {
            return logCleanerMinCleanableRatio(Output.of(logCleanerMinCleanableRatio));
        }

        public Builder logCleanerMinCompactionLagMs(@Nullable Output<String> logCleanerMinCompactionLagMs) {
            $.logCleanerMinCompactionLagMs = logCleanerMinCompactionLagMs;
            return this;
        }

        public Builder logCleanerMinCompactionLagMs(String logCleanerMinCompactionLagMs) {
            return logCleanerMinCompactionLagMs(Output.of(logCleanerMinCompactionLagMs));
        }

        public Builder logCleanupPolicy(@Nullable Output<String> logCleanupPolicy) {
            $.logCleanupPolicy = logCleanupPolicy;
            return this;
        }

        public Builder logCleanupPolicy(String logCleanupPolicy) {
            return logCleanupPolicy(Output.of(logCleanupPolicy));
        }

        public Builder logFlushIntervalMessages(@Nullable Output<String> logFlushIntervalMessages) {
            $.logFlushIntervalMessages = logFlushIntervalMessages;
            return this;
        }

        public Builder logFlushIntervalMessages(String logFlushIntervalMessages) {
            return logFlushIntervalMessages(Output.of(logFlushIntervalMessages));
        }

        public Builder logFlushIntervalMs(@Nullable Output<String> logFlushIntervalMs) {
            $.logFlushIntervalMs = logFlushIntervalMs;
            return this;
        }

        public Builder logFlushIntervalMs(String logFlushIntervalMs) {
            return logFlushIntervalMs(Output.of(logFlushIntervalMs));
        }

        public Builder logIndexIntervalBytes(@Nullable Output<String> logIndexIntervalBytes) {
            $.logIndexIntervalBytes = logIndexIntervalBytes;
            return this;
        }

        public Builder logIndexIntervalBytes(String logIndexIntervalBytes) {
            return logIndexIntervalBytes(Output.of(logIndexIntervalBytes));
        }

        public Builder logIndexSizeMaxBytes(@Nullable Output<String> logIndexSizeMaxBytes) {
            $.logIndexSizeMaxBytes = logIndexSizeMaxBytes;
            return this;
        }

        public Builder logIndexSizeMaxBytes(String logIndexSizeMaxBytes) {
            return logIndexSizeMaxBytes(Output.of(logIndexSizeMaxBytes));
        }

        public Builder logMessageDownconversionEnable(@Nullable Output<String> logMessageDownconversionEnable) {
            $.logMessageDownconversionEnable = logMessageDownconversionEnable;
            return this;
        }

        public Builder logMessageDownconversionEnable(String logMessageDownconversionEnable) {
            return logMessageDownconversionEnable(Output.of(logMessageDownconversionEnable));
        }

        public Builder logMessageTimestampDifferenceMaxMs(@Nullable Output<String> logMessageTimestampDifferenceMaxMs) {
            $.logMessageTimestampDifferenceMaxMs = logMessageTimestampDifferenceMaxMs;
            return this;
        }

        public Builder logMessageTimestampDifferenceMaxMs(String logMessageTimestampDifferenceMaxMs) {
            return logMessageTimestampDifferenceMaxMs(Output.of(logMessageTimestampDifferenceMaxMs));
        }

        public Builder logMessageTimestampType(@Nullable Output<String> logMessageTimestampType) {
            $.logMessageTimestampType = logMessageTimestampType;
            return this;
        }

        public Builder logMessageTimestampType(String logMessageTimestampType) {
            return logMessageTimestampType(Output.of(logMessageTimestampType));
        }

        public Builder logPreallocate(@Nullable Output<String> logPreallocate) {
            $.logPreallocate = logPreallocate;
            return this;
        }

        public Builder logPreallocate(String logPreallocate) {
            return logPreallocate(Output.of(logPreallocate));
        }

        public Builder logRetentionBytes(@Nullable Output<String> logRetentionBytes) {
            $.logRetentionBytes = logRetentionBytes;
            return this;
        }

        public Builder logRetentionBytes(String logRetentionBytes) {
            return logRetentionBytes(Output.of(logRetentionBytes));
        }

        public Builder logRetentionHours(@Nullable Output<String> logRetentionHours) {
            $.logRetentionHours = logRetentionHours;
            return this;
        }

        public Builder logRetentionHours(String logRetentionHours) {
            return logRetentionHours(Output.of(logRetentionHours));
        }

        public Builder logRetentionMs(@Nullable Output<String> logRetentionMs) {
            $.logRetentionMs = logRetentionMs;
            return this;
        }

        public Builder logRetentionMs(String logRetentionMs) {
            return logRetentionMs(Output.of(logRetentionMs));
        }

        public Builder logRollJitterMs(@Nullable Output<String> logRollJitterMs) {
            $.logRollJitterMs = logRollJitterMs;
            return this;
        }

        public Builder logRollJitterMs(String logRollJitterMs) {
            return logRollJitterMs(Output.of(logRollJitterMs));
        }

        public Builder logRollMs(@Nullable Output<String> logRollMs) {
            $.logRollMs = logRollMs;
            return this;
        }

        public Builder logRollMs(String logRollMs) {
            return logRollMs(Output.of(logRollMs));
        }

        public Builder logSegmentBytes(@Nullable Output<String> logSegmentBytes) {
            $.logSegmentBytes = logSegmentBytes;
            return this;
        }

        public Builder logSegmentBytes(String logSegmentBytes) {
            return logSegmentBytes(Output.of(logSegmentBytes));
        }

        public Builder logSegmentDeleteDelayMs(@Nullable Output<String> logSegmentDeleteDelayMs) {
            $.logSegmentDeleteDelayMs = logSegmentDeleteDelayMs;
            return this;
        }

        public Builder logSegmentDeleteDelayMs(String logSegmentDeleteDelayMs) {
            return logSegmentDeleteDelayMs(Output.of(logSegmentDeleteDelayMs));
        }

        public Builder maxConnectionsPerIp(@Nullable Output<String> maxConnectionsPerIp) {
            $.maxConnectionsPerIp = maxConnectionsPerIp;
            return this;
        }

        public Builder maxConnectionsPerIp(String maxConnectionsPerIp) {
            return maxConnectionsPerIp(Output.of(maxConnectionsPerIp));
        }

        public Builder maxIncrementalFetchSessionCacheSlots(@Nullable Output<String> maxIncrementalFetchSessionCacheSlots) {
            $.maxIncrementalFetchSessionCacheSlots = maxIncrementalFetchSessionCacheSlots;
            return this;
        }

        public Builder maxIncrementalFetchSessionCacheSlots(String maxIncrementalFetchSessionCacheSlots) {
            return maxIncrementalFetchSessionCacheSlots(Output.of(maxIncrementalFetchSessionCacheSlots));
        }

        public Builder messageMaxBytes(@Nullable Output<String> messageMaxBytes) {
            $.messageMaxBytes = messageMaxBytes;
            return this;
        }

        public Builder messageMaxBytes(String messageMaxBytes) {
            return messageMaxBytes(Output.of(messageMaxBytes));
        }

        public Builder minInsyncReplicas(@Nullable Output<String> minInsyncReplicas) {
            $.minInsyncReplicas = minInsyncReplicas;
            return this;
        }

        public Builder minInsyncReplicas(String minInsyncReplicas) {
            return minInsyncReplicas(Output.of(minInsyncReplicas));
        }

        public Builder numPartitions(@Nullable Output<String> numPartitions) {
            $.numPartitions = numPartitions;
            return this;
        }

        public Builder numPartitions(String numPartitions) {
            return numPartitions(Output.of(numPartitions));
        }

        public Builder offsetsRetentionMinutes(@Nullable Output<String> offsetsRetentionMinutes) {
            $.offsetsRetentionMinutes = offsetsRetentionMinutes;
            return this;
        }

        public Builder offsetsRetentionMinutes(String offsetsRetentionMinutes) {
            return offsetsRetentionMinutes(Output.of(offsetsRetentionMinutes));
        }

        public Builder producerPurgatoryPurgeIntervalRequests(@Nullable Output<String> producerPurgatoryPurgeIntervalRequests) {
            $.producerPurgatoryPurgeIntervalRequests = producerPurgatoryPurgeIntervalRequests;
            return this;
        }

        public Builder producerPurgatoryPurgeIntervalRequests(String producerPurgatoryPurgeIntervalRequests) {
            return producerPurgatoryPurgeIntervalRequests(Output.of(producerPurgatoryPurgeIntervalRequests));
        }

        public Builder replicaFetchMaxBytes(@Nullable Output<String> replicaFetchMaxBytes) {
            $.replicaFetchMaxBytes = replicaFetchMaxBytes;
            return this;
        }

        public Builder replicaFetchMaxBytes(String replicaFetchMaxBytes) {
            return replicaFetchMaxBytes(Output.of(replicaFetchMaxBytes));
        }

        public Builder replicaFetchResponseMaxBytes(@Nullable Output<String> replicaFetchResponseMaxBytes) {
            $.replicaFetchResponseMaxBytes = replicaFetchResponseMaxBytes;
            return this;
        }

        public Builder replicaFetchResponseMaxBytes(String replicaFetchResponseMaxBytes) {
            return replicaFetchResponseMaxBytes(Output.of(replicaFetchResponseMaxBytes));
        }

        public Builder socketRequestMaxBytes(@Nullable Output<String> socketRequestMaxBytes) {
            $.socketRequestMaxBytes = socketRequestMaxBytes;
            return this;
        }

        public Builder socketRequestMaxBytes(String socketRequestMaxBytes) {
            return socketRequestMaxBytes(Output.of(socketRequestMaxBytes));
        }

        public Builder transactionRemoveExpiredTransactionCleanupIntervalMs(@Nullable Output<String> transactionRemoveExpiredTransactionCleanupIntervalMs) {
            $.transactionRemoveExpiredTransactionCleanupIntervalMs = transactionRemoveExpiredTransactionCleanupIntervalMs;
            return this;
        }

        public Builder transactionRemoveExpiredTransactionCleanupIntervalMs(String transactionRemoveExpiredTransactionCleanupIntervalMs) {
            return transactionRemoveExpiredTransactionCleanupIntervalMs(Output.of(transactionRemoveExpiredTransactionCleanupIntervalMs));
        }

        public Builder transactionStateLogSegmentBytes(@Nullable Output<String> transactionStateLogSegmentBytes) {
            $.transactionStateLogSegmentBytes = transactionStateLogSegmentBytes;
            return this;
        }

        public Builder transactionStateLogSegmentBytes(String transactionStateLogSegmentBytes) {
            return transactionStateLogSegmentBytes(Output.of(transactionStateLogSegmentBytes));
        }

        public KafkaKafkaUserConfigKafkaArgs build() {
            return $;
        }
    }

}
