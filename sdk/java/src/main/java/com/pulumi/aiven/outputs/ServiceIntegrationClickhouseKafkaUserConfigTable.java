// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.ServiceIntegrationClickhouseKafkaUserConfigTableColumn;
import com.pulumi.aiven.outputs.ServiceIntegrationClickhouseKafkaUserConfigTableTopic;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceIntegrationClickhouseKafkaUserConfigTable {
    /**
     * @return Enum: `smallest`, `earliest`, `beginning`, `largest`, `latest`, `end`. Action to take when there is no initial offset in offset store or the desired offset is out of range. The default value is `earliest`.
     * 
     */
    private @Nullable String autoOffsetReset;
    /**
     * @return Table columns
     * 
     */
    private List<ServiceIntegrationClickhouseKafkaUserConfigTableColumn> columns;
    /**
     * @return Enum: `Avro`, `CSV`, `JSONAsString`, `JSONCompactEachRow`, `JSONCompactStringsEachRow`, `JSONEachRow`, `JSONStringsEachRow`, `MsgPack`, `TSKV`, `TSV`, `TabSeparated`, `RawBLOB`, `AvroConfluent`. Message data format. The default value is `JSONEachRow`.
     * 
     */
    private String dataFormat;
    /**
     * @return Enum: `basic`, `best_effort`, `best_effort_us`. Method to read DateTime from text input formats. The default value is `basic`.
     * 
     */
    private @Nullable String dateTimeInputFormat;
    /**
     * @return Kafka consumers group. The default value is `clickhouse`.
     * 
     */
    private String groupName;
    /**
     * @return Enum: `default`, `stream`. How to handle errors for Kafka engine. The default value is `default`.
     * 
     */
    private @Nullable String handleErrorMode;
    /**
     * @return Number of row collected by poll(s) for flushing data from Kafka. The default value is `0`.
     * 
     */
    private @Nullable Integer maxBlockSize;
    /**
     * @return The maximum number of rows produced in one kafka message for row-based formats. The default value is `1`.
     * 
     */
    private @Nullable Integer maxRowsPerMessage;
    /**
     * @return Name of the table.
     * 
     */
    private String name;
    /**
     * @return The number of consumers per table per replica. The default value is `1`.
     * 
     */
    private @Nullable Integer numConsumers;
    /**
     * @return Maximum amount of messages to be polled in a single Kafka poll. The default value is `0`.
     * 
     */
    private @Nullable Integer pollMaxBatchSize;
    /**
     * @return Skip at least this number of broken messages from Kafka topic per block. The default value is `0`.
     * 
     */
    private @Nullable Integer skipBrokenMessages;
    /**
     * @return Kafka topics
     * 
     */
    private List<ServiceIntegrationClickhouseKafkaUserConfigTableTopic> topics;

    private ServiceIntegrationClickhouseKafkaUserConfigTable() {}
    /**
     * @return Enum: `smallest`, `earliest`, `beginning`, `largest`, `latest`, `end`. Action to take when there is no initial offset in offset store or the desired offset is out of range. The default value is `earliest`.
     * 
     */
    public Optional<String> autoOffsetReset() {
        return Optional.ofNullable(this.autoOffsetReset);
    }
    /**
     * @return Table columns
     * 
     */
    public List<ServiceIntegrationClickhouseKafkaUserConfigTableColumn> columns() {
        return this.columns;
    }
    /**
     * @return Enum: `Avro`, `CSV`, `JSONAsString`, `JSONCompactEachRow`, `JSONCompactStringsEachRow`, `JSONEachRow`, `JSONStringsEachRow`, `MsgPack`, `TSKV`, `TSV`, `TabSeparated`, `RawBLOB`, `AvroConfluent`. Message data format. The default value is `JSONEachRow`.
     * 
     */
    public String dataFormat() {
        return this.dataFormat;
    }
    /**
     * @return Enum: `basic`, `best_effort`, `best_effort_us`. Method to read DateTime from text input formats. The default value is `basic`.
     * 
     */
    public Optional<String> dateTimeInputFormat() {
        return Optional.ofNullable(this.dateTimeInputFormat);
    }
    /**
     * @return Kafka consumers group. The default value is `clickhouse`.
     * 
     */
    public String groupName() {
        return this.groupName;
    }
    /**
     * @return Enum: `default`, `stream`. How to handle errors for Kafka engine. The default value is `default`.
     * 
     */
    public Optional<String> handleErrorMode() {
        return Optional.ofNullable(this.handleErrorMode);
    }
    /**
     * @return Number of row collected by poll(s) for flushing data from Kafka. The default value is `0`.
     * 
     */
    public Optional<Integer> maxBlockSize() {
        return Optional.ofNullable(this.maxBlockSize);
    }
    /**
     * @return The maximum number of rows produced in one kafka message for row-based formats. The default value is `1`.
     * 
     */
    public Optional<Integer> maxRowsPerMessage() {
        return Optional.ofNullable(this.maxRowsPerMessage);
    }
    /**
     * @return Name of the table.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of consumers per table per replica. The default value is `1`.
     * 
     */
    public Optional<Integer> numConsumers() {
        return Optional.ofNullable(this.numConsumers);
    }
    /**
     * @return Maximum amount of messages to be polled in a single Kafka poll. The default value is `0`.
     * 
     */
    public Optional<Integer> pollMaxBatchSize() {
        return Optional.ofNullable(this.pollMaxBatchSize);
    }
    /**
     * @return Skip at least this number of broken messages from Kafka topic per block. The default value is `0`.
     * 
     */
    public Optional<Integer> skipBrokenMessages() {
        return Optional.ofNullable(this.skipBrokenMessages);
    }
    /**
     * @return Kafka topics
     * 
     */
    public List<ServiceIntegrationClickhouseKafkaUserConfigTableTopic> topics() {
        return this.topics;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceIntegrationClickhouseKafkaUserConfigTable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String autoOffsetReset;
        private List<ServiceIntegrationClickhouseKafkaUserConfigTableColumn> columns;
        private String dataFormat;
        private @Nullable String dateTimeInputFormat;
        private String groupName;
        private @Nullable String handleErrorMode;
        private @Nullable Integer maxBlockSize;
        private @Nullable Integer maxRowsPerMessage;
        private String name;
        private @Nullable Integer numConsumers;
        private @Nullable Integer pollMaxBatchSize;
        private @Nullable Integer skipBrokenMessages;
        private List<ServiceIntegrationClickhouseKafkaUserConfigTableTopic> topics;
        public Builder() {}
        public Builder(ServiceIntegrationClickhouseKafkaUserConfigTable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoOffsetReset = defaults.autoOffsetReset;
    	      this.columns = defaults.columns;
    	      this.dataFormat = defaults.dataFormat;
    	      this.dateTimeInputFormat = defaults.dateTimeInputFormat;
    	      this.groupName = defaults.groupName;
    	      this.handleErrorMode = defaults.handleErrorMode;
    	      this.maxBlockSize = defaults.maxBlockSize;
    	      this.maxRowsPerMessage = defaults.maxRowsPerMessage;
    	      this.name = defaults.name;
    	      this.numConsumers = defaults.numConsumers;
    	      this.pollMaxBatchSize = defaults.pollMaxBatchSize;
    	      this.skipBrokenMessages = defaults.skipBrokenMessages;
    	      this.topics = defaults.topics;
        }

        @CustomType.Setter
        public Builder autoOffsetReset(@Nullable String autoOffsetReset) {

            this.autoOffsetReset = autoOffsetReset;
            return this;
        }
        @CustomType.Setter
        public Builder columns(List<ServiceIntegrationClickhouseKafkaUserConfigTableColumn> columns) {
            if (columns == null) {
              throw new MissingRequiredPropertyException("ServiceIntegrationClickhouseKafkaUserConfigTable", "columns");
            }
            this.columns = columns;
            return this;
        }
        public Builder columns(ServiceIntegrationClickhouseKafkaUserConfigTableColumn... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder dataFormat(String dataFormat) {
            if (dataFormat == null) {
              throw new MissingRequiredPropertyException("ServiceIntegrationClickhouseKafkaUserConfigTable", "dataFormat");
            }
            this.dataFormat = dataFormat;
            return this;
        }
        @CustomType.Setter
        public Builder dateTimeInputFormat(@Nullable String dateTimeInputFormat) {

            this.dateTimeInputFormat = dateTimeInputFormat;
            return this;
        }
        @CustomType.Setter
        public Builder groupName(String groupName) {
            if (groupName == null) {
              throw new MissingRequiredPropertyException("ServiceIntegrationClickhouseKafkaUserConfigTable", "groupName");
            }
            this.groupName = groupName;
            return this;
        }
        @CustomType.Setter
        public Builder handleErrorMode(@Nullable String handleErrorMode) {

            this.handleErrorMode = handleErrorMode;
            return this;
        }
        @CustomType.Setter
        public Builder maxBlockSize(@Nullable Integer maxBlockSize) {

            this.maxBlockSize = maxBlockSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxRowsPerMessage(@Nullable Integer maxRowsPerMessage) {

            this.maxRowsPerMessage = maxRowsPerMessage;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceIntegrationClickhouseKafkaUserConfigTable", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder numConsumers(@Nullable Integer numConsumers) {

            this.numConsumers = numConsumers;
            return this;
        }
        @CustomType.Setter
        public Builder pollMaxBatchSize(@Nullable Integer pollMaxBatchSize) {

            this.pollMaxBatchSize = pollMaxBatchSize;
            return this;
        }
        @CustomType.Setter
        public Builder skipBrokenMessages(@Nullable Integer skipBrokenMessages) {

            this.skipBrokenMessages = skipBrokenMessages;
            return this;
        }
        @CustomType.Setter
        public Builder topics(List<ServiceIntegrationClickhouseKafkaUserConfigTableTopic> topics) {
            if (topics == null) {
              throw new MissingRequiredPropertyException("ServiceIntegrationClickhouseKafkaUserConfigTable", "topics");
            }
            this.topics = topics;
            return this;
        }
        public Builder topics(ServiceIntegrationClickhouseKafkaUserConfigTableTopic... topics) {
            return topics(List.of(topics));
        }
        public ServiceIntegrationClickhouseKafkaUserConfigTable build() {
            final var _resultValue = new ServiceIntegrationClickhouseKafkaUserConfigTable();
            _resultValue.autoOffsetReset = autoOffsetReset;
            _resultValue.columns = columns;
            _resultValue.dataFormat = dataFormat;
            _resultValue.dateTimeInputFormat = dateTimeInputFormat;
            _resultValue.groupName = groupName;
            _resultValue.handleErrorMode = handleErrorMode;
            _resultValue.maxBlockSize = maxBlockSize;
            _resultValue.maxRowsPerMessage = maxRowsPerMessage;
            _resultValue.name = name;
            _resultValue.numConsumers = numConsumers;
            _resultValue.pollMaxBatchSize = pollMaxBatchSize;
            _resultValue.skipBrokenMessages = skipBrokenMessages;
            _resultValue.topics = topics;
            return _resultValue;
        }
    }
}
