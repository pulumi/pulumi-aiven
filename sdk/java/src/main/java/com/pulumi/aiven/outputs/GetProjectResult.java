// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetProjectTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectResult {
    /**
     * @return An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String accountId;
    /**
     * @return If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
     * 
     */
    private Boolean addAccountOwnersAdminAccess;
    /**
     * @return The amount of platform credits available to the project. This could be your free trial or other promotional credits.
     * 
     */
    private String availableCredits;
    /**
     * @return The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String billingGroup;
    /**
     * @return The CA certificate of the project. This is required for configuring clients that connect to certain services like Kafka.
     * 
     */
    private String caCert;
    /**
     * @return is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String copyFromProject;
    /**
     * @return Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
     * 
     */
    private String defaultCloud;
    /**
     * @return The current accumulated bill for this project in the current billing period.
     * 
     */
    private String estimatedBalance;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String parentId;
    /**
     * @return The method of invoicing used for payments for this project, e.g. `card`.
     * 
     */
    private String paymentMethod;
    /**
     * @return Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
     * 
     */
    private String project;
    /**
     * @return Tags are key-value pairs that allow you to categorize projects.
     * 
     */
    private List<GetProjectTag> tags;
    /**
     * @return Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
     * 
     */
    private List<String> technicalEmails;
    /**
     * @return Use the same billing group that is used in source project.
     * 
     */
    private Boolean useSourceProjectBillingGroup;

    private GetProjectResult() {}
    /**
     * @return An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
     * 
     */
    public Boolean addAccountOwnersAdminAccess() {
        return this.addAccountOwnersAdminAccess;
    }
    /**
     * @return The amount of platform credits available to the project. This could be your free trial or other promotional credits.
     * 
     */
    public String availableCredits() {
        return this.availableCredits;
    }
    /**
     * @return The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String billingGroup() {
        return this.billingGroup;
    }
    /**
     * @return The CA certificate of the project. This is required for configuring clients that connect to certain services like Kafka.
     * 
     */
    public String caCert() {
        return this.caCert;
    }
    /**
     * @return is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String copyFromProject() {
        return this.copyFromProject;
    }
    /**
     * @return Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
     * 
     */
    public String defaultCloud() {
        return this.defaultCloud;
    }
    /**
     * @return The current accumulated bill for this project in the current billing period.
     * 
     */
    public String estimatedBalance() {
        return this.estimatedBalance;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return The method of invoicing used for payments for this project, e.g. `card`.
     * 
     */
    public String paymentMethod() {
        return this.paymentMethod;
    }
    /**
     * @return Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Tags are key-value pairs that allow you to categorize projects.
     * 
     */
    public List<GetProjectTag> tags() {
        return this.tags;
    }
    /**
     * @return Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
     * 
     */
    public List<String> technicalEmails() {
        return this.technicalEmails;
    }
    /**
     * @return Use the same billing group that is used in source project.
     * 
     */
    public Boolean useSourceProjectBillingGroup() {
        return this.useSourceProjectBillingGroup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Boolean addAccountOwnersAdminAccess;
        private String availableCredits;
        private String billingGroup;
        private String caCert;
        private String copyFromProject;
        private String defaultCloud;
        private String estimatedBalance;
        private String id;
        private String parentId;
        private String paymentMethod;
        private String project;
        private List<GetProjectTag> tags;
        private List<String> technicalEmails;
        private Boolean useSourceProjectBillingGroup;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.addAccountOwnersAdminAccess = defaults.addAccountOwnersAdminAccess;
    	      this.availableCredits = defaults.availableCredits;
    	      this.billingGroup = defaults.billingGroup;
    	      this.caCert = defaults.caCert;
    	      this.copyFromProject = defaults.copyFromProject;
    	      this.defaultCloud = defaults.defaultCloud;
    	      this.estimatedBalance = defaults.estimatedBalance;
    	      this.id = defaults.id;
    	      this.parentId = defaults.parentId;
    	      this.paymentMethod = defaults.paymentMethod;
    	      this.project = defaults.project;
    	      this.tags = defaults.tags;
    	      this.technicalEmails = defaults.technicalEmails;
    	      this.useSourceProjectBillingGroup = defaults.useSourceProjectBillingGroup;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder addAccountOwnersAdminAccess(Boolean addAccountOwnersAdminAccess) {
            this.addAccountOwnersAdminAccess = Objects.requireNonNull(addAccountOwnersAdminAccess);
            return this;
        }
        @CustomType.Setter
        public Builder availableCredits(String availableCredits) {
            this.availableCredits = Objects.requireNonNull(availableCredits);
            return this;
        }
        @CustomType.Setter
        public Builder billingGroup(String billingGroup) {
            this.billingGroup = Objects.requireNonNull(billingGroup);
            return this;
        }
        @CustomType.Setter
        public Builder caCert(String caCert) {
            this.caCert = Objects.requireNonNull(caCert);
            return this;
        }
        @CustomType.Setter
        public Builder copyFromProject(String copyFromProject) {
            this.copyFromProject = Objects.requireNonNull(copyFromProject);
            return this;
        }
        @CustomType.Setter
        public Builder defaultCloud(String defaultCloud) {
            this.defaultCloud = Objects.requireNonNull(defaultCloud);
            return this;
        }
        @CustomType.Setter
        public Builder estimatedBalance(String estimatedBalance) {
            this.estimatedBalance = Objects.requireNonNull(estimatedBalance);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            this.parentId = Objects.requireNonNull(parentId);
            return this;
        }
        @CustomType.Setter
        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = Objects.requireNonNull(paymentMethod);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetProjectTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetProjectTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder technicalEmails(List<String> technicalEmails) {
            this.technicalEmails = Objects.requireNonNull(technicalEmails);
            return this;
        }
        public Builder technicalEmails(String... technicalEmails) {
            return technicalEmails(List.of(technicalEmails));
        }
        @CustomType.Setter
        public Builder useSourceProjectBillingGroup(Boolean useSourceProjectBillingGroup) {
            this.useSourceProjectBillingGroup = Objects.requireNonNull(useSourceProjectBillingGroup);
            return this;
        }
        public GetProjectResult build() {
            final var o = new GetProjectResult();
            o.accountId = accountId;
            o.addAccountOwnersAdminAccess = addAccountOwnersAdminAccess;
            o.availableCredits = availableCredits;
            o.billingGroup = billingGroup;
            o.caCert = caCert;
            o.copyFromProject = copyFromProject;
            o.defaultCloud = defaultCloud;
            o.estimatedBalance = estimatedBalance;
            o.id = id;
            o.parentId = parentId;
            o.paymentMethod = paymentMethod;
            o.project = project;
            o.tags = tags;
            o.technicalEmails = technicalEmails;
            o.useSourceProjectBillingGroup = useSourceProjectBillingGroup;
            return o;
        }
    }
}
