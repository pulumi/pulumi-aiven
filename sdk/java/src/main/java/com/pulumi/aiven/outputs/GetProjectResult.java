// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetProjectTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectResult {
    private final String accountId;
    private final Boolean addAccountOwnersAdminAccess;
    private final String availableCredits;
    private final String billingGroup;
    private final String caCert;
    private final String copyFromProject;
    private final String defaultCloud;
    private final String estimatedBalance;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String paymentMethod;
    private final String project;
    private final List<GetProjectTag> tags;
    private final List<String> technicalEmails;
    private final Boolean useSourceProjectBillingGroup;

    @CustomType.Constructor
    private GetProjectResult(
        @CustomType.Parameter("accountId") String accountId,
        @CustomType.Parameter("addAccountOwnersAdminAccess") Boolean addAccountOwnersAdminAccess,
        @CustomType.Parameter("availableCredits") String availableCredits,
        @CustomType.Parameter("billingGroup") String billingGroup,
        @CustomType.Parameter("caCert") String caCert,
        @CustomType.Parameter("copyFromProject") String copyFromProject,
        @CustomType.Parameter("defaultCloud") String defaultCloud,
        @CustomType.Parameter("estimatedBalance") String estimatedBalance,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("paymentMethod") String paymentMethod,
        @CustomType.Parameter("project") String project,
        @CustomType.Parameter("tags") List<GetProjectTag> tags,
        @CustomType.Parameter("technicalEmails") List<String> technicalEmails,
        @CustomType.Parameter("useSourceProjectBillingGroup") Boolean useSourceProjectBillingGroup) {
        this.accountId = accountId;
        this.addAccountOwnersAdminAccess = addAccountOwnersAdminAccess;
        this.availableCredits = availableCredits;
        this.billingGroup = billingGroup;
        this.caCert = caCert;
        this.copyFromProject = copyFromProject;
        this.defaultCloud = defaultCloud;
        this.estimatedBalance = estimatedBalance;
        this.id = id;
        this.paymentMethod = paymentMethod;
        this.project = project;
        this.tags = tags;
        this.technicalEmails = technicalEmails;
        this.useSourceProjectBillingGroup = useSourceProjectBillingGroup;
    }

    public String accountId() {
        return this.accountId;
    }
    public Boolean addAccountOwnersAdminAccess() {
        return this.addAccountOwnersAdminAccess;
    }
    public String availableCredits() {
        return this.availableCredits;
    }
    public String billingGroup() {
        return this.billingGroup;
    }
    public String caCert() {
        return this.caCert;
    }
    public String copyFromProject() {
        return this.copyFromProject;
    }
    public String defaultCloud() {
        return this.defaultCloud;
    }
    public String estimatedBalance() {
        return this.estimatedBalance;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String paymentMethod() {
        return this.paymentMethod;
    }
    public String project() {
        return this.project;
    }
    public List<GetProjectTag> tags() {
        return this.tags;
    }
    public List<String> technicalEmails() {
        return this.technicalEmails;
    }
    public Boolean useSourceProjectBillingGroup() {
        return this.useSourceProjectBillingGroup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accountId;
        private Boolean addAccountOwnersAdminAccess;
        private String availableCredits;
        private String billingGroup;
        private String caCert;
        private String copyFromProject;
        private String defaultCloud;
        private String estimatedBalance;
        private String id;
        private String paymentMethod;
        private String project;
        private List<GetProjectTag> tags;
        private List<String> technicalEmails;
        private Boolean useSourceProjectBillingGroup;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.addAccountOwnersAdminAccess = defaults.addAccountOwnersAdminAccess;
    	      this.availableCredits = defaults.availableCredits;
    	      this.billingGroup = defaults.billingGroup;
    	      this.caCert = defaults.caCert;
    	      this.copyFromProject = defaults.copyFromProject;
    	      this.defaultCloud = defaults.defaultCloud;
    	      this.estimatedBalance = defaults.estimatedBalance;
    	      this.id = defaults.id;
    	      this.paymentMethod = defaults.paymentMethod;
    	      this.project = defaults.project;
    	      this.tags = defaults.tags;
    	      this.technicalEmails = defaults.technicalEmails;
    	      this.useSourceProjectBillingGroup = defaults.useSourceProjectBillingGroup;
        }

        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        public Builder addAccountOwnersAdminAccess(Boolean addAccountOwnersAdminAccess) {
            this.addAccountOwnersAdminAccess = Objects.requireNonNull(addAccountOwnersAdminAccess);
            return this;
        }
        public Builder availableCredits(String availableCredits) {
            this.availableCredits = Objects.requireNonNull(availableCredits);
            return this;
        }
        public Builder billingGroup(String billingGroup) {
            this.billingGroup = Objects.requireNonNull(billingGroup);
            return this;
        }
        public Builder caCert(String caCert) {
            this.caCert = Objects.requireNonNull(caCert);
            return this;
        }
        public Builder copyFromProject(String copyFromProject) {
            this.copyFromProject = Objects.requireNonNull(copyFromProject);
            return this;
        }
        public Builder defaultCloud(String defaultCloud) {
            this.defaultCloud = Objects.requireNonNull(defaultCloud);
            return this;
        }
        public Builder estimatedBalance(String estimatedBalance) {
            this.estimatedBalance = Objects.requireNonNull(estimatedBalance);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = Objects.requireNonNull(paymentMethod);
            return this;
        }
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        public Builder tags(List<GetProjectTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetProjectTag... tags) {
            return tags(List.of(tags));
        }
        public Builder technicalEmails(List<String> technicalEmails) {
            this.technicalEmails = Objects.requireNonNull(technicalEmails);
            return this;
        }
        public Builder technicalEmails(String... technicalEmails) {
            return technicalEmails(List.of(technicalEmails));
        }
        public Builder useSourceProjectBillingGroup(Boolean useSourceProjectBillingGroup) {
            this.useSourceProjectBillingGroup = Objects.requireNonNull(useSourceProjectBillingGroup);
            return this;
        }        public GetProjectResult build() {
            return new GetProjectResult(accountId, addAccountOwnersAdminAccess, availableCredits, billingGroup, caCert, copyFromProject, defaultCloud, estimatedBalance, id, paymentMethod, project, tags, technicalEmails, useSourceProjectBillingGroup);
        }
    }
}
