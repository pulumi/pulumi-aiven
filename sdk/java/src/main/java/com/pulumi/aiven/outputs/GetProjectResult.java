// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetProjectTag;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectResult {
    /**
     * @return Link a project to an existing account using its account ID. This field is deprecated. Use `parent_id` instead. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String accountId;
    /**
     * @return If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
     * 
     */
    private Boolean addAccountOwnersAdminAccess;
    /**
     * @return The number of trial or promotional credits remaining for this project.
     * 
     */
    private String availableCredits;
    /**
     * @return The ID of the billing group this project is assigned to. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String billingGroup;
    /**
     * @return The CA certificate for the project. This is required for configuring clients that connect to certain services like Kafka.
     * 
     */
    private String caCert;
    /**
     * @return The name of the project to copy billing information, technical contacts, and some other project attributes from. This is most useful to set up the same billing method when you use bank transfers to pay invoices for other projects. You can only do this when creating a project. You can&#39;t set the billing over the API for an existing. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String copyFromProject;
    /**
     * @return Default cloud provider and region where services are hosted. This can be changed after the project is created and will not affect existing services.
     * 
     */
    private String defaultCloud;
    /**
     * @return The monthly running estimate for this project for the current billing period.
     * 
     */
    private String estimatedBalance;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    private String parentId;
    /**
     * @return The payment type used for this project. For example,`card`.
     * 
     */
    private String paymentMethod;
    /**
     * @return The name of the project. Names must be globally unique among all Aiven customers and cannot be changed later without destroying and re-creating the project, including all sub-resources.
     * 
     */
    private String project;
    /**
     * @return Tags are key-value pairs that allow you to categorize projects.
     * 
     */
    private List<GetProjectTag> tags;
    /**
     * @return The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It&#39;s good practice to keep these up-to-date to be aware of any potential issues with your project.
     * 
     */
    private List<String> technicalEmails;
    /**
     * @return Use the same billing group that is used in source project.
     * 
     */
    private Boolean useSourceProjectBillingGroup;

    private GetProjectResult() {}
    /**
     * @return Link a project to an existing account using its account ID. This field is deprecated. Use `parent_id` instead. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
     * 
     */
    public Boolean addAccountOwnersAdminAccess() {
        return this.addAccountOwnersAdminAccess;
    }
    /**
     * @return The number of trial or promotional credits remaining for this project.
     * 
     */
    public String availableCredits() {
        return this.availableCredits;
    }
    /**
     * @return The ID of the billing group this project is assigned to. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String billingGroup() {
        return this.billingGroup;
    }
    /**
     * @return The CA certificate for the project. This is required for configuring clients that connect to certain services like Kafka.
     * 
     */
    public String caCert() {
        return this.caCert;
    }
    /**
     * @return The name of the project to copy billing information, technical contacts, and some other project attributes from. This is most useful to set up the same billing method when you use bank transfers to pay invoices for other projects. You can only do this when creating a project. You can&#39;t set the billing over the API for an existing. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String copyFromProject() {
        return this.copyFromProject;
    }
    /**
     * @return Default cloud provider and region where services are hosted. This can be changed after the project is created and will not affect existing services.
     * 
     */
    public String defaultCloud() {
        return this.defaultCloud;
    }
    /**
     * @return The monthly running estimate for this project for the current billing period.
     * 
     */
    public String estimatedBalance() {
        return this.estimatedBalance;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return The payment type used for this project. For example,`card`.
     * 
     */
    public String paymentMethod() {
        return this.paymentMethod;
    }
    /**
     * @return The name of the project. Names must be globally unique among all Aiven customers and cannot be changed later without destroying and re-creating the project, including all sub-resources.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Tags are key-value pairs that allow you to categorize projects.
     * 
     */
    public List<GetProjectTag> tags() {
        return this.tags;
    }
    /**
     * @return The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It&#39;s good practice to keep these up-to-date to be aware of any potential issues with your project.
     * 
     */
    public List<String> technicalEmails() {
        return this.technicalEmails;
    }
    /**
     * @return Use the same billing group that is used in source project.
     * 
     */
    public Boolean useSourceProjectBillingGroup() {
        return this.useSourceProjectBillingGroup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Boolean addAccountOwnersAdminAccess;
        private String availableCredits;
        private String billingGroup;
        private String caCert;
        private String copyFromProject;
        private String defaultCloud;
        private String estimatedBalance;
        private String id;
        private String parentId;
        private String paymentMethod;
        private String project;
        private List<GetProjectTag> tags;
        private List<String> technicalEmails;
        private Boolean useSourceProjectBillingGroup;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.addAccountOwnersAdminAccess = defaults.addAccountOwnersAdminAccess;
    	      this.availableCredits = defaults.availableCredits;
    	      this.billingGroup = defaults.billingGroup;
    	      this.caCert = defaults.caCert;
    	      this.copyFromProject = defaults.copyFromProject;
    	      this.defaultCloud = defaults.defaultCloud;
    	      this.estimatedBalance = defaults.estimatedBalance;
    	      this.id = defaults.id;
    	      this.parentId = defaults.parentId;
    	      this.paymentMethod = defaults.paymentMethod;
    	      this.project = defaults.project;
    	      this.tags = defaults.tags;
    	      this.technicalEmails = defaults.technicalEmails;
    	      this.useSourceProjectBillingGroup = defaults.useSourceProjectBillingGroup;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder addAccountOwnersAdminAccess(Boolean addAccountOwnersAdminAccess) {
            if (addAccountOwnersAdminAccess == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "addAccountOwnersAdminAccess");
            }
            this.addAccountOwnersAdminAccess = addAccountOwnersAdminAccess;
            return this;
        }
        @CustomType.Setter
        public Builder availableCredits(String availableCredits) {
            if (availableCredits == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "availableCredits");
            }
            this.availableCredits = availableCredits;
            return this;
        }
        @CustomType.Setter
        public Builder billingGroup(String billingGroup) {
            if (billingGroup == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "billingGroup");
            }
            this.billingGroup = billingGroup;
            return this;
        }
        @CustomType.Setter
        public Builder caCert(String caCert) {
            if (caCert == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "caCert");
            }
            this.caCert = caCert;
            return this;
        }
        @CustomType.Setter
        public Builder copyFromProject(String copyFromProject) {
            if (copyFromProject == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "copyFromProject");
            }
            this.copyFromProject = copyFromProject;
            return this;
        }
        @CustomType.Setter
        public Builder defaultCloud(String defaultCloud) {
            if (defaultCloud == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "defaultCloud");
            }
            this.defaultCloud = defaultCloud;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedBalance(String estimatedBalance) {
            if (estimatedBalance == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "estimatedBalance");
            }
            this.estimatedBalance = estimatedBalance;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            if (parentId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "parentId");
            }
            this.parentId = parentId;
            return this;
        }
        @CustomType.Setter
        public Builder paymentMethod(String paymentMethod) {
            if (paymentMethod == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "paymentMethod");
            }
            this.paymentMethod = paymentMethod;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetProjectTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetProjectTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder technicalEmails(List<String> technicalEmails) {
            if (technicalEmails == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "technicalEmails");
            }
            this.technicalEmails = technicalEmails;
            return this;
        }
        public Builder technicalEmails(String... technicalEmails) {
            return technicalEmails(List.of(technicalEmails));
        }
        @CustomType.Setter
        public Builder useSourceProjectBillingGroup(Boolean useSourceProjectBillingGroup) {
            if (useSourceProjectBillingGroup == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "useSourceProjectBillingGroup");
            }
            this.useSourceProjectBillingGroup = useSourceProjectBillingGroup;
            return this;
        }
        public GetProjectResult build() {
            final var _resultValue = new GetProjectResult();
            _resultValue.accountId = accountId;
            _resultValue.addAccountOwnersAdminAccess = addAccountOwnersAdminAccess;
            _resultValue.availableCredits = availableCredits;
            _resultValue.billingGroup = billingGroup;
            _resultValue.caCert = caCert;
            _resultValue.copyFromProject = copyFromProject;
            _resultValue.defaultCloud = defaultCloud;
            _resultValue.estimatedBalance = estimatedBalance;
            _resultValue.id = id;
            _resultValue.parentId = parentId;
            _resultValue.paymentMethod = paymentMethod;
            _resultValue.project = project;
            _resultValue.tags = tags;
            _resultValue.technicalEmails = technicalEmails;
            _resultValue.useSourceProjectBillingGroup = useSourceProjectBillingGroup;
            return _resultValue;
        }
    }
}
