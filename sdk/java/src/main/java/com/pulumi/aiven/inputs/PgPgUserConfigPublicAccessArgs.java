// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PgPgUserConfigPublicAccessArgs extends com.pulumi.resources.ResourceArgs {

    public static final PgPgUserConfigPublicAccessArgs Empty = new PgPgUserConfigPublicAccessArgs();

    /**
     * postgresql.conf configuration values.
     * 
     */
    @Import(name="pg")
    private @Nullable Output<Boolean> pg;

    /**
     * @return postgresql.conf configuration values.
     * 
     */
    public Optional<Output<Boolean>> pg() {
        return Optional.ofNullable(this.pg);
    }

    /**
     * PGBouncer connection pooling settings.
     * 
     */
    @Import(name="pgbouncer")
    private @Nullable Output<Boolean> pgbouncer;

    /**
     * @return PGBouncer connection pooling settings.
     * 
     */
    public Optional<Output<Boolean>> pgbouncer() {
        return Optional.ofNullable(this.pgbouncer);
    }

    /**
     * Allow clients to connect to prometheus with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
     * 
     */
    @Import(name="prometheus")
    private @Nullable Output<Boolean> prometheus;

    /**
     * @return Allow clients to connect to prometheus with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
     * 
     */
    public Optional<Output<Boolean>> prometheus() {
        return Optional.ofNullable(this.prometheus);
    }

    private PgPgUserConfigPublicAccessArgs() {}

    private PgPgUserConfigPublicAccessArgs(PgPgUserConfigPublicAccessArgs $) {
        this.pg = $.pg;
        this.pgbouncer = $.pgbouncer;
        this.prometheus = $.prometheus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PgPgUserConfigPublicAccessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PgPgUserConfigPublicAccessArgs $;

        public Builder() {
            $ = new PgPgUserConfigPublicAccessArgs();
        }

        public Builder(PgPgUserConfigPublicAccessArgs defaults) {
            $ = new PgPgUserConfigPublicAccessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pg postgresql.conf configuration values.
         * 
         * @return builder
         * 
         */
        public Builder pg(@Nullable Output<Boolean> pg) {
            $.pg = pg;
            return this;
        }

        /**
         * @param pg postgresql.conf configuration values.
         * 
         * @return builder
         * 
         */
        public Builder pg(Boolean pg) {
            return pg(Output.of(pg));
        }

        /**
         * @param pgbouncer PGBouncer connection pooling settings.
         * 
         * @return builder
         * 
         */
        public Builder pgbouncer(@Nullable Output<Boolean> pgbouncer) {
            $.pgbouncer = pgbouncer;
            return this;
        }

        /**
         * @param pgbouncer PGBouncer connection pooling settings.
         * 
         * @return builder
         * 
         */
        public Builder pgbouncer(Boolean pgbouncer) {
            return pgbouncer(Output.of(pgbouncer));
        }

        /**
         * @param prometheus Allow clients to connect to prometheus with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
         * 
         * @return builder
         * 
         */
        public Builder prometheus(@Nullable Output<Boolean> prometheus) {
            $.prometheus = prometheus;
            return this;
        }

        /**
         * @param prometheus Allow clients to connect to prometheus with a DNS name that always resolves to the service&#39;s private IP addresses. Only available in certain network locations.
         * 
         * @return builder
         * 
         */
        public Builder prometheus(Boolean prometheus) {
            return prometheus(Output.of(prometheus));
        }

        public PgPgUserConfigPublicAccessArgs build() {
            return $;
        }
    }

}
