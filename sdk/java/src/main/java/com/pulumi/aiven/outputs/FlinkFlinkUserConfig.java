// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.FlinkFlinkUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.FlinkFlinkUserConfigPrivatelinkAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlinkFlinkUserConfig {
    /**
     * @return Flink major version.
     * 
     */
    private @Nullable String flinkVersion;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    private @Nullable List<FlinkFlinkUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return Task slots per node. For a 3 node plan, total number of task slots is 3x this value.
     * 
     */
    private @Nullable Integer numberOfTaskSlots;
    /**
     * @return Allow access to selected service components through Privatelink.
     * 
     */
    private @Nullable FlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess;

    private FlinkFlinkUserConfig() {}
    /**
     * @return Flink major version.
     * 
     */
    public Optional<String> flinkVersion() {
        return Optional.ofNullable(this.flinkVersion);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public List<FlinkFlinkUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Task slots per node. For a 3 node plan, total number of task slots is 3x this value.
     * 
     */
    public Optional<Integer> numberOfTaskSlots() {
        return Optional.ofNullable(this.numberOfTaskSlots);
    }
    /**
     * @return Allow access to selected service components through Privatelink.
     * 
     */
    public Optional<FlinkFlinkUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlinkFlinkUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String flinkVersion;
        private @Nullable List<FlinkFlinkUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable Integer numberOfTaskSlots;
        private @Nullable FlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess;
        public Builder() {}
        public Builder(FlinkFlinkUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.flinkVersion = defaults.flinkVersion;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.numberOfTaskSlots = defaults.numberOfTaskSlots;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
        }

        @CustomType.Setter
        public Builder flinkVersion(@Nullable String flinkVersion) {
            this.flinkVersion = flinkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<FlinkFlinkUserConfigIpFilterObject> ipFilterObjects) {
            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(FlinkFlinkUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {
            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder numberOfTaskSlots(@Nullable Integer numberOfTaskSlots) {
            this.numberOfTaskSlots = numberOfTaskSlots;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable FlinkFlinkUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        public FlinkFlinkUserConfig build() {
            final var _resultValue = new FlinkFlinkUserConfig();
            _resultValue.flinkVersion = flinkVersion;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.numberOfTaskSlots = numberOfTaskSlots;
            _resultValue.privatelinkAccess = privatelinkAccess;
            return _resultValue;
        }
    }
}
