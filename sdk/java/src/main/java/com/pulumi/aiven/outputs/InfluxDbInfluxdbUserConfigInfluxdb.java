// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InfluxDbInfluxdbUserConfigInfluxdb {
    /**
     * @return The maximum duration in seconds before a query is logged as a slow query. Setting this to 0 (the default) will never log slow queries.
     * 
     */
    private @Nullable Integer logQueriesAfter;
    /**
     * @return Maximum number of connections to InfluxDB. Setting this to 0 (default) means no limit. If using max_connection_limit, it is recommended to set the value to be large enough in order to not block clients unnecessarily.
     * 
     */
    private @Nullable Integer maxConnectionLimit;
    /**
     * @return The maximum number of rows returned in a non-chunked query. Setting this to 0 (the default) allows an unlimited number to be returned.
     * 
     */
    private @Nullable Integer maxRowLimit;
    /**
     * @return The maximum number of `GROUP BY time()` buckets that can be processed in a query. Setting this to 0 (the default) allows an unlimited number to be processed.
     * 
     */
    private @Nullable Integer maxSelectBuckets;
    /**
     * @return The maximum number of points that can be processed in a SELECT statement. Setting this to 0 (the default) allows an unlimited number to be processed.
     * 
     */
    private @Nullable Integer maxSelectPoint;
    /**
     * @return Whether queries should be logged before execution. May log sensitive data contained within a query.
     * 
     */
    private @Nullable Boolean queryLogEnabled;
    /**
     * @return The maximum duration in seconds before a query is killed. Setting this to 0 (the default) will never kill slow queries.
     * 
     */
    private @Nullable Integer queryTimeout;

    private InfluxDbInfluxdbUserConfigInfluxdb() {}
    /**
     * @return The maximum duration in seconds before a query is logged as a slow query. Setting this to 0 (the default) will never log slow queries.
     * 
     */
    public Optional<Integer> logQueriesAfter() {
        return Optional.ofNullable(this.logQueriesAfter);
    }
    /**
     * @return Maximum number of connections to InfluxDB. Setting this to 0 (default) means no limit. If using max_connection_limit, it is recommended to set the value to be large enough in order to not block clients unnecessarily.
     * 
     */
    public Optional<Integer> maxConnectionLimit() {
        return Optional.ofNullable(this.maxConnectionLimit);
    }
    /**
     * @return The maximum number of rows returned in a non-chunked query. Setting this to 0 (the default) allows an unlimited number to be returned.
     * 
     */
    public Optional<Integer> maxRowLimit() {
        return Optional.ofNullable(this.maxRowLimit);
    }
    /**
     * @return The maximum number of `GROUP BY time()` buckets that can be processed in a query. Setting this to 0 (the default) allows an unlimited number to be processed.
     * 
     */
    public Optional<Integer> maxSelectBuckets() {
        return Optional.ofNullable(this.maxSelectBuckets);
    }
    /**
     * @return The maximum number of points that can be processed in a SELECT statement. Setting this to 0 (the default) allows an unlimited number to be processed.
     * 
     */
    public Optional<Integer> maxSelectPoint() {
        return Optional.ofNullable(this.maxSelectPoint);
    }
    /**
     * @return Whether queries should be logged before execution. May log sensitive data contained within a query.
     * 
     */
    public Optional<Boolean> queryLogEnabled() {
        return Optional.ofNullable(this.queryLogEnabled);
    }
    /**
     * @return The maximum duration in seconds before a query is killed. Setting this to 0 (the default) will never kill slow queries.
     * 
     */
    public Optional<Integer> queryTimeout() {
        return Optional.ofNullable(this.queryTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InfluxDbInfluxdbUserConfigInfluxdb defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer logQueriesAfter;
        private @Nullable Integer maxConnectionLimit;
        private @Nullable Integer maxRowLimit;
        private @Nullable Integer maxSelectBuckets;
        private @Nullable Integer maxSelectPoint;
        private @Nullable Boolean queryLogEnabled;
        private @Nullable Integer queryTimeout;
        public Builder() {}
        public Builder(InfluxDbInfluxdbUserConfigInfluxdb defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logQueriesAfter = defaults.logQueriesAfter;
    	      this.maxConnectionLimit = defaults.maxConnectionLimit;
    	      this.maxRowLimit = defaults.maxRowLimit;
    	      this.maxSelectBuckets = defaults.maxSelectBuckets;
    	      this.maxSelectPoint = defaults.maxSelectPoint;
    	      this.queryLogEnabled = defaults.queryLogEnabled;
    	      this.queryTimeout = defaults.queryTimeout;
        }

        @CustomType.Setter
        public Builder logQueriesAfter(@Nullable Integer logQueriesAfter) {

            this.logQueriesAfter = logQueriesAfter;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectionLimit(@Nullable Integer maxConnectionLimit) {

            this.maxConnectionLimit = maxConnectionLimit;
            return this;
        }
        @CustomType.Setter
        public Builder maxRowLimit(@Nullable Integer maxRowLimit) {

            this.maxRowLimit = maxRowLimit;
            return this;
        }
        @CustomType.Setter
        public Builder maxSelectBuckets(@Nullable Integer maxSelectBuckets) {

            this.maxSelectBuckets = maxSelectBuckets;
            return this;
        }
        @CustomType.Setter
        public Builder maxSelectPoint(@Nullable Integer maxSelectPoint) {

            this.maxSelectPoint = maxSelectPoint;
            return this;
        }
        @CustomType.Setter
        public Builder queryLogEnabled(@Nullable Boolean queryLogEnabled) {

            this.queryLogEnabled = queryLogEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder queryTimeout(@Nullable Integer queryTimeout) {

            this.queryTimeout = queryTimeout;
            return this;
        }
        public InfluxDbInfluxdbUserConfigInfluxdb build() {
            final var _resultValue = new InfluxDbInfluxdbUserConfigInfluxdb();
            _resultValue.logQueriesAfter = logQueriesAfter;
            _resultValue.maxConnectionLimit = maxConnectionLimit;
            _resultValue.maxRowLimit = maxRowLimit;
            _resultValue.maxSelectBuckets = maxSelectBuckets;
            _resultValue.maxSelectPoint = maxSelectPoint;
            _resultValue.queryLogEnabled = queryLogEnabled;
            _resultValue.queryTimeout = queryTimeout;
            return _resultValue;
        }
    }
}
