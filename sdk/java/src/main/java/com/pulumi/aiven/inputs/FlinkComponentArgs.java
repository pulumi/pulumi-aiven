// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkComponentArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlinkComponentArgs Empty = new FlinkComponentArgs();

    /**
     * Service component name
     * 
     */
    @Import(name="component")
    private @Nullable Output<String> component;

    /**
     * @return Service component name
     * 
     */
    public Optional<Output<String>> component() {
        return Optional.ofNullable(this.component);
    }

    /**
     * Connection info for connecting to the service component. This is a combination of host and port.
     * 
     */
    @Import(name="connectionUri")
    private @Nullable Output<String> connectionUri;

    /**
     * @return Connection info for connecting to the service component. This is a combination of host and port.
     * 
     */
    public Optional<Output<String>> connectionUri() {
        return Optional.ofNullable(this.connectionUri);
    }

    /**
     * Host name for connecting to the service component
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Host name for connecting to the service component
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Kafka authentication method. This is a value specific to the &#39;kafka&#39; service component
     * 
     */
    @Import(name="kafkaAuthenticationMethod")
    private @Nullable Output<String> kafkaAuthenticationMethod;

    /**
     * @return Kafka authentication method. This is a value specific to the &#39;kafka&#39; service component
     * 
     */
    public Optional<Output<String>> kafkaAuthenticationMethod() {
        return Optional.ofNullable(this.kafkaAuthenticationMethod);
    }

    /**
     * Kafka certificate used. The possible values are `letsencrypt` and `projectCa`.
     * 
     */
    @Import(name="kafkaSslCa")
    private @Nullable Output<String> kafkaSslCa;

    /**
     * @return Kafka certificate used. The possible values are `letsencrypt` and `projectCa`.
     * 
     */
    public Optional<Output<String>> kafkaSslCa() {
        return Optional.ofNullable(this.kafkaSslCa);
    }

    /**
     * Port number for connecting to the service component
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port number for connecting to the service component
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Network access route
     * 
     */
    @Import(name="route")
    private @Nullable Output<String> route;

    /**
     * @return Network access route
     * 
     */
    public Optional<Output<String>> route() {
        return Optional.ofNullable(this.route);
    }

    /**
     * Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components they may disable encryption
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<Boolean> ssl;

    /**
     * @return Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components they may disable encryption
     * 
     */
    public Optional<Output<Boolean>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * DNS usage name
     * 
     */
    @Import(name="usage")
    private @Nullable Output<String> usage;

    /**
     * @return DNS usage name
     * 
     */
    public Optional<Output<String>> usage() {
        return Optional.ofNullable(this.usage);
    }

    private FlinkComponentArgs() {}

    private FlinkComponentArgs(FlinkComponentArgs $) {
        this.component = $.component;
        this.connectionUri = $.connectionUri;
        this.host = $.host;
        this.kafkaAuthenticationMethod = $.kafkaAuthenticationMethod;
        this.kafkaSslCa = $.kafkaSslCa;
        this.port = $.port;
        this.route = $.route;
        this.ssl = $.ssl;
        this.usage = $.usage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkComponentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkComponentArgs $;

        public Builder() {
            $ = new FlinkComponentArgs();
        }

        public Builder(FlinkComponentArgs defaults) {
            $ = new FlinkComponentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param component Service component name
         * 
         * @return builder
         * 
         */
        public Builder component(@Nullable Output<String> component) {
            $.component = component;
            return this;
        }

        /**
         * @param component Service component name
         * 
         * @return builder
         * 
         */
        public Builder component(String component) {
            return component(Output.of(component));
        }

        /**
         * @param connectionUri Connection info for connecting to the service component. This is a combination of host and port.
         * 
         * @return builder
         * 
         */
        public Builder connectionUri(@Nullable Output<String> connectionUri) {
            $.connectionUri = connectionUri;
            return this;
        }

        /**
         * @param connectionUri Connection info for connecting to the service component. This is a combination of host and port.
         * 
         * @return builder
         * 
         */
        public Builder connectionUri(String connectionUri) {
            return connectionUri(Output.of(connectionUri));
        }

        /**
         * @param host Host name for connecting to the service component
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Host name for connecting to the service component
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param kafkaAuthenticationMethod Kafka authentication method. This is a value specific to the &#39;kafka&#39; service component
         * 
         * @return builder
         * 
         */
        public Builder kafkaAuthenticationMethod(@Nullable Output<String> kafkaAuthenticationMethod) {
            $.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
            return this;
        }

        /**
         * @param kafkaAuthenticationMethod Kafka authentication method. This is a value specific to the &#39;kafka&#39; service component
         * 
         * @return builder
         * 
         */
        public Builder kafkaAuthenticationMethod(String kafkaAuthenticationMethod) {
            return kafkaAuthenticationMethod(Output.of(kafkaAuthenticationMethod));
        }

        /**
         * @param kafkaSslCa Kafka certificate used. The possible values are `letsencrypt` and `projectCa`.
         * 
         * @return builder
         * 
         */
        public Builder kafkaSslCa(@Nullable Output<String> kafkaSslCa) {
            $.kafkaSslCa = kafkaSslCa;
            return this;
        }

        /**
         * @param kafkaSslCa Kafka certificate used. The possible values are `letsencrypt` and `projectCa`.
         * 
         * @return builder
         * 
         */
        public Builder kafkaSslCa(String kafkaSslCa) {
            return kafkaSslCa(Output.of(kafkaSslCa));
        }

        /**
         * @param port Port number for connecting to the service component
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port number for connecting to the service component
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param route Network access route
         * 
         * @return builder
         * 
         */
        public Builder route(@Nullable Output<String> route) {
            $.route = route;
            return this;
        }

        /**
         * @param route Network access route
         * 
         * @return builder
         * 
         */
        public Builder route(String route) {
            return route(Output.of(route));
        }

        /**
         * @param ssl Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components they may disable encryption
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<Boolean> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components they may disable encryption
         * 
         * @return builder
         * 
         */
        public Builder ssl(Boolean ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param usage DNS usage name
         * 
         * @return builder
         * 
         */
        public Builder usage(@Nullable Output<String> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage DNS usage name
         * 
         * @return builder
         * 
         */
        public Builder usage(String usage) {
            return usage(Output.of(usage));
        }

        public FlinkComponentArgs build() {
            return $;
        }
    }

}
