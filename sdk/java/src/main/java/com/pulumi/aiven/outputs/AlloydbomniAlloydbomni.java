// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.AlloydbomniAlloydbomniParam;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlloydbomniAlloydbomni {
    /**
     * @return PgBouncer connection details for [connection pooling](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling).
     * 
     * @deprecated
     * This field was added by mistake and has never worked. It will be removed in future versions.
     * 
     */
    @Deprecated /* This field was added by mistake and has never worked. It will be removed in future versions. */
    private @Nullable String bouncer;
    /**
     * @return Primary AlloyDB Omni database name.
     * 
     */
    private @Nullable String dbname;
    /**
     * @return AlloyDB Omni primary node host IP or name.
     * 
     */
    private @Nullable String host;
    /**
     * @return The [number of allowed connections](https://aiven.io/docs/products/postgresql/reference/pg-connection-limits). Varies based on the service plan.
     * 
     */
    private @Nullable Integer maxConnections;
    /**
     * @return AlloyDB Omni connection parameters.
     * 
     */
    private @Nullable List<AlloydbomniAlloydbomniParam> params;
    /**
     * @return AlloyDB Omni admin user password.
     * 
     */
    private @Nullable String password;
    /**
     * @return AlloyDB Omni port.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return AlloyDB Omni replica URI for services with a replica.
     * 
     */
    private @Nullable String replicaUri;
    /**
     * @return AlloyDB Omni SSL mode setting.
     * 
     */
    private @Nullable String sslmode;
    /**
     * @return AlloyDB Omni standby connection URIs.
     * 
     */
    private @Nullable List<String> standbyUris;
    /**
     * @return AlloyDB Omni syncing connection URIs.
     * 
     */
    private @Nullable List<String> syncingUris;
    /**
     * @return AlloyDB Omni primary connection URI.
     * 
     */
    private @Nullable String uri;
    /**
     * @return AlloyDB Omni primary connection URIs.
     * 
     */
    private @Nullable List<String> uris;
    /**
     * @return AlloyDB Omni admin user name.
     * 
     */
    private @Nullable String user;

    private AlloydbomniAlloydbomni() {}
    /**
     * @return PgBouncer connection details for [connection pooling](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling).
     * 
     * @deprecated
     * This field was added by mistake and has never worked. It will be removed in future versions.
     * 
     */
    @Deprecated /* This field was added by mistake and has never worked. It will be removed in future versions. */
    public Optional<String> bouncer() {
        return Optional.ofNullable(this.bouncer);
    }
    /**
     * @return Primary AlloyDB Omni database name.
     * 
     */
    public Optional<String> dbname() {
        return Optional.ofNullable(this.dbname);
    }
    /**
     * @return AlloyDB Omni primary node host IP or name.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return The [number of allowed connections](https://aiven.io/docs/products/postgresql/reference/pg-connection-limits). Varies based on the service plan.
     * 
     */
    public Optional<Integer> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }
    /**
     * @return AlloyDB Omni connection parameters.
     * 
     */
    public List<AlloydbomniAlloydbomniParam> params() {
        return this.params == null ? List.of() : this.params;
    }
    /**
     * @return AlloyDB Omni admin user password.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return AlloyDB Omni port.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return AlloyDB Omni replica URI for services with a replica.
     * 
     */
    public Optional<String> replicaUri() {
        return Optional.ofNullable(this.replicaUri);
    }
    /**
     * @return AlloyDB Omni SSL mode setting.
     * 
     */
    public Optional<String> sslmode() {
        return Optional.ofNullable(this.sslmode);
    }
    /**
     * @return AlloyDB Omni standby connection URIs.
     * 
     */
    public List<String> standbyUris() {
        return this.standbyUris == null ? List.of() : this.standbyUris;
    }
    /**
     * @return AlloyDB Omni syncing connection URIs.
     * 
     */
    public List<String> syncingUris() {
        return this.syncingUris == null ? List.of() : this.syncingUris;
    }
    /**
     * @return AlloyDB Omni primary connection URI.
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }
    /**
     * @return AlloyDB Omni primary connection URIs.
     * 
     */
    public List<String> uris() {
        return this.uris == null ? List.of() : this.uris;
    }
    /**
     * @return AlloyDB Omni admin user name.
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlloydbomniAlloydbomni defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bouncer;
        private @Nullable String dbname;
        private @Nullable String host;
        private @Nullable Integer maxConnections;
        private @Nullable List<AlloydbomniAlloydbomniParam> params;
        private @Nullable String password;
        private @Nullable Integer port;
        private @Nullable String replicaUri;
        private @Nullable String sslmode;
        private @Nullable List<String> standbyUris;
        private @Nullable List<String> syncingUris;
        private @Nullable String uri;
        private @Nullable List<String> uris;
        private @Nullable String user;
        public Builder() {}
        public Builder(AlloydbomniAlloydbomni defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bouncer = defaults.bouncer;
    	      this.dbname = defaults.dbname;
    	      this.host = defaults.host;
    	      this.maxConnections = defaults.maxConnections;
    	      this.params = defaults.params;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.replicaUri = defaults.replicaUri;
    	      this.sslmode = defaults.sslmode;
    	      this.standbyUris = defaults.standbyUris;
    	      this.syncingUris = defaults.syncingUris;
    	      this.uri = defaults.uri;
    	      this.uris = defaults.uris;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder bouncer(@Nullable String bouncer) {

            this.bouncer = bouncer;
            return this;
        }
        @CustomType.Setter
        public Builder dbname(@Nullable String dbname) {

            this.dbname = dbname;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(@Nullable Integer maxConnections) {

            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder params(@Nullable List<AlloydbomniAlloydbomniParam> params) {

            this.params = params;
            return this;
        }
        public Builder params(AlloydbomniAlloydbomniParam... params) {
            return params(List.of(params));
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder replicaUri(@Nullable String replicaUri) {

            this.replicaUri = replicaUri;
            return this;
        }
        @CustomType.Setter
        public Builder sslmode(@Nullable String sslmode) {

            this.sslmode = sslmode;
            return this;
        }
        @CustomType.Setter
        public Builder standbyUris(@Nullable List<String> standbyUris) {

            this.standbyUris = standbyUris;
            return this;
        }
        public Builder standbyUris(String... standbyUris) {
            return standbyUris(List.of(standbyUris));
        }
        @CustomType.Setter
        public Builder syncingUris(@Nullable List<String> syncingUris) {

            this.syncingUris = syncingUris;
            return this;
        }
        public Builder syncingUris(String... syncingUris) {
            return syncingUris(List.of(syncingUris));
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {

            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder uris(@Nullable List<String> uris) {

            this.uris = uris;
            return this;
        }
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {

            this.user = user;
            return this;
        }
        public AlloydbomniAlloydbomni build() {
            final var _resultValue = new AlloydbomniAlloydbomni();
            _resultValue.bouncer = bouncer;
            _resultValue.dbname = dbname;
            _resultValue.host = host;
            _resultValue.maxConnections = maxConnections;
            _resultValue.params = params;
            _resultValue.password = password;
            _resultValue.port = port;
            _resultValue.replicaUri = replicaUri;
            _resultValue.sslmode = sslmode;
            _resultValue.standbyUris = standbyUris;
            _resultValue.syncingUris = syncingUris;
            _resultValue.uri = uri;
            _resultValue.uris = uris;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
