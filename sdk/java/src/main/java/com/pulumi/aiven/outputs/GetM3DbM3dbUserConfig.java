// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetM3DbM3dbUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.GetM3DbM3dbUserConfigLimits;
import com.pulumi.aiven.outputs.GetM3DbM3dbUserConfigM3;
import com.pulumi.aiven.outputs.GetM3DbM3dbUserConfigNamespace;
import com.pulumi.aiven.outputs.GetM3DbM3dbUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GetM3DbM3dbUserConfigPublicAccess;
import com.pulumi.aiven.outputs.GetM3DbM3dbUserConfigRules;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetM3DbM3dbUserConfig {
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    private @Nullable String additionalBackupRegions;
    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
     * 
     */
    private @Nullable String customDomain;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
     * 
     */
    private @Nullable List<GetM3DbM3dbUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return M3 limits
     * 
     */
    private @Nullable GetM3DbM3dbUserConfigLimits limits;
    /**
     * @return M3 specific configuration options
     * 
     */
    private @Nullable GetM3DbM3dbUserConfigM3 m3;
    /**
     * @return Enum: `1.1`, `1.2`, `1.5`. M3 major version (deprecated, use m3db_version).
     * 
     */
    private @Nullable String m3Version;
    /**
     * @return Enables access to Graphite Carbon plaintext metrics ingestion. It can be enabled only for services inside VPCs. The metrics are written to aggregated namespaces only.
     * 
     */
    private @Nullable Boolean m3coordinatorEnableGraphiteCarbonIngest;
    /**
     * @return Enum: `1.1`, `1.2`, `1.5`. M3 major version (the minimum compatible version).
     * 
     */
    private @Nullable String m3dbVersion;
    /**
     * @return List of M3 namespaces
     * 
     */
    private @Nullable List<GetM3DbM3dbUserConfigNamespace> namespaces;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private @Nullable GetM3DbM3dbUserConfigPrivateAccess privateAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable GetM3DbM3dbUserConfigPublicAccess publicAccess;
    /**
     * @return M3 rules
     * 
     */
    private @Nullable GetM3DbM3dbUserConfigRules rules;
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String serviceToForkFrom;
    /**
     * @return Use static public IP addresses.
     * 
     */
    private @Nullable Boolean staticIps;

    private GetM3DbM3dbUserConfig() {}
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
     * 
     */
    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
     * 
     */
    public List<GetM3DbM3dbUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return M3 limits
     * 
     */
    public Optional<GetM3DbM3dbUserConfigLimits> limits() {
        return Optional.ofNullable(this.limits);
    }
    /**
     * @return M3 specific configuration options
     * 
     */
    public Optional<GetM3DbM3dbUserConfigM3> m3() {
        return Optional.ofNullable(this.m3);
    }
    /**
     * @return Enum: `1.1`, `1.2`, `1.5`. M3 major version (deprecated, use m3db_version).
     * 
     */
    public Optional<String> m3Version() {
        return Optional.ofNullable(this.m3Version);
    }
    /**
     * @return Enables access to Graphite Carbon plaintext metrics ingestion. It can be enabled only for services inside VPCs. The metrics are written to aggregated namespaces only.
     * 
     */
    public Optional<Boolean> m3coordinatorEnableGraphiteCarbonIngest() {
        return Optional.ofNullable(this.m3coordinatorEnableGraphiteCarbonIngest);
    }
    /**
     * @return Enum: `1.1`, `1.2`, `1.5`. M3 major version (the minimum compatible version).
     * 
     */
    public Optional<String> m3dbVersion() {
        return Optional.ofNullable(this.m3dbVersion);
    }
    /**
     * @return List of M3 namespaces
     * 
     */
    public List<GetM3DbM3dbUserConfigNamespace> namespaces() {
        return this.namespaces == null ? List.of() : this.namespaces;
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<GetM3DbM3dbUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<GetM3DbM3dbUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return M3 rules
     * 
     */
    public Optional<GetM3DbM3dbUserConfigRules> rules() {
        return Optional.ofNullable(this.rules);
    }
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetM3DbM3dbUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable String customDomain;
        private @Nullable List<GetM3DbM3dbUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable GetM3DbM3dbUserConfigLimits limits;
        private @Nullable GetM3DbM3dbUserConfigM3 m3;
        private @Nullable String m3Version;
        private @Nullable Boolean m3coordinatorEnableGraphiteCarbonIngest;
        private @Nullable String m3dbVersion;
        private @Nullable List<GetM3DbM3dbUserConfigNamespace> namespaces;
        private @Nullable GetM3DbM3dbUserConfigPrivateAccess privateAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable GetM3DbM3dbUserConfigPublicAccess publicAccess;
        private @Nullable GetM3DbM3dbUserConfigRules rules;
        private @Nullable Boolean serviceLog;
        private @Nullable String serviceToForkFrom;
        private @Nullable Boolean staticIps;
        public Builder() {}
        public Builder(GetM3DbM3dbUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.customDomain = defaults.customDomain;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.limits = defaults.limits;
    	      this.m3 = defaults.m3;
    	      this.m3Version = defaults.m3Version;
    	      this.m3coordinatorEnableGraphiteCarbonIngest = defaults.m3coordinatorEnableGraphiteCarbonIngest;
    	      this.m3dbVersion = defaults.m3dbVersion;
    	      this.namespaces = defaults.namespaces;
    	      this.privateAccess = defaults.privateAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.rules = defaults.rules;
    	      this.serviceLog = defaults.serviceLog;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {

            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder customDomain(@Nullable String customDomain) {

            this.customDomain = customDomain;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<GetM3DbM3dbUserConfigIpFilterObject> ipFilterObjects) {

            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(GetM3DbM3dbUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {

            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder limits(@Nullable GetM3DbM3dbUserConfigLimits limits) {

            this.limits = limits;
            return this;
        }
        @CustomType.Setter
        public Builder m3(@Nullable GetM3DbM3dbUserConfigM3 m3) {

            this.m3 = m3;
            return this;
        }
        @CustomType.Setter
        public Builder m3Version(@Nullable String m3Version) {

            this.m3Version = m3Version;
            return this;
        }
        @CustomType.Setter
        public Builder m3coordinatorEnableGraphiteCarbonIngest(@Nullable Boolean m3coordinatorEnableGraphiteCarbonIngest) {

            this.m3coordinatorEnableGraphiteCarbonIngest = m3coordinatorEnableGraphiteCarbonIngest;
            return this;
        }
        @CustomType.Setter
        public Builder m3dbVersion(@Nullable String m3dbVersion) {

            this.m3dbVersion = m3dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder namespaces(@Nullable List<GetM3DbM3dbUserConfigNamespace> namespaces) {

            this.namespaces = namespaces;
            return this;
        }
        public Builder namespaces(GetM3DbM3dbUserConfigNamespace... namespaces) {
            return namespaces(List.of(namespaces));
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable GetM3DbM3dbUserConfigPrivateAccess privateAccess) {

            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {

            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable GetM3DbM3dbUserConfigPublicAccess publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder rules(@Nullable GetM3DbM3dbUserConfigRules rules) {

            this.rules = rules;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {

            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {

            this.staticIps = staticIps;
            return this;
        }
        public GetM3DbM3dbUserConfig build() {
            final var _resultValue = new GetM3DbM3dbUserConfig();
            _resultValue.additionalBackupRegions = additionalBackupRegions;
            _resultValue.customDomain = customDomain;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.limits = limits;
            _resultValue.m3 = m3;
            _resultValue.m3Version = m3Version;
            _resultValue.m3coordinatorEnableGraphiteCarbonIngest = m3coordinatorEnableGraphiteCarbonIngest;
            _resultValue.m3dbVersion = m3dbVersion;
            _resultValue.namespaces = namespaces;
            _resultValue.privateAccess = privateAccess;
            _resultValue.projectToForkFrom = projectToForkFrom;
            _resultValue.publicAccess = publicAccess;
            _resultValue.rules = rules;
            _resultValue.serviceLog = serviceLog;
            _resultValue.serviceToForkFrom = serviceToForkFrom;
            _resultValue.staticIps = staticIps;
            return _resultValue;
        }
    }
}
