// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigIndexPattern;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigIndexTemplate;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigOpenid;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigOpensearch;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigOpensearchDashboards;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigPublicAccess;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigSaml;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OpenSearchOpensearchUserConfig {
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    private @Nullable String additionalBackupRegions;
    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
     * 
     */
    private @Nullable String customDomain;
    /**
     * @return Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.
     * 
     */
    private @Nullable Boolean disableReplicationFactorAdjustment;
    /**
     * @return Index patterns
     * 
     */
    private @Nullable List<OpenSearchOpensearchUserConfigIndexPattern> indexPatterns;
    /**
     * @return Template settings for all new indexes
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigIndexTemplate indexTemplate;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
     * 
     */
    private @Nullable List<OpenSearchOpensearchUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    private @Nullable Boolean keepIndexRefreshInterval;
    /**
     * @return Use index_patterns instead. The default value is `0`.
     * 
     */
    private @Nullable Integer maxIndexCount;
    /**
     * @return OpenSearch OpenID Connect Configuration
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigOpenid openid;
    /**
     * @return OpenSearch settings
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigOpensearch opensearch;
    /**
     * @return OpenSearch Dashboards settings
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigOpensearchDashboards opensearchDashboards;
    /**
     * @return Enum: `1`, `2`. OpenSearch major version.
     * 
     */
    private @Nullable String opensearchVersion;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigPublicAccess publicAccess;
    /**
     * @return Name of the basebackup to restore in forked service.
     * 
     */
    private @Nullable String recoveryBasebackupName;
    /**
     * @return OpenSearch SAML configuration
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigSaml saml;
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String serviceToForkFrom;
    /**
     * @return Use static public IP addresses.
     * 
     */
    private @Nullable Boolean staticIps;

    private OpenSearchOpensearchUserConfig() {}
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    /**
     * @return Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
     * 
     */
    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    /**
     * @return Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.
     * 
     */
    public Optional<Boolean> disableReplicationFactorAdjustment() {
        return Optional.ofNullable(this.disableReplicationFactorAdjustment);
    }
    /**
     * @return Index patterns
     * 
     */
    public List<OpenSearchOpensearchUserConfigIndexPattern> indexPatterns() {
        return this.indexPatterns == null ? List.of() : this.indexPatterns;
    }
    /**
     * @return Template settings for all new indexes
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigIndexTemplate> indexTemplate() {
        return Optional.ofNullable(this.indexTemplate);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
     * 
     */
    public List<OpenSearchOpensearchUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    public Optional<Boolean> keepIndexRefreshInterval() {
        return Optional.ofNullable(this.keepIndexRefreshInterval);
    }
    /**
     * @return Use index_patterns instead. The default value is `0`.
     * 
     */
    public Optional<Integer> maxIndexCount() {
        return Optional.ofNullable(this.maxIndexCount);
    }
    /**
     * @return OpenSearch OpenID Connect Configuration
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigOpenid> openid() {
        return Optional.ofNullable(this.openid);
    }
    /**
     * @return OpenSearch settings
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigOpensearch> opensearch() {
        return Optional.ofNullable(this.opensearch);
    }
    /**
     * @return OpenSearch Dashboards settings
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigOpensearchDashboards> opensearchDashboards() {
        return Optional.ofNullable(this.opensearchDashboards);
    }
    /**
     * @return Enum: `1`, `2`. OpenSearch major version.
     * 
     */
    public Optional<String> opensearchVersion() {
        return Optional.ofNullable(this.opensearchVersion);
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Name of the basebackup to restore in forked service.
     * 
     */
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    /**
     * @return OpenSearch SAML configuration
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigSaml> saml() {
        return Optional.ofNullable(this.saml);
    }
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenSearchOpensearchUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable String customDomain;
        private @Nullable Boolean disableReplicationFactorAdjustment;
        private @Nullable List<OpenSearchOpensearchUserConfigIndexPattern> indexPatterns;
        private @Nullable OpenSearchOpensearchUserConfigIndexTemplate indexTemplate;
        private @Nullable List<OpenSearchOpensearchUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable Boolean keepIndexRefreshInterval;
        private @Nullable Integer maxIndexCount;
        private @Nullable OpenSearchOpensearchUserConfigOpenid openid;
        private @Nullable OpenSearchOpensearchUserConfigOpensearch opensearch;
        private @Nullable OpenSearchOpensearchUserConfigOpensearchDashboards opensearchDashboards;
        private @Nullable String opensearchVersion;
        private @Nullable OpenSearchOpensearchUserConfigPrivateAccess privateAccess;
        private @Nullable OpenSearchOpensearchUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable OpenSearchOpensearchUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable OpenSearchOpensearchUserConfigSaml saml;
        private @Nullable Boolean serviceLog;
        private @Nullable String serviceToForkFrom;
        private @Nullable Boolean staticIps;
        public Builder() {}
        public Builder(OpenSearchOpensearchUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.customDomain = defaults.customDomain;
    	      this.disableReplicationFactorAdjustment = defaults.disableReplicationFactorAdjustment;
    	      this.indexPatterns = defaults.indexPatterns;
    	      this.indexTemplate = defaults.indexTemplate;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.keepIndexRefreshInterval = defaults.keepIndexRefreshInterval;
    	      this.maxIndexCount = defaults.maxIndexCount;
    	      this.openid = defaults.openid;
    	      this.opensearch = defaults.opensearch;
    	      this.opensearchDashboards = defaults.opensearchDashboards;
    	      this.opensearchVersion = defaults.opensearchVersion;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.saml = defaults.saml;
    	      this.serviceLog = defaults.serviceLog;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {

            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder customDomain(@Nullable String customDomain) {

            this.customDomain = customDomain;
            return this;
        }
        @CustomType.Setter
        public Builder disableReplicationFactorAdjustment(@Nullable Boolean disableReplicationFactorAdjustment) {

            this.disableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            return this;
        }
        @CustomType.Setter
        public Builder indexPatterns(@Nullable List<OpenSearchOpensearchUserConfigIndexPattern> indexPatterns) {

            this.indexPatterns = indexPatterns;
            return this;
        }
        public Builder indexPatterns(OpenSearchOpensearchUserConfigIndexPattern... indexPatterns) {
            return indexPatterns(List.of(indexPatterns));
        }
        @CustomType.Setter
        public Builder indexTemplate(@Nullable OpenSearchOpensearchUserConfigIndexTemplate indexTemplate) {

            this.indexTemplate = indexTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<OpenSearchOpensearchUserConfigIpFilterObject> ipFilterObjects) {

            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(OpenSearchOpensearchUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {

            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder keepIndexRefreshInterval(@Nullable Boolean keepIndexRefreshInterval) {

            this.keepIndexRefreshInterval = keepIndexRefreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder maxIndexCount(@Nullable Integer maxIndexCount) {

            this.maxIndexCount = maxIndexCount;
            return this;
        }
        @CustomType.Setter
        public Builder openid(@Nullable OpenSearchOpensearchUserConfigOpenid openid) {

            this.openid = openid;
            return this;
        }
        @CustomType.Setter
        public Builder opensearch(@Nullable OpenSearchOpensearchUserConfigOpensearch opensearch) {

            this.opensearch = opensearch;
            return this;
        }
        @CustomType.Setter
        public Builder opensearchDashboards(@Nullable OpenSearchOpensearchUserConfigOpensearchDashboards opensearchDashboards) {

            this.opensearchDashboards = opensearchDashboards;
            return this;
        }
        @CustomType.Setter
        public Builder opensearchVersion(@Nullable String opensearchVersion) {

            this.opensearchVersion = opensearchVersion;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable OpenSearchOpensearchUserConfigPrivateAccess privateAccess) {

            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable OpenSearchOpensearchUserConfigPrivatelinkAccess privatelinkAccess) {

            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {

            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable OpenSearchOpensearchUserConfigPublicAccess publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {

            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        @CustomType.Setter
        public Builder saml(@Nullable OpenSearchOpensearchUserConfigSaml saml) {

            this.saml = saml;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {

            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {

            this.staticIps = staticIps;
            return this;
        }
        public OpenSearchOpensearchUserConfig build() {
            final var _resultValue = new OpenSearchOpensearchUserConfig();
            _resultValue.additionalBackupRegions = additionalBackupRegions;
            _resultValue.customDomain = customDomain;
            _resultValue.disableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            _resultValue.indexPatterns = indexPatterns;
            _resultValue.indexTemplate = indexTemplate;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.keepIndexRefreshInterval = keepIndexRefreshInterval;
            _resultValue.maxIndexCount = maxIndexCount;
            _resultValue.openid = openid;
            _resultValue.opensearch = opensearch;
            _resultValue.opensearchDashboards = opensearchDashboards;
            _resultValue.opensearchVersion = opensearchVersion;
            _resultValue.privateAccess = privateAccess;
            _resultValue.privatelinkAccess = privatelinkAccess;
            _resultValue.projectToForkFrom = projectToForkFrom;
            _resultValue.publicAccess = publicAccess;
            _resultValue.recoveryBasebackupName = recoveryBasebackupName;
            _resultValue.saml = saml;
            _resultValue.serviceLog = serviceLog;
            _resultValue.serviceToForkFrom = serviceToForkFrom;
            _resultValue.staticIps = staticIps;
            return _resultValue;
        }
    }
}
