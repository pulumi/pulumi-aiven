// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigIndexPattern;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigIndexTemplate;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigOpensearch;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigOpensearchDashboards;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.OpenSearchOpensearchUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OpenSearchOpensearchUserConfig {
    /**
     * @return Custom domain
     * 
     */
    private @Nullable String customDomain;
    /**
     * @return Disable replication factor adjustment
     * 
     */
    private @Nullable String disableReplicationFactorAdjustment;
    /**
     * @return Index patterns
     * 
     */
    private @Nullable List<OpenSearchOpensearchUserConfigIndexPattern> indexPatterns;
    /**
     * @return Template settings for all new indexes
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigIndexTemplate indexTemplate;
    /**
     * @return IP filter
     * 
     */
    private @Nullable List<String> ipFilters;
    /**
     * @return Don&#39;t reset index.refresh_interval to the default value
     * 
     */
    private @Nullable String keepIndexRefreshInterval;
    /**
     * @return Maximum index count
     * 
     */
    private @Nullable String maxIndexCount;
    /**
     * @return OpenSearch settings
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigOpensearch opensearch;
    /**
     * @return OpenSearch Dashboards settings
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigOpensearchDashboards opensearchDashboards;
    /**
     * @return OpenSearch major version
     * 
     */
    private @Nullable String opensearchVersion;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable OpenSearchOpensearchUserConfigPublicAccess publicAccess;
    /**
     * @return Name of the basebackup to restore in forked service
     * 
     */
    private @Nullable String recoveryBasebackupName;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String serviceToForkFrom;
    /**
     * @return Static IP addresses
     * 
     */
    private @Nullable String staticIps;

    private OpenSearchOpensearchUserConfig() {}
    /**
     * @return Custom domain
     * 
     */
    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    /**
     * @return Disable replication factor adjustment
     * 
     */
    public Optional<String> disableReplicationFactorAdjustment() {
        return Optional.ofNullable(this.disableReplicationFactorAdjustment);
    }
    /**
     * @return Index patterns
     * 
     */
    public List<OpenSearchOpensearchUserConfigIndexPattern> indexPatterns() {
        return this.indexPatterns == null ? List.of() : this.indexPatterns;
    }
    /**
     * @return Template settings for all new indexes
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigIndexTemplate> indexTemplate() {
        return Optional.ofNullable(this.indexTemplate);
    }
    /**
     * @return IP filter
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Don&#39;t reset index.refresh_interval to the default value
     * 
     */
    public Optional<String> keepIndexRefreshInterval() {
        return Optional.ofNullable(this.keepIndexRefreshInterval);
    }
    /**
     * @return Maximum index count
     * 
     */
    public Optional<String> maxIndexCount() {
        return Optional.ofNullable(this.maxIndexCount);
    }
    /**
     * @return OpenSearch settings
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigOpensearch> opensearch() {
        return Optional.ofNullable(this.opensearch);
    }
    /**
     * @return OpenSearch Dashboards settings
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigOpensearchDashboards> opensearchDashboards() {
        return Optional.ofNullable(this.opensearchDashboards);
    }
    /**
     * @return OpenSearch major version
     * 
     */
    public Optional<String> opensearchVersion() {
        return Optional.ofNullable(this.opensearchVersion);
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<OpenSearchOpensearchUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Name of the basebackup to restore in forked service
     * 
     */
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Static IP addresses
     * 
     */
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenSearchOpensearchUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String customDomain;
        private @Nullable String disableReplicationFactorAdjustment;
        private @Nullable List<OpenSearchOpensearchUserConfigIndexPattern> indexPatterns;
        private @Nullable OpenSearchOpensearchUserConfigIndexTemplate indexTemplate;
        private @Nullable List<String> ipFilters;
        private @Nullable String keepIndexRefreshInterval;
        private @Nullable String maxIndexCount;
        private @Nullable OpenSearchOpensearchUserConfigOpensearch opensearch;
        private @Nullable OpenSearchOpensearchUserConfigOpensearchDashboards opensearchDashboards;
        private @Nullable String opensearchVersion;
        private @Nullable OpenSearchOpensearchUserConfigPrivateAccess privateAccess;
        private @Nullable OpenSearchOpensearchUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable OpenSearchOpensearchUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable String serviceToForkFrom;
        private @Nullable String staticIps;
        public Builder() {}
        public Builder(OpenSearchOpensearchUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customDomain = defaults.customDomain;
    	      this.disableReplicationFactorAdjustment = defaults.disableReplicationFactorAdjustment;
    	      this.indexPatterns = defaults.indexPatterns;
    	      this.indexTemplate = defaults.indexTemplate;
    	      this.ipFilters = defaults.ipFilters;
    	      this.keepIndexRefreshInterval = defaults.keepIndexRefreshInterval;
    	      this.maxIndexCount = defaults.maxIndexCount;
    	      this.opensearch = defaults.opensearch;
    	      this.opensearchDashboards = defaults.opensearchDashboards;
    	      this.opensearchVersion = defaults.opensearchVersion;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder customDomain(@Nullable String customDomain) {
            this.customDomain = customDomain;
            return this;
        }
        @CustomType.Setter
        public Builder disableReplicationFactorAdjustment(@Nullable String disableReplicationFactorAdjustment) {
            this.disableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            return this;
        }
        @CustomType.Setter
        public Builder indexPatterns(@Nullable List<OpenSearchOpensearchUserConfigIndexPattern> indexPatterns) {
            this.indexPatterns = indexPatterns;
            return this;
        }
        public Builder indexPatterns(OpenSearchOpensearchUserConfigIndexPattern... indexPatterns) {
            return indexPatterns(List.of(indexPatterns));
        }
        @CustomType.Setter
        public Builder indexTemplate(@Nullable OpenSearchOpensearchUserConfigIndexTemplate indexTemplate) {
            this.indexTemplate = indexTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder keepIndexRefreshInterval(@Nullable String keepIndexRefreshInterval) {
            this.keepIndexRefreshInterval = keepIndexRefreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder maxIndexCount(@Nullable String maxIndexCount) {
            this.maxIndexCount = maxIndexCount;
            return this;
        }
        @CustomType.Setter
        public Builder opensearch(@Nullable OpenSearchOpensearchUserConfigOpensearch opensearch) {
            this.opensearch = opensearch;
            return this;
        }
        @CustomType.Setter
        public Builder opensearchDashboards(@Nullable OpenSearchOpensearchUserConfigOpensearchDashboards opensearchDashboards) {
            this.opensearchDashboards = opensearchDashboards;
            return this;
        }
        @CustomType.Setter
        public Builder opensearchVersion(@Nullable String opensearchVersion) {
            this.opensearchVersion = opensearchVersion;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable OpenSearchOpensearchUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable OpenSearchOpensearchUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable OpenSearchOpensearchUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {
            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }
        public OpenSearchOpensearchUserConfig build() {
            final var o = new OpenSearchOpensearchUserConfig();
            o.customDomain = customDomain;
            o.disableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            o.indexPatterns = indexPatterns;
            o.indexTemplate = indexTemplate;
            o.ipFilters = ipFilters;
            o.keepIndexRefreshInterval = keepIndexRefreshInterval;
            o.maxIndexCount = maxIndexCount;
            o.opensearch = opensearch;
            o.opensearchDashboards = opensearchDashboards;
            o.opensearchVersion = opensearchVersion;
            o.privateAccess = privateAccess;
            o.privatelinkAccess = privatelinkAccess;
            o.projectToForkFrom = projectToForkFrom;
            o.publicAccess = publicAccess;
            o.recoveryBasebackupName = recoveryBasebackupName;
            o.serviceToForkFrom = serviceToForkFrom;
            o.staticIps = staticIps;
            return o;
        }
    }
}
