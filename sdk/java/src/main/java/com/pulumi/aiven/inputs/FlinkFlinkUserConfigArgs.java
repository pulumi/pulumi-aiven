// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.FlinkFlinkUserConfigPrivatelinkAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkFlinkUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlinkFlinkUserConfigArgs Empty = new FlinkFlinkUserConfigArgs();

    @Import(name="executionCheckpointingIntervalMs")
    private @Nullable Output<String> executionCheckpointingIntervalMs;

    public Optional<Output<String>> executionCheckpointingIntervalMs() {
        return Optional.ofNullable(this.executionCheckpointingIntervalMs);
    }

    @Import(name="executionCheckpointingTimeoutMs")
    private @Nullable Output<String> executionCheckpointingTimeoutMs;

    public Optional<Output<String>> executionCheckpointingTimeoutMs() {
        return Optional.ofNullable(this.executionCheckpointingTimeoutMs);
    }

    @Import(name="flinkVersion")
    private @Nullable Output<String> flinkVersion;

    public Optional<Output<String>> flinkVersion() {
        return Optional.ofNullable(this.flinkVersion);
    }

    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    @Import(name="numberOfTaskSlots")
    private @Nullable Output<String> numberOfTaskSlots;

    public Optional<Output<String>> numberOfTaskSlots() {
        return Optional.ofNullable(this.numberOfTaskSlots);
    }

    @Import(name="parallelismDefault")
    private @Nullable Output<String> parallelismDefault;

    public Optional<Output<String>> parallelismDefault() {
        return Optional.ofNullable(this.parallelismDefault);
    }

    @Import(name="privatelinkAccess")
    private @Nullable Output<FlinkFlinkUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    public Optional<Output<FlinkFlinkUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    @Import(name="restartStrategy")
    private @Nullable Output<String> restartStrategy;

    public Optional<Output<String>> restartStrategy() {
        return Optional.ofNullable(this.restartStrategy);
    }

    @Import(name="restartStrategyDelaySec")
    private @Nullable Output<String> restartStrategyDelaySec;

    public Optional<Output<String>> restartStrategyDelaySec() {
        return Optional.ofNullable(this.restartStrategyDelaySec);
    }

    @Import(name="restartStrategyFailureRateIntervalMin")
    private @Nullable Output<String> restartStrategyFailureRateIntervalMin;

    public Optional<Output<String>> restartStrategyFailureRateIntervalMin() {
        return Optional.ofNullable(this.restartStrategyFailureRateIntervalMin);
    }

    @Import(name="restartStrategyMaxFailures")
    private @Nullable Output<String> restartStrategyMaxFailures;

    public Optional<Output<String>> restartStrategyMaxFailures() {
        return Optional.ofNullable(this.restartStrategyMaxFailures);
    }

    private FlinkFlinkUserConfigArgs() {}

    private FlinkFlinkUserConfigArgs(FlinkFlinkUserConfigArgs $) {
        this.executionCheckpointingIntervalMs = $.executionCheckpointingIntervalMs;
        this.executionCheckpointingTimeoutMs = $.executionCheckpointingTimeoutMs;
        this.flinkVersion = $.flinkVersion;
        this.ipFilters = $.ipFilters;
        this.numberOfTaskSlots = $.numberOfTaskSlots;
        this.parallelismDefault = $.parallelismDefault;
        this.privatelinkAccess = $.privatelinkAccess;
        this.restartStrategy = $.restartStrategy;
        this.restartStrategyDelaySec = $.restartStrategyDelaySec;
        this.restartStrategyFailureRateIntervalMin = $.restartStrategyFailureRateIntervalMin;
        this.restartStrategyMaxFailures = $.restartStrategyMaxFailures;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkFlinkUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkFlinkUserConfigArgs $;

        public Builder() {
            $ = new FlinkFlinkUserConfigArgs();
        }

        public Builder(FlinkFlinkUserConfigArgs defaults) {
            $ = new FlinkFlinkUserConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder executionCheckpointingIntervalMs(@Nullable Output<String> executionCheckpointingIntervalMs) {
            $.executionCheckpointingIntervalMs = executionCheckpointingIntervalMs;
            return this;
        }

        public Builder executionCheckpointingIntervalMs(String executionCheckpointingIntervalMs) {
            return executionCheckpointingIntervalMs(Output.of(executionCheckpointingIntervalMs));
        }

        public Builder executionCheckpointingTimeoutMs(@Nullable Output<String> executionCheckpointingTimeoutMs) {
            $.executionCheckpointingTimeoutMs = executionCheckpointingTimeoutMs;
            return this;
        }

        public Builder executionCheckpointingTimeoutMs(String executionCheckpointingTimeoutMs) {
            return executionCheckpointingTimeoutMs(Output.of(executionCheckpointingTimeoutMs));
        }

        public Builder flinkVersion(@Nullable Output<String> flinkVersion) {
            $.flinkVersion = flinkVersion;
            return this;
        }

        public Builder flinkVersion(String flinkVersion) {
            return flinkVersion(Output.of(flinkVersion));
        }

        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        public Builder numberOfTaskSlots(@Nullable Output<String> numberOfTaskSlots) {
            $.numberOfTaskSlots = numberOfTaskSlots;
            return this;
        }

        public Builder numberOfTaskSlots(String numberOfTaskSlots) {
            return numberOfTaskSlots(Output.of(numberOfTaskSlots));
        }

        public Builder parallelismDefault(@Nullable Output<String> parallelismDefault) {
            $.parallelismDefault = parallelismDefault;
            return this;
        }

        public Builder parallelismDefault(String parallelismDefault) {
            return parallelismDefault(Output.of(parallelismDefault));
        }

        public Builder privatelinkAccess(@Nullable Output<FlinkFlinkUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        public Builder privatelinkAccess(FlinkFlinkUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        public Builder restartStrategy(@Nullable Output<String> restartStrategy) {
            $.restartStrategy = restartStrategy;
            return this;
        }

        public Builder restartStrategy(String restartStrategy) {
            return restartStrategy(Output.of(restartStrategy));
        }

        public Builder restartStrategyDelaySec(@Nullable Output<String> restartStrategyDelaySec) {
            $.restartStrategyDelaySec = restartStrategyDelaySec;
            return this;
        }

        public Builder restartStrategyDelaySec(String restartStrategyDelaySec) {
            return restartStrategyDelaySec(Output.of(restartStrategyDelaySec));
        }

        public Builder restartStrategyFailureRateIntervalMin(@Nullable Output<String> restartStrategyFailureRateIntervalMin) {
            $.restartStrategyFailureRateIntervalMin = restartStrategyFailureRateIntervalMin;
            return this;
        }

        public Builder restartStrategyFailureRateIntervalMin(String restartStrategyFailureRateIntervalMin) {
            return restartStrategyFailureRateIntervalMin(Output.of(restartStrategyFailureRateIntervalMin));
        }

        public Builder restartStrategyMaxFailures(@Nullable Output<String> restartStrategyMaxFailures) {
            $.restartStrategyMaxFailures = restartStrategyMaxFailures;
            return this;
        }

        public Builder restartStrategyMaxFailures(String restartStrategyMaxFailures) {
            return restartStrategyMaxFailures(Output.of(restartStrategyMaxFailures));
        }

        public FlinkFlinkUserConfigArgs build() {
            return $;
        }
    }

}
