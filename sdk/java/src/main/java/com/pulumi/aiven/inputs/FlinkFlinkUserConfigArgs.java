// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.FlinkFlinkUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.FlinkFlinkUserConfigPrivatelinkAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkFlinkUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlinkFlinkUserConfigArgs Empty = new FlinkFlinkUserConfigArgs();

    /**
     * Flink major version.
     * 
     */
    @Import(name="flinkVersion")
    private @Nullable Output<String> flinkVersion;

    /**
     * @return Flink major version.
     * 
     */
    public Optional<Output<String>> flinkVersion() {
        return Optional.ofNullable(this.flinkVersion);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    @Import(name="ipFilterObjects")
    private @Nullable Output<List<FlinkFlinkUserConfigIpFilterObjectArgs>> ipFilterObjects;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public Optional<Output<List<FlinkFlinkUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Task slots per node. For a 3 node plan, total number of task slots is 3x this value.
     * 
     */
    @Import(name="numberOfTaskSlots")
    private @Nullable Output<Integer> numberOfTaskSlots;

    /**
     * @return Task slots per node. For a 3 node plan, total number of task slots is 3x this value.
     * 
     */
    public Optional<Output<Integer>> numberOfTaskSlots() {
        return Optional.ofNullable(this.numberOfTaskSlots);
    }

    /**
     * Allow access to selected service components through Privatelink.
     * 
     */
    @Import(name="privatelinkAccess")
    private @Nullable Output<FlinkFlinkUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    /**
     * @return Allow access to selected service components through Privatelink.
     * 
     */
    public Optional<Output<FlinkFlinkUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    private FlinkFlinkUserConfigArgs() {}

    private FlinkFlinkUserConfigArgs(FlinkFlinkUserConfigArgs $) {
        this.flinkVersion = $.flinkVersion;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilters = $.ipFilters;
        this.numberOfTaskSlots = $.numberOfTaskSlots;
        this.privatelinkAccess = $.privatelinkAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkFlinkUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkFlinkUserConfigArgs $;

        public Builder() {
            $ = new FlinkFlinkUserConfigArgs();
        }

        public Builder(FlinkFlinkUserConfigArgs defaults) {
            $ = new FlinkFlinkUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param flinkVersion Flink major version.
         * 
         * @return builder
         * 
         */
        public Builder flinkVersion(@Nullable Output<String> flinkVersion) {
            $.flinkVersion = flinkVersion;
            return this;
        }

        /**
         * @param flinkVersion Flink major version.
         * 
         * @return builder
         * 
         */
        public Builder flinkVersion(String flinkVersion) {
            return flinkVersion(Output.of(flinkVersion));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(@Nullable Output<List<FlinkFlinkUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(List<FlinkFlinkUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(FlinkFlinkUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param numberOfTaskSlots Task slots per node. For a 3 node plan, total number of task slots is 3x this value.
         * 
         * @return builder
         * 
         */
        public Builder numberOfTaskSlots(@Nullable Output<Integer> numberOfTaskSlots) {
            $.numberOfTaskSlots = numberOfTaskSlots;
            return this;
        }

        /**
         * @param numberOfTaskSlots Task slots per node. For a 3 node plan, total number of task slots is 3x this value.
         * 
         * @return builder
         * 
         */
        public Builder numberOfTaskSlots(Integer numberOfTaskSlots) {
            return numberOfTaskSlots(Output.of(numberOfTaskSlots));
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink.
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(@Nullable Output<FlinkFlinkUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink.
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(FlinkFlinkUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        public FlinkFlinkUserConfigArgs build() {
            return $;
        }
    }

}
