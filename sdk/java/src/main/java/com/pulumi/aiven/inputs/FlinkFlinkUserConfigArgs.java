// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.FlinkFlinkUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.FlinkFlinkUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.FlinkFlinkUserConfigPublicAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkFlinkUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlinkFlinkUserConfigArgs Empty = new FlinkFlinkUserConfigArgs();

    /**
     * Additional Cloud Regions for Backup Replication.
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    @Import(name="additionalBackupRegions")
    private @Nullable Output<String> additionalBackupRegions;

    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     * @deprecated
     * This property is deprecated.
     * 
     */
    @Deprecated /* This property is deprecated. */
    public Optional<Output<String>> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }

    /**
     * Enable to upload Custom JARs for Flink applications.
     * 
     */
    @Import(name="customCode")
    private @Nullable Output<Boolean> customCode;

    /**
     * @return Enable to upload Custom JARs for Flink applications.
     * 
     */
    public Optional<Output<Boolean>> customCode() {
        return Optional.ofNullable(this.customCode);
    }

    /**
     * Enum: `1.16`, `1.19`, `1.20`, and newer. Flink major version.
     * 
     */
    @Import(name="flinkVersion")
    private @Nullable Output<String> flinkVersion;

    /**
     * @return Enum: `1.16`, `1.19`, `1.20`, and newer. Flink major version.
     * 
     */
    public Optional<Output<String>> flinkVersion() {
        return Optional.ofNullable(this.flinkVersion);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    @Import(name="ipFilterObjects")
    private @Nullable Output<List<FlinkFlinkUserConfigIpFilterObjectArgs>> ipFilterObjects;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public Optional<Output<List<FlinkFlinkUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Task slots per node. For a 3 node plan, total number of task slots is 3x this value. Example: `1`.
     * 
     */
    @Import(name="numberOfTaskSlots")
    private @Nullable Output<Integer> numberOfTaskSlots;

    /**
     * @return Task slots per node. For a 3 node plan, total number of task slots is 3x this value. Example: `1`.
     * 
     */
    public Optional<Output<Integer>> numberOfTaskSlots() {
        return Optional.ofNullable(this.numberOfTaskSlots);
    }

    /**
     * Timeout in seconds used for all futures and blocking Pekko requests. Example: `10`.
     * 
     */
    @Import(name="pekkoAskTimeoutS")
    private @Nullable Output<Integer> pekkoAskTimeoutS;

    /**
     * @return Timeout in seconds used for all futures and blocking Pekko requests. Example: `10`.
     * 
     */
    public Optional<Output<Integer>> pekkoAskTimeoutS() {
        return Optional.ofNullable(this.pekkoAskTimeoutS);
    }

    /**
     * Maximum size in bytes for messages exchanged between the JobManager and the TaskManagers.
     * 
     */
    @Import(name="pekkoFramesizeB")
    private @Nullable Output<Integer> pekkoFramesizeB;

    /**
     * @return Maximum size in bytes for messages exchanged between the JobManager and the TaskManagers.
     * 
     */
    public Optional<Output<Integer>> pekkoFramesizeB() {
        return Optional.ofNullable(this.pekkoFramesizeB);
    }

    /**
     * Allow access to selected service components through Privatelink
     * 
     */
    @Import(name="privatelinkAccess")
    private @Nullable Output<FlinkFlinkUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<Output<FlinkFlinkUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    /**
     * Allow access to selected service ports from the public Internet
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<FlinkFlinkUserConfigPublicAccessArgs> publicAccess;

    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<Output<FlinkFlinkUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Use static public IP addresses.
     * 
     */
    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    private FlinkFlinkUserConfigArgs() {}

    private FlinkFlinkUserConfigArgs(FlinkFlinkUserConfigArgs $) {
        this.additionalBackupRegions = $.additionalBackupRegions;
        this.customCode = $.customCode;
        this.flinkVersion = $.flinkVersion;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.numberOfTaskSlots = $.numberOfTaskSlots;
        this.pekkoAskTimeoutS = $.pekkoAskTimeoutS;
        this.pekkoFramesizeB = $.pekkoFramesizeB;
        this.privatelinkAccess = $.privatelinkAccess;
        this.publicAccess = $.publicAccess;
        this.serviceLog = $.serviceLog;
        this.staticIps = $.staticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkFlinkUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkFlinkUserConfigArgs $;

        public Builder() {
            $ = new FlinkFlinkUserConfigArgs();
        }

        public Builder(FlinkFlinkUserConfigArgs defaults) {
            $ = new FlinkFlinkUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         * @deprecated
         * This property is deprecated.
         * 
         */
        @Deprecated /* This property is deprecated. */
        public Builder additionalBackupRegions(@Nullable Output<String> additionalBackupRegions) {
            $.additionalBackupRegions = additionalBackupRegions;
            return this;
        }

        /**
         * @param additionalBackupRegions Additional Cloud Regions for Backup Replication.
         * 
         * @return builder
         * 
         * @deprecated
         * This property is deprecated.
         * 
         */
        @Deprecated /* This property is deprecated. */
        public Builder additionalBackupRegions(String additionalBackupRegions) {
            return additionalBackupRegions(Output.of(additionalBackupRegions));
        }

        /**
         * @param customCode Enable to upload Custom JARs for Flink applications.
         * 
         * @return builder
         * 
         */
        public Builder customCode(@Nullable Output<Boolean> customCode) {
            $.customCode = customCode;
            return this;
        }

        /**
         * @param customCode Enable to upload Custom JARs for Flink applications.
         * 
         * @return builder
         * 
         */
        public Builder customCode(Boolean customCode) {
            return customCode(Output.of(customCode));
        }

        /**
         * @param flinkVersion Enum: `1.16`, `1.19`, `1.20`, and newer. Flink major version.
         * 
         * @return builder
         * 
         */
        public Builder flinkVersion(@Nullable Output<String> flinkVersion) {
            $.flinkVersion = flinkVersion;
            return this;
        }

        /**
         * @param flinkVersion Enum: `1.16`, `1.19`, `1.20`, and newer. Flink major version.
         * 
         * @return builder
         * 
         */
        public Builder flinkVersion(String flinkVersion) {
            return flinkVersion(Output.of(flinkVersion));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(@Nullable Output<List<FlinkFlinkUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(List<FlinkFlinkUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        /**
         * @param ipFilterObjects Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
         * 
         * @return builder
         * 
         */
        public Builder ipFilterObjects(FlinkFlinkUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        /**
         * @param ipFilterStrings Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         */
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Use `ip_filter_string` instead.
         * 
         */
        @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param numberOfTaskSlots Task slots per node. For a 3 node plan, total number of task slots is 3x this value. Example: `1`.
         * 
         * @return builder
         * 
         */
        public Builder numberOfTaskSlots(@Nullable Output<Integer> numberOfTaskSlots) {
            $.numberOfTaskSlots = numberOfTaskSlots;
            return this;
        }

        /**
         * @param numberOfTaskSlots Task slots per node. For a 3 node plan, total number of task slots is 3x this value. Example: `1`.
         * 
         * @return builder
         * 
         */
        public Builder numberOfTaskSlots(Integer numberOfTaskSlots) {
            return numberOfTaskSlots(Output.of(numberOfTaskSlots));
        }

        /**
         * @param pekkoAskTimeoutS Timeout in seconds used for all futures and blocking Pekko requests. Example: `10`.
         * 
         * @return builder
         * 
         */
        public Builder pekkoAskTimeoutS(@Nullable Output<Integer> pekkoAskTimeoutS) {
            $.pekkoAskTimeoutS = pekkoAskTimeoutS;
            return this;
        }

        /**
         * @param pekkoAskTimeoutS Timeout in seconds used for all futures and blocking Pekko requests. Example: `10`.
         * 
         * @return builder
         * 
         */
        public Builder pekkoAskTimeoutS(Integer pekkoAskTimeoutS) {
            return pekkoAskTimeoutS(Output.of(pekkoAskTimeoutS));
        }

        /**
         * @param pekkoFramesizeB Maximum size in bytes for messages exchanged between the JobManager and the TaskManagers.
         * 
         * @return builder
         * 
         */
        public Builder pekkoFramesizeB(@Nullable Output<Integer> pekkoFramesizeB) {
            $.pekkoFramesizeB = pekkoFramesizeB;
            return this;
        }

        /**
         * @param pekkoFramesizeB Maximum size in bytes for messages exchanged between the JobManager and the TaskManagers.
         * 
         * @return builder
         * 
         */
        public Builder pekkoFramesizeB(Integer pekkoFramesizeB) {
            return pekkoFramesizeB(Output.of(pekkoFramesizeB));
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(@Nullable Output<FlinkFlinkUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        /**
         * @param privatelinkAccess Allow access to selected service components through Privatelink
         * 
         * @return builder
         * 
         */
        public Builder privatelinkAccess(FlinkFlinkUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<FlinkFlinkUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Allow access to selected service ports from the public Internet
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(FlinkFlinkUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        /**
         * @param staticIps Use static public IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        public FlinkFlinkUserConfigArgs build() {
            return $;
        }
    }

}
