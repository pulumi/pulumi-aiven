// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven;

import com.pulumi.aiven.inputs.OrganizationUserGroupMemberTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationUserGroupMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationUserGroupMemberArgs Empty = new OrganizationUserGroupMemberArgs();

    /**
     * The ID of the user group.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The ID of the user group.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The ID of the organization.
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return The ID of the organization.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    @Import(name="timeouts")
    private @Nullable Output<OrganizationUserGroupMemberTimeoutsArgs> timeouts;

    public Optional<Output<OrganizationUserGroupMemberTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * The ID of the organization user or application user.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The ID of the organization user or application user.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private OrganizationUserGroupMemberArgs() {}

    private OrganizationUserGroupMemberArgs(OrganizationUserGroupMemberArgs $) {
        this.groupId = $.groupId;
        this.organizationId = $.organizationId;
        this.timeouts = $.timeouts;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationUserGroupMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationUserGroupMemberArgs $;

        public Builder() {
            $ = new OrganizationUserGroupMemberArgs();
        }

        public Builder(OrganizationUserGroupMemberArgs defaults) {
            $ = new OrganizationUserGroupMemberArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupId The ID of the user group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the user group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param organizationId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        public Builder timeouts(@Nullable Output<OrganizationUserGroupMemberTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(OrganizationUserGroupMemberTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param userId The ID of the organization user or application user.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of the organization user or application user.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public OrganizationUserGroupMemberArgs build() {
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("OrganizationUserGroupMemberArgs", "groupId");
            }
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("OrganizationUserGroupMemberArgs", "organizationId");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("OrganizationUserGroupMemberArgs", "userId");
            }
            return $;
        }
    }

}
