// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PgPgUserConfigPgArgs extends com.pulumi.resources.ResourceArgs {

    public static final PgPgUserConfigPgArgs Empty = new PgPgUserConfigPgArgs();

    /**
     * Specifies a fraction of the table size to add to autovacuum*analyze*threshold when deciding whether to trigger an ANALYZE (e.g. `0.2` for 20% of the table size). The default is `0.2`.
     * 
     */
    @Import(name="autovacuumAnalyzeScaleFactor")
    private @Nullable Output<Double> autovacuumAnalyzeScaleFactor;

    /**
     * @return Specifies a fraction of the table size to add to autovacuum*analyze*threshold when deciding whether to trigger an ANALYZE (e.g. `0.2` for 20% of the table size). The default is `0.2`.
     * 
     */
    public Optional<Output<Double>> autovacuumAnalyzeScaleFactor() {
        return Optional.ofNullable(this.autovacuumAnalyzeScaleFactor);
    }

    /**
     * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is `50`.
     * 
     */
    @Import(name="autovacuumAnalyzeThreshold")
    private @Nullable Output<Integer> autovacuumAnalyzeThreshold;

    /**
     * @return Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is `50`.
     * 
     */
    public Optional<Output<Integer>> autovacuumAnalyzeThreshold() {
        return Optional.ofNullable(this.autovacuumAnalyzeThreshold);
    }

    /**
     * Specifies the maximum age (in transactions) that a table&#39;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. The system launches autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. Changing this parameter causes a service restart. Example: `200000000`.
     * 
     */
    @Import(name="autovacuumFreezeMaxAge")
    private @Nullable Output<Integer> autovacuumFreezeMaxAge;

    /**
     * @return Specifies the maximum age (in transactions) that a table&#39;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. The system launches autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. Changing this parameter causes a service restart. Example: `200000000`.
     * 
     */
    public Optional<Output<Integer>> autovacuumFreezeMaxAge() {
        return Optional.ofNullable(this.autovacuumFreezeMaxAge);
    }

    /**
     * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is `3`. Changing this parameter causes a service restart.
     * 
     */
    @Import(name="autovacuumMaxWorkers")
    private @Nullable Output<Integer> autovacuumMaxWorkers;

    /**
     * @return Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is `3`. Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> autovacuumMaxWorkers() {
        return Optional.ofNullable(this.autovacuumMaxWorkers);
    }

    /**
     * Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds. The default is `60`.
     * 
     */
    @Import(name="autovacuumNaptime")
    private @Nullable Output<Integer> autovacuumNaptime;

    /**
     * @return Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds. The default is `60`.
     * 
     */
    public Optional<Output<Integer>> autovacuumNaptime() {
        return Optional.ofNullable(this.autovacuumNaptime);
    }

    /**
     * Specifies the cost delay value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum*cost*delay value will be used. The default is `2` (upstream default).
     * 
     */
    @Import(name="autovacuumVacuumCostDelay")
    private @Nullable Output<Integer> autovacuumVacuumCostDelay;

    /**
     * @return Specifies the cost delay value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum*cost*delay value will be used. The default is `2` (upstream default).
     * 
     */
    public Optional<Output<Integer>> autovacuumVacuumCostDelay() {
        return Optional.ofNullable(this.autovacuumVacuumCostDelay);
    }

    /**
     * Specifies the cost limit value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum*cost*limit value will be used. The default is `-1` (upstream default).
     * 
     */
    @Import(name="autovacuumVacuumCostLimit")
    private @Nullable Output<Integer> autovacuumVacuumCostLimit;

    /**
     * @return Specifies the cost limit value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum*cost*limit value will be used. The default is `-1` (upstream default).
     * 
     */
    public Optional<Output<Integer>> autovacuumVacuumCostLimit() {
        return Optional.ofNullable(this.autovacuumVacuumCostLimit);
    }

    /**
     * Specifies a fraction of the table size to add to autovacuum*vacuum*threshold when deciding whether to trigger a VACUUM (e.g. `0.2` for 20% of the table size). The default is `0.2`.
     * 
     */
    @Import(name="autovacuumVacuumScaleFactor")
    private @Nullable Output<Double> autovacuumVacuumScaleFactor;

    /**
     * @return Specifies a fraction of the table size to add to autovacuum*vacuum*threshold when deciding whether to trigger a VACUUM (e.g. `0.2` for 20% of the table size). The default is `0.2`.
     * 
     */
    public Optional<Output<Double>> autovacuumVacuumScaleFactor() {
        return Optional.ofNullable(this.autovacuumVacuumScaleFactor);
    }

    /**
     * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is `50`.
     * 
     */
    @Import(name="autovacuumVacuumThreshold")
    private @Nullable Output<Integer> autovacuumVacuumThreshold;

    /**
     * @return Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is `50`.
     * 
     */
    public Optional<Output<Integer>> autovacuumVacuumThreshold() {
        return Optional.ofNullable(this.autovacuumVacuumThreshold);
    }

    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. The default is `200`. Example: `200`.
     * 
     */
    @Import(name="bgwriterDelay")
    private @Nullable Output<Integer> bgwriterDelay;

    /**
     * @return Specifies the delay between activity rounds for the background writer in milliseconds. The default is `200`. Example: `200`.
     * 
     */
    public Optional<Output<Integer>> bgwriterDelay() {
        return Optional.ofNullable(this.bgwriterDelay);
    }

    /**
     * Whenever more than bgwriter*flush*after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes. Setting of 0 disables forced writeback. The default is `512`. Example: `512`.
     * 
     */
    @Import(name="bgwriterFlushAfter")
    private @Nullable Output<Integer> bgwriterFlushAfter;

    /**
     * @return Whenever more than bgwriter*flush*after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes. Setting of 0 disables forced writeback. The default is `512`. Example: `512`.
     * 
     */
    public Optional<Output<Integer>> bgwriterFlushAfter() {
        return Optional.ofNullable(this.bgwriterFlushAfter);
    }

    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. The default is `100`. Example: `100`.
     * 
     */
    @Import(name="bgwriterLruMaxpages")
    private @Nullable Output<Integer> bgwriterLruMaxpages;

    /**
     * @return In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. The default is `100`. Example: `100`.
     * 
     */
    public Optional<Output<Integer>> bgwriterLruMaxpages() {
        return Optional.ofNullable(this.bgwriterLruMaxpages);
    }

    /**
     * The average recent need for new buffers is multiplied by bgwriter*lru*multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter*lru*maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is `2.0`. Example: `2.0`.
     * 
     */
    @Import(name="bgwriterLruMultiplier")
    private @Nullable Output<Double> bgwriterLruMultiplier;

    /**
     * @return The average recent need for new buffers is multiplied by bgwriter*lru*multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter*lru*maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is `2.0`. Example: `2.0`.
     * 
     */
    public Optional<Output<Double>> bgwriterLruMultiplier() {
        return Optional.ofNullable(this.bgwriterLruMultiplier);
    }

    /**
     * This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition. The default is `1000` (upstream default). Example: `1000`.
     * 
     */
    @Import(name="deadlockTimeout")
    private @Nullable Output<Integer> deadlockTimeout;

    /**
     * @return This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition. The default is `1000` (upstream default). Example: `1000`.
     * 
     */
    public Optional<Output<Integer>> deadlockTimeout() {
        return Optional.ofNullable(this.deadlockTimeout);
    }

    /**
     * Enum: `lz4`, `pglz`. Specifies the default TOAST compression method for values of compressible columns. The default is `lz4`. Only available for PostgreSQL 14+.
     * 
     */
    @Import(name="defaultToastCompression")
    private @Nullable Output<String> defaultToastCompression;

    /**
     * @return Enum: `lz4`, `pglz`. Specifies the default TOAST compression method for values of compressible columns. The default is `lz4`. Only available for PostgreSQL 14+.
     * 
     */
    public Optional<Output<String>> defaultToastCompression() {
        return Optional.ofNullable(this.defaultToastCompression);
    }

    /**
     * Time out sessions with open transactions after this number of milliseconds.
     * 
     */
    @Import(name="idleInTransactionSessionTimeout")
    private @Nullable Output<Integer> idleInTransactionSessionTimeout;

    /**
     * @return Time out sessions with open transactions after this number of milliseconds.
     * 
     */
    public Optional<Output<Integer>> idleInTransactionSessionTimeout() {
        return Optional.ofNullable(this.idleInTransactionSessionTimeout);
    }

    /**
     * Controls system-wide use of Just-in-Time Compilation (JIT).
     * 
     */
    @Import(name="jit")
    private @Nullable Output<Boolean> jit;

    /**
     * @return Controls system-wide use of Just-in-Time Compilation (JIT).
     * 
     */
    public Optional<Output<Boolean>> jit() {
        return Optional.ofNullable(this.jit);
    }

    /**
     * Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one disables logging autovacuum actions. The default is `1000`.
     * 
     */
    @Import(name="logAutovacuumMinDuration")
    private @Nullable Output<Integer> logAutovacuumMinDuration;

    /**
     * @return Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one disables logging autovacuum actions. The default is `1000`.
     * 
     */
    public Optional<Output<Integer>> logAutovacuumMinDuration() {
        return Optional.ofNullable(this.logAutovacuumMinDuration);
    }

    /**
     * Enum: `DEFAULT`, `TERSE`, `VERBOSE`. Controls the amount of detail written in the server log for each message that is logged.
     * 
     */
    @Import(name="logErrorVerbosity")
    private @Nullable Output<String> logErrorVerbosity;

    /**
     * @return Enum: `DEFAULT`, `TERSE`, `VERBOSE`. Controls the amount of detail written in the server log for each message that is logged.
     * 
     */
    public Optional<Output<String>> logErrorVerbosity() {
        return Optional.ofNullable(this.logErrorVerbosity);
    }

    /**
     * Enum: `&#39;%m [%p] %q[user=%u,db=%d,app=%a] &#39;`, `&#39;%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h &#39;`, `&#39;pid=%p,user=%u,db=%d,app=%a,client=%h &#39;`, `&#39;pid=%p,user=%u,db=%d,app=%a,client=%h,txid=%x,qid=%Q &#39;`. Choose from one of the available log formats.
     * 
     */
    @Import(name="logLinePrefix")
    private @Nullable Output<String> logLinePrefix;

    /**
     * @return Enum: `&#39;%m [%p] %q[user=%u,db=%d,app=%a] &#39;`, `&#39;%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h &#39;`, `&#39;pid=%p,user=%u,db=%d,app=%a,client=%h &#39;`, `&#39;pid=%p,user=%u,db=%d,app=%a,client=%h,txid=%x,qid=%Q &#39;`. Choose from one of the available log formats.
     * 
     */
    public Optional<Output<String>> logLinePrefix() {
        return Optional.ofNullable(this.logLinePrefix);
    }

    /**
     * Log statements that take more than this number of milliseconds to run, -1 disables.
     * 
     */
    @Import(name="logMinDurationStatement")
    private @Nullable Output<Integer> logMinDurationStatement;

    /**
     * @return Log statements that take more than this number of milliseconds to run, -1 disables.
     * 
     */
    public Optional<Output<Integer>> logMinDurationStatement() {
        return Optional.ofNullable(this.logMinDurationStatement);
    }

    /**
     * Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
     * 
     */
    @Import(name="logTempFiles")
    private @Nullable Output<Integer> logTempFiles;

    /**
     * @return Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
     * 
     */
    public Optional<Output<Integer>> logTempFiles() {
        return Optional.ofNullable(this.logTempFiles);
    }

    /**
     * Sets the PostgreSQL maximum number of concurrent connections to the database server. This is a limited-release parameter. Contact your account team to confirm your eligibility. You cannot decrease this parameter value when set. For services with a read replica, first increase the read replica&#39;s value. After the change is applied to the replica, you can increase the primary service&#39;s value. Changing this parameter causes a service restart.
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return Sets the PostgreSQL maximum number of concurrent connections to the database server. This is a limited-release parameter. Contact your account team to confirm your eligibility. You cannot decrease this parameter value when set. For services with a read replica, first increase the read replica&#39;s value. After the change is applied to the replica, you can increase the primary service&#39;s value. Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * PostgreSQL maximum number of files that can be open per process. The default is `1000` (upstream default). Changing this parameter causes a service restart.
     * 
     */
    @Import(name="maxFilesPerProcess")
    private @Nullable Output<Integer> maxFilesPerProcess;

    /**
     * @return PostgreSQL maximum number of files that can be open per process. The default is `1000` (upstream default). Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> maxFilesPerProcess() {
        return Optional.ofNullable(this.maxFilesPerProcess);
    }

    /**
     * PostgreSQL maximum locks per transaction. Changing this parameter causes a service restart.
     * 
     */
    @Import(name="maxLocksPerTransaction")
    private @Nullable Output<Integer> maxLocksPerTransaction;

    /**
     * @return PostgreSQL maximum locks per transaction. Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> maxLocksPerTransaction() {
        return Optional.ofNullable(this.maxLocksPerTransaction);
    }

    /**
     * PostgreSQL maximum logical replication workers (taken from the pool of max*parallel*workers). The default is `4` (upstream default). Changing this parameter causes a service restart.
     * 
     */
    @Import(name="maxLogicalReplicationWorkers")
    private @Nullable Output<Integer> maxLogicalReplicationWorkers;

    /**
     * @return PostgreSQL maximum logical replication workers (taken from the pool of max*parallel*workers). The default is `4` (upstream default). Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> maxLogicalReplicationWorkers() {
        return Optional.ofNullable(this.maxLogicalReplicationWorkers);
    }

    /**
     * Sets the maximum number of workers that the system can support for parallel queries. The default is `8` (upstream default).
     * 
     */
    @Import(name="maxParallelWorkers")
    private @Nullable Output<Integer> maxParallelWorkers;

    /**
     * @return Sets the maximum number of workers that the system can support for parallel queries. The default is `8` (upstream default).
     * 
     */
    public Optional<Output<Integer>> maxParallelWorkers() {
        return Optional.ofNullable(this.maxParallelWorkers);
    }

    /**
     * Sets the maximum number of workers that can be started by a single Gather or Gather Merge node. The default is `2` (upstream default).
     * 
     */
    @Import(name="maxParallelWorkersPerGather")
    private @Nullable Output<Integer> maxParallelWorkersPerGather;

    /**
     * @return Sets the maximum number of workers that can be started by a single Gather or Gather Merge node. The default is `2` (upstream default).
     * 
     */
    public Optional<Output<Integer>> maxParallelWorkersPerGather() {
        return Optional.ofNullable(this.maxParallelWorkersPerGather);
    }

    /**
     * PostgreSQL maximum predicate locks per transaction. The default is `64` (upstream default). Changing this parameter causes a service restart.
     * 
     */
    @Import(name="maxPredLocksPerTransaction")
    private @Nullable Output<Integer> maxPredLocksPerTransaction;

    /**
     * @return PostgreSQL maximum predicate locks per transaction. The default is `64` (upstream default). Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> maxPredLocksPerTransaction() {
        return Optional.ofNullable(this.maxPredLocksPerTransaction);
    }

    /**
     * PostgreSQL maximum prepared transactions. The default is `0`. Changing this parameter causes a service restart.
     * 
     */
    @Import(name="maxPreparedTransactions")
    private @Nullable Output<Integer> maxPreparedTransactions;

    /**
     * @return PostgreSQL maximum prepared transactions. The default is `0`. Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> maxPreparedTransactions() {
        return Optional.ofNullable(this.maxPreparedTransactions);
    }

    /**
     * PostgreSQL maximum replication slots. The default is `20`. Changing this parameter causes a service restart.
     * 
     */
    @Import(name="maxReplicationSlots")
    private @Nullable Output<Integer> maxReplicationSlots;

    /**
     * @return PostgreSQL maximum replication slots. The default is `20`. Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> maxReplicationSlots() {
        return Optional.ofNullable(this.maxReplicationSlots);
    }

    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. If `-1` is specified, replication slots may retain an unlimited amount of WAL files. The default is `-1` (upstream default). wal*keep*size minimum WAL size setting takes precedence over this.
     * 
     */
    @Import(name="maxSlotWalKeepSize")
    private @Nullable Output<Integer> maxSlotWalKeepSize;

    /**
     * @return PostgreSQL maximum WAL size (MB) reserved for replication slots. If `-1` is specified, replication slots may retain an unlimited amount of WAL files. The default is `-1` (upstream default). wal*keep*size minimum WAL size setting takes precedence over this.
     * 
     */
    public Optional<Output<Integer>> maxSlotWalKeepSize() {
        return Optional.ofNullable(this.maxSlotWalKeepSize);
    }

    /**
     * Maximum depth of the stack in bytes. The default is `2097152` (upstream default).
     * 
     */
    @Import(name="maxStackDepth")
    private @Nullable Output<Integer> maxStackDepth;

    /**
     * @return Maximum depth of the stack in bytes. The default is `2097152` (upstream default).
     * 
     */
    public Optional<Output<Integer>> maxStackDepth() {
        return Optional.ofNullable(this.maxStackDepth);
    }

    /**
     * Max standby archive delay in milliseconds. The default is `30000` (upstream default).
     * 
     */
    @Import(name="maxStandbyArchiveDelay")
    private @Nullable Output<Integer> maxStandbyArchiveDelay;

    /**
     * @return Max standby archive delay in milliseconds. The default is `30000` (upstream default).
     * 
     */
    public Optional<Output<Integer>> maxStandbyArchiveDelay() {
        return Optional.ofNullable(this.maxStandbyArchiveDelay);
    }

    /**
     * Max standby streaming delay in milliseconds. The default is `30000` (upstream default).
     * 
     */
    @Import(name="maxStandbyStreamingDelay")
    private @Nullable Output<Integer> maxStandbyStreamingDelay;

    /**
     * @return Max standby streaming delay in milliseconds. The default is `30000` (upstream default).
     * 
     */
    public Optional<Output<Integer>> maxStandbyStreamingDelay() {
        return Optional.ofNullable(this.maxStandbyStreamingDelay);
    }

    /**
     * Maximum number of synchronization workers per subscription. The default is `2`.
     * 
     */
    @Import(name="maxSyncWorkersPerSubscription")
    private @Nullable Output<Integer> maxSyncWorkersPerSubscription;

    /**
     * @return Maximum number of synchronization workers per subscription. The default is `2`.
     * 
     */
    public Optional<Output<Integer>> maxSyncWorkersPerSubscription() {
        return Optional.ofNullable(this.maxSyncWorkersPerSubscription);
    }

    /**
     * PostgreSQL maximum WAL senders. The default is `20`. Changing this parameter causes a service restart.
     * 
     */
    @Import(name="maxWalSenders")
    private @Nullable Output<Integer> maxWalSenders;

    /**
     * @return PostgreSQL maximum WAL senders. The default is `20`. Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> maxWalSenders() {
        return Optional.ofNullable(this.maxWalSenders);
    }

    /**
     * Sets the maximum number of background processes that the system can support. The default is `8`. Changing this parameter causes a service restart.
     * 
     */
    @Import(name="maxWorkerProcesses")
    private @Nullable Output<Integer> maxWorkerProcesses;

    /**
     * @return Sets the maximum number of background processes that the system can support. The default is `8`. Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<Integer>> maxWorkerProcesses() {
        return Optional.ofNullable(this.maxWorkerProcesses);
    }

    /**
     * Enum: `md5`, `scram-sha-256`. Chooses the algorithm for encrypting passwords.
     * 
     */
    @Import(name="passwordEncryption")
    private @Nullable Output<String> passwordEncryption;

    /**
     * @return Enum: `md5`, `scram-sha-256`. Chooses the algorithm for encrypting passwords.
     * 
     */
    public Optional<Output<String>> passwordEncryption() {
        return Optional.ofNullable(this.passwordEncryption);
    }

    /**
     * Sets the time interval in seconds to run pg_partman&#39;s scheduled tasks. The default is `3600`. Example: `3600`.
     * 
     */
    @Import(name="pgPartmanBgwDotInterval")
    private @Nullable Output<Integer> pgPartmanBgwDotInterval;

    /**
     * @return Sets the time interval in seconds to run pg_partman&#39;s scheduled tasks. The default is `3600`. Example: `3600`.
     * 
     */
    public Optional<Output<Integer>> pgPartmanBgwDotInterval() {
        return Optional.ofNullable(this.pgPartmanBgwDotInterval);
    }

    /**
     * Controls which role to use for pg_partman&#39;s scheduled background tasks. Example: `myrolename`.
     * 
     */
    @Import(name="pgPartmanBgwDotRole")
    private @Nullable Output<String> pgPartmanBgwDotRole;

    /**
     * @return Controls which role to use for pg_partman&#39;s scheduled background tasks. Example: `myrolename`.
     * 
     */
    public Optional<Output<String>> pgPartmanBgwDotRole() {
        return Optional.ofNullable(this.pgPartmanBgwDotRole);
    }

    /**
     * Enables or disables query plan monitoring. Changing this parameter causes a service restart. Only available for PostgreSQL 13+.
     * 
     */
    @Import(name="pgStatMonitorDotPgsmEnableQueryPlan")
    private @Nullable Output<Boolean> pgStatMonitorDotPgsmEnableQueryPlan;

    /**
     * @return Enables or disables query plan monitoring. Changing this parameter causes a service restart. Only available for PostgreSQL 13+.
     * 
     */
    public Optional<Output<Boolean>> pgStatMonitorDotPgsmEnableQueryPlan() {
        return Optional.ofNullable(this.pgStatMonitorDotPgsmEnableQueryPlan);
    }

    /**
     * Sets the maximum number of buckets. Changing this parameter causes a service restart. Only available for PostgreSQL 13+. Example: `10`.
     * 
     */
    @Import(name="pgStatMonitorDotPgsmMaxBuckets")
    private @Nullable Output<Integer> pgStatMonitorDotPgsmMaxBuckets;

    /**
     * @return Sets the maximum number of buckets. Changing this parameter causes a service restart. Only available for PostgreSQL 13+. Example: `10`.
     * 
     */
    public Optional<Output<Integer>> pgStatMonitorDotPgsmMaxBuckets() {
        return Optional.ofNullable(this.pgStatMonitorDotPgsmMaxBuckets);
    }

    /**
     * Enum: `all`, `none`, `top`. Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default is `top`.
     * 
     */
    @Import(name="pgStatStatementsDotTrack")
    private @Nullable Output<String> pgStatStatementsDotTrack;

    /**
     * @return Enum: `all`, `none`, `top`. Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default is `top`.
     * 
     */
    public Optional<Output<String>> pgStatStatementsDotTrack() {
        return Optional.ofNullable(this.pgStatStatementsDotTrack);
    }

    /**
     * PostgreSQL temporary file limit in KiB, -1 for unlimited. Example: `5000000`.
     * 
     */
    @Import(name="tempFileLimit")
    private @Nullable Output<Integer> tempFileLimit;

    /**
     * @return PostgreSQL temporary file limit in KiB, -1 for unlimited. Example: `5000000`.
     * 
     */
    public Optional<Output<Integer>> tempFileLimit() {
        return Optional.ofNullable(this.tempFileLimit);
    }

    /**
     * PostgreSQL service timezone. Example: `Europe/Helsinki`.
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return PostgreSQL service timezone. Example: `Europe/Helsinki`.
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    /**
     * Specifies the number of bytes reserved to track the currently executing command for each active session. Changing this parameter causes a service restart. Example: `1024`.
     * 
     */
    @Import(name="trackActivityQuerySize")
    private @Nullable Output<Integer> trackActivityQuerySize;

    /**
     * @return Specifies the number of bytes reserved to track the currently executing command for each active session. Changing this parameter causes a service restart. Example: `1024`.
     * 
     */
    public Optional<Output<Integer>> trackActivityQuerySize() {
        return Optional.ofNullable(this.trackActivityQuerySize);
    }

    /**
     * Enum: `off`, `on`. Record commit time of transactions. Changing this parameter causes a service restart.
     * 
     */
    @Import(name="trackCommitTimestamp")
    private @Nullable Output<String> trackCommitTimestamp;

    /**
     * @return Enum: `off`, `on`. Record commit time of transactions. Changing this parameter causes a service restart.
     * 
     */
    public Optional<Output<String>> trackCommitTimestamp() {
        return Optional.ofNullable(this.trackCommitTimestamp);
    }

    /**
     * Enum: `all`, `none`, `pl`. Enables tracking of function call counts and time used.
     * 
     */
    @Import(name="trackFunctions")
    private @Nullable Output<String> trackFunctions;

    /**
     * @return Enum: `all`, `none`, `pl`. Enables tracking of function call counts and time used.
     * 
     */
    public Optional<Output<String>> trackFunctions() {
        return Optional.ofNullable(this.trackFunctions);
    }

    /**
     * Enum: `off`, `on`. Enables timing of database I/O calls. The default is `off`. When on, it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     * 
     */
    @Import(name="trackIoTiming")
    private @Nullable Output<String> trackIoTiming;

    /**
     * @return Enum: `off`, `on`. Enables timing of database I/O calls. The default is `off`. When on, it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     * 
     */
    public Optional<Output<String>> trackIoTiming() {
        return Optional.ofNullable(this.trackIoTiming);
    }

    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Example: `60000`.
     * 
     */
    @Import(name="walSenderTimeout")
    private @Nullable Output<Integer> walSenderTimeout;

    /**
     * @return Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Example: `60000`.
     * 
     */
    public Optional<Output<Integer>> walSenderTimeout() {
        return Optional.ofNullable(this.walSenderTimeout);
    }

    /**
     * WAL flush interval in milliseconds. The default is `200`. Setting this parameter to a lower value may negatively impact performance. Example: `50`.
     * 
     */
    @Import(name="walWriterDelay")
    private @Nullable Output<Integer> walWriterDelay;

    /**
     * @return WAL flush interval in milliseconds. The default is `200`. Setting this parameter to a lower value may negatively impact performance. Example: `50`.
     * 
     */
    public Optional<Output<Integer>> walWriterDelay() {
        return Optional.ofNullable(this.walWriterDelay);
    }

    private PgPgUserConfigPgArgs() {}

    private PgPgUserConfigPgArgs(PgPgUserConfigPgArgs $) {
        this.autovacuumAnalyzeScaleFactor = $.autovacuumAnalyzeScaleFactor;
        this.autovacuumAnalyzeThreshold = $.autovacuumAnalyzeThreshold;
        this.autovacuumFreezeMaxAge = $.autovacuumFreezeMaxAge;
        this.autovacuumMaxWorkers = $.autovacuumMaxWorkers;
        this.autovacuumNaptime = $.autovacuumNaptime;
        this.autovacuumVacuumCostDelay = $.autovacuumVacuumCostDelay;
        this.autovacuumVacuumCostLimit = $.autovacuumVacuumCostLimit;
        this.autovacuumVacuumScaleFactor = $.autovacuumVacuumScaleFactor;
        this.autovacuumVacuumThreshold = $.autovacuumVacuumThreshold;
        this.bgwriterDelay = $.bgwriterDelay;
        this.bgwriterFlushAfter = $.bgwriterFlushAfter;
        this.bgwriterLruMaxpages = $.bgwriterLruMaxpages;
        this.bgwriterLruMultiplier = $.bgwriterLruMultiplier;
        this.deadlockTimeout = $.deadlockTimeout;
        this.defaultToastCompression = $.defaultToastCompression;
        this.idleInTransactionSessionTimeout = $.idleInTransactionSessionTimeout;
        this.jit = $.jit;
        this.logAutovacuumMinDuration = $.logAutovacuumMinDuration;
        this.logErrorVerbosity = $.logErrorVerbosity;
        this.logLinePrefix = $.logLinePrefix;
        this.logMinDurationStatement = $.logMinDurationStatement;
        this.logTempFiles = $.logTempFiles;
        this.maxConnections = $.maxConnections;
        this.maxFilesPerProcess = $.maxFilesPerProcess;
        this.maxLocksPerTransaction = $.maxLocksPerTransaction;
        this.maxLogicalReplicationWorkers = $.maxLogicalReplicationWorkers;
        this.maxParallelWorkers = $.maxParallelWorkers;
        this.maxParallelWorkersPerGather = $.maxParallelWorkersPerGather;
        this.maxPredLocksPerTransaction = $.maxPredLocksPerTransaction;
        this.maxPreparedTransactions = $.maxPreparedTransactions;
        this.maxReplicationSlots = $.maxReplicationSlots;
        this.maxSlotWalKeepSize = $.maxSlotWalKeepSize;
        this.maxStackDepth = $.maxStackDepth;
        this.maxStandbyArchiveDelay = $.maxStandbyArchiveDelay;
        this.maxStandbyStreamingDelay = $.maxStandbyStreamingDelay;
        this.maxSyncWorkersPerSubscription = $.maxSyncWorkersPerSubscription;
        this.maxWalSenders = $.maxWalSenders;
        this.maxWorkerProcesses = $.maxWorkerProcesses;
        this.passwordEncryption = $.passwordEncryption;
        this.pgPartmanBgwDotInterval = $.pgPartmanBgwDotInterval;
        this.pgPartmanBgwDotRole = $.pgPartmanBgwDotRole;
        this.pgStatMonitorDotPgsmEnableQueryPlan = $.pgStatMonitorDotPgsmEnableQueryPlan;
        this.pgStatMonitorDotPgsmMaxBuckets = $.pgStatMonitorDotPgsmMaxBuckets;
        this.pgStatStatementsDotTrack = $.pgStatStatementsDotTrack;
        this.tempFileLimit = $.tempFileLimit;
        this.timezone = $.timezone;
        this.trackActivityQuerySize = $.trackActivityQuerySize;
        this.trackCommitTimestamp = $.trackCommitTimestamp;
        this.trackFunctions = $.trackFunctions;
        this.trackIoTiming = $.trackIoTiming;
        this.walSenderTimeout = $.walSenderTimeout;
        this.walWriterDelay = $.walWriterDelay;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PgPgUserConfigPgArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PgPgUserConfigPgArgs $;

        public Builder() {
            $ = new PgPgUserConfigPgArgs();
        }

        public Builder(PgPgUserConfigPgArgs defaults) {
            $ = new PgPgUserConfigPgArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autovacuumAnalyzeScaleFactor Specifies a fraction of the table size to add to autovacuum*analyze*threshold when deciding whether to trigger an ANALYZE (e.g. `0.2` for 20% of the table size). The default is `0.2`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumAnalyzeScaleFactor(@Nullable Output<Double> autovacuumAnalyzeScaleFactor) {
            $.autovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
            return this;
        }

        /**
         * @param autovacuumAnalyzeScaleFactor Specifies a fraction of the table size to add to autovacuum*analyze*threshold when deciding whether to trigger an ANALYZE (e.g. `0.2` for 20% of the table size). The default is `0.2`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumAnalyzeScaleFactor(Double autovacuumAnalyzeScaleFactor) {
            return autovacuumAnalyzeScaleFactor(Output.of(autovacuumAnalyzeScaleFactor));
        }

        /**
         * @param autovacuumAnalyzeThreshold Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is `50`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumAnalyzeThreshold(@Nullable Output<Integer> autovacuumAnalyzeThreshold) {
            $.autovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
            return this;
        }

        /**
         * @param autovacuumAnalyzeThreshold Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is `50`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumAnalyzeThreshold(Integer autovacuumAnalyzeThreshold) {
            return autovacuumAnalyzeThreshold(Output.of(autovacuumAnalyzeThreshold));
        }

        /**
         * @param autovacuumFreezeMaxAge Specifies the maximum age (in transactions) that a table&#39;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. The system launches autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. Changing this parameter causes a service restart. Example: `200000000`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumFreezeMaxAge(@Nullable Output<Integer> autovacuumFreezeMaxAge) {
            $.autovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
            return this;
        }

        /**
         * @param autovacuumFreezeMaxAge Specifies the maximum age (in transactions) that a table&#39;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. The system launches autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. Changing this parameter causes a service restart. Example: `200000000`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumFreezeMaxAge(Integer autovacuumFreezeMaxAge) {
            return autovacuumFreezeMaxAge(Output.of(autovacuumFreezeMaxAge));
        }

        /**
         * @param autovacuumMaxWorkers Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is `3`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumMaxWorkers(@Nullable Output<Integer> autovacuumMaxWorkers) {
            $.autovacuumMaxWorkers = autovacuumMaxWorkers;
            return this;
        }

        /**
         * @param autovacuumMaxWorkers Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is `3`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumMaxWorkers(Integer autovacuumMaxWorkers) {
            return autovacuumMaxWorkers(Output.of(autovacuumMaxWorkers));
        }

        /**
         * @param autovacuumNaptime Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds. The default is `60`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumNaptime(@Nullable Output<Integer> autovacuumNaptime) {
            $.autovacuumNaptime = autovacuumNaptime;
            return this;
        }

        /**
         * @param autovacuumNaptime Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds. The default is `60`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumNaptime(Integer autovacuumNaptime) {
            return autovacuumNaptime(Output.of(autovacuumNaptime));
        }

        /**
         * @param autovacuumVacuumCostDelay Specifies the cost delay value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum*cost*delay value will be used. The default is `2` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumCostDelay(@Nullable Output<Integer> autovacuumVacuumCostDelay) {
            $.autovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
            return this;
        }

        /**
         * @param autovacuumVacuumCostDelay Specifies the cost delay value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum*cost*delay value will be used. The default is `2` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumCostDelay(Integer autovacuumVacuumCostDelay) {
            return autovacuumVacuumCostDelay(Output.of(autovacuumVacuumCostDelay));
        }

        /**
         * @param autovacuumVacuumCostLimit Specifies the cost limit value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum*cost*limit value will be used. The default is `-1` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumCostLimit(@Nullable Output<Integer> autovacuumVacuumCostLimit) {
            $.autovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
            return this;
        }

        /**
         * @param autovacuumVacuumCostLimit Specifies the cost limit value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum*cost*limit value will be used. The default is `-1` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumCostLimit(Integer autovacuumVacuumCostLimit) {
            return autovacuumVacuumCostLimit(Output.of(autovacuumVacuumCostLimit));
        }

        /**
         * @param autovacuumVacuumScaleFactor Specifies a fraction of the table size to add to autovacuum*vacuum*threshold when deciding whether to trigger a VACUUM (e.g. `0.2` for 20% of the table size). The default is `0.2`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumScaleFactor(@Nullable Output<Double> autovacuumVacuumScaleFactor) {
            $.autovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
            return this;
        }

        /**
         * @param autovacuumVacuumScaleFactor Specifies a fraction of the table size to add to autovacuum*vacuum*threshold when deciding whether to trigger a VACUUM (e.g. `0.2` for 20% of the table size). The default is `0.2`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumScaleFactor(Double autovacuumVacuumScaleFactor) {
            return autovacuumVacuumScaleFactor(Output.of(autovacuumVacuumScaleFactor));
        }

        /**
         * @param autovacuumVacuumThreshold Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is `50`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumThreshold(@Nullable Output<Integer> autovacuumVacuumThreshold) {
            $.autovacuumVacuumThreshold = autovacuumVacuumThreshold;
            return this;
        }

        /**
         * @param autovacuumVacuumThreshold Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is `50`.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumThreshold(Integer autovacuumVacuumThreshold) {
            return autovacuumVacuumThreshold(Output.of(autovacuumVacuumThreshold));
        }

        /**
         * @param bgwriterDelay Specifies the delay between activity rounds for the background writer in milliseconds. The default is `200`. Example: `200`.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterDelay(@Nullable Output<Integer> bgwriterDelay) {
            $.bgwriterDelay = bgwriterDelay;
            return this;
        }

        /**
         * @param bgwriterDelay Specifies the delay between activity rounds for the background writer in milliseconds. The default is `200`. Example: `200`.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterDelay(Integer bgwriterDelay) {
            return bgwriterDelay(Output.of(bgwriterDelay));
        }

        /**
         * @param bgwriterFlushAfter Whenever more than bgwriter*flush*after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes. Setting of 0 disables forced writeback. The default is `512`. Example: `512`.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterFlushAfter(@Nullable Output<Integer> bgwriterFlushAfter) {
            $.bgwriterFlushAfter = bgwriterFlushAfter;
            return this;
        }

        /**
         * @param bgwriterFlushAfter Whenever more than bgwriter*flush*after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes. Setting of 0 disables forced writeback. The default is `512`. Example: `512`.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterFlushAfter(Integer bgwriterFlushAfter) {
            return bgwriterFlushAfter(Output.of(bgwriterFlushAfter));
        }

        /**
         * @param bgwriterLruMaxpages In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. The default is `100`. Example: `100`.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterLruMaxpages(@Nullable Output<Integer> bgwriterLruMaxpages) {
            $.bgwriterLruMaxpages = bgwriterLruMaxpages;
            return this;
        }

        /**
         * @param bgwriterLruMaxpages In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. The default is `100`. Example: `100`.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterLruMaxpages(Integer bgwriterLruMaxpages) {
            return bgwriterLruMaxpages(Output.of(bgwriterLruMaxpages));
        }

        /**
         * @param bgwriterLruMultiplier The average recent need for new buffers is multiplied by bgwriter*lru*multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter*lru*maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is `2.0`. Example: `2.0`.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterLruMultiplier(@Nullable Output<Double> bgwriterLruMultiplier) {
            $.bgwriterLruMultiplier = bgwriterLruMultiplier;
            return this;
        }

        /**
         * @param bgwriterLruMultiplier The average recent need for new buffers is multiplied by bgwriter*lru*multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter*lru*maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is `2.0`. Example: `2.0`.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterLruMultiplier(Double bgwriterLruMultiplier) {
            return bgwriterLruMultiplier(Output.of(bgwriterLruMultiplier));
        }

        /**
         * @param deadlockTimeout This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition. The default is `1000` (upstream default). Example: `1000`.
         * 
         * @return builder
         * 
         */
        public Builder deadlockTimeout(@Nullable Output<Integer> deadlockTimeout) {
            $.deadlockTimeout = deadlockTimeout;
            return this;
        }

        /**
         * @param deadlockTimeout This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition. The default is `1000` (upstream default). Example: `1000`.
         * 
         * @return builder
         * 
         */
        public Builder deadlockTimeout(Integer deadlockTimeout) {
            return deadlockTimeout(Output.of(deadlockTimeout));
        }

        /**
         * @param defaultToastCompression Enum: `lz4`, `pglz`. Specifies the default TOAST compression method for values of compressible columns. The default is `lz4`. Only available for PostgreSQL 14+.
         * 
         * @return builder
         * 
         */
        public Builder defaultToastCompression(@Nullable Output<String> defaultToastCompression) {
            $.defaultToastCompression = defaultToastCompression;
            return this;
        }

        /**
         * @param defaultToastCompression Enum: `lz4`, `pglz`. Specifies the default TOAST compression method for values of compressible columns. The default is `lz4`. Only available for PostgreSQL 14+.
         * 
         * @return builder
         * 
         */
        public Builder defaultToastCompression(String defaultToastCompression) {
            return defaultToastCompression(Output.of(defaultToastCompression));
        }

        /**
         * @param idleInTransactionSessionTimeout Time out sessions with open transactions after this number of milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder idleInTransactionSessionTimeout(@Nullable Output<Integer> idleInTransactionSessionTimeout) {
            $.idleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
            return this;
        }

        /**
         * @param idleInTransactionSessionTimeout Time out sessions with open transactions after this number of milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder idleInTransactionSessionTimeout(Integer idleInTransactionSessionTimeout) {
            return idleInTransactionSessionTimeout(Output.of(idleInTransactionSessionTimeout));
        }

        /**
         * @param jit Controls system-wide use of Just-in-Time Compilation (JIT).
         * 
         * @return builder
         * 
         */
        public Builder jit(@Nullable Output<Boolean> jit) {
            $.jit = jit;
            return this;
        }

        /**
         * @param jit Controls system-wide use of Just-in-Time Compilation (JIT).
         * 
         * @return builder
         * 
         */
        public Builder jit(Boolean jit) {
            return jit(Output.of(jit));
        }

        /**
         * @param logAutovacuumMinDuration Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one disables logging autovacuum actions. The default is `1000`.
         * 
         * @return builder
         * 
         */
        public Builder logAutovacuumMinDuration(@Nullable Output<Integer> logAutovacuumMinDuration) {
            $.logAutovacuumMinDuration = logAutovacuumMinDuration;
            return this;
        }

        /**
         * @param logAutovacuumMinDuration Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one disables logging autovacuum actions. The default is `1000`.
         * 
         * @return builder
         * 
         */
        public Builder logAutovacuumMinDuration(Integer logAutovacuumMinDuration) {
            return logAutovacuumMinDuration(Output.of(logAutovacuumMinDuration));
        }

        /**
         * @param logErrorVerbosity Enum: `DEFAULT`, `TERSE`, `VERBOSE`. Controls the amount of detail written in the server log for each message that is logged.
         * 
         * @return builder
         * 
         */
        public Builder logErrorVerbosity(@Nullable Output<String> logErrorVerbosity) {
            $.logErrorVerbosity = logErrorVerbosity;
            return this;
        }

        /**
         * @param logErrorVerbosity Enum: `DEFAULT`, `TERSE`, `VERBOSE`. Controls the amount of detail written in the server log for each message that is logged.
         * 
         * @return builder
         * 
         */
        public Builder logErrorVerbosity(String logErrorVerbosity) {
            return logErrorVerbosity(Output.of(logErrorVerbosity));
        }

        /**
         * @param logLinePrefix Enum: `&#39;%m [%p] %q[user=%u,db=%d,app=%a] &#39;`, `&#39;%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h &#39;`, `&#39;pid=%p,user=%u,db=%d,app=%a,client=%h &#39;`, `&#39;pid=%p,user=%u,db=%d,app=%a,client=%h,txid=%x,qid=%Q &#39;`. Choose from one of the available log formats.
         * 
         * @return builder
         * 
         */
        public Builder logLinePrefix(@Nullable Output<String> logLinePrefix) {
            $.logLinePrefix = logLinePrefix;
            return this;
        }

        /**
         * @param logLinePrefix Enum: `&#39;%m [%p] %q[user=%u,db=%d,app=%a] &#39;`, `&#39;%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h &#39;`, `&#39;pid=%p,user=%u,db=%d,app=%a,client=%h &#39;`, `&#39;pid=%p,user=%u,db=%d,app=%a,client=%h,txid=%x,qid=%Q &#39;`. Choose from one of the available log formats.
         * 
         * @return builder
         * 
         */
        public Builder logLinePrefix(String logLinePrefix) {
            return logLinePrefix(Output.of(logLinePrefix));
        }

        /**
         * @param logMinDurationStatement Log statements that take more than this number of milliseconds to run, -1 disables.
         * 
         * @return builder
         * 
         */
        public Builder logMinDurationStatement(@Nullable Output<Integer> logMinDurationStatement) {
            $.logMinDurationStatement = logMinDurationStatement;
            return this;
        }

        /**
         * @param logMinDurationStatement Log statements that take more than this number of milliseconds to run, -1 disables.
         * 
         * @return builder
         * 
         */
        public Builder logMinDurationStatement(Integer logMinDurationStatement) {
            return logMinDurationStatement(Output.of(logMinDurationStatement));
        }

        /**
         * @param logTempFiles Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
         * 
         * @return builder
         * 
         */
        public Builder logTempFiles(@Nullable Output<Integer> logTempFiles) {
            $.logTempFiles = logTempFiles;
            return this;
        }

        /**
         * @param logTempFiles Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
         * 
         * @return builder
         * 
         */
        public Builder logTempFiles(Integer logTempFiles) {
            return logTempFiles(Output.of(logTempFiles));
        }

        /**
         * @param maxConnections Sets the PostgreSQL maximum number of concurrent connections to the database server. This is a limited-release parameter. Contact your account team to confirm your eligibility. You cannot decrease this parameter value when set. For services with a read replica, first increase the read replica&#39;s value. After the change is applied to the replica, you can increase the primary service&#39;s value. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections Sets the PostgreSQL maximum number of concurrent connections to the database server. This is a limited-release parameter. Contact your account team to confirm your eligibility. You cannot decrease this parameter value when set. For services with a read replica, first increase the read replica&#39;s value. After the change is applied to the replica, you can increase the primary service&#39;s value. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param maxFilesPerProcess PostgreSQL maximum number of files that can be open per process. The default is `1000` (upstream default). Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxFilesPerProcess(@Nullable Output<Integer> maxFilesPerProcess) {
            $.maxFilesPerProcess = maxFilesPerProcess;
            return this;
        }

        /**
         * @param maxFilesPerProcess PostgreSQL maximum number of files that can be open per process. The default is `1000` (upstream default). Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxFilesPerProcess(Integer maxFilesPerProcess) {
            return maxFilesPerProcess(Output.of(maxFilesPerProcess));
        }

        /**
         * @param maxLocksPerTransaction PostgreSQL maximum locks per transaction. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxLocksPerTransaction(@Nullable Output<Integer> maxLocksPerTransaction) {
            $.maxLocksPerTransaction = maxLocksPerTransaction;
            return this;
        }

        /**
         * @param maxLocksPerTransaction PostgreSQL maximum locks per transaction. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxLocksPerTransaction(Integer maxLocksPerTransaction) {
            return maxLocksPerTransaction(Output.of(maxLocksPerTransaction));
        }

        /**
         * @param maxLogicalReplicationWorkers PostgreSQL maximum logical replication workers (taken from the pool of max*parallel*workers). The default is `4` (upstream default). Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxLogicalReplicationWorkers(@Nullable Output<Integer> maxLogicalReplicationWorkers) {
            $.maxLogicalReplicationWorkers = maxLogicalReplicationWorkers;
            return this;
        }

        /**
         * @param maxLogicalReplicationWorkers PostgreSQL maximum logical replication workers (taken from the pool of max*parallel*workers). The default is `4` (upstream default). Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxLogicalReplicationWorkers(Integer maxLogicalReplicationWorkers) {
            return maxLogicalReplicationWorkers(Output.of(maxLogicalReplicationWorkers));
        }

        /**
         * @param maxParallelWorkers Sets the maximum number of workers that the system can support for parallel queries. The default is `8` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxParallelWorkers(@Nullable Output<Integer> maxParallelWorkers) {
            $.maxParallelWorkers = maxParallelWorkers;
            return this;
        }

        /**
         * @param maxParallelWorkers Sets the maximum number of workers that the system can support for parallel queries. The default is `8` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxParallelWorkers(Integer maxParallelWorkers) {
            return maxParallelWorkers(Output.of(maxParallelWorkers));
        }

        /**
         * @param maxParallelWorkersPerGather Sets the maximum number of workers that can be started by a single Gather or Gather Merge node. The default is `2` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxParallelWorkersPerGather(@Nullable Output<Integer> maxParallelWorkersPerGather) {
            $.maxParallelWorkersPerGather = maxParallelWorkersPerGather;
            return this;
        }

        /**
         * @param maxParallelWorkersPerGather Sets the maximum number of workers that can be started by a single Gather or Gather Merge node. The default is `2` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxParallelWorkersPerGather(Integer maxParallelWorkersPerGather) {
            return maxParallelWorkersPerGather(Output.of(maxParallelWorkersPerGather));
        }

        /**
         * @param maxPredLocksPerTransaction PostgreSQL maximum predicate locks per transaction. The default is `64` (upstream default). Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxPredLocksPerTransaction(@Nullable Output<Integer> maxPredLocksPerTransaction) {
            $.maxPredLocksPerTransaction = maxPredLocksPerTransaction;
            return this;
        }

        /**
         * @param maxPredLocksPerTransaction PostgreSQL maximum predicate locks per transaction. The default is `64` (upstream default). Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxPredLocksPerTransaction(Integer maxPredLocksPerTransaction) {
            return maxPredLocksPerTransaction(Output.of(maxPredLocksPerTransaction));
        }

        /**
         * @param maxPreparedTransactions PostgreSQL maximum prepared transactions. The default is `0`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxPreparedTransactions(@Nullable Output<Integer> maxPreparedTransactions) {
            $.maxPreparedTransactions = maxPreparedTransactions;
            return this;
        }

        /**
         * @param maxPreparedTransactions PostgreSQL maximum prepared transactions. The default is `0`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxPreparedTransactions(Integer maxPreparedTransactions) {
            return maxPreparedTransactions(Output.of(maxPreparedTransactions));
        }

        /**
         * @param maxReplicationSlots PostgreSQL maximum replication slots. The default is `20`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxReplicationSlots(@Nullable Output<Integer> maxReplicationSlots) {
            $.maxReplicationSlots = maxReplicationSlots;
            return this;
        }

        /**
         * @param maxReplicationSlots PostgreSQL maximum replication slots. The default is `20`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxReplicationSlots(Integer maxReplicationSlots) {
            return maxReplicationSlots(Output.of(maxReplicationSlots));
        }

        /**
         * @param maxSlotWalKeepSize PostgreSQL maximum WAL size (MB) reserved for replication slots. If `-1` is specified, replication slots may retain an unlimited amount of WAL files. The default is `-1` (upstream default). wal*keep*size minimum WAL size setting takes precedence over this.
         * 
         * @return builder
         * 
         */
        public Builder maxSlotWalKeepSize(@Nullable Output<Integer> maxSlotWalKeepSize) {
            $.maxSlotWalKeepSize = maxSlotWalKeepSize;
            return this;
        }

        /**
         * @param maxSlotWalKeepSize PostgreSQL maximum WAL size (MB) reserved for replication slots. If `-1` is specified, replication slots may retain an unlimited amount of WAL files. The default is `-1` (upstream default). wal*keep*size minimum WAL size setting takes precedence over this.
         * 
         * @return builder
         * 
         */
        public Builder maxSlotWalKeepSize(Integer maxSlotWalKeepSize) {
            return maxSlotWalKeepSize(Output.of(maxSlotWalKeepSize));
        }

        /**
         * @param maxStackDepth Maximum depth of the stack in bytes. The default is `2097152` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxStackDepth(@Nullable Output<Integer> maxStackDepth) {
            $.maxStackDepth = maxStackDepth;
            return this;
        }

        /**
         * @param maxStackDepth Maximum depth of the stack in bytes. The default is `2097152` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxStackDepth(Integer maxStackDepth) {
            return maxStackDepth(Output.of(maxStackDepth));
        }

        /**
         * @param maxStandbyArchiveDelay Max standby archive delay in milliseconds. The default is `30000` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxStandbyArchiveDelay(@Nullable Output<Integer> maxStandbyArchiveDelay) {
            $.maxStandbyArchiveDelay = maxStandbyArchiveDelay;
            return this;
        }

        /**
         * @param maxStandbyArchiveDelay Max standby archive delay in milliseconds. The default is `30000` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxStandbyArchiveDelay(Integer maxStandbyArchiveDelay) {
            return maxStandbyArchiveDelay(Output.of(maxStandbyArchiveDelay));
        }

        /**
         * @param maxStandbyStreamingDelay Max standby streaming delay in milliseconds. The default is `30000` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxStandbyStreamingDelay(@Nullable Output<Integer> maxStandbyStreamingDelay) {
            $.maxStandbyStreamingDelay = maxStandbyStreamingDelay;
            return this;
        }

        /**
         * @param maxStandbyStreamingDelay Max standby streaming delay in milliseconds. The default is `30000` (upstream default).
         * 
         * @return builder
         * 
         */
        public Builder maxStandbyStreamingDelay(Integer maxStandbyStreamingDelay) {
            return maxStandbyStreamingDelay(Output.of(maxStandbyStreamingDelay));
        }

        /**
         * @param maxSyncWorkersPerSubscription Maximum number of synchronization workers per subscription. The default is `2`.
         * 
         * @return builder
         * 
         */
        public Builder maxSyncWorkersPerSubscription(@Nullable Output<Integer> maxSyncWorkersPerSubscription) {
            $.maxSyncWorkersPerSubscription = maxSyncWorkersPerSubscription;
            return this;
        }

        /**
         * @param maxSyncWorkersPerSubscription Maximum number of synchronization workers per subscription. The default is `2`.
         * 
         * @return builder
         * 
         */
        public Builder maxSyncWorkersPerSubscription(Integer maxSyncWorkersPerSubscription) {
            return maxSyncWorkersPerSubscription(Output.of(maxSyncWorkersPerSubscription));
        }

        /**
         * @param maxWalSenders PostgreSQL maximum WAL senders. The default is `20`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxWalSenders(@Nullable Output<Integer> maxWalSenders) {
            $.maxWalSenders = maxWalSenders;
            return this;
        }

        /**
         * @param maxWalSenders PostgreSQL maximum WAL senders. The default is `20`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxWalSenders(Integer maxWalSenders) {
            return maxWalSenders(Output.of(maxWalSenders));
        }

        /**
         * @param maxWorkerProcesses Sets the maximum number of background processes that the system can support. The default is `8`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxWorkerProcesses(@Nullable Output<Integer> maxWorkerProcesses) {
            $.maxWorkerProcesses = maxWorkerProcesses;
            return this;
        }

        /**
         * @param maxWorkerProcesses Sets the maximum number of background processes that the system can support. The default is `8`. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder maxWorkerProcesses(Integer maxWorkerProcesses) {
            return maxWorkerProcesses(Output.of(maxWorkerProcesses));
        }

        /**
         * @param passwordEncryption Enum: `md5`, `scram-sha-256`. Chooses the algorithm for encrypting passwords.
         * 
         * @return builder
         * 
         */
        public Builder passwordEncryption(@Nullable Output<String> passwordEncryption) {
            $.passwordEncryption = passwordEncryption;
            return this;
        }

        /**
         * @param passwordEncryption Enum: `md5`, `scram-sha-256`. Chooses the algorithm for encrypting passwords.
         * 
         * @return builder
         * 
         */
        public Builder passwordEncryption(String passwordEncryption) {
            return passwordEncryption(Output.of(passwordEncryption));
        }

        /**
         * @param pgPartmanBgwDotInterval Sets the time interval in seconds to run pg_partman&#39;s scheduled tasks. The default is `3600`. Example: `3600`.
         * 
         * @return builder
         * 
         */
        public Builder pgPartmanBgwDotInterval(@Nullable Output<Integer> pgPartmanBgwDotInterval) {
            $.pgPartmanBgwDotInterval = pgPartmanBgwDotInterval;
            return this;
        }

        /**
         * @param pgPartmanBgwDotInterval Sets the time interval in seconds to run pg_partman&#39;s scheduled tasks. The default is `3600`. Example: `3600`.
         * 
         * @return builder
         * 
         */
        public Builder pgPartmanBgwDotInterval(Integer pgPartmanBgwDotInterval) {
            return pgPartmanBgwDotInterval(Output.of(pgPartmanBgwDotInterval));
        }

        /**
         * @param pgPartmanBgwDotRole Controls which role to use for pg_partman&#39;s scheduled background tasks. Example: `myrolename`.
         * 
         * @return builder
         * 
         */
        public Builder pgPartmanBgwDotRole(@Nullable Output<String> pgPartmanBgwDotRole) {
            $.pgPartmanBgwDotRole = pgPartmanBgwDotRole;
            return this;
        }

        /**
         * @param pgPartmanBgwDotRole Controls which role to use for pg_partman&#39;s scheduled background tasks. Example: `myrolename`.
         * 
         * @return builder
         * 
         */
        public Builder pgPartmanBgwDotRole(String pgPartmanBgwDotRole) {
            return pgPartmanBgwDotRole(Output.of(pgPartmanBgwDotRole));
        }

        /**
         * @param pgStatMonitorDotPgsmEnableQueryPlan Enables or disables query plan monitoring. Changing this parameter causes a service restart. Only available for PostgreSQL 13+.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorDotPgsmEnableQueryPlan(@Nullable Output<Boolean> pgStatMonitorDotPgsmEnableQueryPlan) {
            $.pgStatMonitorDotPgsmEnableQueryPlan = pgStatMonitorDotPgsmEnableQueryPlan;
            return this;
        }

        /**
         * @param pgStatMonitorDotPgsmEnableQueryPlan Enables or disables query plan monitoring. Changing this parameter causes a service restart. Only available for PostgreSQL 13+.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorDotPgsmEnableQueryPlan(Boolean pgStatMonitorDotPgsmEnableQueryPlan) {
            return pgStatMonitorDotPgsmEnableQueryPlan(Output.of(pgStatMonitorDotPgsmEnableQueryPlan));
        }

        /**
         * @param pgStatMonitorDotPgsmMaxBuckets Sets the maximum number of buckets. Changing this parameter causes a service restart. Only available for PostgreSQL 13+. Example: `10`.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorDotPgsmMaxBuckets(@Nullable Output<Integer> pgStatMonitorDotPgsmMaxBuckets) {
            $.pgStatMonitorDotPgsmMaxBuckets = pgStatMonitorDotPgsmMaxBuckets;
            return this;
        }

        /**
         * @param pgStatMonitorDotPgsmMaxBuckets Sets the maximum number of buckets. Changing this parameter causes a service restart. Only available for PostgreSQL 13+. Example: `10`.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorDotPgsmMaxBuckets(Integer pgStatMonitorDotPgsmMaxBuckets) {
            return pgStatMonitorDotPgsmMaxBuckets(Output.of(pgStatMonitorDotPgsmMaxBuckets));
        }

        /**
         * @param pgStatStatementsDotTrack Enum: `all`, `none`, `top`. Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default is `top`.
         * 
         * @return builder
         * 
         */
        public Builder pgStatStatementsDotTrack(@Nullable Output<String> pgStatStatementsDotTrack) {
            $.pgStatStatementsDotTrack = pgStatStatementsDotTrack;
            return this;
        }

        /**
         * @param pgStatStatementsDotTrack Enum: `all`, `none`, `top`. Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default is `top`.
         * 
         * @return builder
         * 
         */
        public Builder pgStatStatementsDotTrack(String pgStatStatementsDotTrack) {
            return pgStatStatementsDotTrack(Output.of(pgStatStatementsDotTrack));
        }

        /**
         * @param tempFileLimit PostgreSQL temporary file limit in KiB, -1 for unlimited. Example: `5000000`.
         * 
         * @return builder
         * 
         */
        public Builder tempFileLimit(@Nullable Output<Integer> tempFileLimit) {
            $.tempFileLimit = tempFileLimit;
            return this;
        }

        /**
         * @param tempFileLimit PostgreSQL temporary file limit in KiB, -1 for unlimited. Example: `5000000`.
         * 
         * @return builder
         * 
         */
        public Builder tempFileLimit(Integer tempFileLimit) {
            return tempFileLimit(Output.of(tempFileLimit));
        }

        /**
         * @param timezone PostgreSQL service timezone. Example: `Europe/Helsinki`.
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone PostgreSQL service timezone. Example: `Europe/Helsinki`.
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        /**
         * @param trackActivityQuerySize Specifies the number of bytes reserved to track the currently executing command for each active session. Changing this parameter causes a service restart. Example: `1024`.
         * 
         * @return builder
         * 
         */
        public Builder trackActivityQuerySize(@Nullable Output<Integer> trackActivityQuerySize) {
            $.trackActivityQuerySize = trackActivityQuerySize;
            return this;
        }

        /**
         * @param trackActivityQuerySize Specifies the number of bytes reserved to track the currently executing command for each active session. Changing this parameter causes a service restart. Example: `1024`.
         * 
         * @return builder
         * 
         */
        public Builder trackActivityQuerySize(Integer trackActivityQuerySize) {
            return trackActivityQuerySize(Output.of(trackActivityQuerySize));
        }

        /**
         * @param trackCommitTimestamp Enum: `off`, `on`. Record commit time of transactions. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder trackCommitTimestamp(@Nullable Output<String> trackCommitTimestamp) {
            $.trackCommitTimestamp = trackCommitTimestamp;
            return this;
        }

        /**
         * @param trackCommitTimestamp Enum: `off`, `on`. Record commit time of transactions. Changing this parameter causes a service restart.
         * 
         * @return builder
         * 
         */
        public Builder trackCommitTimestamp(String trackCommitTimestamp) {
            return trackCommitTimestamp(Output.of(trackCommitTimestamp));
        }

        /**
         * @param trackFunctions Enum: `all`, `none`, `pl`. Enables tracking of function call counts and time used.
         * 
         * @return builder
         * 
         */
        public Builder trackFunctions(@Nullable Output<String> trackFunctions) {
            $.trackFunctions = trackFunctions;
            return this;
        }

        /**
         * @param trackFunctions Enum: `all`, `none`, `pl`. Enables tracking of function call counts and time used.
         * 
         * @return builder
         * 
         */
        public Builder trackFunctions(String trackFunctions) {
            return trackFunctions(Output.of(trackFunctions));
        }

        /**
         * @param trackIoTiming Enum: `off`, `on`. Enables timing of database I/O calls. The default is `off`. When on, it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
         * 
         * @return builder
         * 
         */
        public Builder trackIoTiming(@Nullable Output<String> trackIoTiming) {
            $.trackIoTiming = trackIoTiming;
            return this;
        }

        /**
         * @param trackIoTiming Enum: `off`, `on`. Enables timing of database I/O calls. The default is `off`. When on, it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
         * 
         * @return builder
         * 
         */
        public Builder trackIoTiming(String trackIoTiming) {
            return trackIoTiming(Output.of(trackIoTiming));
        }

        /**
         * @param walSenderTimeout Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Example: `60000`.
         * 
         * @return builder
         * 
         */
        public Builder walSenderTimeout(@Nullable Output<Integer> walSenderTimeout) {
            $.walSenderTimeout = walSenderTimeout;
            return this;
        }

        /**
         * @param walSenderTimeout Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Example: `60000`.
         * 
         * @return builder
         * 
         */
        public Builder walSenderTimeout(Integer walSenderTimeout) {
            return walSenderTimeout(Output.of(walSenderTimeout));
        }

        /**
         * @param walWriterDelay WAL flush interval in milliseconds. The default is `200`. Setting this parameter to a lower value may negatively impact performance. Example: `50`.
         * 
         * @return builder
         * 
         */
        public Builder walWriterDelay(@Nullable Output<Integer> walWriterDelay) {
            $.walWriterDelay = walWriterDelay;
            return this;
        }

        /**
         * @param walWriterDelay WAL flush interval in milliseconds. The default is `200`. Setting this parameter to a lower value may negatively impact performance. Example: `50`.
         * 
         * @return builder
         * 
         */
        public Builder walWriterDelay(Integer walWriterDelay) {
            return walWriterDelay(Output.of(walWriterDelay));
        }

        public PgPgUserConfigPgArgs build() {
            return $;
        }
    }

}
