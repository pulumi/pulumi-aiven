// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.ProjectTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectState Empty = new ProjectState();

    /**
     * An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     * @deprecated
     * Use parent_id instead. This field will be removed in the next major release.
     * 
     */
    @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     * @deprecated
     * Use parent_id instead. This field will be removed in the next major release.
     * 
     */
    @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
     * 
     */
    @Import(name="addAccountOwnersAdminAccess")
    private @Nullable Output<Boolean> addAccountOwnersAdminAccess;

    /**
     * @return If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> addAccountOwnersAdminAccess() {
        return Optional.ofNullable(this.addAccountOwnersAdminAccess);
    }

    /**
     * The amount of platform credits available to the project. This could be your free trial or other promotional credits.
     * 
     */
    @Import(name="availableCredits")
    private @Nullable Output<String> availableCredits;

    /**
     * @return The amount of platform credits available to the project. This could be your free trial or other promotional credits.
     * 
     */
    public Optional<Output<String>> availableCredits() {
        return Optional.ofNullable(this.availableCredits);
    }

    /**
     * The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    @Import(name="billingGroup")
    private @Nullable Output<String> billingGroup;

    /**
     * @return The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public Optional<Output<String>> billingGroup() {
        return Optional.ofNullable(this.billingGroup);
    }

    /**
     * The CA certificate of the project. This is required for configuring clients that connect to certain services like Kafka.
     * 
     */
    @Import(name="caCert")
    private @Nullable Output<String> caCert;

    /**
     * @return The CA certificate of the project. This is required for configuring clients that connect to certain services like Kafka.
     * 
     */
    public Optional<Output<String>> caCert() {
        return Optional.ofNullable(this.caCert);
    }

    /**
     * is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    @Import(name="copyFromProject")
    private @Nullable Output<String> copyFromProject;

    /**
     * @return is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public Optional<Output<String>> copyFromProject() {
        return Optional.ofNullable(this.copyFromProject);
    }

    /**
     * Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
     * 
     */
    @Import(name="defaultCloud")
    private @Nullable Output<String> defaultCloud;

    /**
     * @return Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
     * 
     */
    public Optional<Output<String>> defaultCloud() {
        return Optional.ofNullable(this.defaultCloud);
    }

    /**
     * The current accumulated bill for this project in the current billing period.
     * 
     */
    @Import(name="estimatedBalance")
    private @Nullable Output<String> estimatedBalance;

    /**
     * @return The current accumulated bill for this project in the current billing period.
     * 
     */
    public Optional<Output<String>> estimatedBalance() {
        return Optional.ofNullable(this.estimatedBalance);
    }

    /**
     * An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * The method of invoicing used for payments for this project, e.g. `card`.
     * 
     */
    @Import(name="paymentMethod")
    private @Nullable Output<String> paymentMethod;

    /**
     * @return The method of invoicing used for payments for this project, e.g. `card`.
     * 
     */
    public Optional<Output<String>> paymentMethod() {
        return Optional.ofNullable(this.paymentMethod);
    }

    /**
     * Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Tags are key-value pairs that allow you to categorize projects.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ProjectTagArgs>> tags;

    /**
     * @return Tags are key-value pairs that allow you to categorize projects.
     * 
     */
    public Optional<Output<List<ProjectTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
     * 
     */
    @Import(name="technicalEmails")
    private @Nullable Output<List<String>> technicalEmails;

    /**
     * @return Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
     * 
     */
    public Optional<Output<List<String>>> technicalEmails() {
        return Optional.ofNullable(this.technicalEmails);
    }

    /**
     * Use the same billing group that is used in source project.
     * 
     */
    @Import(name="useSourceProjectBillingGroup")
    private @Nullable Output<Boolean> useSourceProjectBillingGroup;

    /**
     * @return Use the same billing group that is used in source project.
     * 
     */
    public Optional<Output<Boolean>> useSourceProjectBillingGroup() {
        return Optional.ofNullable(this.useSourceProjectBillingGroup);
    }

    private ProjectState() {}

    private ProjectState(ProjectState $) {
        this.accountId = $.accountId;
        this.addAccountOwnersAdminAccess = $.addAccountOwnersAdminAccess;
        this.availableCredits = $.availableCredits;
        this.billingGroup = $.billingGroup;
        this.caCert = $.caCert;
        this.copyFromProject = $.copyFromProject;
        this.defaultCloud = $.defaultCloud;
        this.estimatedBalance = $.estimatedBalance;
        this.parentId = $.parentId;
        this.paymentMethod = $.paymentMethod;
        this.project = $.project;
        this.tags = $.tags;
        this.technicalEmails = $.technicalEmails;
        this.useSourceProjectBillingGroup = $.useSourceProjectBillingGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectState $;

        public Builder() {
            $ = new ProjectState();
        }

        public Builder(ProjectState defaults) {
            $ = new ProjectState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         * @deprecated
         * Use parent_id instead. This field will be removed in the next major release.
         * 
         */
        @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId An optional property to link a project to an already existing account by using account ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         * @deprecated
         * Use parent_id instead. This field will be removed in the next major release.
         * 
         */
        @Deprecated /* Use parent_id instead. This field will be removed in the next major release. */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param addAccountOwnersAdminAccess If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder addAccountOwnersAdminAccess(@Nullable Output<Boolean> addAccountOwnersAdminAccess) {
            $.addAccountOwnersAdminAccess = addAccountOwnersAdminAccess;
            return this;
        }

        /**
         * @param addAccountOwnersAdminAccess If parent_id is set, grant account owner team admin access to the new project. The default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder addAccountOwnersAdminAccess(Boolean addAccountOwnersAdminAccess) {
            return addAccountOwnersAdminAccess(Output.of(addAccountOwnersAdminAccess));
        }

        /**
         * @param availableCredits The amount of platform credits available to the project. This could be your free trial or other promotional credits.
         * 
         * @return builder
         * 
         */
        public Builder availableCredits(@Nullable Output<String> availableCredits) {
            $.availableCredits = availableCredits;
            return this;
        }

        /**
         * @param availableCredits The amount of platform credits available to the project. This could be your free trial or other promotional credits.
         * 
         * @return builder
         * 
         */
        public Builder availableCredits(String availableCredits) {
            return availableCredits(Output.of(availableCredits));
        }

        /**
         * @param billingGroup The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder billingGroup(@Nullable Output<String> billingGroup) {
            $.billingGroup = billingGroup;
            return this;
        }

        /**
         * @param billingGroup The id of the billing group that is linked to this project. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder billingGroup(String billingGroup) {
            return billingGroup(Output.of(billingGroup));
        }

        /**
         * @param caCert The CA certificate of the project. This is required for configuring clients that connect to certain services like Kafka.
         * 
         * @return builder
         * 
         */
        public Builder caCert(@Nullable Output<String> caCert) {
            $.caCert = caCert;
            return this;
        }

        /**
         * @param caCert The CA certificate of the project. This is required for configuring clients that connect to certain services like Kafka.
         * 
         * @return builder
         * 
         */
        public Builder caCert(String caCert) {
            return caCert(Output.of(caCert));
        }

        /**
         * @param copyFromProject is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder copyFromProject(@Nullable Output<String> copyFromProject) {
            $.copyFromProject = copyFromProject;
            return this;
        }

        /**
         * @param copyFromProject is the name of another project used to copy billing information and some other project attributes like technical contacts from. This is mostly relevant when an existing project has billing type set to invoice and that needs to be copied over to a new project. (Setting billing is otherwise not allowed over the API.) This only has effect when the project is created. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder copyFromProject(String copyFromProject) {
            return copyFromProject(Output.of(copyFromProject));
        }

        /**
         * @param defaultCloud Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
         * 
         * @return builder
         * 
         */
        public Builder defaultCloud(@Nullable Output<String> defaultCloud) {
            $.defaultCloud = defaultCloud;
            return this;
        }

        /**
         * @param defaultCloud Defines the default cloud provider and region where services are hosted. This can be changed freely after the project is created. This will not affect existing services.
         * 
         * @return builder
         * 
         */
        public Builder defaultCloud(String defaultCloud) {
            return defaultCloud(Output.of(defaultCloud));
        }

        /**
         * @param estimatedBalance The current accumulated bill for this project in the current billing period.
         * 
         * @return builder
         * 
         */
        public Builder estimatedBalance(@Nullable Output<String> estimatedBalance) {
            $.estimatedBalance = estimatedBalance;
            return this;
        }

        /**
         * @param estimatedBalance The current accumulated bill for this project in the current billing period.
         * 
         * @return builder
         * 
         */
        public Builder estimatedBalance(String estimatedBalance) {
            return estimatedBalance(Output.of(estimatedBalance));
        }

        /**
         * @param parentId An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId An optional property to link a project to an already existing organization or account by using its ID. To set up proper dependencies please refer to this variable as a reference.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param paymentMethod The method of invoicing used for payments for this project, e.g. `card`.
         * 
         * @return builder
         * 
         */
        public Builder paymentMethod(@Nullable Output<String> paymentMethod) {
            $.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * @param paymentMethod The method of invoicing used for payments for this project, e.g. `card`.
         * 
         * @return builder
         * 
         */
        public Builder paymentMethod(String paymentMethod) {
            return paymentMethod(Output.of(paymentMethod));
        }

        /**
         * @param project Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Defines the name of the project. Name must be globally unique (between all Aiven customers) and cannot be changed later without destroying and re-creating the project, including all sub-resources.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param tags Tags are key-value pairs that allow you to categorize projects.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ProjectTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags are key-value pairs that allow you to categorize projects.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ProjectTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags are key-value pairs that allow you to categorize projects.
         * 
         * @return builder
         * 
         */
        public Builder tags(ProjectTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param technicalEmails Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
         * 
         * @return builder
         * 
         */
        public Builder technicalEmails(@Nullable Output<List<String>> technicalEmails) {
            $.technicalEmails = technicalEmails;
            return this;
        }

        /**
         * @param technicalEmails Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
         * 
         * @return builder
         * 
         */
        public Builder technicalEmails(List<String> technicalEmails) {
            return technicalEmails(Output.of(technicalEmails));
        }

        /**
         * @param technicalEmails Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability. It is  good practice to keep this up-to-date to be aware of any potential issues with your project.
         * 
         * @return builder
         * 
         */
        public Builder technicalEmails(String... technicalEmails) {
            return technicalEmails(List.of(technicalEmails));
        }

        /**
         * @param useSourceProjectBillingGroup Use the same billing group that is used in source project.
         * 
         * @return builder
         * 
         */
        public Builder useSourceProjectBillingGroup(@Nullable Output<Boolean> useSourceProjectBillingGroup) {
            $.useSourceProjectBillingGroup = useSourceProjectBillingGroup;
            return this;
        }

        /**
         * @param useSourceProjectBillingGroup Use the same billing group that is used in source project.
         * 
         * @return builder
         * 
         */
        public Builder useSourceProjectBillingGroup(Boolean useSourceProjectBillingGroup) {
            return useSourceProjectBillingGroup(Output.of(useSourceProjectBillingGroup));
        }

        public ProjectState build() {
            return $;
        }
    }

}
