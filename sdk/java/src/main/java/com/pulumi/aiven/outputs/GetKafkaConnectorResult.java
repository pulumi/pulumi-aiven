// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetKafkaConnectorTask;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKafkaConnectorResult {
    private final Map<String,String> config;
    private final String connectorName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String pluginAuthor;
    private final String pluginClass;
    private final String pluginDocUrl;
    private final String pluginTitle;
    private final String pluginType;
    private final String pluginVersion;
    private final String project;
    private final String serviceName;
    private final List<GetKafkaConnectorTask> tasks;

    @CustomType.Constructor
    private GetKafkaConnectorResult(
        @CustomType.Parameter("config") Map<String,String> config,
        @CustomType.Parameter("connectorName") String connectorName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("pluginAuthor") String pluginAuthor,
        @CustomType.Parameter("pluginClass") String pluginClass,
        @CustomType.Parameter("pluginDocUrl") String pluginDocUrl,
        @CustomType.Parameter("pluginTitle") String pluginTitle,
        @CustomType.Parameter("pluginType") String pluginType,
        @CustomType.Parameter("pluginVersion") String pluginVersion,
        @CustomType.Parameter("project") String project,
        @CustomType.Parameter("serviceName") String serviceName,
        @CustomType.Parameter("tasks") List<GetKafkaConnectorTask> tasks) {
        this.config = config;
        this.connectorName = connectorName;
        this.id = id;
        this.pluginAuthor = pluginAuthor;
        this.pluginClass = pluginClass;
        this.pluginDocUrl = pluginDocUrl;
        this.pluginTitle = pluginTitle;
        this.pluginType = pluginType;
        this.pluginVersion = pluginVersion;
        this.project = project;
        this.serviceName = serviceName;
        this.tasks = tasks;
    }

    public Map<String,String> config() {
        return this.config;
    }
    public String connectorName() {
        return this.connectorName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String pluginAuthor() {
        return this.pluginAuthor;
    }
    public String pluginClass() {
        return this.pluginClass;
    }
    public String pluginDocUrl() {
        return this.pluginDocUrl;
    }
    public String pluginTitle() {
        return this.pluginTitle;
    }
    public String pluginType() {
        return this.pluginType;
    }
    public String pluginVersion() {
        return this.pluginVersion;
    }
    public String project() {
        return this.project;
    }
    public String serviceName() {
        return this.serviceName;
    }
    public List<GetKafkaConnectorTask> tasks() {
        return this.tasks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaConnectorResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> config;
        private String connectorName;
        private String id;
        private String pluginAuthor;
        private String pluginClass;
        private String pluginDocUrl;
        private String pluginTitle;
        private String pluginType;
        private String pluginVersion;
        private String project;
        private String serviceName;
        private List<GetKafkaConnectorTask> tasks;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKafkaConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.config = defaults.config;
    	      this.connectorName = defaults.connectorName;
    	      this.id = defaults.id;
    	      this.pluginAuthor = defaults.pluginAuthor;
    	      this.pluginClass = defaults.pluginClass;
    	      this.pluginDocUrl = defaults.pluginDocUrl;
    	      this.pluginTitle = defaults.pluginTitle;
    	      this.pluginType = defaults.pluginType;
    	      this.pluginVersion = defaults.pluginVersion;
    	      this.project = defaults.project;
    	      this.serviceName = defaults.serviceName;
    	      this.tasks = defaults.tasks;
        }

        public Builder config(Map<String,String> config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        public Builder connectorName(String connectorName) {
            this.connectorName = Objects.requireNonNull(connectorName);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder pluginAuthor(String pluginAuthor) {
            this.pluginAuthor = Objects.requireNonNull(pluginAuthor);
            return this;
        }
        public Builder pluginClass(String pluginClass) {
            this.pluginClass = Objects.requireNonNull(pluginClass);
            return this;
        }
        public Builder pluginDocUrl(String pluginDocUrl) {
            this.pluginDocUrl = Objects.requireNonNull(pluginDocUrl);
            return this;
        }
        public Builder pluginTitle(String pluginTitle) {
            this.pluginTitle = Objects.requireNonNull(pluginTitle);
            return this;
        }
        public Builder pluginType(String pluginType) {
            this.pluginType = Objects.requireNonNull(pluginType);
            return this;
        }
        public Builder pluginVersion(String pluginVersion) {
            this.pluginVersion = Objects.requireNonNull(pluginVersion);
            return this;
        }
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder tasks(List<GetKafkaConnectorTask> tasks) {
            this.tasks = Objects.requireNonNull(tasks);
            return this;
        }
        public Builder tasks(GetKafkaConnectorTask... tasks) {
            return tasks(List.of(tasks));
        }        public GetKafkaConnectorResult build() {
            return new GetKafkaConnectorResult(config, connectorName, id, pluginAuthor, pluginClass, pluginDocUrl, pluginTitle, pluginType, pluginVersion, project, serviceName, tasks);
        }
    }
}
