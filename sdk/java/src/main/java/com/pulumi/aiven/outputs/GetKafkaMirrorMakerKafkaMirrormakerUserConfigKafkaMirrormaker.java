// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker {
    private @Nullable Boolean emitCheckpointsEnabled;
    private @Nullable Integer emitCheckpointsIntervalSeconds;
    private @Nullable Boolean refreshGroupsEnabled;
    private @Nullable Integer refreshGroupsIntervalSeconds;
    private @Nullable Boolean refreshTopicsEnabled;
    private @Nullable Integer refreshTopicsIntervalSeconds;
    private @Nullable Boolean syncGroupOffsetsEnabled;
    private @Nullable Integer syncGroupOffsetsIntervalSeconds;
    private @Nullable Boolean syncTopicConfigsEnabled;
    private @Nullable Integer tasksMaxPerCpu;

    private GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker() {}
    public Optional<Boolean> emitCheckpointsEnabled() {
        return Optional.ofNullable(this.emitCheckpointsEnabled);
    }
    public Optional<Integer> emitCheckpointsIntervalSeconds() {
        return Optional.ofNullable(this.emitCheckpointsIntervalSeconds);
    }
    public Optional<Boolean> refreshGroupsEnabled() {
        return Optional.ofNullable(this.refreshGroupsEnabled);
    }
    public Optional<Integer> refreshGroupsIntervalSeconds() {
        return Optional.ofNullable(this.refreshGroupsIntervalSeconds);
    }
    public Optional<Boolean> refreshTopicsEnabled() {
        return Optional.ofNullable(this.refreshTopicsEnabled);
    }
    public Optional<Integer> refreshTopicsIntervalSeconds() {
        return Optional.ofNullable(this.refreshTopicsIntervalSeconds);
    }
    public Optional<Boolean> syncGroupOffsetsEnabled() {
        return Optional.ofNullable(this.syncGroupOffsetsEnabled);
    }
    public Optional<Integer> syncGroupOffsetsIntervalSeconds() {
        return Optional.ofNullable(this.syncGroupOffsetsIntervalSeconds);
    }
    public Optional<Boolean> syncTopicConfigsEnabled() {
        return Optional.ofNullable(this.syncTopicConfigsEnabled);
    }
    public Optional<Integer> tasksMaxPerCpu() {
        return Optional.ofNullable(this.tasksMaxPerCpu);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean emitCheckpointsEnabled;
        private @Nullable Integer emitCheckpointsIntervalSeconds;
        private @Nullable Boolean refreshGroupsEnabled;
        private @Nullable Integer refreshGroupsIntervalSeconds;
        private @Nullable Boolean refreshTopicsEnabled;
        private @Nullable Integer refreshTopicsIntervalSeconds;
        private @Nullable Boolean syncGroupOffsetsEnabled;
        private @Nullable Integer syncGroupOffsetsIntervalSeconds;
        private @Nullable Boolean syncTopicConfigsEnabled;
        private @Nullable Integer tasksMaxPerCpu;
        public Builder() {}
        public Builder(GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.emitCheckpointsEnabled = defaults.emitCheckpointsEnabled;
    	      this.emitCheckpointsIntervalSeconds = defaults.emitCheckpointsIntervalSeconds;
    	      this.refreshGroupsEnabled = defaults.refreshGroupsEnabled;
    	      this.refreshGroupsIntervalSeconds = defaults.refreshGroupsIntervalSeconds;
    	      this.refreshTopicsEnabled = defaults.refreshTopicsEnabled;
    	      this.refreshTopicsIntervalSeconds = defaults.refreshTopicsIntervalSeconds;
    	      this.syncGroupOffsetsEnabled = defaults.syncGroupOffsetsEnabled;
    	      this.syncGroupOffsetsIntervalSeconds = defaults.syncGroupOffsetsIntervalSeconds;
    	      this.syncTopicConfigsEnabled = defaults.syncTopicConfigsEnabled;
    	      this.tasksMaxPerCpu = defaults.tasksMaxPerCpu;
        }

        @CustomType.Setter
        public Builder emitCheckpointsEnabled(@Nullable Boolean emitCheckpointsEnabled) {
            this.emitCheckpointsEnabled = emitCheckpointsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder emitCheckpointsIntervalSeconds(@Nullable Integer emitCheckpointsIntervalSeconds) {
            this.emitCheckpointsIntervalSeconds = emitCheckpointsIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder refreshGroupsEnabled(@Nullable Boolean refreshGroupsEnabled) {
            this.refreshGroupsEnabled = refreshGroupsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder refreshGroupsIntervalSeconds(@Nullable Integer refreshGroupsIntervalSeconds) {
            this.refreshGroupsIntervalSeconds = refreshGroupsIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTopicsEnabled(@Nullable Boolean refreshTopicsEnabled) {
            this.refreshTopicsEnabled = refreshTopicsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTopicsIntervalSeconds(@Nullable Integer refreshTopicsIntervalSeconds) {
            this.refreshTopicsIntervalSeconds = refreshTopicsIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder syncGroupOffsetsEnabled(@Nullable Boolean syncGroupOffsetsEnabled) {
            this.syncGroupOffsetsEnabled = syncGroupOffsetsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder syncGroupOffsetsIntervalSeconds(@Nullable Integer syncGroupOffsetsIntervalSeconds) {
            this.syncGroupOffsetsIntervalSeconds = syncGroupOffsetsIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder syncTopicConfigsEnabled(@Nullable Boolean syncTopicConfigsEnabled) {
            this.syncTopicConfigsEnabled = syncTopicConfigsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder tasksMaxPerCpu(@Nullable Integer tasksMaxPerCpu) {
            this.tasksMaxPerCpu = tasksMaxPerCpu;
            return this;
        }
        public GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker build() {
            final var o = new GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker();
            o.emitCheckpointsEnabled = emitCheckpointsEnabled;
            o.emitCheckpointsIntervalSeconds = emitCheckpointsIntervalSeconds;
            o.refreshGroupsEnabled = refreshGroupsEnabled;
            o.refreshGroupsIntervalSeconds = refreshGroupsIntervalSeconds;
            o.refreshTopicsEnabled = refreshTopicsEnabled;
            o.refreshTopicsIntervalSeconds = refreshTopicsIntervalSeconds;
            o.syncGroupOffsetsEnabled = syncGroupOffsetsEnabled;
            o.syncGroupOffsetsIntervalSeconds = syncGroupOffsetsIntervalSeconds;
            o.syncTopicConfigsEnabled = syncTopicConfigsEnabled;
            o.tasksMaxPerCpu = tasksMaxPerCpu;
            return o;
        }
    }
}
