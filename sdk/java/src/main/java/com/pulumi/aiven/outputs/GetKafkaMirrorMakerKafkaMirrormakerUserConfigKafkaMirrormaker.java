// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker {
    /**
     * @return Timeout for administrative tasks, e.g. detecting new topics, loading of consumer group and offsets. Defaults to 60000 milliseconds (1 minute).
     * 
     */
    private @Nullable Integer adminTimeoutMs;
    /**
     * @return Whether to emit consumer group offset checkpoints to target cluster periodically (default: true).
     * 
     */
    private @Nullable Boolean emitCheckpointsEnabled;
    /**
     * @return Frequency at which consumer group offset checkpoints are emitted (default: 60, every minute). Example: `60`.
     * 
     */
    private @Nullable Integer emitCheckpointsIntervalSeconds;
    /**
     * @return Consumer groups to replicate. Supports comma-separated group IDs and regexes. Example: `.*`.
     * 
     */
    private @Nullable String groups;
    /**
     * @return Exclude groups. Supports comma-separated group IDs and regexes. Excludes take precedence over includes. Example: `console-consumer-.*,connect-.*,__.*`.
     * 
     */
    private @Nullable String groupsExclude;
    /**
     * @return How out-of-sync a remote partition can be before it is resynced. Example: `100`.
     * 
     */
    private @Nullable Integer offsetLagMax;
    /**
     * @return Whether to periodically check for new consumer groups. Defaults to `true`.
     * 
     */
    private @Nullable Boolean refreshGroupsEnabled;
    /**
     * @return Frequency of consumer group refresh in seconds. Defaults to 600 seconds (10 minutes).
     * 
     */
    private @Nullable Integer refreshGroupsIntervalSeconds;
    /**
     * @return Whether to periodically check for new topics and partitions. Defaults to `true`.
     * 
     */
    private @Nullable Boolean refreshTopicsEnabled;
    /**
     * @return Frequency of topic and partitions refresh in seconds. Defaults to 600 seconds (10 minutes).
     * 
     */
    private @Nullable Integer refreshTopicsIntervalSeconds;
    /**
     * @return Whether to periodically write the translated offsets of replicated consumer groups (in the source cluster) to __consumer_offsets topic in target cluster, as long as no active consumers in that group are connected to the target cluster.
     * 
     */
    private @Nullable Boolean syncGroupOffsetsEnabled;
    /**
     * @return Frequency at which consumer group offsets are synced (default: 60, every minute). Example: `60`.
     * 
     */
    private @Nullable Integer syncGroupOffsetsIntervalSeconds;
    /**
     * @return Whether to periodically configure remote topics to match their corresponding upstream topics.
     * 
     */
    private @Nullable Boolean syncTopicConfigsEnabled;
    /**
     * @return `tasks.max` is set to this multiplied by the number of CPUs in the service. Default: `1`.
     * 
     */
    private @Nullable Integer tasksMaxPerCpu;

    private GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker() {}
    /**
     * @return Timeout for administrative tasks, e.g. detecting new topics, loading of consumer group and offsets. Defaults to 60000 milliseconds (1 minute).
     * 
     */
    public Optional<Integer> adminTimeoutMs() {
        return Optional.ofNullable(this.adminTimeoutMs);
    }
    /**
     * @return Whether to emit consumer group offset checkpoints to target cluster periodically (default: true).
     * 
     */
    public Optional<Boolean> emitCheckpointsEnabled() {
        return Optional.ofNullable(this.emitCheckpointsEnabled);
    }
    /**
     * @return Frequency at which consumer group offset checkpoints are emitted (default: 60, every minute). Example: `60`.
     * 
     */
    public Optional<Integer> emitCheckpointsIntervalSeconds() {
        return Optional.ofNullable(this.emitCheckpointsIntervalSeconds);
    }
    /**
     * @return Consumer groups to replicate. Supports comma-separated group IDs and regexes. Example: `.*`.
     * 
     */
    public Optional<String> groups() {
        return Optional.ofNullable(this.groups);
    }
    /**
     * @return Exclude groups. Supports comma-separated group IDs and regexes. Excludes take precedence over includes. Example: `console-consumer-.*,connect-.*,__.*`.
     * 
     */
    public Optional<String> groupsExclude() {
        return Optional.ofNullable(this.groupsExclude);
    }
    /**
     * @return How out-of-sync a remote partition can be before it is resynced. Example: `100`.
     * 
     */
    public Optional<Integer> offsetLagMax() {
        return Optional.ofNullable(this.offsetLagMax);
    }
    /**
     * @return Whether to periodically check for new consumer groups. Defaults to `true`.
     * 
     */
    public Optional<Boolean> refreshGroupsEnabled() {
        return Optional.ofNullable(this.refreshGroupsEnabled);
    }
    /**
     * @return Frequency of consumer group refresh in seconds. Defaults to 600 seconds (10 minutes).
     * 
     */
    public Optional<Integer> refreshGroupsIntervalSeconds() {
        return Optional.ofNullable(this.refreshGroupsIntervalSeconds);
    }
    /**
     * @return Whether to periodically check for new topics and partitions. Defaults to `true`.
     * 
     */
    public Optional<Boolean> refreshTopicsEnabled() {
        return Optional.ofNullable(this.refreshTopicsEnabled);
    }
    /**
     * @return Frequency of topic and partitions refresh in seconds. Defaults to 600 seconds (10 minutes).
     * 
     */
    public Optional<Integer> refreshTopicsIntervalSeconds() {
        return Optional.ofNullable(this.refreshTopicsIntervalSeconds);
    }
    /**
     * @return Whether to periodically write the translated offsets of replicated consumer groups (in the source cluster) to __consumer_offsets topic in target cluster, as long as no active consumers in that group are connected to the target cluster.
     * 
     */
    public Optional<Boolean> syncGroupOffsetsEnabled() {
        return Optional.ofNullable(this.syncGroupOffsetsEnabled);
    }
    /**
     * @return Frequency at which consumer group offsets are synced (default: 60, every minute). Example: `60`.
     * 
     */
    public Optional<Integer> syncGroupOffsetsIntervalSeconds() {
        return Optional.ofNullable(this.syncGroupOffsetsIntervalSeconds);
    }
    /**
     * @return Whether to periodically configure remote topics to match their corresponding upstream topics.
     * 
     */
    public Optional<Boolean> syncTopicConfigsEnabled() {
        return Optional.ofNullable(this.syncTopicConfigsEnabled);
    }
    /**
     * @return `tasks.max` is set to this multiplied by the number of CPUs in the service. Default: `1`.
     * 
     */
    public Optional<Integer> tasksMaxPerCpu() {
        return Optional.ofNullable(this.tasksMaxPerCpu);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer adminTimeoutMs;
        private @Nullable Boolean emitCheckpointsEnabled;
        private @Nullable Integer emitCheckpointsIntervalSeconds;
        private @Nullable String groups;
        private @Nullable String groupsExclude;
        private @Nullable Integer offsetLagMax;
        private @Nullable Boolean refreshGroupsEnabled;
        private @Nullable Integer refreshGroupsIntervalSeconds;
        private @Nullable Boolean refreshTopicsEnabled;
        private @Nullable Integer refreshTopicsIntervalSeconds;
        private @Nullable Boolean syncGroupOffsetsEnabled;
        private @Nullable Integer syncGroupOffsetsIntervalSeconds;
        private @Nullable Boolean syncTopicConfigsEnabled;
        private @Nullable Integer tasksMaxPerCpu;
        public Builder() {}
        public Builder(GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminTimeoutMs = defaults.adminTimeoutMs;
    	      this.emitCheckpointsEnabled = defaults.emitCheckpointsEnabled;
    	      this.emitCheckpointsIntervalSeconds = defaults.emitCheckpointsIntervalSeconds;
    	      this.groups = defaults.groups;
    	      this.groupsExclude = defaults.groupsExclude;
    	      this.offsetLagMax = defaults.offsetLagMax;
    	      this.refreshGroupsEnabled = defaults.refreshGroupsEnabled;
    	      this.refreshGroupsIntervalSeconds = defaults.refreshGroupsIntervalSeconds;
    	      this.refreshTopicsEnabled = defaults.refreshTopicsEnabled;
    	      this.refreshTopicsIntervalSeconds = defaults.refreshTopicsIntervalSeconds;
    	      this.syncGroupOffsetsEnabled = defaults.syncGroupOffsetsEnabled;
    	      this.syncGroupOffsetsIntervalSeconds = defaults.syncGroupOffsetsIntervalSeconds;
    	      this.syncTopicConfigsEnabled = defaults.syncTopicConfigsEnabled;
    	      this.tasksMaxPerCpu = defaults.tasksMaxPerCpu;
        }

        @CustomType.Setter
        public Builder adminTimeoutMs(@Nullable Integer adminTimeoutMs) {

            this.adminTimeoutMs = adminTimeoutMs;
            return this;
        }
        @CustomType.Setter
        public Builder emitCheckpointsEnabled(@Nullable Boolean emitCheckpointsEnabled) {

            this.emitCheckpointsEnabled = emitCheckpointsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder emitCheckpointsIntervalSeconds(@Nullable Integer emitCheckpointsIntervalSeconds) {

            this.emitCheckpointsIntervalSeconds = emitCheckpointsIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder groups(@Nullable String groups) {

            this.groups = groups;
            return this;
        }
        @CustomType.Setter
        public Builder groupsExclude(@Nullable String groupsExclude) {

            this.groupsExclude = groupsExclude;
            return this;
        }
        @CustomType.Setter
        public Builder offsetLagMax(@Nullable Integer offsetLagMax) {

            this.offsetLagMax = offsetLagMax;
            return this;
        }
        @CustomType.Setter
        public Builder refreshGroupsEnabled(@Nullable Boolean refreshGroupsEnabled) {

            this.refreshGroupsEnabled = refreshGroupsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder refreshGroupsIntervalSeconds(@Nullable Integer refreshGroupsIntervalSeconds) {

            this.refreshGroupsIntervalSeconds = refreshGroupsIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTopicsEnabled(@Nullable Boolean refreshTopicsEnabled) {

            this.refreshTopicsEnabled = refreshTopicsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTopicsIntervalSeconds(@Nullable Integer refreshTopicsIntervalSeconds) {

            this.refreshTopicsIntervalSeconds = refreshTopicsIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder syncGroupOffsetsEnabled(@Nullable Boolean syncGroupOffsetsEnabled) {

            this.syncGroupOffsetsEnabled = syncGroupOffsetsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder syncGroupOffsetsIntervalSeconds(@Nullable Integer syncGroupOffsetsIntervalSeconds) {

            this.syncGroupOffsetsIntervalSeconds = syncGroupOffsetsIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder syncTopicConfigsEnabled(@Nullable Boolean syncTopicConfigsEnabled) {

            this.syncTopicConfigsEnabled = syncTopicConfigsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder tasksMaxPerCpu(@Nullable Integer tasksMaxPerCpu) {

            this.tasksMaxPerCpu = tasksMaxPerCpu;
            return this;
        }
        public GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker build() {
            final var _resultValue = new GetKafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormaker();
            _resultValue.adminTimeoutMs = adminTimeoutMs;
            _resultValue.emitCheckpointsEnabled = emitCheckpointsEnabled;
            _resultValue.emitCheckpointsIntervalSeconds = emitCheckpointsIntervalSeconds;
            _resultValue.groups = groups;
            _resultValue.groupsExclude = groupsExclude;
            _resultValue.offsetLagMax = offsetLagMax;
            _resultValue.refreshGroupsEnabled = refreshGroupsEnabled;
            _resultValue.refreshGroupsIntervalSeconds = refreshGroupsIntervalSeconds;
            _resultValue.refreshTopicsEnabled = refreshTopicsEnabled;
            _resultValue.refreshTopicsIntervalSeconds = refreshTopicsIntervalSeconds;
            _resultValue.syncGroupOffsetsEnabled = syncGroupOffsetsEnabled;
            _resultValue.syncGroupOffsetsIntervalSeconds = syncGroupOffsetsIntervalSeconds;
            _resultValue.syncTopicConfigsEnabled = syncTopicConfigsEnabled;
            _resultValue.tasksMaxPerCpu = tasksMaxPerCpu;
            return _resultValue;
        }
    }
}
