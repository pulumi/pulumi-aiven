// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GovernanceAccessAccessDataAclArgs extends com.pulumi.resources.ResourceArgs {

    public static final GovernanceAccessAccessDataAclArgs Empty = new GovernanceAccessAccessDataAclArgs();

    /**
     * The IP address from which a principal is allowed or denied access to the resource. Use `*` for all hosts. Maximum length: `256`. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The IP address from which a principal is allowed or denied access to the resource. Use `*` for all hosts. Maximum length: `256`. Changing this property forces recreation of the resource.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Acl ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Acl ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * An enumeration. The possible values are `Read` and `Write`. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="operation", required=true)
    private Output<String> operation;

    /**
     * @return An enumeration. The possible values are `Read` and `Write`. Changing this property forces recreation of the resource.
     * 
     */
    public Output<String> operation() {
        return this.operation;
    }

    /**
     * An enumeration. The possible value is `LITERAL`.
     * 
     */
    @Import(name="patternType")
    private @Nullable Output<String> patternType;

    /**
     * @return An enumeration. The possible value is `LITERAL`.
     * 
     */
    public Optional<Output<String>> patternType() {
        return Optional.ofNullable(this.patternType);
    }

    /**
     * An enumeration. The possible value is `ALLOW`. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="permissionType", required=true)
    private Output<String> permissionType;

    /**
     * @return An enumeration. The possible value is `ALLOW`. Changing this property forces recreation of the resource.
     * 
     */
    public Output<String> permissionType() {
        return this.permissionType;
    }

    /**
     * Acl principal.
     * 
     */
    @Import(name="principal")
    private @Nullable Output<String> principal;

    /**
     * @return Acl principal.
     * 
     */
    public Optional<Output<String>> principal() {
        return Optional.ofNullable(this.principal);
    }

    /**
     * Acl resource name. Maximum length: `256`. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return Acl resource name. Maximum length: `256`. Changing this property forces recreation of the resource.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    /**
     * An enumeration. The possible value is `Topic`. Changing this property forces recreation of the resource.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return An enumeration. The possible value is `Topic`. Changing this property forces recreation of the resource.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    private GovernanceAccessAccessDataAclArgs() {}

    private GovernanceAccessAccessDataAclArgs(GovernanceAccessAccessDataAclArgs $) {
        this.host = $.host;
        this.id = $.id;
        this.operation = $.operation;
        this.patternType = $.patternType;
        this.permissionType = $.permissionType;
        this.principal = $.principal;
        this.resourceName = $.resourceName;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GovernanceAccessAccessDataAclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GovernanceAccessAccessDataAclArgs $;

        public Builder() {
            $ = new GovernanceAccessAccessDataAclArgs();
        }

        public Builder(GovernanceAccessAccessDataAclArgs defaults) {
            $ = new GovernanceAccessAccessDataAclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host The IP address from which a principal is allowed or denied access to the resource. Use `*` for all hosts. Maximum length: `256`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The IP address from which a principal is allowed or denied access to the resource. Use `*` for all hosts. Maximum length: `256`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param id Acl ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Acl ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param operation An enumeration. The possible values are `Read` and `Write`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder operation(Output<String> operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param operation An enumeration. The possible values are `Read` and `Write`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            return operation(Output.of(operation));
        }

        /**
         * @param patternType An enumeration. The possible value is `LITERAL`.
         * 
         * @return builder
         * 
         */
        public Builder patternType(@Nullable Output<String> patternType) {
            $.patternType = patternType;
            return this;
        }

        /**
         * @param patternType An enumeration. The possible value is `LITERAL`.
         * 
         * @return builder
         * 
         */
        public Builder patternType(String patternType) {
            return patternType(Output.of(patternType));
        }

        /**
         * @param permissionType An enumeration. The possible value is `ALLOW`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionType(Output<String> permissionType) {
            $.permissionType = permissionType;
            return this;
        }

        /**
         * @param permissionType An enumeration. The possible value is `ALLOW`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionType(String permissionType) {
            return permissionType(Output.of(permissionType));
        }

        /**
         * @param principal Acl principal.
         * 
         * @return builder
         * 
         */
        public Builder principal(@Nullable Output<String> principal) {
            $.principal = principal;
            return this;
        }

        /**
         * @param principal Acl principal.
         * 
         * @return builder
         * 
         */
        public Builder principal(String principal) {
            return principal(Output.of(principal));
        }

        /**
         * @param resourceName Acl resource name. Maximum length: `256`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName Acl resource name. Maximum length: `256`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceType An enumeration. The possible value is `Topic`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType An enumeration. The possible value is `Topic`. Changing this property forces recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public GovernanceAccessAccessDataAclArgs build() {
            if ($.operation == null) {
                throw new MissingRequiredPropertyException("GovernanceAccessAccessDataAclArgs", "operation");
            }
            if ($.permissionType == null) {
                throw new MissingRequiredPropertyException("GovernanceAccessAccessDataAclArgs", "permissionType");
            }
            if ($.resourceName == null) {
                throw new MissingRequiredPropertyException("GovernanceAccessAccessDataAclArgs", "resourceName");
            }
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("GovernanceAccessAccessDataAclArgs", "resourceType");
            }
            return $;
        }
    }

}
