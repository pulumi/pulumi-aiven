// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetServiceIntegrationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceIntegrationArgs Empty = new GetServiceIntegrationArgs();

    /**
     * Destination service for the integration (if any)
     * 
     */
    @Import(name="destinationServiceName", required=true)
    private Output<String> destinationServiceName;

    /**
     * @return Destination service for the integration (if any)
     * 
     */
    public Output<String> destinationServiceName() {
        return this.destinationServiceName;
    }

    /**
     * Type of the service integration. Possible values: `alertmanager`, `autoscaler`, `caching`, `cassandra_cross_service_cluster`, `clickhouse_credentials`, `clickhouse_kafka`, `clickhouse_postgresql`, `dashboard`, `datadog`, `datasource`, `external_aws_cloudwatch_logs`, `external_aws_cloudwatch_metrics`, `external_elasticsearch_logs`, `external_google_cloud_logging`, `external_opensearch_logs`, `flink`, `flink_external_bigquery`, `flink_external_kafka`, `internal_connectivity`, `jolokia`, `kafka_connect`, `kafka_connect_postgresql`, `kafka_logs`, `kafka_mirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearch_cross_cluster_replication`, `opensearch_cross_cluster_search`, `prometheus`, `read_replica`, `rsyslog`, `schema_registry_proxy`, `stresstester`, `thanoscompactor`, `thanosquery`, `thanosstore`, `vector`, `vmalert`
     * 
     */
    @Import(name="integrationType", required=true)
    private Output<String> integrationType;

    /**
     * @return Type of the service integration. Possible values: `alertmanager`, `autoscaler`, `caching`, `cassandra_cross_service_cluster`, `clickhouse_credentials`, `clickhouse_kafka`, `clickhouse_postgresql`, `dashboard`, `datadog`, `datasource`, `external_aws_cloudwatch_logs`, `external_aws_cloudwatch_metrics`, `external_elasticsearch_logs`, `external_google_cloud_logging`, `external_opensearch_logs`, `flink`, `flink_external_bigquery`, `flink_external_kafka`, `internal_connectivity`, `jolokia`, `kafka_connect`, `kafka_connect_postgresql`, `kafka_logs`, `kafka_mirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearch_cross_cluster_replication`, `opensearch_cross_cluster_search`, `prometheus`, `read_replica`, `rsyslog`, `schema_registry_proxy`, `stresstester`, `thanoscompactor`, `thanosquery`, `thanosstore`, `vector`, `vmalert`
     * 
     */
    public Output<String> integrationType() {
        return this.integrationType;
    }

    /**
     * Project the integration belongs to
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Project the integration belongs to
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Source service for the integration (if any)
     * 
     */
    @Import(name="sourceServiceName", required=true)
    private Output<String> sourceServiceName;

    /**
     * @return Source service for the integration (if any)
     * 
     */
    public Output<String> sourceServiceName() {
        return this.sourceServiceName;
    }

    private GetServiceIntegrationArgs() {}

    private GetServiceIntegrationArgs(GetServiceIntegrationArgs $) {
        this.destinationServiceName = $.destinationServiceName;
        this.integrationType = $.integrationType;
        this.project = $.project;
        this.sourceServiceName = $.sourceServiceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceIntegrationArgs $;

        public Builder() {
            $ = new GetServiceIntegrationArgs();
        }

        public Builder(GetServiceIntegrationArgs defaults) {
            $ = new GetServiceIntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationServiceName Destination service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder destinationServiceName(Output<String> destinationServiceName) {
            $.destinationServiceName = destinationServiceName;
            return this;
        }

        /**
         * @param destinationServiceName Destination service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder destinationServiceName(String destinationServiceName) {
            return destinationServiceName(Output.of(destinationServiceName));
        }

        /**
         * @param integrationType Type of the service integration. Possible values: `alertmanager`, `autoscaler`, `caching`, `cassandra_cross_service_cluster`, `clickhouse_credentials`, `clickhouse_kafka`, `clickhouse_postgresql`, `dashboard`, `datadog`, `datasource`, `external_aws_cloudwatch_logs`, `external_aws_cloudwatch_metrics`, `external_elasticsearch_logs`, `external_google_cloud_logging`, `external_opensearch_logs`, `flink`, `flink_external_bigquery`, `flink_external_kafka`, `internal_connectivity`, `jolokia`, `kafka_connect`, `kafka_connect_postgresql`, `kafka_logs`, `kafka_mirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearch_cross_cluster_replication`, `opensearch_cross_cluster_search`, `prometheus`, `read_replica`, `rsyslog`, `schema_registry_proxy`, `stresstester`, `thanoscompactor`, `thanosquery`, `thanosstore`, `vector`, `vmalert`
         * 
         * @return builder
         * 
         */
        public Builder integrationType(Output<String> integrationType) {
            $.integrationType = integrationType;
            return this;
        }

        /**
         * @param integrationType Type of the service integration. Possible values: `alertmanager`, `autoscaler`, `caching`, `cassandra_cross_service_cluster`, `clickhouse_credentials`, `clickhouse_kafka`, `clickhouse_postgresql`, `dashboard`, `datadog`, `datasource`, `external_aws_cloudwatch_logs`, `external_aws_cloudwatch_metrics`, `external_elasticsearch_logs`, `external_google_cloud_logging`, `external_opensearch_logs`, `flink`, `flink_external_bigquery`, `flink_external_kafka`, `internal_connectivity`, `jolokia`, `kafka_connect`, `kafka_connect_postgresql`, `kafka_logs`, `kafka_mirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearch_cross_cluster_replication`, `opensearch_cross_cluster_search`, `prometheus`, `read_replica`, `rsyslog`, `schema_registry_proxy`, `stresstester`, `thanoscompactor`, `thanosquery`, `thanosstore`, `vector`, `vmalert`
         * 
         * @return builder
         * 
         */
        public Builder integrationType(String integrationType) {
            return integrationType(Output.of(integrationType));
        }

        /**
         * @param project Project the integration belongs to
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project the integration belongs to
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sourceServiceName Source service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder sourceServiceName(Output<String> sourceServiceName) {
            $.sourceServiceName = sourceServiceName;
            return this;
        }

        /**
         * @param sourceServiceName Source service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder sourceServiceName(String sourceServiceName) {
            return sourceServiceName(Output.of(sourceServiceName));
        }

        public GetServiceIntegrationArgs build() {
            if ($.destinationServiceName == null) {
                throw new MissingRequiredPropertyException("GetServiceIntegrationArgs", "destinationServiceName");
            }
            if ($.integrationType == null) {
                throw new MissingRequiredPropertyException("GetServiceIntegrationArgs", "integrationType");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetServiceIntegrationArgs", "project");
            }
            if ($.sourceServiceName == null) {
                throw new MissingRequiredPropertyException("GetServiceIntegrationArgs", "sourceServiceName");
            }
            return $;
        }
    }

}
