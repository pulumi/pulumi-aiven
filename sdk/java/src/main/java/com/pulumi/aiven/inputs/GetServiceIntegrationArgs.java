// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetServiceIntegrationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceIntegrationArgs Empty = new GetServiceIntegrationArgs();

    /**
     * Destination service for the integration (if any)
     * 
     */
    @Import(name="destinationServiceName", required=true)
    private Output<String> destinationServiceName;

    /**
     * @return Destination service for the integration (if any)
     * 
     */
    public Output<String> destinationServiceName() {
        return this.destinationServiceName;
    }

    /**
     * Type of the service integration
     * 
     */
    @Import(name="integrationType", required=true)
    private Output<String> integrationType;

    /**
     * @return Type of the service integration
     * 
     */
    public Output<String> integrationType() {
        return this.integrationType;
    }

    /**
     * Project the integration belongs to
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Project the integration belongs to
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Source service for the integration (if any)
     * 
     */
    @Import(name="sourceServiceName", required=true)
    private Output<String> sourceServiceName;

    /**
     * @return Source service for the integration (if any)
     * 
     */
    public Output<String> sourceServiceName() {
        return this.sourceServiceName;
    }

    private GetServiceIntegrationArgs() {}

    private GetServiceIntegrationArgs(GetServiceIntegrationArgs $) {
        this.destinationServiceName = $.destinationServiceName;
        this.integrationType = $.integrationType;
        this.project = $.project;
        this.sourceServiceName = $.sourceServiceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceIntegrationArgs $;

        public Builder() {
            $ = new GetServiceIntegrationArgs();
        }

        public Builder(GetServiceIntegrationArgs defaults) {
            $ = new GetServiceIntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationServiceName Destination service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder destinationServiceName(Output<String> destinationServiceName) {
            $.destinationServiceName = destinationServiceName;
            return this;
        }

        /**
         * @param destinationServiceName Destination service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder destinationServiceName(String destinationServiceName) {
            return destinationServiceName(Output.of(destinationServiceName));
        }

        /**
         * @param integrationType Type of the service integration
         * 
         * @return builder
         * 
         */
        public Builder integrationType(Output<String> integrationType) {
            $.integrationType = integrationType;
            return this;
        }

        /**
         * @param integrationType Type of the service integration
         * 
         * @return builder
         * 
         */
        public Builder integrationType(String integrationType) {
            return integrationType(Output.of(integrationType));
        }

        /**
         * @param project Project the integration belongs to
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project the integration belongs to
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sourceServiceName Source service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder sourceServiceName(Output<String> sourceServiceName) {
            $.sourceServiceName = sourceServiceName;
            return this;
        }

        /**
         * @param sourceServiceName Source service for the integration (if any)
         * 
         * @return builder
         * 
         */
        public Builder sourceServiceName(String sourceServiceName) {
            return sourceServiceName(Output.of(sourceServiceName));
        }

        public GetServiceIntegrationArgs build() {
            $.destinationServiceName = Objects.requireNonNull($.destinationServiceName, "expected parameter 'destinationServiceName' to be non-null");
            $.integrationType = Objects.requireNonNull($.integrationType, "expected parameter 'integrationType' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.sourceServiceName = Objects.requireNonNull($.sourceServiceName, "expected parameter 'sourceServiceName' to be non-null");
            return $;
        }
    }

}
