// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMirrorMakerReplicationFlowResult {
    private final Boolean emitHeartbeatsEnabled;
    private final Boolean enable;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String project;
    private final String replicationPolicyClass;
    private final String serviceName;
    private final String sourceCluster;
    private final Boolean syncGroupOffsetsEnabled;
    private final Integer syncGroupOffsetsIntervalSeconds;
    private final String targetCluster;
    private final List<String> topics;
    private final List<String> topicsBlacklists;

    @CustomType.Constructor
    private GetMirrorMakerReplicationFlowResult(
        @CustomType.Parameter("emitHeartbeatsEnabled") Boolean emitHeartbeatsEnabled,
        @CustomType.Parameter("enable") Boolean enable,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("project") String project,
        @CustomType.Parameter("replicationPolicyClass") String replicationPolicyClass,
        @CustomType.Parameter("serviceName") String serviceName,
        @CustomType.Parameter("sourceCluster") String sourceCluster,
        @CustomType.Parameter("syncGroupOffsetsEnabled") Boolean syncGroupOffsetsEnabled,
        @CustomType.Parameter("syncGroupOffsetsIntervalSeconds") Integer syncGroupOffsetsIntervalSeconds,
        @CustomType.Parameter("targetCluster") String targetCluster,
        @CustomType.Parameter("topics") List<String> topics,
        @CustomType.Parameter("topicsBlacklists") List<String> topicsBlacklists) {
        this.emitHeartbeatsEnabled = emitHeartbeatsEnabled;
        this.enable = enable;
        this.id = id;
        this.project = project;
        this.replicationPolicyClass = replicationPolicyClass;
        this.serviceName = serviceName;
        this.sourceCluster = sourceCluster;
        this.syncGroupOffsetsEnabled = syncGroupOffsetsEnabled;
        this.syncGroupOffsetsIntervalSeconds = syncGroupOffsetsIntervalSeconds;
        this.targetCluster = targetCluster;
        this.topics = topics;
        this.topicsBlacklists = topicsBlacklists;
    }

    public Boolean emitHeartbeatsEnabled() {
        return this.emitHeartbeatsEnabled;
    }
    public Boolean enable() {
        return this.enable;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String project() {
        return this.project;
    }
    public String replicationPolicyClass() {
        return this.replicationPolicyClass;
    }
    public String serviceName() {
        return this.serviceName;
    }
    public String sourceCluster() {
        return this.sourceCluster;
    }
    public Boolean syncGroupOffsetsEnabled() {
        return this.syncGroupOffsetsEnabled;
    }
    public Integer syncGroupOffsetsIntervalSeconds() {
        return this.syncGroupOffsetsIntervalSeconds;
    }
    public String targetCluster() {
        return this.targetCluster;
    }
    public List<String> topics() {
        return this.topics;
    }
    public List<String> topicsBlacklists() {
        return this.topicsBlacklists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMirrorMakerReplicationFlowResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean emitHeartbeatsEnabled;
        private Boolean enable;
        private String id;
        private String project;
        private String replicationPolicyClass;
        private String serviceName;
        private String sourceCluster;
        private Boolean syncGroupOffsetsEnabled;
        private Integer syncGroupOffsetsIntervalSeconds;
        private String targetCluster;
        private List<String> topics;
        private List<String> topicsBlacklists;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMirrorMakerReplicationFlowResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.emitHeartbeatsEnabled = defaults.emitHeartbeatsEnabled;
    	      this.enable = defaults.enable;
    	      this.id = defaults.id;
    	      this.project = defaults.project;
    	      this.replicationPolicyClass = defaults.replicationPolicyClass;
    	      this.serviceName = defaults.serviceName;
    	      this.sourceCluster = defaults.sourceCluster;
    	      this.syncGroupOffsetsEnabled = defaults.syncGroupOffsetsEnabled;
    	      this.syncGroupOffsetsIntervalSeconds = defaults.syncGroupOffsetsIntervalSeconds;
    	      this.targetCluster = defaults.targetCluster;
    	      this.topics = defaults.topics;
    	      this.topicsBlacklists = defaults.topicsBlacklists;
        }

        public Builder emitHeartbeatsEnabled(Boolean emitHeartbeatsEnabled) {
            this.emitHeartbeatsEnabled = Objects.requireNonNull(emitHeartbeatsEnabled);
            return this;
        }
        public Builder enable(Boolean enable) {
            this.enable = Objects.requireNonNull(enable);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        public Builder replicationPolicyClass(String replicationPolicyClass) {
            this.replicationPolicyClass = Objects.requireNonNull(replicationPolicyClass);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder sourceCluster(String sourceCluster) {
            this.sourceCluster = Objects.requireNonNull(sourceCluster);
            return this;
        }
        public Builder syncGroupOffsetsEnabled(Boolean syncGroupOffsetsEnabled) {
            this.syncGroupOffsetsEnabled = Objects.requireNonNull(syncGroupOffsetsEnabled);
            return this;
        }
        public Builder syncGroupOffsetsIntervalSeconds(Integer syncGroupOffsetsIntervalSeconds) {
            this.syncGroupOffsetsIntervalSeconds = Objects.requireNonNull(syncGroupOffsetsIntervalSeconds);
            return this;
        }
        public Builder targetCluster(String targetCluster) {
            this.targetCluster = Objects.requireNonNull(targetCluster);
            return this;
        }
        public Builder topics(List<String> topics) {
            this.topics = Objects.requireNonNull(topics);
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        public Builder topicsBlacklists(List<String> topicsBlacklists) {
            this.topicsBlacklists = Objects.requireNonNull(topicsBlacklists);
            return this;
        }
        public Builder topicsBlacklists(String... topicsBlacklists) {
            return topicsBlacklists(List.of(topicsBlacklists));
        }        public GetMirrorMakerReplicationFlowResult build() {
            return new GetMirrorMakerReplicationFlowResult(emitHeartbeatsEnabled, enable, id, project, replicationPolicyClass, serviceName, sourceCluster, syncGroupOffsetsEnabled, syncGroupOffsetsIntervalSeconds, targetCluster, topics, topicsBlacklists);
        }
    }
}
