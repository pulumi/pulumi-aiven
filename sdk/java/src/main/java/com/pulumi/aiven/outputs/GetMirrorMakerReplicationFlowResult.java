// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMirrorMakerReplicationFlowResult {
    /**
     * @return Emit heartbeats enabled. The default value is `false`.
     * 
     */
    private Boolean emitHeartbeatsEnabled;
    /**
     * @return Enable of disable replication flows for a service.
     * 
     */
    private Boolean enable;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Offset syncs topic location.
     * 
     */
    private String offsetSyncsTopicLocation;
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String project;
    /**
     * @return Replication policy class. The possible values are `org.apache.kafka.connect.mirror.DefaultReplicationPolicy` and `org.apache.kafka.connect.mirror.IdentityReplicationPolicy`. The default value is `org.apache.kafka.connect.mirror.DefaultReplicationPolicy`.
     * 
     */
    private String replicationPolicyClass;
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    private String serviceName;
    /**
     * @return Source cluster alias. Maximum length: `128`.
     * 
     */
    private String sourceCluster;
    /**
     * @return Sync consumer group offsets. The default value is `false`.
     * 
     */
    private Boolean syncGroupOffsetsEnabled;
    /**
     * @return Frequency of consumer group offset sync. The default value is `1`.
     * 
     */
    private Integer syncGroupOffsetsIntervalSeconds;
    /**
     * @return Target cluster alias. Maximum length: `128`.
     * 
     */
    private String targetCluster;
    /**
     * @return List of topics and/or regular expressions to replicate
     * 
     */
    private List<String> topics;
    /**
     * @return List of topics and/or regular expressions to not replicate.
     * 
     */
    private List<String> topicsBlacklists;

    private GetMirrorMakerReplicationFlowResult() {}
    /**
     * @return Emit heartbeats enabled. The default value is `false`.
     * 
     */
    public Boolean emitHeartbeatsEnabled() {
        return this.emitHeartbeatsEnabled;
    }
    /**
     * @return Enable of disable replication flows for a service.
     * 
     */
    public Boolean enable() {
        return this.enable;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Offset syncs topic location.
     * 
     */
    public String offsetSyncsTopicLocation() {
        return this.offsetSyncsTopicLocation;
    }
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Replication policy class. The possible values are `org.apache.kafka.connect.mirror.DefaultReplicationPolicy` and `org.apache.kafka.connect.mirror.IdentityReplicationPolicy`. The default value is `org.apache.kafka.connect.mirror.DefaultReplicationPolicy`.
     * 
     */
    public String replicationPolicyClass() {
        return this.replicationPolicyClass;
    }
    /**
     * @return Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Source cluster alias. Maximum length: `128`.
     * 
     */
    public String sourceCluster() {
        return this.sourceCluster;
    }
    /**
     * @return Sync consumer group offsets. The default value is `false`.
     * 
     */
    public Boolean syncGroupOffsetsEnabled() {
        return this.syncGroupOffsetsEnabled;
    }
    /**
     * @return Frequency of consumer group offset sync. The default value is `1`.
     * 
     */
    public Integer syncGroupOffsetsIntervalSeconds() {
        return this.syncGroupOffsetsIntervalSeconds;
    }
    /**
     * @return Target cluster alias. Maximum length: `128`.
     * 
     */
    public String targetCluster() {
        return this.targetCluster;
    }
    /**
     * @return List of topics and/or regular expressions to replicate
     * 
     */
    public List<String> topics() {
        return this.topics;
    }
    /**
     * @return List of topics and/or regular expressions to not replicate.
     * 
     */
    public List<String> topicsBlacklists() {
        return this.topicsBlacklists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMirrorMakerReplicationFlowResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean emitHeartbeatsEnabled;
        private Boolean enable;
        private String id;
        private String offsetSyncsTopicLocation;
        private String project;
        private String replicationPolicyClass;
        private String serviceName;
        private String sourceCluster;
        private Boolean syncGroupOffsetsEnabled;
        private Integer syncGroupOffsetsIntervalSeconds;
        private String targetCluster;
        private List<String> topics;
        private List<String> topicsBlacklists;
        public Builder() {}
        public Builder(GetMirrorMakerReplicationFlowResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.emitHeartbeatsEnabled = defaults.emitHeartbeatsEnabled;
    	      this.enable = defaults.enable;
    	      this.id = defaults.id;
    	      this.offsetSyncsTopicLocation = defaults.offsetSyncsTopicLocation;
    	      this.project = defaults.project;
    	      this.replicationPolicyClass = defaults.replicationPolicyClass;
    	      this.serviceName = defaults.serviceName;
    	      this.sourceCluster = defaults.sourceCluster;
    	      this.syncGroupOffsetsEnabled = defaults.syncGroupOffsetsEnabled;
    	      this.syncGroupOffsetsIntervalSeconds = defaults.syncGroupOffsetsIntervalSeconds;
    	      this.targetCluster = defaults.targetCluster;
    	      this.topics = defaults.topics;
    	      this.topicsBlacklists = defaults.topicsBlacklists;
        }

        @CustomType.Setter
        public Builder emitHeartbeatsEnabled(Boolean emitHeartbeatsEnabled) {
            this.emitHeartbeatsEnabled = Objects.requireNonNull(emitHeartbeatsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder enable(Boolean enable) {
            this.enable = Objects.requireNonNull(enable);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder offsetSyncsTopicLocation(String offsetSyncsTopicLocation) {
            this.offsetSyncsTopicLocation = Objects.requireNonNull(offsetSyncsTopicLocation);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder replicationPolicyClass(String replicationPolicyClass) {
            this.replicationPolicyClass = Objects.requireNonNull(replicationPolicyClass);
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        @CustomType.Setter
        public Builder sourceCluster(String sourceCluster) {
            this.sourceCluster = Objects.requireNonNull(sourceCluster);
            return this;
        }
        @CustomType.Setter
        public Builder syncGroupOffsetsEnabled(Boolean syncGroupOffsetsEnabled) {
            this.syncGroupOffsetsEnabled = Objects.requireNonNull(syncGroupOffsetsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder syncGroupOffsetsIntervalSeconds(Integer syncGroupOffsetsIntervalSeconds) {
            this.syncGroupOffsetsIntervalSeconds = Objects.requireNonNull(syncGroupOffsetsIntervalSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder targetCluster(String targetCluster) {
            this.targetCluster = Objects.requireNonNull(targetCluster);
            return this;
        }
        @CustomType.Setter
        public Builder topics(List<String> topics) {
            this.topics = Objects.requireNonNull(topics);
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder topicsBlacklists(List<String> topicsBlacklists) {
            this.topicsBlacklists = Objects.requireNonNull(topicsBlacklists);
            return this;
        }
        public Builder topicsBlacklists(String... topicsBlacklists) {
            return topicsBlacklists(List.of(topicsBlacklists));
        }
        public GetMirrorMakerReplicationFlowResult build() {
            final var o = new GetMirrorMakerReplicationFlowResult();
            o.emitHeartbeatsEnabled = emitHeartbeatsEnabled;
            o.enable = enable;
            o.id = id;
            o.offsetSyncsTopicLocation = offsetSyncsTopicLocation;
            o.project = project;
            o.replicationPolicyClass = replicationPolicyClass;
            o.serviceName = serviceName;
            o.sourceCluster = sourceCluster;
            o.syncGroupOffsetsEnabled = syncGroupOffsetsEnabled;
            o.syncGroupOffsetsIntervalSeconds = syncGroupOffsetsIntervalSeconds;
            o.targetCluster = targetCluster;
            o.topics = topics;
            o.topicsBlacklists = topicsBlacklists;
            return o;
        }
    }
}
