// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetRedisRedisUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.GetRedisRedisUserConfigMigration;
import com.pulumi.aiven.outputs.GetRedisRedisUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GetRedisRedisUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.GetRedisRedisUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRedisRedisUserConfig {
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    private @Nullable String additionalBackupRegions;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    private @Nullable List<GetRedisRedisUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return Migrate data from existing server.
     * 
     */
    private @Nullable GetRedisRedisUserConfigMigration migration;
    /**
     * @return Allow access to selected service ports from private networks.
     * 
     */
    private @Nullable GetRedisRedisUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink.
     * 
     */
    private @Nullable GetRedisRedisUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet.
     * 
     */
    private @Nullable GetRedisRedisUserConfigPublicAccess publicAccess;
    /**
     * @return Name of the basebackup to restore in forked service.
     * 
     */
    private @Nullable String recoveryBasebackupName;
    /**
     * @return Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
     * 
     */
    private @Nullable String redisAclChannelsDefault;
    /**
     * @return Set Redis IO thread count. Changing this will cause a restart of the Redis service.
     * 
     */
    private @Nullable Integer redisIoThreads;
    /**
     * @return LFU maxmemory-policy counter decay time in minutes. The default value is `1`.
     * 
     */
    private @Nullable Integer redisLfuDecayTime;
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. The default value is `10`.
     * 
     */
    private @Nullable Integer redisLfuLogFactor;
    /**
     * @return Redis maxmemory-policy. The default value is `noeviction`.
     * 
     */
    private @Nullable String redisMaxmemoryPolicy;
    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    private @Nullable String redisNotifyKeyspaceEvents;
    /**
     * @return Set number of Redis databases. Changing this will cause a restart of the Redis service.
     * 
     */
    private @Nullable Integer redisNumberOfDatabases;
    /**
     * @return When persistence is &#39;rdb&#39;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    private @Nullable String redisPersistence;
    /**
     * @return Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    private @Nullable Integer redisPubsubClientOutputBufferLimit;
    /**
     * @return Require SSL to access Redis. The default value is `true`.
     * 
     */
    private @Nullable Boolean redisSsl;
    /**
     * @return Redis idle connection timeout in seconds. The default value is `300`.
     * 
     */
    private @Nullable Integer redisTimeout;
    /**
     * @return Redis major version.
     * 
     */
    private @Nullable String redisVersion;
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    private @Nullable String serviceToForkFrom;
    /**
     * @return Use static public IP addresses.
     * 
     */
    private @Nullable Boolean staticIps;

    private GetRedisRedisUserConfig() {}
    /**
     * @return Additional Cloud Regions for Backup Replication.
     * 
     */
    public Optional<String> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public List<GetRedisRedisUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Migrate data from existing server.
     * 
     */
    public Optional<GetRedisRedisUserConfigMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    /**
     * @return Allow access to selected service ports from private networks.
     * 
     */
    public Optional<GetRedisRedisUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink.
     * 
     */
    public Optional<GetRedisRedisUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet.
     * 
     */
    public Optional<GetRedisRedisUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Name of the basebackup to restore in forked service.
     * 
     */
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    /**
     * @return Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
     * 
     */
    public Optional<String> redisAclChannelsDefault() {
        return Optional.ofNullable(this.redisAclChannelsDefault);
    }
    /**
     * @return Set Redis IO thread count. Changing this will cause a restart of the Redis service.
     * 
     */
    public Optional<Integer> redisIoThreads() {
        return Optional.ofNullable(this.redisIoThreads);
    }
    /**
     * @return LFU maxmemory-policy counter decay time in minutes. The default value is `1`.
     * 
     */
    public Optional<Integer> redisLfuDecayTime() {
        return Optional.ofNullable(this.redisLfuDecayTime);
    }
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. The default value is `10`.
     * 
     */
    public Optional<Integer> redisLfuLogFactor() {
        return Optional.ofNullable(this.redisLfuLogFactor);
    }
    /**
     * @return Redis maxmemory-policy. The default value is `noeviction`.
     * 
     */
    public Optional<String> redisMaxmemoryPolicy() {
        return Optional.ofNullable(this.redisMaxmemoryPolicy);
    }
    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    public Optional<String> redisNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.redisNotifyKeyspaceEvents);
    }
    /**
     * @return Set number of Redis databases. Changing this will cause a restart of the Redis service.
     * 
     */
    public Optional<Integer> redisNumberOfDatabases() {
        return Optional.ofNullable(this.redisNumberOfDatabases);
    }
    /**
     * @return When persistence is &#39;rdb&#39;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    public Optional<String> redisPersistence() {
        return Optional.ofNullable(this.redisPersistence);
    }
    /**
     * @return Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    public Optional<Integer> redisPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.redisPubsubClientOutputBufferLimit);
    }
    /**
     * @return Require SSL to access Redis. The default value is `true`.
     * 
     */
    public Optional<Boolean> redisSsl() {
        return Optional.ofNullable(this.redisSsl);
    }
    /**
     * @return Redis idle connection timeout in seconds. The default value is `300`.
     * 
     */
    public Optional<Integer> redisTimeout() {
        return Optional.ofNullable(this.redisTimeout);
    }
    /**
     * @return Redis major version.
     * 
     */
    public Optional<String> redisVersion() {
        return Optional.ofNullable(this.redisVersion);
    }
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRedisRedisUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalBackupRegions;
        private @Nullable List<GetRedisRedisUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable GetRedisRedisUserConfigMigration migration;
        private @Nullable GetRedisRedisUserConfigPrivateAccess privateAccess;
        private @Nullable GetRedisRedisUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable GetRedisRedisUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable String redisAclChannelsDefault;
        private @Nullable Integer redisIoThreads;
        private @Nullable Integer redisLfuDecayTime;
        private @Nullable Integer redisLfuLogFactor;
        private @Nullable String redisMaxmemoryPolicy;
        private @Nullable String redisNotifyKeyspaceEvents;
        private @Nullable Integer redisNumberOfDatabases;
        private @Nullable String redisPersistence;
        private @Nullable Integer redisPubsubClientOutputBufferLimit;
        private @Nullable Boolean redisSsl;
        private @Nullable Integer redisTimeout;
        private @Nullable String redisVersion;
        private @Nullable Boolean serviceLog;
        private @Nullable String serviceToForkFrom;
        private @Nullable Boolean staticIps;
        public Builder() {}
        public Builder(GetRedisRedisUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBackupRegions = defaults.additionalBackupRegions;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.redisAclChannelsDefault = defaults.redisAclChannelsDefault;
    	      this.redisIoThreads = defaults.redisIoThreads;
    	      this.redisLfuDecayTime = defaults.redisLfuDecayTime;
    	      this.redisLfuLogFactor = defaults.redisLfuLogFactor;
    	      this.redisMaxmemoryPolicy = defaults.redisMaxmemoryPolicy;
    	      this.redisNotifyKeyspaceEvents = defaults.redisNotifyKeyspaceEvents;
    	      this.redisNumberOfDatabases = defaults.redisNumberOfDatabases;
    	      this.redisPersistence = defaults.redisPersistence;
    	      this.redisPubsubClientOutputBufferLimit = defaults.redisPubsubClientOutputBufferLimit;
    	      this.redisSsl = defaults.redisSsl;
    	      this.redisTimeout = defaults.redisTimeout;
    	      this.redisVersion = defaults.redisVersion;
    	      this.serviceLog = defaults.serviceLog;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder additionalBackupRegions(@Nullable String additionalBackupRegions) {

            this.additionalBackupRegions = additionalBackupRegions;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<GetRedisRedisUserConfigIpFilterObject> ipFilterObjects) {

            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(GetRedisRedisUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {

            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder migration(@Nullable GetRedisRedisUserConfigMigration migration) {

            this.migration = migration;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable GetRedisRedisUserConfigPrivateAccess privateAccess) {

            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable GetRedisRedisUserConfigPrivatelinkAccess privatelinkAccess) {

            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {

            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable GetRedisRedisUserConfigPublicAccess publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {

            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        @CustomType.Setter
        public Builder redisAclChannelsDefault(@Nullable String redisAclChannelsDefault) {

            this.redisAclChannelsDefault = redisAclChannelsDefault;
            return this;
        }
        @CustomType.Setter
        public Builder redisIoThreads(@Nullable Integer redisIoThreads) {

            this.redisIoThreads = redisIoThreads;
            return this;
        }
        @CustomType.Setter
        public Builder redisLfuDecayTime(@Nullable Integer redisLfuDecayTime) {

            this.redisLfuDecayTime = redisLfuDecayTime;
            return this;
        }
        @CustomType.Setter
        public Builder redisLfuLogFactor(@Nullable Integer redisLfuLogFactor) {

            this.redisLfuLogFactor = redisLfuLogFactor;
            return this;
        }
        @CustomType.Setter
        public Builder redisMaxmemoryPolicy(@Nullable String redisMaxmemoryPolicy) {

            this.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder redisNotifyKeyspaceEvents(@Nullable String redisNotifyKeyspaceEvents) {

            this.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            return this;
        }
        @CustomType.Setter
        public Builder redisNumberOfDatabases(@Nullable Integer redisNumberOfDatabases) {

            this.redisNumberOfDatabases = redisNumberOfDatabases;
            return this;
        }
        @CustomType.Setter
        public Builder redisPersistence(@Nullable String redisPersistence) {

            this.redisPersistence = redisPersistence;
            return this;
        }
        @CustomType.Setter
        public Builder redisPubsubClientOutputBufferLimit(@Nullable Integer redisPubsubClientOutputBufferLimit) {

            this.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            return this;
        }
        @CustomType.Setter
        public Builder redisSsl(@Nullable Boolean redisSsl) {

            this.redisSsl = redisSsl;
            return this;
        }
        @CustomType.Setter
        public Builder redisTimeout(@Nullable Integer redisTimeout) {

            this.redisTimeout = redisTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder redisVersion(@Nullable String redisVersion) {

            this.redisVersion = redisVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {

            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {

            this.staticIps = staticIps;
            return this;
        }
        public GetRedisRedisUserConfig build() {
            final var _resultValue = new GetRedisRedisUserConfig();
            _resultValue.additionalBackupRegions = additionalBackupRegions;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.migration = migration;
            _resultValue.privateAccess = privateAccess;
            _resultValue.privatelinkAccess = privatelinkAccess;
            _resultValue.projectToForkFrom = projectToForkFrom;
            _resultValue.publicAccess = publicAccess;
            _resultValue.recoveryBasebackupName = recoveryBasebackupName;
            _resultValue.redisAclChannelsDefault = redisAclChannelsDefault;
            _resultValue.redisIoThreads = redisIoThreads;
            _resultValue.redisLfuDecayTime = redisLfuDecayTime;
            _resultValue.redisLfuLogFactor = redisLfuLogFactor;
            _resultValue.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            _resultValue.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            _resultValue.redisNumberOfDatabases = redisNumberOfDatabases;
            _resultValue.redisPersistence = redisPersistence;
            _resultValue.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            _resultValue.redisSsl = redisSsl;
            _resultValue.redisTimeout = redisTimeout;
            _resultValue.redisVersion = redisVersion;
            _resultValue.serviceLog = serviceLog;
            _resultValue.serviceToForkFrom = serviceToForkFrom;
            _resultValue.staticIps = staticIps;
            return _resultValue;
        }
    }
}
