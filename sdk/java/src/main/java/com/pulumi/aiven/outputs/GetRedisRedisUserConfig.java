// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetRedisRedisUserConfigMigration;
import com.pulumi.aiven.outputs.GetRedisRedisUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GetRedisRedisUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.GetRedisRedisUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRedisRedisUserConfig {
    private final @Nullable List<String> ipFilters;
    private final @Nullable GetRedisRedisUserConfigMigration migration;
    private final @Nullable GetRedisRedisUserConfigPrivateAccess privateAccess;
    private final @Nullable GetRedisRedisUserConfigPrivatelinkAccess privatelinkAccess;
    private final @Nullable String projectToForkFrom;
    private final @Nullable GetRedisRedisUserConfigPublicAccess publicAccess;
    private final @Nullable String recoveryBasebackupName;
    private final @Nullable String redisAclChannelsDefault;
    private final @Nullable String redisIoThreads;
    private final @Nullable String redisLfuDecayTime;
    private final @Nullable String redisLfuLogFactor;
    private final @Nullable String redisMaxmemoryPolicy;
    private final @Nullable String redisNotifyKeyspaceEvents;
    private final @Nullable String redisNumberOfDatabases;
    private final @Nullable String redisPersistence;
    private final @Nullable String redisPubsubClientOutputBufferLimit;
    private final @Nullable String redisSsl;
    private final @Nullable String redisTimeout;
    private final @Nullable String serviceToForkFrom;
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    private final @Nullable String staticIps;

    @CustomType.Constructor
    private GetRedisRedisUserConfig(
        @CustomType.Parameter("ipFilters") @Nullable List<String> ipFilters,
        @CustomType.Parameter("migration") @Nullable GetRedisRedisUserConfigMigration migration,
        @CustomType.Parameter("privateAccess") @Nullable GetRedisRedisUserConfigPrivateAccess privateAccess,
        @CustomType.Parameter("privatelinkAccess") @Nullable GetRedisRedisUserConfigPrivatelinkAccess privatelinkAccess,
        @CustomType.Parameter("projectToForkFrom") @Nullable String projectToForkFrom,
        @CustomType.Parameter("publicAccess") @Nullable GetRedisRedisUserConfigPublicAccess publicAccess,
        @CustomType.Parameter("recoveryBasebackupName") @Nullable String recoveryBasebackupName,
        @CustomType.Parameter("redisAclChannelsDefault") @Nullable String redisAclChannelsDefault,
        @CustomType.Parameter("redisIoThreads") @Nullable String redisIoThreads,
        @CustomType.Parameter("redisLfuDecayTime") @Nullable String redisLfuDecayTime,
        @CustomType.Parameter("redisLfuLogFactor") @Nullable String redisLfuLogFactor,
        @CustomType.Parameter("redisMaxmemoryPolicy") @Nullable String redisMaxmemoryPolicy,
        @CustomType.Parameter("redisNotifyKeyspaceEvents") @Nullable String redisNotifyKeyspaceEvents,
        @CustomType.Parameter("redisNumberOfDatabases") @Nullable String redisNumberOfDatabases,
        @CustomType.Parameter("redisPersistence") @Nullable String redisPersistence,
        @CustomType.Parameter("redisPubsubClientOutputBufferLimit") @Nullable String redisPubsubClientOutputBufferLimit,
        @CustomType.Parameter("redisSsl") @Nullable String redisSsl,
        @CustomType.Parameter("redisTimeout") @Nullable String redisTimeout,
        @CustomType.Parameter("serviceToForkFrom") @Nullable String serviceToForkFrom,
        @CustomType.Parameter("staticIps") @Nullable String staticIps) {
        this.ipFilters = ipFilters;
        this.migration = migration;
        this.privateAccess = privateAccess;
        this.privatelinkAccess = privatelinkAccess;
        this.projectToForkFrom = projectToForkFrom;
        this.publicAccess = publicAccess;
        this.recoveryBasebackupName = recoveryBasebackupName;
        this.redisAclChannelsDefault = redisAclChannelsDefault;
        this.redisIoThreads = redisIoThreads;
        this.redisLfuDecayTime = redisLfuDecayTime;
        this.redisLfuLogFactor = redisLfuLogFactor;
        this.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
        this.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
        this.redisNumberOfDatabases = redisNumberOfDatabases;
        this.redisPersistence = redisPersistence;
        this.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
        this.redisSsl = redisSsl;
        this.redisTimeout = redisTimeout;
        this.serviceToForkFrom = serviceToForkFrom;
        this.staticIps = staticIps;
    }

    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    public Optional<GetRedisRedisUserConfigMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    public Optional<GetRedisRedisUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    public Optional<GetRedisRedisUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    public Optional<GetRedisRedisUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    public Optional<String> redisAclChannelsDefault() {
        return Optional.ofNullable(this.redisAclChannelsDefault);
    }
    public Optional<String> redisIoThreads() {
        return Optional.ofNullable(this.redisIoThreads);
    }
    public Optional<String> redisLfuDecayTime() {
        return Optional.ofNullable(this.redisLfuDecayTime);
    }
    public Optional<String> redisLfuLogFactor() {
        return Optional.ofNullable(this.redisLfuLogFactor);
    }
    public Optional<String> redisMaxmemoryPolicy() {
        return Optional.ofNullable(this.redisMaxmemoryPolicy);
    }
    public Optional<String> redisNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.redisNotifyKeyspaceEvents);
    }
    public Optional<String> redisNumberOfDatabases() {
        return Optional.ofNullable(this.redisNumberOfDatabases);
    }
    public Optional<String> redisPersistence() {
        return Optional.ofNullable(this.redisPersistence);
    }
    public Optional<String> redisPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.redisPubsubClientOutputBufferLimit);
    }
    public Optional<String> redisSsl() {
        return Optional.ofNullable(this.redisSsl);
    }
    public Optional<String> redisTimeout() {
        return Optional.ofNullable(this.redisTimeout);
    }
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Static IPs that are going to be associated with this service. Please assign a value using the &#39;toset&#39; function. Once a static ip resource is in the &#39;assigned&#39; state it cannot be unbound from the node again
     * 
     */
    public Optional<String> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRedisRedisUserConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> ipFilters;
        private @Nullable GetRedisRedisUserConfigMigration migration;
        private @Nullable GetRedisRedisUserConfigPrivateAccess privateAccess;
        private @Nullable GetRedisRedisUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable GetRedisRedisUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable String redisAclChannelsDefault;
        private @Nullable String redisIoThreads;
        private @Nullable String redisLfuDecayTime;
        private @Nullable String redisLfuLogFactor;
        private @Nullable String redisMaxmemoryPolicy;
        private @Nullable String redisNotifyKeyspaceEvents;
        private @Nullable String redisNumberOfDatabases;
        private @Nullable String redisPersistence;
        private @Nullable String redisPubsubClientOutputBufferLimit;
        private @Nullable String redisSsl;
        private @Nullable String redisTimeout;
        private @Nullable String serviceToForkFrom;
        private @Nullable String staticIps;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRedisRedisUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.redisAclChannelsDefault = defaults.redisAclChannelsDefault;
    	      this.redisIoThreads = defaults.redisIoThreads;
    	      this.redisLfuDecayTime = defaults.redisLfuDecayTime;
    	      this.redisLfuLogFactor = defaults.redisLfuLogFactor;
    	      this.redisMaxmemoryPolicy = defaults.redisMaxmemoryPolicy;
    	      this.redisNotifyKeyspaceEvents = defaults.redisNotifyKeyspaceEvents;
    	      this.redisNumberOfDatabases = defaults.redisNumberOfDatabases;
    	      this.redisPersistence = defaults.redisPersistence;
    	      this.redisPubsubClientOutputBufferLimit = defaults.redisPubsubClientOutputBufferLimit;
    	      this.redisSsl = defaults.redisSsl;
    	      this.redisTimeout = defaults.redisTimeout;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        public Builder migration(@Nullable GetRedisRedisUserConfigMigration migration) {
            this.migration = migration;
            return this;
        }
        public Builder privateAccess(@Nullable GetRedisRedisUserConfigPrivateAccess privateAccess) {
            this.privateAccess = privateAccess;
            return this;
        }
        public Builder privatelinkAccess(@Nullable GetRedisRedisUserConfigPrivatelinkAccess privatelinkAccess) {
            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {
            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        public Builder publicAccess(@Nullable GetRedisRedisUserConfigPublicAccess publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {
            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        public Builder redisAclChannelsDefault(@Nullable String redisAclChannelsDefault) {
            this.redisAclChannelsDefault = redisAclChannelsDefault;
            return this;
        }
        public Builder redisIoThreads(@Nullable String redisIoThreads) {
            this.redisIoThreads = redisIoThreads;
            return this;
        }
        public Builder redisLfuDecayTime(@Nullable String redisLfuDecayTime) {
            this.redisLfuDecayTime = redisLfuDecayTime;
            return this;
        }
        public Builder redisLfuLogFactor(@Nullable String redisLfuLogFactor) {
            this.redisLfuLogFactor = redisLfuLogFactor;
            return this;
        }
        public Builder redisMaxmemoryPolicy(@Nullable String redisMaxmemoryPolicy) {
            this.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            return this;
        }
        public Builder redisNotifyKeyspaceEvents(@Nullable String redisNotifyKeyspaceEvents) {
            this.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            return this;
        }
        public Builder redisNumberOfDatabases(@Nullable String redisNumberOfDatabases) {
            this.redisNumberOfDatabases = redisNumberOfDatabases;
            return this;
        }
        public Builder redisPersistence(@Nullable String redisPersistence) {
            this.redisPersistence = redisPersistence;
            return this;
        }
        public Builder redisPubsubClientOutputBufferLimit(@Nullable String redisPubsubClientOutputBufferLimit) {
            this.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            return this;
        }
        public Builder redisSsl(@Nullable String redisSsl) {
            this.redisSsl = redisSsl;
            return this;
        }
        public Builder redisTimeout(@Nullable String redisTimeout) {
            this.redisTimeout = redisTimeout;
            return this;
        }
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {
            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        public Builder staticIps(@Nullable String staticIps) {
            this.staticIps = staticIps;
            return this;
        }        public GetRedisRedisUserConfig build() {
            return new GetRedisRedisUserConfig(ipFilters, migration, privateAccess, privatelinkAccess, projectToForkFrom, publicAccess, recoveryBasebackupName, redisAclChannelsDefault, redisIoThreads, redisLfuDecayTime, redisLfuLogFactor, redisMaxmemoryPolicy, redisNotifyKeyspaceEvents, redisNumberOfDatabases, redisPersistence, redisPubsubClientOutputBufferLimit, redisSsl, redisTimeout, serviceToForkFrom, staticIps);
        }
    }
}
