// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.aiven.outputs.GetDragonflyDragonflyUserConfigIpFilterObject;
import com.pulumi.aiven.outputs.GetDragonflyDragonflyUserConfigMigration;
import com.pulumi.aiven.outputs.GetDragonflyDragonflyUserConfigPrivateAccess;
import com.pulumi.aiven.outputs.GetDragonflyDragonflyUserConfigPrivatelinkAccess;
import com.pulumi.aiven.outputs.GetDragonflyDragonflyUserConfigPublicAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDragonflyDragonflyUserConfig {
    /**
     * @return Evict entries when getting close to maxmemory limit. Default: `false`.
     * 
     */
    private @Nullable Boolean cacheMode;
    /**
     * @return Enum: `dfs`, `off`, `rdb`. When persistence is `rdb` or `dfs`, Dragonfly does RDB or DFS dumps every 10 minutes. Dumps are done according to the backup schedule for backup purposes. When persistence is `off`, no RDB/DFS dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    private @Nullable String dragonflyPersistence;
    /**
     * @return Require SSL to access Dragonfly. Default: `true`.
     * 
     */
    private @Nullable Boolean dragonflySsl;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    private @Nullable List<GetDragonflyDragonflyUserConfigIpFilterObject> ipFilterObjects;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    private @Nullable List<String> ipFilterStrings;
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    private @Nullable List<String> ipFilters;
    /**
     * @return Migrate data from existing server
     * 
     */
    private @Nullable GetDragonflyDragonflyUserConfigMigration migration;
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    private @Nullable GetDragonflyDragonflyUserConfigPrivateAccess privateAccess;
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    private @Nullable GetDragonflyDragonflyUserConfigPrivatelinkAccess privatelinkAccess;
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    private @Nullable String projectToForkFrom;
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    private @Nullable GetDragonflyDragonflyUserConfigPublicAccess publicAccess;
    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    private @Nullable String recoveryBasebackupName;
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    private @Nullable String serviceToForkFrom;
    /**
     * @return Use static public IP addresses.
     * 
     */
    private @Nullable Boolean staticIps;

    private GetDragonflyDragonflyUserConfig() {}
    /**
     * @return Evict entries when getting close to maxmemory limit. Default: `false`.
     * 
     */
    public Optional<Boolean> cacheMode() {
        return Optional.ofNullable(this.cacheMode);
    }
    /**
     * @return Enum: `dfs`, `off`, `rdb`. When persistence is `rdb` or `dfs`, Dragonfly does RDB or DFS dumps every 10 minutes. Dumps are done according to the backup schedule for backup purposes. When persistence is `off`, no RDB/DFS dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    public Optional<String> dragonflyPersistence() {
        return Optional.ofNullable(this.dragonflyPersistence);
    }
    /**
     * @return Require SSL to access Dragonfly. Default: `true`.
     * 
     */
    public Optional<Boolean> dragonflySsl() {
        return Optional.ofNullable(this.dragonflySsl);
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
     * 
     */
    public List<GetDragonflyDragonflyUserConfigIpFilterObject> ipFilterObjects() {
        return this.ipFilterObjects == null ? List.of() : this.ipFilterObjects;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     */
    public List<String> ipFilterStrings() {
        return this.ipFilterStrings == null ? List.of() : this.ipFilterStrings;
    }
    /**
     * @return Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
     * 
     * @deprecated
     * Deprecated. Use `ip_filter_string` instead.
     * 
     */
    @Deprecated /* Deprecated. Use `ip_filter_string` instead. */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Migrate data from existing server
     * 
     */
    public Optional<GetDragonflyDragonflyUserConfigMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    /**
     * @return Allow access to selected service ports from private networks
     * 
     */
    public Optional<GetDragonflyDragonflyUserConfigPrivateAccess> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }
    /**
     * @return Allow access to selected service components through Privatelink
     * 
     */
    public Optional<GetDragonflyDragonflyUserConfigPrivatelinkAccess> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }
    /**
     * @return Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
     * 
     */
    public Optional<String> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }
    /**
     * @return Allow access to selected service ports from the public Internet
     * 
     */
    public Optional<GetDragonflyDragonflyUserConfigPublicAccess> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
     * 
     */
    public Optional<String> recoveryBasebackupName() {
        return Optional.ofNullable(this.recoveryBasebackupName);
    }
    /**
     * @return Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
     * 
     */
    public Optional<String> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }
    /**
     * @return Use static public IP addresses.
     * 
     */
    public Optional<Boolean> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDragonflyDragonflyUserConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean cacheMode;
        private @Nullable String dragonflyPersistence;
        private @Nullable Boolean dragonflySsl;
        private @Nullable List<GetDragonflyDragonflyUserConfigIpFilterObject> ipFilterObjects;
        private @Nullable List<String> ipFilterStrings;
        private @Nullable List<String> ipFilters;
        private @Nullable GetDragonflyDragonflyUserConfigMigration migration;
        private @Nullable GetDragonflyDragonflyUserConfigPrivateAccess privateAccess;
        private @Nullable GetDragonflyDragonflyUserConfigPrivatelinkAccess privatelinkAccess;
        private @Nullable String projectToForkFrom;
        private @Nullable GetDragonflyDragonflyUserConfigPublicAccess publicAccess;
        private @Nullable String recoveryBasebackupName;
        private @Nullable Boolean serviceLog;
        private @Nullable String serviceToForkFrom;
        private @Nullable Boolean staticIps;
        public Builder() {}
        public Builder(GetDragonflyDragonflyUserConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheMode = defaults.cacheMode;
    	      this.dragonflyPersistence = defaults.dragonflyPersistence;
    	      this.dragonflySsl = defaults.dragonflySsl;
    	      this.ipFilterObjects = defaults.ipFilterObjects;
    	      this.ipFilterStrings = defaults.ipFilterStrings;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.privateAccess = defaults.privateAccess;
    	      this.privatelinkAccess = defaults.privatelinkAccess;
    	      this.projectToForkFrom = defaults.projectToForkFrom;
    	      this.publicAccess = defaults.publicAccess;
    	      this.recoveryBasebackupName = defaults.recoveryBasebackupName;
    	      this.serviceLog = defaults.serviceLog;
    	      this.serviceToForkFrom = defaults.serviceToForkFrom;
    	      this.staticIps = defaults.staticIps;
        }

        @CustomType.Setter
        public Builder cacheMode(@Nullable Boolean cacheMode) {

            this.cacheMode = cacheMode;
            return this;
        }
        @CustomType.Setter
        public Builder dragonflyPersistence(@Nullable String dragonflyPersistence) {

            this.dragonflyPersistence = dragonflyPersistence;
            return this;
        }
        @CustomType.Setter
        public Builder dragonflySsl(@Nullable Boolean dragonflySsl) {

            this.dragonflySsl = dragonflySsl;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilterObjects(@Nullable List<GetDragonflyDragonflyUserConfigIpFilterObject> ipFilterObjects) {

            this.ipFilterObjects = ipFilterObjects;
            return this;
        }
        public Builder ipFilterObjects(GetDragonflyDragonflyUserConfigIpFilterObject... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }
        @CustomType.Setter
        public Builder ipFilterStrings(@Nullable List<String> ipFilterStrings) {

            this.ipFilterStrings = ipFilterStrings;
            return this;
        }
        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder migration(@Nullable GetDragonflyDragonflyUserConfigMigration migration) {

            this.migration = migration;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccess(@Nullable GetDragonflyDragonflyUserConfigPrivateAccess privateAccess) {

            this.privateAccess = privateAccess;
            return this;
        }
        @CustomType.Setter
        public Builder privatelinkAccess(@Nullable GetDragonflyDragonflyUserConfigPrivatelinkAccess privatelinkAccess) {

            this.privatelinkAccess = privatelinkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder projectToForkFrom(@Nullable String projectToForkFrom) {

            this.projectToForkFrom = projectToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable GetDragonflyDragonflyUserConfigPublicAccess publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryBasebackupName(@Nullable String recoveryBasebackupName) {

            this.recoveryBasebackupName = recoveryBasebackupName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder serviceToForkFrom(@Nullable String serviceToForkFrom) {

            this.serviceToForkFrom = serviceToForkFrom;
            return this;
        }
        @CustomType.Setter
        public Builder staticIps(@Nullable Boolean staticIps) {

            this.staticIps = staticIps;
            return this;
        }
        public GetDragonflyDragonflyUserConfig build() {
            final var _resultValue = new GetDragonflyDragonflyUserConfig();
            _resultValue.cacheMode = cacheMode;
            _resultValue.dragonflyPersistence = dragonflyPersistence;
            _resultValue.dragonflySsl = dragonflySsl;
            _resultValue.ipFilterObjects = ipFilterObjects;
            _resultValue.ipFilterStrings = ipFilterStrings;
            _resultValue.ipFilters = ipFilters;
            _resultValue.migration = migration;
            _resultValue.privateAccess = privateAccess;
            _resultValue.privatelinkAccess = privatelinkAccess;
            _resultValue.projectToForkFrom = projectToForkFrom;
            _resultValue.publicAccess = publicAccess;
            _resultValue.recoveryBasebackupName = recoveryBasebackupName;
            _resultValue.serviceLog = serviceLog;
            _resultValue.serviceToForkFrom = serviceToForkFrom;
            _resultValue.staticIps = staticIps;
            return _resultValue;
        }
    }
}
