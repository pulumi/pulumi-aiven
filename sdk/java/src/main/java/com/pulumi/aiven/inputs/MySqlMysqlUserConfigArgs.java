// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.inputs;

import com.pulumi.aiven.inputs.MySqlMysqlUserConfigIpFilterObjectArgs;
import com.pulumi.aiven.inputs.MySqlMysqlUserConfigMigrationArgs;
import com.pulumi.aiven.inputs.MySqlMysqlUserConfigMysqlArgs;
import com.pulumi.aiven.inputs.MySqlMysqlUserConfigPrivateAccessArgs;
import com.pulumi.aiven.inputs.MySqlMysqlUserConfigPrivatelinkAccessArgs;
import com.pulumi.aiven.inputs.MySqlMysqlUserConfigPublicAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MySqlMysqlUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MySqlMysqlUserConfigArgs Empty = new MySqlMysqlUserConfigArgs();

    @Import(name="additionalBackupRegions")
    private @Nullable Output<String> additionalBackupRegions;

    public Optional<Output<String>> additionalBackupRegions() {
        return Optional.ofNullable(this.additionalBackupRegions);
    }

    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    @Import(name="backupHour")
    private @Nullable Output<Integer> backupHour;

    public Optional<Output<Integer>> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }

    @Import(name="backupMinute")
    private @Nullable Output<Integer> backupMinute;

    public Optional<Output<Integer>> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }

    @Import(name="binlogRetentionPeriod")
    private @Nullable Output<Integer> binlogRetentionPeriod;

    public Optional<Output<Integer>> binlogRetentionPeriod() {
        return Optional.ofNullable(this.binlogRetentionPeriod);
    }

    @Import(name="ipFilterObjects")
    private @Nullable Output<List<MySqlMysqlUserConfigIpFilterObjectArgs>> ipFilterObjects;

    public Optional<Output<List<MySqlMysqlUserConfigIpFilterObjectArgs>>> ipFilterObjects() {
        return Optional.ofNullable(this.ipFilterObjects);
    }

    @Import(name="ipFilterStrings")
    private @Nullable Output<List<String>> ipFilterStrings;

    public Optional<Output<List<String>>> ipFilterStrings() {
        return Optional.ofNullable(this.ipFilterStrings);
    }

    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @deprecated
     * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
     * 
     */
    @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    @Import(name="migration")
    private @Nullable Output<MySqlMysqlUserConfigMigrationArgs> migration;

    public Optional<Output<MySqlMysqlUserConfigMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    @Import(name="mysql")
    private @Nullable Output<MySqlMysqlUserConfigMysqlArgs> mysql;

    public Optional<Output<MySqlMysqlUserConfigMysqlArgs>> mysql() {
        return Optional.ofNullable(this.mysql);
    }

    @Import(name="mysqlVersion")
    private @Nullable Output<String> mysqlVersion;

    public Optional<Output<String>> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }

    @Import(name="privateAccess")
    private @Nullable Output<MySqlMysqlUserConfigPrivateAccessArgs> privateAccess;

    public Optional<Output<MySqlMysqlUserConfigPrivateAccessArgs>> privateAccess() {
        return Optional.ofNullable(this.privateAccess);
    }

    @Import(name="privatelinkAccess")
    private @Nullable Output<MySqlMysqlUserConfigPrivatelinkAccessArgs> privatelinkAccess;

    public Optional<Output<MySqlMysqlUserConfigPrivatelinkAccessArgs>> privatelinkAccess() {
        return Optional.ofNullable(this.privatelinkAccess);
    }

    @Import(name="projectToForkFrom")
    private @Nullable Output<String> projectToForkFrom;

    public Optional<Output<String>> projectToForkFrom() {
        return Optional.ofNullable(this.projectToForkFrom);
    }

    @Import(name="publicAccess")
    private @Nullable Output<MySqlMysqlUserConfigPublicAccessArgs> publicAccess;

    public Optional<Output<MySqlMysqlUserConfigPublicAccessArgs>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    @Import(name="recoveryTargetTime")
    private @Nullable Output<String> recoveryTargetTime;

    public Optional<Output<String>> recoveryTargetTime() {
        return Optional.ofNullable(this.recoveryTargetTime);
    }

    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    @Import(name="serviceToForkFrom")
    private @Nullable Output<String> serviceToForkFrom;

    public Optional<Output<String>> serviceToForkFrom() {
        return Optional.ofNullable(this.serviceToForkFrom);
    }

    @Import(name="staticIps")
    private @Nullable Output<Boolean> staticIps;

    public Optional<Output<Boolean>> staticIps() {
        return Optional.ofNullable(this.staticIps);
    }

    private MySqlMysqlUserConfigArgs() {}

    private MySqlMysqlUserConfigArgs(MySqlMysqlUserConfigArgs $) {
        this.additionalBackupRegions = $.additionalBackupRegions;
        this.adminPassword = $.adminPassword;
        this.adminUsername = $.adminUsername;
        this.backupHour = $.backupHour;
        this.backupMinute = $.backupMinute;
        this.binlogRetentionPeriod = $.binlogRetentionPeriod;
        this.ipFilterObjects = $.ipFilterObjects;
        this.ipFilterStrings = $.ipFilterStrings;
        this.ipFilters = $.ipFilters;
        this.migration = $.migration;
        this.mysql = $.mysql;
        this.mysqlVersion = $.mysqlVersion;
        this.privateAccess = $.privateAccess;
        this.privatelinkAccess = $.privatelinkAccess;
        this.projectToForkFrom = $.projectToForkFrom;
        this.publicAccess = $.publicAccess;
        this.recoveryTargetTime = $.recoveryTargetTime;
        this.serviceLog = $.serviceLog;
        this.serviceToForkFrom = $.serviceToForkFrom;
        this.staticIps = $.staticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MySqlMysqlUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MySqlMysqlUserConfigArgs $;

        public Builder() {
            $ = new MySqlMysqlUserConfigArgs();
        }

        public Builder(MySqlMysqlUserConfigArgs defaults) {
            $ = new MySqlMysqlUserConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder additionalBackupRegions(@Nullable Output<String> additionalBackupRegions) {
            $.additionalBackupRegions = additionalBackupRegions;
            return this;
        }

        public Builder additionalBackupRegions(String additionalBackupRegions) {
            return additionalBackupRegions(Output.of(additionalBackupRegions));
        }

        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        public Builder backupHour(@Nullable Output<Integer> backupHour) {
            $.backupHour = backupHour;
            return this;
        }

        public Builder backupHour(Integer backupHour) {
            return backupHour(Output.of(backupHour));
        }

        public Builder backupMinute(@Nullable Output<Integer> backupMinute) {
            $.backupMinute = backupMinute;
            return this;
        }

        public Builder backupMinute(Integer backupMinute) {
            return backupMinute(Output.of(backupMinute));
        }

        public Builder binlogRetentionPeriod(@Nullable Output<Integer> binlogRetentionPeriod) {
            $.binlogRetentionPeriod = binlogRetentionPeriod;
            return this;
        }

        public Builder binlogRetentionPeriod(Integer binlogRetentionPeriod) {
            return binlogRetentionPeriod(Output.of(binlogRetentionPeriod));
        }

        public Builder ipFilterObjects(@Nullable Output<List<MySqlMysqlUserConfigIpFilterObjectArgs>> ipFilterObjects) {
            $.ipFilterObjects = ipFilterObjects;
            return this;
        }

        public Builder ipFilterObjects(List<MySqlMysqlUserConfigIpFilterObjectArgs> ipFilterObjects) {
            return ipFilterObjects(Output.of(ipFilterObjects));
        }

        public Builder ipFilterObjects(MySqlMysqlUserConfigIpFilterObjectArgs... ipFilterObjects) {
            return ipFilterObjects(List.of(ipFilterObjects));
        }

        public Builder ipFilterStrings(@Nullable Output<List<String>> ipFilterStrings) {
            $.ipFilterStrings = ipFilterStrings;
            return this;
        }

        public Builder ipFilterStrings(List<String> ipFilterStrings) {
            return ipFilterStrings(Output.of(ipFilterStrings));
        }

        public Builder ipFilterStrings(String... ipFilterStrings) {
            return ipFilterStrings(List.of(ipFilterStrings));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This will be removed in v5.0.0 and replaced with ip_filter_string instead.
         * 
         */
        @Deprecated /* This will be removed in v5.0.0 and replaced with ip_filter_string instead. */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        public Builder migration(@Nullable Output<MySqlMysqlUserConfigMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        public Builder migration(MySqlMysqlUserConfigMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        public Builder mysql(@Nullable Output<MySqlMysqlUserConfigMysqlArgs> mysql) {
            $.mysql = mysql;
            return this;
        }

        public Builder mysql(MySqlMysqlUserConfigMysqlArgs mysql) {
            return mysql(Output.of(mysql));
        }

        public Builder mysqlVersion(@Nullable Output<String> mysqlVersion) {
            $.mysqlVersion = mysqlVersion;
            return this;
        }

        public Builder mysqlVersion(String mysqlVersion) {
            return mysqlVersion(Output.of(mysqlVersion));
        }

        public Builder privateAccess(@Nullable Output<MySqlMysqlUserConfigPrivateAccessArgs> privateAccess) {
            $.privateAccess = privateAccess;
            return this;
        }

        public Builder privateAccess(MySqlMysqlUserConfigPrivateAccessArgs privateAccess) {
            return privateAccess(Output.of(privateAccess));
        }

        public Builder privatelinkAccess(@Nullable Output<MySqlMysqlUserConfigPrivatelinkAccessArgs> privatelinkAccess) {
            $.privatelinkAccess = privatelinkAccess;
            return this;
        }

        public Builder privatelinkAccess(MySqlMysqlUserConfigPrivatelinkAccessArgs privatelinkAccess) {
            return privatelinkAccess(Output.of(privatelinkAccess));
        }

        public Builder projectToForkFrom(@Nullable Output<String> projectToForkFrom) {
            $.projectToForkFrom = projectToForkFrom;
            return this;
        }

        public Builder projectToForkFrom(String projectToForkFrom) {
            return projectToForkFrom(Output.of(projectToForkFrom));
        }

        public Builder publicAccess(@Nullable Output<MySqlMysqlUserConfigPublicAccessArgs> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        public Builder publicAccess(MySqlMysqlUserConfigPublicAccessArgs publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        public Builder recoveryTargetTime(@Nullable Output<String> recoveryTargetTime) {
            $.recoveryTargetTime = recoveryTargetTime;
            return this;
        }

        public Builder recoveryTargetTime(String recoveryTargetTime) {
            return recoveryTargetTime(Output.of(recoveryTargetTime));
        }

        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        public Builder serviceToForkFrom(@Nullable Output<String> serviceToForkFrom) {
            $.serviceToForkFrom = serviceToForkFrom;
            return this;
        }

        public Builder serviceToForkFrom(String serviceToForkFrom) {
            return serviceToForkFrom(Output.of(serviceToForkFrom));
        }

        public Builder staticIps(@Nullable Output<Boolean> staticIps) {
            $.staticIps = staticIps;
            return this;
        }

        public Builder staticIps(Boolean staticIps) {
            return staticIps(Output.of(staticIps));
        }

        public MySqlMysqlUserConfigArgs build() {
            return $;
        }
    }

}
