// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aiven.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOpenSearchOpensearchUserConfigOpensearchSegrep {
    /**
     * @return The maximum number of indexing checkpoints that a replica shard can fall behind when copying from primary. Once `segrep.pressure.checkpoint.limit` is breached along with `segrep.pressure.time.limit`, the segment replication backpressure mechanism is initiated. Default is 4 checkpoints. Default: `4`.
     * 
     */
    private @Nullable Integer pressureCheckpointLimit;
    /**
     * @return Enables the segment replication backpressure mechanism. Default is false. Default: `false`.
     * 
     */
    private @Nullable Boolean pressureEnabled;
    /**
     * @return The maximum number of stale replica shards that can exist in a replication group. Once `segrep.pressure.replica.stale.limit` is breached, the segment replication backpressure mechanism is initiated. Default is .5, which is 50% of a replication group. Default: `0.5`.
     * 
     */
    private @Nullable Double pressureReplicaStaleLimit;
    /**
     * @return The maximum amount of time that a replica shard can take to copy from the primary shard. Once segrep.pressure.time.limit is breached along with segrep.pressure.checkpoint.limit, the segment replication backpressure mechanism is initiated. Default is 5 minutes. Default: `5m`.
     * 
     */
    private @Nullable String pressureTimeLimit;

    private GetOpenSearchOpensearchUserConfigOpensearchSegrep() {}
    /**
     * @return The maximum number of indexing checkpoints that a replica shard can fall behind when copying from primary. Once `segrep.pressure.checkpoint.limit` is breached along with `segrep.pressure.time.limit`, the segment replication backpressure mechanism is initiated. Default is 4 checkpoints. Default: `4`.
     * 
     */
    public Optional<Integer> pressureCheckpointLimit() {
        return Optional.ofNullable(this.pressureCheckpointLimit);
    }
    /**
     * @return Enables the segment replication backpressure mechanism. Default is false. Default: `false`.
     * 
     */
    public Optional<Boolean> pressureEnabled() {
        return Optional.ofNullable(this.pressureEnabled);
    }
    /**
     * @return The maximum number of stale replica shards that can exist in a replication group. Once `segrep.pressure.replica.stale.limit` is breached, the segment replication backpressure mechanism is initiated. Default is .5, which is 50% of a replication group. Default: `0.5`.
     * 
     */
    public Optional<Double> pressureReplicaStaleLimit() {
        return Optional.ofNullable(this.pressureReplicaStaleLimit);
    }
    /**
     * @return The maximum amount of time that a replica shard can take to copy from the primary shard. Once segrep.pressure.time.limit is breached along with segrep.pressure.checkpoint.limit, the segment replication backpressure mechanism is initiated. Default is 5 minutes. Default: `5m`.
     * 
     */
    public Optional<String> pressureTimeLimit() {
        return Optional.ofNullable(this.pressureTimeLimit);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOpenSearchOpensearchUserConfigOpensearchSegrep defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer pressureCheckpointLimit;
        private @Nullable Boolean pressureEnabled;
        private @Nullable Double pressureReplicaStaleLimit;
        private @Nullable String pressureTimeLimit;
        public Builder() {}
        public Builder(GetOpenSearchOpensearchUserConfigOpensearchSegrep defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.pressureCheckpointLimit = defaults.pressureCheckpointLimit;
    	      this.pressureEnabled = defaults.pressureEnabled;
    	      this.pressureReplicaStaleLimit = defaults.pressureReplicaStaleLimit;
    	      this.pressureTimeLimit = defaults.pressureTimeLimit;
        }

        @CustomType.Setter
        public Builder pressureCheckpointLimit(@Nullable Integer pressureCheckpointLimit) {

            this.pressureCheckpointLimit = pressureCheckpointLimit;
            return this;
        }
        @CustomType.Setter
        public Builder pressureEnabled(@Nullable Boolean pressureEnabled) {

            this.pressureEnabled = pressureEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder pressureReplicaStaleLimit(@Nullable Double pressureReplicaStaleLimit) {

            this.pressureReplicaStaleLimit = pressureReplicaStaleLimit;
            return this;
        }
        @CustomType.Setter
        public Builder pressureTimeLimit(@Nullable String pressureTimeLimit) {

            this.pressureTimeLimit = pressureTimeLimit;
            return this;
        }
        public GetOpenSearchOpensearchUserConfigOpensearchSegrep build() {
            final var _resultValue = new GetOpenSearchOpensearchUserConfigOpensearchSegrep();
            _resultValue.pressureCheckpointLimit = pressureCheckpointLimit;
            _resultValue.pressureEnabled = pressureEnabled;
            _resultValue.pressureReplicaStaleLimit = pressureReplicaStaleLimit;
            _resultValue.pressureTimeLimit = pressureTimeLimit;
            return _resultValue;
        }
    }
}
