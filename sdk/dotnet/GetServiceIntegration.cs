// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetServiceIntegration
    {
        /// <summary>
        /// ## # Service Integration Data Source
        /// 
        /// The Service Integration data source provides information about the existing Aiven Service Integration.
        /// 
        /// Service Integration defines an integration between two Aiven services or between Aiven service and an external
        /// integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service,
        /// getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to
        /// Elasticsearch, etc.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var myintegration = Output.Create(Aiven.GetServiceIntegration.InvokeAsync(new Aiven.GetServiceIntegrationArgs
        ///         {
        ///             DestinationServiceName = "&lt;DESTINATION_SERVICE_NAME&gt;",
        ///             IntegrationType = "datadog",
        ///             Project = aiven_project.Myproject.Project,
        ///             SourceServiceName = "&lt;SOURCE_SERVICE_NAME&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceIntegrationResult> InvokeAsync(GetServiceIntegrationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceIntegrationResult>("aiven:index/getServiceIntegration:getServiceIntegration", args ?? new GetServiceIntegrationArgs(), options.WithVersion());
    }


    public sealed class GetServiceIntegrationArgs : Pulumi.InvokeArgs
    {
        [Input("dashboardUserConfig")]
        public Inputs.GetServiceIntegrationDashboardUserConfigArgs? DashboardUserConfig { get; set; }

        [Input("datadogUserConfig")]
        public Inputs.GetServiceIntegrationDatadogUserConfigArgs? DatadogUserConfig { get; set; }

        [Input("destinationEndpointId")]
        public string? DestinationEndpointId { get; set; }

        /// <summary>
        /// identifies the target side of the integration.
        /// </summary>
        [Input("destinationServiceName", required: true)]
        public string DestinationServiceName { get; set; } = null!;

        [Input("externalAwsCloudwatchLogsUserConfig")]
        public Inputs.GetServiceIntegrationExternalAwsCloudwatchLogsUserConfigArgs? ExternalAwsCloudwatchLogsUserConfig { get; set; }

        [Input("externalElasticsearchLogsUserConfig")]
        public Inputs.GetServiceIntegrationExternalElasticsearchLogsUserConfigArgs? ExternalElasticsearchLogsUserConfig { get; set; }

        [Input("externalGoogleCloudLoggingUserConfig")]
        public Inputs.GetServiceIntegrationExternalGoogleCloudLoggingUserConfigArgs? ExternalGoogleCloudLoggingUserConfig { get; set; }

        /// <summary>
        /// identifies the type of integration that is set up. Possible values include `dashboard`
        /// , `datadog`, `logs`, `metrics` and `mirrormaker`.
        /// </summary>
        [Input("integrationType", required: true)]
        public string IntegrationType { get; set; } = null!;

        [Input("kafkaConnectUserConfig")]
        public Inputs.GetServiceIntegrationKafkaConnectUserConfigArgs? KafkaConnectUserConfig { get; set; }

        [Input("kafkaLogsUserConfig")]
        public Inputs.GetServiceIntegrationKafkaLogsUserConfigArgs? KafkaLogsUserConfig { get; set; }

        [Input("kafkaMirrormakerUserConfig")]
        public Inputs.GetServiceIntegrationKafkaMirrormakerUserConfigArgs? KafkaMirrormakerUserConfig { get; set; }

        [Input("logsUserConfig")]
        public Inputs.GetServiceIntegrationLogsUserConfigArgs? LogsUserConfig { get; set; }

        [Input("m3aggregatorUserConfig")]
        public Inputs.GetServiceIntegrationM3aggregatorUserConfigArgs? M3aggregatorUserConfig { get; set; }

        [Input("m3coordinatorUserConfig")]
        public Inputs.GetServiceIntegrationM3coordinatorUserConfigArgs? M3coordinatorUserConfig { get; set; }

        [Input("metricsUserConfig")]
        public Inputs.GetServiceIntegrationMetricsUserConfigArgs? MetricsUserConfig { get; set; }

        [Input("mirrormakerUserConfig")]
        public Inputs.GetServiceIntegrationMirrormakerUserConfigArgs? MirrormakerUserConfig { get; set; }

        /// <summary>
        /// defines the project the integration belongs to.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("prometheusUserConfig")]
        public Inputs.GetServiceIntegrationPrometheusUserConfigArgs? PrometheusUserConfig { get; set; }

        [Input("readReplicaUserConfig")]
        public Inputs.GetServiceIntegrationReadReplicaUserConfigArgs? ReadReplicaUserConfig { get; set; }

        [Input("rsyslogUserConfig")]
        public Inputs.GetServiceIntegrationRsyslogUserConfigArgs? RsyslogUserConfig { get; set; }

        [Input("schemaRegistryProxyUserConfig")]
        public Inputs.GetServiceIntegrationSchemaRegistryProxyUserConfigArgs? SchemaRegistryProxyUserConfig { get; set; }

        [Input("signalfxUserConfig")]
        public Inputs.GetServiceIntegrationSignalfxUserConfigArgs? SignalfxUserConfig { get; set; }

        [Input("sourceEndpointId")]
        public string? SourceEndpointId { get; set; }

        /// <summary>
        /// identifies the source side of the integration.
        /// </summary>
        [Input("sourceServiceName", required: true)]
        public string SourceServiceName { get; set; } = null!;

        public GetServiceIntegrationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceIntegrationResult
    {
        public readonly Outputs.GetServiceIntegrationDashboardUserConfigResult? DashboardUserConfig;
        public readonly Outputs.GetServiceIntegrationDatadogUserConfigResult? DatadogUserConfig;
        public readonly string? DestinationEndpointId;
        public readonly string DestinationServiceName;
        public readonly Outputs.GetServiceIntegrationExternalAwsCloudwatchLogsUserConfigResult? ExternalAwsCloudwatchLogsUserConfig;
        public readonly Outputs.GetServiceIntegrationExternalElasticsearchLogsUserConfigResult? ExternalElasticsearchLogsUserConfig;
        public readonly Outputs.GetServiceIntegrationExternalGoogleCloudLoggingUserConfigResult? ExternalGoogleCloudLoggingUserConfig;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IntegrationType;
        public readonly Outputs.GetServiceIntegrationKafkaConnectUserConfigResult? KafkaConnectUserConfig;
        public readonly Outputs.GetServiceIntegrationKafkaLogsUserConfigResult? KafkaLogsUserConfig;
        public readonly Outputs.GetServiceIntegrationKafkaMirrormakerUserConfigResult? KafkaMirrormakerUserConfig;
        public readonly Outputs.GetServiceIntegrationLogsUserConfigResult? LogsUserConfig;
        public readonly Outputs.GetServiceIntegrationM3aggregatorUserConfigResult? M3aggregatorUserConfig;
        public readonly Outputs.GetServiceIntegrationM3coordinatorUserConfigResult? M3coordinatorUserConfig;
        public readonly Outputs.GetServiceIntegrationMetricsUserConfigResult? MetricsUserConfig;
        public readonly Outputs.GetServiceIntegrationMirrormakerUserConfigResult? MirrormakerUserConfig;
        public readonly string Project;
        public readonly Outputs.GetServiceIntegrationPrometheusUserConfigResult? PrometheusUserConfig;
        public readonly Outputs.GetServiceIntegrationReadReplicaUserConfigResult? ReadReplicaUserConfig;
        public readonly Outputs.GetServiceIntegrationRsyslogUserConfigResult? RsyslogUserConfig;
        public readonly Outputs.GetServiceIntegrationSchemaRegistryProxyUserConfigResult? SchemaRegistryProxyUserConfig;
        public readonly Outputs.GetServiceIntegrationSignalfxUserConfigResult? SignalfxUserConfig;
        public readonly string? SourceEndpointId;
        public readonly string SourceServiceName;

        [OutputConstructor]
        private GetServiceIntegrationResult(
            Outputs.GetServiceIntegrationDashboardUserConfigResult? dashboardUserConfig,

            Outputs.GetServiceIntegrationDatadogUserConfigResult? datadogUserConfig,

            string? destinationEndpointId,

            string destinationServiceName,

            Outputs.GetServiceIntegrationExternalAwsCloudwatchLogsUserConfigResult? externalAwsCloudwatchLogsUserConfig,

            Outputs.GetServiceIntegrationExternalElasticsearchLogsUserConfigResult? externalElasticsearchLogsUserConfig,

            Outputs.GetServiceIntegrationExternalGoogleCloudLoggingUserConfigResult? externalGoogleCloudLoggingUserConfig,

            string id,

            string integrationType,

            Outputs.GetServiceIntegrationKafkaConnectUserConfigResult? kafkaConnectUserConfig,

            Outputs.GetServiceIntegrationKafkaLogsUserConfigResult? kafkaLogsUserConfig,

            Outputs.GetServiceIntegrationKafkaMirrormakerUserConfigResult? kafkaMirrormakerUserConfig,

            Outputs.GetServiceIntegrationLogsUserConfigResult? logsUserConfig,

            Outputs.GetServiceIntegrationM3aggregatorUserConfigResult? m3aggregatorUserConfig,

            Outputs.GetServiceIntegrationM3coordinatorUserConfigResult? m3coordinatorUserConfig,

            Outputs.GetServiceIntegrationMetricsUserConfigResult? metricsUserConfig,

            Outputs.GetServiceIntegrationMirrormakerUserConfigResult? mirrormakerUserConfig,

            string project,

            Outputs.GetServiceIntegrationPrometheusUserConfigResult? prometheusUserConfig,

            Outputs.GetServiceIntegrationReadReplicaUserConfigResult? readReplicaUserConfig,

            Outputs.GetServiceIntegrationRsyslogUserConfigResult? rsyslogUserConfig,

            Outputs.GetServiceIntegrationSchemaRegistryProxyUserConfigResult? schemaRegistryProxyUserConfig,

            Outputs.GetServiceIntegrationSignalfxUserConfigResult? signalfxUserConfig,

            string? sourceEndpointId,

            string sourceServiceName)
        {
            DashboardUserConfig = dashboardUserConfig;
            DatadogUserConfig = datadogUserConfig;
            DestinationEndpointId = destinationEndpointId;
            DestinationServiceName = destinationServiceName;
            ExternalAwsCloudwatchLogsUserConfig = externalAwsCloudwatchLogsUserConfig;
            ExternalElasticsearchLogsUserConfig = externalElasticsearchLogsUserConfig;
            ExternalGoogleCloudLoggingUserConfig = externalGoogleCloudLoggingUserConfig;
            Id = id;
            IntegrationType = integrationType;
            KafkaConnectUserConfig = kafkaConnectUserConfig;
            KafkaLogsUserConfig = kafkaLogsUserConfig;
            KafkaMirrormakerUserConfig = kafkaMirrormakerUserConfig;
            LogsUserConfig = logsUserConfig;
            M3aggregatorUserConfig = m3aggregatorUserConfig;
            M3coordinatorUserConfig = m3coordinatorUserConfig;
            MetricsUserConfig = metricsUserConfig;
            MirrormakerUserConfig = mirrormakerUserConfig;
            Project = project;
            PrometheusUserConfig = prometheusUserConfig;
            ReadReplicaUserConfig = readReplicaUserConfig;
            RsyslogUserConfig = rsyslogUserConfig;
            SchemaRegistryProxyUserConfig = schemaRegistryProxyUserConfig;
            SignalfxUserConfig = signalfxUserConfig;
            SourceEndpointId = sourceEndpointId;
            SourceServiceName = sourceServiceName;
        }
    }
}
