// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetServiceIntegration
    {
        /// <summary>
        /// The Service Integration data source provides information about the existing Aiven Service Integration.
        /// 
        /// Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// 
        /// {{tffile "examples/data-sources/aiven_service_integration/data-source.tf"}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceIntegrationResult> InvokeAsync(GetServiceIntegrationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceIntegrationResult>("aiven:index/getServiceIntegration:getServiceIntegration", args ?? new GetServiceIntegrationArgs(), options.WithDefaults());

        /// <summary>
        /// The Service Integration data source provides information about the existing Aiven Service Integration.
        /// 
        /// Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// 
        /// {{tffile "examples/data-sources/aiven_service_integration/data-source.tf"}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServiceIntegrationResult> Invoke(GetServiceIntegrationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetServiceIntegrationResult>("aiven:index/getServiceIntegration:getServiceIntegration", args ?? new GetServiceIntegrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceIntegrationArgs : Pulumi.InvokeArgs
    {
        [Input("destinationServiceName", required: true)]
        public string DestinationServiceName { get; set; } = null!;

        [Input("integrationType", required: true)]
        public string IntegrationType { get; set; } = null!;

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("sourceServiceName", required: true)]
        public string SourceServiceName { get; set; } = null!;

        public GetServiceIntegrationArgs()
        {
        }
    }

    public sealed class GetServiceIntegrationInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("destinationServiceName", required: true)]
        public Input<string> DestinationServiceName { get; set; } = null!;

        [Input("integrationType", required: true)]
        public Input<string> IntegrationType { get; set; } = null!;

        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("sourceServiceName", required: true)]
        public Input<string> SourceServiceName { get; set; } = null!;

        public GetServiceIntegrationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceIntegrationResult
    {
        public readonly string DestinationEndpointId;
        public readonly string DestinationServiceName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IntegrationId;
        public readonly string IntegrationType;
        public readonly ImmutableArray<Outputs.GetServiceIntegrationKafkaConnectUserConfigResult> KafkaConnectUserConfigs;
        public readonly ImmutableArray<Outputs.GetServiceIntegrationKafkaLogsUserConfigResult> KafkaLogsUserConfigs;
        public readonly ImmutableArray<Outputs.GetServiceIntegrationKafkaMirrormakerUserConfigResult> KafkaMirrormakerUserConfigs;
        public readonly ImmutableArray<Outputs.GetServiceIntegrationLogsUserConfigResult> LogsUserConfigs;
        public readonly ImmutableArray<Outputs.GetServiceIntegrationMetricsUserConfigResult> MetricsUserConfigs;
        public readonly ImmutableArray<Outputs.GetServiceIntegrationMirrormakerUserConfigResult> MirrormakerUserConfigs;
        public readonly string Project;
        public readonly string SourceEndpointId;
        public readonly string SourceServiceName;

        [OutputConstructor]
        private GetServiceIntegrationResult(
            string destinationEndpointId,

            string destinationServiceName,

            string id,

            string integrationId,

            string integrationType,

            ImmutableArray<Outputs.GetServiceIntegrationKafkaConnectUserConfigResult> kafkaConnectUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationKafkaLogsUserConfigResult> kafkaLogsUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationKafkaMirrormakerUserConfigResult> kafkaMirrormakerUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationLogsUserConfigResult> logsUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationMetricsUserConfigResult> metricsUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationMirrormakerUserConfigResult> mirrormakerUserConfigs,

            string project,

            string sourceEndpointId,

            string sourceServiceName)
        {
            DestinationEndpointId = destinationEndpointId;
            DestinationServiceName = destinationServiceName;
            Id = id;
            IntegrationId = integrationId;
            IntegrationType = integrationType;
            KafkaConnectUserConfigs = kafkaConnectUserConfigs;
            KafkaLogsUserConfigs = kafkaLogsUserConfigs;
            KafkaMirrormakerUserConfigs = kafkaMirrormakerUserConfigs;
            LogsUserConfigs = logsUserConfigs;
            MetricsUserConfigs = metricsUserConfigs;
            MirrormakerUserConfigs = mirrormakerUserConfigs;
            Project = project;
            SourceEndpointId = sourceEndpointId;
            SourceServiceName = sourceServiceName;
        }
    }
}
