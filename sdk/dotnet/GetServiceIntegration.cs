// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetServiceIntegration
    {
        /// <summary>
        /// The Service Integration data source provides information about the existing Aiven Service Integration.
        /// 
        /// Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
        /// </summary>
        public static Task<GetServiceIntegrationResult> InvokeAsync(GetServiceIntegrationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceIntegrationResult>("aiven:index/getServiceIntegration:getServiceIntegration", args ?? new GetServiceIntegrationArgs(), options.WithDefaults());

        /// <summary>
        /// The Service Integration data source provides information about the existing Aiven Service Integration.
        /// 
        /// Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
        /// </summary>
        public static Output<GetServiceIntegrationResult> Invoke(GetServiceIntegrationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetServiceIntegrationResult>("aiven:index/getServiceIntegration:getServiceIntegration", args ?? new GetServiceIntegrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceIntegrationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Destination service for the integration (if any)
        /// </summary>
        [Input("destinationServiceName", required: true)]
        public string DestinationServiceName { get; set; } = null!;

        /// <summary>
        /// Type of the service integration
        /// </summary>
        [Input("integrationType", required: true)]
        public string IntegrationType { get; set; } = null!;

        /// <summary>
        /// Project the integration belongs to
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// Source service for the integration (if any)
        /// </summary>
        [Input("sourceServiceName", required: true)]
        public string SourceServiceName { get; set; } = null!;

        public GetServiceIntegrationArgs()
        {
        }
    }

    public sealed class GetServiceIntegrationInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Destination service for the integration (if any)
        /// </summary>
        [Input("destinationServiceName", required: true)]
        public Input<string> DestinationServiceName { get; set; } = null!;

        /// <summary>
        /// Type of the service integration
        /// </summary>
        [Input("integrationType", required: true)]
        public Input<string> IntegrationType { get; set; } = null!;

        /// <summary>
        /// Project the integration belongs to
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Source service for the integration (if any)
        /// </summary>
        [Input("sourceServiceName", required: true)]
        public Input<string> SourceServiceName { get; set; } = null!;

        public GetServiceIntegrationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceIntegrationResult
    {
        /// <summary>
        /// Dashboard specific user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceIntegrationDatadogUserConfigResult> DatadogUserConfigs;
        /// <summary>
        /// Destination endpoint for the integration (if any)
        /// </summary>
        public readonly string DestinationEndpointId;
        /// <summary>
        /// Destination service for the integration (if any)
        /// </summary>
        public readonly string DestinationServiceName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Service Integration Id at aiven
        /// </summary>
        public readonly string IntegrationId;
        /// <summary>
        /// Type of the service integration
        /// </summary>
        public readonly string IntegrationType;
        /// <summary>
        /// Kafka Connect specific user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceIntegrationKafkaConnectUserConfigResult> KafkaConnectUserConfigs;
        /// <summary>
        /// Kafka Logs specific user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceIntegrationKafkaLogsUserConfigResult> KafkaLogsUserConfigs;
        /// <summary>
        /// Mirrormaker 2 integration specific user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceIntegrationKafkaMirrormakerUserConfigResult> KafkaMirrormakerUserConfigs;
        /// <summary>
        /// Log integration specific user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceIntegrationLogsUserConfigResult> LogsUserConfigs;
        /// <summary>
        /// Metrics specific user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceIntegrationMetricsUserConfigResult> MetricsUserConfigs;
        /// <summary>
        /// Mirrormaker 1 integration specific user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceIntegrationMirrormakerUserConfigResult> MirrormakerUserConfigs;
        /// <summary>
        /// Project the integration belongs to
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Prometheus coordinator specific user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceIntegrationPrometheusUserConfigResult> PrometheusUserConfigs;
        /// <summary>
        /// Source endpoint for the integration (if any)
        /// </summary>
        public readonly string SourceEndpointId;
        /// <summary>
        /// Source service for the integration (if any)
        /// </summary>
        public readonly string SourceServiceName;

        [OutputConstructor]
        private GetServiceIntegrationResult(
            ImmutableArray<Outputs.GetServiceIntegrationDatadogUserConfigResult> datadogUserConfigs,

            string destinationEndpointId,

            string destinationServiceName,

            string id,

            string integrationId,

            string integrationType,

            ImmutableArray<Outputs.GetServiceIntegrationKafkaConnectUserConfigResult> kafkaConnectUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationKafkaLogsUserConfigResult> kafkaLogsUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationKafkaMirrormakerUserConfigResult> kafkaMirrormakerUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationLogsUserConfigResult> logsUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationMetricsUserConfigResult> metricsUserConfigs,

            ImmutableArray<Outputs.GetServiceIntegrationMirrormakerUserConfigResult> mirrormakerUserConfigs,

            string project,

            ImmutableArray<Outputs.GetServiceIntegrationPrometheusUserConfigResult> prometheusUserConfigs,

            string sourceEndpointId,

            string sourceServiceName)
        {
            DatadogUserConfigs = datadogUserConfigs;
            DestinationEndpointId = destinationEndpointId;
            DestinationServiceName = destinationServiceName;
            Id = id;
            IntegrationId = integrationId;
            IntegrationType = integrationType;
            KafkaConnectUserConfigs = kafkaConnectUserConfigs;
            KafkaLogsUserConfigs = kafkaLogsUserConfigs;
            KafkaMirrormakerUserConfigs = kafkaMirrormakerUserConfigs;
            LogsUserConfigs = logsUserConfigs;
            MetricsUserConfigs = metricsUserConfigs;
            MirrormakerUserConfigs = mirrormakerUserConfigs;
            Project = project;
            PrometheusUserConfigs = prometheusUserConfigs;
            SourceEndpointId = sourceEndpointId;
            SourceServiceName = sourceServiceName;
        }
    }
}
