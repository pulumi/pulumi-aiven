// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetKafkaSchema
    {
        /// <summary>
        /// ## # Kafka Schema Data Source
        /// 
        /// The Kafka Schema data source provides information about the existing Aiven Kafka Schema.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var kafka_schema1 = Output.Create(Aiven.GetKafkaSchema.InvokeAsync(new Aiven.GetKafkaSchemaArgs
        ///         {
        ///             Project = aiven_project.Kafka_schemas_project1.Project,
        ///             ServiceName = aiven_service.Kafka_service1.Service_name,
        ///             SubjectName = "kafka-schema1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaSchemaResult> InvokeAsync(GetKafkaSchemaArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaSchemaResult>("aiven:index/getKafkaSchema:getKafkaSchema", args ?? new GetKafkaSchemaArgs(), options.WithVersion());
    }


    public sealed class GetKafkaSchemaArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// configuration compatibility level overrides specific subject
        /// resource. If the compatibility level not specified for the individual subject by default,
        /// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
        /// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
        /// </summary>
        [Input("compatibilityLevel")]
        public string? CompatibilityLevel { get; set; }

        /// <summary>
        /// and `service_name` - (Required) define the project and service the Kafka Schemas belongs to. 
        /// They should be defined using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// is Kafka Schema configuration should be a valid Avro Schema JSON format.
        /// </summary>
        [Input("schema")]
        public string? Schema { get; set; }

        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// is Kafka Schema subject name.
        /// </summary>
        [Input("subjectName", required: true)]
        public string SubjectName { get; set; } = null!;

        [Input("version")]
        public int? Version { get; set; }

        public GetKafkaSchemaArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaSchemaResult
    {
        /// <summary>
        /// configuration compatibility level overrides specific subject
        /// resource. If the compatibility level not specified for the individual subject by default,
        /// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
        /// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
        /// </summary>
        public readonly string? CompatibilityLevel;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Project;
        /// <summary>
        /// is Kafka Schema configuration should be a valid Avro Schema JSON format.
        /// </summary>
        public readonly string? Schema;
        public readonly string ServiceName;
        public readonly string SubjectName;
        public readonly int Version;

        [OutputConstructor]
        private GetKafkaSchemaResult(
            string? compatibilityLevel,

            string id,

            string project,

            string? schema,

            string serviceName,

            string subjectName,

            int version)
        {
            CompatibilityLevel = compatibilityLevel;
            Id = id;
            Project = project;
            Schema = schema;
            ServiceName = serviceName;
            SubjectName = subjectName;
            Version = version;
        }
    }
}
