// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// 
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myservice = new Aiven.Service("myservice", new Aiven.ServiceArgs
    ///         {
    ///             CloudName = "google-europe-west1",
    ///             PgUserConfig = new Aiven.Inputs.ServicePgUserConfigArgs
    ///             {
    ///                 IpFilter = 
    ///                 {
    ///                     "0.0.0.0/0",
    ///                 },
    ///                 PgVersion = "10",
    ///             },
    ///             Plan = "business-8",
    ///             Project = aiven_project.Myproject.Project,
    ///             ProjectVpcId = aiven_project_vpc.Vpc_gcp_europe_west1.Id,
    ///             ServiceName = "&lt;SERVICE_NAME&gt;",
    ///             ServiceType = "pg",
    ///             TerminationProtection = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Service : Pulumi.CustomResource
    {
        /// <summary>
        /// Cassandra specific server provided values
        /// </summary>
        [Output("cassandra")]
        public Output<Outputs.ServiceCassandra> Cassandra { get; private set; } = null!;

        /// <summary>
        /// Cassandra specific user configurable settings
        /// </summary>
        [Output("cassandraUserConfig")]
        public Output<Outputs.ServiceCassandraUserConfig?> CassandraUserConfig { get; private set; } = null!;

        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Output("cloudName")]
        public Output<string?> CloudName { get; private set; } = null!;

        /// <summary>
        /// Service component information objects
        /// </summary>
        [Output("components")]
        public Output<ImmutableArray<Outputs.ServiceComponent>> Components { get; private set; } = null!;

        /// <summary>
        /// Elasticsearch specific server provided values
        /// </summary>
        [Output("elasticsearch")]
        public Output<Outputs.ServiceElasticsearch> Elasticsearch { get; private set; } = null!;

        /// <summary>
        /// Elasticsearch specific user configurable settings
        /// </summary>
        [Output("elasticsearchUserConfig")]
        public Output<Outputs.ServiceElasticsearchUserConfig?> ElasticsearchUserConfig { get; private set; } = null!;

        /// <summary>
        /// Grafana specific server provided values
        /// </summary>
        [Output("grafana")]
        public Output<Outputs.ServiceGrafana> Grafana { get; private set; } = null!;

        /// <summary>
        /// Grafana specific user configurable settings
        /// </summary>
        [Output("grafanaUserConfig")]
        public Output<Outputs.ServiceGrafanaUserConfig?> GrafanaUserConfig { get; private set; } = null!;

        /// <summary>
        /// InfluxDB specific server provided values
        /// </summary>
        [Output("influxdb")]
        public Output<Outputs.ServiceInfluxdb> Influxdb { get; private set; } = null!;

        /// <summary>
        /// InfluxDB specific user configurable settings
        /// </summary>
        [Output("influxdbUserConfig")]
        public Output<Outputs.ServiceInfluxdbUserConfig?> InfluxdbUserConfig { get; private set; } = null!;

        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        [Output("kafka")]
        public Output<Outputs.ServiceKafka> Kafka { get; private set; } = null!;

        /// <summary>
        /// Kafka Connect specific server provided values
        /// </summary>
        [Output("kafkaConnect")]
        public Output<Outputs.ServiceKafkaConnect> KafkaConnect { get; private set; } = null!;

        /// <summary>
        /// Kafka Connect specific user configurable settings
        /// </summary>
        [Output("kafkaConnectUserConfig")]
        public Output<Outputs.ServiceKafkaConnectUserConfig?> KafkaConnectUserConfig { get; private set; } = null!;

        /// <summary>
        /// Kafka specific user configurable settings
        /// </summary>
        [Output("kafkaUserConfig")]
        public Output<Outputs.ServiceKafkaUserConfig?> KafkaUserConfig { get; private set; } = null!;

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Output("maintenanceWindowDow")]
        public Output<string?> MaintenanceWindowDow { get; private set; } = null!;

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Output("maintenanceWindowTime")]
        public Output<string?> MaintenanceWindowTime { get; private set; } = null!;

        /// <summary>
        /// MySQL specific server provided values
        /// </summary>
        [Output("mysql")]
        public Output<Outputs.ServiceMysql> Mysql { get; private set; } = null!;

        /// <summary>
        /// MySQL specific user configurable settings
        /// </summary>
        [Output("mysqlUserConfig")]
        public Output<Outputs.ServiceMysqlUserConfig?> MysqlUserConfig { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL specific server provided values
        /// </summary>
        [Output("pg")]
        public Output<Outputs.ServicePg> Pg { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL specific user configurable settings
        /// </summary>
        [Output("pgUserConfig")]
        public Output<Outputs.ServicePgUserConfig?> PgUserConfig { get; private set; } = null!;

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// Target project
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Output("projectVpcId")]
        public Output<string?> ProjectVpcId { get; private set; } = null!;

        /// <summary>
        /// Redis specific server provided values
        /// </summary>
        [Output("redis")]
        public Output<Outputs.ServiceRedis> Redis { get; private set; } = null!;

        /// <summary>
        /// Redis specific user configurable settings
        /// </summary>
        [Output("redisUserConfig")]
        public Output<Outputs.ServiceRedisUserConfig?> RedisUserConfig { get; private set; } = null!;

        /// <summary>
        /// Service hostname
        /// </summary>
        [Output("serviceHost")]
        public Output<string> ServiceHost { get; private set; } = null!;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        [Output("serviceIntegrations")]
        public Output<ImmutableArray<Outputs.ServiceServiceIntegration>> ServiceIntegrations { get; private set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Output("servicePassword")]
        public Output<string> ServicePassword { get; private set; } = null!;

        /// <summary>
        /// Service port
        /// </summary>
        [Output("servicePort")]
        public Output<int> ServicePort { get; private set; } = null!;

        /// <summary>
        /// Service type code
        /// </summary>
        [Output("serviceType")]
        public Output<string> ServiceType { get; private set; } = null!;

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Output("serviceUri")]
        public Output<string> ServiceUri { get; private set; } = null!;

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Output("serviceUsername")]
        public Output<string> ServiceUsername { get; private set; } = null!;

        /// <summary>
        /// Service state
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cassandra specific server provided values
        /// </summary>
        [Input("cassandra")]
        public Input<Inputs.ServiceCassandraArgs>? Cassandra { get; set; }

        /// <summary>
        /// Cassandra specific user configurable settings
        /// </summary>
        [Input("cassandraUserConfig")]
        public Input<Inputs.ServiceCassandraUserConfigArgs>? CassandraUserConfig { get; set; }

        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        /// <summary>
        /// Elasticsearch specific server provided values
        /// </summary>
        [Input("elasticsearch")]
        public Input<Inputs.ServiceElasticsearchArgs>? Elasticsearch { get; set; }

        /// <summary>
        /// Elasticsearch specific user configurable settings
        /// </summary>
        [Input("elasticsearchUserConfig")]
        public Input<Inputs.ServiceElasticsearchUserConfigArgs>? ElasticsearchUserConfig { get; set; }

        /// <summary>
        /// Grafana specific server provided values
        /// </summary>
        [Input("grafana")]
        public Input<Inputs.ServiceGrafanaArgs>? Grafana { get; set; }

        /// <summary>
        /// Grafana specific user configurable settings
        /// </summary>
        [Input("grafanaUserConfig")]
        public Input<Inputs.ServiceGrafanaUserConfigArgs>? GrafanaUserConfig { get; set; }

        /// <summary>
        /// InfluxDB specific server provided values
        /// </summary>
        [Input("influxdb")]
        public Input<Inputs.ServiceInfluxdbArgs>? Influxdb { get; set; }

        /// <summary>
        /// InfluxDB specific user configurable settings
        /// </summary>
        [Input("influxdbUserConfig")]
        public Input<Inputs.ServiceInfluxdbUserConfigArgs>? InfluxdbUserConfig { get; set; }

        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.ServiceKafkaArgs>? Kafka { get; set; }

        /// <summary>
        /// Kafka Connect specific server provided values
        /// </summary>
        [Input("kafkaConnect")]
        public Input<Inputs.ServiceKafkaConnectArgs>? KafkaConnect { get; set; }

        /// <summary>
        /// Kafka Connect specific user configurable settings
        /// </summary>
        [Input("kafkaConnectUserConfig")]
        public Input<Inputs.ServiceKafkaConnectUserConfigArgs>? KafkaConnectUserConfig { get; set; }

        /// <summary>
        /// Kafka specific user configurable settings
        /// </summary>
        [Input("kafkaUserConfig")]
        public Input<Inputs.ServiceKafkaUserConfigArgs>? KafkaUserConfig { get; set; }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// MySQL specific server provided values
        /// </summary>
        [Input("mysql")]
        public Input<Inputs.ServiceMysqlArgs>? Mysql { get; set; }

        /// <summary>
        /// MySQL specific user configurable settings
        /// </summary>
        [Input("mysqlUserConfig")]
        public Input<Inputs.ServiceMysqlUserConfigArgs>? MysqlUserConfig { get; set; }

        /// <summary>
        /// PostgreSQL specific server provided values
        /// </summary>
        [Input("pg")]
        public Input<Inputs.ServicePgArgs>? Pg { get; set; }

        /// <summary>
        /// PostgreSQL specific user configurable settings
        /// </summary>
        [Input("pgUserConfig")]
        public Input<Inputs.ServicePgUserConfigArgs>? PgUserConfig { get; set; }

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Target project
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// Redis specific server provided values
        /// </summary>
        [Input("redis")]
        public Input<Inputs.ServiceRedisArgs>? Redis { get; set; }

        /// <summary>
        /// Redis specific user configurable settings
        /// </summary>
        [Input("redisUserConfig")]
        public Input<Inputs.ServiceRedisUserConfigArgs>? RedisUserConfig { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.ServiceServiceIntegrationArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.ServiceServiceIntegrationArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.ServiceServiceIntegrationArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Service type code
        /// </summary>
        [Input("serviceType", required: true)]
        public Input<string> ServiceType { get; set; } = null!;

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public ServiceArgs()
        {
        }
    }

    public sealed class ServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cassandra specific server provided values
        /// </summary>
        [Input("cassandra")]
        public Input<Inputs.ServiceCassandraGetArgs>? Cassandra { get; set; }

        /// <summary>
        /// Cassandra specific user configurable settings
        /// </summary>
        [Input("cassandraUserConfig")]
        public Input<Inputs.ServiceCassandraUserConfigGetArgs>? CassandraUserConfig { get; set; }

        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        [Input("components")]
        private InputList<Inputs.ServiceComponentGetArgs>? _components;

        /// <summary>
        /// Service component information objects
        /// </summary>
        public InputList<Inputs.ServiceComponentGetArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.ServiceComponentGetArgs>());
            set => _components = value;
        }

        /// <summary>
        /// Elasticsearch specific server provided values
        /// </summary>
        [Input("elasticsearch")]
        public Input<Inputs.ServiceElasticsearchGetArgs>? Elasticsearch { get; set; }

        /// <summary>
        /// Elasticsearch specific user configurable settings
        /// </summary>
        [Input("elasticsearchUserConfig")]
        public Input<Inputs.ServiceElasticsearchUserConfigGetArgs>? ElasticsearchUserConfig { get; set; }

        /// <summary>
        /// Grafana specific server provided values
        /// </summary>
        [Input("grafana")]
        public Input<Inputs.ServiceGrafanaGetArgs>? Grafana { get; set; }

        /// <summary>
        /// Grafana specific user configurable settings
        /// </summary>
        [Input("grafanaUserConfig")]
        public Input<Inputs.ServiceGrafanaUserConfigGetArgs>? GrafanaUserConfig { get; set; }

        /// <summary>
        /// InfluxDB specific server provided values
        /// </summary>
        [Input("influxdb")]
        public Input<Inputs.ServiceInfluxdbGetArgs>? Influxdb { get; set; }

        /// <summary>
        /// InfluxDB specific user configurable settings
        /// </summary>
        [Input("influxdbUserConfig")]
        public Input<Inputs.ServiceInfluxdbUserConfigGetArgs>? InfluxdbUserConfig { get; set; }

        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.ServiceKafkaGetArgs>? Kafka { get; set; }

        /// <summary>
        /// Kafka Connect specific server provided values
        /// </summary>
        [Input("kafkaConnect")]
        public Input<Inputs.ServiceKafkaConnectGetArgs>? KafkaConnect { get; set; }

        /// <summary>
        /// Kafka Connect specific user configurable settings
        /// </summary>
        [Input("kafkaConnectUserConfig")]
        public Input<Inputs.ServiceKafkaConnectUserConfigGetArgs>? KafkaConnectUserConfig { get; set; }

        /// <summary>
        /// Kafka specific user configurable settings
        /// </summary>
        [Input("kafkaUserConfig")]
        public Input<Inputs.ServiceKafkaUserConfigGetArgs>? KafkaUserConfig { get; set; }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// MySQL specific server provided values
        /// </summary>
        [Input("mysql")]
        public Input<Inputs.ServiceMysqlGetArgs>? Mysql { get; set; }

        /// <summary>
        /// MySQL specific user configurable settings
        /// </summary>
        [Input("mysqlUserConfig")]
        public Input<Inputs.ServiceMysqlUserConfigGetArgs>? MysqlUserConfig { get; set; }

        /// <summary>
        /// PostgreSQL specific server provided values
        /// </summary>
        [Input("pg")]
        public Input<Inputs.ServicePgGetArgs>? Pg { get; set; }

        /// <summary>
        /// PostgreSQL specific user configurable settings
        /// </summary>
        [Input("pgUserConfig")]
        public Input<Inputs.ServicePgUserConfigGetArgs>? PgUserConfig { get; set; }

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Target project
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// Redis specific server provided values
        /// </summary>
        [Input("redis")]
        public Input<Inputs.ServiceRedisGetArgs>? Redis { get; set; }

        /// <summary>
        /// Redis specific user configurable settings
        /// </summary>
        [Input("redisUserConfig")]
        public Input<Inputs.ServiceRedisUserConfigGetArgs>? RedisUserConfig { get; set; }

        /// <summary>
        /// Service hostname
        /// </summary>
        [Input("serviceHost")]
        public Input<string>? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.ServiceServiceIntegrationGetArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.ServiceServiceIntegrationGetArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.ServiceServiceIntegrationGetArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Input("servicePassword")]
        public Input<string>? ServicePassword { get; set; }

        /// <summary>
        /// Service port
        /// </summary>
        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        /// <summary>
        /// Service type code
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Input("serviceUri")]
        public Input<string>? ServiceUri { get; set; }

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Input("serviceUsername")]
        public Input<string>? ServiceUsername { get; set; }

        /// <summary>
        /// Service state
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public ServiceState()
        {
        }
    }
}
