// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// The Service resource allows the creation and management of Aiven Services.
    /// </summary>
    [AivenResourceType("aiven:index/service:Service")]
    public partial class Service : Pulumi.CustomResource
    {
        /// <summary>
        /// Cassandra user configurable settings
        /// </summary>
        [Output("cassandraUserConfig")]
        public Output<Outputs.ServiceCassandraUserConfig?> CassandraUserConfig { get; private set; } = null!;

        /// <summary>
        /// Cassandra specific server provided values
        /// </summary>
        [Output("cassandras")]
        public Output<ImmutableArray<Outputs.ServiceCassandra>> Cassandras { get; private set; } = null!;

        /// <summary>
        /// Clickhouse user configurable settings
        /// </summary>
        [Output("clickhouseUserConfig")]
        public Output<Outputs.ServiceClickhouseUserConfig?> ClickhouseUserConfig { get; private set; } = null!;

        /// <summary>
        /// Clickhouse specific server provided values
        /// </summary>
        [Output("clickhouses")]
        public Output<ImmutableArray<Outputs.ServiceClickhouse>> Clickhouses { get; private set; } = null!;

        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Output("cloudName")]
        public Output<string?> CloudName { get; private set; } = null!;

        /// <summary>
        /// Service component information objects
        /// </summary>
        [Output("components")]
        public Output<ImmutableArray<Outputs.ServiceComponent>> Components { get; private set; } = null!;

        /// <summary>
        /// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
        /// </summary>
        [Output("diskSpace")]
        public Output<string?> DiskSpace { get; private set; } = null!;

        /// <summary>
        /// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
        /// </summary>
        [Output("diskSpaceCap")]
        public Output<string> DiskSpaceCap { get; private set; } = null!;

        /// <summary>
        /// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `disk_space`
        /// </summary>
        [Output("diskSpaceDefault")]
        public Output<string> DiskSpaceDefault { get; private set; } = null!;

        /// <summary>
        /// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
        /// </summary>
        [Output("diskSpaceStep")]
        public Output<string> DiskSpaceStep { get; private set; } = null!;

        /// <summary>
        /// Disk space that service is currently using
        /// </summary>
        [Output("diskSpaceUsed")]
        public Output<string> DiskSpaceUsed { get; private set; } = null!;

        /// <summary>
        /// Elasticsearch user configurable settings
        /// </summary>
        [Output("elasticsearchUserConfig")]
        public Output<Outputs.ServiceElasticsearchUserConfig?> ElasticsearchUserConfig { get; private set; } = null!;

        /// <summary>
        /// Elasticsearch specific server provided values
        /// </summary>
        [Output("elasticsearches")]
        public Output<ImmutableArray<Outputs.ServiceElasticsearch>> Elasticsearches { get; private set; } = null!;

        /// <summary>
        /// Flink user configurable settings
        /// </summary>
        [Output("flinkUserConfig")]
        public Output<Outputs.ServiceFlinkUserConfig?> FlinkUserConfig { get; private set; } = null!;

        /// <summary>
        /// Flink specific server provided values
        /// </summary>
        [Output("flinks")]
        public Output<ImmutableArray<Outputs.ServiceFlink>> Flinks { get; private set; } = null!;

        /// <summary>
        /// Grafana user configurable settings
        /// </summary>
        [Output("grafanaUserConfig")]
        public Output<Outputs.ServiceGrafanaUserConfig?> GrafanaUserConfig { get; private set; } = null!;

        /// <summary>
        /// Grafana specific server provided values
        /// </summary>
        [Output("grafanas")]
        public Output<ImmutableArray<Outputs.ServiceGrafana>> Grafanas { get; private set; } = null!;

        /// <summary>
        /// Influxdb user configurable settings
        /// </summary>
        [Output("influxdbUserConfig")]
        public Output<Outputs.ServiceInfluxdbUserConfig?> InfluxdbUserConfig { get; private set; } = null!;

        /// <summary>
        /// InfluxDB specific server provided values
        /// </summary>
        [Output("influxdbs")]
        public Output<ImmutableArray<Outputs.ServiceInfluxdb>> Influxdbs { get; private set; } = null!;

        /// <summary>
        /// Kafka*connect user configurable settings
        /// </summary>
        [Output("kafkaConnectUserConfig")]
        public Output<Outputs.ServiceKafkaConnectUserConfig?> KafkaConnectUserConfig { get; private set; } = null!;

        /// <summary>
        /// Kafka Connect specific server provided values
        /// </summary>
        [Output("kafkaConnects")]
        public Output<ImmutableArray<Outputs.ServiceKafkaConnect>> KafkaConnects { get; private set; } = null!;

        /// <summary>
        /// Kafka*mirrormaker user configurable settings
        /// </summary>
        [Output("kafkaMirrormakerUserConfig")]
        public Output<Outputs.ServiceKafkaMirrormakerUserConfig?> KafkaMirrormakerUserConfig { get; private set; } = null!;

        /// <summary>
        /// Kafka MirrorMaker 2 specific server provided values
        /// </summary>
        [Output("kafkaMirrormakers")]
        public Output<ImmutableArray<Outputs.ServiceKafkaMirrormaker>> KafkaMirrormakers { get; private set; } = null!;

        /// <summary>
        /// Kafka user configurable settings
        /// </summary>
        [Output("kafkaUserConfig")]
        public Output<Outputs.ServiceKafkaUserConfig?> KafkaUserConfig { get; private set; } = null!;

        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        [Output("kafkas")]
        public Output<ImmutableArray<Outputs.ServiceKafka>> Kafkas { get; private set; } = null!;

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Output("maintenanceWindowDow")]
        public Output<string?> MaintenanceWindowDow { get; private set; } = null!;

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Output("maintenanceWindowTime")]
        public Output<string?> MaintenanceWindowTime { get; private set; } = null!;

        /// <summary>
        /// Mysql user configurable settings
        /// </summary>
        [Output("mysqlUserConfig")]
        public Output<Outputs.ServiceMysqlUserConfig?> MysqlUserConfig { get; private set; } = null!;

        /// <summary>
        /// MySQL specific server provided values
        /// </summary>
        [Output("mysqls")]
        public Output<ImmutableArray<Outputs.ServiceMysql>> Mysqls { get; private set; } = null!;

        /// <summary>
        /// Opensearch user configurable settings
        /// </summary>
        [Output("opensearchUserConfig")]
        public Output<Outputs.ServiceOpensearchUserConfig?> OpensearchUserConfig { get; private set; } = null!;

        /// <summary>
        /// Opensearch specific server provided values
        /// </summary>
        [Output("opensearches")]
        public Output<ImmutableArray<Outputs.ServiceOpensearch>> Opensearches { get; private set; } = null!;

        /// <summary>
        /// Pg user configurable settings
        /// </summary>
        [Output("pgUserConfig")]
        public Output<Outputs.ServicePgUserConfig?> PgUserConfig { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL specific server provided values
        /// </summary>
        [Output("pgs")]
        public Output<ImmutableArray<Outputs.ServicePg>> Pgs { get; private set; } = null!;

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// Target project
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Output("projectVpcId")]
        public Output<string?> ProjectVpcId { get; private set; } = null!;

        /// <summary>
        /// Redis specific server provided values
        /// </summary>
        [Output("redis")]
        public Output<ImmutableArray<Outputs.ServiceRedi>> Redis { get; private set; } = null!;

        /// <summary>
        /// Redis user configurable settings
        /// </summary>
        [Output("redisUserConfig")]
        public Output<Outputs.ServiceRedisUserConfig?> RedisUserConfig { get; private set; } = null!;

        /// <summary>
        /// Service hostname
        /// </summary>
        [Output("serviceHost")]
        public Output<string> ServiceHost { get; private set; } = null!;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        [Output("serviceIntegrations")]
        public Output<ImmutableArray<Outputs.ServiceServiceIntegration>> ServiceIntegrations { get; private set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Output("servicePassword")]
        public Output<string> ServicePassword { get; private set; } = null!;

        /// <summary>
        /// Service port
        /// </summary>
        [Output("servicePort")]
        public Output<int> ServicePort { get; private set; } = null!;

        /// <summary>
        /// Service type code
        /// </summary>
        [Output("serviceType")]
        public Output<string> ServiceType { get; private set; } = null!;

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Output("serviceUri")]
        public Output<string> ServiceUri { get; private set; } = null!;

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Output("serviceUsername")]
        public Output<string> ServiceUsername { get; private set; } = null!;

        /// <summary>
        /// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` and `RUNNING`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        [Output("staticIps")]
        public Output<ImmutableArray<string>> StaticIps { get; private set; } = null!;

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cassandra user configurable settings
        /// </summary>
        [Input("cassandraUserConfig")]
        public Input<Inputs.ServiceCassandraUserConfigArgs>? CassandraUserConfig { get; set; }

        /// <summary>
        /// Clickhouse user configurable settings
        /// </summary>
        [Input("clickhouseUserConfig")]
        public Input<Inputs.ServiceClickhouseUserConfigArgs>? ClickhouseUserConfig { get; set; }

        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        /// <summary>
        /// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
        /// </summary>
        [Input("diskSpace")]
        public Input<string>? DiskSpace { get; set; }

        /// <summary>
        /// Elasticsearch user configurable settings
        /// </summary>
        [Input("elasticsearchUserConfig")]
        public Input<Inputs.ServiceElasticsearchUserConfigArgs>? ElasticsearchUserConfig { get; set; }

        /// <summary>
        /// Flink user configurable settings
        /// </summary>
        [Input("flinkUserConfig")]
        public Input<Inputs.ServiceFlinkUserConfigArgs>? FlinkUserConfig { get; set; }

        [Input("flinks")]
        private InputList<Inputs.ServiceFlinkArgs>? _flinks;

        /// <summary>
        /// Flink specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceFlinkArgs> Flinks
        {
            get => _flinks ?? (_flinks = new InputList<Inputs.ServiceFlinkArgs>());
            set => _flinks = value;
        }

        /// <summary>
        /// Grafana user configurable settings
        /// </summary>
        [Input("grafanaUserConfig")]
        public Input<Inputs.ServiceGrafanaUserConfigArgs>? GrafanaUserConfig { get; set; }

        /// <summary>
        /// Influxdb user configurable settings
        /// </summary>
        [Input("influxdbUserConfig")]
        public Input<Inputs.ServiceInfluxdbUserConfigArgs>? InfluxdbUserConfig { get; set; }

        /// <summary>
        /// Kafka*connect user configurable settings
        /// </summary>
        [Input("kafkaConnectUserConfig")]
        public Input<Inputs.ServiceKafkaConnectUserConfigArgs>? KafkaConnectUserConfig { get; set; }

        /// <summary>
        /// Kafka*mirrormaker user configurable settings
        /// </summary>
        [Input("kafkaMirrormakerUserConfig")]
        public Input<Inputs.ServiceKafkaMirrormakerUserConfigArgs>? KafkaMirrormakerUserConfig { get; set; }

        /// <summary>
        /// Kafka user configurable settings
        /// </summary>
        [Input("kafkaUserConfig")]
        public Input<Inputs.ServiceKafkaUserConfigArgs>? KafkaUserConfig { get; set; }

        [Input("kafkas")]
        private InputList<Inputs.ServiceKafkaArgs>? _kafkas;

        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceKafkaArgs> Kafkas
        {
            get => _kafkas ?? (_kafkas = new InputList<Inputs.ServiceKafkaArgs>());
            set => _kafkas = value;
        }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Mysql user configurable settings
        /// </summary>
        [Input("mysqlUserConfig")]
        public Input<Inputs.ServiceMysqlUserConfigArgs>? MysqlUserConfig { get; set; }

        /// <summary>
        /// Opensearch user configurable settings
        /// </summary>
        [Input("opensearchUserConfig")]
        public Input<Inputs.ServiceOpensearchUserConfigArgs>? OpensearchUserConfig { get; set; }

        /// <summary>
        /// Pg user configurable settings
        /// </summary>
        [Input("pgUserConfig")]
        public Input<Inputs.ServicePgUserConfigArgs>? PgUserConfig { get; set; }

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Target project
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// Redis user configurable settings
        /// </summary>
        [Input("redisUserConfig")]
        public Input<Inputs.ServiceRedisUserConfigArgs>? RedisUserConfig { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.ServiceServiceIntegrationArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.ServiceServiceIntegrationArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.ServiceServiceIntegrationArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Service type code
        /// </summary>
        [Input("serviceType", required: true)]
        public Input<string> ServiceType { get; set; } = null!;

        [Input("staticIps")]
        private InputList<string>? _staticIps;

        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        public InputList<string> StaticIps
        {
            get => _staticIps ?? (_staticIps = new InputList<string>());
            set => _staticIps = value;
        }

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public ServiceArgs()
        {
        }
    }

    public sealed class ServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cassandra user configurable settings
        /// </summary>
        [Input("cassandraUserConfig")]
        public Input<Inputs.ServiceCassandraUserConfigGetArgs>? CassandraUserConfig { get; set; }

        [Input("cassandras")]
        private InputList<Inputs.ServiceCassandraGetArgs>? _cassandras;

        /// <summary>
        /// Cassandra specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceCassandraGetArgs> Cassandras
        {
            get => _cassandras ?? (_cassandras = new InputList<Inputs.ServiceCassandraGetArgs>());
            set => _cassandras = value;
        }

        /// <summary>
        /// Clickhouse user configurable settings
        /// </summary>
        [Input("clickhouseUserConfig")]
        public Input<Inputs.ServiceClickhouseUserConfigGetArgs>? ClickhouseUserConfig { get; set; }

        [Input("clickhouses")]
        private InputList<Inputs.ServiceClickhouseGetArgs>? _clickhouses;

        /// <summary>
        /// Clickhouse specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceClickhouseGetArgs> Clickhouses
        {
            get => _clickhouses ?? (_clickhouses = new InputList<Inputs.ServiceClickhouseGetArgs>());
            set => _clickhouses = value;
        }

        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        [Input("components")]
        private InputList<Inputs.ServiceComponentGetArgs>? _components;

        /// <summary>
        /// Service component information objects
        /// </summary>
        public InputList<Inputs.ServiceComponentGetArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.ServiceComponentGetArgs>());
            set => _components = value;
        }

        /// <summary>
        /// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
        /// </summary>
        [Input("diskSpace")]
        public Input<string>? DiskSpace { get; set; }

        /// <summary>
        /// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
        /// </summary>
        [Input("diskSpaceCap")]
        public Input<string>? DiskSpaceCap { get; set; }

        /// <summary>
        /// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `disk_space`
        /// </summary>
        [Input("diskSpaceDefault")]
        public Input<string>? DiskSpaceDefault { get; set; }

        /// <summary>
        /// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
        /// </summary>
        [Input("diskSpaceStep")]
        public Input<string>? DiskSpaceStep { get; set; }

        /// <summary>
        /// Disk space that service is currently using
        /// </summary>
        [Input("diskSpaceUsed")]
        public Input<string>? DiskSpaceUsed { get; set; }

        /// <summary>
        /// Elasticsearch user configurable settings
        /// </summary>
        [Input("elasticsearchUserConfig")]
        public Input<Inputs.ServiceElasticsearchUserConfigGetArgs>? ElasticsearchUserConfig { get; set; }

        [Input("elasticsearches")]
        private InputList<Inputs.ServiceElasticsearchGetArgs>? _elasticsearches;

        /// <summary>
        /// Elasticsearch specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceElasticsearchGetArgs> Elasticsearches
        {
            get => _elasticsearches ?? (_elasticsearches = new InputList<Inputs.ServiceElasticsearchGetArgs>());
            set => _elasticsearches = value;
        }

        /// <summary>
        /// Flink user configurable settings
        /// </summary>
        [Input("flinkUserConfig")]
        public Input<Inputs.ServiceFlinkUserConfigGetArgs>? FlinkUserConfig { get; set; }

        [Input("flinks")]
        private InputList<Inputs.ServiceFlinkGetArgs>? _flinks;

        /// <summary>
        /// Flink specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceFlinkGetArgs> Flinks
        {
            get => _flinks ?? (_flinks = new InputList<Inputs.ServiceFlinkGetArgs>());
            set => _flinks = value;
        }

        /// <summary>
        /// Grafana user configurable settings
        /// </summary>
        [Input("grafanaUserConfig")]
        public Input<Inputs.ServiceGrafanaUserConfigGetArgs>? GrafanaUserConfig { get; set; }

        [Input("grafanas")]
        private InputList<Inputs.ServiceGrafanaGetArgs>? _grafanas;

        /// <summary>
        /// Grafana specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceGrafanaGetArgs> Grafanas
        {
            get => _grafanas ?? (_grafanas = new InputList<Inputs.ServiceGrafanaGetArgs>());
            set => _grafanas = value;
        }

        /// <summary>
        /// Influxdb user configurable settings
        /// </summary>
        [Input("influxdbUserConfig")]
        public Input<Inputs.ServiceInfluxdbUserConfigGetArgs>? InfluxdbUserConfig { get; set; }

        [Input("influxdbs")]
        private InputList<Inputs.ServiceInfluxdbGetArgs>? _influxdbs;

        /// <summary>
        /// InfluxDB specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceInfluxdbGetArgs> Influxdbs
        {
            get => _influxdbs ?? (_influxdbs = new InputList<Inputs.ServiceInfluxdbGetArgs>());
            set => _influxdbs = value;
        }

        /// <summary>
        /// Kafka*connect user configurable settings
        /// </summary>
        [Input("kafkaConnectUserConfig")]
        public Input<Inputs.ServiceKafkaConnectUserConfigGetArgs>? KafkaConnectUserConfig { get; set; }

        [Input("kafkaConnects")]
        private InputList<Inputs.ServiceKafkaConnectGetArgs>? _kafkaConnects;

        /// <summary>
        /// Kafka Connect specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceKafkaConnectGetArgs> KafkaConnects
        {
            get => _kafkaConnects ?? (_kafkaConnects = new InputList<Inputs.ServiceKafkaConnectGetArgs>());
            set => _kafkaConnects = value;
        }

        /// <summary>
        /// Kafka*mirrormaker user configurable settings
        /// </summary>
        [Input("kafkaMirrormakerUserConfig")]
        public Input<Inputs.ServiceKafkaMirrormakerUserConfigGetArgs>? KafkaMirrormakerUserConfig { get; set; }

        [Input("kafkaMirrormakers")]
        private InputList<Inputs.ServiceKafkaMirrormakerGetArgs>? _kafkaMirrormakers;

        /// <summary>
        /// Kafka MirrorMaker 2 specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceKafkaMirrormakerGetArgs> KafkaMirrormakers
        {
            get => _kafkaMirrormakers ?? (_kafkaMirrormakers = new InputList<Inputs.ServiceKafkaMirrormakerGetArgs>());
            set => _kafkaMirrormakers = value;
        }

        /// <summary>
        /// Kafka user configurable settings
        /// </summary>
        [Input("kafkaUserConfig")]
        public Input<Inputs.ServiceKafkaUserConfigGetArgs>? KafkaUserConfig { get; set; }

        [Input("kafkas")]
        private InputList<Inputs.ServiceKafkaGetArgs>? _kafkas;

        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceKafkaGetArgs> Kafkas
        {
            get => _kafkas ?? (_kafkas = new InputList<Inputs.ServiceKafkaGetArgs>());
            set => _kafkas = value;
        }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Mysql user configurable settings
        /// </summary>
        [Input("mysqlUserConfig")]
        public Input<Inputs.ServiceMysqlUserConfigGetArgs>? MysqlUserConfig { get; set; }

        [Input("mysqls")]
        private InputList<Inputs.ServiceMysqlGetArgs>? _mysqls;

        /// <summary>
        /// MySQL specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceMysqlGetArgs> Mysqls
        {
            get => _mysqls ?? (_mysqls = new InputList<Inputs.ServiceMysqlGetArgs>());
            set => _mysqls = value;
        }

        /// <summary>
        /// Opensearch user configurable settings
        /// </summary>
        [Input("opensearchUserConfig")]
        public Input<Inputs.ServiceOpensearchUserConfigGetArgs>? OpensearchUserConfig { get; set; }

        [Input("opensearches")]
        private InputList<Inputs.ServiceOpensearchGetArgs>? _opensearches;

        /// <summary>
        /// Opensearch specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceOpensearchGetArgs> Opensearches
        {
            get => _opensearches ?? (_opensearches = new InputList<Inputs.ServiceOpensearchGetArgs>());
            set => _opensearches = value;
        }

        /// <summary>
        /// Pg user configurable settings
        /// </summary>
        [Input("pgUserConfig")]
        public Input<Inputs.ServicePgUserConfigGetArgs>? PgUserConfig { get; set; }

        [Input("pgs")]
        private InputList<Inputs.ServicePgGetArgs>? _pgs;

        /// <summary>
        /// PostgreSQL specific server provided values
        /// </summary>
        public InputList<Inputs.ServicePgGetArgs> Pgs
        {
            get => _pgs ?? (_pgs = new InputList<Inputs.ServicePgGetArgs>());
            set => _pgs = value;
        }

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Target project
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        [Input("redis")]
        private InputList<Inputs.ServiceRediGetArgs>? _redis;

        /// <summary>
        /// Redis specific server provided values
        /// </summary>
        public InputList<Inputs.ServiceRediGetArgs> Redis
        {
            get => _redis ?? (_redis = new InputList<Inputs.ServiceRediGetArgs>());
            set => _redis = value;
        }

        /// <summary>
        /// Redis user configurable settings
        /// </summary>
        [Input("redisUserConfig")]
        public Input<Inputs.ServiceRedisUserConfigGetArgs>? RedisUserConfig { get; set; }

        /// <summary>
        /// Service hostname
        /// </summary>
        [Input("serviceHost")]
        public Input<string>? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.ServiceServiceIntegrationGetArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.ServiceServiceIntegrationGetArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.ServiceServiceIntegrationGetArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Input("servicePassword")]
        public Input<string>? ServicePassword { get; set; }

        /// <summary>
        /// Service port
        /// </summary>
        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        /// <summary>
        /// Service type code
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Input("serviceUri")]
        public Input<string>? ServiceUri { get; set; }

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Input("serviceUsername")]
        public Input<string>? ServiceUsername { get; set; }

        /// <summary>
        /// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` and `RUNNING`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("staticIps")]
        private InputList<string>? _staticIps;

        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        public InputList<string> StaticIps
        {
            get => _staticIps ?? (_staticIps = new InputList<string>());
            set => _staticIps = value;
        }

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public ServiceState()
        {
        }
    }
}
