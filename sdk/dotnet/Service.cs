// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public partial class Service : Pulumi.CustomResource
    {
        /// <summary>
        /// Cassandra specific server provided values
        /// </summary>
        [Output("cassandra")]
        public Output<Outputs.ServiceCassandra> Cassandra { get; private set; } = null!;

        /// <summary>
        /// Cassandra specific user configurable settings
        /// </summary>
        [Output("cassandraUserConfig")]
        public Output<Outputs.ServiceCassandraUserConfig?> CassandraUserConfig { get; private set; } = null!;

        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Output("cloudName")]
        public Output<string?> CloudName { get; private set; } = null!;

        /// <summary>
        /// Elasticsearch specific server provided values
        /// </summary>
        [Output("elasticsearch")]
        public Output<Outputs.ServiceElasticsearch> Elasticsearch { get; private set; } = null!;

        /// <summary>
        /// Elasticsearch specific user configurable settings
        /// </summary>
        [Output("elasticsearchUserConfig")]
        public Output<Outputs.ServiceElasticsearchUserConfig?> ElasticsearchUserConfig { get; private set; } = null!;

        /// <summary>
        /// Grafana specific server provided values
        /// </summary>
        [Output("grafana")]
        public Output<Outputs.ServiceGrafana> Grafana { get; private set; } = null!;

        /// <summary>
        /// Grafana specific user configurable settings
        /// </summary>
        [Output("grafanaUserConfig")]
        public Output<Outputs.ServiceGrafanaUserConfig?> GrafanaUserConfig { get; private set; } = null!;

        /// <summary>
        /// InfluxDB specific server provided values
        /// </summary>
        [Output("influxdb")]
        public Output<Outputs.ServiceInfluxdb> Influxdb { get; private set; } = null!;

        /// <summary>
        /// InfluxDB specific user configurable settings
        /// </summary>
        [Output("influxdbUserConfig")]
        public Output<Outputs.ServiceInfluxdbUserConfig?> InfluxdbUserConfig { get; private set; } = null!;

        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        [Output("kafka")]
        public Output<Outputs.ServiceKafka> Kafka { get; private set; } = null!;

        /// <summary>
        /// Kafka specific user configurable settings
        /// </summary>
        [Output("kafkaUserConfig")]
        public Output<Outputs.ServiceKafkaUserConfig?> KafkaUserConfig { get; private set; } = null!;

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Output("maintenanceWindowDow")]
        public Output<string?> MaintenanceWindowDow { get; private set; } = null!;

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Output("maintenanceWindowTime")]
        public Output<string?> MaintenanceWindowTime { get; private set; } = null!;

        /// <summary>
        /// MySQL specific server provided values
        /// </summary>
        [Output("mysql")]
        public Output<Outputs.ServiceMysql> Mysql { get; private set; } = null!;

        /// <summary>
        /// MySQL specific user configurable settings
        /// </summary>
        [Output("mysqlUserConfig")]
        public Output<Outputs.ServiceMysqlUserConfig?> MysqlUserConfig { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL specific server provided values
        /// </summary>
        [Output("pg")]
        public Output<Outputs.ServicePg> Pg { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL specific user configurable settings
        /// </summary>
        [Output("pgUserConfig")]
        public Output<Outputs.ServicePgUserConfig?> PgUserConfig { get; private set; } = null!;

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// Target project
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Output("projectVpcId")]
        public Output<string?> ProjectVpcId { get; private set; } = null!;

        /// <summary>
        /// Redis specific server provided values
        /// </summary>
        [Output("redis")]
        public Output<Outputs.ServiceRedis> Redis { get; private set; } = null!;

        /// <summary>
        /// Redis specific user configurable settings
        /// </summary>
        [Output("redisUserConfig")]
        public Output<Outputs.ServiceRedisUserConfig?> RedisUserConfig { get; private set; } = null!;

        /// <summary>
        /// Service hostname
        /// </summary>
        [Output("serviceHost")]
        public Output<string> ServiceHost { get; private set; } = null!;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        [Output("serviceIntegrations")]
        public Output<ImmutableArray<Outputs.ServiceServiceIntegrations>> ServiceIntegrations { get; private set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Output("servicePassword")]
        public Output<string> ServicePassword { get; private set; } = null!;

        /// <summary>
        /// Service port
        /// </summary>
        [Output("servicePort")]
        public Output<int> ServicePort { get; private set; } = null!;

        /// <summary>
        /// Service type code
        /// </summary>
        [Output("serviceType")]
        public Output<string> ServiceType { get; private set; } = null!;

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Output("serviceUri")]
        public Output<string> ServiceUri { get; private set; } = null!;

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Output("serviceUsername")]
        public Output<string> ServiceUsername { get; private set; } = null!;

        /// <summary>
        /// Service state
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/service:Service", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cassandra specific server provided values
        /// </summary>
        [Input("cassandra")]
        public Input<Inputs.ServiceCassandraArgs>? Cassandra { get; set; }

        /// <summary>
        /// Cassandra specific user configurable settings
        /// </summary>
        [Input("cassandraUserConfig")]
        public Input<Inputs.ServiceCassandraUserConfigArgs>? CassandraUserConfig { get; set; }

        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        /// <summary>
        /// Elasticsearch specific server provided values
        /// </summary>
        [Input("elasticsearch")]
        public Input<Inputs.ServiceElasticsearchArgs>? Elasticsearch { get; set; }

        /// <summary>
        /// Elasticsearch specific user configurable settings
        /// </summary>
        [Input("elasticsearchUserConfig")]
        public Input<Inputs.ServiceElasticsearchUserConfigArgs>? ElasticsearchUserConfig { get; set; }

        /// <summary>
        /// Grafana specific server provided values
        /// </summary>
        [Input("grafana")]
        public Input<Inputs.ServiceGrafanaArgs>? Grafana { get; set; }

        /// <summary>
        /// Grafana specific user configurable settings
        /// </summary>
        [Input("grafanaUserConfig")]
        public Input<Inputs.ServiceGrafanaUserConfigArgs>? GrafanaUserConfig { get; set; }

        /// <summary>
        /// InfluxDB specific server provided values
        /// </summary>
        [Input("influxdb")]
        public Input<Inputs.ServiceInfluxdbArgs>? Influxdb { get; set; }

        /// <summary>
        /// InfluxDB specific user configurable settings
        /// </summary>
        [Input("influxdbUserConfig")]
        public Input<Inputs.ServiceInfluxdbUserConfigArgs>? InfluxdbUserConfig { get; set; }

        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.ServiceKafkaArgs>? Kafka { get; set; }

        /// <summary>
        /// Kafka specific user configurable settings
        /// </summary>
        [Input("kafkaUserConfig")]
        public Input<Inputs.ServiceKafkaUserConfigArgs>? KafkaUserConfig { get; set; }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// MySQL specific server provided values
        /// </summary>
        [Input("mysql")]
        public Input<Inputs.ServiceMysqlArgs>? Mysql { get; set; }

        /// <summary>
        /// MySQL specific user configurable settings
        /// </summary>
        [Input("mysqlUserConfig")]
        public Input<Inputs.ServiceMysqlUserConfigArgs>? MysqlUserConfig { get; set; }

        /// <summary>
        /// PostgreSQL specific server provided values
        /// </summary>
        [Input("pg")]
        public Input<Inputs.ServicePgArgs>? Pg { get; set; }

        /// <summary>
        /// PostgreSQL specific user configurable settings
        /// </summary>
        [Input("pgUserConfig")]
        public Input<Inputs.ServicePgUserConfigArgs>? PgUserConfig { get; set; }

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Target project
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// Redis specific server provided values
        /// </summary>
        [Input("redis")]
        public Input<Inputs.ServiceRedisArgs>? Redis { get; set; }

        /// <summary>
        /// Redis specific user configurable settings
        /// </summary>
        [Input("redisUserConfig")]
        public Input<Inputs.ServiceRedisUserConfigArgs>? RedisUserConfig { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.ServiceServiceIntegrationsArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.ServiceServiceIntegrationsArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.ServiceServiceIntegrationsArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Service type code
        /// </summary>
        [Input("serviceType", required: true)]
        public Input<string> ServiceType { get; set; } = null!;

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public ServiceArgs()
        {
        }
    }

    public sealed class ServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cassandra specific server provided values
        /// </summary>
        [Input("cassandra")]
        public Input<Inputs.ServiceCassandraGetArgs>? Cassandra { get; set; }

        /// <summary>
        /// Cassandra specific user configurable settings
        /// </summary>
        [Input("cassandraUserConfig")]
        public Input<Inputs.ServiceCassandraUserConfigGetArgs>? CassandraUserConfig { get; set; }

        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        /// <summary>
        /// Elasticsearch specific server provided values
        /// </summary>
        [Input("elasticsearch")]
        public Input<Inputs.ServiceElasticsearchGetArgs>? Elasticsearch { get; set; }

        /// <summary>
        /// Elasticsearch specific user configurable settings
        /// </summary>
        [Input("elasticsearchUserConfig")]
        public Input<Inputs.ServiceElasticsearchUserConfigGetArgs>? ElasticsearchUserConfig { get; set; }

        /// <summary>
        /// Grafana specific server provided values
        /// </summary>
        [Input("grafana")]
        public Input<Inputs.ServiceGrafanaGetArgs>? Grafana { get; set; }

        /// <summary>
        /// Grafana specific user configurable settings
        /// </summary>
        [Input("grafanaUserConfig")]
        public Input<Inputs.ServiceGrafanaUserConfigGetArgs>? GrafanaUserConfig { get; set; }

        /// <summary>
        /// InfluxDB specific server provided values
        /// </summary>
        [Input("influxdb")]
        public Input<Inputs.ServiceInfluxdbGetArgs>? Influxdb { get; set; }

        /// <summary>
        /// InfluxDB specific user configurable settings
        /// </summary>
        [Input("influxdbUserConfig")]
        public Input<Inputs.ServiceInfluxdbUserConfigGetArgs>? InfluxdbUserConfig { get; set; }

        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.ServiceKafkaGetArgs>? Kafka { get; set; }

        /// <summary>
        /// Kafka specific user configurable settings
        /// </summary>
        [Input("kafkaUserConfig")]
        public Input<Inputs.ServiceKafkaUserConfigGetArgs>? KafkaUserConfig { get; set; }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// MySQL specific server provided values
        /// </summary>
        [Input("mysql")]
        public Input<Inputs.ServiceMysqlGetArgs>? Mysql { get; set; }

        /// <summary>
        /// MySQL specific user configurable settings
        /// </summary>
        [Input("mysqlUserConfig")]
        public Input<Inputs.ServiceMysqlUserConfigGetArgs>? MysqlUserConfig { get; set; }

        /// <summary>
        /// PostgreSQL specific server provided values
        /// </summary>
        [Input("pg")]
        public Input<Inputs.ServicePgGetArgs>? Pg { get; set; }

        /// <summary>
        /// PostgreSQL specific user configurable settings
        /// </summary>
        [Input("pgUserConfig")]
        public Input<Inputs.ServicePgUserConfigGetArgs>? PgUserConfig { get; set; }

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Target project
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// Redis specific server provided values
        /// </summary>
        [Input("redis")]
        public Input<Inputs.ServiceRedisGetArgs>? Redis { get; set; }

        /// <summary>
        /// Redis specific user configurable settings
        /// </summary>
        [Input("redisUserConfig")]
        public Input<Inputs.ServiceRedisUserConfigGetArgs>? RedisUserConfig { get; set; }

        /// <summary>
        /// Service hostname
        /// </summary>
        [Input("serviceHost")]
        public Input<string>? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.ServiceServiceIntegrationsGetArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.ServiceServiceIntegrationsGetArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.ServiceServiceIntegrationsGetArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Input("servicePassword")]
        public Input<string>? ServicePassword { get; set; }

        /// <summary>
        /// Service port
        /// </summary>
        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        /// <summary>
        /// Service type code
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Input("serviceUri")]
        public Input<string>? ServiceUri { get; set; }

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Input("serviceUsername")]
        public Input<string>? ServiceUsername { get; set; }

        /// <summary>
        /// Service state
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public ServiceState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ServiceCassandraArgs : Pulumi.ResourceArgs
    {
        public ServiceCassandraArgs()
        {
        }
    }

    public sealed class ServiceCassandraGetArgs : Pulumi.ResourceArgs
    {
        public ServiceCassandraGetArgs()
        {
        }
    }

    public sealed class ServiceCassandraUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("migrateSstableloader")]
        public Input<bool>? MigrateSstableloader { get; set; }

        [Input("privateAccess")]
        public Input<ServiceCassandraUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceCassandraUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        public ServiceCassandraUserConfigArgs()
        {
        }
    }

    public sealed class ServiceCassandraUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("migrateSstableloader")]
        public Input<bool>? MigrateSstableloader { get; set; }

        [Input("privateAccess")]
        public Input<ServiceCassandraUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceCassandraUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        public ServiceCassandraUserConfigGetArgs()
        {
        }
    }

    public sealed class ServiceCassandraUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceCassandraUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class ServiceCassandraUserConfigPrivateAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceCassandraUserConfigPrivateAccessGetArgs()
        {
        }
    }

    public sealed class ServiceCassandraUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceCassandraUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class ServiceCassandraUserConfigPublicAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceCassandraUserConfigPublicAccessGetArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchArgs : Pulumi.ResourceArgs
    {
        [Input("kibanaUri")]
        public Input<string>? KibanaUri { get; set; }

        public ServiceElasticsearchArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchGetArgs : Pulumi.ResourceArgs
    {
        [Input("kibanaUri")]
        public Input<string>? KibanaUri { get; set; }

        public ServiceElasticsearchGetArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("disableReplicationFactorAdjustment")]
        public Input<bool>? DisableReplicationFactorAdjustment { get; set; }

        [Input("elasticsearch")]
        public Input<ServiceElasticsearchUserConfigElasticsearchArgs>? Elasticsearch { get; set; }

        [Input("elasticsearchVersion")]
        public Input<string>? ElasticsearchVersion { get; set; }

        [Input("indexPatterns")]
        private InputList<ServiceElasticsearchUserConfigIndexPatternsArgs>? _indexPatterns;
        public InputList<ServiceElasticsearchUserConfigIndexPatternsArgs> IndexPatterns
        {
            get => _indexPatterns ?? (_indexPatterns = new InputList<ServiceElasticsearchUserConfigIndexPatternsArgs>());
            set => _indexPatterns = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("kibana")]
        public Input<ServiceElasticsearchUserConfigKibanaArgs>? Kibana { get; set; }

        [Input("maxIndexCount")]
        public Input<int>? MaxIndexCount { get; set; }

        [Input("privateAccess")]
        public Input<ServiceElasticsearchUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceElasticsearchUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        public ServiceElasticsearchUserConfigArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigElasticsearchArgs : Pulumi.ResourceArgs
    {
        [Input("actionDestructiveRequiresName")]
        public Input<bool>? ActionDestructiveRequiresName { get; set; }

        [Input("indicesFielddataCacheSize")]
        public Input<int>? IndicesFielddataCacheSize { get; set; }

        [Input("indicesMemoryIndexBufferSize")]
        public Input<int>? IndicesMemoryIndexBufferSize { get; set; }

        [Input("indicesQueriesCacheSize")]
        public Input<int>? IndicesQueriesCacheSize { get; set; }

        [Input("indicesQueryBoolMaxClauseCount")]
        public Input<int>? IndicesQueryBoolMaxClauseCount { get; set; }

        [Input("reindexRemoteWhitelists")]
        private InputList<string>? _reindexRemoteWhitelists;
        public InputList<string> ReindexRemoteWhitelists
        {
            get => _reindexRemoteWhitelists ?? (_reindexRemoteWhitelists = new InputList<string>());
            set => _reindexRemoteWhitelists = value;
        }

        [Input("threadPoolAnalyzeQueueSize")]
        public Input<int>? ThreadPoolAnalyzeQueueSize { get; set; }

        [Input("threadPoolAnalyzeSize")]
        public Input<int>? ThreadPoolAnalyzeSize { get; set; }

        [Input("threadPoolForceMergeSize")]
        public Input<int>? ThreadPoolForceMergeSize { get; set; }

        [Input("threadPoolGetQueueSize")]
        public Input<int>? ThreadPoolGetQueueSize { get; set; }

        [Input("threadPoolGetSize")]
        public Input<int>? ThreadPoolGetSize { get; set; }

        [Input("threadPoolIndexQueueSize")]
        public Input<int>? ThreadPoolIndexQueueSize { get; set; }

        [Input("threadPoolIndexSize")]
        public Input<int>? ThreadPoolIndexSize { get; set; }

        [Input("threadPoolSearchQueueSize")]
        public Input<int>? ThreadPoolSearchQueueSize { get; set; }

        [Input("threadPoolSearchSize")]
        public Input<int>? ThreadPoolSearchSize { get; set; }

        [Input("threadPoolSearchThrottledQueueSize")]
        public Input<int>? ThreadPoolSearchThrottledQueueSize { get; set; }

        [Input("threadPoolSearchThrottledSize")]
        public Input<int>? ThreadPoolSearchThrottledSize { get; set; }

        [Input("threadPoolWriteQueueSize")]
        public Input<int>? ThreadPoolWriteQueueSize { get; set; }

        [Input("threadPoolWriteSize")]
        public Input<int>? ThreadPoolWriteSize { get; set; }

        public ServiceElasticsearchUserConfigElasticsearchArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigElasticsearchGetArgs : Pulumi.ResourceArgs
    {
        [Input("actionDestructiveRequiresName")]
        public Input<bool>? ActionDestructiveRequiresName { get; set; }

        [Input("indicesFielddataCacheSize")]
        public Input<int>? IndicesFielddataCacheSize { get; set; }

        [Input("indicesMemoryIndexBufferSize")]
        public Input<int>? IndicesMemoryIndexBufferSize { get; set; }

        [Input("indicesQueriesCacheSize")]
        public Input<int>? IndicesQueriesCacheSize { get; set; }

        [Input("indicesQueryBoolMaxClauseCount")]
        public Input<int>? IndicesQueryBoolMaxClauseCount { get; set; }

        [Input("reindexRemoteWhitelists")]
        private InputList<string>? _reindexRemoteWhitelists;
        public InputList<string> ReindexRemoteWhitelists
        {
            get => _reindexRemoteWhitelists ?? (_reindexRemoteWhitelists = new InputList<string>());
            set => _reindexRemoteWhitelists = value;
        }

        [Input("threadPoolAnalyzeQueueSize")]
        public Input<int>? ThreadPoolAnalyzeQueueSize { get; set; }

        [Input("threadPoolAnalyzeSize")]
        public Input<int>? ThreadPoolAnalyzeSize { get; set; }

        [Input("threadPoolForceMergeSize")]
        public Input<int>? ThreadPoolForceMergeSize { get; set; }

        [Input("threadPoolGetQueueSize")]
        public Input<int>? ThreadPoolGetQueueSize { get; set; }

        [Input("threadPoolGetSize")]
        public Input<int>? ThreadPoolGetSize { get; set; }

        [Input("threadPoolIndexQueueSize")]
        public Input<int>? ThreadPoolIndexQueueSize { get; set; }

        [Input("threadPoolIndexSize")]
        public Input<int>? ThreadPoolIndexSize { get; set; }

        [Input("threadPoolSearchQueueSize")]
        public Input<int>? ThreadPoolSearchQueueSize { get; set; }

        [Input("threadPoolSearchSize")]
        public Input<int>? ThreadPoolSearchSize { get; set; }

        [Input("threadPoolSearchThrottledQueueSize")]
        public Input<int>? ThreadPoolSearchThrottledQueueSize { get; set; }

        [Input("threadPoolSearchThrottledSize")]
        public Input<int>? ThreadPoolSearchThrottledSize { get; set; }

        [Input("threadPoolWriteQueueSize")]
        public Input<int>? ThreadPoolWriteQueueSize { get; set; }

        [Input("threadPoolWriteSize")]
        public Input<int>? ThreadPoolWriteSize { get; set; }

        public ServiceElasticsearchUserConfigElasticsearchGetArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("disableReplicationFactorAdjustment")]
        public Input<bool>? DisableReplicationFactorAdjustment { get; set; }

        [Input("elasticsearch")]
        public Input<ServiceElasticsearchUserConfigElasticsearchGetArgs>? Elasticsearch { get; set; }

        [Input("elasticsearchVersion")]
        public Input<string>? ElasticsearchVersion { get; set; }

        [Input("indexPatterns")]
        private InputList<ServiceElasticsearchUserConfigIndexPatternsGetArgs>? _indexPatterns;
        public InputList<ServiceElasticsearchUserConfigIndexPatternsGetArgs> IndexPatterns
        {
            get => _indexPatterns ?? (_indexPatterns = new InputList<ServiceElasticsearchUserConfigIndexPatternsGetArgs>());
            set => _indexPatterns = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("kibana")]
        public Input<ServiceElasticsearchUserConfigKibanaGetArgs>? Kibana { get; set; }

        [Input("maxIndexCount")]
        public Input<int>? MaxIndexCount { get; set; }

        [Input("privateAccess")]
        public Input<ServiceElasticsearchUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceElasticsearchUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        public ServiceElasticsearchUserConfigGetArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigIndexPatternsArgs : Pulumi.ResourceArgs
    {
        [Input("maxIndexCount")]
        public Input<int>? MaxIndexCount { get; set; }

        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        public ServiceElasticsearchUserConfigIndexPatternsArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigIndexPatternsGetArgs : Pulumi.ResourceArgs
    {
        [Input("maxIndexCount")]
        public Input<int>? MaxIndexCount { get; set; }

        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        public ServiceElasticsearchUserConfigIndexPatternsGetArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigKibanaArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearchRequestTimeout")]
        public Input<int>? ElasticsearchRequestTimeout { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("maxOldSpaceSize")]
        public Input<int>? MaxOldSpaceSize { get; set; }

        public ServiceElasticsearchUserConfigKibanaArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigKibanaGetArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearchRequestTimeout")]
        public Input<int>? ElasticsearchRequestTimeout { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("maxOldSpaceSize")]
        public Input<int>? MaxOldSpaceSize { get; set; }

        public ServiceElasticsearchUserConfigKibanaGetArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearch")]
        public Input<bool>? Elasticsearch { get; set; }

        [Input("kibana")]
        public Input<bool>? Kibana { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceElasticsearchUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigPrivateAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearch")]
        public Input<bool>? Elasticsearch { get; set; }

        [Input("kibana")]
        public Input<bool>? Kibana { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceElasticsearchUserConfigPrivateAccessGetArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearch")]
        public Input<bool>? Elasticsearch { get; set; }

        [Input("kibana")]
        public Input<bool>? Kibana { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceElasticsearchUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class ServiceElasticsearchUserConfigPublicAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearch")]
        public Input<bool>? Elasticsearch { get; set; }

        [Input("kibana")]
        public Input<bool>? Kibana { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceElasticsearchUserConfigPublicAccessGetArgs()
        {
        }
    }

    public sealed class ServiceGrafanaArgs : Pulumi.ResourceArgs
    {
        public ServiceGrafanaArgs()
        {
        }
    }

    public sealed class ServiceGrafanaGetArgs : Pulumi.ResourceArgs
    {
        public ServiceGrafanaGetArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("alertingEnabled")]
        public Input<bool>? AlertingEnabled { get; set; }

        [Input("alertingErrorOrTimeout")]
        public Input<string>? AlertingErrorOrTimeout { get; set; }

        [Input("alertingNodataOrNullvalues")]
        public Input<string>? AlertingNodataOrNullvalues { get; set; }

        [Input("allowEmbedding")]
        public Input<bool>? AllowEmbedding { get; set; }

        [Input("authGithub")]
        public Input<ServiceGrafanaUserConfigAuthGithubArgs>? AuthGithub { get; set; }

        [Input("authGitlab")]
        public Input<ServiceGrafanaUserConfigAuthGitlabArgs>? AuthGitlab { get; set; }

        [Input("authGoogle")]
        public Input<ServiceGrafanaUserConfigAuthGoogleArgs>? AuthGoogle { get; set; }

        [Input("cookieSamesite")]
        public Input<string>? CookieSamesite { get; set; }

        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("dashboardsVersionsToKeep")]
        public Input<int>? DashboardsVersionsToKeep { get; set; }

        [Input("dataproxySendUserHeader")]
        public Input<bool>? DataproxySendUserHeader { get; set; }

        [Input("dataproxyTimeout")]
        public Input<int>? DataproxyTimeout { get; set; }

        [Input("disableGravatar")]
        public Input<bool>? DisableGravatar { get; set; }

        [Input("editorsCanAdmin")]
        public Input<bool>? EditorsCanAdmin { get; set; }

        [Input("externalImageStorage")]
        public Input<ServiceGrafanaUserConfigExternalImageStorageArgs>? ExternalImageStorage { get; set; }

        [Input("googleAnalyticsUaId")]
        public Input<string>? GoogleAnalyticsUaId { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("metricsEnabled")]
        public Input<bool>? MetricsEnabled { get; set; }

        [Input("privateAccess")]
        public Input<ServiceGrafanaUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceGrafanaUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("smtpServer")]
        public Input<ServiceGrafanaUserConfigSmtpServerArgs>? SmtpServer { get; set; }

        [Input("userAutoAssignOrg")]
        public Input<bool>? UserAutoAssignOrg { get; set; }

        [Input("userAutoAssignOrgRole")]
        public Input<string>? UserAutoAssignOrgRole { get; set; }

        [Input("viewersCanEdit")]
        public Input<bool>? ViewersCanEdit { get; set; }

        public ServiceGrafanaUserConfigArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigAuthGithubArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<bool>? AllowSignUp { get; set; }

        [Input("allowedOrganizations")]
        private InputList<string>? _allowedOrganizations;
        public InputList<string> AllowedOrganizations
        {
            get => _allowedOrganizations ?? (_allowedOrganizations = new InputList<string>());
            set => _allowedOrganizations = value;
        }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        [Input("teamIds")]
        private InputList<int>? _teamIds;
        public InputList<int> TeamIds
        {
            get => _teamIds ?? (_teamIds = new InputList<int>());
            set => _teamIds = value;
        }

        public ServiceGrafanaUserConfigAuthGithubArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigAuthGithubGetArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<bool>? AllowSignUp { get; set; }

        [Input("allowedOrganizations")]
        private InputList<string>? _allowedOrganizations;
        public InputList<string> AllowedOrganizations
        {
            get => _allowedOrganizations ?? (_allowedOrganizations = new InputList<string>());
            set => _allowedOrganizations = value;
        }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        [Input("teamIds")]
        private InputList<int>? _teamIds;
        public InputList<int> TeamIds
        {
            get => _teamIds ?? (_teamIds = new InputList<int>());
            set => _teamIds = value;
        }

        public ServiceGrafanaUserConfigAuthGithubGetArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigAuthGitlabArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<bool>? AllowSignUp { get; set; }

        [Input("allowedGroups")]
        private InputList<string>? _allowedGroups;
        public InputList<string> AllowedGroups
        {
            get => _allowedGroups ?? (_allowedGroups = new InputList<string>());
            set => _allowedGroups = value;
        }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        public ServiceGrafanaUserConfigAuthGitlabArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigAuthGitlabGetArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<bool>? AllowSignUp { get; set; }

        [Input("allowedGroups")]
        private InputList<string>? _allowedGroups;
        public InputList<string> AllowedGroups
        {
            get => _allowedGroups ?? (_allowedGroups = new InputList<string>());
            set => _allowedGroups = value;
        }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        public ServiceGrafanaUserConfigAuthGitlabGetArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigAuthGoogleArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<bool>? AllowSignUp { get; set; }

        [Input("allowedDomains")]
        private InputList<string>? _allowedDomains;
        public InputList<string> AllowedDomains
        {
            get => _allowedDomains ?? (_allowedDomains = new InputList<string>());
            set => _allowedDomains = value;
        }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        public ServiceGrafanaUserConfigAuthGoogleArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigAuthGoogleGetArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<bool>? AllowSignUp { get; set; }

        [Input("allowedDomains")]
        private InputList<string>? _allowedDomains;
        public InputList<string> AllowedDomains
        {
            get => _allowedDomains ?? (_allowedDomains = new InputList<string>());
            set => _allowedDomains = value;
        }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        public ServiceGrafanaUserConfigAuthGoogleGetArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigExternalImageStorageArgs : Pulumi.ResourceArgs
    {
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        [Input("bucketUrl")]
        public Input<string>? BucketUrl { get; set; }

        [Input("provider")]
        public Input<string>? Provider { get; set; }

        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        public ServiceGrafanaUserConfigExternalImageStorageArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigExternalImageStorageGetArgs : Pulumi.ResourceArgs
    {
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        [Input("bucketUrl")]
        public Input<string>? BucketUrl { get; set; }

        [Input("provider")]
        public Input<string>? Provider { get; set; }

        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        public ServiceGrafanaUserConfigExternalImageStorageGetArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("alertingEnabled")]
        public Input<bool>? AlertingEnabled { get; set; }

        [Input("alertingErrorOrTimeout")]
        public Input<string>? AlertingErrorOrTimeout { get; set; }

        [Input("alertingNodataOrNullvalues")]
        public Input<string>? AlertingNodataOrNullvalues { get; set; }

        [Input("allowEmbedding")]
        public Input<bool>? AllowEmbedding { get; set; }

        [Input("authGithub")]
        public Input<ServiceGrafanaUserConfigAuthGithubGetArgs>? AuthGithub { get; set; }

        [Input("authGitlab")]
        public Input<ServiceGrafanaUserConfigAuthGitlabGetArgs>? AuthGitlab { get; set; }

        [Input("authGoogle")]
        public Input<ServiceGrafanaUserConfigAuthGoogleGetArgs>? AuthGoogle { get; set; }

        [Input("cookieSamesite")]
        public Input<string>? CookieSamesite { get; set; }

        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("dashboardsVersionsToKeep")]
        public Input<int>? DashboardsVersionsToKeep { get; set; }

        [Input("dataproxySendUserHeader")]
        public Input<bool>? DataproxySendUserHeader { get; set; }

        [Input("dataproxyTimeout")]
        public Input<int>? DataproxyTimeout { get; set; }

        [Input("disableGravatar")]
        public Input<bool>? DisableGravatar { get; set; }

        [Input("editorsCanAdmin")]
        public Input<bool>? EditorsCanAdmin { get; set; }

        [Input("externalImageStorage")]
        public Input<ServiceGrafanaUserConfigExternalImageStorageGetArgs>? ExternalImageStorage { get; set; }

        [Input("googleAnalyticsUaId")]
        public Input<string>? GoogleAnalyticsUaId { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("metricsEnabled")]
        public Input<bool>? MetricsEnabled { get; set; }

        [Input("privateAccess")]
        public Input<ServiceGrafanaUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceGrafanaUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        [Input("smtpServer")]
        public Input<ServiceGrafanaUserConfigSmtpServerGetArgs>? SmtpServer { get; set; }

        [Input("userAutoAssignOrg")]
        public Input<bool>? UserAutoAssignOrg { get; set; }

        [Input("userAutoAssignOrgRole")]
        public Input<string>? UserAutoAssignOrgRole { get; set; }

        [Input("viewersCanEdit")]
        public Input<bool>? ViewersCanEdit { get; set; }

        public ServiceGrafanaUserConfigGetArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("grafana")]
        public Input<bool>? Grafana { get; set; }

        public ServiceGrafanaUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigPrivateAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("grafana")]
        public Input<bool>? Grafana { get; set; }

        public ServiceGrafanaUserConfigPrivateAccessGetArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("grafana")]
        public Input<bool>? Grafana { get; set; }

        public ServiceGrafanaUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigPublicAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("grafana")]
        public Input<bool>? Grafana { get; set; }

        public ServiceGrafanaUserConfigPublicAccessGetArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigSmtpServerArgs : Pulumi.ResourceArgs
    {
        [Input("fromAddress")]
        public Input<string>? FromAddress { get; set; }

        [Input("fromName")]
        public Input<string>? FromName { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("skipVerify")]
        public Input<bool>? SkipVerify { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public ServiceGrafanaUserConfigSmtpServerArgs()
        {
        }
    }

    public sealed class ServiceGrafanaUserConfigSmtpServerGetArgs : Pulumi.ResourceArgs
    {
        [Input("fromAddress")]
        public Input<string>? FromAddress { get; set; }

        [Input("fromName")]
        public Input<string>? FromName { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("skipVerify")]
        public Input<bool>? SkipVerify { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public ServiceGrafanaUserConfigSmtpServerGetArgs()
        {
        }
    }

    public sealed class ServiceInfluxdbArgs : Pulumi.ResourceArgs
    {
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        public ServiceInfluxdbArgs()
        {
        }
    }

    public sealed class ServiceInfluxdbGetArgs : Pulumi.ResourceArgs
    {
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        public ServiceInfluxdbGetArgs()
        {
        }
    }

    public sealed class ServiceInfluxdbUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("privateAccess")]
        public Input<ServiceInfluxdbUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceInfluxdbUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public ServiceInfluxdbUserConfigArgs()
        {
        }
    }

    public sealed class ServiceInfluxdbUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("privateAccess")]
        public Input<ServiceInfluxdbUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceInfluxdbUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public ServiceInfluxdbUserConfigGetArgs()
        {
        }
    }

    public sealed class ServiceInfluxdbUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("influxdb")]
        public Input<bool>? Influxdb { get; set; }

        public ServiceInfluxdbUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class ServiceInfluxdbUserConfigPrivateAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("influxdb")]
        public Input<bool>? Influxdb { get; set; }

        public ServiceInfluxdbUserConfigPrivateAccessGetArgs()
        {
        }
    }

    public sealed class ServiceInfluxdbUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("influxdb")]
        public Input<bool>? Influxdb { get; set; }

        public ServiceInfluxdbUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class ServiceInfluxdbUserConfigPublicAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("influxdb")]
        public Input<bool>? Influxdb { get; set; }

        public ServiceInfluxdbUserConfigPublicAccessGetArgs()
        {
        }
    }

    public sealed class ServiceKafkaArgs : Pulumi.ResourceArgs
    {
        [Input("accessCert")]
        public Input<string>? AccessCert { get; set; }

        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        [Input("connectUri")]
        public Input<string>? ConnectUri { get; set; }

        [Input("restUri")]
        public Input<string>? RestUri { get; set; }

        [Input("schemaRegistryUri")]
        public Input<string>? SchemaRegistryUri { get; set; }

        public ServiceKafkaArgs()
        {
        }
    }

    public sealed class ServiceKafkaGetArgs : Pulumi.ResourceArgs
    {
        [Input("accessCert")]
        public Input<string>? AccessCert { get; set; }

        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        [Input("connectUri")]
        public Input<string>? ConnectUri { get; set; }

        [Input("restUri")]
        public Input<string>? RestUri { get; set; }

        [Input("schemaRegistryUri")]
        public Input<string>? SchemaRegistryUri { get; set; }

        public ServiceKafkaGetArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("kafka")]
        public Input<ServiceKafkaUserConfigKafkaArgs>? Kafka { get; set; }

        [Input("kafkaAuthenticationMethods")]
        public Input<ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs>? KafkaAuthenticationMethods { get; set; }

        [Input("kafkaConnect")]
        public Input<bool>? KafkaConnect { get; set; }

        [Input("kafkaRest")]
        public Input<bool>? KafkaRest { get; set; }

        [Input("kafkaRestConfig")]
        public Input<ServiceKafkaUserConfigKafkaRestConfigArgs>? KafkaRestConfig { get; set; }

        [Input("kafkaVersion")]
        public Input<string>? KafkaVersion { get; set; }

        [Input("privateAccess")]
        public Input<ServiceKafkaUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceKafkaUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("schemaRegistry")]
        public Input<bool>? SchemaRegistry { get; set; }

        public ServiceKafkaUserConfigArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("kafka")]
        public Input<ServiceKafkaUserConfigKafkaGetArgs>? Kafka { get; set; }

        [Input("kafkaAuthenticationMethods")]
        public Input<ServiceKafkaUserConfigKafkaAuthenticationMethodsGetArgs>? KafkaAuthenticationMethods { get; set; }

        [Input("kafkaConnect")]
        public Input<bool>? KafkaConnect { get; set; }

        [Input("kafkaRest")]
        public Input<bool>? KafkaRest { get; set; }

        [Input("kafkaRestConfig")]
        public Input<ServiceKafkaUserConfigKafkaRestConfigGetArgs>? KafkaRestConfig { get; set; }

        [Input("kafkaVersion")]
        public Input<string>? KafkaVersion { get; set; }

        [Input("privateAccess")]
        public Input<ServiceKafkaUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceKafkaUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        [Input("schemaRegistry")]
        public Input<bool>? SchemaRegistry { get; set; }

        public ServiceKafkaUserConfigGetArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigKafkaArgs : Pulumi.ResourceArgs
    {
        [Input("autoCreateTopicsEnable")]
        public Input<bool>? AutoCreateTopicsEnable { get; set; }

        [Input("compressionType")]
        public Input<string>? CompressionType { get; set; }

        [Input("defaultReplicationFactor")]
        public Input<int>? DefaultReplicationFactor { get; set; }

        [Input("groupMaxSessionTimeoutMs")]
        public Input<int>? GroupMaxSessionTimeoutMs { get; set; }

        [Input("groupMinSessionTimeoutMs")]
        public Input<int>? GroupMinSessionTimeoutMs { get; set; }

        [Input("logCleanerMaxCompactionLagMs")]
        public Input<int>? LogCleanerMaxCompactionLagMs { get; set; }

        [Input("logCleanerMinCleanableRatio")]
        public Input<double>? LogCleanerMinCleanableRatio { get; set; }

        [Input("logCleanerMinCompactionLagMs")]
        public Input<int>? LogCleanerMinCompactionLagMs { get; set; }

        [Input("logMessageTimestampDifferenceMaxMs")]
        public Input<int>? LogMessageTimestampDifferenceMaxMs { get; set; }

        [Input("logMessageTimestampType")]
        public Input<string>? LogMessageTimestampType { get; set; }

        [Input("logRetentionBytes")]
        public Input<int>? LogRetentionBytes { get; set; }

        [Input("logRetentionHours")]
        public Input<int>? LogRetentionHours { get; set; }

        [Input("logSegmentBytes")]
        public Input<int>? LogSegmentBytes { get; set; }

        [Input("maxConnectionsPerIp")]
        public Input<int>? MaxConnectionsPerIp { get; set; }

        [Input("messageMaxBytes")]
        public Input<int>? MessageMaxBytes { get; set; }

        [Input("numPartitions")]
        public Input<int>? NumPartitions { get; set; }

        [Input("offsetsRetentionMinutes")]
        public Input<int>? OffsetsRetentionMinutes { get; set; }

        [Input("producerPurgatoryPurgeIntervalRequests")]
        public Input<int>? ProducerPurgatoryPurgeIntervalRequests { get; set; }

        [Input("replicaFetchMaxBytes")]
        public Input<int>? ReplicaFetchMaxBytes { get; set; }

        [Input("replicaFetchResponseMaxBytes")]
        public Input<int>? ReplicaFetchResponseMaxBytes { get; set; }

        [Input("socketRequestMaxBytes")]
        public Input<int>? SocketRequestMaxBytes { get; set; }

        public ServiceKafkaUserConfigKafkaArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs : Pulumi.ResourceArgs
    {
        [Input("certificate")]
        public Input<bool>? Certificate { get; set; }

        [Input("sasl")]
        public Input<bool>? Sasl { get; set; }

        public ServiceKafkaUserConfigKafkaAuthenticationMethodsArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigKafkaAuthenticationMethodsGetArgs : Pulumi.ResourceArgs
    {
        [Input("certificate")]
        public Input<bool>? Certificate { get; set; }

        [Input("sasl")]
        public Input<bool>? Sasl { get; set; }

        public ServiceKafkaUserConfigKafkaAuthenticationMethodsGetArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigKafkaGetArgs : Pulumi.ResourceArgs
    {
        [Input("autoCreateTopicsEnable")]
        public Input<bool>? AutoCreateTopicsEnable { get; set; }

        [Input("compressionType")]
        public Input<string>? CompressionType { get; set; }

        [Input("defaultReplicationFactor")]
        public Input<int>? DefaultReplicationFactor { get; set; }

        [Input("groupMaxSessionTimeoutMs")]
        public Input<int>? GroupMaxSessionTimeoutMs { get; set; }

        [Input("groupMinSessionTimeoutMs")]
        public Input<int>? GroupMinSessionTimeoutMs { get; set; }

        [Input("logCleanerMaxCompactionLagMs")]
        public Input<int>? LogCleanerMaxCompactionLagMs { get; set; }

        [Input("logCleanerMinCleanableRatio")]
        public Input<double>? LogCleanerMinCleanableRatio { get; set; }

        [Input("logCleanerMinCompactionLagMs")]
        public Input<int>? LogCleanerMinCompactionLagMs { get; set; }

        [Input("logMessageTimestampDifferenceMaxMs")]
        public Input<int>? LogMessageTimestampDifferenceMaxMs { get; set; }

        [Input("logMessageTimestampType")]
        public Input<string>? LogMessageTimestampType { get; set; }

        [Input("logRetentionBytes")]
        public Input<int>? LogRetentionBytes { get; set; }

        [Input("logRetentionHours")]
        public Input<int>? LogRetentionHours { get; set; }

        [Input("logSegmentBytes")]
        public Input<int>? LogSegmentBytes { get; set; }

        [Input("maxConnectionsPerIp")]
        public Input<int>? MaxConnectionsPerIp { get; set; }

        [Input("messageMaxBytes")]
        public Input<int>? MessageMaxBytes { get; set; }

        [Input("numPartitions")]
        public Input<int>? NumPartitions { get; set; }

        [Input("offsetsRetentionMinutes")]
        public Input<int>? OffsetsRetentionMinutes { get; set; }

        [Input("producerPurgatoryPurgeIntervalRequests")]
        public Input<int>? ProducerPurgatoryPurgeIntervalRequests { get; set; }

        [Input("replicaFetchMaxBytes")]
        public Input<int>? ReplicaFetchMaxBytes { get; set; }

        [Input("replicaFetchResponseMaxBytes")]
        public Input<int>? ReplicaFetchResponseMaxBytes { get; set; }

        [Input("socketRequestMaxBytes")]
        public Input<int>? SocketRequestMaxBytes { get; set; }

        public ServiceKafkaUserConfigKafkaGetArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigKafkaRestConfigArgs : Pulumi.ResourceArgs
    {
        [Input("consumerEnableAutoCommit")]
        public Input<bool>? ConsumerEnableAutoCommit { get; set; }

        [Input("consumerRequestMaxBytes")]
        public Input<int>? ConsumerRequestMaxBytes { get; set; }

        [Input("consumerRequestTimeoutMs")]
        public Input<int>? ConsumerRequestTimeoutMs { get; set; }

        [Input("producerAcks")]
        public Input<string>? ProducerAcks { get; set; }

        [Input("producerLingerMs")]
        public Input<int>? ProducerLingerMs { get; set; }

        [Input("simpleconsumerPoolSizeMax")]
        public Input<int>? SimpleconsumerPoolSizeMax { get; set; }

        public ServiceKafkaUserConfigKafkaRestConfigArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigKafkaRestConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("consumerEnableAutoCommit")]
        public Input<bool>? ConsumerEnableAutoCommit { get; set; }

        [Input("consumerRequestMaxBytes")]
        public Input<int>? ConsumerRequestMaxBytes { get; set; }

        [Input("consumerRequestTimeoutMs")]
        public Input<int>? ConsumerRequestTimeoutMs { get; set; }

        [Input("producerAcks")]
        public Input<string>? ProducerAcks { get; set; }

        [Input("producerLingerMs")]
        public Input<int>? ProducerLingerMs { get; set; }

        [Input("simpleconsumerPoolSizeMax")]
        public Input<int>? SimpleconsumerPoolSizeMax { get; set; }

        public ServiceKafkaUserConfigKafkaRestConfigGetArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceKafkaUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigPrivateAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceKafkaUserConfigPrivateAccessGetArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("kafka")]
        public Input<bool>? Kafka { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceKafkaUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class ServiceKafkaUserConfigPublicAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("kafka")]
        public Input<bool>? Kafka { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceKafkaUserConfigPublicAccessGetArgs()
        {
        }
    }

    public sealed class ServiceMysqlArgs : Pulumi.ResourceArgs
    {
        public ServiceMysqlArgs()
        {
        }
    }

    public sealed class ServiceMysqlGetArgs : Pulumi.ResourceArgs
    {
        public ServiceMysqlGetArgs()
        {
        }
    }

    public sealed class ServiceMysqlUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("mysql")]
        public Input<ServiceMysqlUserConfigMysqlArgs>? Mysql { get; set; }

        [Input("mysqlVersion")]
        public Input<string>? MysqlVersion { get; set; }

        [Input("privateAccess")]
        public Input<ServiceMysqlUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceMysqlUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("recoveryTargetTime")]
        public Input<string>? RecoveryTargetTime { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public ServiceMysqlUserConfigArgs()
        {
        }
    }

    public sealed class ServiceMysqlUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("mysql")]
        public Input<ServiceMysqlUserConfigMysqlGetArgs>? Mysql { get; set; }

        [Input("mysqlVersion")]
        public Input<string>? MysqlVersion { get; set; }

        [Input("privateAccess")]
        public Input<ServiceMysqlUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceMysqlUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        [Input("recoveryTargetTime")]
        public Input<string>? RecoveryTargetTime { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public ServiceMysqlUserConfigGetArgs()
        {
        }
    }

    public sealed class ServiceMysqlUserConfigMysqlArgs : Pulumi.ResourceArgs
    {
        [Input("sqlMode")]
        public Input<string>? SqlMode { get; set; }

        public ServiceMysqlUserConfigMysqlArgs()
        {
        }
    }

    public sealed class ServiceMysqlUserConfigMysqlGetArgs : Pulumi.ResourceArgs
    {
        [Input("sqlMode")]
        public Input<string>? SqlMode { get; set; }

        public ServiceMysqlUserConfigMysqlGetArgs()
        {
        }
    }

    public sealed class ServiceMysqlUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("mysql")]
        public Input<bool>? Mysql { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceMysqlUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class ServiceMysqlUserConfigPrivateAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("mysql")]
        public Input<bool>? Mysql { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceMysqlUserConfigPrivateAccessGetArgs()
        {
        }
    }

    public sealed class ServiceMysqlUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("mysql")]
        public Input<bool>? Mysql { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceMysqlUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class ServiceMysqlUserConfigPublicAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("mysql")]
        public Input<bool>? Mysql { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServiceMysqlUserConfigPublicAccessGetArgs()
        {
        }
    }

    public sealed class ServicePgArgs : Pulumi.ResourceArgs
    {
        [Input("dbname")]
        public Input<string>? Dbname { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("replicaUri")]
        public Input<string>? ReplicaUri { get; set; }

        [Input("sslmode")]
        public Input<string>? Sslmode { get; set; }

        [Input("uri")]
        public Input<string>? Uri { get; set; }

        [Input("user")]
        public Input<string>? User { get; set; }

        public ServicePgArgs()
        {
        }
    }

    public sealed class ServicePgGetArgs : Pulumi.ResourceArgs
    {
        [Input("dbname")]
        public Input<string>? Dbname { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("replicaUri")]
        public Input<string>? ReplicaUri { get; set; }

        [Input("sslmode")]
        public Input<string>? Sslmode { get; set; }

        [Input("uri")]
        public Input<string>? Uri { get; set; }

        [Input("user")]
        public Input<string>? User { get; set; }

        public ServicePgGetArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("pg")]
        public Input<ServicePgUserConfigPgArgs>? Pg { get; set; }

        [Input("pgReadReplica")]
        public Input<bool>? PgReadReplica { get; set; }

        [Input("pgServiceToForkFrom")]
        public Input<string>? PgServiceToForkFrom { get; set; }

        [Input("pgVersion")]
        public Input<string>? PgVersion { get; set; }

        [Input("pgbouncer")]
        public Input<ServicePgUserConfigPgbouncerArgs>? Pgbouncer { get; set; }

        [Input("pglookout")]
        public Input<ServicePgUserConfigPglookoutArgs>? Pglookout { get; set; }

        [Input("privateAccess")]
        public Input<ServicePgUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServicePgUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("recoveryTargetTime")]
        public Input<string>? RecoveryTargetTime { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public ServicePgUserConfigArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("pg")]
        public Input<ServicePgUserConfigPgGetArgs>? Pg { get; set; }

        [Input("pgReadReplica")]
        public Input<bool>? PgReadReplica { get; set; }

        [Input("pgServiceToForkFrom")]
        public Input<string>? PgServiceToForkFrom { get; set; }

        [Input("pgVersion")]
        public Input<string>? PgVersion { get; set; }

        [Input("pgbouncer")]
        public Input<ServicePgUserConfigPgbouncerGetArgs>? Pgbouncer { get; set; }

        [Input("pglookout")]
        public Input<ServicePgUserConfigPglookoutGetArgs>? Pglookout { get; set; }

        [Input("privateAccess")]
        public Input<ServicePgUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServicePgUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        [Input("recoveryTargetTime")]
        public Input<string>? RecoveryTargetTime { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public ServicePgUserConfigGetArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPgArgs : Pulumi.ResourceArgs
    {
        [Input("autovacuumAnalyzeScaleFactor")]
        public Input<double>? AutovacuumAnalyzeScaleFactor { get; set; }

        [Input("autovacuumAnalyzeThreshold")]
        public Input<int>? AutovacuumAnalyzeThreshold { get; set; }

        [Input("autovacuumMaxWorkers")]
        public Input<int>? AutovacuumMaxWorkers { get; set; }

        [Input("autovacuumNaptime")]
        public Input<int>? AutovacuumNaptime { get; set; }

        [Input("autovacuumVacuumCostDelay")]
        public Input<int>? AutovacuumVacuumCostDelay { get; set; }

        [Input("autovacuumVacuumCostLimit")]
        public Input<int>? AutovacuumVacuumCostLimit { get; set; }

        [Input("autovacuumVacuumScaleFactor")]
        public Input<double>? AutovacuumVacuumScaleFactor { get; set; }

        [Input("autovacuumVacuumThreshold")]
        public Input<int>? AutovacuumVacuumThreshold { get; set; }

        [Input("idleInTransactionSessionTimeout")]
        public Input<int>? IdleInTransactionSessionTimeout { get; set; }

        [Input("logAutovacuumMinDuration")]
        public Input<int>? LogAutovacuumMinDuration { get; set; }

        [Input("logErrorVerbosity")]
        public Input<string>? LogErrorVerbosity { get; set; }

        [Input("logMinDurationStatement")]
        public Input<int>? LogMinDurationStatement { get; set; }

        [Input("maxLocksPerTransaction")]
        public Input<int>? MaxLocksPerTransaction { get; set; }

        [Input("maxParallelWorkers")]
        public Input<int>? MaxParallelWorkers { get; set; }

        [Input("maxParallelWorkersPerGather")]
        public Input<int>? MaxParallelWorkersPerGather { get; set; }

        [Input("maxPredLocksPerTransaction")]
        public Input<int>? MaxPredLocksPerTransaction { get; set; }

        [Input("maxPreparedTransactions")]
        public Input<int>? MaxPreparedTransactions { get; set; }

        [Input("maxStackDepth")]
        public Input<int>? MaxStackDepth { get; set; }

        [Input("maxStandbyArchiveDelay")]
        public Input<int>? MaxStandbyArchiveDelay { get; set; }

        [Input("maxStandbyStreamingDelay")]
        public Input<int>? MaxStandbyStreamingDelay { get; set; }

        [Input("maxWorkerProcesses")]
        public Input<int>? MaxWorkerProcesses { get; set; }

        [Input("pgStatStatementsTrack")]
        public Input<string>? PgStatStatementsTrack { get; set; }

        [Input("tempFileLimit")]
        public Input<int>? TempFileLimit { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("trackActivityQuerySize")]
        public Input<int>? TrackActivityQuerySize { get; set; }

        [Input("trackFunctions")]
        public Input<string>? TrackFunctions { get; set; }

        public ServicePgUserConfigPgArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPgGetArgs : Pulumi.ResourceArgs
    {
        [Input("autovacuumAnalyzeScaleFactor")]
        public Input<double>? AutovacuumAnalyzeScaleFactor { get; set; }

        [Input("autovacuumAnalyzeThreshold")]
        public Input<int>? AutovacuumAnalyzeThreshold { get; set; }

        [Input("autovacuumMaxWorkers")]
        public Input<int>? AutovacuumMaxWorkers { get; set; }

        [Input("autovacuumNaptime")]
        public Input<int>? AutovacuumNaptime { get; set; }

        [Input("autovacuumVacuumCostDelay")]
        public Input<int>? AutovacuumVacuumCostDelay { get; set; }

        [Input("autovacuumVacuumCostLimit")]
        public Input<int>? AutovacuumVacuumCostLimit { get; set; }

        [Input("autovacuumVacuumScaleFactor")]
        public Input<double>? AutovacuumVacuumScaleFactor { get; set; }

        [Input("autovacuumVacuumThreshold")]
        public Input<int>? AutovacuumVacuumThreshold { get; set; }

        [Input("idleInTransactionSessionTimeout")]
        public Input<int>? IdleInTransactionSessionTimeout { get; set; }

        [Input("logAutovacuumMinDuration")]
        public Input<int>? LogAutovacuumMinDuration { get; set; }

        [Input("logErrorVerbosity")]
        public Input<string>? LogErrorVerbosity { get; set; }

        [Input("logMinDurationStatement")]
        public Input<int>? LogMinDurationStatement { get; set; }

        [Input("maxLocksPerTransaction")]
        public Input<int>? MaxLocksPerTransaction { get; set; }

        [Input("maxParallelWorkers")]
        public Input<int>? MaxParallelWorkers { get; set; }

        [Input("maxParallelWorkersPerGather")]
        public Input<int>? MaxParallelWorkersPerGather { get; set; }

        [Input("maxPredLocksPerTransaction")]
        public Input<int>? MaxPredLocksPerTransaction { get; set; }

        [Input("maxPreparedTransactions")]
        public Input<int>? MaxPreparedTransactions { get; set; }

        [Input("maxStackDepth")]
        public Input<int>? MaxStackDepth { get; set; }

        [Input("maxStandbyArchiveDelay")]
        public Input<int>? MaxStandbyArchiveDelay { get; set; }

        [Input("maxStandbyStreamingDelay")]
        public Input<int>? MaxStandbyStreamingDelay { get; set; }

        [Input("maxWorkerProcesses")]
        public Input<int>? MaxWorkerProcesses { get; set; }

        [Input("pgStatStatementsTrack")]
        public Input<string>? PgStatStatementsTrack { get; set; }

        [Input("tempFileLimit")]
        public Input<int>? TempFileLimit { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("trackActivityQuerySize")]
        public Input<int>? TrackActivityQuerySize { get; set; }

        [Input("trackFunctions")]
        public Input<string>? TrackFunctions { get; set; }

        public ServicePgUserConfigPgGetArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPgbouncerArgs : Pulumi.ResourceArgs
    {
        [Input("serverResetQueryAlways")]
        public Input<bool>? ServerResetQueryAlways { get; set; }

        public ServicePgUserConfigPgbouncerArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPgbouncerGetArgs : Pulumi.ResourceArgs
    {
        [Input("serverResetQueryAlways")]
        public Input<bool>? ServerResetQueryAlways { get; set; }

        public ServicePgUserConfigPgbouncerGetArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPglookoutArgs : Pulumi.ResourceArgs
    {
        [Input("maxFailoverReplicationTimeLag")]
        public Input<int>? MaxFailoverReplicationTimeLag { get; set; }

        public ServicePgUserConfigPglookoutArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPglookoutGetArgs : Pulumi.ResourceArgs
    {
        [Input("maxFailoverReplicationTimeLag")]
        public Input<int>? MaxFailoverReplicationTimeLag { get; set; }

        public ServicePgUserConfigPglookoutGetArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("pg")]
        public Input<bool>? Pg { get; set; }

        [Input("pgbouncer")]
        public Input<bool>? Pgbouncer { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServicePgUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPrivateAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("pg")]
        public Input<bool>? Pg { get; set; }

        [Input("pgbouncer")]
        public Input<bool>? Pgbouncer { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServicePgUserConfigPrivateAccessGetArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("pg")]
        public Input<bool>? Pg { get; set; }

        [Input("pgbouncer")]
        public Input<bool>? Pgbouncer { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServicePgUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class ServicePgUserConfigPublicAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("pg")]
        public Input<bool>? Pg { get; set; }

        [Input("pgbouncer")]
        public Input<bool>? Pgbouncer { get; set; }

        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        public ServicePgUserConfigPublicAccessGetArgs()
        {
        }
    }

    public sealed class ServiceRedisArgs : Pulumi.ResourceArgs
    {
        public ServiceRedisArgs()
        {
        }
    }

    public sealed class ServiceRedisGetArgs : Pulumi.ResourceArgs
    {
        public ServiceRedisGetArgs()
        {
        }
    }

    public sealed class ServiceRedisUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("privateAccess")]
        public Input<ServiceRedisUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceRedisUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("redisLfuDecayTime")]
        public Input<int>? RedisLfuDecayTime { get; set; }

        [Input("redisLfuLogFactor")]
        public Input<int>? RedisLfuLogFactor { get; set; }

        [Input("redisMaxmemoryPolicy")]
        public Input<string>? RedisMaxmemoryPolicy { get; set; }

        [Input("redisNotifyKeyspaceEvents")]
        public Input<string>? RedisNotifyKeyspaceEvents { get; set; }

        [Input("redisSsl")]
        public Input<bool>? RedisSsl { get; set; }

        [Input("redisTimeout")]
        public Input<int>? RedisTimeout { get; set; }

        public ServiceRedisUserConfigArgs()
        {
        }
    }

    public sealed class ServiceRedisUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("privateAccess")]
        public Input<ServiceRedisUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<ServiceRedisUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        [Input("redisLfuDecayTime")]
        public Input<int>? RedisLfuDecayTime { get; set; }

        [Input("redisLfuLogFactor")]
        public Input<int>? RedisLfuLogFactor { get; set; }

        [Input("redisMaxmemoryPolicy")]
        public Input<string>? RedisMaxmemoryPolicy { get; set; }

        [Input("redisNotifyKeyspaceEvents")]
        public Input<string>? RedisNotifyKeyspaceEvents { get; set; }

        [Input("redisSsl")]
        public Input<bool>? RedisSsl { get; set; }

        [Input("redisTimeout")]
        public Input<int>? RedisTimeout { get; set; }

        public ServiceRedisUserConfigGetArgs()
        {
        }
    }

    public sealed class ServiceRedisUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        [Input("redis")]
        public Input<bool>? Redis { get; set; }

        public ServiceRedisUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class ServiceRedisUserConfigPrivateAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        [Input("redis")]
        public Input<bool>? Redis { get; set; }

        public ServiceRedisUserConfigPrivateAccessGetArgs()
        {
        }
    }

    public sealed class ServiceRedisUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        [Input("redis")]
        public Input<bool>? Redis { get; set; }

        public ServiceRedisUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class ServiceRedisUserConfigPublicAccessGetArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<bool>? Prometheus { get; set; }

        [Input("redis")]
        public Input<bool>? Redis { get; set; }

        public ServiceRedisUserConfigPublicAccessGetArgs()
        {
        }
    }

    public sealed class ServiceServiceIntegrationsArgs : Pulumi.ResourceArgs
    {
        [Input("integrationType", required: true)]
        public Input<string> IntegrationType { get; set; } = null!;

        [Input("sourceServiceName", required: true)]
        public Input<string> SourceServiceName { get; set; } = null!;

        public ServiceServiceIntegrationsArgs()
        {
        }
    }

    public sealed class ServiceServiceIntegrationsGetArgs : Pulumi.ResourceArgs
    {
        [Input("integrationType", required: true)]
        public Input<string> IntegrationType { get; set; } = null!;

        [Input("sourceServiceName", required: true)]
        public Input<string> SourceServiceName { get; set; } = null!;

        public ServiceServiceIntegrationsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ServiceCassandra
    {
        [OutputConstructor]
        private ServiceCassandra()
        {
        }
    }

    [OutputType]
    public sealed class ServiceCassandraUserConfig
    {
        public readonly ImmutableArray<string> IpFilters;
        public readonly bool? MigrateSstableloader;
        public readonly ServiceCassandraUserConfigPrivateAccess? PrivateAccess;
        public readonly ServiceCassandraUserConfigPublicAccess? PublicAccess;

        [OutputConstructor]
        private ServiceCassandraUserConfig(
            ImmutableArray<string> ipFilters,
            bool? migrateSstableloader,
            ServiceCassandraUserConfigPrivateAccess? privateAccess,
            ServiceCassandraUserConfigPublicAccess? publicAccess)
        {
            IpFilters = ipFilters;
            MigrateSstableloader = migrateSstableloader;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
        }
    }

    [OutputType]
    public sealed class ServiceCassandraUserConfigPrivateAccess
    {
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServiceCassandraUserConfigPrivateAccess(bool? prometheus)
        {
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServiceCassandraUserConfigPublicAccess
    {
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServiceCassandraUserConfigPublicAccess(bool? prometheus)
        {
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServiceElasticsearch
    {
        public readonly string KibanaUri;

        [OutputConstructor]
        private ServiceElasticsearch(string kibanaUri)
        {
            KibanaUri = kibanaUri;
        }
    }

    [OutputType]
    public sealed class ServiceElasticsearchUserConfig
    {
        public readonly string? CustomDomain;
        public readonly bool? DisableReplicationFactorAdjustment;
        public readonly ServiceElasticsearchUserConfigElasticsearch? Elasticsearch;
        public readonly string? ElasticsearchVersion;
        public readonly ImmutableArray<ServiceElasticsearchUserConfigIndexPatterns> IndexPatterns;
        public readonly ImmutableArray<string> IpFilters;
        public readonly ServiceElasticsearchUserConfigKibana? Kibana;
        public readonly int? MaxIndexCount;
        public readonly ServiceElasticsearchUserConfigPrivateAccess? PrivateAccess;
        public readonly ServiceElasticsearchUserConfigPublicAccess? PublicAccess;

        [OutputConstructor]
        private ServiceElasticsearchUserConfig(
            string? customDomain,
            bool? disableReplicationFactorAdjustment,
            ServiceElasticsearchUserConfigElasticsearch? elasticsearch,
            string? elasticsearchVersion,
            ImmutableArray<ServiceElasticsearchUserConfigIndexPatterns> indexPatterns,
            ImmutableArray<string> ipFilters,
            ServiceElasticsearchUserConfigKibana? kibana,
            int? maxIndexCount,
            ServiceElasticsearchUserConfigPrivateAccess? privateAccess,
            ServiceElasticsearchUserConfigPublicAccess? publicAccess)
        {
            CustomDomain = customDomain;
            DisableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            Elasticsearch = elasticsearch;
            ElasticsearchVersion = elasticsearchVersion;
            IndexPatterns = indexPatterns;
            IpFilters = ipFilters;
            Kibana = kibana;
            MaxIndexCount = maxIndexCount;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
        }
    }

    [OutputType]
    public sealed class ServiceElasticsearchUserConfigElasticsearch
    {
        public readonly bool? ActionDestructiveRequiresName;
        public readonly int? IndicesFielddataCacheSize;
        public readonly int? IndicesMemoryIndexBufferSize;
        public readonly int? IndicesQueriesCacheSize;
        public readonly int? IndicesQueryBoolMaxClauseCount;
        public readonly ImmutableArray<string> ReindexRemoteWhitelists;
        public readonly int? ThreadPoolAnalyzeQueueSize;
        public readonly int? ThreadPoolAnalyzeSize;
        public readonly int? ThreadPoolForceMergeSize;
        public readonly int? ThreadPoolGetQueueSize;
        public readonly int? ThreadPoolGetSize;
        public readonly int? ThreadPoolIndexQueueSize;
        public readonly int? ThreadPoolIndexSize;
        public readonly int? ThreadPoolSearchQueueSize;
        public readonly int? ThreadPoolSearchSize;
        public readonly int? ThreadPoolSearchThrottledQueueSize;
        public readonly int? ThreadPoolSearchThrottledSize;
        public readonly int? ThreadPoolWriteQueueSize;
        public readonly int? ThreadPoolWriteSize;

        [OutputConstructor]
        private ServiceElasticsearchUserConfigElasticsearch(
            bool? actionDestructiveRequiresName,
            int? indicesFielddataCacheSize,
            int? indicesMemoryIndexBufferSize,
            int? indicesQueriesCacheSize,
            int? indicesQueryBoolMaxClauseCount,
            ImmutableArray<string> reindexRemoteWhitelists,
            int? threadPoolAnalyzeQueueSize,
            int? threadPoolAnalyzeSize,
            int? threadPoolForceMergeSize,
            int? threadPoolGetQueueSize,
            int? threadPoolGetSize,
            int? threadPoolIndexQueueSize,
            int? threadPoolIndexSize,
            int? threadPoolSearchQueueSize,
            int? threadPoolSearchSize,
            int? threadPoolSearchThrottledQueueSize,
            int? threadPoolSearchThrottledSize,
            int? threadPoolWriteQueueSize,
            int? threadPoolWriteSize)
        {
            ActionDestructiveRequiresName = actionDestructiveRequiresName;
            IndicesFielddataCacheSize = indicesFielddataCacheSize;
            IndicesMemoryIndexBufferSize = indicesMemoryIndexBufferSize;
            IndicesQueriesCacheSize = indicesQueriesCacheSize;
            IndicesQueryBoolMaxClauseCount = indicesQueryBoolMaxClauseCount;
            ReindexRemoteWhitelists = reindexRemoteWhitelists;
            ThreadPoolAnalyzeQueueSize = threadPoolAnalyzeQueueSize;
            ThreadPoolAnalyzeSize = threadPoolAnalyzeSize;
            ThreadPoolForceMergeSize = threadPoolForceMergeSize;
            ThreadPoolGetQueueSize = threadPoolGetQueueSize;
            ThreadPoolGetSize = threadPoolGetSize;
            ThreadPoolIndexQueueSize = threadPoolIndexQueueSize;
            ThreadPoolIndexSize = threadPoolIndexSize;
            ThreadPoolSearchQueueSize = threadPoolSearchQueueSize;
            ThreadPoolSearchSize = threadPoolSearchSize;
            ThreadPoolSearchThrottledQueueSize = threadPoolSearchThrottledQueueSize;
            ThreadPoolSearchThrottledSize = threadPoolSearchThrottledSize;
            ThreadPoolWriteQueueSize = threadPoolWriteQueueSize;
            ThreadPoolWriteSize = threadPoolWriteSize;
        }
    }

    [OutputType]
    public sealed class ServiceElasticsearchUserConfigIndexPatterns
    {
        public readonly int? MaxIndexCount;
        public readonly string? Pattern;

        [OutputConstructor]
        private ServiceElasticsearchUserConfigIndexPatterns(
            int? maxIndexCount,
            string? pattern)
        {
            MaxIndexCount = maxIndexCount;
            Pattern = pattern;
        }
    }

    [OutputType]
    public sealed class ServiceElasticsearchUserConfigKibana
    {
        public readonly int? ElasticsearchRequestTimeout;
        public readonly bool? Enabled;
        public readonly int? MaxOldSpaceSize;

        [OutputConstructor]
        private ServiceElasticsearchUserConfigKibana(
            int? elasticsearchRequestTimeout,
            bool? enabled,
            int? maxOldSpaceSize)
        {
            ElasticsearchRequestTimeout = elasticsearchRequestTimeout;
            Enabled = enabled;
            MaxOldSpaceSize = maxOldSpaceSize;
        }
    }

    [OutputType]
    public sealed class ServiceElasticsearchUserConfigPrivateAccess
    {
        public readonly bool? Elasticsearch;
        public readonly bool? Kibana;
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServiceElasticsearchUserConfigPrivateAccess(
            bool? elasticsearch,
            bool? kibana,
            bool? prometheus)
        {
            Elasticsearch = elasticsearch;
            Kibana = kibana;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServiceElasticsearchUserConfigPublicAccess
    {
        public readonly bool? Elasticsearch;
        public readonly bool? Kibana;
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServiceElasticsearchUserConfigPublicAccess(
            bool? elasticsearch,
            bool? kibana,
            bool? prometheus)
        {
            Elasticsearch = elasticsearch;
            Kibana = kibana;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServiceGrafana
    {
        [OutputConstructor]
        private ServiceGrafana()
        {
        }
    }

    [OutputType]
    public sealed class ServiceGrafanaUserConfig
    {
        public readonly bool? AlertingEnabled;
        public readonly string? AlertingErrorOrTimeout;
        public readonly string? AlertingNodataOrNullvalues;
        public readonly bool? AllowEmbedding;
        public readonly ServiceGrafanaUserConfigAuthGithub? AuthGithub;
        public readonly ServiceGrafanaUserConfigAuthGitlab? AuthGitlab;
        public readonly ServiceGrafanaUserConfigAuthGoogle? AuthGoogle;
        public readonly string? CookieSamesite;
        public readonly string? CustomDomain;
        public readonly int? DashboardsVersionsToKeep;
        public readonly bool? DataproxySendUserHeader;
        public readonly int? DataproxyTimeout;
        public readonly bool? DisableGravatar;
        public readonly bool? EditorsCanAdmin;
        public readonly ServiceGrafanaUserConfigExternalImageStorage? ExternalImageStorage;
        public readonly string? GoogleAnalyticsUaId;
        public readonly ImmutableArray<string> IpFilters;
        public readonly bool? MetricsEnabled;
        public readonly ServiceGrafanaUserConfigPrivateAccess? PrivateAccess;
        public readonly ServiceGrafanaUserConfigPublicAccess? PublicAccess;
        public readonly ServiceGrafanaUserConfigSmtpServer? SmtpServer;
        public readonly bool? UserAutoAssignOrg;
        public readonly string? UserAutoAssignOrgRole;
        public readonly bool? ViewersCanEdit;

        [OutputConstructor]
        private ServiceGrafanaUserConfig(
            bool? alertingEnabled,
            string? alertingErrorOrTimeout,
            string? alertingNodataOrNullvalues,
            bool? allowEmbedding,
            ServiceGrafanaUserConfigAuthGithub? authGithub,
            ServiceGrafanaUserConfigAuthGitlab? authGitlab,
            ServiceGrafanaUserConfigAuthGoogle? authGoogle,
            string? cookieSamesite,
            string? customDomain,
            int? dashboardsVersionsToKeep,
            bool? dataproxySendUserHeader,
            int? dataproxyTimeout,
            bool? disableGravatar,
            bool? editorsCanAdmin,
            ServiceGrafanaUserConfigExternalImageStorage? externalImageStorage,
            string? googleAnalyticsUaId,
            ImmutableArray<string> ipFilters,
            bool? metricsEnabled,
            ServiceGrafanaUserConfigPrivateAccess? privateAccess,
            ServiceGrafanaUserConfigPublicAccess? publicAccess,
            ServiceGrafanaUserConfigSmtpServer? smtpServer,
            bool? userAutoAssignOrg,
            string? userAutoAssignOrgRole,
            bool? viewersCanEdit)
        {
            AlertingEnabled = alertingEnabled;
            AlertingErrorOrTimeout = alertingErrorOrTimeout;
            AlertingNodataOrNullvalues = alertingNodataOrNullvalues;
            AllowEmbedding = allowEmbedding;
            AuthGithub = authGithub;
            AuthGitlab = authGitlab;
            AuthGoogle = authGoogle;
            CookieSamesite = cookieSamesite;
            CustomDomain = customDomain;
            DashboardsVersionsToKeep = dashboardsVersionsToKeep;
            DataproxySendUserHeader = dataproxySendUserHeader;
            DataproxyTimeout = dataproxyTimeout;
            DisableGravatar = disableGravatar;
            EditorsCanAdmin = editorsCanAdmin;
            ExternalImageStorage = externalImageStorage;
            GoogleAnalyticsUaId = googleAnalyticsUaId;
            IpFilters = ipFilters;
            MetricsEnabled = metricsEnabled;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            SmtpServer = smtpServer;
            UserAutoAssignOrg = userAutoAssignOrg;
            UserAutoAssignOrgRole = userAutoAssignOrgRole;
            ViewersCanEdit = viewersCanEdit;
        }
    }

    [OutputType]
    public sealed class ServiceGrafanaUserConfigAuthGithub
    {
        public readonly bool? AllowSignUp;
        public readonly ImmutableArray<string> AllowedOrganizations;
        public readonly string? ClientId;
        public readonly string? ClientSecret;
        public readonly ImmutableArray<int> TeamIds;

        [OutputConstructor]
        private ServiceGrafanaUserConfigAuthGithub(
            bool? allowSignUp,
            ImmutableArray<string> allowedOrganizations,
            string? clientId,
            string? clientSecret,
            ImmutableArray<int> teamIds)
        {
            AllowSignUp = allowSignUp;
            AllowedOrganizations = allowedOrganizations;
            ClientId = clientId;
            ClientSecret = clientSecret;
            TeamIds = teamIds;
        }
    }

    [OutputType]
    public sealed class ServiceGrafanaUserConfigAuthGitlab
    {
        public readonly bool? AllowSignUp;
        public readonly ImmutableArray<string> AllowedGroups;
        public readonly string? ClientId;
        public readonly string? ClientSecret;

        [OutputConstructor]
        private ServiceGrafanaUserConfigAuthGitlab(
            bool? allowSignUp,
            ImmutableArray<string> allowedGroups,
            string? clientId,
            string? clientSecret)
        {
            AllowSignUp = allowSignUp;
            AllowedGroups = allowedGroups;
            ClientId = clientId;
            ClientSecret = clientSecret;
        }
    }

    [OutputType]
    public sealed class ServiceGrafanaUserConfigAuthGoogle
    {
        public readonly bool? AllowSignUp;
        public readonly ImmutableArray<string> AllowedDomains;
        public readonly string? ClientId;
        public readonly string? ClientSecret;

        [OutputConstructor]
        private ServiceGrafanaUserConfigAuthGoogle(
            bool? allowSignUp,
            ImmutableArray<string> allowedDomains,
            string? clientId,
            string? clientSecret)
        {
            AllowSignUp = allowSignUp;
            AllowedDomains = allowedDomains;
            ClientId = clientId;
            ClientSecret = clientSecret;
        }
    }

    [OutputType]
    public sealed class ServiceGrafanaUserConfigExternalImageStorage
    {
        public readonly string? AccessKey;
        public readonly string? BucketUrl;
        public readonly string? Provider;
        public readonly string? SecretKey;

        [OutputConstructor]
        private ServiceGrafanaUserConfigExternalImageStorage(
            string? accessKey,
            string? bucketUrl,
            string? provider,
            string? secretKey)
        {
            AccessKey = accessKey;
            BucketUrl = bucketUrl;
            Provider = provider;
            SecretKey = secretKey;
        }
    }

    [OutputType]
    public sealed class ServiceGrafanaUserConfigPrivateAccess
    {
        public readonly bool? Grafana;

        [OutputConstructor]
        private ServiceGrafanaUserConfigPrivateAccess(bool? grafana)
        {
            Grafana = grafana;
        }
    }

    [OutputType]
    public sealed class ServiceGrafanaUserConfigPublicAccess
    {
        public readonly bool? Grafana;

        [OutputConstructor]
        private ServiceGrafanaUserConfigPublicAccess(bool? grafana)
        {
            Grafana = grafana;
        }
    }

    [OutputType]
    public sealed class ServiceGrafanaUserConfigSmtpServer
    {
        public readonly string? FromAddress;
        public readonly string? FromName;
        public readonly string? Host;
        public readonly string? Password;
        public readonly int? Port;
        public readonly bool? SkipVerify;
        public readonly string? Username;

        [OutputConstructor]
        private ServiceGrafanaUserConfigSmtpServer(
            string? fromAddress,
            string? fromName,
            string? host,
            string? password,
            int? port,
            bool? skipVerify,
            string? username)
        {
            FromAddress = fromAddress;
            FromName = fromName;
            Host = host;
            Password = password;
            Port = port;
            SkipVerify = skipVerify;
            Username = username;
        }
    }

    [OutputType]
    public sealed class ServiceInfluxdb
    {
        public readonly string DatabaseName;

        [OutputConstructor]
        private ServiceInfluxdb(string databaseName)
        {
            DatabaseName = databaseName;
        }
    }

    [OutputType]
    public sealed class ServiceInfluxdbUserConfig
    {
        public readonly string? CustomDomain;
        public readonly ImmutableArray<string> IpFilters;
        public readonly ServiceInfluxdbUserConfigPrivateAccess? PrivateAccess;
        public readonly ServiceInfluxdbUserConfigPublicAccess? PublicAccess;
        public readonly string? ServiceToForkFrom;

        [OutputConstructor]
        private ServiceInfluxdbUserConfig(
            string? customDomain,
            ImmutableArray<string> ipFilters,
            ServiceInfluxdbUserConfigPrivateAccess? privateAccess,
            ServiceInfluxdbUserConfigPublicAccess? publicAccess,
            string? serviceToForkFrom)
        {
            CustomDomain = customDomain;
            IpFilters = ipFilters;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            ServiceToForkFrom = serviceToForkFrom;
        }
    }

    [OutputType]
    public sealed class ServiceInfluxdbUserConfigPrivateAccess
    {
        public readonly bool? Influxdb;

        [OutputConstructor]
        private ServiceInfluxdbUserConfigPrivateAccess(bool? influxdb)
        {
            Influxdb = influxdb;
        }
    }

    [OutputType]
    public sealed class ServiceInfluxdbUserConfigPublicAccess
    {
        public readonly bool? Influxdb;

        [OutputConstructor]
        private ServiceInfluxdbUserConfigPublicAccess(bool? influxdb)
        {
            Influxdb = influxdb;
        }
    }

    [OutputType]
    public sealed class ServiceKafka
    {
        public readonly string AccessCert;
        public readonly string AccessKey;
        public readonly string ConnectUri;
        public readonly string RestUri;
        public readonly string SchemaRegistryUri;

        [OutputConstructor]
        private ServiceKafka(
            string accessCert,
            string accessKey,
            string connectUri,
            string restUri,
            string schemaRegistryUri)
        {
            AccessCert = accessCert;
            AccessKey = accessKey;
            ConnectUri = connectUri;
            RestUri = restUri;
            SchemaRegistryUri = schemaRegistryUri;
        }
    }

    [OutputType]
    public sealed class ServiceKafkaUserConfig
    {
        public readonly string? CustomDomain;
        public readonly ImmutableArray<string> IpFilters;
        public readonly ServiceKafkaUserConfigKafka? Kafka;
        public readonly ServiceKafkaUserConfigKafkaAuthenticationMethods? KafkaAuthenticationMethods;
        public readonly bool? KafkaConnect;
        public readonly bool? KafkaRest;
        public readonly ServiceKafkaUserConfigKafkaRestConfig? KafkaRestConfig;
        public readonly string? KafkaVersion;
        public readonly ServiceKafkaUserConfigPrivateAccess? PrivateAccess;
        public readonly ServiceKafkaUserConfigPublicAccess? PublicAccess;
        public readonly bool? SchemaRegistry;

        [OutputConstructor]
        private ServiceKafkaUserConfig(
            string? customDomain,
            ImmutableArray<string> ipFilters,
            ServiceKafkaUserConfigKafka? kafka,
            ServiceKafkaUserConfigKafkaAuthenticationMethods? kafkaAuthenticationMethods,
            bool? kafkaConnect,
            bool? kafkaRest,
            ServiceKafkaUserConfigKafkaRestConfig? kafkaRestConfig,
            string? kafkaVersion,
            ServiceKafkaUserConfigPrivateAccess? privateAccess,
            ServiceKafkaUserConfigPublicAccess? publicAccess,
            bool? schemaRegistry)
        {
            CustomDomain = customDomain;
            IpFilters = ipFilters;
            Kafka = kafka;
            KafkaAuthenticationMethods = kafkaAuthenticationMethods;
            KafkaConnect = kafkaConnect;
            KafkaRest = kafkaRest;
            KafkaRestConfig = kafkaRestConfig;
            KafkaVersion = kafkaVersion;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            SchemaRegistry = schemaRegistry;
        }
    }

    [OutputType]
    public sealed class ServiceKafkaUserConfigKafka
    {
        public readonly bool? AutoCreateTopicsEnable;
        public readonly string? CompressionType;
        public readonly int? DefaultReplicationFactor;
        public readonly int? GroupMaxSessionTimeoutMs;
        public readonly int? GroupMinSessionTimeoutMs;
        public readonly int? LogCleanerMaxCompactionLagMs;
        public readonly double? LogCleanerMinCleanableRatio;
        public readonly int? LogCleanerMinCompactionLagMs;
        public readonly int? LogMessageTimestampDifferenceMaxMs;
        public readonly string? LogMessageTimestampType;
        public readonly int? LogRetentionBytes;
        public readonly int? LogRetentionHours;
        public readonly int? LogSegmentBytes;
        public readonly int? MaxConnectionsPerIp;
        public readonly int? MessageMaxBytes;
        public readonly int? NumPartitions;
        public readonly int? OffsetsRetentionMinutes;
        public readonly int? ProducerPurgatoryPurgeIntervalRequests;
        public readonly int? ReplicaFetchMaxBytes;
        public readonly int? ReplicaFetchResponseMaxBytes;
        public readonly int? SocketRequestMaxBytes;

        [OutputConstructor]
        private ServiceKafkaUserConfigKafka(
            bool? autoCreateTopicsEnable,
            string? compressionType,
            int? defaultReplicationFactor,
            int? groupMaxSessionTimeoutMs,
            int? groupMinSessionTimeoutMs,
            int? logCleanerMaxCompactionLagMs,
            double? logCleanerMinCleanableRatio,
            int? logCleanerMinCompactionLagMs,
            int? logMessageTimestampDifferenceMaxMs,
            string? logMessageTimestampType,
            int? logRetentionBytes,
            int? logRetentionHours,
            int? logSegmentBytes,
            int? maxConnectionsPerIp,
            int? messageMaxBytes,
            int? numPartitions,
            int? offsetsRetentionMinutes,
            int? producerPurgatoryPurgeIntervalRequests,
            int? replicaFetchMaxBytes,
            int? replicaFetchResponseMaxBytes,
            int? socketRequestMaxBytes)
        {
            AutoCreateTopicsEnable = autoCreateTopicsEnable;
            CompressionType = compressionType;
            DefaultReplicationFactor = defaultReplicationFactor;
            GroupMaxSessionTimeoutMs = groupMaxSessionTimeoutMs;
            GroupMinSessionTimeoutMs = groupMinSessionTimeoutMs;
            LogCleanerMaxCompactionLagMs = logCleanerMaxCompactionLagMs;
            LogCleanerMinCleanableRatio = logCleanerMinCleanableRatio;
            LogCleanerMinCompactionLagMs = logCleanerMinCompactionLagMs;
            LogMessageTimestampDifferenceMaxMs = logMessageTimestampDifferenceMaxMs;
            LogMessageTimestampType = logMessageTimestampType;
            LogRetentionBytes = logRetentionBytes;
            LogRetentionHours = logRetentionHours;
            LogSegmentBytes = logSegmentBytes;
            MaxConnectionsPerIp = maxConnectionsPerIp;
            MessageMaxBytes = messageMaxBytes;
            NumPartitions = numPartitions;
            OffsetsRetentionMinutes = offsetsRetentionMinutes;
            ProducerPurgatoryPurgeIntervalRequests = producerPurgatoryPurgeIntervalRequests;
            ReplicaFetchMaxBytes = replicaFetchMaxBytes;
            ReplicaFetchResponseMaxBytes = replicaFetchResponseMaxBytes;
            SocketRequestMaxBytes = socketRequestMaxBytes;
        }
    }

    [OutputType]
    public sealed class ServiceKafkaUserConfigKafkaAuthenticationMethods
    {
        public readonly bool? Certificate;
        public readonly bool? Sasl;

        [OutputConstructor]
        private ServiceKafkaUserConfigKafkaAuthenticationMethods(
            bool? certificate,
            bool? sasl)
        {
            Certificate = certificate;
            Sasl = sasl;
        }
    }

    [OutputType]
    public sealed class ServiceKafkaUserConfigKafkaRestConfig
    {
        public readonly bool? ConsumerEnableAutoCommit;
        public readonly int? ConsumerRequestMaxBytes;
        public readonly int? ConsumerRequestTimeoutMs;
        public readonly string? ProducerAcks;
        public readonly int? ProducerLingerMs;
        public readonly int? SimpleconsumerPoolSizeMax;

        [OutputConstructor]
        private ServiceKafkaUserConfigKafkaRestConfig(
            bool? consumerEnableAutoCommit,
            int? consumerRequestMaxBytes,
            int? consumerRequestTimeoutMs,
            string? producerAcks,
            int? producerLingerMs,
            int? simpleconsumerPoolSizeMax)
        {
            ConsumerEnableAutoCommit = consumerEnableAutoCommit;
            ConsumerRequestMaxBytes = consumerRequestMaxBytes;
            ConsumerRequestTimeoutMs = consumerRequestTimeoutMs;
            ProducerAcks = producerAcks;
            ProducerLingerMs = producerLingerMs;
            SimpleconsumerPoolSizeMax = simpleconsumerPoolSizeMax;
        }
    }

    [OutputType]
    public sealed class ServiceKafkaUserConfigPrivateAccess
    {
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServiceKafkaUserConfigPrivateAccess(bool? prometheus)
        {
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServiceKafkaUserConfigPublicAccess
    {
        public readonly bool? Kafka;
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServiceKafkaUserConfigPublicAccess(
            bool? kafka,
            bool? prometheus)
        {
            Kafka = kafka;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServiceMysql
    {
        [OutputConstructor]
        private ServiceMysql()
        {
        }
    }

    [OutputType]
    public sealed class ServiceMysqlUserConfig
    {
        public readonly string? AdminPassword;
        public readonly string? AdminUsername;
        public readonly int? BackupHour;
        public readonly int? BackupMinute;
        public readonly ImmutableArray<string> IpFilters;
        public readonly ServiceMysqlUserConfigMysql? Mysql;
        public readonly string? MysqlVersion;
        public readonly ServiceMysqlUserConfigPrivateAccess? PrivateAccess;
        public readonly ServiceMysqlUserConfigPublicAccess? PublicAccess;
        public readonly string? RecoveryTargetTime;
        public readonly string? ServiceToForkFrom;

        [OutputConstructor]
        private ServiceMysqlUserConfig(
            string? adminPassword,
            string? adminUsername,
            int? backupHour,
            int? backupMinute,
            ImmutableArray<string> ipFilters,
            ServiceMysqlUserConfigMysql? mysql,
            string? mysqlVersion,
            ServiceMysqlUserConfigPrivateAccess? privateAccess,
            ServiceMysqlUserConfigPublicAccess? publicAccess,
            string? recoveryTargetTime,
            string? serviceToForkFrom)
        {
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            IpFilters = ipFilters;
            Mysql = mysql;
            MysqlVersion = mysqlVersion;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            RecoveryTargetTime = recoveryTargetTime;
            ServiceToForkFrom = serviceToForkFrom;
        }
    }

    [OutputType]
    public sealed class ServiceMysqlUserConfigMysql
    {
        public readonly string? SqlMode;

        [OutputConstructor]
        private ServiceMysqlUserConfigMysql(string? sqlMode)
        {
            SqlMode = sqlMode;
        }
    }

    [OutputType]
    public sealed class ServiceMysqlUserConfigPrivateAccess
    {
        public readonly bool? Mysql;
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServiceMysqlUserConfigPrivateAccess(
            bool? mysql,
            bool? prometheus)
        {
            Mysql = mysql;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServiceMysqlUserConfigPublicAccess
    {
        public readonly bool? Mysql;
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServiceMysqlUserConfigPublicAccess(
            bool? mysql,
            bool? prometheus)
        {
            Mysql = mysql;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServicePg
    {
        public readonly string Dbname;
        public readonly string Host;
        public readonly string Password;
        public readonly int Port;
        public readonly string ReplicaUri;
        public readonly string Sslmode;
        public readonly string Uri;
        public readonly string User;

        [OutputConstructor]
        private ServicePg(
            string dbname,
            string host,
            string password,
            int port,
            string replicaUri,
            string sslmode,
            string uri,
            string user)
        {
            Dbname = dbname;
            Host = host;
            Password = password;
            Port = port;
            ReplicaUri = replicaUri;
            Sslmode = sslmode;
            Uri = uri;
            User = user;
        }
    }

    [OutputType]
    public sealed class ServicePgUserConfig
    {
        public readonly string? AdminPassword;
        public readonly string? AdminUsername;
        public readonly int? BackupHour;
        public readonly int? BackupMinute;
        public readonly ImmutableArray<string> IpFilters;
        public readonly ServicePgUserConfigPg? Pg;
        public readonly bool? PgReadReplica;
        public readonly string? PgServiceToForkFrom;
        public readonly string? PgVersion;
        public readonly ServicePgUserConfigPgbouncer? Pgbouncer;
        public readonly ServicePgUserConfigPglookout? Pglookout;
        public readonly ServicePgUserConfigPrivateAccess? PrivateAccess;
        public readonly ServicePgUserConfigPublicAccess? PublicAccess;
        public readonly string? RecoveryTargetTime;
        public readonly string? ServiceToForkFrom;

        [OutputConstructor]
        private ServicePgUserConfig(
            string? adminPassword,
            string? adminUsername,
            int? backupHour,
            int? backupMinute,
            ImmutableArray<string> ipFilters,
            ServicePgUserConfigPg? pg,
            bool? pgReadReplica,
            string? pgServiceToForkFrom,
            string? pgVersion,
            ServicePgUserConfigPgbouncer? pgbouncer,
            ServicePgUserConfigPglookout? pglookout,
            ServicePgUserConfigPrivateAccess? privateAccess,
            ServicePgUserConfigPublicAccess? publicAccess,
            string? recoveryTargetTime,
            string? serviceToForkFrom)
        {
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            IpFilters = ipFilters;
            Pg = pg;
            PgReadReplica = pgReadReplica;
            PgServiceToForkFrom = pgServiceToForkFrom;
            PgVersion = pgVersion;
            Pgbouncer = pgbouncer;
            Pglookout = pglookout;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            RecoveryTargetTime = recoveryTargetTime;
            ServiceToForkFrom = serviceToForkFrom;
        }
    }

    [OutputType]
    public sealed class ServicePgUserConfigPg
    {
        public readonly double? AutovacuumAnalyzeScaleFactor;
        public readonly int? AutovacuumAnalyzeThreshold;
        public readonly int? AutovacuumMaxWorkers;
        public readonly int? AutovacuumNaptime;
        public readonly int? AutovacuumVacuumCostDelay;
        public readonly int? AutovacuumVacuumCostLimit;
        public readonly double? AutovacuumVacuumScaleFactor;
        public readonly int? AutovacuumVacuumThreshold;
        public readonly int? IdleInTransactionSessionTimeout;
        public readonly int? LogAutovacuumMinDuration;
        public readonly string? LogErrorVerbosity;
        public readonly int? LogMinDurationStatement;
        public readonly int? MaxLocksPerTransaction;
        public readonly int? MaxParallelWorkers;
        public readonly int? MaxParallelWorkersPerGather;
        public readonly int? MaxPredLocksPerTransaction;
        public readonly int? MaxPreparedTransactions;
        public readonly int? MaxStackDepth;
        public readonly int? MaxStandbyArchiveDelay;
        public readonly int? MaxStandbyStreamingDelay;
        public readonly int? MaxWorkerProcesses;
        public readonly string? PgStatStatementsTrack;
        public readonly int? TempFileLimit;
        public readonly string? Timezone;
        public readonly int? TrackActivityQuerySize;
        public readonly string? TrackFunctions;

        [OutputConstructor]
        private ServicePgUserConfigPg(
            double? autovacuumAnalyzeScaleFactor,
            int? autovacuumAnalyzeThreshold,
            int? autovacuumMaxWorkers,
            int? autovacuumNaptime,
            int? autovacuumVacuumCostDelay,
            int? autovacuumVacuumCostLimit,
            double? autovacuumVacuumScaleFactor,
            int? autovacuumVacuumThreshold,
            int? idleInTransactionSessionTimeout,
            int? logAutovacuumMinDuration,
            string? logErrorVerbosity,
            int? logMinDurationStatement,
            int? maxLocksPerTransaction,
            int? maxParallelWorkers,
            int? maxParallelWorkersPerGather,
            int? maxPredLocksPerTransaction,
            int? maxPreparedTransactions,
            int? maxStackDepth,
            int? maxStandbyArchiveDelay,
            int? maxStandbyStreamingDelay,
            int? maxWorkerProcesses,
            string? pgStatStatementsTrack,
            int? tempFileLimit,
            string? timezone,
            int? trackActivityQuerySize,
            string? trackFunctions)
        {
            AutovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
            AutovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
            AutovacuumMaxWorkers = autovacuumMaxWorkers;
            AutovacuumNaptime = autovacuumNaptime;
            AutovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
            AutovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
            AutovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
            AutovacuumVacuumThreshold = autovacuumVacuumThreshold;
            IdleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
            LogAutovacuumMinDuration = logAutovacuumMinDuration;
            LogErrorVerbosity = logErrorVerbosity;
            LogMinDurationStatement = logMinDurationStatement;
            MaxLocksPerTransaction = maxLocksPerTransaction;
            MaxParallelWorkers = maxParallelWorkers;
            MaxParallelWorkersPerGather = maxParallelWorkersPerGather;
            MaxPredLocksPerTransaction = maxPredLocksPerTransaction;
            MaxPreparedTransactions = maxPreparedTransactions;
            MaxStackDepth = maxStackDepth;
            MaxStandbyArchiveDelay = maxStandbyArchiveDelay;
            MaxStandbyStreamingDelay = maxStandbyStreamingDelay;
            MaxWorkerProcesses = maxWorkerProcesses;
            PgStatStatementsTrack = pgStatStatementsTrack;
            TempFileLimit = tempFileLimit;
            Timezone = timezone;
            TrackActivityQuerySize = trackActivityQuerySize;
            TrackFunctions = trackFunctions;
        }
    }

    [OutputType]
    public sealed class ServicePgUserConfigPgbouncer
    {
        public readonly bool? ServerResetQueryAlways;

        [OutputConstructor]
        private ServicePgUserConfigPgbouncer(bool? serverResetQueryAlways)
        {
            ServerResetQueryAlways = serverResetQueryAlways;
        }
    }

    [OutputType]
    public sealed class ServicePgUserConfigPglookout
    {
        public readonly int? MaxFailoverReplicationTimeLag;

        [OutputConstructor]
        private ServicePgUserConfigPglookout(int? maxFailoverReplicationTimeLag)
        {
            MaxFailoverReplicationTimeLag = maxFailoverReplicationTimeLag;
        }
    }

    [OutputType]
    public sealed class ServicePgUserConfigPrivateAccess
    {
        public readonly bool? Pg;
        public readonly bool? Pgbouncer;
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServicePgUserConfigPrivateAccess(
            bool? pg,
            bool? pgbouncer,
            bool? prometheus)
        {
            Pg = pg;
            Pgbouncer = pgbouncer;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServicePgUserConfigPublicAccess
    {
        public readonly bool? Pg;
        public readonly bool? Pgbouncer;
        public readonly bool? Prometheus;

        [OutputConstructor]
        private ServicePgUserConfigPublicAccess(
            bool? pg,
            bool? pgbouncer,
            bool? prometheus)
        {
            Pg = pg;
            Pgbouncer = pgbouncer;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class ServiceRedis
    {
        [OutputConstructor]
        private ServiceRedis()
        {
        }
    }

    [OutputType]
    public sealed class ServiceRedisUserConfig
    {
        public readonly ImmutableArray<string> IpFilters;
        public readonly ServiceRedisUserConfigPrivateAccess? PrivateAccess;
        public readonly ServiceRedisUserConfigPublicAccess? PublicAccess;
        public readonly int? RedisLfuDecayTime;
        public readonly int? RedisLfuLogFactor;
        public readonly string? RedisMaxmemoryPolicy;
        public readonly string? RedisNotifyKeyspaceEvents;
        public readonly bool? RedisSsl;
        public readonly int? RedisTimeout;

        [OutputConstructor]
        private ServiceRedisUserConfig(
            ImmutableArray<string> ipFilters,
            ServiceRedisUserConfigPrivateAccess? privateAccess,
            ServiceRedisUserConfigPublicAccess? publicAccess,
            int? redisLfuDecayTime,
            int? redisLfuLogFactor,
            string? redisMaxmemoryPolicy,
            string? redisNotifyKeyspaceEvents,
            bool? redisSsl,
            int? redisTimeout)
        {
            IpFilters = ipFilters;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            RedisLfuDecayTime = redisLfuDecayTime;
            RedisLfuLogFactor = redisLfuLogFactor;
            RedisMaxmemoryPolicy = redisMaxmemoryPolicy;
            RedisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            RedisSsl = redisSsl;
            RedisTimeout = redisTimeout;
        }
    }

    [OutputType]
    public sealed class ServiceRedisUserConfigPrivateAccess
    {
        public readonly bool? Prometheus;
        public readonly bool? Redis;

        [OutputConstructor]
        private ServiceRedisUserConfigPrivateAccess(
            bool? prometheus,
            bool? redis)
        {
            Prometheus = prometheus;
            Redis = redis;
        }
    }

    [OutputType]
    public sealed class ServiceRedisUserConfigPublicAccess
    {
        public readonly bool? Prometheus;
        public readonly bool? Redis;

        [OutputConstructor]
        private ServiceRedisUserConfigPublicAccess(
            bool? prometheus,
            bool? redis)
        {
            Prometheus = prometheus;
            Redis = redis;
        }
    }

    [OutputType]
    public sealed class ServiceServiceIntegrations
    {
        public readonly string IntegrationType;
        public readonly string SourceServiceName;

        [OutputConstructor]
        private ServiceServiceIntegrations(
            string integrationType,
            string sourceServiceName)
        {
            IntegrationType = integrationType;
            SourceServiceName = sourceServiceName;
        }
    }
    }
}
