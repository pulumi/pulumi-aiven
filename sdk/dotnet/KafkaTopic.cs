// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// 
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var mytesttopic = new Aiven.KafkaTopic("mytesttopic", new Aiven.KafkaTopicArgs
    ///         {
    ///             CleanupPolicy = "delete",
    ///             MinimumInSyncReplicas = 2,
    ///             Partitions = 5,
    ///             Project = aiven_project.Myproject.Project,
    ///             Replication = 3,
    ///             RetentionBytes = -1,
    ///             RetentionHours = 72,
    ///             ServiceName = aiven_service.Myservice.Service_name,
    ///             TopicName = "&lt;TOPIC_NAME&gt;",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class KafkaTopic : Pulumi.CustomResource
    {
        /// <summary>
        /// Topic cleanup policy. Allowed values: delete, compact
        /// </summary>
        [Output("cleanupPolicy")]
        public Output<string?> CleanupPolicy { get; private set; } = null!;

        /// <summary>
        /// Minimum required nodes in-sync replicas (ISR) to produce to a partition
        /// </summary>
        [Output("minimumInSyncReplicas")]
        public Output<int?> MinimumInSyncReplicas { get; private set; } = null!;

        /// <summary>
        /// Number of partitions to create in the topic
        /// </summary>
        [Output("partitions")]
        public Output<int> Partitions { get; private set; } = null!;

        /// <summary>
        /// Project to link the kafka topic to
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Replication factor for the topic
        /// </summary>
        [Output("replication")]
        public Output<int> Replication { get; private set; } = null!;

        /// <summary>
        /// Retention bytes
        /// </summary>
        [Output("retentionBytes")]
        public Output<int?> RetentionBytes { get; private set; } = null!;

        /// <summary>
        /// Retention period (hours)
        /// </summary>
        [Output("retentionHours")]
        public Output<int?> RetentionHours { get; private set; } = null!;

        /// <summary>
        /// Service to link the kafka topic to
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
        /// enable this for any production Kafka topic containing critical data.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;

        /// <summary>
        /// Topic name
        /// </summary>
        [Output("topicName")]
        public Output<string> TopicName { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaTopic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaTopic(string name, KafkaTopicArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/kafkaTopic:KafkaTopic", name, args ?? new KafkaTopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaTopic(string name, Input<string> id, KafkaTopicState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/kafkaTopic:KafkaTopic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaTopic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaTopic Get(string name, Input<string> id, KafkaTopicState? state = null, CustomResourceOptions? options = null)
        {
            return new KafkaTopic(name, id, state, options);
        }
    }

    public sealed class KafkaTopicArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Topic cleanup policy. Allowed values: delete, compact
        /// </summary>
        [Input("cleanupPolicy")]
        public Input<string>? CleanupPolicy { get; set; }

        /// <summary>
        /// Minimum required nodes in-sync replicas (ISR) to produce to a partition
        /// </summary>
        [Input("minimumInSyncReplicas")]
        public Input<int>? MinimumInSyncReplicas { get; set; }

        /// <summary>
        /// Number of partitions to create in the topic
        /// </summary>
        [Input("partitions", required: true)]
        public Input<int> Partitions { get; set; } = null!;

        /// <summary>
        /// Project to link the kafka topic to
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Replication factor for the topic
        /// </summary>
        [Input("replication", required: true)]
        public Input<int> Replication { get; set; } = null!;

        /// <summary>
        /// Retention bytes
        /// </summary>
        [Input("retentionBytes")]
        public Input<int>? RetentionBytes { get; set; }

        /// <summary>
        /// Retention period (hours)
        /// </summary>
        [Input("retentionHours")]
        public Input<int>? RetentionHours { get; set; }

        /// <summary>
        /// Service to link the kafka topic to
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
        /// enable this for any production Kafka topic containing critical data.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        /// <summary>
        /// Topic name
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public KafkaTopicArgs()
        {
        }
    }

    public sealed class KafkaTopicState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Topic cleanup policy. Allowed values: delete, compact
        /// </summary>
        [Input("cleanupPolicy")]
        public Input<string>? CleanupPolicy { get; set; }

        /// <summary>
        /// Minimum required nodes in-sync replicas (ISR) to produce to a partition
        /// </summary>
        [Input("minimumInSyncReplicas")]
        public Input<int>? MinimumInSyncReplicas { get; set; }

        /// <summary>
        /// Number of partitions to create in the topic
        /// </summary>
        [Input("partitions")]
        public Input<int>? Partitions { get; set; }

        /// <summary>
        /// Project to link the kafka topic to
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Replication factor for the topic
        /// </summary>
        [Input("replication")]
        public Input<int>? Replication { get; set; }

        /// <summary>
        /// Retention bytes
        /// </summary>
        [Input("retentionBytes")]
        public Input<int>? RetentionBytes { get; set; }

        /// <summary>
        /// Retention period (hours)
        /// </summary>
        [Input("retentionHours")]
        public Input<int>? RetentionHours { get; set; }

        /// <summary>
        /// Service to link the kafka topic to
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
        /// enable this for any production Kafka topic containing critical data.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        /// <summary>
        /// Topic name
        /// </summary>
        [Input("topicName")]
        public Input<string>? TopicName { get; set; }

        public KafkaTopicState()
        {
        }
    }
}
