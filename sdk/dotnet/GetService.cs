// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetService
    {
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("aiven:index/getService:getService", args ?? new GetServiceArgs(), options.WithVersion());
    }


    public sealed class GetServiceArgs : Pulumi.InvokeArgs
    {
        [Input("cassandra")]
        public Inputs.GetServiceCassandraArgs? Cassandra { get; set; }

        [Input("cassandraUserConfig")]
        public Inputs.GetServiceCassandraUserConfigArgs? CassandraUserConfig { get; set; }

        [Input("cloudName")]
        public string? CloudName { get; set; }

        [Input("components")]
        private List<Inputs.GetServiceComponentArgs>? _components;
        public List<Inputs.GetServiceComponentArgs> Components
        {
            get => _components ?? (_components = new List<Inputs.GetServiceComponentArgs>());
            set => _components = value;
        }

        [Input("elasticsearch")]
        public Inputs.GetServiceElasticsearchArgs? Elasticsearch { get; set; }

        [Input("elasticsearchUserConfig")]
        public Inputs.GetServiceElasticsearchUserConfigArgs? ElasticsearchUserConfig { get; set; }

        [Input("grafana")]
        public Inputs.GetServiceGrafanaArgs? Grafana { get; set; }

        [Input("grafanaUserConfig")]
        public Inputs.GetServiceGrafanaUserConfigArgs? GrafanaUserConfig { get; set; }

        [Input("influxdb")]
        public Inputs.GetServiceInfluxdbArgs? Influxdb { get; set; }

        [Input("influxdbUserConfig")]
        public Inputs.GetServiceInfluxdbUserConfigArgs? InfluxdbUserConfig { get; set; }

        [Input("kafka")]
        public Inputs.GetServiceKafkaArgs? Kafka { get; set; }

        [Input("kafkaConnect")]
        public Inputs.GetServiceKafkaConnectArgs? KafkaConnect { get; set; }

        [Input("kafkaConnectUserConfig")]
        public Inputs.GetServiceKafkaConnectUserConfigArgs? KafkaConnectUserConfig { get; set; }

        [Input("kafkaMirrormaker")]
        public Inputs.GetServiceKafkaMirrormakerArgs? KafkaMirrormaker { get; set; }

        [Input("kafkaMirrormakerUserConfig")]
        public Inputs.GetServiceKafkaMirrormakerUserConfigArgs? KafkaMirrormakerUserConfig { get; set; }

        [Input("kafkaUserConfig")]
        public Inputs.GetServiceKafkaUserConfigArgs? KafkaUserConfig { get; set; }

        [Input("maintenanceWindowDow")]
        public string? MaintenanceWindowDow { get; set; }

        [Input("maintenanceWindowTime")]
        public string? MaintenanceWindowTime { get; set; }

        [Input("mysql")]
        public Inputs.GetServiceMysqlArgs? Mysql { get; set; }

        [Input("mysqlUserConfig")]
        public Inputs.GetServiceMysqlUserConfigArgs? MysqlUserConfig { get; set; }

        [Input("pg")]
        public Inputs.GetServicePgArgs? Pg { get; set; }

        [Input("pgUserConfig")]
        public Inputs.GetServicePgUserConfigArgs? PgUserConfig { get; set; }

        [Input("plan")]
        public string? Plan { get; set; }

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("projectVpcId")]
        public string? ProjectVpcId { get; set; }

        [Input("redis")]
        public Inputs.GetServiceRedisArgs? Redis { get; set; }

        [Input("redisUserConfig")]
        public Inputs.GetServiceRedisUserConfigArgs? RedisUserConfig { get; set; }

        [Input("serviceHost")]
        public string? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private List<Inputs.GetServiceServiceIntegrationArgs>? _serviceIntegrations;
        public List<Inputs.GetServiceServiceIntegrationArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new List<Inputs.GetServiceServiceIntegrationArgs>());
            set => _serviceIntegrations = value;
        }

        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        [Input("servicePassword")]
        public string? ServicePassword { get; set; }

        [Input("servicePort")]
        public int? ServicePort { get; set; }

        [Input("serviceType")]
        public string? ServiceType { get; set; }

        [Input("serviceUri")]
        public string? ServiceUri { get; set; }

        [Input("serviceUsername")]
        public string? ServiceUsername { get; set; }

        [Input("state")]
        public string? State { get; set; }

        [Input("terminationProtection")]
        public bool? TerminationProtection { get; set; }

        public GetServiceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        public readonly Outputs.GetServiceCassandraResult Cassandra;
        public readonly Outputs.GetServiceCassandraUserConfigResult? CassandraUserConfig;
        public readonly string? CloudName;
        public readonly ImmutableArray<Outputs.GetServiceComponentResult> Components;
        public readonly Outputs.GetServiceElasticsearchResult Elasticsearch;
        public readonly Outputs.GetServiceElasticsearchUserConfigResult? ElasticsearchUserConfig;
        public readonly Outputs.GetServiceGrafanaResult Grafana;
        public readonly Outputs.GetServiceGrafanaUserConfigResult? GrafanaUserConfig;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetServiceInfluxdbResult Influxdb;
        public readonly Outputs.GetServiceInfluxdbUserConfigResult? InfluxdbUserConfig;
        public readonly Outputs.GetServiceKafkaResult Kafka;
        public readonly Outputs.GetServiceKafkaConnectResult KafkaConnect;
        public readonly Outputs.GetServiceKafkaConnectUserConfigResult? KafkaConnectUserConfig;
        public readonly Outputs.GetServiceKafkaMirrormakerResult KafkaMirrormaker;
        public readonly Outputs.GetServiceKafkaMirrormakerUserConfigResult? KafkaMirrormakerUserConfig;
        public readonly Outputs.GetServiceKafkaUserConfigResult? KafkaUserConfig;
        public readonly string? MaintenanceWindowDow;
        public readonly string? MaintenanceWindowTime;
        public readonly Outputs.GetServiceMysqlResult Mysql;
        public readonly Outputs.GetServiceMysqlUserConfigResult? MysqlUserConfig;
        public readonly Outputs.GetServicePgResult Pg;
        public readonly Outputs.GetServicePgUserConfigResult? PgUserConfig;
        public readonly string? Plan;
        public readonly string Project;
        public readonly string? ProjectVpcId;
        public readonly Outputs.GetServiceRedisResult Redis;
        public readonly Outputs.GetServiceRedisUserConfigResult? RedisUserConfig;
        public readonly string ServiceHost;
        public readonly ImmutableArray<Outputs.GetServiceServiceIntegrationResult> ServiceIntegrations;
        public readonly string ServiceName;
        public readonly string ServicePassword;
        public readonly int ServicePort;
        public readonly string? ServiceType;
        public readonly string ServiceUri;
        public readonly string ServiceUsername;
        public readonly string State;
        public readonly bool? TerminationProtection;

        [OutputConstructor]
        private GetServiceResult(
            Outputs.GetServiceCassandraResult cassandra,

            Outputs.GetServiceCassandraUserConfigResult? cassandraUserConfig,

            string? cloudName,

            ImmutableArray<Outputs.GetServiceComponentResult> components,

            Outputs.GetServiceElasticsearchResult elasticsearch,

            Outputs.GetServiceElasticsearchUserConfigResult? elasticsearchUserConfig,

            Outputs.GetServiceGrafanaResult grafana,

            Outputs.GetServiceGrafanaUserConfigResult? grafanaUserConfig,

            string id,

            Outputs.GetServiceInfluxdbResult influxdb,

            Outputs.GetServiceInfluxdbUserConfigResult? influxdbUserConfig,

            Outputs.GetServiceKafkaResult kafka,

            Outputs.GetServiceKafkaConnectResult kafkaConnect,

            Outputs.GetServiceKafkaConnectUserConfigResult? kafkaConnectUserConfig,

            Outputs.GetServiceKafkaMirrormakerResult kafkaMirrormaker,

            Outputs.GetServiceKafkaMirrormakerUserConfigResult? kafkaMirrormakerUserConfig,

            Outputs.GetServiceKafkaUserConfigResult? kafkaUserConfig,

            string? maintenanceWindowDow,

            string? maintenanceWindowTime,

            Outputs.GetServiceMysqlResult mysql,

            Outputs.GetServiceMysqlUserConfigResult? mysqlUserConfig,

            Outputs.GetServicePgResult pg,

            Outputs.GetServicePgUserConfigResult? pgUserConfig,

            string? plan,

            string project,

            string? projectVpcId,

            Outputs.GetServiceRedisResult redis,

            Outputs.GetServiceRedisUserConfigResult? redisUserConfig,

            string serviceHost,

            ImmutableArray<Outputs.GetServiceServiceIntegrationResult> serviceIntegrations,

            string serviceName,

            string servicePassword,

            int servicePort,

            string? serviceType,

            string serviceUri,

            string serviceUsername,

            string state,

            bool? terminationProtection)
        {
            Cassandra = cassandra;
            CassandraUserConfig = cassandraUserConfig;
            CloudName = cloudName;
            Components = components;
            Elasticsearch = elasticsearch;
            ElasticsearchUserConfig = elasticsearchUserConfig;
            Grafana = grafana;
            GrafanaUserConfig = grafanaUserConfig;
            Id = id;
            Influxdb = influxdb;
            InfluxdbUserConfig = influxdbUserConfig;
            Kafka = kafka;
            KafkaConnect = kafkaConnect;
            KafkaConnectUserConfig = kafkaConnectUserConfig;
            KafkaMirrormaker = kafkaMirrormaker;
            KafkaMirrormakerUserConfig = kafkaMirrormakerUserConfig;
            KafkaUserConfig = kafkaUserConfig;
            MaintenanceWindowDow = maintenanceWindowDow;
            MaintenanceWindowTime = maintenanceWindowTime;
            Mysql = mysql;
            MysqlUserConfig = mysqlUserConfig;
            Pg = pg;
            PgUserConfig = pgUserConfig;
            Plan = plan;
            Project = project;
            ProjectVpcId = projectVpcId;
            Redis = redis;
            RedisUserConfig = redisUserConfig;
            ServiceHost = serviceHost;
            ServiceIntegrations = serviceIntegrations;
            ServiceName = serviceName;
            ServicePassword = servicePassword;
            ServicePort = servicePort;
            ServiceType = serviceType;
            ServiceUri = serviceUri;
            ServiceUsername = serviceUsername;
            State = state;
            TerminationProtection = terminationProtection;
        }
    }
}
