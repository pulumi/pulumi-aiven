// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetService
    {
        /// <summary>
        /// The Service datasource provides information about specific Aiven Services.
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("aiven:index/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// The Service datasource provides information about specific Aiven Services.
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetServiceResult>("aiven:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Target project
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetServiceArgs()
        {
        }
    }

    public sealed class GetServiceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Target project
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// Cassandra user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceCassandraUserConfigResult> CassandraUserConfigs;
        /// <summary>
        /// Cassandra specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceCassandraResult> Cassandras;
        /// <summary>
        /// Clickhouse user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceClickhouseUserConfigResult> ClickhouseUserConfigs;
        /// <summary>
        /// Clickhouse specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceClickhouseResult> Clickhouses;
        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        public readonly string CloudName;
        /// <summary>
        /// Service component information objects
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceComponentResult> Components;
        /// <summary>
        /// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
        /// </summary>
        public readonly string DiskSpace;
        /// <summary>
        /// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
        /// </summary>
        public readonly string DiskSpaceCap;
        /// <summary>
        /// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `disk_space`
        /// </summary>
        public readonly string DiskSpaceDefault;
        /// <summary>
        /// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
        /// </summary>
        public readonly string DiskSpaceStep;
        /// <summary>
        /// Disk space that service is currently using
        /// </summary>
        public readonly string DiskSpaceUsed;
        /// <summary>
        /// Elasticsearch user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceElasticsearchUserConfigResult> ElasticsearchUserConfigs;
        /// <summary>
        /// Elasticsearch specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceElasticsearchResult> Elasticsearches;
        /// <summary>
        /// Flink user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceFlinkUserConfigResult> FlinkUserConfigs;
        /// <summary>
        /// Flink specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceFlinkResult> Flinks;
        /// <summary>
        /// Grafana user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceGrafanaUserConfigResult> GrafanaUserConfigs;
        /// <summary>
        /// Grafana specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceGrafanaResult> Grafanas;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Influxdb user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceInfluxdbUserConfigResult> InfluxdbUserConfigs;
        /// <summary>
        /// InfluxDB specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceInfluxdbResult> Influxdbs;
        /// <summary>
        /// Kafka*connect user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceKafkaConnectUserConfigResult> KafkaConnectUserConfigs;
        /// <summary>
        /// Kafka Connect specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceKafkaConnectResult> KafkaConnects;
        /// <summary>
        /// Kafka*mirrormaker user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceKafkaMirrormakerUserConfigResult> KafkaMirrormakerUserConfigs;
        /// <summary>
        /// Kafka MirrorMaker 2 specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceKafkaMirrormakerResult> KafkaMirrormakers;
        /// <summary>
        /// Kafka user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceKafkaUserConfigResult> KafkaUserConfigs;
        /// <summary>
        /// Kafka specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceKafkaResult> Kafkas;
        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        public readonly string MaintenanceWindowDow;
        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        public readonly string MaintenanceWindowTime;
        /// <summary>
        /// Mysql user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMysqlUserConfigResult> MysqlUserConfigs;
        /// <summary>
        /// MySQL specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMysqlResult> Mysqls;
        /// <summary>
        /// Opensearch user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceOpensearchUserConfigResult> OpensearchUserConfigs;
        /// <summary>
        /// Opensearch specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceOpensearchResult> Opensearches;
        /// <summary>
        /// Pg user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServicePgUserConfigResult> PgUserConfigs;
        /// <summary>
        /// PostgreSQL specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServicePgResult> Pgs;
        /// <summary>
        /// Subscription plan
        /// </summary>
        public readonly string Plan;
        /// <summary>
        /// Target project
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        public readonly string ProjectVpcId;
        /// <summary>
        /// Redis specific server provided values
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceRediResult> Redis;
        /// <summary>
        /// Redis user configurable settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceRedisUserConfigResult> RedisUserConfigs;
        /// <summary>
        /// Service hostname
        /// </summary>
        public readonly string ServiceHost;
        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceServiceIntegrationResult> ServiceIntegrations;
        /// <summary>
        /// Service name
        /// </summary>
        public readonly string ServiceName;
        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        public readonly string ServicePassword;
        /// <summary>
        /// Service port
        /// </summary>
        public readonly int ServicePort;
        /// <summary>
        /// Service type code
        /// </summary>
        public readonly string ServiceType;
        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        public readonly string ServiceUri;
        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        public readonly string ServiceUsername;
        /// <summary>
        /// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` and `RUNNING`.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        public readonly ImmutableArray<string> StaticIps;
        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        public readonly bool TerminationProtection;

        [OutputConstructor]
        private GetServiceResult(
            ImmutableArray<Outputs.GetServiceCassandraUserConfigResult> cassandraUserConfigs,

            ImmutableArray<Outputs.GetServiceCassandraResult> cassandras,

            ImmutableArray<Outputs.GetServiceClickhouseUserConfigResult> clickhouseUserConfigs,

            ImmutableArray<Outputs.GetServiceClickhouseResult> clickhouses,

            string cloudName,

            ImmutableArray<Outputs.GetServiceComponentResult> components,

            string diskSpace,

            string diskSpaceCap,

            string diskSpaceDefault,

            string diskSpaceStep,

            string diskSpaceUsed,

            ImmutableArray<Outputs.GetServiceElasticsearchUserConfigResult> elasticsearchUserConfigs,

            ImmutableArray<Outputs.GetServiceElasticsearchResult> elasticsearches,

            ImmutableArray<Outputs.GetServiceFlinkUserConfigResult> flinkUserConfigs,

            ImmutableArray<Outputs.GetServiceFlinkResult> flinks,

            ImmutableArray<Outputs.GetServiceGrafanaUserConfigResult> grafanaUserConfigs,

            ImmutableArray<Outputs.GetServiceGrafanaResult> grafanas,

            string id,

            ImmutableArray<Outputs.GetServiceInfluxdbUserConfigResult> influxdbUserConfigs,

            ImmutableArray<Outputs.GetServiceInfluxdbResult> influxdbs,

            ImmutableArray<Outputs.GetServiceKafkaConnectUserConfigResult> kafkaConnectUserConfigs,

            ImmutableArray<Outputs.GetServiceKafkaConnectResult> kafkaConnects,

            ImmutableArray<Outputs.GetServiceKafkaMirrormakerUserConfigResult> kafkaMirrormakerUserConfigs,

            ImmutableArray<Outputs.GetServiceKafkaMirrormakerResult> kafkaMirrormakers,

            ImmutableArray<Outputs.GetServiceKafkaUserConfigResult> kafkaUserConfigs,

            ImmutableArray<Outputs.GetServiceKafkaResult> kafkas,

            string maintenanceWindowDow,

            string maintenanceWindowTime,

            ImmutableArray<Outputs.GetServiceMysqlUserConfigResult> mysqlUserConfigs,

            ImmutableArray<Outputs.GetServiceMysqlResult> mysqls,

            ImmutableArray<Outputs.GetServiceOpensearchUserConfigResult> opensearchUserConfigs,

            ImmutableArray<Outputs.GetServiceOpensearchResult> opensearches,

            ImmutableArray<Outputs.GetServicePgUserConfigResult> pgUserConfigs,

            ImmutableArray<Outputs.GetServicePgResult> pgs,

            string plan,

            string project,

            string projectVpcId,

            ImmutableArray<Outputs.GetServiceRediResult> redis,

            ImmutableArray<Outputs.GetServiceRedisUserConfigResult> redisUserConfigs,

            string serviceHost,

            ImmutableArray<Outputs.GetServiceServiceIntegrationResult> serviceIntegrations,

            string serviceName,

            string servicePassword,

            int servicePort,

            string serviceType,

            string serviceUri,

            string serviceUsername,

            string state,

            ImmutableArray<string> staticIps,

            bool terminationProtection)
        {
            CassandraUserConfigs = cassandraUserConfigs;
            Cassandras = cassandras;
            ClickhouseUserConfigs = clickhouseUserConfigs;
            Clickhouses = clickhouses;
            CloudName = cloudName;
            Components = components;
            DiskSpace = diskSpace;
            DiskSpaceCap = diskSpaceCap;
            DiskSpaceDefault = diskSpaceDefault;
            DiskSpaceStep = diskSpaceStep;
            DiskSpaceUsed = diskSpaceUsed;
            ElasticsearchUserConfigs = elasticsearchUserConfigs;
            Elasticsearches = elasticsearches;
            FlinkUserConfigs = flinkUserConfigs;
            Flinks = flinks;
            GrafanaUserConfigs = grafanaUserConfigs;
            Grafanas = grafanas;
            Id = id;
            InfluxdbUserConfigs = influxdbUserConfigs;
            Influxdbs = influxdbs;
            KafkaConnectUserConfigs = kafkaConnectUserConfigs;
            KafkaConnects = kafkaConnects;
            KafkaMirrormakerUserConfigs = kafkaMirrormakerUserConfigs;
            KafkaMirrormakers = kafkaMirrormakers;
            KafkaUserConfigs = kafkaUserConfigs;
            Kafkas = kafkas;
            MaintenanceWindowDow = maintenanceWindowDow;
            MaintenanceWindowTime = maintenanceWindowTime;
            MysqlUserConfigs = mysqlUserConfigs;
            Mysqls = mysqls;
            OpensearchUserConfigs = opensearchUserConfigs;
            Opensearches = opensearches;
            PgUserConfigs = pgUserConfigs;
            Pgs = pgs;
            Plan = plan;
            Project = project;
            ProjectVpcId = projectVpcId;
            Redis = redis;
            RedisUserConfigs = redisUserConfigs;
            ServiceHost = serviceHost;
            ServiceIntegrations = serviceIntegrations;
            ServiceName = serviceName;
            ServicePassword = servicePassword;
            ServicePort = servicePort;
            ServiceType = serviceType;
            ServiceUri = serviceUri;
            ServiceUsername = serviceUsername;
            State = state;
            StaticIps = staticIps;
            TerminationProtection = terminationProtection;
        }
    }
}
