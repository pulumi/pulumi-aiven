// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static partial class Invokes
    {
        public static Task<GetServiceResult> GetService(GetServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("aiven:index/getService:getService", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetServiceArgs : Pulumi.ResourceArgs
    {
        [Input("cassandra")]
        public Input<Inputs.GetServiceCassandraArgs>? Cassandra { get; set; }

        [Input("cassandraUserConfig")]
        public Input<Inputs.GetServiceCassandraUserConfigArgs>? CassandraUserConfig { get; set; }

        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        [Input("components")]
        private InputList<Inputs.GetServiceComponentsArgs>? _components;
        public InputList<Inputs.GetServiceComponentsArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.GetServiceComponentsArgs>());
            set => _components = value;
        }

        [Input("elasticsearch")]
        public Input<Inputs.GetServiceElasticsearchArgs>? Elasticsearch { get; set; }

        [Input("elasticsearchUserConfig")]
        public Input<Inputs.GetServiceElasticsearchUserConfigArgs>? ElasticsearchUserConfig { get; set; }

        [Input("grafana")]
        public Input<Inputs.GetServiceGrafanaArgs>? Grafana { get; set; }

        [Input("grafanaUserConfig")]
        public Input<Inputs.GetServiceGrafanaUserConfigArgs>? GrafanaUserConfig { get; set; }

        [Input("influxdb")]
        public Input<Inputs.GetServiceInfluxdbArgs>? Influxdb { get; set; }

        [Input("influxdbUserConfig")]
        public Input<Inputs.GetServiceInfluxdbUserConfigArgs>? InfluxdbUserConfig { get; set; }

        [Input("kafka")]
        public Input<Inputs.GetServiceKafkaArgs>? Kafka { get; set; }

        [Input("kafkaConnect")]
        public Input<Inputs.GetServiceKafkaConnectArgs>? KafkaConnect { get; set; }

        [Input("kafkaConnectUserConfig")]
        public Input<Inputs.GetServiceKafkaConnectUserConfigArgs>? KafkaConnectUserConfig { get; set; }

        [Input("kafkaUserConfig")]
        public Input<Inputs.GetServiceKafkaUserConfigArgs>? KafkaUserConfig { get; set; }

        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        [Input("mysql")]
        public Input<Inputs.GetServiceMysqlArgs>? Mysql { get; set; }

        [Input("mysqlUserConfig")]
        public Input<Inputs.GetServiceMysqlUserConfigArgs>? MysqlUserConfig { get; set; }

        [Input("pg")]
        public Input<Inputs.GetServicePgArgs>? Pg { get; set; }

        [Input("pgUserConfig")]
        public Input<Inputs.GetServicePgUserConfigArgs>? PgUserConfig { get; set; }

        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        [Input("redis")]
        public Input<Inputs.GetServiceRedisArgs>? Redis { get; set; }

        [Input("redisUserConfig")]
        public Input<Inputs.GetServiceRedisUserConfigArgs>? RedisUserConfig { get; set; }

        [Input("serviceHost")]
        public Input<string>? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.GetServiceServiceIntegrationsArgs>? _serviceIntegrations;
        public InputList<Inputs.GetServiceServiceIntegrationsArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.GetServiceServiceIntegrationsArgs>());
            set => _serviceIntegrations = value;
        }

        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        [Input("servicePassword")]
        public Input<string>? ServicePassword { get; set; }

        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        [Input("serviceUri")]
        public Input<string>? ServiceUri { get; set; }

        [Input("serviceUsername")]
        public Input<string>? ServiceUsername { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public GetServiceArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetServiceResult
    {
        public readonly Outputs.GetServiceCassandraResult Cassandra;
        public readonly Outputs.GetServiceCassandraUserConfigResult? CassandraUserConfig;
        public readonly string? CloudName;
        public readonly ImmutableArray<Outputs.GetServiceComponentsResult> Components;
        public readonly Outputs.GetServiceElasticsearchResult Elasticsearch;
        public readonly Outputs.GetServiceElasticsearchUserConfigResult? ElasticsearchUserConfig;
        public readonly Outputs.GetServiceGrafanaResult Grafana;
        public readonly Outputs.GetServiceGrafanaUserConfigResult? GrafanaUserConfig;
        public readonly Outputs.GetServiceInfluxdbResult Influxdb;
        public readonly Outputs.GetServiceInfluxdbUserConfigResult? InfluxdbUserConfig;
        public readonly Outputs.GetServiceKafkaResult Kafka;
        public readonly Outputs.GetServiceKafkaConnectResult KafkaConnect;
        public readonly Outputs.GetServiceKafkaConnectUserConfigResult? KafkaConnectUserConfig;
        public readonly Outputs.GetServiceKafkaUserConfigResult? KafkaUserConfig;
        public readonly string? MaintenanceWindowDow;
        public readonly string? MaintenanceWindowTime;
        public readonly Outputs.GetServiceMysqlResult Mysql;
        public readonly Outputs.GetServiceMysqlUserConfigResult? MysqlUserConfig;
        public readonly Outputs.GetServicePgResult Pg;
        public readonly Outputs.GetServicePgUserConfigResult? PgUserConfig;
        public readonly string? Plan;
        public readonly string Project;
        public readonly string? ProjectVpcId;
        public readonly Outputs.GetServiceRedisResult Redis;
        public readonly Outputs.GetServiceRedisUserConfigResult? RedisUserConfig;
        public readonly string ServiceHost;
        public readonly ImmutableArray<Outputs.GetServiceServiceIntegrationsResult> ServiceIntegrations;
        public readonly string ServiceName;
        public readonly string ServicePassword;
        public readonly int ServicePort;
        public readonly string? ServiceType;
        public readonly string ServiceUri;
        public readonly string ServiceUsername;
        public readonly string State;
        public readonly bool? TerminationProtection;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetServiceResult(
            Outputs.GetServiceCassandraResult cassandra,
            Outputs.GetServiceCassandraUserConfigResult? cassandraUserConfig,
            string? cloudName,
            ImmutableArray<Outputs.GetServiceComponentsResult> components,
            Outputs.GetServiceElasticsearchResult elasticsearch,
            Outputs.GetServiceElasticsearchUserConfigResult? elasticsearchUserConfig,
            Outputs.GetServiceGrafanaResult grafana,
            Outputs.GetServiceGrafanaUserConfigResult? grafanaUserConfig,
            Outputs.GetServiceInfluxdbResult influxdb,
            Outputs.GetServiceInfluxdbUserConfigResult? influxdbUserConfig,
            Outputs.GetServiceKafkaResult kafka,
            Outputs.GetServiceKafkaConnectResult kafkaConnect,
            Outputs.GetServiceKafkaConnectUserConfigResult? kafkaConnectUserConfig,
            Outputs.GetServiceKafkaUserConfigResult? kafkaUserConfig,
            string? maintenanceWindowDow,
            string? maintenanceWindowTime,
            Outputs.GetServiceMysqlResult mysql,
            Outputs.GetServiceMysqlUserConfigResult? mysqlUserConfig,
            Outputs.GetServicePgResult pg,
            Outputs.GetServicePgUserConfigResult? pgUserConfig,
            string? plan,
            string project,
            string? projectVpcId,
            Outputs.GetServiceRedisResult redis,
            Outputs.GetServiceRedisUserConfigResult? redisUserConfig,
            string serviceHost,
            ImmutableArray<Outputs.GetServiceServiceIntegrationsResult> serviceIntegrations,
            string serviceName,
            string servicePassword,
            int servicePort,
            string? serviceType,
            string serviceUri,
            string serviceUsername,
            string state,
            bool? terminationProtection,
            string id)
        {
            Cassandra = cassandra;
            CassandraUserConfig = cassandraUserConfig;
            CloudName = cloudName;
            Components = components;
            Elasticsearch = elasticsearch;
            ElasticsearchUserConfig = elasticsearchUserConfig;
            Grafana = grafana;
            GrafanaUserConfig = grafanaUserConfig;
            Influxdb = influxdb;
            InfluxdbUserConfig = influxdbUserConfig;
            Kafka = kafka;
            KafkaConnect = kafkaConnect;
            KafkaConnectUserConfig = kafkaConnectUserConfig;
            KafkaUserConfig = kafkaUserConfig;
            MaintenanceWindowDow = maintenanceWindowDow;
            MaintenanceWindowTime = maintenanceWindowTime;
            Mysql = mysql;
            MysqlUserConfig = mysqlUserConfig;
            Pg = pg;
            PgUserConfig = pgUserConfig;
            Plan = plan;
            Project = project;
            ProjectVpcId = projectVpcId;
            Redis = redis;
            RedisUserConfig = redisUserConfig;
            ServiceHost = serviceHost;
            ServiceIntegrations = serviceIntegrations;
            ServiceName = serviceName;
            ServicePassword = servicePassword;
            ServicePort = servicePort;
            ServiceType = serviceType;
            ServiceUri = serviceUri;
            ServiceUsername = serviceUsername;
            State = state;
            TerminationProtection = terminationProtection;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetServiceCassandraArgs : Pulumi.ResourceArgs
    {
        public GetServiceCassandraArgs()
        {
        }
    }

    public sealed class GetServiceCassandraUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("migrateSstableloader")]
        public Input<string>? MigrateSstableloader { get; set; }

        [Input("privateAccess")]
        public Input<GetServiceCassandraUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<GetServiceCassandraUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public GetServiceCassandraUserConfigArgs()
        {
        }
    }

    public sealed class GetServiceCassandraUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServiceCassandraUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class GetServiceCassandraUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServiceCassandraUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class GetServiceComponentsArgs : Pulumi.ResourceArgs
    {
        [Input("component")]
        public Input<string>? Component { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("kafkaAuthenticationMethod")]
        public Input<string>? KafkaAuthenticationMethod { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("route")]
        public Input<string>? Route { get; set; }

        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        [Input("usage")]
        public Input<string>? Usage { get; set; }

        public GetServiceComponentsArgs()
        {
        }
    }

    public sealed class GetServiceElasticsearchArgs : Pulumi.ResourceArgs
    {
        [Input("kibanaUri")]
        public Input<string>? KibanaUri { get; set; }

        public GetServiceElasticsearchArgs()
        {
        }
    }

    public sealed class GetServiceElasticsearchUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("disableReplicationFactorAdjustment")]
        public Input<string>? DisableReplicationFactorAdjustment { get; set; }

        [Input("elasticsearch")]
        public Input<GetServiceElasticsearchUserConfigElasticsearchArgs>? Elasticsearch { get; set; }

        [Input("elasticsearchVersion")]
        public Input<string>? ElasticsearchVersion { get; set; }

        [Input("indexPatterns")]
        private InputList<GetServiceElasticsearchUserConfigIndexPatternsArgs>? _indexPatterns;
        public InputList<GetServiceElasticsearchUserConfigIndexPatternsArgs> IndexPatterns
        {
            get => _indexPatterns ?? (_indexPatterns = new InputList<GetServiceElasticsearchUserConfigIndexPatternsArgs>());
            set => _indexPatterns = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("kibana")]
        public Input<GetServiceElasticsearchUserConfigKibanaArgs>? Kibana { get; set; }

        [Input("maxIndexCount")]
        public Input<int>? MaxIndexCount { get; set; }

        [Input("privateAccess")]
        public Input<GetServiceElasticsearchUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<GetServiceElasticsearchUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("recoveryBasebackupName")]
        public Input<string>? RecoveryBasebackupName { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public GetServiceElasticsearchUserConfigArgs()
        {
        }
    }

    public sealed class GetServiceElasticsearchUserConfigElasticsearchArgs : Pulumi.ResourceArgs
    {
        [Input("actionAutoCreateIndexEnabled")]
        public Input<string>? ActionAutoCreateIndexEnabled { get; set; }

        [Input("actionDestructiveRequiresName")]
        public Input<string>? ActionDestructiveRequiresName { get; set; }

        [Input("httpMaxContentLength")]
        public Input<int>? HttpMaxContentLength { get; set; }

        [Input("indicesFielddataCacheSize")]
        public Input<int>? IndicesFielddataCacheSize { get; set; }

        [Input("indicesMemoryIndexBufferSize")]
        public Input<int>? IndicesMemoryIndexBufferSize { get; set; }

        [Input("indicesQueriesCacheSize")]
        public Input<int>? IndicesQueriesCacheSize { get; set; }

        [Input("indicesQueryBoolMaxClauseCount")]
        public Input<int>? IndicesQueryBoolMaxClauseCount { get; set; }

        [Input("reindexRemoteWhitelists")]
        private InputList<string>? _reindexRemoteWhitelists;
        public InputList<string> ReindexRemoteWhitelists
        {
            get => _reindexRemoteWhitelists ?? (_reindexRemoteWhitelists = new InputList<string>());
            set => _reindexRemoteWhitelists = value;
        }

        [Input("threadPoolAnalyzeQueueSize")]
        public Input<int>? ThreadPoolAnalyzeQueueSize { get; set; }

        [Input("threadPoolAnalyzeSize")]
        public Input<int>? ThreadPoolAnalyzeSize { get; set; }

        [Input("threadPoolForceMergeSize")]
        public Input<int>? ThreadPoolForceMergeSize { get; set; }

        [Input("threadPoolGetQueueSize")]
        public Input<int>? ThreadPoolGetQueueSize { get; set; }

        [Input("threadPoolGetSize")]
        public Input<int>? ThreadPoolGetSize { get; set; }

        [Input("threadPoolIndexQueueSize")]
        public Input<int>? ThreadPoolIndexQueueSize { get; set; }

        [Input("threadPoolIndexSize")]
        public Input<int>? ThreadPoolIndexSize { get; set; }

        [Input("threadPoolSearchQueueSize")]
        public Input<int>? ThreadPoolSearchQueueSize { get; set; }

        [Input("threadPoolSearchSize")]
        public Input<int>? ThreadPoolSearchSize { get; set; }

        [Input("threadPoolSearchThrottledQueueSize")]
        public Input<int>? ThreadPoolSearchThrottledQueueSize { get; set; }

        [Input("threadPoolSearchThrottledSize")]
        public Input<int>? ThreadPoolSearchThrottledSize { get; set; }

        [Input("threadPoolWriteQueueSize")]
        public Input<int>? ThreadPoolWriteQueueSize { get; set; }

        [Input("threadPoolWriteSize")]
        public Input<int>? ThreadPoolWriteSize { get; set; }

        public GetServiceElasticsearchUserConfigElasticsearchArgs()
        {
        }
    }

    public sealed class GetServiceElasticsearchUserConfigIndexPatternsArgs : Pulumi.ResourceArgs
    {
        [Input("maxIndexCount")]
        public Input<int>? MaxIndexCount { get; set; }

        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        public GetServiceElasticsearchUserConfigIndexPatternsArgs()
        {
        }
    }

    public sealed class GetServiceElasticsearchUserConfigKibanaArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearchRequestTimeout")]
        public Input<int>? ElasticsearchRequestTimeout { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("maxOldSpaceSize")]
        public Input<int>? MaxOldSpaceSize { get; set; }

        public GetServiceElasticsearchUserConfigKibanaArgs()
        {
        }
    }

    public sealed class GetServiceElasticsearchUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearch")]
        public Input<string>? Elasticsearch { get; set; }

        [Input("kibana")]
        public Input<string>? Kibana { get; set; }

        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServiceElasticsearchUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class GetServiceElasticsearchUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearch")]
        public Input<string>? Elasticsearch { get; set; }

        [Input("kibana")]
        public Input<string>? Kibana { get; set; }

        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServiceElasticsearchUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaArgs : Pulumi.ResourceArgs
    {
        public GetServiceGrafanaArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("alertingEnabled")]
        public Input<string>? AlertingEnabled { get; set; }

        [Input("alertingErrorOrTimeout")]
        public Input<string>? AlertingErrorOrTimeout { get; set; }

        [Input("alertingNodataOrNullvalues")]
        public Input<string>? AlertingNodataOrNullvalues { get; set; }

        [Input("allowEmbedding")]
        public Input<string>? AllowEmbedding { get; set; }

        [Input("authGenericOauth")]
        public Input<GetServiceGrafanaUserConfigAuthGenericOauthArgs>? AuthGenericOauth { get; set; }

        [Input("authGithub")]
        public Input<GetServiceGrafanaUserConfigAuthGithubArgs>? AuthGithub { get; set; }

        [Input("authGitlab")]
        public Input<GetServiceGrafanaUserConfigAuthGitlabArgs>? AuthGitlab { get; set; }

        [Input("authGoogle")]
        public Input<GetServiceGrafanaUserConfigAuthGoogleArgs>? AuthGoogle { get; set; }

        [Input("cookieSamesite")]
        public Input<string>? CookieSamesite { get; set; }

        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("dashboardsVersionsToKeep")]
        public Input<int>? DashboardsVersionsToKeep { get; set; }

        [Input("dataproxySendUserHeader")]
        public Input<string>? DataproxySendUserHeader { get; set; }

        [Input("dataproxyTimeout")]
        public Input<int>? DataproxyTimeout { get; set; }

        [Input("disableGravatar")]
        public Input<string>? DisableGravatar { get; set; }

        [Input("editorsCanAdmin")]
        public Input<string>? EditorsCanAdmin { get; set; }

        [Input("externalImageStorage")]
        public Input<GetServiceGrafanaUserConfigExternalImageStorageArgs>? ExternalImageStorage { get; set; }

        [Input("googleAnalyticsUaId")]
        public Input<string>? GoogleAnalyticsUaId { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("metricsEnabled")]
        public Input<string>? MetricsEnabled { get; set; }

        [Input("privateAccess")]
        public Input<GetServiceGrafanaUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<GetServiceGrafanaUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("smtpServer")]
        public Input<GetServiceGrafanaUserConfigSmtpServerArgs>? SmtpServer { get; set; }

        [Input("userAutoAssignOrg")]
        public Input<string>? UserAutoAssignOrg { get; set; }

        [Input("userAutoAssignOrgRole")]
        public Input<string>? UserAutoAssignOrgRole { get; set; }

        [Input("viewersCanEdit")]
        public Input<string>? ViewersCanEdit { get; set; }

        public GetServiceGrafanaUserConfigArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaUserConfigAuthGenericOauthArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<string>? AllowSignUp { get; set; }

        [Input("allowedDomains")]
        private InputList<string>? _allowedDomains;
        public InputList<string> AllowedDomains
        {
            get => _allowedDomains ?? (_allowedDomains = new InputList<string>());
            set => _allowedDomains = value;
        }

        [Input("allowedOrganizations")]
        private InputList<string>? _allowedOrganizations;
        public InputList<string> AllowedOrganizations
        {
            get => _allowedOrganizations ?? (_allowedOrganizations = new InputList<string>());
            set => _allowedOrganizations = value;
        }

        [Input("apiUrl")]
        public Input<string>? ApiUrl { get; set; }

        [Input("authUrl")]
        public Input<string>? AuthUrl { get; set; }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("tokenUrl")]
        public Input<string>? TokenUrl { get; set; }

        public GetServiceGrafanaUserConfigAuthGenericOauthArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaUserConfigAuthGithubArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<string>? AllowSignUp { get; set; }

        [Input("allowedOrganizations")]
        private InputList<string>? _allowedOrganizations;
        public InputList<string> AllowedOrganizations
        {
            get => _allowedOrganizations ?? (_allowedOrganizations = new InputList<string>());
            set => _allowedOrganizations = value;
        }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        [Input("teamIds")]
        private InputList<int>? _teamIds;
        public InputList<int> TeamIds
        {
            get => _teamIds ?? (_teamIds = new InputList<int>());
            set => _teamIds = value;
        }

        public GetServiceGrafanaUserConfigAuthGithubArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaUserConfigAuthGitlabArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<string>? AllowSignUp { get; set; }

        [Input("allowedGroups")]
        private InputList<string>? _allowedGroups;
        public InputList<string> AllowedGroups
        {
            get => _allowedGroups ?? (_allowedGroups = new InputList<string>());
            set => _allowedGroups = value;
        }

        [Input("apiUrl")]
        public Input<string>? ApiUrl { get; set; }

        [Input("authUrl")]
        public Input<string>? AuthUrl { get; set; }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        [Input("tokenUrl")]
        public Input<string>? TokenUrl { get; set; }

        public GetServiceGrafanaUserConfigAuthGitlabArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaUserConfigAuthGoogleArgs : Pulumi.ResourceArgs
    {
        [Input("allowSignUp")]
        public Input<string>? AllowSignUp { get; set; }

        [Input("allowedDomains")]
        private InputList<string>? _allowedDomains;
        public InputList<string> AllowedDomains
        {
            get => _allowedDomains ?? (_allowedDomains = new InputList<string>());
            set => _allowedDomains = value;
        }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        public GetServiceGrafanaUserConfigAuthGoogleArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaUserConfigExternalImageStorageArgs : Pulumi.ResourceArgs
    {
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        [Input("bucketUrl")]
        public Input<string>? BucketUrl { get; set; }

        [Input("provider")]
        public Input<string>? Provider { get; set; }

        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        public GetServiceGrafanaUserConfigExternalImageStorageArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("grafana")]
        public Input<string>? Grafana { get; set; }

        public GetServiceGrafanaUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("grafana")]
        public Input<string>? Grafana { get; set; }

        public GetServiceGrafanaUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class GetServiceGrafanaUserConfigSmtpServerArgs : Pulumi.ResourceArgs
    {
        [Input("fromAddress")]
        public Input<string>? FromAddress { get; set; }

        [Input("fromName")]
        public Input<string>? FromName { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("skipVerify")]
        public Input<string>? SkipVerify { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public GetServiceGrafanaUserConfigSmtpServerArgs()
        {
        }
    }

    public sealed class GetServiceInfluxdbArgs : Pulumi.ResourceArgs
    {
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        public GetServiceInfluxdbArgs()
        {
        }
    }

    public sealed class GetServiceInfluxdbUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("privateAccess")]
        public Input<GetServiceInfluxdbUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<GetServiceInfluxdbUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public GetServiceInfluxdbUserConfigArgs()
        {
        }
    }

    public sealed class GetServiceInfluxdbUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("influxdb")]
        public Input<string>? Influxdb { get; set; }

        public GetServiceInfluxdbUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class GetServiceInfluxdbUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("influxdb")]
        public Input<string>? Influxdb { get; set; }

        public GetServiceInfluxdbUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class GetServiceKafkaArgs : Pulumi.ResourceArgs
    {
        [Input("accessCert")]
        public Input<string>? AccessCert { get; set; }

        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        [Input("connectUri")]
        public Input<string>? ConnectUri { get; set; }

        [Input("restUri")]
        public Input<string>? RestUri { get; set; }

        [Input("schemaRegistryUri")]
        public Input<string>? SchemaRegistryUri { get; set; }

        public GetServiceKafkaArgs()
        {
        }
    }

    public sealed class GetServiceKafkaConnectArgs : Pulumi.ResourceArgs
    {
        public GetServiceKafkaConnectArgs()
        {
        }
    }

    public sealed class GetServiceKafkaConnectUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("kafkaConnect")]
        public Input<GetServiceKafkaConnectUserConfigKafkaConnectArgs>? KafkaConnect { get; set; }

        [Input("privateAccess")]
        public Input<GetServiceKafkaConnectUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<GetServiceKafkaConnectUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        public GetServiceKafkaConnectUserConfigArgs()
        {
        }
    }

    public sealed class GetServiceKafkaConnectUserConfigKafkaConnectArgs : Pulumi.ResourceArgs
    {
        [Input("consumerIsolationLevel")]
        public Input<string>? ConsumerIsolationLevel { get; set; }

        [Input("consumerMaxPollRecords")]
        public Input<int>? ConsumerMaxPollRecords { get; set; }

        [Input("offsetFlushIntervalMs")]
        public Input<int>? OffsetFlushIntervalMs { get; set; }

        public GetServiceKafkaConnectUserConfigKafkaConnectArgs()
        {
        }
    }

    public sealed class GetServiceKafkaConnectUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("kafkaConnect")]
        public Input<string>? KafkaConnect { get; set; }

        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServiceKafkaConnectUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class GetServiceKafkaConnectUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("kafkaConnect")]
        public Input<string>? KafkaConnect { get; set; }

        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServiceKafkaConnectUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class GetServiceKafkaUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("kafka")]
        public Input<GetServiceKafkaUserConfigKafkaArgs>? Kafka { get; set; }

        [Input("kafkaAuthenticationMethods")]
        public Input<GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs>? KafkaAuthenticationMethods { get; set; }

        [Input("kafkaConnect")]
        public Input<bool>? KafkaConnect { get; set; }

        [Input("kafkaConnectConfig")]
        public Input<GetServiceKafkaUserConfigKafkaConnectConfigArgs>? KafkaConnectConfig { get; set; }

        [Input("kafkaRest")]
        public Input<bool>? KafkaRest { get; set; }

        [Input("kafkaRestConfig")]
        public Input<GetServiceKafkaUserConfigKafkaRestConfigArgs>? KafkaRestConfig { get; set; }

        [Input("kafkaVersion")]
        public Input<string>? KafkaVersion { get; set; }

        [Input("privateAccess")]
        public Input<GetServiceKafkaUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<GetServiceKafkaUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("schemaRegistry")]
        public Input<bool>? SchemaRegistry { get; set; }

        public GetServiceKafkaUserConfigArgs()
        {
        }
    }

    public sealed class GetServiceKafkaUserConfigKafkaArgs : Pulumi.ResourceArgs
    {
        [Input("autoCreateTopicsEnable")]
        public Input<string>? AutoCreateTopicsEnable { get; set; }

        [Input("compressionType")]
        public Input<string>? CompressionType { get; set; }

        [Input("connectionsMaxIdleMs")]
        public Input<int>? ConnectionsMaxIdleMs { get; set; }

        [Input("defaultReplicationFactor")]
        public Input<int>? DefaultReplicationFactor { get; set; }

        [Input("groupMaxSessionTimeoutMs")]
        public Input<int>? GroupMaxSessionTimeoutMs { get; set; }

        [Input("groupMinSessionTimeoutMs")]
        public Input<int>? GroupMinSessionTimeoutMs { get; set; }

        [Input("logCleanerMaxCompactionLagMs")]
        public Input<int>? LogCleanerMaxCompactionLagMs { get; set; }

        [Input("logCleanerMinCleanableRatio")]
        public Input<double>? LogCleanerMinCleanableRatio { get; set; }

        [Input("logCleanerMinCompactionLagMs")]
        public Input<int>? LogCleanerMinCompactionLagMs { get; set; }

        [Input("logCleanupPolicy")]
        public Input<string>? LogCleanupPolicy { get; set; }

        [Input("logMessageTimestampDifferenceMaxMs")]
        public Input<int>? LogMessageTimestampDifferenceMaxMs { get; set; }

        [Input("logMessageTimestampType")]
        public Input<string>? LogMessageTimestampType { get; set; }

        [Input("logRetentionBytes")]
        public Input<int>? LogRetentionBytes { get; set; }

        [Input("logRetentionHours")]
        public Input<int>? LogRetentionHours { get; set; }

        [Input("logSegmentBytes")]
        public Input<int>? LogSegmentBytes { get; set; }

        [Input("maxConnectionsPerIp")]
        public Input<int>? MaxConnectionsPerIp { get; set; }

        [Input("messageMaxBytes")]
        public Input<int>? MessageMaxBytes { get; set; }

        [Input("numPartitions")]
        public Input<int>? NumPartitions { get; set; }

        [Input("offsetsRetentionMinutes")]
        public Input<int>? OffsetsRetentionMinutes { get; set; }

        [Input("producerPurgatoryPurgeIntervalRequests")]
        public Input<int>? ProducerPurgatoryPurgeIntervalRequests { get; set; }

        [Input("replicaFetchMaxBytes")]
        public Input<int>? ReplicaFetchMaxBytes { get; set; }

        [Input("replicaFetchResponseMaxBytes")]
        public Input<int>? ReplicaFetchResponseMaxBytes { get; set; }

        [Input("socketRequestMaxBytes")]
        public Input<int>? SocketRequestMaxBytes { get; set; }

        public GetServiceKafkaUserConfigKafkaArgs()
        {
        }
    }

    public sealed class GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs : Pulumi.ResourceArgs
    {
        [Input("certificate")]
        public Input<bool>? Certificate { get; set; }

        [Input("sasl")]
        public Input<bool>? Sasl { get; set; }

        public GetServiceKafkaUserConfigKafkaAuthenticationMethodsArgs()
        {
        }
    }

    public sealed class GetServiceKafkaUserConfigKafkaConnectConfigArgs : Pulumi.ResourceArgs
    {
        [Input("consumerIsolationLevel")]
        public Input<string>? ConsumerIsolationLevel { get; set; }

        [Input("consumerMaxPollRecords")]
        public Input<int>? ConsumerMaxPollRecords { get; set; }

        [Input("offsetFlushIntervalMs")]
        public Input<int>? OffsetFlushIntervalMs { get; set; }

        public GetServiceKafkaUserConfigKafkaConnectConfigArgs()
        {
        }
    }

    public sealed class GetServiceKafkaUserConfigKafkaRestConfigArgs : Pulumi.ResourceArgs
    {
        [Input("consumerEnableAutoCommit")]
        public Input<bool>? ConsumerEnableAutoCommit { get; set; }

        [Input("consumerRequestMaxBytes")]
        public Input<int>? ConsumerRequestMaxBytes { get; set; }

        [Input("consumerRequestTimeoutMs")]
        public Input<int>? ConsumerRequestTimeoutMs { get; set; }

        [Input("producerAcks")]
        public Input<string>? ProducerAcks { get; set; }

        [Input("producerLingerMs")]
        public Input<int>? ProducerLingerMs { get; set; }

        [Input("simpleconsumerPoolSizeMax")]
        public Input<int>? SimpleconsumerPoolSizeMax { get; set; }

        public GetServiceKafkaUserConfigKafkaRestConfigArgs()
        {
        }
    }

    public sealed class GetServiceKafkaUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServiceKafkaUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class GetServiceKafkaUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("kafka")]
        public Input<string>? Kafka { get; set; }

        [Input("kafkaConnect")]
        public Input<string>? KafkaConnect { get; set; }

        [Input("kafkaRest")]
        public Input<string>? KafkaRest { get; set; }

        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        [Input("schemaRegistry")]
        public Input<string>? SchemaRegistry { get; set; }

        public GetServiceKafkaUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class GetServiceMysqlArgs : Pulumi.ResourceArgs
    {
        public GetServiceMysqlArgs()
        {
        }
    }

    public sealed class GetServiceMysqlUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("mysql")]
        public Input<GetServiceMysqlUserConfigMysqlArgs>? Mysql { get; set; }

        [Input("mysqlVersion")]
        public Input<string>? MysqlVersion { get; set; }

        [Input("privateAccess")]
        public Input<GetServiceMysqlUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<GetServiceMysqlUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("recoveryTargetTime")]
        public Input<string>? RecoveryTargetTime { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public GetServiceMysqlUserConfigArgs()
        {
        }
    }

    public sealed class GetServiceMysqlUserConfigMysqlArgs : Pulumi.ResourceArgs
    {
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        [Input("defaultTimeZone")]
        public Input<string>? DefaultTimeZone { get; set; }

        [Input("groupConcatMaxLen")]
        public Input<int>? GroupConcatMaxLen { get; set; }

        [Input("informationSchemaStatsExpiry")]
        public Input<int>? InformationSchemaStatsExpiry { get; set; }

        [Input("innodbFtMinTokenSize")]
        public Input<int>? InnodbFtMinTokenSize { get; set; }

        [Input("innodbFtServerStopwordTable")]
        public Input<string>? InnodbFtServerStopwordTable { get; set; }

        [Input("innodbLockWaitTimeout")]
        public Input<int>? InnodbLockWaitTimeout { get; set; }

        [Input("innodbOnlineAlterLogMaxSize")]
        public Input<int>? InnodbOnlineAlterLogMaxSize { get; set; }

        [Input("innodbRollbackOnTimeout")]
        public Input<string>? InnodbRollbackOnTimeout { get; set; }

        [Input("maxAllowedPacket")]
        public Input<int>? MaxAllowedPacket { get; set; }

        [Input("netReadTimeout")]
        public Input<int>? NetReadTimeout { get; set; }

        [Input("netWriteTimeout")]
        public Input<int>? NetWriteTimeout { get; set; }

        [Input("sqlMode")]
        public Input<string>? SqlMode { get; set; }

        [Input("sqlRequirePrimaryKey")]
        public Input<string>? SqlRequirePrimaryKey { get; set; }

        [Input("waitTimeout")]
        public Input<int>? WaitTimeout { get; set; }

        public GetServiceMysqlUserConfigMysqlArgs()
        {
        }
    }

    public sealed class GetServiceMysqlUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("mysql")]
        public Input<string>? Mysql { get; set; }

        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServiceMysqlUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class GetServiceMysqlUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("mysql")]
        public Input<string>? Mysql { get; set; }

        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServiceMysqlUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class GetServicePgArgs : Pulumi.ResourceArgs
    {
        [Input("dbname")]
        public Input<string>? Dbname { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("replicaUri")]
        public Input<string>? ReplicaUri { get; set; }

        [Input("sslmode")]
        public Input<string>? Sslmode { get; set; }

        [Input("uri")]
        public Input<string>? Uri { get; set; }

        [Input("user")]
        public Input<string>? User { get; set; }

        public GetServicePgArgs()
        {
        }
    }

    public sealed class GetServicePgUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("pg")]
        public Input<GetServicePgUserConfigPgArgs>? Pg { get; set; }

        [Input("pgReadReplica")]
        public Input<string>? PgReadReplica { get; set; }

        [Input("pgServiceToForkFrom")]
        public Input<string>? PgServiceToForkFrom { get; set; }

        [Input("pgVersion")]
        public Input<string>? PgVersion { get; set; }

        [Input("pgbouncer")]
        public Input<GetServicePgUserConfigPgbouncerArgs>? Pgbouncer { get; set; }

        [Input("pglookout")]
        public Input<GetServicePgUserConfigPglookoutArgs>? Pglookout { get; set; }

        [Input("privateAccess")]
        public Input<GetServicePgUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<GetServicePgUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("recoveryTargetTime")]
        public Input<string>? RecoveryTargetTime { get; set; }

        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        [Input("timescaledb")]
        public Input<GetServicePgUserConfigTimescaledbArgs>? Timescaledb { get; set; }

        [Input("variant")]
        public Input<string>? Variant { get; set; }

        public GetServicePgUserConfigArgs()
        {
        }
    }

    public sealed class GetServicePgUserConfigPgArgs : Pulumi.ResourceArgs
    {
        [Input("autovacuumAnalyzeScaleFactor")]
        public Input<double>? AutovacuumAnalyzeScaleFactor { get; set; }

        [Input("autovacuumAnalyzeThreshold")]
        public Input<int>? AutovacuumAnalyzeThreshold { get; set; }

        [Input("autovacuumMaxWorkers")]
        public Input<int>? AutovacuumMaxWorkers { get; set; }

        [Input("autovacuumNaptime")]
        public Input<int>? AutovacuumNaptime { get; set; }

        [Input("autovacuumVacuumCostDelay")]
        public Input<int>? AutovacuumVacuumCostDelay { get; set; }

        [Input("autovacuumVacuumCostLimit")]
        public Input<int>? AutovacuumVacuumCostLimit { get; set; }

        [Input("autovacuumVacuumScaleFactor")]
        public Input<double>? AutovacuumVacuumScaleFactor { get; set; }

        [Input("autovacuumVacuumThreshold")]
        public Input<int>? AutovacuumVacuumThreshold { get; set; }

        [Input("deadlockTimeout")]
        public Input<int>? DeadlockTimeout { get; set; }

        [Input("idleInTransactionSessionTimeout")]
        public Input<int>? IdleInTransactionSessionTimeout { get; set; }

        [Input("jit")]
        public Input<string>? Jit { get; set; }

        [Input("logAutovacuumMinDuration")]
        public Input<int>? LogAutovacuumMinDuration { get; set; }

        [Input("logErrorVerbosity")]
        public Input<string>? LogErrorVerbosity { get; set; }

        [Input("logMinDurationStatement")]
        public Input<int>? LogMinDurationStatement { get; set; }

        [Input("maxLocksPerTransaction")]
        public Input<int>? MaxLocksPerTransaction { get; set; }

        [Input("maxParallelWorkers")]
        public Input<int>? MaxParallelWorkers { get; set; }

        [Input("maxParallelWorkersPerGather")]
        public Input<int>? MaxParallelWorkersPerGather { get; set; }

        [Input("maxPredLocksPerTransaction")]
        public Input<int>? MaxPredLocksPerTransaction { get; set; }

        [Input("maxPreparedTransactions")]
        public Input<int>? MaxPreparedTransactions { get; set; }

        [Input("maxStackDepth")]
        public Input<int>? MaxStackDepth { get; set; }

        [Input("maxStandbyArchiveDelay")]
        public Input<int>? MaxStandbyArchiveDelay { get; set; }

        [Input("maxStandbyStreamingDelay")]
        public Input<int>? MaxStandbyStreamingDelay { get; set; }

        [Input("maxWorkerProcesses")]
        public Input<int>? MaxWorkerProcesses { get; set; }

        [Input("pgStatStatementsTrack")]
        public Input<string>? PgStatStatementsTrack { get; set; }

        [Input("tempFileLimit")]
        public Input<int>? TempFileLimit { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("trackActivityQuerySize")]
        public Input<int>? TrackActivityQuerySize { get; set; }

        [Input("trackFunctions")]
        public Input<string>? TrackFunctions { get; set; }

        [Input("walWriterDelay")]
        public Input<int>? WalWriterDelay { get; set; }

        public GetServicePgUserConfigPgArgs()
        {
        }
    }

    public sealed class GetServicePgUserConfigPgbouncerArgs : Pulumi.ResourceArgs
    {
        [Input("serverResetQueryAlways")]
        public Input<bool>? ServerResetQueryAlways { get; set; }

        public GetServicePgUserConfigPgbouncerArgs()
        {
        }
    }

    public sealed class GetServicePgUserConfigPglookoutArgs : Pulumi.ResourceArgs
    {
        [Input("maxFailoverReplicationTimeLag")]
        public Input<int>? MaxFailoverReplicationTimeLag { get; set; }

        public GetServicePgUserConfigPglookoutArgs()
        {
        }
    }

    public sealed class GetServicePgUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("pg")]
        public Input<string>? Pg { get; set; }

        [Input("pgbouncer")]
        public Input<string>? Pgbouncer { get; set; }

        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServicePgUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class GetServicePgUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("pg")]
        public Input<string>? Pg { get; set; }

        [Input("pgbouncer")]
        public Input<string>? Pgbouncer { get; set; }

        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        public GetServicePgUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class GetServicePgUserConfigTimescaledbArgs : Pulumi.ResourceArgs
    {
        [Input("maxBackgroundWorkers")]
        public Input<int>? MaxBackgroundWorkers { get; set; }

        public GetServicePgUserConfigTimescaledbArgs()
        {
        }
    }

    public sealed class GetServiceRedisArgs : Pulumi.ResourceArgs
    {
        public GetServiceRedisArgs()
        {
        }
    }

    public sealed class GetServiceRedisUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("ipFilters")]
        private InputList<string>? _ipFilters;
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        [Input("migration")]
        public Input<GetServiceRedisUserConfigMigrationArgs>? Migration { get; set; }

        [Input("privateAccess")]
        public Input<GetServiceRedisUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        [Input("publicAccess")]
        public Input<GetServiceRedisUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        [Input("redisLfuDecayTime")]
        public Input<int>? RedisLfuDecayTime { get; set; }

        [Input("redisLfuLogFactor")]
        public Input<int>? RedisLfuLogFactor { get; set; }

        [Input("redisMaxmemoryPolicy")]
        public Input<string>? RedisMaxmemoryPolicy { get; set; }

        [Input("redisNotifyKeyspaceEvents")]
        public Input<string>? RedisNotifyKeyspaceEvents { get; set; }

        [Input("redisSsl")]
        public Input<bool>? RedisSsl { get; set; }

        [Input("redisTimeout")]
        public Input<int>? RedisTimeout { get; set; }

        public GetServiceRedisUserConfigArgs()
        {
        }
    }

    public sealed class GetServiceRedisUserConfigMigrationArgs : Pulumi.ResourceArgs
    {
        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public GetServiceRedisUserConfigMigrationArgs()
        {
        }
    }

    public sealed class GetServiceRedisUserConfigPrivateAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        [Input("redis")]
        public Input<string>? Redis { get; set; }

        public GetServiceRedisUserConfigPrivateAccessArgs()
        {
        }
    }

    public sealed class GetServiceRedisUserConfigPublicAccessArgs : Pulumi.ResourceArgs
    {
        [Input("prometheus")]
        public Input<string>? Prometheus { get; set; }

        [Input("redis")]
        public Input<string>? Redis { get; set; }

        public GetServiceRedisUserConfigPublicAccessArgs()
        {
        }
    }

    public sealed class GetServiceServiceIntegrationsArgs : Pulumi.ResourceArgs
    {
        [Input("integrationType", required: true)]
        public Input<string> IntegrationType { get; set; } = null!;

        [Input("sourceServiceName", required: true)]
        public Input<string> SourceServiceName { get; set; } = null!;

        public GetServiceServiceIntegrationsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetServiceCassandraResult
    {
        [OutputConstructor]
        private GetServiceCassandraResult()
        {
        }
    }

    [OutputType]
    public sealed class GetServiceCassandraUserConfigPrivateAccessResult
    {
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServiceCassandraUserConfigPrivateAccessResult(string? prometheus)
        {
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServiceCassandraUserConfigPublicAccessResult
    {
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServiceCassandraUserConfigPublicAccessResult(string? prometheus)
        {
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServiceCassandraUserConfigResult
    {
        public readonly ImmutableArray<string> IpFilters;
        public readonly string? MigrateSstableloader;
        public readonly GetServiceCassandraUserConfigPrivateAccessResult? PrivateAccess;
        public readonly GetServiceCassandraUserConfigPublicAccessResult? PublicAccess;
        public readonly string? ServiceToForkFrom;

        [OutputConstructor]
        private GetServiceCassandraUserConfigResult(
            ImmutableArray<string> ipFilters,
            string? migrateSstableloader,
            GetServiceCassandraUserConfigPrivateAccessResult? privateAccess,
            GetServiceCassandraUserConfigPublicAccessResult? publicAccess,
            string? serviceToForkFrom)
        {
            IpFilters = ipFilters;
            MigrateSstableloader = migrateSstableloader;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            ServiceToForkFrom = serviceToForkFrom;
        }
    }

    [OutputType]
    public sealed class GetServiceComponentsResult
    {
        public readonly string Component;
        public readonly string Host;
        public readonly string KafkaAuthenticationMethod;
        public readonly int Port;
        public readonly string Route;
        public readonly bool Ssl;
        public readonly string Usage;

        [OutputConstructor]
        private GetServiceComponentsResult(
            string component,
            string host,
            string kafkaAuthenticationMethod,
            int port,
            string route,
            bool ssl,
            string usage)
        {
            Component = component;
            Host = host;
            KafkaAuthenticationMethod = kafkaAuthenticationMethod;
            Port = port;
            Route = route;
            Ssl = ssl;
            Usage = usage;
        }
    }

    [OutputType]
    public sealed class GetServiceElasticsearchResult
    {
        public readonly string KibanaUri;

        [OutputConstructor]
        private GetServiceElasticsearchResult(string kibanaUri)
        {
            KibanaUri = kibanaUri;
        }
    }

    [OutputType]
    public sealed class GetServiceElasticsearchUserConfigElasticsearchResult
    {
        public readonly string? ActionAutoCreateIndexEnabled;
        public readonly string? ActionDestructiveRequiresName;
        public readonly int? HttpMaxContentLength;
        public readonly int? IndicesFielddataCacheSize;
        public readonly int? IndicesMemoryIndexBufferSize;
        public readonly int? IndicesQueriesCacheSize;
        public readonly int? IndicesQueryBoolMaxClauseCount;
        public readonly ImmutableArray<string> ReindexRemoteWhitelists;
        public readonly int? ThreadPoolAnalyzeQueueSize;
        public readonly int? ThreadPoolAnalyzeSize;
        public readonly int? ThreadPoolForceMergeSize;
        public readonly int? ThreadPoolGetQueueSize;
        public readonly int? ThreadPoolGetSize;
        public readonly int? ThreadPoolIndexQueueSize;
        public readonly int? ThreadPoolIndexSize;
        public readonly int? ThreadPoolSearchQueueSize;
        public readonly int? ThreadPoolSearchSize;
        public readonly int? ThreadPoolSearchThrottledQueueSize;
        public readonly int? ThreadPoolSearchThrottledSize;
        public readonly int? ThreadPoolWriteQueueSize;
        public readonly int? ThreadPoolWriteSize;

        [OutputConstructor]
        private GetServiceElasticsearchUserConfigElasticsearchResult(
            string? actionAutoCreateIndexEnabled,
            string? actionDestructiveRequiresName,
            int? httpMaxContentLength,
            int? indicesFielddataCacheSize,
            int? indicesMemoryIndexBufferSize,
            int? indicesQueriesCacheSize,
            int? indicesQueryBoolMaxClauseCount,
            ImmutableArray<string> reindexRemoteWhitelists,
            int? threadPoolAnalyzeQueueSize,
            int? threadPoolAnalyzeSize,
            int? threadPoolForceMergeSize,
            int? threadPoolGetQueueSize,
            int? threadPoolGetSize,
            int? threadPoolIndexQueueSize,
            int? threadPoolIndexSize,
            int? threadPoolSearchQueueSize,
            int? threadPoolSearchSize,
            int? threadPoolSearchThrottledQueueSize,
            int? threadPoolSearchThrottledSize,
            int? threadPoolWriteQueueSize,
            int? threadPoolWriteSize)
        {
            ActionAutoCreateIndexEnabled = actionAutoCreateIndexEnabled;
            ActionDestructiveRequiresName = actionDestructiveRequiresName;
            HttpMaxContentLength = httpMaxContentLength;
            IndicesFielddataCacheSize = indicesFielddataCacheSize;
            IndicesMemoryIndexBufferSize = indicesMemoryIndexBufferSize;
            IndicesQueriesCacheSize = indicesQueriesCacheSize;
            IndicesQueryBoolMaxClauseCount = indicesQueryBoolMaxClauseCount;
            ReindexRemoteWhitelists = reindexRemoteWhitelists;
            ThreadPoolAnalyzeQueueSize = threadPoolAnalyzeQueueSize;
            ThreadPoolAnalyzeSize = threadPoolAnalyzeSize;
            ThreadPoolForceMergeSize = threadPoolForceMergeSize;
            ThreadPoolGetQueueSize = threadPoolGetQueueSize;
            ThreadPoolGetSize = threadPoolGetSize;
            ThreadPoolIndexQueueSize = threadPoolIndexQueueSize;
            ThreadPoolIndexSize = threadPoolIndexSize;
            ThreadPoolSearchQueueSize = threadPoolSearchQueueSize;
            ThreadPoolSearchSize = threadPoolSearchSize;
            ThreadPoolSearchThrottledQueueSize = threadPoolSearchThrottledQueueSize;
            ThreadPoolSearchThrottledSize = threadPoolSearchThrottledSize;
            ThreadPoolWriteQueueSize = threadPoolWriteQueueSize;
            ThreadPoolWriteSize = threadPoolWriteSize;
        }
    }

    [OutputType]
    public sealed class GetServiceElasticsearchUserConfigIndexPatternsResult
    {
        public readonly int? MaxIndexCount;
        public readonly string? Pattern;

        [OutputConstructor]
        private GetServiceElasticsearchUserConfigIndexPatternsResult(
            int? maxIndexCount,
            string? pattern)
        {
            MaxIndexCount = maxIndexCount;
            Pattern = pattern;
        }
    }

    [OutputType]
    public sealed class GetServiceElasticsearchUserConfigKibanaResult
    {
        public readonly int? ElasticsearchRequestTimeout;
        public readonly bool? Enabled;
        public readonly int? MaxOldSpaceSize;

        [OutputConstructor]
        private GetServiceElasticsearchUserConfigKibanaResult(
            int? elasticsearchRequestTimeout,
            bool? enabled,
            int? maxOldSpaceSize)
        {
            ElasticsearchRequestTimeout = elasticsearchRequestTimeout;
            Enabled = enabled;
            MaxOldSpaceSize = maxOldSpaceSize;
        }
    }

    [OutputType]
    public sealed class GetServiceElasticsearchUserConfigPrivateAccessResult
    {
        public readonly string? Elasticsearch;
        public readonly string? Kibana;
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServiceElasticsearchUserConfigPrivateAccessResult(
            string? elasticsearch,
            string? kibana,
            string? prometheus)
        {
            Elasticsearch = elasticsearch;
            Kibana = kibana;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServiceElasticsearchUserConfigPublicAccessResult
    {
        public readonly string? Elasticsearch;
        public readonly string? Kibana;
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServiceElasticsearchUserConfigPublicAccessResult(
            string? elasticsearch,
            string? kibana,
            string? prometheus)
        {
            Elasticsearch = elasticsearch;
            Kibana = kibana;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServiceElasticsearchUserConfigResult
    {
        public readonly string? CustomDomain;
        public readonly string? DisableReplicationFactorAdjustment;
        public readonly GetServiceElasticsearchUserConfigElasticsearchResult? Elasticsearch;
        public readonly string? ElasticsearchVersion;
        public readonly ImmutableArray<GetServiceElasticsearchUserConfigIndexPatternsResult> IndexPatterns;
        public readonly ImmutableArray<string> IpFilters;
        public readonly GetServiceElasticsearchUserConfigKibanaResult? Kibana;
        public readonly int? MaxIndexCount;
        public readonly GetServiceElasticsearchUserConfigPrivateAccessResult? PrivateAccess;
        public readonly GetServiceElasticsearchUserConfigPublicAccessResult? PublicAccess;
        public readonly string? RecoveryBasebackupName;
        public readonly string? ServiceToForkFrom;

        [OutputConstructor]
        private GetServiceElasticsearchUserConfigResult(
            string? customDomain,
            string? disableReplicationFactorAdjustment,
            GetServiceElasticsearchUserConfigElasticsearchResult? elasticsearch,
            string? elasticsearchVersion,
            ImmutableArray<GetServiceElasticsearchUserConfigIndexPatternsResult> indexPatterns,
            ImmutableArray<string> ipFilters,
            GetServiceElasticsearchUserConfigKibanaResult? kibana,
            int? maxIndexCount,
            GetServiceElasticsearchUserConfigPrivateAccessResult? privateAccess,
            GetServiceElasticsearchUserConfigPublicAccessResult? publicAccess,
            string? recoveryBasebackupName,
            string? serviceToForkFrom)
        {
            CustomDomain = customDomain;
            DisableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            Elasticsearch = elasticsearch;
            ElasticsearchVersion = elasticsearchVersion;
            IndexPatterns = indexPatterns;
            IpFilters = ipFilters;
            Kibana = kibana;
            MaxIndexCount = maxIndexCount;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            ServiceToForkFrom = serviceToForkFrom;
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaResult
    {
        [OutputConstructor]
        private GetServiceGrafanaResult()
        {
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaUserConfigAuthGenericOauthResult
    {
        public readonly string? AllowSignUp;
        public readonly ImmutableArray<string> AllowedDomains;
        public readonly ImmutableArray<string> AllowedOrganizations;
        public readonly string? ApiUrl;
        public readonly string? AuthUrl;
        public readonly string? ClientId;
        public readonly string? ClientSecret;
        public readonly string? Name;
        public readonly ImmutableArray<string> Scopes;
        public readonly string? TokenUrl;

        [OutputConstructor]
        private GetServiceGrafanaUserConfigAuthGenericOauthResult(
            string? allowSignUp,
            ImmutableArray<string> allowedDomains,
            ImmutableArray<string> allowedOrganizations,
            string? apiUrl,
            string? authUrl,
            string? clientId,
            string? clientSecret,
            string? name,
            ImmutableArray<string> scopes,
            string? tokenUrl)
        {
            AllowSignUp = allowSignUp;
            AllowedDomains = allowedDomains;
            AllowedOrganizations = allowedOrganizations;
            ApiUrl = apiUrl;
            AuthUrl = authUrl;
            ClientId = clientId;
            ClientSecret = clientSecret;
            Name = name;
            Scopes = scopes;
            TokenUrl = tokenUrl;
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaUserConfigAuthGithubResult
    {
        public readonly string? AllowSignUp;
        public readonly ImmutableArray<string> AllowedOrganizations;
        public readonly string? ClientId;
        public readonly string? ClientSecret;
        public readonly ImmutableArray<int> TeamIds;

        [OutputConstructor]
        private GetServiceGrafanaUserConfigAuthGithubResult(
            string? allowSignUp,
            ImmutableArray<string> allowedOrganizations,
            string? clientId,
            string? clientSecret,
            ImmutableArray<int> teamIds)
        {
            AllowSignUp = allowSignUp;
            AllowedOrganizations = allowedOrganizations;
            ClientId = clientId;
            ClientSecret = clientSecret;
            TeamIds = teamIds;
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaUserConfigAuthGitlabResult
    {
        public readonly string? AllowSignUp;
        public readonly ImmutableArray<string> AllowedGroups;
        public readonly string? ApiUrl;
        public readonly string? AuthUrl;
        public readonly string? ClientId;
        public readonly string? ClientSecret;
        public readonly string? TokenUrl;

        [OutputConstructor]
        private GetServiceGrafanaUserConfigAuthGitlabResult(
            string? allowSignUp,
            ImmutableArray<string> allowedGroups,
            string? apiUrl,
            string? authUrl,
            string? clientId,
            string? clientSecret,
            string? tokenUrl)
        {
            AllowSignUp = allowSignUp;
            AllowedGroups = allowedGroups;
            ApiUrl = apiUrl;
            AuthUrl = authUrl;
            ClientId = clientId;
            ClientSecret = clientSecret;
            TokenUrl = tokenUrl;
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaUserConfigAuthGoogleResult
    {
        public readonly string? AllowSignUp;
        public readonly ImmutableArray<string> AllowedDomains;
        public readonly string? ClientId;
        public readonly string? ClientSecret;

        [OutputConstructor]
        private GetServiceGrafanaUserConfigAuthGoogleResult(
            string? allowSignUp,
            ImmutableArray<string> allowedDomains,
            string? clientId,
            string? clientSecret)
        {
            AllowSignUp = allowSignUp;
            AllowedDomains = allowedDomains;
            ClientId = clientId;
            ClientSecret = clientSecret;
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaUserConfigExternalImageStorageResult
    {
        public readonly string? AccessKey;
        public readonly string? BucketUrl;
        public readonly string? Provider;
        public readonly string? SecretKey;

        [OutputConstructor]
        private GetServiceGrafanaUserConfigExternalImageStorageResult(
            string? accessKey,
            string? bucketUrl,
            string? provider,
            string? secretKey)
        {
            AccessKey = accessKey;
            BucketUrl = bucketUrl;
            Provider = provider;
            SecretKey = secretKey;
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaUserConfigPrivateAccessResult
    {
        public readonly string? Grafana;

        [OutputConstructor]
        private GetServiceGrafanaUserConfigPrivateAccessResult(string? grafana)
        {
            Grafana = grafana;
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaUserConfigPublicAccessResult
    {
        public readonly string? Grafana;

        [OutputConstructor]
        private GetServiceGrafanaUserConfigPublicAccessResult(string? grafana)
        {
            Grafana = grafana;
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaUserConfigResult
    {
        public readonly string? AlertingEnabled;
        public readonly string? AlertingErrorOrTimeout;
        public readonly string? AlertingNodataOrNullvalues;
        public readonly string? AllowEmbedding;
        public readonly GetServiceGrafanaUserConfigAuthGenericOauthResult? AuthGenericOauth;
        public readonly GetServiceGrafanaUserConfigAuthGithubResult? AuthGithub;
        public readonly GetServiceGrafanaUserConfigAuthGitlabResult? AuthGitlab;
        public readonly GetServiceGrafanaUserConfigAuthGoogleResult? AuthGoogle;
        public readonly string? CookieSamesite;
        public readonly string? CustomDomain;
        public readonly int? DashboardsVersionsToKeep;
        public readonly string? DataproxySendUserHeader;
        public readonly int? DataproxyTimeout;
        public readonly string? DisableGravatar;
        public readonly string? EditorsCanAdmin;
        public readonly GetServiceGrafanaUserConfigExternalImageStorageResult? ExternalImageStorage;
        public readonly string? GoogleAnalyticsUaId;
        public readonly ImmutableArray<string> IpFilters;
        public readonly string? MetricsEnabled;
        public readonly GetServiceGrafanaUserConfigPrivateAccessResult? PrivateAccess;
        public readonly GetServiceGrafanaUserConfigPublicAccessResult? PublicAccess;
        public readonly GetServiceGrafanaUserConfigSmtpServerResult? SmtpServer;
        public readonly string? UserAutoAssignOrg;
        public readonly string? UserAutoAssignOrgRole;
        public readonly string? ViewersCanEdit;

        [OutputConstructor]
        private GetServiceGrafanaUserConfigResult(
            string? alertingEnabled,
            string? alertingErrorOrTimeout,
            string? alertingNodataOrNullvalues,
            string? allowEmbedding,
            GetServiceGrafanaUserConfigAuthGenericOauthResult? authGenericOauth,
            GetServiceGrafanaUserConfigAuthGithubResult? authGithub,
            GetServiceGrafanaUserConfigAuthGitlabResult? authGitlab,
            GetServiceGrafanaUserConfigAuthGoogleResult? authGoogle,
            string? cookieSamesite,
            string? customDomain,
            int? dashboardsVersionsToKeep,
            string? dataproxySendUserHeader,
            int? dataproxyTimeout,
            string? disableGravatar,
            string? editorsCanAdmin,
            GetServiceGrafanaUserConfigExternalImageStorageResult? externalImageStorage,
            string? googleAnalyticsUaId,
            ImmutableArray<string> ipFilters,
            string? metricsEnabled,
            GetServiceGrafanaUserConfigPrivateAccessResult? privateAccess,
            GetServiceGrafanaUserConfigPublicAccessResult? publicAccess,
            GetServiceGrafanaUserConfigSmtpServerResult? smtpServer,
            string? userAutoAssignOrg,
            string? userAutoAssignOrgRole,
            string? viewersCanEdit)
        {
            AlertingEnabled = alertingEnabled;
            AlertingErrorOrTimeout = alertingErrorOrTimeout;
            AlertingNodataOrNullvalues = alertingNodataOrNullvalues;
            AllowEmbedding = allowEmbedding;
            AuthGenericOauth = authGenericOauth;
            AuthGithub = authGithub;
            AuthGitlab = authGitlab;
            AuthGoogle = authGoogle;
            CookieSamesite = cookieSamesite;
            CustomDomain = customDomain;
            DashboardsVersionsToKeep = dashboardsVersionsToKeep;
            DataproxySendUserHeader = dataproxySendUserHeader;
            DataproxyTimeout = dataproxyTimeout;
            DisableGravatar = disableGravatar;
            EditorsCanAdmin = editorsCanAdmin;
            ExternalImageStorage = externalImageStorage;
            GoogleAnalyticsUaId = googleAnalyticsUaId;
            IpFilters = ipFilters;
            MetricsEnabled = metricsEnabled;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            SmtpServer = smtpServer;
            UserAutoAssignOrg = userAutoAssignOrg;
            UserAutoAssignOrgRole = userAutoAssignOrgRole;
            ViewersCanEdit = viewersCanEdit;
        }
    }

    [OutputType]
    public sealed class GetServiceGrafanaUserConfigSmtpServerResult
    {
        public readonly string? FromAddress;
        public readonly string? FromName;
        public readonly string? Host;
        public readonly string? Password;
        public readonly int? Port;
        public readonly string? SkipVerify;
        public readonly string? Username;

        [OutputConstructor]
        private GetServiceGrafanaUserConfigSmtpServerResult(
            string? fromAddress,
            string? fromName,
            string? host,
            string? password,
            int? port,
            string? skipVerify,
            string? username)
        {
            FromAddress = fromAddress;
            FromName = fromName;
            Host = host;
            Password = password;
            Port = port;
            SkipVerify = skipVerify;
            Username = username;
        }
    }

    [OutputType]
    public sealed class GetServiceInfluxdbResult
    {
        public readonly string DatabaseName;

        [OutputConstructor]
        private GetServiceInfluxdbResult(string databaseName)
        {
            DatabaseName = databaseName;
        }
    }

    [OutputType]
    public sealed class GetServiceInfluxdbUserConfigPrivateAccessResult
    {
        public readonly string? Influxdb;

        [OutputConstructor]
        private GetServiceInfluxdbUserConfigPrivateAccessResult(string? influxdb)
        {
            Influxdb = influxdb;
        }
    }

    [OutputType]
    public sealed class GetServiceInfluxdbUserConfigPublicAccessResult
    {
        public readonly string? Influxdb;

        [OutputConstructor]
        private GetServiceInfluxdbUserConfigPublicAccessResult(string? influxdb)
        {
            Influxdb = influxdb;
        }
    }

    [OutputType]
    public sealed class GetServiceInfluxdbUserConfigResult
    {
        public readonly string? CustomDomain;
        public readonly ImmutableArray<string> IpFilters;
        public readonly GetServiceInfluxdbUserConfigPrivateAccessResult? PrivateAccess;
        public readonly GetServiceInfluxdbUserConfigPublicAccessResult? PublicAccess;
        public readonly string? ServiceToForkFrom;

        [OutputConstructor]
        private GetServiceInfluxdbUserConfigResult(
            string? customDomain,
            ImmutableArray<string> ipFilters,
            GetServiceInfluxdbUserConfigPrivateAccessResult? privateAccess,
            GetServiceInfluxdbUserConfigPublicAccessResult? publicAccess,
            string? serviceToForkFrom)
        {
            CustomDomain = customDomain;
            IpFilters = ipFilters;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            ServiceToForkFrom = serviceToForkFrom;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaConnectResult
    {
        [OutputConstructor]
        private GetServiceKafkaConnectResult()
        {
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaConnectUserConfigKafkaConnectResult
    {
        public readonly string? ConsumerIsolationLevel;
        public readonly int? ConsumerMaxPollRecords;
        public readonly int? OffsetFlushIntervalMs;

        [OutputConstructor]
        private GetServiceKafkaConnectUserConfigKafkaConnectResult(
            string? consumerIsolationLevel,
            int? consumerMaxPollRecords,
            int? offsetFlushIntervalMs)
        {
            ConsumerIsolationLevel = consumerIsolationLevel;
            ConsumerMaxPollRecords = consumerMaxPollRecords;
            OffsetFlushIntervalMs = offsetFlushIntervalMs;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaConnectUserConfigPrivateAccessResult
    {
        public readonly string? KafkaConnect;
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServiceKafkaConnectUserConfigPrivateAccessResult(
            string? kafkaConnect,
            string? prometheus)
        {
            KafkaConnect = kafkaConnect;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaConnectUserConfigPublicAccessResult
    {
        public readonly string? KafkaConnect;
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServiceKafkaConnectUserConfigPublicAccessResult(
            string? kafkaConnect,
            string? prometheus)
        {
            KafkaConnect = kafkaConnect;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaConnectUserConfigResult
    {
        public readonly ImmutableArray<string> IpFilters;
        public readonly GetServiceKafkaConnectUserConfigKafkaConnectResult? KafkaConnect;
        public readonly GetServiceKafkaConnectUserConfigPrivateAccessResult? PrivateAccess;
        public readonly GetServiceKafkaConnectUserConfigPublicAccessResult? PublicAccess;

        [OutputConstructor]
        private GetServiceKafkaConnectUserConfigResult(
            ImmutableArray<string> ipFilters,
            GetServiceKafkaConnectUserConfigKafkaConnectResult? kafkaConnect,
            GetServiceKafkaConnectUserConfigPrivateAccessResult? privateAccess,
            GetServiceKafkaConnectUserConfigPublicAccessResult? publicAccess)
        {
            IpFilters = ipFilters;
            KafkaConnect = kafkaConnect;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaResult
    {
        public readonly string AccessCert;
        public readonly string AccessKey;
        public readonly string ConnectUri;
        public readonly string RestUri;
        public readonly string SchemaRegistryUri;

        [OutputConstructor]
        private GetServiceKafkaResult(
            string accessCert,
            string accessKey,
            string connectUri,
            string restUri,
            string schemaRegistryUri)
        {
            AccessCert = accessCert;
            AccessKey = accessKey;
            ConnectUri = connectUri;
            RestUri = restUri;
            SchemaRegistryUri = schemaRegistryUri;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaUserConfigKafkaAuthenticationMethodsResult
    {
        public readonly bool? Certificate;
        public readonly bool? Sasl;

        [OutputConstructor]
        private GetServiceKafkaUserConfigKafkaAuthenticationMethodsResult(
            bool? certificate,
            bool? sasl)
        {
            Certificate = certificate;
            Sasl = sasl;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaUserConfigKafkaConnectConfigResult
    {
        public readonly string? ConsumerIsolationLevel;
        public readonly int? ConsumerMaxPollRecords;
        public readonly int? OffsetFlushIntervalMs;

        [OutputConstructor]
        private GetServiceKafkaUserConfigKafkaConnectConfigResult(
            string? consumerIsolationLevel,
            int? consumerMaxPollRecords,
            int? offsetFlushIntervalMs)
        {
            ConsumerIsolationLevel = consumerIsolationLevel;
            ConsumerMaxPollRecords = consumerMaxPollRecords;
            OffsetFlushIntervalMs = offsetFlushIntervalMs;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaUserConfigKafkaRestConfigResult
    {
        public readonly bool? ConsumerEnableAutoCommit;
        public readonly int? ConsumerRequestMaxBytes;
        public readonly int? ConsumerRequestTimeoutMs;
        public readonly string? ProducerAcks;
        public readonly int? ProducerLingerMs;
        public readonly int? SimpleconsumerPoolSizeMax;

        [OutputConstructor]
        private GetServiceKafkaUserConfigKafkaRestConfigResult(
            bool? consumerEnableAutoCommit,
            int? consumerRequestMaxBytes,
            int? consumerRequestTimeoutMs,
            string? producerAcks,
            int? producerLingerMs,
            int? simpleconsumerPoolSizeMax)
        {
            ConsumerEnableAutoCommit = consumerEnableAutoCommit;
            ConsumerRequestMaxBytes = consumerRequestMaxBytes;
            ConsumerRequestTimeoutMs = consumerRequestTimeoutMs;
            ProducerAcks = producerAcks;
            ProducerLingerMs = producerLingerMs;
            SimpleconsumerPoolSizeMax = simpleconsumerPoolSizeMax;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaUserConfigKafkaResult
    {
        public readonly string? AutoCreateTopicsEnable;
        public readonly string? CompressionType;
        public readonly int? ConnectionsMaxIdleMs;
        public readonly int? DefaultReplicationFactor;
        public readonly int? GroupMaxSessionTimeoutMs;
        public readonly int? GroupMinSessionTimeoutMs;
        public readonly int? LogCleanerMaxCompactionLagMs;
        public readonly double? LogCleanerMinCleanableRatio;
        public readonly int? LogCleanerMinCompactionLagMs;
        public readonly string? LogCleanupPolicy;
        public readonly int? LogMessageTimestampDifferenceMaxMs;
        public readonly string? LogMessageTimestampType;
        public readonly int? LogRetentionBytes;
        public readonly int? LogRetentionHours;
        public readonly int? LogSegmentBytes;
        public readonly int? MaxConnectionsPerIp;
        public readonly int? MessageMaxBytes;
        public readonly int? NumPartitions;
        public readonly int? OffsetsRetentionMinutes;
        public readonly int? ProducerPurgatoryPurgeIntervalRequests;
        public readonly int? ReplicaFetchMaxBytes;
        public readonly int? ReplicaFetchResponseMaxBytes;
        public readonly int? SocketRequestMaxBytes;

        [OutputConstructor]
        private GetServiceKafkaUserConfigKafkaResult(
            string? autoCreateTopicsEnable,
            string? compressionType,
            int? connectionsMaxIdleMs,
            int? defaultReplicationFactor,
            int? groupMaxSessionTimeoutMs,
            int? groupMinSessionTimeoutMs,
            int? logCleanerMaxCompactionLagMs,
            double? logCleanerMinCleanableRatio,
            int? logCleanerMinCompactionLagMs,
            string? logCleanupPolicy,
            int? logMessageTimestampDifferenceMaxMs,
            string? logMessageTimestampType,
            int? logRetentionBytes,
            int? logRetentionHours,
            int? logSegmentBytes,
            int? maxConnectionsPerIp,
            int? messageMaxBytes,
            int? numPartitions,
            int? offsetsRetentionMinutes,
            int? producerPurgatoryPurgeIntervalRequests,
            int? replicaFetchMaxBytes,
            int? replicaFetchResponseMaxBytes,
            int? socketRequestMaxBytes)
        {
            AutoCreateTopicsEnable = autoCreateTopicsEnable;
            CompressionType = compressionType;
            ConnectionsMaxIdleMs = connectionsMaxIdleMs;
            DefaultReplicationFactor = defaultReplicationFactor;
            GroupMaxSessionTimeoutMs = groupMaxSessionTimeoutMs;
            GroupMinSessionTimeoutMs = groupMinSessionTimeoutMs;
            LogCleanerMaxCompactionLagMs = logCleanerMaxCompactionLagMs;
            LogCleanerMinCleanableRatio = logCleanerMinCleanableRatio;
            LogCleanerMinCompactionLagMs = logCleanerMinCompactionLagMs;
            LogCleanupPolicy = logCleanupPolicy;
            LogMessageTimestampDifferenceMaxMs = logMessageTimestampDifferenceMaxMs;
            LogMessageTimestampType = logMessageTimestampType;
            LogRetentionBytes = logRetentionBytes;
            LogRetentionHours = logRetentionHours;
            LogSegmentBytes = logSegmentBytes;
            MaxConnectionsPerIp = maxConnectionsPerIp;
            MessageMaxBytes = messageMaxBytes;
            NumPartitions = numPartitions;
            OffsetsRetentionMinutes = offsetsRetentionMinutes;
            ProducerPurgatoryPurgeIntervalRequests = producerPurgatoryPurgeIntervalRequests;
            ReplicaFetchMaxBytes = replicaFetchMaxBytes;
            ReplicaFetchResponseMaxBytes = replicaFetchResponseMaxBytes;
            SocketRequestMaxBytes = socketRequestMaxBytes;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaUserConfigPrivateAccessResult
    {
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServiceKafkaUserConfigPrivateAccessResult(string? prometheus)
        {
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaUserConfigPublicAccessResult
    {
        public readonly string? Kafka;
        public readonly string? KafkaConnect;
        public readonly string? KafkaRest;
        public readonly string? Prometheus;
        public readonly string? SchemaRegistry;

        [OutputConstructor]
        private GetServiceKafkaUserConfigPublicAccessResult(
            string? kafka,
            string? kafkaConnect,
            string? kafkaRest,
            string? prometheus,
            string? schemaRegistry)
        {
            Kafka = kafka;
            KafkaConnect = kafkaConnect;
            KafkaRest = kafkaRest;
            Prometheus = prometheus;
            SchemaRegistry = schemaRegistry;
        }
    }

    [OutputType]
    public sealed class GetServiceKafkaUserConfigResult
    {
        public readonly string? CustomDomain;
        public readonly ImmutableArray<string> IpFilters;
        public readonly GetServiceKafkaUserConfigKafkaResult? Kafka;
        public readonly GetServiceKafkaUserConfigKafkaAuthenticationMethodsResult? KafkaAuthenticationMethods;
        public readonly bool? KafkaConnect;
        public readonly GetServiceKafkaUserConfigKafkaConnectConfigResult? KafkaConnectConfig;
        public readonly bool? KafkaRest;
        public readonly GetServiceKafkaUserConfigKafkaRestConfigResult? KafkaRestConfig;
        public readonly string? KafkaVersion;
        public readonly GetServiceKafkaUserConfigPrivateAccessResult? PrivateAccess;
        public readonly GetServiceKafkaUserConfigPublicAccessResult? PublicAccess;
        public readonly bool? SchemaRegistry;

        [OutputConstructor]
        private GetServiceKafkaUserConfigResult(
            string? customDomain,
            ImmutableArray<string> ipFilters,
            GetServiceKafkaUserConfigKafkaResult? kafka,
            GetServiceKafkaUserConfigKafkaAuthenticationMethodsResult? kafkaAuthenticationMethods,
            bool? kafkaConnect,
            GetServiceKafkaUserConfigKafkaConnectConfigResult? kafkaConnectConfig,
            bool? kafkaRest,
            GetServiceKafkaUserConfigKafkaRestConfigResult? kafkaRestConfig,
            string? kafkaVersion,
            GetServiceKafkaUserConfigPrivateAccessResult? privateAccess,
            GetServiceKafkaUserConfigPublicAccessResult? publicAccess,
            bool? schemaRegistry)
        {
            CustomDomain = customDomain;
            IpFilters = ipFilters;
            Kafka = kafka;
            KafkaAuthenticationMethods = kafkaAuthenticationMethods;
            KafkaConnect = kafkaConnect;
            KafkaConnectConfig = kafkaConnectConfig;
            KafkaRest = kafkaRest;
            KafkaRestConfig = kafkaRestConfig;
            KafkaVersion = kafkaVersion;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            SchemaRegistry = schemaRegistry;
        }
    }

    [OutputType]
    public sealed class GetServiceMysqlResult
    {
        [OutputConstructor]
        private GetServiceMysqlResult()
        {
        }
    }

    [OutputType]
    public sealed class GetServiceMysqlUserConfigMysqlResult
    {
        public readonly int? ConnectTimeout;
        public readonly string? DefaultTimeZone;
        public readonly int? GroupConcatMaxLen;
        public readonly int? InformationSchemaStatsExpiry;
        public readonly int? InnodbFtMinTokenSize;
        public readonly string? InnodbFtServerStopwordTable;
        public readonly int? InnodbLockWaitTimeout;
        public readonly int? InnodbOnlineAlterLogMaxSize;
        public readonly string? InnodbRollbackOnTimeout;
        public readonly int? MaxAllowedPacket;
        public readonly int? NetReadTimeout;
        public readonly int? NetWriteTimeout;
        public readonly string? SqlMode;
        public readonly string? SqlRequirePrimaryKey;
        public readonly int? WaitTimeout;

        [OutputConstructor]
        private GetServiceMysqlUserConfigMysqlResult(
            int? connectTimeout,
            string? defaultTimeZone,
            int? groupConcatMaxLen,
            int? informationSchemaStatsExpiry,
            int? innodbFtMinTokenSize,
            string? innodbFtServerStopwordTable,
            int? innodbLockWaitTimeout,
            int? innodbOnlineAlterLogMaxSize,
            string? innodbRollbackOnTimeout,
            int? maxAllowedPacket,
            int? netReadTimeout,
            int? netWriteTimeout,
            string? sqlMode,
            string? sqlRequirePrimaryKey,
            int? waitTimeout)
        {
            ConnectTimeout = connectTimeout;
            DefaultTimeZone = defaultTimeZone;
            GroupConcatMaxLen = groupConcatMaxLen;
            InformationSchemaStatsExpiry = informationSchemaStatsExpiry;
            InnodbFtMinTokenSize = innodbFtMinTokenSize;
            InnodbFtServerStopwordTable = innodbFtServerStopwordTable;
            InnodbLockWaitTimeout = innodbLockWaitTimeout;
            InnodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            InnodbRollbackOnTimeout = innodbRollbackOnTimeout;
            MaxAllowedPacket = maxAllowedPacket;
            NetReadTimeout = netReadTimeout;
            NetWriteTimeout = netWriteTimeout;
            SqlMode = sqlMode;
            SqlRequirePrimaryKey = sqlRequirePrimaryKey;
            WaitTimeout = waitTimeout;
        }
    }

    [OutputType]
    public sealed class GetServiceMysqlUserConfigPrivateAccessResult
    {
        public readonly string? Mysql;
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServiceMysqlUserConfigPrivateAccessResult(
            string? mysql,
            string? prometheus)
        {
            Mysql = mysql;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServiceMysqlUserConfigPublicAccessResult
    {
        public readonly string? Mysql;
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServiceMysqlUserConfigPublicAccessResult(
            string? mysql,
            string? prometheus)
        {
            Mysql = mysql;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServiceMysqlUserConfigResult
    {
        public readonly string? AdminPassword;
        public readonly string? AdminUsername;
        public readonly int? BackupHour;
        public readonly int? BackupMinute;
        public readonly ImmutableArray<string> IpFilters;
        public readonly GetServiceMysqlUserConfigMysqlResult? Mysql;
        public readonly string? MysqlVersion;
        public readonly GetServiceMysqlUserConfigPrivateAccessResult? PrivateAccess;
        public readonly GetServiceMysqlUserConfigPublicAccessResult? PublicAccess;
        public readonly string? RecoveryTargetTime;
        public readonly string? ServiceToForkFrom;

        [OutputConstructor]
        private GetServiceMysqlUserConfigResult(
            string? adminPassword,
            string? adminUsername,
            int? backupHour,
            int? backupMinute,
            ImmutableArray<string> ipFilters,
            GetServiceMysqlUserConfigMysqlResult? mysql,
            string? mysqlVersion,
            GetServiceMysqlUserConfigPrivateAccessResult? privateAccess,
            GetServiceMysqlUserConfigPublicAccessResult? publicAccess,
            string? recoveryTargetTime,
            string? serviceToForkFrom)
        {
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            IpFilters = ipFilters;
            Mysql = mysql;
            MysqlVersion = mysqlVersion;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            RecoveryTargetTime = recoveryTargetTime;
            ServiceToForkFrom = serviceToForkFrom;
        }
    }

    [OutputType]
    public sealed class GetServicePgResult
    {
        public readonly string Dbname;
        public readonly string Host;
        public readonly string Password;
        public readonly int Port;
        public readonly string ReplicaUri;
        public readonly string Sslmode;
        public readonly string Uri;
        public readonly string User;

        [OutputConstructor]
        private GetServicePgResult(
            string dbname,
            string host,
            string password,
            int port,
            string replicaUri,
            string sslmode,
            string uri,
            string user)
        {
            Dbname = dbname;
            Host = host;
            Password = password;
            Port = port;
            ReplicaUri = replicaUri;
            Sslmode = sslmode;
            Uri = uri;
            User = user;
        }
    }

    [OutputType]
    public sealed class GetServicePgUserConfigPgResult
    {
        public readonly double? AutovacuumAnalyzeScaleFactor;
        public readonly int? AutovacuumAnalyzeThreshold;
        public readonly int? AutovacuumMaxWorkers;
        public readonly int? AutovacuumNaptime;
        public readonly int? AutovacuumVacuumCostDelay;
        public readonly int? AutovacuumVacuumCostLimit;
        public readonly double? AutovacuumVacuumScaleFactor;
        public readonly int? AutovacuumVacuumThreshold;
        public readonly int? DeadlockTimeout;
        public readonly int? IdleInTransactionSessionTimeout;
        public readonly string? Jit;
        public readonly int? LogAutovacuumMinDuration;
        public readonly string? LogErrorVerbosity;
        public readonly int? LogMinDurationStatement;
        public readonly int? MaxLocksPerTransaction;
        public readonly int? MaxParallelWorkers;
        public readonly int? MaxParallelWorkersPerGather;
        public readonly int? MaxPredLocksPerTransaction;
        public readonly int? MaxPreparedTransactions;
        public readonly int? MaxStackDepth;
        public readonly int? MaxStandbyArchiveDelay;
        public readonly int? MaxStandbyStreamingDelay;
        public readonly int? MaxWorkerProcesses;
        public readonly string? PgStatStatementsTrack;
        public readonly int? TempFileLimit;
        public readonly string? Timezone;
        public readonly int? TrackActivityQuerySize;
        public readonly string? TrackFunctions;
        public readonly int? WalWriterDelay;

        [OutputConstructor]
        private GetServicePgUserConfigPgResult(
            double? autovacuumAnalyzeScaleFactor,
            int? autovacuumAnalyzeThreshold,
            int? autovacuumMaxWorkers,
            int? autovacuumNaptime,
            int? autovacuumVacuumCostDelay,
            int? autovacuumVacuumCostLimit,
            double? autovacuumVacuumScaleFactor,
            int? autovacuumVacuumThreshold,
            int? deadlockTimeout,
            int? idleInTransactionSessionTimeout,
            string? jit,
            int? logAutovacuumMinDuration,
            string? logErrorVerbosity,
            int? logMinDurationStatement,
            int? maxLocksPerTransaction,
            int? maxParallelWorkers,
            int? maxParallelWorkersPerGather,
            int? maxPredLocksPerTransaction,
            int? maxPreparedTransactions,
            int? maxStackDepth,
            int? maxStandbyArchiveDelay,
            int? maxStandbyStreamingDelay,
            int? maxWorkerProcesses,
            string? pgStatStatementsTrack,
            int? tempFileLimit,
            string? timezone,
            int? trackActivityQuerySize,
            string? trackFunctions,
            int? walWriterDelay)
        {
            AutovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
            AutovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
            AutovacuumMaxWorkers = autovacuumMaxWorkers;
            AutovacuumNaptime = autovacuumNaptime;
            AutovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
            AutovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
            AutovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
            AutovacuumVacuumThreshold = autovacuumVacuumThreshold;
            DeadlockTimeout = deadlockTimeout;
            IdleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
            Jit = jit;
            LogAutovacuumMinDuration = logAutovacuumMinDuration;
            LogErrorVerbosity = logErrorVerbosity;
            LogMinDurationStatement = logMinDurationStatement;
            MaxLocksPerTransaction = maxLocksPerTransaction;
            MaxParallelWorkers = maxParallelWorkers;
            MaxParallelWorkersPerGather = maxParallelWorkersPerGather;
            MaxPredLocksPerTransaction = maxPredLocksPerTransaction;
            MaxPreparedTransactions = maxPreparedTransactions;
            MaxStackDepth = maxStackDepth;
            MaxStandbyArchiveDelay = maxStandbyArchiveDelay;
            MaxStandbyStreamingDelay = maxStandbyStreamingDelay;
            MaxWorkerProcesses = maxWorkerProcesses;
            PgStatStatementsTrack = pgStatStatementsTrack;
            TempFileLimit = tempFileLimit;
            Timezone = timezone;
            TrackActivityQuerySize = trackActivityQuerySize;
            TrackFunctions = trackFunctions;
            WalWriterDelay = walWriterDelay;
        }
    }

    [OutputType]
    public sealed class GetServicePgUserConfigPgbouncerResult
    {
        public readonly bool? ServerResetQueryAlways;

        [OutputConstructor]
        private GetServicePgUserConfigPgbouncerResult(bool? serverResetQueryAlways)
        {
            ServerResetQueryAlways = serverResetQueryAlways;
        }
    }

    [OutputType]
    public sealed class GetServicePgUserConfigPglookoutResult
    {
        public readonly int? MaxFailoverReplicationTimeLag;

        [OutputConstructor]
        private GetServicePgUserConfigPglookoutResult(int? maxFailoverReplicationTimeLag)
        {
            MaxFailoverReplicationTimeLag = maxFailoverReplicationTimeLag;
        }
    }

    [OutputType]
    public sealed class GetServicePgUserConfigPrivateAccessResult
    {
        public readonly string? Pg;
        public readonly string? Pgbouncer;
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServicePgUserConfigPrivateAccessResult(
            string? pg,
            string? pgbouncer,
            string? prometheus)
        {
            Pg = pg;
            Pgbouncer = pgbouncer;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServicePgUserConfigPublicAccessResult
    {
        public readonly string? Pg;
        public readonly string? Pgbouncer;
        public readonly string? Prometheus;

        [OutputConstructor]
        private GetServicePgUserConfigPublicAccessResult(
            string? pg,
            string? pgbouncer,
            string? prometheus)
        {
            Pg = pg;
            Pgbouncer = pgbouncer;
            Prometheus = prometheus;
        }
    }

    [OutputType]
    public sealed class GetServicePgUserConfigResult
    {
        public readonly string? AdminPassword;
        public readonly string? AdminUsername;
        public readonly int? BackupHour;
        public readonly int? BackupMinute;
        public readonly ImmutableArray<string> IpFilters;
        public readonly GetServicePgUserConfigPgResult? Pg;
        public readonly string? PgReadReplica;
        public readonly string? PgServiceToForkFrom;
        public readonly string? PgVersion;
        public readonly GetServicePgUserConfigPgbouncerResult? Pgbouncer;
        public readonly GetServicePgUserConfigPglookoutResult? Pglookout;
        public readonly GetServicePgUserConfigPrivateAccessResult? PrivateAccess;
        public readonly GetServicePgUserConfigPublicAccessResult? PublicAccess;
        public readonly string? RecoveryTargetTime;
        public readonly string? ServiceToForkFrom;
        public readonly GetServicePgUserConfigTimescaledbResult? Timescaledb;
        public readonly string? Variant;

        [OutputConstructor]
        private GetServicePgUserConfigResult(
            string? adminPassword,
            string? adminUsername,
            int? backupHour,
            int? backupMinute,
            ImmutableArray<string> ipFilters,
            GetServicePgUserConfigPgResult? pg,
            string? pgReadReplica,
            string? pgServiceToForkFrom,
            string? pgVersion,
            GetServicePgUserConfigPgbouncerResult? pgbouncer,
            GetServicePgUserConfigPglookoutResult? pglookout,
            GetServicePgUserConfigPrivateAccessResult? privateAccess,
            GetServicePgUserConfigPublicAccessResult? publicAccess,
            string? recoveryTargetTime,
            string? serviceToForkFrom,
            GetServicePgUserConfigTimescaledbResult? timescaledb,
            string? variant)
        {
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            IpFilters = ipFilters;
            Pg = pg;
            PgReadReplica = pgReadReplica;
            PgServiceToForkFrom = pgServiceToForkFrom;
            PgVersion = pgVersion;
            Pgbouncer = pgbouncer;
            Pglookout = pglookout;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            RecoveryTargetTime = recoveryTargetTime;
            ServiceToForkFrom = serviceToForkFrom;
            Timescaledb = timescaledb;
            Variant = variant;
        }
    }

    [OutputType]
    public sealed class GetServicePgUserConfigTimescaledbResult
    {
        public readonly int? MaxBackgroundWorkers;

        [OutputConstructor]
        private GetServicePgUserConfigTimescaledbResult(int? maxBackgroundWorkers)
        {
            MaxBackgroundWorkers = maxBackgroundWorkers;
        }
    }

    [OutputType]
    public sealed class GetServiceRedisResult
    {
        [OutputConstructor]
        private GetServiceRedisResult()
        {
        }
    }

    [OutputType]
    public sealed class GetServiceRedisUserConfigMigrationResult
    {
        public readonly string? Host;
        public readonly string? Password;
        public readonly int? Port;
        public readonly bool? Ssl;
        public readonly string? Username;

        [OutputConstructor]
        private GetServiceRedisUserConfigMigrationResult(
            string? host,
            string? password,
            int? port,
            bool? ssl,
            string? username)
        {
            Host = host;
            Password = password;
            Port = port;
            Ssl = ssl;
            Username = username;
        }
    }

    [OutputType]
    public sealed class GetServiceRedisUserConfigPrivateAccessResult
    {
        public readonly string? Prometheus;
        public readonly string? Redis;

        [OutputConstructor]
        private GetServiceRedisUserConfigPrivateAccessResult(
            string? prometheus,
            string? redis)
        {
            Prometheus = prometheus;
            Redis = redis;
        }
    }

    [OutputType]
    public sealed class GetServiceRedisUserConfigPublicAccessResult
    {
        public readonly string? Prometheus;
        public readonly string? Redis;

        [OutputConstructor]
        private GetServiceRedisUserConfigPublicAccessResult(
            string? prometheus,
            string? redis)
        {
            Prometheus = prometheus;
            Redis = redis;
        }
    }

    [OutputType]
    public sealed class GetServiceRedisUserConfigResult
    {
        public readonly ImmutableArray<string> IpFilters;
        public readonly GetServiceRedisUserConfigMigrationResult? Migration;
        public readonly GetServiceRedisUserConfigPrivateAccessResult? PrivateAccess;
        public readonly GetServiceRedisUserConfigPublicAccessResult? PublicAccess;
        public readonly int? RedisLfuDecayTime;
        public readonly int? RedisLfuLogFactor;
        public readonly string? RedisMaxmemoryPolicy;
        public readonly string? RedisNotifyKeyspaceEvents;
        public readonly bool? RedisSsl;
        public readonly int? RedisTimeout;

        [OutputConstructor]
        private GetServiceRedisUserConfigResult(
            ImmutableArray<string> ipFilters,
            GetServiceRedisUserConfigMigrationResult? migration,
            GetServiceRedisUserConfigPrivateAccessResult? privateAccess,
            GetServiceRedisUserConfigPublicAccessResult? publicAccess,
            int? redisLfuDecayTime,
            int? redisLfuLogFactor,
            string? redisMaxmemoryPolicy,
            string? redisNotifyKeyspaceEvents,
            bool? redisSsl,
            int? redisTimeout)
        {
            IpFilters = ipFilters;
            Migration = migration;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            RedisLfuDecayTime = redisLfuDecayTime;
            RedisLfuLogFactor = redisLfuLogFactor;
            RedisMaxmemoryPolicy = redisMaxmemoryPolicy;
            RedisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            RedisSsl = redisSsl;
            RedisTimeout = redisTimeout;
        }
    }

    [OutputType]
    public sealed class GetServiceServiceIntegrationsResult
    {
        public readonly string IntegrationType;
        public readonly string SourceServiceName;

        [OutputConstructor]
        private GetServiceServiceIntegrationsResult(
            string integrationType,
            string sourceServiceName)
        {
            IntegrationType = integrationType;
            SourceServiceName = sourceServiceName;
        }
    }
    }
}
