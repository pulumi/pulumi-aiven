// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// Creates and manages quotas for an Aiven for Apache KafkaÂ® service user.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleQuota = new Aiven.KafkaQuota("example_quota", new()
    ///     {
    ///         Project = foo.Project,
    ///         ServiceName = exampleKafka.ServiceName,
    ///         User = "example-kafka-user",
    ///         ClientId = "example_client",
    ///         ConsumerByteRate = 1000,
    ///         ProducerByteRate = 1000,
    ///         RequestPercentage = 50,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// When both USER and CLIENT_ID are specified
    /// 
    /// ```sh
    /// $ pulumi import aiven:index/kafkaQuota:KafkaQuota example_quota PROJECT/SERVICE_NAME/CLIENT_ID/USER
    /// ```
    /// 
    /// When only USER is specified
    /// 
    /// ```sh
    /// $ pulumi import aiven:index/kafkaQuota:KafkaQuota example_quota PROJECT/SERVICE_NAME//USER
    /// ```
    /// 
    /// When only CLIENT_ID is specified
    /// 
    /// ```sh
    /// $ pulumi import aiven:index/kafkaQuota:KafkaQuota example_quota PROJECT/SERVICE_NAME/CLIENT_ID/
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/kafkaQuota:KafkaQuota")]
    public partial class KafkaQuota : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Represents a logical group of clients, assigned a unique name by the client application.
        /// Quotas can be applied based on user, client-id, or both.
        /// The most relevant quota is chosen for each connection.
        /// All connections within a quota group share the same quota.
        /// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
        /// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
        /// Exceeding this limit results in client throttling.
        /// </summary>
        [Output("consumerByteRate")]
        public Output<int?> ConsumerByteRate { get; private set; } = null!;

        /// <summary>
        /// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
        /// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
        /// Exceeding this limit results in client throttling.
        /// </summary>
        [Output("producerByteRate")]
        public Output<int?> ProducerByteRate { get; private set; } = null!;

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
        /// Exceeding this limit triggers throttling.
        /// The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
        /// </summary>
        [Output("requestPercentage")]
        public Output<double?> RequestPercentage { get; private set; } = null!;

        /// <summary>
        /// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Represents a logical group of clients, assigned a unique name by the client application.
        /// Quotas can be applied based on user, client-id, or both.
        /// The most relevant quota is chosen for each connection.
        /// All connections within a quota group share the same quota.
        /// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
        /// </summary>
        [Output("user")]
        public Output<string?> User { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaQuota resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaQuota(string name, KafkaQuotaArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/kafkaQuota:KafkaQuota", name, args ?? new KafkaQuotaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaQuota(string name, Input<string> id, KafkaQuotaState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/kafkaQuota:KafkaQuota", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaQuota resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaQuota Get(string name, Input<string> id, KafkaQuotaState? state = null, CustomResourceOptions? options = null)
        {
            return new KafkaQuota(name, id, state, options);
        }
    }

    public sealed class KafkaQuotaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represents a logical group of clients, assigned a unique name by the client application.
        /// Quotas can be applied based on user, client-id, or both.
        /// The most relevant quota is chosen for each connection.
        /// All connections within a quota group share the same quota.
        /// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
        /// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
        /// Exceeding this limit results in client throttling.
        /// </summary>
        [Input("consumerByteRate")]
        public Input<int>? ConsumerByteRate { get; set; }

        /// <summary>
        /// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
        /// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
        /// Exceeding this limit results in client throttling.
        /// </summary>
        [Input("producerByteRate")]
        public Input<int>? ProducerByteRate { get; set; }

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
        /// Exceeding this limit triggers throttling.
        /// The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
        /// </summary>
        [Input("requestPercentage")]
        public Input<double>? RequestPercentage { get; set; }

        /// <summary>
        /// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Represents a logical group of clients, assigned a unique name by the client application.
        /// Quotas can be applied based on user, client-id, or both.
        /// The most relevant quota is chosen for each connection.
        /// All connections within a quota group share the same quota.
        /// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public KafkaQuotaArgs()
        {
        }
        public static new KafkaQuotaArgs Empty => new KafkaQuotaArgs();
    }

    public sealed class KafkaQuotaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represents a logical group of clients, assigned a unique name by the client application.
        /// Quotas can be applied based on user, client-id, or both.
        /// The most relevant quota is chosen for each connection.
        /// All connections within a quota group share the same quota.
        /// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
        /// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
        /// Exceeding this limit results in client throttling.
        /// </summary>
        [Input("consumerByteRate")]
        public Input<int>? ConsumerByteRate { get; set; }

        /// <summary>
        /// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
        /// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
        /// Exceeding this limit results in client throttling.
        /// </summary>
        [Input("producerByteRate")]
        public Input<int>? ProducerByteRate { get; set; }

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
        /// Exceeding this limit triggers throttling.
        /// The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
        /// </summary>
        [Input("requestPercentage")]
        public Input<double>? RequestPercentage { get; set; }

        /// <summary>
        /// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Represents a logical group of clients, assigned a unique name by the client application.
        /// Quotas can be applied based on user, client-id, or both.
        /// The most relevant quota is chosen for each connection.
        /// All connections within a quota group share the same quota.
        /// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public KafkaQuotaState()
        {
        }
        public static new KafkaQuotaState Empty => new KafkaQuotaState();
    }
}
