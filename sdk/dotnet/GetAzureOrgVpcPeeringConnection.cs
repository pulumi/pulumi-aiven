// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetAzureOrgVpcPeeringConnection
    {
        /// <summary>
        /// Gets information about about an Azure VPC peering connection. 
        /// 
        /// **This resource is in the beta stage and may change without notice.** Set
        /// the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.
        /// </summary>
        public static Task<GetAzureOrgVpcPeeringConnectionResult> InvokeAsync(GetAzureOrgVpcPeeringConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAzureOrgVpcPeeringConnectionResult>("aiven:index/getAzureOrgVpcPeeringConnection:getAzureOrgVpcPeeringConnection", args ?? new GetAzureOrgVpcPeeringConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about about an Azure VPC peering connection. 
        /// 
        /// **This resource is in the beta stage and may change without notice.** Set
        /// the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.
        /// </summary>
        public static Output<GetAzureOrgVpcPeeringConnectionResult> Invoke(GetAzureOrgVpcPeeringConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzureOrgVpcPeeringConnectionResult>("aiven:index/getAzureOrgVpcPeeringConnection:getAzureOrgVpcPeeringConnection", args ?? new GetAzureOrgVpcPeeringConnectionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about about an Azure VPC peering connection. 
        /// 
        /// **This resource is in the beta stage and may change without notice.** Set
        /// the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.
        /// </summary>
        public static Output<GetAzureOrgVpcPeeringConnectionResult> Invoke(GetAzureOrgVpcPeeringConnectionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzureOrgVpcPeeringConnectionResult>("aiven:index/getAzureOrgVpcPeeringConnection:getAzureOrgVpcPeeringConnection", args ?? new GetAzureOrgVpcPeeringConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAzureOrgVpcPeeringConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Azure subscription in UUID4 format. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("azureSubscriptionId", required: true)]
        public string AzureSubscriptionId { get; set; } = null!;

        /// <summary>
        /// Identifier of the organization.
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        /// <summary>
        /// Identifier of the organization VPC.
        /// </summary>
        [Input("organizationVpcId", required: true)]
        public string OrganizationVpcId { get; set; } = null!;

        /// <summary>
        /// The name of the Azure resource group associated with the VNet. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("peerResourceGroup", required: true)]
        public string PeerResourceGroup { get; set; } = null!;

        /// <summary>
        /// The name of the Azure VNet. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("vnetName", required: true)]
        public string VnetName { get; set; } = null!;

        public GetAzureOrgVpcPeeringConnectionArgs()
        {
        }
        public static new GetAzureOrgVpcPeeringConnectionArgs Empty => new GetAzureOrgVpcPeeringConnectionArgs();
    }

    public sealed class GetAzureOrgVpcPeeringConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Azure subscription in UUID4 format. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("azureSubscriptionId", required: true)]
        public Input<string> AzureSubscriptionId { get; set; } = null!;

        /// <summary>
        /// Identifier of the organization.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// Identifier of the organization VPC.
        /// </summary>
        [Input("organizationVpcId", required: true)]
        public Input<string> OrganizationVpcId { get; set; } = null!;

        /// <summary>
        /// The name of the Azure resource group associated with the VNet. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("peerResourceGroup", required: true)]
        public Input<string> PeerResourceGroup { get; set; } = null!;

        /// <summary>
        /// The name of the Azure VNet. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("vnetName", required: true)]
        public Input<string> VnetName { get; set; } = null!;

        public GetAzureOrgVpcPeeringConnectionInvokeArgs()
        {
        }
        public static new GetAzureOrgVpcPeeringConnectionInvokeArgs Empty => new GetAzureOrgVpcPeeringConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetAzureOrgVpcPeeringConnectionResult
    {
        /// <summary>
        /// The ID of the Azure subscription in UUID4 format. Changing this property forces recreation of the resource.
        /// </summary>
        public readonly string AzureSubscriptionId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the organization.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// Identifier of the organization VPC.
        /// </summary>
        public readonly string OrganizationVpcId;
        /// <summary>
        /// The ID of the Azure app that is allowed to create a peering to the Azure Virtual Network (VNet) in UUID4 format. Changing this property forces recreation of the resource.
        /// </summary>
        public readonly string PeerAzureAppId;
        /// <summary>
        /// The Azure tenant ID in UUID4 format. Changing this property forces recreation of the resource.
        /// </summary>
        public readonly string PeerAzureTenantId;
        /// <summary>
        /// The name of the Azure resource group associated with the VNet. Changing this property forces recreation of the resource.
        /// </summary>
        public readonly string PeerResourceGroup;
        /// <summary>
        /// The ID of the cloud provider for the peering connection.
        /// </summary>
        public readonly string PeeringConnectionId;
        /// <summary>
        /// State of the peering connection
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The name of the Azure VNet. Changing this property forces recreation of the resource.
        /// </summary>
        public readonly string VnetName;

        [OutputConstructor]
        private GetAzureOrgVpcPeeringConnectionResult(
            string azureSubscriptionId,

            string id,

            string organizationId,

            string organizationVpcId,

            string peerAzureAppId,

            string peerAzureTenantId,

            string peerResourceGroup,

            string peeringConnectionId,

            string state,

            string vnetName)
        {
            AzureSubscriptionId = azureSubscriptionId;
            Id = id;
            OrganizationId = organizationId;
            OrganizationVpcId = organizationVpcId;
            PeerAzureAppId = peerAzureAppId;
            PeerAzureTenantId = peerAzureTenantId;
            PeerResourceGroup = peerResourceGroup;
            PeeringConnectionId = peeringConnectionId;
            State = state;
            VnetName = vnetName;
        }
    }
}
