// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// Grants [roles and permissions](https://aiven.io/docs/platform/concepts/permissions) to a principal for a resource. Permissions can be granted at the organization, organizational unit, and project level. Unit-level permissions aren't shown in the Aiven Console.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Grant access to a specific project
    ///     var exampleProjectPermissions = new Aiven.OrganizationPermission("example_project_permissions", new()
    ///     {
    ///         OrganizationId = main.Id,
    ///         ResourceId = exampleProject.Id,
    ///         ResourceType = "project",
    ///         Permissions = new[]
    ///         {
    ///             new Aiven.Inputs.OrganizationPermissionPermissionArgs
    ///             {
    ///                 Permissions = new[]
    ///                 {
    ///                     "operator",
    ///                     "service:logs:read",
    ///                 },
    ///                 PrincipalId = "u123a456b7890c",
    ///                 PrincipalType = "user",
    ///             },
    ///             new Aiven.Inputs.OrganizationPermissionPermissionArgs
    ///             {
    ///                 Permissions = new[]
    ///                 {
    ///                     "project:integrations:write",
    ///                     "developer",
    ///                 },
    ///                 PrincipalId = exampleGroup.GroupId,
    ///                 PrincipalType = "user_group",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Organization-level permissions
    ///     var exampleOrgPermissions = new Aiven.OrganizationPermission("example_org_permissions", new()
    ///     {
    ///         OrganizationId = main.Id,
    ///         ResourceId = main.Id,
    ///         ResourceType = "organization",
    ///         Permissions = new[]
    ///         {
    ///             new Aiven.Inputs.OrganizationPermissionPermissionArgs
    ///             {
    ///                 Permissions = new[]
    ///                 {
    ///                     "organization:app_users:write",
    ///                     "project:audit_logs:read",
    ///                 },
    ///                 PrincipalId = "u123a456b7890c",
    ///                 PrincipalType = "user",
    ///             },
    ///             new Aiven.Inputs.OrganizationPermissionPermissionArgs
    ///             {
    ///                 Permissions = new[]
    ///                 {
    ///                     "organization:users:write",
    ///                     "organization:groups:write",
    ///                     "organization:domains:write",
    ///                     "organization:idps:write",
    ///                 },
    ///                 PrincipalId = exampleGroupAivenOrganizationUserGroup.GroupId,
    ///                 PrincipalType = "user_group",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import aiven:index/organizationPermission:OrganizationPermission operator ORGANIZATION_ID/ID
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/organizationPermission:OrganizationPermission")]
    public partial class OrganizationPermission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Organization ID.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Permissions to grant to principals.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.OrganizationPermissionPermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// Resource ID.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// Resource type. The possible values are `project`, `organization` and `organization_unit`.
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationPermission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationPermission(string name, OrganizationPermissionArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/organizationPermission:OrganizationPermission", name, args ?? new OrganizationPermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationPermission(string name, Input<string> id, OrganizationPermissionState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/organizationPermission:OrganizationPermission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationPermission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationPermission Get(string name, Input<string> id, OrganizationPermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationPermission(name, id, state, options);
        }
    }

    public sealed class OrganizationPermissionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Organization ID.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("permissions", required: true)]
        private InputList<Inputs.OrganizationPermissionPermissionArgs>? _permissions;

        /// <summary>
        /// Permissions to grant to principals.
        /// </summary>
        public InputList<Inputs.OrganizationPermissionPermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.OrganizationPermissionPermissionArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// Resource ID.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        /// <summary>
        /// Resource type. The possible values are `project`, `organization` and `organization_unit`.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        public OrganizationPermissionArgs()
        {
        }
        public static new OrganizationPermissionArgs Empty => new OrganizationPermissionArgs();
    }

    public sealed class OrganizationPermissionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Organization ID.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("permissions")]
        private InputList<Inputs.OrganizationPermissionPermissionGetArgs>? _permissions;

        /// <summary>
        /// Permissions to grant to principals.
        /// </summary>
        public InputList<Inputs.OrganizationPermissionPermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.OrganizationPermissionPermissionGetArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// Resource ID.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// Resource type. The possible values are `project`, `organization` and `organization_unit`.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        public OrganizationPermissionState()
        {
        }
        public static new OrganizationPermissionState Empty => new OrganizationPermissionState();
    }
}
