// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// ## # Project Resource
    /// 
    /// The Project resource allows the creation and management of Aiven Projects.
    /// </summary>
    [AivenResourceType("aiven:index/project:Project")]
    public partial class Project : Pulumi.CustomResource
    {
        /// <summary>
        /// is an optional property to link a project to already an existing account by 
        /// using account ID.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// Available credits
        /// </summary>
        [Output("availableCredits")]
        public Output<string> AvailableCredits { get; private set; } = null!;

        /// <summary>
        /// Billing name and address of the project
        /// </summary>
        [Output("billingAddress")]
        public Output<string?> BillingAddress { get; private set; } = null!;

        /// <summary>
        /// Billing currency
        /// </summary>
        [Output("billingCurrency")]
        public Output<string?> BillingCurrency { get; private set; } = null!;

        /// <summary>
        /// Billing contact emails of the project
        /// </summary>
        [Output("billingEmails")]
        public Output<ImmutableArray<string>> BillingEmails { get; private set; } = null!;

        /// <summary>
        /// Extra text to be included in all project invoices, e.g. purchase order or cost center number
        /// </summary>
        [Output("billingExtraText")]
        public Output<string?> BillingExtraText { get; private set; } = null!;

        /// <summary>
        /// Billing group Id
        /// </summary>
        [Output("billingGroup")]
        public Output<string?> BillingGroup { get; private set; } = null!;

        /// <summary>
        /// is a computed property that can be used to read the CA certificate of the
        /// project. This is required for configuring clients that connect to certain services like
        /// Kafka. This value cannot be set, only read.
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// is either the full card UUID or the last 4 digits of the card. As the full
        /// UUID is not shown in the UI it is typically easier to use the last 4 digits to identify
        /// the card. This can be omitted if `copy_from_project` is used to copy billing info from
        /// another project.
        /// </summary>
        [Output("cardId")]
        public Output<string?> CardId { get; private set; } = null!;

        /// <summary>
        /// is the name of another project used to copy billing information and
        /// some other project attributes like technical contacts from. This is mostly relevant when
        /// an existing project has billing type set to invoice and that needs to be copied over to a
        /// new project. (Setting billing is otherwise not allowed over the API.) This only has
        /// effect when the project is created.
        /// </summary>
        [Output("copyFromProject")]
        public Output<string?> CopyFromProject { get; private set; } = null!;

        /// <summary>
        /// Billing country
        /// </summary>
        [Output("country")]
        public Output<string> Country { get; private set; } = null!;

        /// <summary>
        /// Billing country code of the project
        /// </summary>
        [Output("countryCode")]
        public Output<string?> CountryCode { get; private set; } = null!;

        /// <summary>
        /// Default cloud for new services
        /// </summary>
        [Output("defaultCloud")]
        public Output<string?> DefaultCloud { get; private set; } = null!;

        /// <summary>
        /// Estimated balance
        /// </summary>
        [Output("estimatedBalance")]
        public Output<string> EstimatedBalance { get; private set; } = null!;

        /// <summary>
        /// Payment method
        /// </summary>
        [Output("paymentMethod")]
        public Output<string> PaymentMethod { get; private set; } = null!;

        /// <summary>
        /// defines the name of the project. Name must be globally unique (between all
        /// Aiven customers) and cannot be changed later without destroying and re-creating the
        /// project, including all sub-resources.
        /// </summary>
        [Output("project")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// Technical contact emails of the project
        /// </summary>
        [Output("technicalEmails")]
        public Output<ImmutableArray<string>> TechnicalEmails { get; private set; } = null!;

        /// <summary>
        /// EU VAT Identification Number
        /// </summary>
        [Output("vatId")]
        public Output<string?> VatId { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// is an optional property to link a project to already an existing account by 
        /// using account ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Available credits
        /// </summary>
        [Input("availableCredits")]
        public Input<string>? AvailableCredits { get; set; }

        /// <summary>
        /// Billing name and address of the project
        /// </summary>
        [Input("billingAddress")]
        public Input<string>? BillingAddress { get; set; }

        /// <summary>
        /// Billing currency
        /// </summary>
        [Input("billingCurrency")]
        public Input<string>? BillingCurrency { get; set; }

        [Input("billingEmails")]
        private InputList<string>? _billingEmails;

        /// <summary>
        /// Billing contact emails of the project
        /// </summary>
        [Obsolete(@"Please aiven_billing_group resource to set this value.")]
        public InputList<string> BillingEmails
        {
            get => _billingEmails ?? (_billingEmails = new InputList<string>());
            set => _billingEmails = value;
        }

        /// <summary>
        /// Extra text to be included in all project invoices, e.g. purchase order or cost center number
        /// </summary>
        [Input("billingExtraText")]
        public Input<string>? BillingExtraText { get; set; }

        /// <summary>
        /// Billing group Id
        /// </summary>
        [Input("billingGroup")]
        public Input<string>? BillingGroup { get; set; }

        /// <summary>
        /// is a computed property that can be used to read the CA certificate of the
        /// project. This is required for configuring clients that connect to certain services like
        /// Kafka. This value cannot be set, only read.
        /// </summary>
        [Input("caCert")]
        public Input<string>? CaCert { get; set; }

        /// <summary>
        /// is either the full card UUID or the last 4 digits of the card. As the full
        /// UUID is not shown in the UI it is typically easier to use the last 4 digits to identify
        /// the card. This can be omitted if `copy_from_project` is used to copy billing info from
        /// another project.
        /// </summary>
        [Input("cardId")]
        public Input<string>? CardId { get; set; }

        /// <summary>
        /// is the name of another project used to copy billing information and
        /// some other project attributes like technical contacts from. This is mostly relevant when
        /// an existing project has billing type set to invoice and that needs to be copied over to a
        /// new project. (Setting billing is otherwise not allowed over the API.) This only has
        /// effect when the project is created.
        /// </summary>
        [Input("copyFromProject")]
        public Input<string>? CopyFromProject { get; set; }

        /// <summary>
        /// Billing country code of the project
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// Default cloud for new services
        /// </summary>
        [Input("defaultCloud")]
        public Input<string>? DefaultCloud { get; set; }

        /// <summary>
        /// defines the name of the project. Name must be globally unique (between all
        /// Aiven customers) and cannot be changed later without destroying and re-creating the
        /// project, including all sub-resources.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        [Input("technicalEmails")]
        private InputList<string>? _technicalEmails;

        /// <summary>
        /// Technical contact emails of the project
        /// </summary>
        public InputList<string> TechnicalEmails
        {
            get => _technicalEmails ?? (_technicalEmails = new InputList<string>());
            set => _technicalEmails = value;
        }

        /// <summary>
        /// EU VAT Identification Number
        /// </summary>
        [Input("vatId")]
        public Input<string>? VatId { get; set; }

        public ProjectArgs()
        {
        }
    }

    public sealed class ProjectState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// is an optional property to link a project to already an existing account by 
        /// using account ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Available credits
        /// </summary>
        [Input("availableCredits")]
        public Input<string>? AvailableCredits { get; set; }

        /// <summary>
        /// Billing name and address of the project
        /// </summary>
        [Input("billingAddress")]
        public Input<string>? BillingAddress { get; set; }

        /// <summary>
        /// Billing currency
        /// </summary>
        [Input("billingCurrency")]
        public Input<string>? BillingCurrency { get; set; }

        [Input("billingEmails")]
        private InputList<string>? _billingEmails;

        /// <summary>
        /// Billing contact emails of the project
        /// </summary>
        [Obsolete(@"Please aiven_billing_group resource to set this value.")]
        public InputList<string> BillingEmails
        {
            get => _billingEmails ?? (_billingEmails = new InputList<string>());
            set => _billingEmails = value;
        }

        /// <summary>
        /// Extra text to be included in all project invoices, e.g. purchase order or cost center number
        /// </summary>
        [Input("billingExtraText")]
        public Input<string>? BillingExtraText { get; set; }

        /// <summary>
        /// Billing group Id
        /// </summary>
        [Input("billingGroup")]
        public Input<string>? BillingGroup { get; set; }

        /// <summary>
        /// is a computed property that can be used to read the CA certificate of the
        /// project. This is required for configuring clients that connect to certain services like
        /// Kafka. This value cannot be set, only read.
        /// </summary>
        [Input("caCert")]
        public Input<string>? CaCert { get; set; }

        /// <summary>
        /// is either the full card UUID or the last 4 digits of the card. As the full
        /// UUID is not shown in the UI it is typically easier to use the last 4 digits to identify
        /// the card. This can be omitted if `copy_from_project` is used to copy billing info from
        /// another project.
        /// </summary>
        [Input("cardId")]
        public Input<string>? CardId { get; set; }

        /// <summary>
        /// is the name of another project used to copy billing information and
        /// some other project attributes like technical contacts from. This is mostly relevant when
        /// an existing project has billing type set to invoice and that needs to be copied over to a
        /// new project. (Setting billing is otherwise not allowed over the API.) This only has
        /// effect when the project is created.
        /// </summary>
        [Input("copyFromProject")]
        public Input<string>? CopyFromProject { get; set; }

        /// <summary>
        /// Billing country
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// Billing country code of the project
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// Default cloud for new services
        /// </summary>
        [Input("defaultCloud")]
        public Input<string>? DefaultCloud { get; set; }

        /// <summary>
        /// Estimated balance
        /// </summary>
        [Input("estimatedBalance")]
        public Input<string>? EstimatedBalance { get; set; }

        /// <summary>
        /// Payment method
        /// </summary>
        [Input("paymentMethod")]
        public Input<string>? PaymentMethod { get; set; }

        /// <summary>
        /// defines the name of the project. Name must be globally unique (between all
        /// Aiven customers) and cannot be changed later without destroying and re-creating the
        /// project, including all sub-resources.
        /// </summary>
        [Input("project")]
        public Input<string>? ProjectName { get; set; }

        [Input("technicalEmails")]
        private InputList<string>? _technicalEmails;

        /// <summary>
        /// Technical contact emails of the project
        /// </summary>
        public InputList<string> TechnicalEmails
        {
            get => _technicalEmails ?? (_technicalEmails = new InputList<string>());
            set => _technicalEmails = value;
        }

        /// <summary>
        /// EU VAT Identification Number
        /// </summary>
        [Input("vatId")]
        public Input<string>? VatId { get; set; }

        public ProjectState()
        {
        }
    }
}
