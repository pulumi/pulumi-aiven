// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public partial class Project : Pulumi.CustomResource
    {
        /// <summary>
        /// Account ID
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// Billing name and address of the project
        /// </summary>
        [Output("billingAddress")]
        public Output<string?> BillingAddress { get; private set; } = null!;

        /// <summary>
        /// Billing contact emails of the project
        /// </summary>
        [Output("billingEmails")]
        public Output<ImmutableArray<string>> BillingEmails { get; private set; } = null!;

        /// <summary>
        /// Project root CA. This is used by some services like Kafka to sign service certificate
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// Credit card ID
        /// </summary>
        [Output("cardId")]
        public Output<string?> CardId { get; private set; } = null!;

        /// <summary>
        /// Copy properties from another project. Only has effect when a new project is created.
        /// </summary>
        [Output("copyFromProject")]
        public Output<string?> CopyFromProject { get; private set; } = null!;

        /// <summary>
        /// Billing country code of the project
        /// </summary>
        [Output("countryCode")]
        public Output<string?> CountryCode { get; private set; } = null!;

        /// <summary>
        /// Project name
        /// </summary>
        [Output("project")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// Technical contact emails of the project
        /// </summary>
        [Output("technicalEmails")]
        public Output<ImmutableArray<string>> TechnicalEmails { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Billing name and address of the project
        /// </summary>
        [Input("billingAddress")]
        public Input<string>? BillingAddress { get; set; }

        [Input("billingEmails")]
        private InputList<string>? _billingEmails;

        /// <summary>
        /// Billing contact emails of the project
        /// </summary>
        public InputList<string> BillingEmails
        {
            get => _billingEmails ?? (_billingEmails = new InputList<string>());
            set => _billingEmails = value;
        }

        /// <summary>
        /// Project root CA. This is used by some services like Kafka to sign service certificate
        /// </summary>
        [Input("caCert")]
        public Input<string>? CaCert { get; set; }

        /// <summary>
        /// Credit card ID
        /// </summary>
        [Input("cardId")]
        public Input<string>? CardId { get; set; }

        /// <summary>
        /// Copy properties from another project. Only has effect when a new project is created.
        /// </summary>
        [Input("copyFromProject")]
        public Input<string>? CopyFromProject { get; set; }

        /// <summary>
        /// Billing country code of the project
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("project", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        [Input("technicalEmails")]
        private InputList<string>? _technicalEmails;

        /// <summary>
        /// Technical contact emails of the project
        /// </summary>
        public InputList<string> TechnicalEmails
        {
            get => _technicalEmails ?? (_technicalEmails = new InputList<string>());
            set => _technicalEmails = value;
        }

        public ProjectArgs()
        {
        }
    }

    public sealed class ProjectState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Billing name and address of the project
        /// </summary>
        [Input("billingAddress")]
        public Input<string>? BillingAddress { get; set; }

        [Input("billingEmails")]
        private InputList<string>? _billingEmails;

        /// <summary>
        /// Billing contact emails of the project
        /// </summary>
        public InputList<string> BillingEmails
        {
            get => _billingEmails ?? (_billingEmails = new InputList<string>());
            set => _billingEmails = value;
        }

        /// <summary>
        /// Project root CA. This is used by some services like Kafka to sign service certificate
        /// </summary>
        [Input("caCert")]
        public Input<string>? CaCert { get; set; }

        /// <summary>
        /// Credit card ID
        /// </summary>
        [Input("cardId")]
        public Input<string>? CardId { get; set; }

        /// <summary>
        /// Copy properties from another project. Only has effect when a new project is created.
        /// </summary>
        [Input("copyFromProject")]
        public Input<string>? CopyFromProject { get; set; }

        /// <summary>
        /// Billing country code of the project
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("project")]
        public Input<string>? ProjectName { get; set; }

        [Input("technicalEmails")]
        private InputList<string>? _technicalEmails;

        /// <summary>
        /// Technical contact emails of the project
        /// </summary>
        public InputList<string> TechnicalEmails
        {
            get => _technicalEmails ?? (_technicalEmails = new InputList<string>());
            set => _technicalEmails = value;
        }

        public ProjectState()
        {
        }
    }
}
