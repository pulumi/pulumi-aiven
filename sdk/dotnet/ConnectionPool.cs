// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// Creates and manages a [connection pool](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling) in an Aiven for PostgreSQLÂ® service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Aiven.ConnectionPool("main", new()
    ///     {
    ///         Project = exampleProject.Project,
    ///         ServiceName = examplePostgres.ServiceName,
    ///         DatabaseName = mainAivenPgDatabase.DatabaseName,
    ///         PoolMode = "transaction",
    ///         PoolName = "example-pool",
    ///         PoolSize = 10,
    ///         Username = exampleUser.Username,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import aiven:index/connectionPool:ConnectionPool main PROJECT/SERVICE_NAME/POOL_NAME
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/connectionPool:ConnectionPool")]
    public partial class ConnectionPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The URI for connecting to the pool.
        /// </summary>
        [Output("connectionUri")]
        public Output<string> ConnectionUri { get; private set; } = null!;

        /// <summary>
        /// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The [operational mode](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling#pooling-modes). The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
        /// </summary>
        [Output("poolMode")]
        public Output<string?> PoolMode { get; private set; } = null!;

        /// <summary>
        /// Name of the pool. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("poolName")]
        public Output<string> PoolName { get; private set; } = null!;

        /// <summary>
        /// The number of PostgreSQL server connections this pool can use at a time. This does not affect the number of incoming connections. Each pool can handle a minimum of 5000 client connections. The default value is `10`.
        /// </summary>
        [Output("poolSize")]
        public Output<int?> PoolSize { get; private set; } = null!;

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectionPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectionPool(string name, ConnectionPoolArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/connectionPool:ConnectionPool", name, args ?? new ConnectionPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectionPool(string name, Input<string> id, ConnectionPoolState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/connectionPool:ConnectionPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "connectionUri",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectionPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectionPool Get(string name, Input<string> id, ConnectionPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectionPool(name, id, state, options);
        }
    }

    public sealed class ConnectionPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The [operational mode](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling#pooling-modes). The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
        /// </summary>
        [Input("poolMode")]
        public Input<string>? PoolMode { get; set; }

        /// <summary>
        /// Name of the pool. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// The number of PostgreSQL server connections this pool can use at a time. This does not affect the number of incoming connections. Each pool can handle a minimum of 5000 client connections. The default value is `10`.
        /// </summary>
        [Input("poolSize")]
        public Input<int>? PoolSize { get; set; }

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ConnectionPoolArgs()
        {
        }
        public static new ConnectionPoolArgs Empty => new ConnectionPoolArgs();
    }

    public sealed class ConnectionPoolState : global::Pulumi.ResourceArgs
    {
        [Input("connectionUri")]
        private Input<string>? _connectionUri;

        /// <summary>
        /// The URI for connecting to the pool.
        /// </summary>
        public Input<string>? ConnectionUri
        {
            get => _connectionUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _connectionUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The [operational mode](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling#pooling-modes). The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
        /// </summary>
        [Input("poolMode")]
        public Input<string>? PoolMode { get; set; }

        /// <summary>
        /// Name of the pool. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("poolName")]
        public Input<string>? PoolName { get; set; }

        /// <summary>
        /// The number of PostgreSQL server connections this pool can use at a time. This does not affect the number of incoming connections. Each pool can handle a minimum of 5000 client connections. The default value is `10`.
        /// </summary>
        [Input("poolSize")]
        public Input<int>? PoolSize { get; set; }

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ConnectionPoolState()
        {
        }
        public static new ConnectionPoolState Empty => new ConnectionPoolState();
    }
}
