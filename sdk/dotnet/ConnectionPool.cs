// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var mytestpool = new Aiven.ConnectionPool("mytestpool", new Aiven.ConnectionPoolArgs
    ///         {
    ///             DatabaseName = aiven_database.Mydatabase.Database_name,
    ///             PoolMode = "transaction",
    ///             PoolName = "mypool",
    ///             PoolSize = 10,
    ///             Project = aiven_project.Myproject.Project,
    ///             ServiceName = aiven_service.Myservice.Service_name,
    ///             Username = aiven_service_user.Myserviceuser.Username,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class ConnectionPool : Pulumi.CustomResource
    {
        /// <summary>
        /// URI for connecting to the pool
        /// </summary>
        [Output("connectionUri")]
        public Output<string> ConnectionUri { get; private set; } = null!;

        /// <summary>
        /// Name of the database the pool connects to
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// Mode the pool operates in (session, transaction, statement)
        /// </summary>
        [Output("poolMode")]
        public Output<string?> PoolMode { get; private set; } = null!;

        /// <summary>
        /// Name of the pool
        /// </summary>
        [Output("poolName")]
        public Output<string> PoolName { get; private set; } = null!;

        /// <summary>
        /// Number of connections the pool may create towards the backend server
        /// </summary>
        [Output("poolSize")]
        public Output<int?> PoolSize { get; private set; } = null!;

        /// <summary>
        /// Project to link the connection pool to
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Service to link the connection pool to
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Name of the service user used to connect to the database
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectionPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectionPool(string name, ConnectionPoolArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/connectionPool:ConnectionPool", name, args ?? new ConnectionPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectionPool(string name, Input<string> id, ConnectionPoolState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/connectionPool:ConnectionPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectionPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectionPool Get(string name, Input<string> id, ConnectionPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectionPool(name, id, state, options);
        }
    }

    public sealed class ConnectionPoolArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the database the pool connects to
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// Mode the pool operates in (session, transaction, statement)
        /// </summary>
        [Input("poolMode")]
        public Input<string>? PoolMode { get; set; }

        /// <summary>
        /// Name of the pool
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// Number of connections the pool may create towards the backend server
        /// </summary>
        [Input("poolSize")]
        public Input<int>? PoolSize { get; set; }

        /// <summary>
        /// Project to link the connection pool to
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Service to link the connection pool to
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Name of the service user used to connect to the database
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ConnectionPoolArgs()
        {
        }
    }

    public sealed class ConnectionPoolState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// URI for connecting to the pool
        /// </summary>
        [Input("connectionUri")]
        public Input<string>? ConnectionUri { get; set; }

        /// <summary>
        /// Name of the database the pool connects to
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Mode the pool operates in (session, transaction, statement)
        /// </summary>
        [Input("poolMode")]
        public Input<string>? PoolMode { get; set; }

        /// <summary>
        /// Name of the pool
        /// </summary>
        [Input("poolName")]
        public Input<string>? PoolName { get; set; }

        /// <summary>
        /// Number of connections the pool may create towards the backend server
        /// </summary>
        [Input("poolSize")]
        public Input<int>? PoolSize { get; set; }

        /// <summary>
        /// Project to link the connection pool to
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service to link the connection pool to
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Name of the service user used to connect to the database
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ConnectionPoolState()
        {
        }
    }
}
