// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public partial class ServiceIntegration : Pulumi.CustomResource
    {
        /// <summary>
        /// Destination endpoint for the integration (if any)
        /// </summary>
        [Output("destinationEndpointId")]
        public Output<string?> DestinationEndpointId { get; private set; } = null!;

        /// <summary>
        /// Destination service for the integration (if any)
        /// </summary>
        [Output("destinationServiceName")]
        public Output<string?> DestinationServiceName { get; private set; } = null!;

        /// <summary>
        /// Type of the service integration
        /// </summary>
        [Output("integrationType")]
        public Output<string> IntegrationType { get; private set; } = null!;

        /// <summary>
        /// Log integration specific user configurable settings
        /// </summary>
        [Output("logsUserConfig")]
        public Output<Outputs.ServiceIntegrationLogsUserConfig?> LogsUserConfig { get; private set; } = null!;

        /// <summary>
        /// Mirrormaker integration specific user configurable settings
        /// </summary>
        [Output("mirrormakerUserConfig")]
        public Output<Outputs.ServiceIntegrationMirrormakerUserConfig?> MirrormakerUserConfig { get; private set; } = null!;

        /// <summary>
        /// Project the integration belongs to
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Source endpoint for the integration (if any)
        /// </summary>
        [Output("sourceEndpointId")]
        public Output<string?> SourceEndpointId { get; private set; } = null!;

        /// <summary>
        /// Source service for the integration (if any)
        /// </summary>
        [Output("sourceServiceName")]
        public Output<string?> SourceServiceName { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceIntegration(string name, ServiceIntegrationArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/serviceIntegration:ServiceIntegration", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ServiceIntegration(string name, Input<string> id, ServiceIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/serviceIntegration:ServiceIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceIntegration Get(string name, Input<string> id, ServiceIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceIntegration(name, id, state, options);
        }
    }

    public sealed class ServiceIntegrationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Destination endpoint for the integration (if any)
        /// </summary>
        [Input("destinationEndpointId")]
        public Input<string>? DestinationEndpointId { get; set; }

        /// <summary>
        /// Destination service for the integration (if any)
        /// </summary>
        [Input("destinationServiceName")]
        public Input<string>? DestinationServiceName { get; set; }

        /// <summary>
        /// Type of the service integration
        /// </summary>
        [Input("integrationType", required: true)]
        public Input<string> IntegrationType { get; set; } = null!;

        /// <summary>
        /// Log integration specific user configurable settings
        /// </summary>
        [Input("logsUserConfig")]
        public Input<Inputs.ServiceIntegrationLogsUserConfigArgs>? LogsUserConfig { get; set; }

        /// <summary>
        /// Mirrormaker integration specific user configurable settings
        /// </summary>
        [Input("mirrormakerUserConfig")]
        public Input<Inputs.ServiceIntegrationMirrormakerUserConfigArgs>? MirrormakerUserConfig { get; set; }

        /// <summary>
        /// Project the integration belongs to
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Source endpoint for the integration (if any)
        /// </summary>
        [Input("sourceEndpointId")]
        public Input<string>? SourceEndpointId { get; set; }

        /// <summary>
        /// Source service for the integration (if any)
        /// </summary>
        [Input("sourceServiceName")]
        public Input<string>? SourceServiceName { get; set; }

        public ServiceIntegrationArgs()
        {
        }
    }

    public sealed class ServiceIntegrationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Destination endpoint for the integration (if any)
        /// </summary>
        [Input("destinationEndpointId")]
        public Input<string>? DestinationEndpointId { get; set; }

        /// <summary>
        /// Destination service for the integration (if any)
        /// </summary>
        [Input("destinationServiceName")]
        public Input<string>? DestinationServiceName { get; set; }

        /// <summary>
        /// Type of the service integration
        /// </summary>
        [Input("integrationType")]
        public Input<string>? IntegrationType { get; set; }

        /// <summary>
        /// Log integration specific user configurable settings
        /// </summary>
        [Input("logsUserConfig")]
        public Input<Inputs.ServiceIntegrationLogsUserConfigGetArgs>? LogsUserConfig { get; set; }

        /// <summary>
        /// Mirrormaker integration specific user configurable settings
        /// </summary>
        [Input("mirrormakerUserConfig")]
        public Input<Inputs.ServiceIntegrationMirrormakerUserConfigGetArgs>? MirrormakerUserConfig { get; set; }

        /// <summary>
        /// Project the integration belongs to
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Source endpoint for the integration (if any)
        /// </summary>
        [Input("sourceEndpointId")]
        public Input<string>? SourceEndpointId { get; set; }

        /// <summary>
        /// Source service for the integration (if any)
        /// </summary>
        [Input("sourceServiceName")]
        public Input<string>? SourceServiceName { get; set; }

        public ServiceIntegrationState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ServiceIntegrationLogsUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearchIndexDaysMax")]
        public Input<int>? ElasticsearchIndexDaysMax { get; set; }

        [Input("elasticsearchIndexPrefix")]
        public Input<string>? ElasticsearchIndexPrefix { get; set; }

        public ServiceIntegrationLogsUserConfigArgs()
        {
        }
    }

    public sealed class ServiceIntegrationLogsUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("elasticsearchIndexDaysMax")]
        public Input<int>? ElasticsearchIndexDaysMax { get; set; }

        [Input("elasticsearchIndexPrefix")]
        public Input<string>? ElasticsearchIndexPrefix { get; set; }

        public ServiceIntegrationLogsUserConfigGetArgs()
        {
        }
    }

    public sealed class ServiceIntegrationMirrormakerUserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("mirrormakerWhitelist")]
        public Input<string>? MirrormakerWhitelist { get; set; }

        public ServiceIntegrationMirrormakerUserConfigArgs()
        {
        }
    }

    public sealed class ServiceIntegrationMirrormakerUserConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("mirrormakerWhitelist")]
        public Input<string>? MirrormakerWhitelist { get; set; }

        public ServiceIntegrationMirrormakerUserConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ServiceIntegrationLogsUserConfig
    {
        public readonly int? ElasticsearchIndexDaysMax;
        public readonly string? ElasticsearchIndexPrefix;

        [OutputConstructor]
        private ServiceIntegrationLogsUserConfig(
            int? elasticsearchIndexDaysMax,
            string? elasticsearchIndexPrefix)
        {
            ElasticsearchIndexDaysMax = elasticsearchIndexDaysMax;
            ElasticsearchIndexPrefix = elasticsearchIndexPrefix;
        }
    }

    [OutputType]
    public sealed class ServiceIntegrationMirrormakerUserConfig
    {
        public readonly string? MirrormakerWhitelist;

        [OutputConstructor]
        private ServiceIntegrationMirrormakerUserConfig(string? mirrormakerWhitelist)
        {
            MirrormakerWhitelist = mirrormakerWhitelist;
        }
    }
    }
}
