// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// ## # Service Integration Resource
    /// 
    /// The Service Integration resource allows the creation and management of Aiven Service Integrations.
    /// 
    /// Service Integration defines an integration between two Aiven services or between Aiven service and an external
    /// integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service,
    /// getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to
    /// Elasticsearch, etc.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myintegration = new Aiven.ServiceIntegration("myintegration", new Aiven.ServiceIntegrationArgs
    ///         {
    ///             Project = aiven_project.Myproject.Project,
    ///             DestinationEndpointId = aiven_service_integration_endpoint.XX.Id,
    ///             IntegrationType = "datadog",
    ///             SourceServiceName = aiven_kafka.XXX.Service_name,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// &gt; **Note** For services running on `hobbiest` plan service integrations are not supported.
    /// </summary>
    [AivenResourceType("aiven:index/serviceIntegration:ServiceIntegration")]
    public partial class ServiceIntegration : Pulumi.CustomResource
    {
        /// <summary>
        /// Dashboard specific user configurable settings
        /// </summary>
        [Output("dashboardUserConfig")]
        public Output<Outputs.ServiceIntegrationDashboardUserConfig?> DashboardUserConfig { get; private set; } = null!;

        /// <summary>
        /// Dashboard specific user configurable settings
        /// </summary>
        [Output("datadogUserConfig")]
        public Output<Outputs.ServiceIntegrationDatadogUserConfig?> DatadogUserConfig { get; private set; } = null!;

        /// <summary>
        /// or `destination_service_name` - (Required) identifies the target side of the integration.
        /// Only either endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
        /// e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the target needs to be defined using the
        /// reference syntax described above to set up the dependency correctly.
        /// </summary>
        [Output("destinationEndpointId")]
        public Output<string?> DestinationEndpointId { get; private set; } = null!;

        /// <summary>
        /// Destination service for the integration (if any)
        /// </summary>
        [Output("destinationServiceName")]
        public Output<string?> DestinationServiceName { get; private set; } = null!;

        /// <summary>
        /// External AWS Cloudwatch logs specific user configurable settings
        /// </summary>
        [Output("externalAwsCloudwatchLogsUserConfig")]
        public Output<Outputs.ServiceIntegrationExternalAwsCloudwatchLogsUserConfig?> ExternalAwsCloudwatchLogsUserConfig { get; private set; } = null!;

        /// <summary>
        /// External Elasticsearch logs specific user configurable settings
        /// </summary>
        [Output("externalElasticsearchLogsUserConfig")]
        public Output<Outputs.ServiceIntegrationExternalElasticsearchLogsUserConfig?> ExternalElasticsearchLogsUserConfig { get; private set; } = null!;

        /// <summary>
        /// External Google Cloud Logging specific user configurable settings
        /// </summary>
        [Output("externalGoogleCloudLoggingUserConfig")]
        public Output<Outputs.ServiceIntegrationExternalGoogleCloudLoggingUserConfig?> ExternalGoogleCloudLoggingUserConfig { get; private set; } = null!;

        /// <summary>
        /// identifies the type of integration that is set up. Possible values include `dashboard`
        /// , `datadog`, `logs`, `metrics` and `mirrormaker`.
        /// </summary>
        [Output("integrationType")]
        public Output<string> IntegrationType { get; private set; } = null!;

        /// <summary>
        /// Kafka Connect specific user configurable settings
        /// </summary>
        [Output("kafkaConnectUserConfig")]
        public Output<Outputs.ServiceIntegrationKafkaConnectUserConfig?> KafkaConnectUserConfig { get; private set; } = null!;

        /// <summary>
        /// Kafka Logs specific user configurable settings
        /// </summary>
        [Output("kafkaLogsUserConfig")]
        public Output<Outputs.ServiceIntegrationKafkaLogsUserConfig?> KafkaLogsUserConfig { get; private set; } = null!;

        /// <summary>
        /// Mirrormaker 2 integration specific user configurable settings
        /// </summary>
        [Output("kafkaMirrormakerUserConfig")]
        public Output<Outputs.ServiceIntegrationKafkaMirrormakerUserConfig?> KafkaMirrormakerUserConfig { get; private set; } = null!;

        /// <summary>
        /// Log integration specific user configurable settings
        /// </summary>
        [Output("logsUserConfig")]
        public Output<Outputs.ServiceIntegrationLogsUserConfig?> LogsUserConfig { get; private set; } = null!;

        /// <summary>
        /// M3 aggregator specific user configurable settings
        /// </summary>
        [Output("m3aggregatorUserConfig")]
        public Output<Outputs.ServiceIntegrationM3aggregatorUserConfig?> M3aggregatorUserConfig { get; private set; } = null!;

        /// <summary>
        /// M3 coordinator specific user configurable settings
        /// </summary>
        [Output("m3coordinatorUserConfig")]
        public Output<Outputs.ServiceIntegrationM3coordinatorUserConfig?> M3coordinatorUserConfig { get; private set; } = null!;

        /// <summary>
        /// Metrics specific user configurable settings
        /// </summary>
        [Output("metricsUserConfig")]
        public Output<Outputs.ServiceIntegrationMetricsUserConfig?> MetricsUserConfig { get; private set; } = null!;

        /// <summary>
        /// Mirrormaker 1 integration specific user configurable settings
        /// </summary>
        [Output("mirrormakerUserConfig")]
        public Output<Outputs.ServiceIntegrationMirrormakerUserConfig?> MirrormakerUserConfig { get; private set; } = null!;

        /// <summary>
        /// defines the project the integration belongs to.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Prometheus coordinator specific user configurable settings
        /// </summary>
        [Output("prometheusUserConfig")]
        public Output<Outputs.ServiceIntegrationPrometheusUserConfig?> PrometheusUserConfig { get; private set; } = null!;

        /// <summary>
        /// PG Read replica specific user configurable settings
        /// </summary>
        [Output("readReplicaUserConfig")]
        public Output<Outputs.ServiceIntegrationReadReplicaUserConfig?> ReadReplicaUserConfig { get; private set; } = null!;

        /// <summary>
        /// RSyslog specific user configurable settings
        /// </summary>
        [Output("rsyslogUserConfig")]
        public Output<Outputs.ServiceIntegrationRsyslogUserConfig?> RsyslogUserConfig { get; private set; } = null!;

        /// <summary>
        /// Schema registry proxy specific user configurable settings
        /// </summary>
        [Output("schemaRegistryProxyUserConfig")]
        public Output<Outputs.ServiceIntegrationSchemaRegistryProxyUserConfig?> SchemaRegistryProxyUserConfig { get; private set; } = null!;

        /// <summary>
        /// Signalfx specific user configurable settings
        /// </summary>
        [Output("signalfxUserConfig")]
        public Output<Outputs.ServiceIntegrationSignalfxUserConfig?> SignalfxUserConfig { get; private set; } = null!;

        /// <summary>
        /// or `source_service_name` - (Optional) identifies the source side of the integration. Only either
        /// endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
        /// e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the source needs to be defined using the
        /// reference syntax described above to set up the dependency correctly.
        /// </summary>
        [Output("sourceEndpointId")]
        public Output<string?> SourceEndpointId { get; private set; } = null!;

        /// <summary>
        /// Source service for the integration (if any)
        /// </summary>
        [Output("sourceServiceName")]
        public Output<string?> SourceServiceName { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceIntegration(string name, ServiceIntegrationArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/serviceIntegration:ServiceIntegration", name, args ?? new ServiceIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceIntegration(string name, Input<string> id, ServiceIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/serviceIntegration:ServiceIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceIntegration Get(string name, Input<string> id, ServiceIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceIntegration(name, id, state, options);
        }
    }

    public sealed class ServiceIntegrationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dashboard specific user configurable settings
        /// </summary>
        [Input("dashboardUserConfig")]
        public Input<Inputs.ServiceIntegrationDashboardUserConfigArgs>? DashboardUserConfig { get; set; }

        /// <summary>
        /// Dashboard specific user configurable settings
        /// </summary>
        [Input("datadogUserConfig")]
        public Input<Inputs.ServiceIntegrationDatadogUserConfigArgs>? DatadogUserConfig { get; set; }

        /// <summary>
        /// or `destination_service_name` - (Required) identifies the target side of the integration.
        /// Only either endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
        /// e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the target needs to be defined using the
        /// reference syntax described above to set up the dependency correctly.
        /// </summary>
        [Input("destinationEndpointId")]
        public Input<string>? DestinationEndpointId { get; set; }

        /// <summary>
        /// Destination service for the integration (if any)
        /// </summary>
        [Input("destinationServiceName")]
        public Input<string>? DestinationServiceName { get; set; }

        /// <summary>
        /// External AWS Cloudwatch logs specific user configurable settings
        /// </summary>
        [Input("externalAwsCloudwatchLogsUserConfig")]
        public Input<Inputs.ServiceIntegrationExternalAwsCloudwatchLogsUserConfigArgs>? ExternalAwsCloudwatchLogsUserConfig { get; set; }

        /// <summary>
        /// External Elasticsearch logs specific user configurable settings
        /// </summary>
        [Input("externalElasticsearchLogsUserConfig")]
        public Input<Inputs.ServiceIntegrationExternalElasticsearchLogsUserConfigArgs>? ExternalElasticsearchLogsUserConfig { get; set; }

        /// <summary>
        /// External Google Cloud Logging specific user configurable settings
        /// </summary>
        [Input("externalGoogleCloudLoggingUserConfig")]
        public Input<Inputs.ServiceIntegrationExternalGoogleCloudLoggingUserConfigArgs>? ExternalGoogleCloudLoggingUserConfig { get; set; }

        /// <summary>
        /// identifies the type of integration that is set up. Possible values include `dashboard`
        /// , `datadog`, `logs`, `metrics` and `mirrormaker`.
        /// </summary>
        [Input("integrationType", required: true)]
        public Input<string> IntegrationType { get; set; } = null!;

        /// <summary>
        /// Kafka Connect specific user configurable settings
        /// </summary>
        [Input("kafkaConnectUserConfig")]
        public Input<Inputs.ServiceIntegrationKafkaConnectUserConfigArgs>? KafkaConnectUserConfig { get; set; }

        /// <summary>
        /// Kafka Logs specific user configurable settings
        /// </summary>
        [Input("kafkaLogsUserConfig")]
        public Input<Inputs.ServiceIntegrationKafkaLogsUserConfigArgs>? KafkaLogsUserConfig { get; set; }

        /// <summary>
        /// Mirrormaker 2 integration specific user configurable settings
        /// </summary>
        [Input("kafkaMirrormakerUserConfig")]
        public Input<Inputs.ServiceIntegrationKafkaMirrormakerUserConfigArgs>? KafkaMirrormakerUserConfig { get; set; }

        /// <summary>
        /// Log integration specific user configurable settings
        /// </summary>
        [Input("logsUserConfig")]
        public Input<Inputs.ServiceIntegrationLogsUserConfigArgs>? LogsUserConfig { get; set; }

        /// <summary>
        /// M3 aggregator specific user configurable settings
        /// </summary>
        [Input("m3aggregatorUserConfig")]
        public Input<Inputs.ServiceIntegrationM3aggregatorUserConfigArgs>? M3aggregatorUserConfig { get; set; }

        /// <summary>
        /// M3 coordinator specific user configurable settings
        /// </summary>
        [Input("m3coordinatorUserConfig")]
        public Input<Inputs.ServiceIntegrationM3coordinatorUserConfigArgs>? M3coordinatorUserConfig { get; set; }

        /// <summary>
        /// Metrics specific user configurable settings
        /// </summary>
        [Input("metricsUserConfig")]
        public Input<Inputs.ServiceIntegrationMetricsUserConfigArgs>? MetricsUserConfig { get; set; }

        /// <summary>
        /// Mirrormaker 1 integration specific user configurable settings
        /// </summary>
        [Input("mirrormakerUserConfig")]
        public Input<Inputs.ServiceIntegrationMirrormakerUserConfigArgs>? MirrormakerUserConfig { get; set; }

        /// <summary>
        /// defines the project the integration belongs to.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Prometheus coordinator specific user configurable settings
        /// </summary>
        [Input("prometheusUserConfig")]
        public Input<Inputs.ServiceIntegrationPrometheusUserConfigArgs>? PrometheusUserConfig { get; set; }

        /// <summary>
        /// PG Read replica specific user configurable settings
        /// </summary>
        [Input("readReplicaUserConfig")]
        public Input<Inputs.ServiceIntegrationReadReplicaUserConfigArgs>? ReadReplicaUserConfig { get; set; }

        /// <summary>
        /// RSyslog specific user configurable settings
        /// </summary>
        [Input("rsyslogUserConfig")]
        public Input<Inputs.ServiceIntegrationRsyslogUserConfigArgs>? RsyslogUserConfig { get; set; }

        /// <summary>
        /// Schema registry proxy specific user configurable settings
        /// </summary>
        [Input("schemaRegistryProxyUserConfig")]
        public Input<Inputs.ServiceIntegrationSchemaRegistryProxyUserConfigArgs>? SchemaRegistryProxyUserConfig { get; set; }

        /// <summary>
        /// Signalfx specific user configurable settings
        /// </summary>
        [Input("signalfxUserConfig")]
        public Input<Inputs.ServiceIntegrationSignalfxUserConfigArgs>? SignalfxUserConfig { get; set; }

        /// <summary>
        /// or `source_service_name` - (Optional) identifies the source side of the integration. Only either
        /// endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
        /// e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the source needs to be defined using the
        /// reference syntax described above to set up the dependency correctly.
        /// </summary>
        [Input("sourceEndpointId")]
        public Input<string>? SourceEndpointId { get; set; }

        /// <summary>
        /// Source service for the integration (if any)
        /// </summary>
        [Input("sourceServiceName")]
        public Input<string>? SourceServiceName { get; set; }

        public ServiceIntegrationArgs()
        {
        }
    }

    public sealed class ServiceIntegrationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dashboard specific user configurable settings
        /// </summary>
        [Input("dashboardUserConfig")]
        public Input<Inputs.ServiceIntegrationDashboardUserConfigGetArgs>? DashboardUserConfig { get; set; }

        /// <summary>
        /// Dashboard specific user configurable settings
        /// </summary>
        [Input("datadogUserConfig")]
        public Input<Inputs.ServiceIntegrationDatadogUserConfigGetArgs>? DatadogUserConfig { get; set; }

        /// <summary>
        /// or `destination_service_name` - (Required) identifies the target side of the integration.
        /// Only either endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
        /// e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the target needs to be defined using the
        /// reference syntax described above to set up the dependency correctly.
        /// </summary>
        [Input("destinationEndpointId")]
        public Input<string>? DestinationEndpointId { get; set; }

        /// <summary>
        /// Destination service for the integration (if any)
        /// </summary>
        [Input("destinationServiceName")]
        public Input<string>? DestinationServiceName { get; set; }

        /// <summary>
        /// External AWS Cloudwatch logs specific user configurable settings
        /// </summary>
        [Input("externalAwsCloudwatchLogsUserConfig")]
        public Input<Inputs.ServiceIntegrationExternalAwsCloudwatchLogsUserConfigGetArgs>? ExternalAwsCloudwatchLogsUserConfig { get; set; }

        /// <summary>
        /// External Elasticsearch logs specific user configurable settings
        /// </summary>
        [Input("externalElasticsearchLogsUserConfig")]
        public Input<Inputs.ServiceIntegrationExternalElasticsearchLogsUserConfigGetArgs>? ExternalElasticsearchLogsUserConfig { get; set; }

        /// <summary>
        /// External Google Cloud Logging specific user configurable settings
        /// </summary>
        [Input("externalGoogleCloudLoggingUserConfig")]
        public Input<Inputs.ServiceIntegrationExternalGoogleCloudLoggingUserConfigGetArgs>? ExternalGoogleCloudLoggingUserConfig { get; set; }

        /// <summary>
        /// identifies the type of integration that is set up. Possible values include `dashboard`
        /// , `datadog`, `logs`, `metrics` and `mirrormaker`.
        /// </summary>
        [Input("integrationType")]
        public Input<string>? IntegrationType { get; set; }

        /// <summary>
        /// Kafka Connect specific user configurable settings
        /// </summary>
        [Input("kafkaConnectUserConfig")]
        public Input<Inputs.ServiceIntegrationKafkaConnectUserConfigGetArgs>? KafkaConnectUserConfig { get; set; }

        /// <summary>
        /// Kafka Logs specific user configurable settings
        /// </summary>
        [Input("kafkaLogsUserConfig")]
        public Input<Inputs.ServiceIntegrationKafkaLogsUserConfigGetArgs>? KafkaLogsUserConfig { get; set; }

        /// <summary>
        /// Mirrormaker 2 integration specific user configurable settings
        /// </summary>
        [Input("kafkaMirrormakerUserConfig")]
        public Input<Inputs.ServiceIntegrationKafkaMirrormakerUserConfigGetArgs>? KafkaMirrormakerUserConfig { get; set; }

        /// <summary>
        /// Log integration specific user configurable settings
        /// </summary>
        [Input("logsUserConfig")]
        public Input<Inputs.ServiceIntegrationLogsUserConfigGetArgs>? LogsUserConfig { get; set; }

        /// <summary>
        /// M3 aggregator specific user configurable settings
        /// </summary>
        [Input("m3aggregatorUserConfig")]
        public Input<Inputs.ServiceIntegrationM3aggregatorUserConfigGetArgs>? M3aggregatorUserConfig { get; set; }

        /// <summary>
        /// M3 coordinator specific user configurable settings
        /// </summary>
        [Input("m3coordinatorUserConfig")]
        public Input<Inputs.ServiceIntegrationM3coordinatorUserConfigGetArgs>? M3coordinatorUserConfig { get; set; }

        /// <summary>
        /// Metrics specific user configurable settings
        /// </summary>
        [Input("metricsUserConfig")]
        public Input<Inputs.ServiceIntegrationMetricsUserConfigGetArgs>? MetricsUserConfig { get; set; }

        /// <summary>
        /// Mirrormaker 1 integration specific user configurable settings
        /// </summary>
        [Input("mirrormakerUserConfig")]
        public Input<Inputs.ServiceIntegrationMirrormakerUserConfigGetArgs>? MirrormakerUserConfig { get; set; }

        /// <summary>
        /// defines the project the integration belongs to.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Prometheus coordinator specific user configurable settings
        /// </summary>
        [Input("prometheusUserConfig")]
        public Input<Inputs.ServiceIntegrationPrometheusUserConfigGetArgs>? PrometheusUserConfig { get; set; }

        /// <summary>
        /// PG Read replica specific user configurable settings
        /// </summary>
        [Input("readReplicaUserConfig")]
        public Input<Inputs.ServiceIntegrationReadReplicaUserConfigGetArgs>? ReadReplicaUserConfig { get; set; }

        /// <summary>
        /// RSyslog specific user configurable settings
        /// </summary>
        [Input("rsyslogUserConfig")]
        public Input<Inputs.ServiceIntegrationRsyslogUserConfigGetArgs>? RsyslogUserConfig { get; set; }

        /// <summary>
        /// Schema registry proxy specific user configurable settings
        /// </summary>
        [Input("schemaRegistryProxyUserConfig")]
        public Input<Inputs.ServiceIntegrationSchemaRegistryProxyUserConfigGetArgs>? SchemaRegistryProxyUserConfig { get; set; }

        /// <summary>
        /// Signalfx specific user configurable settings
        /// </summary>
        [Input("signalfxUserConfig")]
        public Input<Inputs.ServiceIntegrationSignalfxUserConfigGetArgs>? SignalfxUserConfig { get; set; }

        /// <summary>
        /// or `source_service_name` - (Optional) identifies the source side of the integration. Only either
        /// endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
        /// e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the source needs to be defined using the
        /// reference syntax described above to set up the dependency correctly.
        /// </summary>
        [Input("sourceEndpointId")]
        public Input<string>? SourceEndpointId { get; set; }

        /// <summary>
        /// Source service for the integration (if any)
        /// </summary>
        [Input("sourceServiceName")]
        public Input<string>? SourceServiceName { get; set; }

        public ServiceIntegrationState()
        {
        }
    }
}
