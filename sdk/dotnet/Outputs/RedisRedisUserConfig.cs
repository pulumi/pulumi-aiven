// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class RedisRedisUserConfig
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        public readonly string? AdditionalBackupRegions;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<Outputs.RedisRedisUserConfigIpFilterObject> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilterStrings;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Migrate data from existing server
        /// </summary>
        public readonly Outputs.RedisRedisUserConfigMigration? Migration;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.RedisRedisUserConfigPrivateAccess? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.RedisRedisUserConfigPrivatelinkAccess? PrivatelinkAccess;
        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
        /// </summary>
        public readonly string? ProjectToForkFrom;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.RedisRedisUserConfigPublicAccess? PublicAccess;
        /// <summary>
        /// Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
        /// </summary>
        public readonly string? RecoveryBasebackupName;
        /// <summary>
        /// Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
        /// </summary>
        public readonly string? RedisAclChannelsDefault;
        /// <summary>
        /// Set Redis IO thread count. Changing this will cause a restart of the Redis service. Example: `1`.
        /// </summary>
        public readonly int? RedisIoThreads;
        /// <summary>
        /// LFU maxmemory-policy counter decay time in minutes. Default: `1`.
        /// </summary>
        public readonly int? RedisLfuDecayTime;
        /// <summary>
        /// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
        /// </summary>
        public readonly int? RedisLfuLogFactor;
        /// <summary>
        /// Enum: `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`. Redis maxmemory-policy. Default: `noeviction`.
        /// </summary>
        public readonly string? RedisMaxmemoryPolicy;
        /// <summary>
        /// Set notify-keyspace-events option.
        /// </summary>
        public readonly string? RedisNotifyKeyspaceEvents;
        /// <summary>
        /// Set number of Redis databases. Changing this will cause a restart of the Redis service. Example: `16`.
        /// </summary>
        public readonly int? RedisNumberOfDatabases;
        /// <summary>
        /// Enum: `off`, `rdb`. When persistence is `rdb`, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is `off`, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can't be forked.
        /// </summary>
        public readonly string? RedisPersistence;
        /// <summary>
        /// Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
        /// </summary>
        public readonly int? RedisPubsubClientOutputBufferLimit;
        /// <summary>
        /// Require SSL to access Redis. Default: `true`.
        /// </summary>
        public readonly bool? RedisSsl;
        /// <summary>
        /// Redis idle connection timeout in seconds. Default: `300`.
        /// </summary>
        public readonly int? RedisTimeout;
        /// <summary>
        /// Enum: `7.0`, and newer. Redis major version.
        /// </summary>
        public readonly string? RedisVersion;
        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
        /// </summary>
        public readonly string? ServiceToForkFrom;
        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        public readonly bool? StaticIps;

        [OutputConstructor]
        private RedisRedisUserConfig(
            string? additionalBackupRegions,

            ImmutableArray<Outputs.RedisRedisUserConfigIpFilterObject> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            Outputs.RedisRedisUserConfigMigration? migration,

            Outputs.RedisRedisUserConfigPrivateAccess? privateAccess,

            Outputs.RedisRedisUserConfigPrivatelinkAccess? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.RedisRedisUserConfigPublicAccess? publicAccess,

            string? recoveryBasebackupName,

            string? redisAclChannelsDefault,

            int? redisIoThreads,

            int? redisLfuDecayTime,

            int? redisLfuLogFactor,

            string? redisMaxmemoryPolicy,

            string? redisNotifyKeyspaceEvents,

            int? redisNumberOfDatabases,

            string? redisPersistence,

            int? redisPubsubClientOutputBufferLimit,

            bool? redisSsl,

            int? redisTimeout,

            string? redisVersion,

            bool? serviceLog,

            string? serviceToForkFrom,

            bool? staticIps)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            Migration = migration;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            RedisAclChannelsDefault = redisAclChannelsDefault;
            RedisIoThreads = redisIoThreads;
            RedisLfuDecayTime = redisLfuDecayTime;
            RedisLfuLogFactor = redisLfuLogFactor;
            RedisMaxmemoryPolicy = redisMaxmemoryPolicy;
            RedisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            RedisNumberOfDatabases = redisNumberOfDatabases;
            RedisPersistence = redisPersistence;
            RedisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            RedisSsl = redisSsl;
            RedisTimeout = redisTimeout;
            RedisVersion = redisVersion;
            ServiceLog = serviceLog;
            ServiceToForkFrom = serviceToForkFrom;
            StaticIps = staticIps;
        }
    }
}
