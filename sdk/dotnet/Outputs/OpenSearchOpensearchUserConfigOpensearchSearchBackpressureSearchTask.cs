// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class OpenSearchOpensearchUserConfigOpensearchSearchBackpressureSearchTask
    {
        /// <summary>
        /// The maximum number of search tasks to cancel in a single iteration of the observer thread. Default is 5.0.
        /// </summary>
        public readonly double? CancellationBurst;
        /// <summary>
        /// The maximum number of search tasks to cancel per millisecond of elapsed time. Default is 0.003.
        /// </summary>
        public readonly double? CancellationRate;
        /// <summary>
        /// The maximum number of search tasks to cancel, as a percentage of successful search task completions. Default is 0.1.
        /// </summary>
        public readonly double? CancellationRatio;
        /// <summary>
        /// The CPU usage threshold (in milliseconds) required for an individual parent task before it is considered for cancellation. Default is 30000.
        /// </summary>
        public readonly int? CpuTimeMillisThreshold;
        /// <summary>
        /// The elapsed time threshold (in milliseconds) required for an individual parent task before it is considered for cancellation. Default is 45000.
        /// </summary>
        public readonly int? ElapsedTimeMillisThreshold;
        /// <summary>
        /// The window size used to calculate the rolling average of the heap usage for the completed parent tasks. Default is 10.
        /// </summary>
        public readonly int? HeapMovingAverageWindowSize;
        /// <summary>
        /// The heap usage threshold (as a percentage) required for an individual parent task before it is considered for cancellation. Default is 0.2.
        /// </summary>
        public readonly double? HeapPercentThreshold;
        /// <summary>
        /// The heap usage variance required for an individual parent task before it is considered for cancellation. A task is considered for cancellation when taskHeapUsage is greater than or equal to heapUsageMovingAverage * variance. Default is 2.0.
        /// </summary>
        public readonly double? HeapVariance;
        /// <summary>
        /// The heap usage threshold (as a percentage) required for the sum of heap usages of all search tasks before cancellation is applied. Default is 0.5.
        /// </summary>
        public readonly double? TotalHeapPercentThreshold;

        [OutputConstructor]
        private OpenSearchOpensearchUserConfigOpensearchSearchBackpressureSearchTask(
            double? cancellationBurst,

            double? cancellationRate,

            double? cancellationRatio,

            int? cpuTimeMillisThreshold,

            int? elapsedTimeMillisThreshold,

            int? heapMovingAverageWindowSize,

            double? heapPercentThreshold,

            double? heapVariance,

            double? totalHeapPercentThreshold)
        {
            CancellationBurst = cancellationBurst;
            CancellationRate = cancellationRate;
            CancellationRatio = cancellationRatio;
            CpuTimeMillisThreshold = cpuTimeMillisThreshold;
            ElapsedTimeMillisThreshold = elapsedTimeMillisThreshold;
            HeapMovingAverageWindowSize = heapMovingAverageWindowSize;
            HeapPercentThreshold = heapPercentThreshold;
            HeapVariance = heapVariance;
            TotalHeapPercentThreshold = totalHeapPercentThreshold;
        }
    }
}
