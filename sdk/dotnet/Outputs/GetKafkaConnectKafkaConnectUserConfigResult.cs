// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetKafkaConnectKafkaConnectUserConfigResult
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        public readonly string? AdditionalBackupRegions;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKafkaConnectKafkaConnectUserConfigIpFilterObjectResult> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilterStrings;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Kafka Connect configuration values
        /// </summary>
        public readonly Outputs.GetKafkaConnectKafkaConnectUserConfigKafkaConnectResult? KafkaConnect;
        /// <summary>
        /// The plugin selected by the user
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKafkaConnectKafkaConnectUserConfigPluginVersionResult> PluginVersions;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.GetKafkaConnectKafkaConnectUserConfigPrivateAccessResult? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.GetKafkaConnectKafkaConnectUserConfigPrivatelinkAccessResult? PrivatelinkAccess;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.GetKafkaConnectKafkaConnectUserConfigPublicAccessResult? PublicAccess;
        public readonly ImmutableArray<Outputs.GetKafkaConnectKafkaConnectUserConfigSecretProviderResult> SecretProviders;
        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        public readonly bool? StaticIps;

        [OutputConstructor]
        private GetKafkaConnectKafkaConnectUserConfigResult(
            string? additionalBackupRegions,

            ImmutableArray<Outputs.GetKafkaConnectKafkaConnectUserConfigIpFilterObjectResult> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            Outputs.GetKafkaConnectKafkaConnectUserConfigKafkaConnectResult? kafkaConnect,

            ImmutableArray<Outputs.GetKafkaConnectKafkaConnectUserConfigPluginVersionResult> pluginVersions,

            Outputs.GetKafkaConnectKafkaConnectUserConfigPrivateAccessResult? privateAccess,

            Outputs.GetKafkaConnectKafkaConnectUserConfigPrivatelinkAccessResult? privatelinkAccess,

            Outputs.GetKafkaConnectKafkaConnectUserConfigPublicAccessResult? publicAccess,

            ImmutableArray<Outputs.GetKafkaConnectKafkaConnectUserConfigSecretProviderResult> secretProviders,

            bool? serviceLog,

            bool? staticIps)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            KafkaConnect = kafkaConnect;
            PluginVersions = pluginVersions;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            PublicAccess = publicAccess;
            SecretProviders = secretProviders;
            ServiceLog = serviceLog;
            StaticIps = staticIps;
        }
    }
}
