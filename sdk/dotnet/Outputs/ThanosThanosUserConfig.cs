// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class ThanosThanosUserConfig
    {
        /// <summary>
        /// ThanosCompactor
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigCompactor? Compactor;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<Outputs.ThanosThanosUserConfigIpFilterObject> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilterStrings;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// After exceeding the limit a service alert is going to be raised (0 means not set).
        /// </summary>
        public readonly int? ObjectStorageUsageAlertThresholdGb;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigPublicAccess? PublicAccess;
        /// <summary>
        /// ThanosQuery
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigQuery? Query;
        /// <summary>
        /// ThanosQueryFrontend
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigQueryFrontend? QueryFrontend;
        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        public readonly bool? StaticIps;

        [OutputConstructor]
        private ThanosThanosUserConfig(
            Outputs.ThanosThanosUserConfigCompactor? compactor,

            ImmutableArray<Outputs.ThanosThanosUserConfigIpFilterObject> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            int? objectStorageUsageAlertThresholdGb,

            Outputs.ThanosThanosUserConfigPublicAccess? publicAccess,

            Outputs.ThanosThanosUserConfigQuery? query,

            Outputs.ThanosThanosUserConfigQueryFrontend? queryFrontend,

            bool? serviceLog,

            bool? staticIps)
        {
            Compactor = compactor;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            ObjectStorageUsageAlertThresholdGb = objectStorageUsageAlertThresholdGb;
            PublicAccess = publicAccess;
            Query = query;
            QueryFrontend = queryFrontend;
            ServiceLog = serviceLog;
            StaticIps = staticIps;
        }
    }
}
