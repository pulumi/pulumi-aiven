// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class ThanosThanosUserConfig
    {
        /// <summary>
        /// Configuration options for Thanos Compactor
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigCompactor? Compactor;
        /// <summary>
        /// Environmental variables.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Env;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<Outputs.ThanosThanosUserConfigIpFilterObject> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilterStrings;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// After exceeding the limit a service alert is going to be raised (0 means not set).
        /// </summary>
        public readonly int? ObjectStorageUsageAlertThresholdGb;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigPrivateAccess? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigPrivatelinkAccess? PrivatelinkAccess;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigPublicAccess? PublicAccess;
        /// <summary>
        /// Configuration options for Thanos Query
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigQuery? Query;
        /// <summary>
        /// Configuration options for Thanos Query Frontend
        /// </summary>
        public readonly Outputs.ThanosThanosUserConfigQueryFrontend? QueryFrontend;
        /// <summary>
        /// Common configuration options for Thanos Receive.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ReceiverIngesting;
        /// <summary>
        /// Configuration options for Thanos Receive Routing.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ReceiverRouting;
        /// <summary>
        /// Configuration options for Thanos Ruler.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Ruler;
        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        public readonly bool? StaticIps;
        /// <summary>
        /// Configuration options for Thanos Store.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Store;

        [OutputConstructor]
        private ThanosThanosUserConfig(
            Outputs.ThanosThanosUserConfigCompactor? compactor,

            ImmutableDictionary<string, string>? env,

            ImmutableArray<Outputs.ThanosThanosUserConfigIpFilterObject> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            int? objectStorageUsageAlertThresholdGb,

            Outputs.ThanosThanosUserConfigPrivateAccess? privateAccess,

            Outputs.ThanosThanosUserConfigPrivatelinkAccess? privatelinkAccess,

            Outputs.ThanosThanosUserConfigPublicAccess? publicAccess,

            Outputs.ThanosThanosUserConfigQuery? query,

            Outputs.ThanosThanosUserConfigQueryFrontend? queryFrontend,

            ImmutableDictionary<string, string>? receiverIngesting,

            ImmutableDictionary<string, string>? receiverRouting,

            ImmutableDictionary<string, string>? ruler,

            bool? serviceLog,

            bool? staticIps,

            ImmutableDictionary<string, string>? store)
        {
            Compactor = compactor;
            Env = env;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            ObjectStorageUsageAlertThresholdGb = objectStorageUsageAlertThresholdGb;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            PublicAccess = publicAccess;
            Query = query;
            QueryFrontend = queryFrontend;
            ReceiverIngesting = receiverIngesting;
            ReceiverRouting = receiverRouting;
            Ruler = ruler;
            ServiceLog = serviceLog;
            StaticIps = staticIps;
            Store = store;
        }
    }
}
