// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GrafanaGrafanaUserConfig
    {
        /// <summary>
        /// Enable or disable Grafana alerting functionality
        /// </summary>
        public readonly string? AlertingEnabled;
        /// <summary>
        /// Default error or timeout setting for new alerting rules
        /// </summary>
        public readonly string? AlertingErrorOrTimeout;
        public readonly string? AlertingMaxAnnotationsToKeep;
        /// <summary>
        /// Default value for 'no data or null values' for
        /// new alerting rules
        /// </summary>
        public readonly string? AlertingNodataOrNullvalues;
        /// <summary>
        /// Allow embedding Grafana dashboards with iframe/frame/object/embed 
        /// tags. Disabled by default to limit impact of clickjacking
        /// </summary>
        public readonly string? AllowEmbedding;
        public readonly Outputs.GrafanaGrafanaUserConfigAuthAzuread? AuthAzuread;
        /// <summary>
        /// Enable or disable basic authentication form, used by Grafana 
        /// built-in login.
        /// </summary>
        public readonly string? AuthBasicEnabled;
        /// <summary>
        /// Generic OAuth integration.
        /// </summary>
        public readonly Outputs.GrafanaGrafanaUserConfigAuthGenericOauth? AuthGenericOauth;
        /// <summary>
        /// Automatically sign-up users on successful sign-in
        /// </summary>
        public readonly Outputs.GrafanaGrafanaUserConfigAuthGithub? AuthGithub;
        /// <summary>
        /// GitLab Auth integration.
        /// </summary>
        public readonly Outputs.GrafanaGrafanaUserConfigAuthGitlab? AuthGitlab;
        /// <summary>
        /// Google Auth integration
        /// </summary>
        public readonly Outputs.GrafanaGrafanaUserConfigAuthGoogle? AuthGoogle;
        /// <summary>
        /// Cookie SameSite attribute: 'strict' prevents sending cookie for 
        /// cross-site requests, effectively disabling direct linking from other sites to Grafana. 'lax' is the default value.
        /// </summary>
        public readonly string? CookieSamesite;
        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        /// </summary>
        public readonly string? CustomDomain;
        /// <summary>
        /// Signed sequence of decimal numbers, followed 
        /// by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h.
        /// </summary>
        public readonly string? DashboardsMinRefreshInterval;
        /// <summary>
        /// Dashboard versions to keep per dashboard.
        /// </summary>
        public readonly string? DashboardsVersionsToKeep;
        /// <summary>
        /// Send 'X-Grafana-User' header to data source.
        /// </summary>
        public readonly string? DataproxySendUserHeader;
        /// <summary>
        /// Timeout for data proxy requests in seconds.
        /// </summary>
        public readonly string? DataproxyTimeout;
        public readonly Outputs.GrafanaGrafanaUserConfigDateFormats? DateFormats;
        /// <summary>
        /// Set to true to disable gravatar. Defaults to false 
        /// (gravatar is enabled).
        /// </summary>
        public readonly string? DisableGravatar;
        /// <summary>
        /// Editors can manage folders, teams and dashboards created by them.
        /// </summary>
        public readonly string? EditorsCanAdmin;
        /// <summary>
        /// External image store settings
        /// </summary>
        public readonly Outputs.GrafanaGrafanaUserConfigExternalImageStorage? ExternalImageStorage;
        /// <summary>
        /// Google Analytics Universal Analytics ID for tracking Grafana usage
        /// </summary>
        public readonly string? GoogleAnalyticsUaId;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Enable Grafana /metrics endpoint
        /// </summary>
        public readonly string? MetricsEnabled;
        public readonly Outputs.GrafanaGrafanaUserConfigPrivateAccess? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.GrafanaGrafanaUserConfigPrivatelinkAccess? PrivatelinkAccess;
        /// <summary>
        /// Name of another project to fork a service from. This has 
        /// effect only when a new service is being created.
        /// </summary>
        public readonly string? ProjectToForkFrom;
        /// <summary>
        /// Allow access to selected service ports from the public Internet.
        /// </summary>
        public readonly Outputs.GrafanaGrafanaUserConfigPublicAccess? PublicAccess;
        /// <summary>
        /// Name of the basebackup to restore in forked service.
        /// </summary>
        public readonly string? RecoveryBasebackupName;
        /// <summary>
        /// Name of another service to fork from. This has effect only 
        /// when a new service is being created.
        /// </summary>
        public readonly string? ServiceToForkFrom;
        /// <summary>
        /// SMTP server settings.
        /// </summary>
        public readonly Outputs.GrafanaGrafanaUserConfigSmtpServer? SmtpServer;
        public readonly string? StaticIps;
        /// <summary>
        /// Auto-assign new users on signup to main organization. 
        /// Defaults to false.
        /// </summary>
        public readonly string? UserAutoAssignOrg;
        /// <summary>
        /// Set role for new signups. Defaults to Viewer.
        /// </summary>
        public readonly string? UserAutoAssignOrgRole;
        /// <summary>
        /// Users with view-only permission can edit but not save dashboards.
        /// </summary>
        public readonly string? ViewersCanEdit;

        [OutputConstructor]
        private GrafanaGrafanaUserConfig(
            string? alertingEnabled,

            string? alertingErrorOrTimeout,

            string? alertingMaxAnnotationsToKeep,

            string? alertingNodataOrNullvalues,

            string? allowEmbedding,

            Outputs.GrafanaGrafanaUserConfigAuthAzuread? authAzuread,

            string? authBasicEnabled,

            Outputs.GrafanaGrafanaUserConfigAuthGenericOauth? authGenericOauth,

            Outputs.GrafanaGrafanaUserConfigAuthGithub? authGithub,

            Outputs.GrafanaGrafanaUserConfigAuthGitlab? authGitlab,

            Outputs.GrafanaGrafanaUserConfigAuthGoogle? authGoogle,

            string? cookieSamesite,

            string? customDomain,

            string? dashboardsMinRefreshInterval,

            string? dashboardsVersionsToKeep,

            string? dataproxySendUserHeader,

            string? dataproxyTimeout,

            Outputs.GrafanaGrafanaUserConfigDateFormats? dateFormats,

            string? disableGravatar,

            string? editorsCanAdmin,

            Outputs.GrafanaGrafanaUserConfigExternalImageStorage? externalImageStorage,

            string? googleAnalyticsUaId,

            ImmutableArray<string> ipFilters,

            string? metricsEnabled,

            Outputs.GrafanaGrafanaUserConfigPrivateAccess? privateAccess,

            Outputs.GrafanaGrafanaUserConfigPrivatelinkAccess? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.GrafanaGrafanaUserConfigPublicAccess? publicAccess,

            string? recoveryBasebackupName,

            string? serviceToForkFrom,

            Outputs.GrafanaGrafanaUserConfigSmtpServer? smtpServer,

            string? staticIps,

            string? userAutoAssignOrg,

            string? userAutoAssignOrgRole,

            string? viewersCanEdit)
        {
            AlertingEnabled = alertingEnabled;
            AlertingErrorOrTimeout = alertingErrorOrTimeout;
            AlertingMaxAnnotationsToKeep = alertingMaxAnnotationsToKeep;
            AlertingNodataOrNullvalues = alertingNodataOrNullvalues;
            AllowEmbedding = allowEmbedding;
            AuthAzuread = authAzuread;
            AuthBasicEnabled = authBasicEnabled;
            AuthGenericOauth = authGenericOauth;
            AuthGithub = authGithub;
            AuthGitlab = authGitlab;
            AuthGoogle = authGoogle;
            CookieSamesite = cookieSamesite;
            CustomDomain = customDomain;
            DashboardsMinRefreshInterval = dashboardsMinRefreshInterval;
            DashboardsVersionsToKeep = dashboardsVersionsToKeep;
            DataproxySendUserHeader = dataproxySendUserHeader;
            DataproxyTimeout = dataproxyTimeout;
            DateFormats = dateFormats;
            DisableGravatar = disableGravatar;
            EditorsCanAdmin = editorsCanAdmin;
            ExternalImageStorage = externalImageStorage;
            GoogleAnalyticsUaId = googleAnalyticsUaId;
            IpFilters = ipFilters;
            MetricsEnabled = metricsEnabled;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            ServiceToForkFrom = serviceToForkFrom;
            SmtpServer = smtpServer;
            StaticIps = staticIps;
            UserAutoAssignOrg = userAutoAssignOrg;
            UserAutoAssignOrgRole = userAutoAssignOrgRole;
            ViewersCanEdit = viewersCanEdit;
        }
    }
}
