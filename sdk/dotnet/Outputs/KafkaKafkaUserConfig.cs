// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class KafkaKafkaUserConfig
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        public readonly string? AdditionalBackupRegions;
        /// <summary>
        /// Allow access to read Kafka topic messages in the Aiven Console and REST API.
        /// </summary>
        public readonly bool? AivenKafkaTopicMessages;
        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        /// </summary>
        public readonly string? CustomDomain;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        /// </summary>
        public readonly ImmutableArray<Outputs.KafkaKafkaUserConfigIpFilterObject> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        /// </summary>
        public readonly ImmutableArray<string> IpFilterStrings;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Kafka broker configuration values
        /// </summary>
        public readonly Outputs.KafkaKafkaUserConfigKafka? Kafka;
        /// <summary>
        /// Kafka authentication methods
        /// </summary>
        public readonly Outputs.KafkaKafkaUserConfigKafkaAuthenticationMethods? KafkaAuthenticationMethods;
        /// <summary>
        /// Enable Kafka Connect service. The default value is `false`.
        /// </summary>
        public readonly bool? KafkaConnect;
        /// <summary>
        /// Kafka Connect configuration values
        /// </summary>
        public readonly Outputs.KafkaKafkaUserConfigKafkaConnectConfig? KafkaConnectConfig;
        /// <summary>
        /// Enable Kafka-REST service. The default value is `false`.
        /// </summary>
        public readonly bool? KafkaRest;
        /// <summary>
        /// Enable authorization in Kafka-REST service.
        /// </summary>
        public readonly bool? KafkaRestAuthorization;
        /// <summary>
        /// Kafka REST configuration
        /// </summary>
        public readonly Outputs.KafkaKafkaUserConfigKafkaRestConfig? KafkaRestConfig;
        /// <summary>
        /// Enum: `3.1`, `3.2`, `3.3`, `3.4`, `3.5`, `3.6`, `3.7`. Kafka major version.
        /// </summary>
        public readonly string? KafkaVersion;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.KafkaKafkaUserConfigPrivateAccess? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.KafkaKafkaUserConfigPrivatelinkAccess? PrivatelinkAccess;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.KafkaKafkaUserConfigPublicAccess? PublicAccess;
        /// <summary>
        /// Enable Schema-Registry service. The default value is `false`.
        /// </summary>
        public readonly bool? SchemaRegistry;
        /// <summary>
        /// Schema Registry configuration
        /// </summary>
        public readonly Outputs.KafkaKafkaUserConfigSchemaRegistryConfig? SchemaRegistryConfig;
        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        public readonly bool? StaticIps;
        /// <summary>
        /// Tiered storage configuration
        /// </summary>
        public readonly Outputs.KafkaKafkaUserConfigTieredStorage? TieredStorage;

        [OutputConstructor]
        private KafkaKafkaUserConfig(
            string? additionalBackupRegions,

            bool? aivenKafkaTopicMessages,

            string? customDomain,

            ImmutableArray<Outputs.KafkaKafkaUserConfigIpFilterObject> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            Outputs.KafkaKafkaUserConfigKafka? kafka,

            Outputs.KafkaKafkaUserConfigKafkaAuthenticationMethods? kafkaAuthenticationMethods,

            bool? kafkaConnect,

            Outputs.KafkaKafkaUserConfigKafkaConnectConfig? kafkaConnectConfig,

            bool? kafkaRest,

            bool? kafkaRestAuthorization,

            Outputs.KafkaKafkaUserConfigKafkaRestConfig? kafkaRestConfig,

            string? kafkaVersion,

            Outputs.KafkaKafkaUserConfigPrivateAccess? privateAccess,

            Outputs.KafkaKafkaUserConfigPrivatelinkAccess? privatelinkAccess,

            Outputs.KafkaKafkaUserConfigPublicAccess? publicAccess,

            bool? schemaRegistry,

            Outputs.KafkaKafkaUserConfigSchemaRegistryConfig? schemaRegistryConfig,

            bool? serviceLog,

            bool? staticIps,

            Outputs.KafkaKafkaUserConfigTieredStorage? tieredStorage)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            AivenKafkaTopicMessages = aivenKafkaTopicMessages;
            CustomDomain = customDomain;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            Kafka = kafka;
            KafkaAuthenticationMethods = kafkaAuthenticationMethods;
            KafkaConnect = kafkaConnect;
            KafkaConnectConfig = kafkaConnectConfig;
            KafkaRest = kafkaRest;
            KafkaRestAuthorization = kafkaRestAuthorization;
            KafkaRestConfig = kafkaRestConfig;
            KafkaVersion = kafkaVersion;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            PublicAccess = publicAccess;
            SchemaRegistry = schemaRegistry;
            SchemaRegistryConfig = schemaRegistryConfig;
            ServiceLog = serviceLog;
            StaticIps = staticIps;
            TieredStorage = tieredStorage;
        }
    }
}
