// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class ServiceKafkaUserConfigKafka
    {
        public readonly string? AutoCreateTopicsEnable;
        public readonly string? CompressionType;
        public readonly int? ConnectionsMaxIdleMs;
        public readonly int? DefaultReplicationFactor;
        public readonly int? GroupMaxSessionTimeoutMs;
        public readonly int? GroupMinSessionTimeoutMs;
        public readonly int? LogCleanerMaxCompactionLagMs;
        public readonly double? LogCleanerMinCleanableRatio;
        public readonly int? LogCleanerMinCompactionLagMs;
        public readonly string? LogCleanupPolicy;
        public readonly int? LogMessageTimestampDifferenceMaxMs;
        public readonly string? LogMessageTimestampType;
        public readonly int? LogRetentionBytes;
        public readonly int? LogRetentionHours;
        public readonly int? LogSegmentBytes;
        public readonly int? MaxConnectionsPerIp;
        public readonly int? MessageMaxBytes;
        public readonly int? NumPartitions;
        public readonly int? OffsetsRetentionMinutes;
        public readonly int? ProducerPurgatoryPurgeIntervalRequests;
        public readonly int? ReplicaFetchMaxBytes;
        public readonly int? ReplicaFetchResponseMaxBytes;
        public readonly int? SocketRequestMaxBytes;

        [OutputConstructor]
        private ServiceKafkaUserConfigKafka(
            string? autoCreateTopicsEnable,

            string? compressionType,

            int? connectionsMaxIdleMs,

            int? defaultReplicationFactor,

            int? groupMaxSessionTimeoutMs,

            int? groupMinSessionTimeoutMs,

            int? logCleanerMaxCompactionLagMs,

            double? logCleanerMinCleanableRatio,

            int? logCleanerMinCompactionLagMs,

            string? logCleanupPolicy,

            int? logMessageTimestampDifferenceMaxMs,

            string? logMessageTimestampType,

            int? logRetentionBytes,

            int? logRetentionHours,

            int? logSegmentBytes,

            int? maxConnectionsPerIp,

            int? messageMaxBytes,

            int? numPartitions,

            int? offsetsRetentionMinutes,

            int? producerPurgatoryPurgeIntervalRequests,

            int? replicaFetchMaxBytes,

            int? replicaFetchResponseMaxBytes,

            int? socketRequestMaxBytes)
        {
            AutoCreateTopicsEnable = autoCreateTopicsEnable;
            CompressionType = compressionType;
            ConnectionsMaxIdleMs = connectionsMaxIdleMs;
            DefaultReplicationFactor = defaultReplicationFactor;
            GroupMaxSessionTimeoutMs = groupMaxSessionTimeoutMs;
            GroupMinSessionTimeoutMs = groupMinSessionTimeoutMs;
            LogCleanerMaxCompactionLagMs = logCleanerMaxCompactionLagMs;
            LogCleanerMinCleanableRatio = logCleanerMinCleanableRatio;
            LogCleanerMinCompactionLagMs = logCleanerMinCompactionLagMs;
            LogCleanupPolicy = logCleanupPolicy;
            LogMessageTimestampDifferenceMaxMs = logMessageTimestampDifferenceMaxMs;
            LogMessageTimestampType = logMessageTimestampType;
            LogRetentionBytes = logRetentionBytes;
            LogRetentionHours = logRetentionHours;
            LogSegmentBytes = logSegmentBytes;
            MaxConnectionsPerIp = maxConnectionsPerIp;
            MessageMaxBytes = messageMaxBytes;
            NumPartitions = numPartitions;
            OffsetsRetentionMinutes = offsetsRetentionMinutes;
            ProducerPurgatoryPurgeIntervalRequests = producerPurgatoryPurgeIntervalRequests;
            ReplicaFetchMaxBytes = replicaFetchMaxBytes;
            ReplicaFetchResponseMaxBytes = replicaFetchResponseMaxBytes;
            SocketRequestMaxBytes = socketRequestMaxBytes;
        }
    }
}
