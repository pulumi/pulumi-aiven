// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetAlloydbomniAlloydbomniUserConfigPgResult
    {
        /// <summary>
        /// Specifies a fraction of the table size to add to AutovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE (e.g. `0.2` for 20% of the table size). The default is `0.2`.
        /// </summary>
        public readonly double? AutovacuumAnalyzeScaleFactor;
        /// <summary>
        /// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is `50`.
        /// </summary>
        public readonly int? AutovacuumAnalyzeThreshold;
        /// <summary>
        /// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. The system launches autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? AutovacuumFreezeMaxAge;
        /// <summary>
        /// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is `3`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? AutovacuumMaxWorkers;
        /// <summary>
        /// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds. The default is `60`.
        /// </summary>
        public readonly int? AutovacuumNaptime;
        /// <summary>
        /// Specifies the cost delay value that will be used in automatic VACUUM operations. If `-1` is specified, the regular VacuumCostDelay value will be used. The default is `2` (upstream default).
        /// </summary>
        public readonly int? AutovacuumVacuumCostDelay;
        /// <summary>
        /// Specifies the cost limit value that will be used in automatic VACUUM operations. If `-1` is specified, the regular VacuumCostLimit value will be used. The default is `-1` (upstream default).
        /// </summary>
        public readonly int? AutovacuumVacuumCostLimit;
        /// <summary>
        /// Specifies a fraction of the table size to add to AutovacuumVacuumThreshold when deciding whether to trigger a VACUUM (e.g. `0.2` for 20% of the table size). The default is `0.2`.
        /// </summary>
        public readonly double? AutovacuumVacuumScaleFactor;
        /// <summary>
        /// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is `50`.
        /// </summary>
        public readonly int? AutovacuumVacuumThreshold;
        /// <summary>
        /// Specifies the delay between activity rounds for the background writer in milliseconds. The default is `200`. Example: `200`.
        /// </summary>
        public readonly int? BgwriterDelay;
        /// <summary>
        /// Whenever more than BgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes. Setting of 0 disables forced writeback. The default is `512`. Example: `512`.
        /// </summary>
        public readonly int? BgwriterFlushAfter;
        /// <summary>
        /// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. The default is `100`. Example: `100`.
        /// </summary>
        public readonly int? BgwriterLruMaxpages;
        /// <summary>
        /// The average recent need for new buffers is multiplied by BgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is `2.0`. Example: `2`.
        /// </summary>
        public readonly double? BgwriterLruMultiplier;
        /// <summary>
        /// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition. The default is `1000` (upstream default). Example: `1000`.
        /// </summary>
        public readonly int? DeadlockTimeout;
        /// <summary>
        /// Enum: `Lz4`, `Pglz`. Specifies the default TOAST compression method for values of compressible columns. The default is `Lz4`.
        /// </summary>
        public readonly string? DefaultToastCompression;
        /// <summary>
        /// Time out sessions with open transactions after this number of milliseconds.
        /// </summary>
        public readonly int? IdleInTransactionSessionTimeout;
        /// <summary>
        /// Controls system-wide use of Just-in-Time Compilation (JIT).
        /// </summary>
        public readonly bool? Jit;
        /// <summary>
        /// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one disables logging autovacuum actions. The default is `1000`.
        /// </summary>
        public readonly int? LogAutovacuumMinDuration;
        /// <summary>
        /// Enum: `DEFAULT`, `TERSE`, `VERBOSE`. Controls the amount of detail written in the server log for each message that is logged.
        /// </summary>
        public readonly string? LogErrorVerbosity;
        /// <summary>
        /// Enum: `'%m [%p] %q[user=%u,db=%d,app=%a] '`, `'%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '`, `'pid=%p,user=%u,db=%d,app=%a,client=%h '`, `'pid=%p,user=%u,db=%d,app=%a,client=%h,txid=%x,qid=%Q '`. Choose from one of the available log formats.
        /// </summary>
        public readonly string? LogLinePrefix;
        /// <summary>
        /// Log statements that take more than this number of milliseconds to run, -1 disables.
        /// </summary>
        public readonly int? LogMinDurationStatement;
        /// <summary>
        /// Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
        /// </summary>
        public readonly int? LogTempFiles;
        /// <summary>
        /// PostgreSQL maximum number of files that can be open per process. The default is `1000` (upstream default). Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxFilesPerProcess;
        /// <summary>
        /// PostgreSQL maximum locks per transaction. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxLocksPerTransaction;
        /// <summary>
        /// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers). The default is `4` (upstream default). Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxLogicalReplicationWorkers;
        /// <summary>
        /// Sets the maximum number of workers that the system can support for parallel queries. The default is `8` (upstream default).
        /// </summary>
        public readonly int? MaxParallelWorkers;
        /// <summary>
        /// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node. The default is `2` (upstream default).
        /// </summary>
        public readonly int? MaxParallelWorkersPerGather;
        /// <summary>
        /// PostgreSQL maximum predicate locks per transaction. The default is `64` (upstream default). Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxPredLocksPerTransaction;
        /// <summary>
        /// PostgreSQL maximum prepared transactions. The default is `0`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxPreparedTransactions;
        /// <summary>
        /// PostgreSQL maximum replication slots. The default is `20`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxReplicationSlots;
        /// <summary>
        /// PostgreSQL maximum WAL size (MB) reserved for replication slots. If `-1` is specified, replication slots may retain an unlimited amount of WAL files. The default is `-1` (upstream default). WalKeepSize minimum WAL size setting takes precedence over this.
        /// </summary>
        public readonly int? MaxSlotWalKeepSize;
        /// <summary>
        /// Maximum depth of the stack in bytes. The default is `2097152` (upstream default).
        /// </summary>
        public readonly int? MaxStackDepth;
        /// <summary>
        /// Max standby archive delay in milliseconds. The default is `30000` (upstream default).
        /// </summary>
        public readonly int? MaxStandbyArchiveDelay;
        /// <summary>
        /// Max standby streaming delay in milliseconds. The default is `30000` (upstream default).
        /// </summary>
        public readonly int? MaxStandbyStreamingDelay;
        /// <summary>
        /// Maximum number of synchronization workers per subscription. The default is `2`.
        /// </summary>
        public readonly int? MaxSyncWorkersPerSubscription;
        /// <summary>
        /// PostgreSQL maximum WAL senders. The default is `20`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxWalSenders;
        /// <summary>
        /// Sets the maximum number of background processes that the system can support. The default is `8`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxWorkerProcesses;
        /// <summary>
        /// Enum: `Md5`, `scram-sha-256`. Chooses the algorithm for encrypting passwords.
        /// </summary>
        public readonly string? PasswordEncryption;
        /// <summary>
        /// Sets the time interval in seconds to run pg_partman's scheduled tasks. The default is `3600`. Example: `3600`.
        /// </summary>
        public readonly int? PgPartmanBgwDotInterval;
        /// <summary>
        /// Controls which role to use for pg_partman's scheduled background tasks. Example: `Myrolename`.
        /// </summary>
        public readonly string? PgPartmanBgwDotRole;
        /// <summary>
        /// Enum: `All`, `None`, `Top`. Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default is `Top`.
        /// </summary>
        public readonly string? PgStatStatementsDotTrack;
        /// <summary>
        /// PostgreSQL temporary file limit in KiB, -1 for unlimited.
        /// </summary>
        public readonly int? TempFileLimit;
        /// <summary>
        /// PostgreSQL service timezone. Example: `Europe/Helsinki`.
        /// </summary>
        public readonly string? Timezone;
        /// <summary>
        /// Specifies the number of bytes reserved to track the currently executing command for each active session. Changing this parameter causes a service restart. Example: `1024`.
        /// </summary>
        public readonly int? TrackActivityQuerySize;
        /// <summary>
        /// Enum: `Off`, `On`. Record commit time of transactions. Changing this parameter causes a service restart.
        /// </summary>
        public readonly string? TrackCommitTimestamp;
        /// <summary>
        /// Enum: `All`, `None`, `Pl`. Enables tracking of function call counts and time used.
        /// </summary>
        public readonly string? TrackFunctions;
        /// <summary>
        /// Enum: `Off`, `On`. Enables timing of database I/O calls. The default is `Off`. When on, it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
        /// </summary>
        public readonly string? TrackIoTiming;
        /// <summary>
        /// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Example: `60000`.
        /// </summary>
        public readonly int? WalSenderTimeout;
        /// <summary>
        /// WAL flush interval in milliseconds. The default is `200`. Setting this parameter to a lower value may negatively impact performance. Example: `50`.
        /// </summary>
        public readonly int? WalWriterDelay;

        [OutputConstructor]
        private GetAlloydbomniAlloydbomniUserConfigPgResult(
            double? autovacuumAnalyzeScaleFactor,

            int? autovacuumAnalyzeThreshold,

            int? autovacuumFreezeMaxAge,

            int? autovacuumMaxWorkers,

            int? autovacuumNaptime,

            int? autovacuumVacuumCostDelay,

            int? autovacuumVacuumCostLimit,

            double? autovacuumVacuumScaleFactor,

            int? autovacuumVacuumThreshold,

            int? bgwriterDelay,

            int? bgwriterFlushAfter,

            int? bgwriterLruMaxpages,

            double? bgwriterLruMultiplier,

            int? deadlockTimeout,

            string? defaultToastCompression,

            int? idleInTransactionSessionTimeout,

            bool? jit,

            int? logAutovacuumMinDuration,

            string? logErrorVerbosity,

            string? logLinePrefix,

            int? logMinDurationStatement,

            int? logTempFiles,

            int? maxFilesPerProcess,

            int? maxLocksPerTransaction,

            int? maxLogicalReplicationWorkers,

            int? maxParallelWorkers,

            int? maxParallelWorkersPerGather,

            int? maxPredLocksPerTransaction,

            int? maxPreparedTransactions,

            int? maxReplicationSlots,

            int? maxSlotWalKeepSize,

            int? maxStackDepth,

            int? maxStandbyArchiveDelay,

            int? maxStandbyStreamingDelay,

            int? maxSyncWorkersPerSubscription,

            int? maxWalSenders,

            int? maxWorkerProcesses,

            string? passwordEncryption,

            int? pgPartmanBgwDotInterval,

            string? pgPartmanBgwDotRole,

            string? pgStatStatementsDotTrack,

            int? tempFileLimit,

            string? timezone,

            int? trackActivityQuerySize,

            string? trackCommitTimestamp,

            string? trackFunctions,

            string? trackIoTiming,

            int? walSenderTimeout,

            int? walWriterDelay)
        {
            AutovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
            AutovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
            AutovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
            AutovacuumMaxWorkers = autovacuumMaxWorkers;
            AutovacuumNaptime = autovacuumNaptime;
            AutovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
            AutovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
            AutovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
            AutovacuumVacuumThreshold = autovacuumVacuumThreshold;
            BgwriterDelay = bgwriterDelay;
            BgwriterFlushAfter = bgwriterFlushAfter;
            BgwriterLruMaxpages = bgwriterLruMaxpages;
            BgwriterLruMultiplier = bgwriterLruMultiplier;
            DeadlockTimeout = deadlockTimeout;
            DefaultToastCompression = defaultToastCompression;
            IdleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
            Jit = jit;
            LogAutovacuumMinDuration = logAutovacuumMinDuration;
            LogErrorVerbosity = logErrorVerbosity;
            LogLinePrefix = logLinePrefix;
            LogMinDurationStatement = logMinDurationStatement;
            LogTempFiles = logTempFiles;
            MaxFilesPerProcess = maxFilesPerProcess;
            MaxLocksPerTransaction = maxLocksPerTransaction;
            MaxLogicalReplicationWorkers = maxLogicalReplicationWorkers;
            MaxParallelWorkers = maxParallelWorkers;
            MaxParallelWorkersPerGather = maxParallelWorkersPerGather;
            MaxPredLocksPerTransaction = maxPredLocksPerTransaction;
            MaxPreparedTransactions = maxPreparedTransactions;
            MaxReplicationSlots = maxReplicationSlots;
            MaxSlotWalKeepSize = maxSlotWalKeepSize;
            MaxStackDepth = maxStackDepth;
            MaxStandbyArchiveDelay = maxStandbyArchiveDelay;
            MaxStandbyStreamingDelay = maxStandbyStreamingDelay;
            MaxSyncWorkersPerSubscription = maxSyncWorkersPerSubscription;
            MaxWalSenders = maxWalSenders;
            MaxWorkerProcesses = maxWorkerProcesses;
            PasswordEncryption = passwordEncryption;
            PgPartmanBgwDotInterval = pgPartmanBgwDotInterval;
            PgPartmanBgwDotRole = pgPartmanBgwDotRole;
            PgStatStatementsDotTrack = pgStatStatementsDotTrack;
            TempFileLimit = tempFileLimit;
            Timezone = timezone;
            TrackActivityQuerySize = trackActivityQuerySize;
            TrackCommitTimestamp = trackCommitTimestamp;
            TrackFunctions = trackFunctions;
            TrackIoTiming = trackIoTiming;
            WalSenderTimeout = walSenderTimeout;
            WalWriterDelay = walWriterDelay;
        }
    }
}
