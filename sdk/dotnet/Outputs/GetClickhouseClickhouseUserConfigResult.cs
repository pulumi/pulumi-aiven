// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetClickhouseClickhouseUserConfigResult
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        public readonly string? AdditionalBackupRegions;
        /// <summary>
        /// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
        /// </summary>
        public readonly int? BackupHour;
        /// <summary>
        /// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
        /// </summary>
        public readonly int? BackupMinute;
        /// <summary>
        /// Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
        /// </summary>
        public readonly bool? EnableIpv6;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClickhouseClickhouseUserConfigIpFilterObjectResult> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilterStrings;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.GetClickhouseClickhouseUserConfigPrivateAccessResult? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.GetClickhouseClickhouseUserConfigPrivatelinkAccessResult? PrivatelinkAccess;
        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
        /// </summary>
        public readonly string? ProjectToForkFrom;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.GetClickhouseClickhouseUserConfigPublicAccessResult? PublicAccess;
        /// <summary>
        /// Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
        /// </summary>
        public readonly string? RecoveryBasebackupName;
        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
        /// </summary>
        public readonly string? ServiceToForkFrom;
        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        public readonly bool? StaticIps;

        [OutputConstructor]
        private GetClickhouseClickhouseUserConfigResult(
            string? additionalBackupRegions,

            int? backupHour,

            int? backupMinute,

            bool? enableIpv6,

            ImmutableArray<Outputs.GetClickhouseClickhouseUserConfigIpFilterObjectResult> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            Outputs.GetClickhouseClickhouseUserConfigPrivateAccessResult? privateAccess,

            Outputs.GetClickhouseClickhouseUserConfigPrivatelinkAccessResult? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.GetClickhouseClickhouseUserConfigPublicAccessResult? publicAccess,

            string? recoveryBasebackupName,

            bool? serviceLog,

            string? serviceToForkFrom,

            bool? staticIps)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            EnableIpv6 = enableIpv6;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            ServiceLog = serviceLog;
            ServiceToForkFrom = serviceToForkFrom;
            StaticIps = staticIps;
        }
    }
}
