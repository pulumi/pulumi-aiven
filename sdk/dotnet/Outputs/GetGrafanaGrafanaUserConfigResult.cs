// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetGrafanaGrafanaUserConfigResult
    {
        public readonly string? AlertingEnabled;
        public readonly string? AlertingErrorOrTimeout;
        public readonly string? AlertingMaxAnnotationsToKeep;
        public readonly string? AlertingNodataOrNullvalues;
        public readonly string? AllowEmbedding;
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthAzureadResult? AuthAzuread;
        public readonly string? AuthBasicEnabled;
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthGenericOauthResult? AuthGenericOauth;
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthGithubResult? AuthGithub;
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthGitlabResult? AuthGitlab;
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthGoogleResult? AuthGoogle;
        public readonly string? CookieSamesite;
        public readonly string? CustomDomain;
        public readonly string? DashboardsMinRefreshInterval;
        public readonly string? DashboardsVersionsToKeep;
        public readonly string? DataproxySendUserHeader;
        public readonly string? DataproxyTimeout;
        public readonly Outputs.GetGrafanaGrafanaUserConfigDateFormatsResult? DateFormats;
        public readonly string? DisableGravatar;
        public readonly string? EditorsCanAdmin;
        public readonly Outputs.GetGrafanaGrafanaUserConfigExternalImageStorageResult? ExternalImageStorage;
        public readonly string? GoogleAnalyticsUaId;
        public readonly ImmutableArray<string> IpFilters;
        public readonly string? MetricsEnabled;
        public readonly Outputs.GetGrafanaGrafanaUserConfigPrivateAccessResult? PrivateAccess;
        public readonly Outputs.GetGrafanaGrafanaUserConfigPrivatelinkAccessResult? PrivatelinkAccess;
        public readonly string? ProjectToForkFrom;
        public readonly Outputs.GetGrafanaGrafanaUserConfigPublicAccessResult? PublicAccess;
        public readonly string? RecoveryBasebackupName;
        public readonly string? ServiceToForkFrom;
        public readonly Outputs.GetGrafanaGrafanaUserConfigSmtpServerResult? SmtpServer;
        public readonly string? StaticIps;
        public readonly string? UserAutoAssignOrg;
        public readonly string? UserAutoAssignOrgRole;
        public readonly string? ViewersCanEdit;

        [OutputConstructor]
        private GetGrafanaGrafanaUserConfigResult(
            string? alertingEnabled,

            string? alertingErrorOrTimeout,

            string? alertingMaxAnnotationsToKeep,

            string? alertingNodataOrNullvalues,

            string? allowEmbedding,

            Outputs.GetGrafanaGrafanaUserConfigAuthAzureadResult? authAzuread,

            string? authBasicEnabled,

            Outputs.GetGrafanaGrafanaUserConfigAuthGenericOauthResult? authGenericOauth,

            Outputs.GetGrafanaGrafanaUserConfigAuthGithubResult? authGithub,

            Outputs.GetGrafanaGrafanaUserConfigAuthGitlabResult? authGitlab,

            Outputs.GetGrafanaGrafanaUserConfigAuthGoogleResult? authGoogle,

            string? cookieSamesite,

            string? customDomain,

            string? dashboardsMinRefreshInterval,

            string? dashboardsVersionsToKeep,

            string? dataproxySendUserHeader,

            string? dataproxyTimeout,

            Outputs.GetGrafanaGrafanaUserConfigDateFormatsResult? dateFormats,

            string? disableGravatar,

            string? editorsCanAdmin,

            Outputs.GetGrafanaGrafanaUserConfigExternalImageStorageResult? externalImageStorage,

            string? googleAnalyticsUaId,

            ImmutableArray<string> ipFilters,

            string? metricsEnabled,

            Outputs.GetGrafanaGrafanaUserConfigPrivateAccessResult? privateAccess,

            Outputs.GetGrafanaGrafanaUserConfigPrivatelinkAccessResult? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.GetGrafanaGrafanaUserConfigPublicAccessResult? publicAccess,

            string? recoveryBasebackupName,

            string? serviceToForkFrom,

            Outputs.GetGrafanaGrafanaUserConfigSmtpServerResult? smtpServer,

            string? staticIps,

            string? userAutoAssignOrg,

            string? userAutoAssignOrgRole,

            string? viewersCanEdit)
        {
            AlertingEnabled = alertingEnabled;
            AlertingErrorOrTimeout = alertingErrorOrTimeout;
            AlertingMaxAnnotationsToKeep = alertingMaxAnnotationsToKeep;
            AlertingNodataOrNullvalues = alertingNodataOrNullvalues;
            AllowEmbedding = allowEmbedding;
            AuthAzuread = authAzuread;
            AuthBasicEnabled = authBasicEnabled;
            AuthGenericOauth = authGenericOauth;
            AuthGithub = authGithub;
            AuthGitlab = authGitlab;
            AuthGoogle = authGoogle;
            CookieSamesite = cookieSamesite;
            CustomDomain = customDomain;
            DashboardsMinRefreshInterval = dashboardsMinRefreshInterval;
            DashboardsVersionsToKeep = dashboardsVersionsToKeep;
            DataproxySendUserHeader = dataproxySendUserHeader;
            DataproxyTimeout = dataproxyTimeout;
            DateFormats = dateFormats;
            DisableGravatar = disableGravatar;
            EditorsCanAdmin = editorsCanAdmin;
            ExternalImageStorage = externalImageStorage;
            GoogleAnalyticsUaId = googleAnalyticsUaId;
            IpFilters = ipFilters;
            MetricsEnabled = metricsEnabled;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            ServiceToForkFrom = serviceToForkFrom;
            SmtpServer = smtpServer;
            StaticIps = staticIps;
            UserAutoAssignOrg = userAutoAssignOrg;
            UserAutoAssignOrgRole = userAutoAssignOrgRole;
            ViewersCanEdit = viewersCanEdit;
        }
    }
}
