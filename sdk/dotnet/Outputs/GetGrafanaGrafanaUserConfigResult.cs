// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetGrafanaGrafanaUserConfigResult
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        public readonly string? AdditionalBackupRegions;
        /// <summary>
        /// Setting has no effect with Grafana 11 and onward. Enable or disable Grafana legacy alerting functionality. This should not be enabled with unified_alerting_enabled.
        /// </summary>
        public readonly bool? AlertingEnabled;
        /// <summary>
        /// Enum: `alerting`, `keep_state`. Default error or timeout setting for new alerting rules.
        /// </summary>
        public readonly string? AlertingErrorOrTimeout;
        /// <summary>
        /// Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations. Example: `0`.
        /// </summary>
        public readonly int? AlertingMaxAnnotationsToKeep;
        /// <summary>
        /// Enum: `alerting`, `keep_state`, `no_data`, `ok`. Default value for 'no data or null values' for new alerting rules.
        /// </summary>
        public readonly string? AlertingNodataOrNullvalues;
        /// <summary>
        /// Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking.
        /// </summary>
        public readonly bool? AllowEmbedding;
        /// <summary>
        /// Azure AD OAuth integration
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthAzureadResult? AuthAzuread;
        /// <summary>
        /// Enable or disable basic authentication form, used by Grafana built-in login.
        /// </summary>
        public readonly bool? AuthBasicEnabled;
        /// <summary>
        /// Generic OAuth integration
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthGenericOauthResult? AuthGenericOauth;
        /// <summary>
        /// Github Auth integration
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthGithubResult? AuthGithub;
        /// <summary>
        /// GitLab Auth integration
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthGitlabResult? AuthGitlab;
        /// <summary>
        /// Google Auth integration
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigAuthGoogleResult? AuthGoogle;
        /// <summary>
        /// Enum: `lax`, `none`, `strict`. Cookie SameSite attribute: `strict` prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. `lax` is the default value.
        /// </summary>
        public readonly string? CookieSamesite;
        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
        /// </summary>
        public readonly string? CustomDomain;
        /// <summary>
        /// Enable browsing of dashboards in grid (pictures) mode. This feature is new in Grafana 9 and is quite resource intensive. It may cause low-end plans to work more slowly while the dashboard previews are rendering.
        /// </summary>
        public readonly bool? DashboardPreviewsEnabled;
        /// <summary>
        /// Enable use of the Grafana Scenes Library as the dashboard engine. i.e. the `dashboardScene` feature flag. Upstream blog post at https://grafana.com/blog/2024/10/31/grafana-dashboards-are-now-powered-by-scenes-big-changes-same-ui/.
        /// </summary>
        public readonly bool? DashboardScenesEnabled;
        /// <summary>
        /// Signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h. Example: `5s`.
        /// </summary>
        public readonly string? DashboardsMinRefreshInterval;
        /// <summary>
        /// Dashboard versions to keep per dashboard. Example: `20`.
        /// </summary>
        public readonly int? DashboardsVersionsToKeep;
        /// <summary>
        /// Send `X-Grafana-User` header to data source.
        /// </summary>
        public readonly bool? DataproxySendUserHeader;
        /// <summary>
        /// Timeout for data proxy requests in seconds. Example: `30`.
        /// </summary>
        public readonly int? DataproxyTimeout;
        /// <summary>
        /// Grafana date format specifications
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigDateFormatsResult? DateFormats;
        /// <summary>
        /// Set to true to disable gravatar. Defaults to false (gravatar is enabled).
        /// </summary>
        public readonly bool? DisableGravatar;
        /// <summary>
        /// Editors can manage folders, teams and dashboards created by them.
        /// </summary>
        public readonly bool? EditorsCanAdmin;
        /// <summary>
        /// External image store settings
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigExternalImageStorageResult? ExternalImageStorage;
        /// <summary>
        /// Google Analytics ID. Example: `UA-123456-4`.
        /// </summary>
        public readonly string? GoogleAnalyticsUaId;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGrafanaGrafanaUserConfigIpFilterObjectResult> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilterStrings;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Enable Grafana's /metrics endpoint.
        /// </summary>
        public readonly bool? MetricsEnabled;
        /// <summary>
        /// Enforce user lookup based on email instead of the unique ID provided by the IdP.
        /// </summary>
        public readonly bool? OauthAllowInsecureEmailLookup;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigPrivateAccessResult? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigPrivatelinkAccessResult? PrivatelinkAccess;
        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
        /// </summary>
        public readonly string? ProjectToForkFrom;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigPublicAccessResult? PublicAccess;
        /// <summary>
        /// Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
        /// </summary>
        public readonly string? RecoveryBasebackupName;
        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
        /// </summary>
        public readonly string? ServiceToForkFrom;
        /// <summary>
        /// SMTP server settings
        /// </summary>
        public readonly Outputs.GetGrafanaGrafanaUserConfigSmtpServerResult? SmtpServer;
        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        public readonly bool? StaticIps;
        /// <summary>
        /// Enable or disable Grafana unified alerting functionality. By default this is enabled and any legacy alerts will be migrated on upgrade to Grafana 9+. To stay on legacy alerting, set unified_alerting_enabled to false and alerting_enabled to true. See https://grafana.com/docs/grafana/latest/alerting/ for more details.
        /// </summary>
        public readonly bool? UnifiedAlertingEnabled;
        /// <summary>
        /// Auto-assign new users on signup to main organization. Defaults to false.
        /// </summary>
        public readonly bool? UserAutoAssignOrg;
        /// <summary>
        /// Enum: `Admin`, `Editor`, `Viewer`. Set role for new signups. Defaults to Viewer.
        /// </summary>
        public readonly string? UserAutoAssignOrgRole;
        /// <summary>
        /// Users with view-only permission can edit but not save dashboards.
        /// </summary>
        public readonly bool? ViewersCanEdit;
        /// <summary>
        /// Setting to enable/disable Write-Ahead Logging. The default value is false (disabled).
        /// </summary>
        public readonly bool? Wal;

        [OutputConstructor]
        private GetGrafanaGrafanaUserConfigResult(
            string? additionalBackupRegions,

            bool? alertingEnabled,

            string? alertingErrorOrTimeout,

            int? alertingMaxAnnotationsToKeep,

            string? alertingNodataOrNullvalues,

            bool? allowEmbedding,

            Outputs.GetGrafanaGrafanaUserConfigAuthAzureadResult? authAzuread,

            bool? authBasicEnabled,

            Outputs.GetGrafanaGrafanaUserConfigAuthGenericOauthResult? authGenericOauth,

            Outputs.GetGrafanaGrafanaUserConfigAuthGithubResult? authGithub,

            Outputs.GetGrafanaGrafanaUserConfigAuthGitlabResult? authGitlab,

            Outputs.GetGrafanaGrafanaUserConfigAuthGoogleResult? authGoogle,

            string? cookieSamesite,

            string? customDomain,

            bool? dashboardPreviewsEnabled,

            bool? dashboardScenesEnabled,

            string? dashboardsMinRefreshInterval,

            int? dashboardsVersionsToKeep,

            bool? dataproxySendUserHeader,

            int? dataproxyTimeout,

            Outputs.GetGrafanaGrafanaUserConfigDateFormatsResult? dateFormats,

            bool? disableGravatar,

            bool? editorsCanAdmin,

            Outputs.GetGrafanaGrafanaUserConfigExternalImageStorageResult? externalImageStorage,

            string? googleAnalyticsUaId,

            ImmutableArray<Outputs.GetGrafanaGrafanaUserConfigIpFilterObjectResult> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            bool? metricsEnabled,

            bool? oauthAllowInsecureEmailLookup,

            Outputs.GetGrafanaGrafanaUserConfigPrivateAccessResult? privateAccess,

            Outputs.GetGrafanaGrafanaUserConfigPrivatelinkAccessResult? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.GetGrafanaGrafanaUserConfigPublicAccessResult? publicAccess,

            string? recoveryBasebackupName,

            bool? serviceLog,

            string? serviceToForkFrom,

            Outputs.GetGrafanaGrafanaUserConfigSmtpServerResult? smtpServer,

            bool? staticIps,

            bool? unifiedAlertingEnabled,

            bool? userAutoAssignOrg,

            string? userAutoAssignOrgRole,

            bool? viewersCanEdit,

            bool? wal)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            AlertingEnabled = alertingEnabled;
            AlertingErrorOrTimeout = alertingErrorOrTimeout;
            AlertingMaxAnnotationsToKeep = alertingMaxAnnotationsToKeep;
            AlertingNodataOrNullvalues = alertingNodataOrNullvalues;
            AllowEmbedding = allowEmbedding;
            AuthAzuread = authAzuread;
            AuthBasicEnabled = authBasicEnabled;
            AuthGenericOauth = authGenericOauth;
            AuthGithub = authGithub;
            AuthGitlab = authGitlab;
            AuthGoogle = authGoogle;
            CookieSamesite = cookieSamesite;
            CustomDomain = customDomain;
            DashboardPreviewsEnabled = dashboardPreviewsEnabled;
            DashboardScenesEnabled = dashboardScenesEnabled;
            DashboardsMinRefreshInterval = dashboardsMinRefreshInterval;
            DashboardsVersionsToKeep = dashboardsVersionsToKeep;
            DataproxySendUserHeader = dataproxySendUserHeader;
            DataproxyTimeout = dataproxyTimeout;
            DateFormats = dateFormats;
            DisableGravatar = disableGravatar;
            EditorsCanAdmin = editorsCanAdmin;
            ExternalImageStorage = externalImageStorage;
            GoogleAnalyticsUaId = googleAnalyticsUaId;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            MetricsEnabled = metricsEnabled;
            OauthAllowInsecureEmailLookup = oauthAllowInsecureEmailLookup;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            ServiceLog = serviceLog;
            ServiceToForkFrom = serviceToForkFrom;
            SmtpServer = smtpServer;
            StaticIps = staticIps;
            UnifiedAlertingEnabled = unifiedAlertingEnabled;
            UserAutoAssignOrg = userAutoAssignOrg;
            UserAutoAssignOrgRole = userAutoAssignOrgRole;
            ViewersCanEdit = viewersCanEdit;
            Wal = wal;
        }
    }
}
