// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetPgPgUserConfigPgauditResult
    {
        /// <summary>
        /// Enable pgaudit extension. When enabled, pgaudit extension will be automatically installed.Otherwise, extension will be uninstalled but auditing configurations will be preserved. Default: `false`.
        /// </summary>
        public readonly bool? FeatureEnabled;
        /// <summary>
        /// Specifies that session logging should be enabled in the casewhere all relations in a statement are in pg_catalog. Default: `true`.
        /// </summary>
        public readonly bool? LogCatalog;
        /// <summary>
        /// Specifies whether log messages will be visible to a client process such as psql. Default: `false`.
        /// </summary>
        public readonly bool? LogClient;
        /// <summary>
        /// Enum: `debug1`, `debug2`, `debug3`, `debug4`, `debug5`, `info`, `log`, `notice`, `warning`. Specifies the log level that will be used for log entries. Default: `log`.
        /// </summary>
        public readonly string? LogLevel;
        /// <summary>
        /// Crop parameters representation and whole statements if they exceed this threshold. A (default) value of -1 disable the truncation. Default: `-1`.
        /// </summary>
        public readonly int? LogMaxStringLength;
        /// <summary>
        /// This GUC allows to turn off logging nested statements, that is, statements that are executed as part of another ExecutorRun. Default: `true`.
        /// </summary>
        public readonly bool? LogNestedStatements;
        /// <summary>
        /// Specifies that audit logging should include the parameters that were passed with the statement. Default: `false`.
        /// </summary>
        public readonly bool? LogParameter;
        /// <summary>
        /// Specifies that parameter values longer than this setting (in bytes) should not be logged, but replaced with &lt;long param suppressed&gt;. Default: `0`.
        /// </summary>
        public readonly int? LogParameterMaxSize;
        /// <summary>
        /// Specifies whether session audit logging should create a separate log entry for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement. Default: `false`.
        /// </summary>
        public readonly bool? LogRelation;
        /// <summary>
        /// Specifies that audit logging should include the rows retrieved or affected by a statement. When enabled the rows field will be included after the parameter field. Default: `false`.
        /// </summary>
        public readonly bool? LogRows;
        /// <summary>
        /// Specifies whether logging will include the statement text and parameters (if enabled). Default: `true`.
        /// </summary>
        public readonly bool? LogStatement;
        /// <summary>
        /// Specifies whether logging will include the statement text and parameters with the first log entry for a statement/substatement combination or with every entry. Default: `false`.
        /// </summary>
        public readonly bool? LogStatementOnce;
        /// <summary>
        /// Specifies which classes of statements will be logged by session audit logging.
        /// </summary>
        public readonly ImmutableArray<string> Logs;
        /// <summary>
        /// Specifies the master role to use for object audit logging.
        /// </summary>
        public readonly string? Role;

        [OutputConstructor]
        private GetPgPgUserConfigPgauditResult(
            bool? featureEnabled,

            bool? logCatalog,

            bool? logClient,

            string? logLevel,

            int? logMaxStringLength,

            bool? logNestedStatements,

            bool? logParameter,

            int? logParameterMaxSize,

            bool? logRelation,

            bool? logRows,

            bool? logStatement,

            bool? logStatementOnce,

            ImmutableArray<string> logs,

            string? role)
        {
            FeatureEnabled = featureEnabled;
            LogCatalog = logCatalog;
            LogClient = logClient;
            LogLevel = logLevel;
            LogMaxStringLength = logMaxStringLength;
            LogNestedStatements = logNestedStatements;
            LogParameter = logParameter;
            LogParameterMaxSize = logParameterMaxSize;
            LogRelation = logRelation;
            LogRows = logRows;
            LogStatement = logStatement;
            LogStatementOnce = logStatementOnce;
            Logs = logs;
            Role = role;
        }
    }
}
