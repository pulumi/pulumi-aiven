// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class OpenSearchOpensearchUserConfig
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        public readonly string? AdditionalBackupRegions;
        /// <summary>
        /// Azure migration settings
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigAzureMigration? AzureMigration;
        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
        /// </summary>
        public readonly string? CustomDomain;
        /// <summary>
        /// Allow to register custom keystores in OpenSearch
        /// </summary>
        public readonly ImmutableArray<Outputs.OpenSearchOpensearchUserConfigCustomKeystore> CustomKeystores;
        /// <summary>
        /// Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can not be activated unless specifically allowed for the project.
        /// </summary>
        public readonly bool? DisableReplicationFactorAdjustment;
        /// <summary>
        /// Google Cloud Storage migration settings
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigGcsMigration? GcsMigration;
        /// <summary>
        /// Index patterns
        /// </summary>
        public readonly ImmutableArray<Outputs.OpenSearchOpensearchUserConfigIndexPattern> IndexPatterns;
        /// <summary>
        /// Index rollup settings
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigIndexRollup? IndexRollup;
        /// <summary>
        /// Template settings for all new indexes
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigIndexTemplate? IndexTemplate;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<Outputs.OpenSearchOpensearchUserConfigIpFilterObject> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilterStrings;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
        /// </summary>
        public readonly bool? KeepIndexRefreshInterval;
        /// <summary>
        /// Use IndexPatterns instead. Default: `0`.
        /// </summary>
        public readonly int? MaxIndexCount;
        /// <summary>
        /// OpenSearch OpenID Connect Configuration
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigOpenid? Openid;
        /// <summary>
        /// OpenSearch settings
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigOpensearch? Opensearch;
        /// <summary>
        /// OpenSearch Dashboards settings
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigOpensearchDashboards? OpensearchDashboards;
        /// <summary>
        /// Enum: `1`, `2`, `2.19`, and newer. OpenSearch version.
        /// </summary>
        public readonly string? OpensearchVersion;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigPrivateAccess? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigPrivatelinkAccess? PrivatelinkAccess;
        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created. Example: `Anotherprojectname`.
        /// </summary>
        public readonly string? ProjectToForkFrom;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigPublicAccess? PublicAccess;
        /// <summary>
        /// Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
        /// </summary>
        public readonly string? RecoveryBasebackupName;
        /// <summary>
        /// AWS S3 / AWS S3 compatible migration settings
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigS3Migration? S3Migration;
        /// <summary>
        /// OpenSearch SAML configuration
        /// </summary>
        public readonly Outputs.OpenSearchOpensearchUserConfigSaml? Saml;
        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created. Example: `Anotherservicename`.
        /// </summary>
        public readonly string? ServiceToForkFrom;
        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        public readonly bool? StaticIps;

        [OutputConstructor]
        private OpenSearchOpensearchUserConfig(
            string? additionalBackupRegions,

            Outputs.OpenSearchOpensearchUserConfigAzureMigration? azureMigration,

            string? customDomain,

            ImmutableArray<Outputs.OpenSearchOpensearchUserConfigCustomKeystore> customKeystores,

            bool? disableReplicationFactorAdjustment,

            Outputs.OpenSearchOpensearchUserConfigGcsMigration? gcsMigration,

            ImmutableArray<Outputs.OpenSearchOpensearchUserConfigIndexPattern> indexPatterns,

            Outputs.OpenSearchOpensearchUserConfigIndexRollup? indexRollup,

            Outputs.OpenSearchOpensearchUserConfigIndexTemplate? indexTemplate,

            ImmutableArray<Outputs.OpenSearchOpensearchUserConfigIpFilterObject> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            bool? keepIndexRefreshInterval,

            int? maxIndexCount,

            Outputs.OpenSearchOpensearchUserConfigOpenid? openid,

            Outputs.OpenSearchOpensearchUserConfigOpensearch? opensearch,

            Outputs.OpenSearchOpensearchUserConfigOpensearchDashboards? opensearchDashboards,

            string? opensearchVersion,

            Outputs.OpenSearchOpensearchUserConfigPrivateAccess? privateAccess,

            Outputs.OpenSearchOpensearchUserConfigPrivatelinkAccess? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.OpenSearchOpensearchUserConfigPublicAccess? publicAccess,

            string? recoveryBasebackupName,

            Outputs.OpenSearchOpensearchUserConfigS3Migration? s3Migration,

            Outputs.OpenSearchOpensearchUserConfigSaml? saml,

            bool? serviceLog,

            string? serviceToForkFrom,

            bool? staticIps)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            AzureMigration = azureMigration;
            CustomDomain = customDomain;
            CustomKeystores = customKeystores;
            DisableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            GcsMigration = gcsMigration;
            IndexPatterns = indexPatterns;
            IndexRollup = indexRollup;
            IndexTemplate = indexTemplate;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            KeepIndexRefreshInterval = keepIndexRefreshInterval;
            MaxIndexCount = maxIndexCount;
            Openid = openid;
            Opensearch = opensearch;
            OpensearchDashboards = opensearchDashboards;
            OpensearchVersion = opensearchVersion;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            S3Migration = s3Migration;
            Saml = saml;
            ServiceLog = serviceLog;
            ServiceToForkFrom = serviceToForkFrom;
            StaticIps = staticIps;
        }
    }
}
