// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetKafkaConnectKafkaConnectUserConfigKafkaConnectResult
    {
        /// <summary>
        /// Defines what client configurations can be 
        /// overridden by the connector. Default is None.
        /// </summary>
        public readonly string? ConnectorClientConfigOverridePolicy;
        /// <summary>
        /// What to do when there is no initial offset in Kafka or 
        /// if the current offset does not exist any more on the server. Default is earliest.
        /// </summary>
        public readonly string? ConsumerAutoOffsetReset;
        /// <summary>
        /// Records are fetched in batches by the consumer, and if 
        /// the first record batch in the first non-empty partition of the fetch is larger than this value,
        /// the record batch will still be returned to ensure that the consumer can make progress. As such,
        /// this is not a absolute maximum.
        /// </summary>
        public readonly string? ConsumerFetchMaxBytes;
        /// <summary>
        /// Transaction read isolation level. read_uncommitted is 
        /// the default, but read_committed can be used if consume-exactly-once behavior is desired.
        /// </summary>
        public readonly string? ConsumerIsolationLevel;
        /// <summary>
        /// Records are fetched in batches by the consumer.If 
        /// the first record batch in the first non-empty partition of the fetch is larger than this limit,
        /// the batch will still be returned to ensure that the consumer can make progress.
        /// </summary>
        public readonly string? ConsumerMaxPartitionFetchBytes;
        /// <summary>
        /// The maximum delay in milliseconds between invocations 
        /// of poll() when using consumer group management (defaults to 300000).
        /// * `consumer_max_poll_records` The maximum number of records returned by a single poll.
        /// </summary>
        public readonly string? ConsumerMaxPollIntervalMs;
        public readonly string? ConsumerMaxPollRecords;
        /// <summary>
        /// The interval at which to try committing offsets for tasks 
        /// (defaults to 60000).
        /// </summary>
        public readonly string? OffsetFlushIntervalMs;
        /// <summary>
        /// Maximum number of milliseconds to wait for records to flush 
        /// and partition offset data to be committed to offset storage before cancelling the process and restoring
        /// the offset data to be committed in a future attempt (defaults to 5000).
        /// </summary>
        public readonly string? OffsetFlushTimeoutMs;
        /// <summary>
        /// This setting will limit the number of record batches the 
        /// producer will send in a single request to avoid sending huge requests.
        /// </summary>
        public readonly string? ProducerMaxRequestSize;
        /// <summary>
        /// The timeout in milliseconds used to detect failures when using Kafkaâ€™s 
        /// group management facilities (defaults to 10000).
        /// </summary>
        public readonly string? SessionTimeoutMs;

        [OutputConstructor]
        private GetKafkaConnectKafkaConnectUserConfigKafkaConnectResult(
            string? connectorClientConfigOverridePolicy,

            string? consumerAutoOffsetReset,

            string? consumerFetchMaxBytes,

            string? consumerIsolationLevel,

            string? consumerMaxPartitionFetchBytes,

            string? consumerMaxPollIntervalMs,

            string? consumerMaxPollRecords,

            string? offsetFlushIntervalMs,

            string? offsetFlushTimeoutMs,

            string? producerMaxRequestSize,

            string? sessionTimeoutMs)
        {
            ConnectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
            ConsumerAutoOffsetReset = consumerAutoOffsetReset;
            ConsumerFetchMaxBytes = consumerFetchMaxBytes;
            ConsumerIsolationLevel = consumerIsolationLevel;
            ConsumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
            ConsumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
            ConsumerMaxPollRecords = consumerMaxPollRecords;
            OffsetFlushIntervalMs = offsetFlushIntervalMs;
            OffsetFlushTimeoutMs = offsetFlushTimeoutMs;
            ProducerMaxRequestSize = producerMaxRequestSize;
            SessionTimeoutMs = sessionTimeoutMs;
        }
    }
}
