// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class ServiceMysqlUserConfig
    {
        /// <summary>
        /// Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
        /// </summary>
        public readonly string? AdminPassword;
        /// <summary>
        /// Custom username for admin user. This must be set only when a new service is being created.
        /// </summary>
        public readonly string? AdminUsername;
        /// <summary>
        /// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
        /// </summary>
        public readonly string? BackupHour;
        /// <summary>
        /// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
        /// </summary>
        public readonly string? BackupMinute;
        /// <summary>
        /// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
        /// </summary>
        public readonly string? BinlogRetentionPeriod;
        /// <summary>
        /// IP filter
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Migrate data from existing server
        /// </summary>
        public readonly Outputs.ServiceMysqlUserConfigMigration? Migration;
        /// <summary>
        /// mysql.conf configuration values
        /// </summary>
        public readonly Outputs.ServiceMysqlUserConfigMysql? Mysql;
        /// <summary>
        /// MySQL major version
        /// </summary>
        public readonly string? MysqlVersion;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.ServiceMysqlUserConfigPrivateAccess? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.ServiceMysqlUserConfigPrivatelinkAccess? PrivatelinkAccess;
        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created.
        /// </summary>
        public readonly string? ProjectToForkFrom;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.ServiceMysqlUserConfigPublicAccess? PublicAccess;
        /// <summary>
        /// Recovery target time when forking a service. This has effect only when a new service is being created.
        /// </summary>
        public readonly string? RecoveryTargetTime;
        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created.
        /// </summary>
        public readonly string? ServiceToForkFrom;
        /// <summary>
        /// Static IP addresses
        /// </summary>
        public readonly string? StaticIps;

        [OutputConstructor]
        private ServiceMysqlUserConfig(
            string? adminPassword,

            string? adminUsername,

            string? backupHour,

            string? backupMinute,

            string? binlogRetentionPeriod,

            ImmutableArray<string> ipFilters,

            Outputs.ServiceMysqlUserConfigMigration? migration,

            Outputs.ServiceMysqlUserConfigMysql? mysql,

            string? mysqlVersion,

            Outputs.ServiceMysqlUserConfigPrivateAccess? privateAccess,

            Outputs.ServiceMysqlUserConfigPrivatelinkAccess? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.ServiceMysqlUserConfigPublicAccess? publicAccess,

            string? recoveryTargetTime,

            string? serviceToForkFrom,

            string? staticIps)
        {
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            BinlogRetentionPeriod = binlogRetentionPeriod;
            IpFilters = ipFilters;
            Migration = migration;
            Mysql = mysql;
            MysqlVersion = mysqlVersion;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryTargetTime = recoveryTargetTime;
            ServiceToForkFrom = serviceToForkFrom;
            StaticIps = staticIps;
        }
    }
}
