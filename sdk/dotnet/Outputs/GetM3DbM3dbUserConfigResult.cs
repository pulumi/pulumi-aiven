// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetM3DbM3dbUserConfigResult
    {
        public readonly string? AdditionalBackupRegions;
        public readonly string? CustomDomain;
        public readonly ImmutableArray<Outputs.GetM3DbM3dbUserConfigIpFilterObjectResult> IpFilterObjects;
        public readonly ImmutableArray<string> IpFilterStrings;
        public readonly ImmutableArray<string> IpFilters;
        public readonly Outputs.GetM3DbM3dbUserConfigLimitsResult? Limits;
        public readonly Outputs.GetM3DbM3dbUserConfigM3Result? M3;
        public readonly string? M3Version;
        public readonly bool? M3coordinatorEnableGraphiteCarbonIngest;
        public readonly string? M3dbVersion;
        public readonly ImmutableArray<Outputs.GetM3DbM3dbUserConfigNamespaceResult> Namespaces;
        public readonly Outputs.GetM3DbM3dbUserConfigPrivateAccessResult? PrivateAccess;
        public readonly string? ProjectToForkFrom;
        public readonly Outputs.GetM3DbM3dbUserConfigPublicAccessResult? PublicAccess;
        public readonly Outputs.GetM3DbM3dbUserConfigRulesResult? Rules;
        public readonly string? ServiceToForkFrom;
        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        public readonly bool? StaticIps;

        [OutputConstructor]
        private GetM3DbM3dbUserConfigResult(
            string? additionalBackupRegions,

            string? customDomain,

            ImmutableArray<Outputs.GetM3DbM3dbUserConfigIpFilterObjectResult> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            Outputs.GetM3DbM3dbUserConfigLimitsResult? limits,

            Outputs.GetM3DbM3dbUserConfigM3Result? m3,

            string? m3Version,

            bool? m3coordinatorEnableGraphiteCarbonIngest,

            string? m3dbVersion,

            ImmutableArray<Outputs.GetM3DbM3dbUserConfigNamespaceResult> namespaces,

            Outputs.GetM3DbM3dbUserConfigPrivateAccessResult? privateAccess,

            string? projectToForkFrom,

            Outputs.GetM3DbM3dbUserConfigPublicAccessResult? publicAccess,

            Outputs.GetM3DbM3dbUserConfigRulesResult? rules,

            string? serviceToForkFrom,

            bool? staticIps)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            CustomDomain = customDomain;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            Limits = limits;
            M3 = m3;
            M3Version = m3Version;
            M3coordinatorEnableGraphiteCarbonIngest = m3coordinatorEnableGraphiteCarbonIngest;
            M3dbVersion = m3dbVersion;
            Namespaces = namespaces;
            PrivateAccess = privateAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            Rules = rules;
            ServiceToForkFrom = serviceToForkFrom;
            StaticIps = staticIps;
        }
    }
}
