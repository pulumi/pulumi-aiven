// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetInfluxDbInfluxdbUserConfigResult
    {
        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name
        /// </summary>
        public readonly string? CustomDomain;
        /// <summary>
        /// allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.GetInfluxDbInfluxdbUserConfigPrivateAccessResult? PrivateAccess;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.GetInfluxDbInfluxdbUserConfigPublicAccessResult? PublicAccess;
        /// <summary>
        /// Name of the basebackup to restore in forked service
        /// </summary>
        public readonly string? RecoveryBasebackupName;
        /// <summary>
        /// Name of another service to fork from. This has effect 
        /// only when a new service is being created.
        /// </summary>
        public readonly string? ServiceToForkFrom;

        [OutputConstructor]
        private GetInfluxDbInfluxdbUserConfigResult(
            string? customDomain,

            ImmutableArray<string> ipFilters,

            Outputs.GetInfluxDbInfluxdbUserConfigPrivateAccessResult? privateAccess,

            Outputs.GetInfluxDbInfluxdbUserConfigPublicAccessResult? publicAccess,

            string? recoveryBasebackupName,

            string? serviceToForkFrom)
        {
            CustomDomain = customDomain;
            IpFilters = ipFilters;
            PrivateAccess = privateAccess;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            ServiceToForkFrom = serviceToForkFrom;
        }
    }
}
