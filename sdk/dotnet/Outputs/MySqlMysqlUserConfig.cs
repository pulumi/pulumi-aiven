// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class MySqlMysqlUserConfig
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        public readonly string? AdditionalBackupRegions;
        /// <summary>
        /// Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
        /// </summary>
        public readonly string? AdminPassword;
        /// <summary>
        /// Custom username for admin user. This must be set only when a new service is being created. Example: `avnadmin`.
        /// </summary>
        public readonly string? AdminUsername;
        /// <summary>
        /// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
        /// </summary>
        public readonly int? BackupHour;
        /// <summary>
        /// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
        /// </summary>
        public readonly int? BackupMinute;
        /// <summary>
        /// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector. Example: `600`.
        /// </summary>
        public readonly int? BinlogRetentionPeriod;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<Outputs.MySqlMysqlUserConfigIpFilterObject> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilterStrings;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Migrate data from existing server
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigMigration? Migration;
        /// <summary>
        /// mysql.conf configuration values
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigMysql? Mysql;
        /// <summary>
        /// Enum: `8`, and newer. MySQL major version.
        /// </summary>
        public readonly string? MysqlVersion;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigPrivateAccess? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigPrivatelinkAccess? PrivatelinkAccess;
        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
        /// </summary>
        public readonly string? ProjectToForkFrom;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigPublicAccess? PublicAccess;
        /// <summary>
        /// Recovery target time when forking a service. This has effect only when a new service is being created. Example: `2019-01-01 23:34:45`.
        /// </summary>
        public readonly string? RecoveryTargetTime;
        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
        /// </summary>
        public readonly string? ServiceToForkFrom;
        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        public readonly bool? StaticIps;

        [OutputConstructor]
        private MySqlMysqlUserConfig(
            string? additionalBackupRegions,

            string? adminPassword,

            string? adminUsername,

            int? backupHour,

            int? backupMinute,

            int? binlogRetentionPeriod,

            ImmutableArray<Outputs.MySqlMysqlUserConfigIpFilterObject> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            Outputs.MySqlMysqlUserConfigMigration? migration,

            Outputs.MySqlMysqlUserConfigMysql? mysql,

            string? mysqlVersion,

            Outputs.MySqlMysqlUserConfigPrivateAccess? privateAccess,

            Outputs.MySqlMysqlUserConfigPrivatelinkAccess? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.MySqlMysqlUserConfigPublicAccess? publicAccess,

            string? recoveryTargetTime,

            bool? serviceLog,

            string? serviceToForkFrom,

            bool? staticIps)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            BinlogRetentionPeriod = binlogRetentionPeriod;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            Migration = migration;
            Mysql = mysql;
            MysqlVersion = mysqlVersion;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryTargetTime = recoveryTargetTime;
            ServiceLog = serviceLog;
            ServiceToForkFrom = serviceToForkFrom;
            StaticIps = staticIps;
        }
    }
}
