// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class MySqlMysqlUserConfig
    {
        /// <summary>
        /// Custom password for admin user. Defaults to random string. 
        /// This must be set only when a new service is being created.
        /// </summary>
        public readonly string? AdminPassword;
        /// <summary>
        /// Custom username for admin user. This must be set only when a 
        /// new service is being created.
        /// </summary>
        public readonly string? AdminUsername;
        /// <summary>
        /// The hour of day (in UTC) when backup for the service is started. 
        /// New backup is only started if previous backup has already completed.
        /// </summary>
        public readonly string? BackupHour;
        /// <summary>
        /// The minute of an hour when backup for the service is started. 
        /// New backup is only started if previous backup has already completed.
        /// </summary>
        public readonly string? BackupMinute;
        /// <summary>
        /// The minimum amount of time in seconds to keep binlog entries 
        /// before deletion. This may be extended for services that require binlog entries for longer than the
        /// default for example if using the MySQL Debezium Kafka connector.
        /// </summary>
        public readonly string? BinlogRetentionPeriod;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Migrate data from existing server
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigMigration? Migration;
        /// <summary>
        /// Allow clients to connect to mysql from the public internet for service 
        /// nodes that are in a project VPC or another type of private network
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigMysql? Mysql;
        /// <summary>
        /// MySQL major version
        /// </summary>
        public readonly string? MysqlVersion;
        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigPrivateAccess? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigPrivatelinkAccess? PrivatelinkAccess;
        /// <summary>
        /// Name of another project to fork a service from. This has
        /// effect only when a new service is being created.
        /// </summary>
        public readonly string? ProjectToForkFrom;
        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        public readonly Outputs.MySqlMysqlUserConfigPublicAccess? PublicAccess;
        /// <summary>
        /// Recovery target time when forking a service. This has effect 
        /// only when a new service is being created.
        /// </summary>
        public readonly string? RecoveryTargetTime;
        /// <summary>
        /// Name of another service to fork from. This has effect only when 
        /// a new service is being created.
        /// </summary>
        public readonly string? ServiceToForkFrom;
        public readonly string? StaticIps;

        [OutputConstructor]
        private MySqlMysqlUserConfig(
            string? adminPassword,

            string? adminUsername,

            string? backupHour,

            string? backupMinute,

            string? binlogRetentionPeriod,

            ImmutableArray<string> ipFilters,

            Outputs.MySqlMysqlUserConfigMigration? migration,

            Outputs.MySqlMysqlUserConfigMysql? mysql,

            string? mysqlVersion,

            Outputs.MySqlMysqlUserConfigPrivateAccess? privateAccess,

            Outputs.MySqlMysqlUserConfigPrivatelinkAccess? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.MySqlMysqlUserConfigPublicAccess? publicAccess,

            string? recoveryTargetTime,

            string? serviceToForkFrom,

            string? staticIps)
        {
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            BinlogRetentionPeriod = binlogRetentionPeriod;
            IpFilters = ipFilters;
            Migration = migration;
            Mysql = mysql;
            MysqlVersion = mysqlVersion;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryTargetTime = recoveryTargetTime;
            ServiceToForkFrom = serviceToForkFrom;
            StaticIps = staticIps;
        }
    }
}
