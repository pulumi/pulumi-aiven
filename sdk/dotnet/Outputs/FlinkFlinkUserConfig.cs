// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class FlinkFlinkUserConfig
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication
        /// </summary>
        public readonly string? AdditionalBackupRegions;
        /// <summary>
        /// Checkpointing is Flink’s primary fault-tolerance mechanism, wherein a snapshot of your job’s state persisted periodically to some durable location. In the case of failure, Flink will restart from the most recent checkpoint and resume processing. A jobs checkpoint interval configures how often Flink will take these snapshots.
        /// </summary>
        public readonly string? ExecutionCheckpointingIntervalMs;
        /// <summary>
        /// The time after which a checkpoint-in-progress is aborted, if it did not complete by then.
        /// </summary>
        public readonly string? ExecutionCheckpointingTimeoutMs;
        /// <summary>
        /// Flink major version
        /// </summary>
        public readonly string? FlinkVersion;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        /// </summary>
        public readonly ImmutableArray<Outputs.FlinkFlinkUserConfigIpFilterObject> IpFilterObjects;
        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Task slots per node. For a 3 node plan, total number of task slots is 3x this value
        /// </summary>
        public readonly string? NumberOfTaskSlots;
        /// <summary>
        /// How many parallel task slots each new job is assigned. Unless you understand how Flink parallel dataflows work, please leave this at 1. Please do not set this value higher than (total number of nodes x number*of*task_slots), or every new job created will fail.
        /// </summary>
        public readonly string? ParallelismDefault;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.FlinkFlinkUserConfigPrivatelinkAccess? PrivatelinkAccess;
        /// <summary>
        /// failure-rate (default): Restarts the job after failure, but when failure rate (failures per time interval) is exceeded, the job eventually fails. Restart strategy waits a fixed amount of time between attempts.fixed-delay: Attempts to restart the job a given number of times before it fails. Restart strategy waits a fixed amount of time between attempts. exponential-delay: Attempts to restart the job infinitely, with increasing delay up to the maximum delay. The job never fails. none: The job fails directly and no restart is attempted.
        /// </summary>
        public readonly string? RestartStrategy;
        /// <summary>
        /// Delay between two consecutive restart attempts if restart-strategy has been set to fixed-delay or failure-rate. Delaying the retries can be helpful when the program interacts with external systems where for example connections or pending transactions should reach a timeout before re-execution is attempted.
        /// </summary>
        public readonly string? RestartStrategyDelaySec;
        /// <summary>
        /// Time interval for measuring failure rate if restart-strategy has been set to failure-rate. Specified in minutes.
        /// </summary>
        public readonly string? RestartStrategyFailureRateIntervalMin;
        /// <summary>
        /// The number of times that Flink retries the execution before the job is declared as failed if restart-strategy has been set to fixed-delay or failure-rate.
        /// </summary>
        public readonly string? RestartStrategyMaxFailures;

        [OutputConstructor]
        private FlinkFlinkUserConfig(
            string? additionalBackupRegions,

            string? executionCheckpointingIntervalMs,

            string? executionCheckpointingTimeoutMs,

            string? flinkVersion,

            ImmutableArray<Outputs.FlinkFlinkUserConfigIpFilterObject> ipFilterObjects,

            ImmutableArray<string> ipFilters,

            string? numberOfTaskSlots,

            string? parallelismDefault,

            Outputs.FlinkFlinkUserConfigPrivatelinkAccess? privatelinkAccess,

            string? restartStrategy,

            string? restartStrategyDelaySec,

            string? restartStrategyFailureRateIntervalMin,

            string? restartStrategyMaxFailures)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            ExecutionCheckpointingIntervalMs = executionCheckpointingIntervalMs;
            ExecutionCheckpointingTimeoutMs = executionCheckpointingTimeoutMs;
            FlinkVersion = flinkVersion;
            IpFilterObjects = ipFilterObjects;
            IpFilters = ipFilters;
            NumberOfTaskSlots = numberOfTaskSlots;
            ParallelismDefault = parallelismDefault;
            PrivatelinkAccess = privatelinkAccess;
            RestartStrategy = restartStrategy;
            RestartStrategyDelaySec = restartStrategyDelaySec;
            RestartStrategyFailureRateIntervalMin = restartStrategyFailureRateIntervalMin;
            RestartStrategyMaxFailures = restartStrategyMaxFailures;
        }
    }
}
