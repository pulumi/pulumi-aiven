// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetOpenSearchOpensearchUserConfigResult
    {
        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
        /// </summary>
        public readonly string? CustomDomain;
        /// <summary>
        /// Disable automatic replication factor adjustment for multi-node services.
        /// By default, Aiven ensures all indexes are replicated at least to two nodes. Note: setting this to true increases a
        /// risk of data loss in case of virtual machine failure.
        /// </summary>
        public readonly string? DisableReplicationFactorAdjustment;
        /// <summary>
        /// Glob pattern and number of indexes matching that pattern to be kept.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOpenSearchOpensearchUserConfigIndexPatternResult> IndexPatterns;
        /// <summary>
        /// Template settings for all new indexe.
        /// </summary>
        public readonly Outputs.GetOpenSearchOpensearchUserConfigIndexTemplateResult? IndexTemplate;
        /// <summary>
        /// allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        public readonly string? KeepIndexRefreshInterval;
        /// <summary>
        /// Maximum number of indexes to keep before deleting the oldest one.
        /// </summary>
        public readonly string? MaxIndexCount;
        /// <summary>
        /// Allow clients to connect to opensearch from the public internet for service nodes that are in a
        /// project VPC or another type of private network.
        /// </summary>
        public readonly Outputs.GetOpenSearchOpensearchUserConfigOpensearchResult? Opensearch;
        /// <summary>
        /// Allow clients to connect to opensearch_dashboards from the public internet for
        /// service nodes that are in a project VPC or another type of private network.
        /// </summary>
        public readonly Outputs.GetOpenSearchOpensearchUserConfigOpensearchDashboardsResult? OpensearchDashboards;
        /// <summary>
        /// Opensearch major version.
        /// </summary>
        public readonly string? OpensearchVersion;
        /// <summary>
        /// Allow access to selected service ports from private networks.
        /// </summary>
        public readonly Outputs.GetOpenSearchOpensearchUserConfigPrivateAccessResult? PrivateAccess;
        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        public readonly Outputs.GetOpenSearchOpensearchUserConfigPrivatelinkAccessResult? PrivatelinkAccess;
        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service
        /// is being created.
        /// </summary>
        public readonly string? ProjectToForkFrom;
        /// <summary>
        /// Allow access to selected service ports from the public Internet.
        /// </summary>
        public readonly Outputs.GetOpenSearchOpensearchUserConfigPublicAccessResult? PublicAccess;
        /// <summary>
        /// Name of the basebackup to restore in forked service.
        /// </summary>
        public readonly string? RecoveryBasebackupName;
        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being
        /// created.
        /// </summary>
        public readonly string? ServiceToForkFrom;
        public readonly string? StaticIps;

        [OutputConstructor]
        private GetOpenSearchOpensearchUserConfigResult(
            string? customDomain,

            string? disableReplicationFactorAdjustment,

            ImmutableArray<Outputs.GetOpenSearchOpensearchUserConfigIndexPatternResult> indexPatterns,

            Outputs.GetOpenSearchOpensearchUserConfigIndexTemplateResult? indexTemplate,

            ImmutableArray<string> ipFilters,

            string? keepIndexRefreshInterval,

            string? maxIndexCount,

            Outputs.GetOpenSearchOpensearchUserConfigOpensearchResult? opensearch,

            Outputs.GetOpenSearchOpensearchUserConfigOpensearchDashboardsResult? opensearchDashboards,

            string? opensearchVersion,

            Outputs.GetOpenSearchOpensearchUserConfigPrivateAccessResult? privateAccess,

            Outputs.GetOpenSearchOpensearchUserConfigPrivatelinkAccessResult? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.GetOpenSearchOpensearchUserConfigPublicAccessResult? publicAccess,

            string? recoveryBasebackupName,

            string? serviceToForkFrom,

            string? staticIps)
        {
            CustomDomain = customDomain;
            DisableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            IndexPatterns = indexPatterns;
            IndexTemplate = indexTemplate;
            IpFilters = ipFilters;
            KeepIndexRefreshInterval = keepIndexRefreshInterval;
            MaxIndexCount = maxIndexCount;
            Opensearch = opensearch;
            OpensearchDashboards = opensearchDashboards;
            OpensearchVersion = opensearchVersion;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            ServiceToForkFrom = serviceToForkFrom;
            StaticIps = staticIps;
        }
    }
}
