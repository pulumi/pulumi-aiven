// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Outputs
{

    [OutputType]
    public sealed class GetOpenSearchOpensearchUserConfigResult
    {
        public readonly string? AdditionalBackupRegions;
        public readonly string? CustomDomain;
        public readonly bool? DisableReplicationFactorAdjustment;
        public readonly ImmutableArray<Outputs.GetOpenSearchOpensearchUserConfigIndexPatternResult> IndexPatterns;
        public readonly Outputs.GetOpenSearchOpensearchUserConfigIndexTemplateResult? IndexTemplate;
        public readonly ImmutableArray<Outputs.GetOpenSearchOpensearchUserConfigIpFilterObjectResult> IpFilterObjects;
        public readonly ImmutableArray<string> IpFilterStrings;
        public readonly ImmutableArray<string> IpFilters;
        public readonly bool? KeepIndexRefreshInterval;
        public readonly int? MaxIndexCount;
        public readonly Outputs.GetOpenSearchOpensearchUserConfigOpenidResult? Openid;
        public readonly Outputs.GetOpenSearchOpensearchUserConfigOpensearchResult? Opensearch;
        public readonly Outputs.GetOpenSearchOpensearchUserConfigOpensearchDashboardsResult? OpensearchDashboards;
        public readonly string? OpensearchVersion;
        public readonly Outputs.GetOpenSearchOpensearchUserConfigPrivateAccessResult? PrivateAccess;
        public readonly Outputs.GetOpenSearchOpensearchUserConfigPrivatelinkAccessResult? PrivatelinkAccess;
        public readonly string? ProjectToForkFrom;
        public readonly Outputs.GetOpenSearchOpensearchUserConfigPublicAccessResult? PublicAccess;
        public readonly string? RecoveryBasebackupName;
        public readonly Outputs.GetOpenSearchOpensearchUserConfigSamlResult? Saml;
        public readonly bool? ServiceLog;
        public readonly string? ServiceToForkFrom;
        public readonly bool? StaticIps;

        [OutputConstructor]
        private GetOpenSearchOpensearchUserConfigResult(
            string? additionalBackupRegions,

            string? customDomain,

            bool? disableReplicationFactorAdjustment,

            ImmutableArray<Outputs.GetOpenSearchOpensearchUserConfigIndexPatternResult> indexPatterns,

            Outputs.GetOpenSearchOpensearchUserConfigIndexTemplateResult? indexTemplate,

            ImmutableArray<Outputs.GetOpenSearchOpensearchUserConfigIpFilterObjectResult> ipFilterObjects,

            ImmutableArray<string> ipFilterStrings,

            ImmutableArray<string> ipFilters,

            bool? keepIndexRefreshInterval,

            int? maxIndexCount,

            Outputs.GetOpenSearchOpensearchUserConfigOpenidResult? openid,

            Outputs.GetOpenSearchOpensearchUserConfigOpensearchResult? opensearch,

            Outputs.GetOpenSearchOpensearchUserConfigOpensearchDashboardsResult? opensearchDashboards,

            string? opensearchVersion,

            Outputs.GetOpenSearchOpensearchUserConfigPrivateAccessResult? privateAccess,

            Outputs.GetOpenSearchOpensearchUserConfigPrivatelinkAccessResult? privatelinkAccess,

            string? projectToForkFrom,

            Outputs.GetOpenSearchOpensearchUserConfigPublicAccessResult? publicAccess,

            string? recoveryBasebackupName,

            Outputs.GetOpenSearchOpensearchUserConfigSamlResult? saml,

            bool? serviceLog,

            string? serviceToForkFrom,

            bool? staticIps)
        {
            AdditionalBackupRegions = additionalBackupRegions;
            CustomDomain = customDomain;
            DisableReplicationFactorAdjustment = disableReplicationFactorAdjustment;
            IndexPatterns = indexPatterns;
            IndexTemplate = indexTemplate;
            IpFilterObjects = ipFilterObjects;
            IpFilterStrings = ipFilterStrings;
            IpFilters = ipFilters;
            KeepIndexRefreshInterval = keepIndexRefreshInterval;
            MaxIndexCount = maxIndexCount;
            Openid = openid;
            Opensearch = opensearch;
            OpensearchDashboards = opensearchDashboards;
            OpensearchVersion = opensearchVersion;
            PrivateAccess = privateAccess;
            PrivatelinkAccess = privatelinkAccess;
            ProjectToForkFrom = projectToForkFrom;
            PublicAccess = publicAccess;
            RecoveryBasebackupName = recoveryBasebackupName;
            Saml = saml;
            ServiceLog = serviceLog;
            ServiceToForkFrom = serviceToForkFrom;
            StaticIps = staticIps;
        }
    }
}
