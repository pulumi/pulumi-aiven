// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// The Project VPC resource allows the creation and management of Aiven Project VPCs.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import aiven:index/projectVpc:ProjectVpc myvpc project/id
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/projectVpc:ProjectVpc")]
    public partial class ProjectVpc : Pulumi.CustomResource
    {
        /// <summary>
        /// Defines where the cloud provider and region where the service is hosted in. See the Service resource for additional
        /// information. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Output("cloudName")]
        public Output<string> CloudName { get; private set; } = null!;

        /// <summary>
        /// Network address range used by the VPC like 192.168.0.0/24
        /// </summary>
        [Output("networkCidr")]
        public Output<string> NetworkCidr { get; private set; } = null!;

        /// <summary>
        /// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
        /// reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// State of the VPC. The possible values are `APPROVED`, `ACTIVE`, `DELETING` and `DELETED`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectVpc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectVpc(string name, ProjectVpcArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/projectVpc:ProjectVpc", name, args ?? new ProjectVpcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectVpc(string name, Input<string> id, ProjectVpcState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/projectVpc:ProjectVpc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectVpc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectVpc Get(string name, Input<string> id, ProjectVpcState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectVpc(name, id, state, options);
        }
    }

    public sealed class ProjectVpcArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines where the cloud provider and region where the service is hosted in. See the Service resource for additional
        /// information. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("cloudName", required: true)]
        public Input<string> CloudName { get; set; } = null!;

        /// <summary>
        /// Network address range used by the VPC like 192.168.0.0/24
        /// </summary>
        [Input("networkCidr", required: true)]
        public Input<string> NetworkCidr { get; set; } = null!;

        /// <summary>
        /// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
        /// reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public ProjectVpcArgs()
        {
        }
    }

    public sealed class ProjectVpcState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines where the cloud provider and region where the service is hosted in. See the Service resource for additional
        /// information. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        /// <summary>
        /// Network address range used by the VPC like 192.168.0.0/24
        /// </summary>
        [Input("networkCidr")]
        public Input<string>? NetworkCidr { get; set; }

        /// <summary>
        /// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
        /// reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// State of the VPC. The possible values are `APPROVED`, `ACTIVE`, `DELETING` and `DELETED`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public ProjectVpcState()
        {
        }
    }
}
