// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// ## # Elasticsearch ACL Config Resource
    /// 
    /// The Elasticsearch ACL Config resource allows the configuration of ACL management on an Aiven Elasticsearch service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var es_acl_config = new Aiven.ElasticSearchAclConfig("es-acl-config", new Aiven.ElasticSearchAclConfigArgs
    ///         {
    ///             Project = aiven_project.Es_project.Project,
    ///             ServiceName = aiven_service.Es.Service_name,
    ///             Enabled = true,
    ///             ExtendedAcl = false,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/elasticSearchAclConfig:ElasticSearchAclConfig")]
    public partial class ElasticSearchAclConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// enables of disables Elasticsearch ACL's.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs 
        /// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
        /// these APIs as long as all operations only target indexes they have been granted access to.
        /// </summary>
        [Output("extendedAcl")]
        public Output<bool?> ExtendedAcl { get; private set; } = null!;

        /// <summary>
        /// and `service_name` - (Required) define the project and service the ACL belongs to. 
        /// They should be defined using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Service to link the Elasticsearch ACLs to
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;


        /// <summary>
        /// Create a ElasticSearchAclConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ElasticSearchAclConfig(string name, ElasticSearchAclConfigArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/elasticSearchAclConfig:ElasticSearchAclConfig", name, args ?? new ElasticSearchAclConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ElasticSearchAclConfig(string name, Input<string> id, ElasticSearchAclConfigState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/elasticSearchAclConfig:ElasticSearchAclConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ElasticSearchAclConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ElasticSearchAclConfig Get(string name, Input<string> id, ElasticSearchAclConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ElasticSearchAclConfig(name, id, state, options);
        }
    }

    public sealed class ElasticSearchAclConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// enables of disables Elasticsearch ACL's.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs 
        /// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
        /// these APIs as long as all operations only target indexes they have been granted access to.
        /// </summary>
        [Input("extendedAcl")]
        public Input<bool>? ExtendedAcl { get; set; }

        /// <summary>
        /// and `service_name` - (Required) define the project and service the ACL belongs to. 
        /// They should be defined using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Service to link the Elasticsearch ACLs to
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public ElasticSearchAclConfigArgs()
        {
        }
    }

    public sealed class ElasticSearchAclConfigState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// enables of disables Elasticsearch ACL's.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs 
        /// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
        /// these APIs as long as all operations only target indexes they have been granted access to.
        /// </summary>
        [Input("extendedAcl")]
        public Input<bool>? ExtendedAcl { get; set; }

        /// <summary>
        /// and `service_name` - (Required) define the project and service the ACL belongs to. 
        /// They should be defined using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service to link the Elasticsearch ACLs to
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        public ElasticSearchAclConfigState()
        {
        }
    }
}
