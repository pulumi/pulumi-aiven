// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public partial class Redis : Pulumi.CustomResource
    {
        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Output("cloudName")]
        public Output<string?> CloudName { get; private set; } = null!;

        /// <summary>
        /// Service component information objects
        /// </summary>
        [Output("components")]
        public Output<ImmutableArray<Outputs.RedisComponent>> Components { get; private set; } = null!;

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Output("maintenanceWindowDow")]
        public Output<string?> MaintenanceWindowDow { get; private set; } = null!;

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Output("maintenanceWindowTime")]
        public Output<string?> MaintenanceWindowTime { get; private set; } = null!;

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// Target project
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Output("projectVpcId")]
        public Output<string?> ProjectVpcId { get; private set; } = null!;

        /// <summary>
        /// Redis server provided values
        /// </summary>
        [Output("redis")]
        public Output<Outputs.RedisRedis> RedisServer { get; private set; } = null!;

        /// <summary>
        /// Redis user configurable settings
        /// </summary>
        [Output("redisUserConfig")]
        public Output<Outputs.RedisRedisUserConfig?> RedisUserConfig { get; private set; } = null!;

        /// <summary>
        /// Service hostname
        /// </summary>
        [Output("serviceHost")]
        public Output<string> ServiceHost { get; private set; } = null!;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        [Output("serviceIntegrations")]
        public Output<ImmutableArray<Outputs.RedisServiceIntegration>> ServiceIntegrations { get; private set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Output("servicePassword")]
        public Output<string> ServicePassword { get; private set; } = null!;

        /// <summary>
        /// Service port
        /// </summary>
        [Output("servicePort")]
        public Output<int> ServicePort { get; private set; } = null!;

        /// <summary>
        /// Aiven internal service type code
        /// </summary>
        [Output("serviceType")]
        public Output<string> ServiceType { get; private set; } = null!;

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Output("serviceUri")]
        public Output<string> ServiceUri { get; private set; } = null!;

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Output("serviceUsername")]
        public Output<string> ServiceUsername { get; private set; } = null!;

        /// <summary>
        /// Service state
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;


        /// <summary>
        /// Create a Redis resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Redis(string name, RedisArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/redis:Redis", name, args ?? new RedisArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Redis(string name, Input<string> id, RedisState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/redis:Redis", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Redis resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Redis Get(string name, Input<string> id, RedisState? state = null, CustomResourceOptions? options = null)
        {
            return new Redis(name, id, state, options);
        }
    }

    public sealed class RedisArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Target project
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// Redis server provided values
        /// </summary>
        [Input("redis")]
        public Input<Inputs.RedisRedisArgs>? RedisServer { get; set; }

        /// <summary>
        /// Redis user configurable settings
        /// </summary>
        [Input("redisUserConfig")]
        public Input<Inputs.RedisRedisUserConfigArgs>? RedisUserConfig { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.RedisServiceIntegrationArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.RedisServiceIntegrationArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.RedisServiceIntegrationArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public RedisArgs()
        {
        }
    }

    public sealed class RedisState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloud the service runs in
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        [Input("components")]
        private InputList<Inputs.RedisComponentGetArgs>? _components;

        /// <summary>
        /// Service component information objects
        /// </summary>
        public InputList<Inputs.RedisComponentGetArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.RedisComponentGetArgs>());
            set => _components = value;
        }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Subscription plan
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Target project
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Identifier of the VPC the service should be in, if any
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// Redis server provided values
        /// </summary>
        [Input("redis")]
        public Input<Inputs.RedisRedisGetArgs>? RedisServer { get; set; }

        /// <summary>
        /// Redis user configurable settings
        /// </summary>
        [Input("redisUserConfig")]
        public Input<Inputs.RedisRedisUserConfigGetArgs>? RedisUserConfig { get; set; }

        /// <summary>
        /// Service hostname
        /// </summary>
        [Input("serviceHost")]
        public Input<string>? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.RedisServiceIntegrationGetArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.RedisServiceIntegrationGetArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.RedisServiceIntegrationGetArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Input("servicePassword")]
        public Input<string>? ServicePassword { get; set; }

        /// <summary>
        /// Service port
        /// </summary>
        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        /// <summary>
        /// Aiven internal service type code
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Input("serviceUri")]
        public Input<string>? ServiceUri { get; set; }

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Input("serviceUsername")]
        public Input<string>? ServiceUsername { get; set; }

        /// <summary>
        /// Service state
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Prevent service from being deleted. It is recommended to have this enabled for all services.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public RedisState()
        {
        }
    }
}
