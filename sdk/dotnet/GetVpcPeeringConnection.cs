// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetVpcPeeringConnection
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mypeeringconnection = Output.Create(Aiven.GetVpcPeeringConnection.InvokeAsync(new Aiven.GetVpcPeeringConnectionArgs
        ///         {
        ///             VpcId = data.Aiven_project_vpc.Vpc_id,
        ///             PeerCloudAccount = "&lt;PEER_ACCOUNT_ID&gt;",
        ///             PeerVpc = "&lt;PEER_VPC_ID/NAME&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVpcPeeringConnectionResult> InvokeAsync(GetVpcPeeringConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVpcPeeringConnectionResult>("aiven:index/getVpcPeeringConnection:getVpcPeeringConnection", args ?? new GetVpcPeeringConnectionArgs(), options.WithVersion());
    }


    public sealed class GetVpcPeeringConnectionArgs : Pulumi.InvokeArgs
    {
        [Input("peerAzureAppId")]
        public string? PeerAzureAppId { get; set; }

        [Input("peerAzureTenantId")]
        public string? PeerAzureTenantId { get; set; }

        [Input("peerCloudAccount", required: true)]
        public string PeerCloudAccount { get; set; } = null!;

        [Input("peerRegion")]
        public string? PeerRegion { get; set; }

        [Input("peerResourceGroup")]
        public string? PeerResourceGroup { get; set; }

        [Input("peerVpc", required: true)]
        public string PeerVpc { get; set; } = null!;

        [Input("peeringConnectionId")]
        public string? PeeringConnectionId { get; set; }

        [Input("state")]
        public string? State { get; set; }

        [Input("stateInfo")]
        private Dictionary<string, object>? _stateInfo;
        public Dictionary<string, object> StateInfo
        {
            get => _stateInfo ?? (_stateInfo = new Dictionary<string, object>());
            set => _stateInfo = value;
        }

        [Input("vpcId", required: true)]
        public string VpcId { get; set; } = null!;

        public GetVpcPeeringConnectionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVpcPeeringConnectionResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? PeerAzureAppId;
        public readonly string? PeerAzureTenantId;
        public readonly string PeerCloudAccount;
        public readonly string? PeerRegion;
        public readonly string? PeerResourceGroup;
        public readonly string PeerVpc;
        public readonly string PeeringConnectionId;
        public readonly string State;
        public readonly ImmutableDictionary<string, object> StateInfo;
        public readonly string VpcId;

        [OutputConstructor]
        private GetVpcPeeringConnectionResult(
            string id,

            string? peerAzureAppId,

            string? peerAzureTenantId,

            string peerCloudAccount,

            string? peerRegion,

            string? peerResourceGroup,

            string peerVpc,

            string peeringConnectionId,

            string state,

            ImmutableDictionary<string, object> stateInfo,

            string vpcId)
        {
            Id = id;
            PeerAzureAppId = peerAzureAppId;
            PeerAzureTenantId = peerAzureTenantId;
            PeerCloudAccount = peerCloudAccount;
            PeerRegion = peerRegion;
            PeerResourceGroup = peerResourceGroup;
            PeerVpc = peerVpc;
            PeeringConnectionId = peeringConnectionId;
            State = state;
            StateInfo = stateInfo;
            VpcId = vpcId;
        }
    }
}
