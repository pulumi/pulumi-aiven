// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetGrafana
    {
        public static Task<GetGrafanaResult> InvokeAsync(GetGrafanaArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGrafanaResult>("aiven:index/getGrafana:getGrafana", args ?? new GetGrafanaArgs(), options.WithVersion());
    }


    public sealed class GetGrafanaArgs : Pulumi.InvokeArgs
    {
        [Input("cloudName")]
        public string? CloudName { get; set; }

        [Input("components")]
        private List<Inputs.GetGrafanaComponentArgs>? _components;
        public List<Inputs.GetGrafanaComponentArgs> Components
        {
            get => _components ?? (_components = new List<Inputs.GetGrafanaComponentArgs>());
            set => _components = value;
        }

        [Input("grafana")]
        public Inputs.GetGrafanaGrafanaArgs? Grafana { get; set; }

        [Input("grafanaUserConfig")]
        public Inputs.GetGrafanaGrafanaUserConfigArgs? GrafanaUserConfig { get; set; }

        [Input("maintenanceWindowDow")]
        public string? MaintenanceWindowDow { get; set; }

        [Input("maintenanceWindowTime")]
        public string? MaintenanceWindowTime { get; set; }

        [Input("plan")]
        public string? Plan { get; set; }

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("projectVpcId")]
        public string? ProjectVpcId { get; set; }

        [Input("serviceHost")]
        public string? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private List<Inputs.GetGrafanaServiceIntegrationArgs>? _serviceIntegrations;
        public List<Inputs.GetGrafanaServiceIntegrationArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new List<Inputs.GetGrafanaServiceIntegrationArgs>());
            set => _serviceIntegrations = value;
        }

        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        [Input("servicePassword")]
        public string? ServicePassword { get; set; }

        [Input("servicePort")]
        public int? ServicePort { get; set; }

        [Input("serviceType")]
        public string? ServiceType { get; set; }

        [Input("serviceUri")]
        public string? ServiceUri { get; set; }

        [Input("serviceUsername")]
        public string? ServiceUsername { get; set; }

        [Input("state")]
        public string? State { get; set; }

        [Input("terminationProtection")]
        public bool? TerminationProtection { get; set; }

        public GetGrafanaArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGrafanaResult
    {
        public readonly string? CloudName;
        public readonly ImmutableArray<Outputs.GetGrafanaComponentResult> Components;
        public readonly Outputs.GetGrafanaGrafanaResult Grafana;
        public readonly Outputs.GetGrafanaGrafanaUserConfigResult? GrafanaUserConfig;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? MaintenanceWindowDow;
        public readonly string? MaintenanceWindowTime;
        public readonly string? Plan;
        public readonly string Project;
        public readonly string? ProjectVpcId;
        public readonly string ServiceHost;
        public readonly ImmutableArray<Outputs.GetGrafanaServiceIntegrationResult> ServiceIntegrations;
        public readonly string ServiceName;
        public readonly string ServicePassword;
        public readonly int ServicePort;
        public readonly string ServiceType;
        public readonly string ServiceUri;
        public readonly string ServiceUsername;
        public readonly string State;
        public readonly bool? TerminationProtection;

        [OutputConstructor]
        private GetGrafanaResult(
            string? cloudName,

            ImmutableArray<Outputs.GetGrafanaComponentResult> components,

            Outputs.GetGrafanaGrafanaResult grafana,

            Outputs.GetGrafanaGrafanaUserConfigResult? grafanaUserConfig,

            string id,

            string? maintenanceWindowDow,

            string? maintenanceWindowTime,

            string? plan,

            string project,

            string? projectVpcId,

            string serviceHost,

            ImmutableArray<Outputs.GetGrafanaServiceIntegrationResult> serviceIntegrations,

            string serviceName,

            string servicePassword,

            int servicePort,

            string serviceType,

            string serviceUri,

            string serviceUsername,

            string state,

            bool? terminationProtection)
        {
            CloudName = cloudName;
            Components = components;
            Grafana = grafana;
            GrafanaUserConfig = grafanaUserConfig;
            Id = id;
            MaintenanceWindowDow = maintenanceWindowDow;
            MaintenanceWindowTime = maintenanceWindowTime;
            Plan = plan;
            Project = project;
            ProjectVpcId = projectVpcId;
            ServiceHost = serviceHost;
            ServiceIntegrations = serviceIntegrations;
            ServiceName = serviceName;
            ServicePassword = servicePassword;
            ServicePort = servicePort;
            ServiceType = serviceType;
            ServiceUri = serviceUri;
            ServiceUsername = serviceUsername;
            State = state;
            TerminationProtection = terminationProtection;
        }
    }
}
