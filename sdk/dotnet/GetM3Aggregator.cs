// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetM3Aggregator
    {
        public static Task<GetM3AggregatorResult> InvokeAsync(GetM3AggregatorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetM3AggregatorResult>("aiven:index/getM3Aggregator:getM3Aggregator", args ?? new GetM3AggregatorArgs(), options.WithDefaults());

        public static Output<GetM3AggregatorResult> Invoke(GetM3AggregatorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetM3AggregatorResult>("aiven:index/getM3Aggregator:getM3Aggregator", args ?? new GetM3AggregatorInvokeArgs(), options.WithDefaults());

        public static Output<GetM3AggregatorResult> Invoke(GetM3AggregatorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetM3AggregatorResult>("aiven:index/getM3Aggregator:getM3Aggregator", args ?? new GetM3AggregatorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetM3AggregatorArgs : global::Pulumi.InvokeArgs
    {
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetM3AggregatorArgs()
        {
        }
        public static new GetM3AggregatorArgs Empty => new GetM3AggregatorArgs();
    }

    public sealed class GetM3AggregatorInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetM3AggregatorInvokeArgs()
        {
        }
        public static new GetM3AggregatorInvokeArgs Empty => new GetM3AggregatorInvokeArgs();
    }


    [OutputType]
    public sealed class GetM3AggregatorResult
    {
        public readonly string AdditionalDiskSpace;
        public readonly string CloudName;
        public readonly ImmutableArray<Outputs.GetM3AggregatorComponentResult> Components;
        public readonly string DiskSpace;
        public readonly string DiskSpaceCap;
        public readonly string DiskSpaceDefault;
        public readonly string DiskSpaceStep;
        public readonly string DiskSpaceUsed;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetM3AggregatorM3aggregatorUserConfigResult> M3aggregatorUserConfigs;
        public readonly ImmutableArray<Outputs.GetM3AggregatorM3aggregatorResult> M3aggregators;
        public readonly string MaintenanceWindowDow;
        public readonly bool MaintenanceWindowEnabled;
        public readonly string MaintenanceWindowTime;
        public readonly string Plan;
        public readonly string Project;
        public readonly string ProjectVpcId;
        public readonly string ServiceHost;
        public readonly ImmutableArray<Outputs.GetM3AggregatorServiceIntegrationResult> ServiceIntegrations;
        public readonly string ServiceName;
        public readonly string ServicePassword;
        public readonly int ServicePort;
        public readonly string ServiceType;
        public readonly string ServiceUri;
        public readonly string ServiceUsername;
        public readonly string State;
        public readonly ImmutableArray<string> StaticIps;
        public readonly ImmutableArray<Outputs.GetM3AggregatorTagResult> Tags;
        public readonly ImmutableArray<Outputs.GetM3AggregatorTechEmailResult> TechEmails;
        public readonly bool TerminationProtection;

        [OutputConstructor]
        private GetM3AggregatorResult(
            string additionalDiskSpace,

            string cloudName,

            ImmutableArray<Outputs.GetM3AggregatorComponentResult> components,

            string diskSpace,

            string diskSpaceCap,

            string diskSpaceDefault,

            string diskSpaceStep,

            string diskSpaceUsed,

            string id,

            ImmutableArray<Outputs.GetM3AggregatorM3aggregatorUserConfigResult> m3aggregatorUserConfigs,

            ImmutableArray<Outputs.GetM3AggregatorM3aggregatorResult> m3aggregators,

            string maintenanceWindowDow,

            bool maintenanceWindowEnabled,

            string maintenanceWindowTime,

            string plan,

            string project,

            string projectVpcId,

            string serviceHost,

            ImmutableArray<Outputs.GetM3AggregatorServiceIntegrationResult> serviceIntegrations,

            string serviceName,

            string servicePassword,

            int servicePort,

            string serviceType,

            string serviceUri,

            string serviceUsername,

            string state,

            ImmutableArray<string> staticIps,

            ImmutableArray<Outputs.GetM3AggregatorTagResult> tags,

            ImmutableArray<Outputs.GetM3AggregatorTechEmailResult> techEmails,

            bool terminationProtection)
        {
            AdditionalDiskSpace = additionalDiskSpace;
            CloudName = cloudName;
            Components = components;
            DiskSpace = diskSpace;
            DiskSpaceCap = diskSpaceCap;
            DiskSpaceDefault = diskSpaceDefault;
            DiskSpaceStep = diskSpaceStep;
            DiskSpaceUsed = diskSpaceUsed;
            Id = id;
            M3aggregatorUserConfigs = m3aggregatorUserConfigs;
            M3aggregators = m3aggregators;
            MaintenanceWindowDow = maintenanceWindowDow;
            MaintenanceWindowEnabled = maintenanceWindowEnabled;
            MaintenanceWindowTime = maintenanceWindowTime;
            Plan = plan;
            Project = project;
            ProjectVpcId = projectVpcId;
            ServiceHost = serviceHost;
            ServiceIntegrations = serviceIntegrations;
            ServiceName = serviceName;
            ServicePassword = servicePassword;
            ServicePort = servicePort;
            ServiceType = serviceType;
            ServiceUri = serviceUri;
            ServiceUsername = serviceUsername;
            State = state;
            StaticIps = staticIps;
            Tags = tags;
            TechEmails = techEmails;
            TerminationProtection = terminationProtection;
        }
    }
}
