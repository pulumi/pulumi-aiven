// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// Creates and manages an [Aiven project](https://aiven.io/docs/platform/concepts/orgs-units-projects#projects).
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import aiven:index/organizationProject:OrganizationProject example_project ORGANIZATION_ID/PROJECT_ID
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/organizationProject:OrganizationProject")]
    public partial class OrganizationProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Valid port number (1-65535) to use as a base for service port allocation.
        /// </summary>
        [Output("basePort")]
        public Output<int> BasePort { get; private set; } = null!;

        /// <summary>
        /// Billing group ID to assign to the project. It's required when moving projects between organizations.
        /// </summary>
        [Output("billingGroupId")]
        public Output<string> BillingGroupId { get; private set; } = null!;

        /// <summary>
        /// PEM encoded certificate.
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// ID of an organization. Maximum length: `36`.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        /// <summary>
        /// The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags are key-value pairs that allow you to categorize projects.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.OrganizationProjectTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
        /// </summary>
        [Output("technicalEmails")]
        public Output<ImmutableArray<string>> TechnicalEmails { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.OrganizationProjectTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationProject(string name, OrganizationProjectArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/organizationProject:OrganizationProject", name, args ?? new OrganizationProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationProject(string name, Input<string> id, OrganizationProjectState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/organizationProject:OrganizationProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "caCert",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationProject Get(string name, Input<string> id, OrganizationProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationProject(name, id, state, options);
        }
    }

    public sealed class OrganizationProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Valid port number (1-65535) to use as a base for service port allocation.
        /// </summary>
        [Input("basePort")]
        public Input<int>? BasePort { get; set; }

        /// <summary>
        /// Billing group ID to assign to the project. It's required when moving projects between organizations.
        /// </summary>
        [Input("billingGroupId", required: true)]
        public Input<string> BillingGroupId { get; set; } = null!;

        /// <summary>
        /// ID of an organization. Maximum length: `36`.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
        /// </summary>
        [Input("parentId", required: true)]
        public Input<string> ParentId { get; set; } = null!;

        /// <summary>
        /// The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.OrganizationProjectTagArgs>? _tags;

        /// <summary>
        /// Tags are key-value pairs that allow you to categorize projects.
        /// </summary>
        public InputList<Inputs.OrganizationProjectTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.OrganizationProjectTagArgs>());
            set => _tags = value;
        }

        [Input("technicalEmails")]
        private InputList<string>? _technicalEmails;

        /// <summary>
        /// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
        /// </summary>
        public InputList<string> TechnicalEmails
        {
            get => _technicalEmails ?? (_technicalEmails = new InputList<string>());
            set => _technicalEmails = value;
        }

        [Input("timeouts")]
        public Input<Inputs.OrganizationProjectTimeoutsArgs>? Timeouts { get; set; }

        public OrganizationProjectArgs()
        {
        }
        public static new OrganizationProjectArgs Empty => new OrganizationProjectArgs();
    }

    public sealed class OrganizationProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Valid port number (1-65535) to use as a base for service port allocation.
        /// </summary>
        [Input("basePort")]
        public Input<int>? BasePort { get; set; }

        /// <summary>
        /// Billing group ID to assign to the project. It's required when moving projects between organizations.
        /// </summary>
        [Input("billingGroupId")]
        public Input<string>? BillingGroupId { get; set; }

        [Input("caCert")]
        private Input<string>? _caCert;

        /// <summary>
        /// PEM encoded certificate.
        /// </summary>
        public Input<string>? CaCert
        {
            get => _caCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// ID of an organization. Maximum length: `36`.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<Inputs.OrganizationProjectTagGetArgs>? _tags;

        /// <summary>
        /// Tags are key-value pairs that allow you to categorize projects.
        /// </summary>
        public InputList<Inputs.OrganizationProjectTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.OrganizationProjectTagGetArgs>());
            set => _tags = value;
        }

        [Input("technicalEmails")]
        private InputList<string>? _technicalEmails;

        /// <summary>
        /// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
        /// </summary>
        public InputList<string> TechnicalEmails
        {
            get => _technicalEmails ?? (_technicalEmails = new InputList<string>());
            set => _technicalEmails = value;
        }

        [Input("timeouts")]
        public Input<Inputs.OrganizationProjectTimeoutsGetArgs>? Timeouts { get; set; }

        public OrganizationProjectState()
        {
        }
        public static new OrganizationProjectState Empty => new OrganizationProjectState();
    }
}
