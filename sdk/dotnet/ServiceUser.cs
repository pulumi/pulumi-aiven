// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// ## # Service User Resource
    /// 
    /// The Service User resource allows the creation and management of Aiven Service Users.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myserviceuser = new Aiven.ServiceUser("myserviceuser", new Aiven.ServiceUserArgs
    ///         {
    ///             Project = aiven_project.Myproject.Project,
    ///             ServiceName = aiven_service.Myservice.Service_name,
    ///             Username = "&lt;USERNAME&gt;",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// &gt; **Note** The service user resource is not supported for Aiven Grafana services.
    /// </summary>
    [AivenResourceType("aiven:index/serviceUser:ServiceUser")]
    public partial class ServiceUser : Pulumi.CustomResource
    {
        /// <summary>
        /// is the access certificate of the user (not applicable for all services).
        /// </summary>
        [Output("accessCert")]
        public Output<string> AccessCert { get; private set; } = null!;

        /// <summary>
        /// is the access key of the user (not applicable for all services).
        /// </summary>
        [Output("accessKey")]
        public Output<string> AccessKey { get; private set; } = null!;

        /// <summary>
        /// Authentication details
        /// </summary>
        [Output("authentication")]
        public Output<string?> Authentication { get; private set; } = null!;

        /// <summary>
        /// Password of the user
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// and `service_name` - (Required) define the project and service the user belongs to. They should be defined
        /// using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Redis specific field, defines command category rules.
        /// </summary>
        [Output("redisAclCategories")]
        public Output<ImmutableArray<string>> RedisAclCategories { get; private set; } = null!;

        /// <summary>
        /// Redis specific field, defines rules for individual commands.
        /// </summary>
        [Output("redisAclCommands")]
        public Output<ImmutableArray<string>> RedisAclCommands { get; private set; } = null!;

        /// <summary>
        /// Redis specific field, defines key access rules.
        /// </summary>
        [Output("redisAclKeys")]
        public Output<ImmutableArray<string>> RedisAclKeys { get; private set; } = null!;

        /// <summary>
        /// Service to link the user to
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// tells whether the user is primary account or regular account.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// is the actual name of the user account.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceUser(string name, ServiceUserArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/serviceUser:ServiceUser", name, args ?? new ServiceUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceUser(string name, Input<string> id, ServiceUserState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/serviceUser:ServiceUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceUser Get(string name, Input<string> id, ServiceUserState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceUser(name, id, state, options);
        }
    }

    public sealed class ServiceUserArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication details
        /// </summary>
        [Input("authentication")]
        public Input<string>? Authentication { get; set; }

        /// <summary>
        /// Password of the user
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// and `service_name` - (Required) define the project and service the user belongs to. They should be defined
        /// using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("redisAclCategories")]
        private InputList<string>? _redisAclCategories;

        /// <summary>
        /// Redis specific field, defines command category rules.
        /// </summary>
        public InputList<string> RedisAclCategories
        {
            get => _redisAclCategories ?? (_redisAclCategories = new InputList<string>());
            set => _redisAclCategories = value;
        }

        [Input("redisAclCommands")]
        private InputList<string>? _redisAclCommands;

        /// <summary>
        /// Redis specific field, defines rules for individual commands.
        /// </summary>
        public InputList<string> RedisAclCommands
        {
            get => _redisAclCommands ?? (_redisAclCommands = new InputList<string>());
            set => _redisAclCommands = value;
        }

        [Input("redisAclKeys")]
        private InputList<string>? _redisAclKeys;

        /// <summary>
        /// Redis specific field, defines key access rules.
        /// </summary>
        public InputList<string> RedisAclKeys
        {
            get => _redisAclKeys ?? (_redisAclKeys = new InputList<string>());
            set => _redisAclKeys = value;
        }

        /// <summary>
        /// Service to link the user to
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// is the actual name of the user account.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ServiceUserArgs()
        {
        }
    }

    public sealed class ServiceUserState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// is the access certificate of the user (not applicable for all services).
        /// </summary>
        [Input("accessCert")]
        public Input<string>? AccessCert { get; set; }

        /// <summary>
        /// is the access key of the user (not applicable for all services).
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// Authentication details
        /// </summary>
        [Input("authentication")]
        public Input<string>? Authentication { get; set; }

        /// <summary>
        /// Password of the user
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// and `service_name` - (Required) define the project and service the user belongs to. They should be defined
        /// using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("redisAclCategories")]
        private InputList<string>? _redisAclCategories;

        /// <summary>
        /// Redis specific field, defines command category rules.
        /// </summary>
        public InputList<string> RedisAclCategories
        {
            get => _redisAclCategories ?? (_redisAclCategories = new InputList<string>());
            set => _redisAclCategories = value;
        }

        [Input("redisAclCommands")]
        private InputList<string>? _redisAclCommands;

        /// <summary>
        /// Redis specific field, defines rules for individual commands.
        /// </summary>
        public InputList<string> RedisAclCommands
        {
            get => _redisAclCommands ?? (_redisAclCommands = new InputList<string>());
            set => _redisAclCommands = value;
        }

        [Input("redisAclKeys")]
        private InputList<string>? _redisAclKeys;

        /// <summary>
        /// Redis specific field, defines key access rules.
        /// </summary>
        public InputList<string> RedisAclKeys
        {
            get => _redisAclKeys ?? (_redisAclKeys = new InputList<string>());
            set => _redisAclKeys = value;
        }

        /// <summary>
        /// Service to link the user to
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// tells whether the user is primary account or regular account.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// is the actual name of the user account.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ServiceUserState()
        {
        }
    }
}
