// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// ## # Project User Resource
    /// 
    /// The Project User resource allows the creation and management of Aiven Project Users.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var mytestuser = new Aiven.ProjectUser("mytestuser", new Aiven.ProjectUserArgs
    ///         {
    ///             Email = "john.doe@example.com",
    ///             MemberType = "admin",
    ///             Project = aiven_project.Myproject.Project,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class ProjectUser : Pulumi.CustomResource
    {
        /// <summary>
        /// is a computed property tells whether the user has accepted the request to join
        /// the project; adding user to a project sends an invitation to the target user and the
        /// actual membership is only created once the user accepts the invitation. This property
        /// cannot be set, only read.
        /// </summary>
        [Output("accepted")]
        public Output<bool> Accepted { get; private set; } = null!;

        /// <summary>
        /// identifies the email address of the user.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// defines the access level the user has to the project.
        /// </summary>
        [Output("memberType")]
        public Output<string> MemberType { get; private set; } = null!;

        /// <summary>
        /// defines the project the user is a member of.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectUser(string name, ProjectUserArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/projectUser:ProjectUser", name, args ?? new ProjectUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectUser(string name, Input<string> id, ProjectUserState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/projectUser:ProjectUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectUser Get(string name, Input<string> id, ProjectUserState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectUser(name, id, state, options);
        }
    }

    public sealed class ProjectUserArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// identifies the email address of the user.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// defines the access level the user has to the project.
        /// </summary>
        [Input("memberType", required: true)]
        public Input<string> MemberType { get; set; } = null!;

        /// <summary>
        /// defines the project the user is a member of.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public ProjectUserArgs()
        {
        }
    }

    public sealed class ProjectUserState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// is a computed property tells whether the user has accepted the request to join
        /// the project; adding user to a project sends an invitation to the target user and the
        /// actual membership is only created once the user accepts the invitation. This property
        /// cannot be set, only read.
        /// </summary>
        [Input("accepted")]
        public Input<bool>? Accepted { get; set; }

        /// <summary>
        /// identifies the email address of the user.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// defines the access level the user has to the project.
        /// </summary>
        [Input("memberType")]
        public Input<string>? MemberType { get; set; }

        /// <summary>
        /// defines the project the user is a member of.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ProjectUserState()
        {
        }
    }
}
