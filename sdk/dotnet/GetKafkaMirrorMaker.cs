// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Aiven
{
    public static class GetKafkaMirrorMaker
    {
        /// <summary>
        /// ## # Kafka MirrorMaker Data Source
        /// 
        /// The Kafka MirrorMaker data source provides information about the existing Aiven Kafka MirrorMaker 2 service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mm1 = Output.Create(Aiven.GetKafkaMirrorMaker.InvokeAsync(new Aiven.GetKafkaMirrorMakerArgs
        ///         {
        ///             Project = data.Aiven_project.Pr1.Project,
        ///             ServiceName = "my-mm1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaMirrorMakerResult> InvokeAsync(GetKafkaMirrorMakerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaMirrorMakerResult>("aiven:index/getKafkaMirrorMaker:getKafkaMirrorMaker", args ?? new GetKafkaMirrorMakerArgs(), options.WithVersion());

        /// <summary>
        /// ## # Kafka MirrorMaker Data Source
        /// 
        /// The Kafka MirrorMaker data source provides information about the existing Aiven Kafka MirrorMaker 2 service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mm1 = Output.Create(Aiven.GetKafkaMirrorMaker.InvokeAsync(new Aiven.GetKafkaMirrorMakerArgs
        ///         {
        ///             Project = data.Aiven_project.Pr1.Project,
        ///             ServiceName = "my-mm1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKafkaMirrorMakerResult> Invoke(GetKafkaMirrorMakerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKafkaMirrorMakerResult>("aiven:index/getKafkaMirrorMaker:getKafkaMirrorMaker", args ?? new GetKafkaMirrorMakerInvokeArgs(), options.WithVersion());
    }


    public sealed class GetKafkaMirrorMakerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// defines where the cloud provider and region where the service is hosted
        /// in. This can be changed freely after service is created. Changing the value will trigger
        /// a potentially lengthy migration process for the service. Format is cloud provider name
        /// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
        /// specific region name. These are documented on each Cloud provider's own support articles,
        /// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
        /// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        /// </summary>
        [Input("cloudName")]
        public string? CloudName { get; set; }

        [Input("components")]
        private List<Inputs.GetKafkaMirrorMakerComponentArgs>? _components;
        public List<Inputs.GetKafkaMirrorMakerComponentArgs> Components
        {
            get => _components ?? (_components = new List<Inputs.GetKafkaMirrorMakerComponentArgs>());
            set => _components = value;
        }

        /// <summary>
        /// Kafka MirrorMaker 2 specific server provided values.
        /// </summary>
        [Input("kafkaMirrormaker")]
        public Inputs.GetKafkaMirrorMakerKafkaMirrormakerArgs? KafkaMirrormaker { get; set; }

        /// <summary>
        /// defines Kafka MirrorMaker 2 specific additional configuration options. 
        /// The following configuration options available:
        /// </summary>
        [Input("kafkaMirrormakerUserConfig")]
        public Inputs.GetKafkaMirrorMakerKafkaMirrormakerUserConfigArgs? KafkaMirrormakerUserConfig { get; set; }

        /// <summary>
        /// day of week when maintenance operations should be performed. 
        /// On monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public string? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// time of day when maintenance operations should be performed. 
        /// UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public string? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// defines what kind of computing resources are allocated for the service. It can
        /// be changed after creation, though there are some restrictions when going to a smaller
        /// plan such as the new plan must have sufficient amount of disk space to store all current
        /// data and switching to a plan with fewer nodes might not be supported. The basic plan
        /// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
        /// (roughly) the amount of memory on each node (also other attributes like number of CPUs
        /// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Input("plan")]
        public string? Plan { get; set; }

        /// <summary>
        /// identifies the project the service belongs to. To set up proper dependency
        /// between the project and the service, refer to the project as shown in the above example.
        /// Project cannot be changed later without destroying and re-creating the service.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// optionally specifies the VPC the service should run in. If the value
        /// is not set the service is not run inside a VPC. When set, the value should be given as a
        /// reference as shown above to set up dependencies correctly and the VPC must be in the same
        /// cloud and region as the service itself. Project can be freely moved to and from VPC after
        /// creation but doing so triggers migration to new servers so the operation can take
        /// significant amount of time to complete if the service has a lot of data.
        /// </summary>
        [Input("projectVpcId")]
        public string? ProjectVpcId { get; set; }

        /// <summary>
        /// Kafka MirrorMaker 2 hostname.
        /// </summary>
        [Input("serviceHost")]
        public string? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private List<Inputs.GetKafkaMirrorMakerServiceIntegrationArgs>? _serviceIntegrations;
        public List<Inputs.GetKafkaMirrorMakerServiceIntegrationArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new List<Inputs.GetKafkaMirrorMakerServiceIntegrationArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// specifies the actual name of the service. The name cannot be changed
        /// later without destroying and re-creating the service so name should be picked based on
        /// intended service usage rather than current attributes.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// Password used for connecting to the Kafka MirrorMaker 2 service, if applicable.
        /// </summary>
        [Input("servicePassword")]
        public string? ServicePassword { get; set; }

        /// <summary>
        /// Kafka MirrorMaker 2 port.
        /// </summary>
        [Input("servicePort")]
        public int? ServicePort { get; set; }

        [Input("serviceType")]
        public string? ServiceType { get; set; }

        /// <summary>
        /// URI for connecting to the Kafka MirrorMaker 2 service.
        /// </summary>
        [Input("serviceUri")]
        public string? ServiceUri { get; set; }

        /// <summary>
        /// Username used for connecting to the Kafka MirrorMaker 2 service, if applicable.
        /// </summary>
        [Input("serviceUsername")]
        public string? ServiceUsername { get; set; }

        /// <summary>
        /// Service state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// prevents the service from being deleted. It is recommended to
        /// set this to `true` for all production services to prevent unintentional service
        /// deletion. This does not shield against deleting databases or topics but for services
        /// with backups much of the content can at least be restored from backup in case accidental
        /// deletion is done.
        /// </summary>
        [Input("terminationProtection")]
        public bool? TerminationProtection { get; set; }

        public GetKafkaMirrorMakerArgs()
        {
        }
    }

    public sealed class GetKafkaMirrorMakerInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// defines where the cloud provider and region where the service is hosted
        /// in. This can be changed freely after service is created. Changing the value will trigger
        /// a potentially lengthy migration process for the service. Format is cloud provider name
        /// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
        /// specific region name. These are documented on each Cloud provider's own support articles,
        /// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
        /// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        [Input("components")]
        private InputList<Inputs.GetKafkaMirrorMakerComponentInputArgs>? _components;
        public InputList<Inputs.GetKafkaMirrorMakerComponentInputArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.GetKafkaMirrorMakerComponentInputArgs>());
            set => _components = value;
        }

        /// <summary>
        /// Kafka MirrorMaker 2 specific server provided values.
        /// </summary>
        [Input("kafkaMirrormaker")]
        public Input<Inputs.GetKafkaMirrorMakerKafkaMirrormakerInputArgs>? KafkaMirrormaker { get; set; }

        /// <summary>
        /// defines Kafka MirrorMaker 2 specific additional configuration options. 
        /// The following configuration options available:
        /// </summary>
        [Input("kafkaMirrormakerUserConfig")]
        public Input<Inputs.GetKafkaMirrorMakerKafkaMirrormakerUserConfigInputArgs>? KafkaMirrormakerUserConfig { get; set; }

        /// <summary>
        /// day of week when maintenance operations should be performed. 
        /// On monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// time of day when maintenance operations should be performed. 
        /// UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// defines what kind of computing resources are allocated for the service. It can
        /// be changed after creation, though there are some restrictions when going to a smaller
        /// plan such as the new plan must have sufficient amount of disk space to store all current
        /// data and switching to a plan with fewer nodes might not be supported. The basic plan
        /// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
        /// (roughly) the amount of memory on each node (also other attributes like number of CPUs
        /// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// identifies the project the service belongs to. To set up proper dependency
        /// between the project and the service, refer to the project as shown in the above example.
        /// Project cannot be changed later without destroying and re-creating the service.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// optionally specifies the VPC the service should run in. If the value
        /// is not set the service is not run inside a VPC. When set, the value should be given as a
        /// reference as shown above to set up dependencies correctly and the VPC must be in the same
        /// cloud and region as the service itself. Project can be freely moved to and from VPC after
        /// creation but doing so triggers migration to new servers so the operation can take
        /// significant amount of time to complete if the service has a lot of data.
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// Kafka MirrorMaker 2 hostname.
        /// </summary>
        [Input("serviceHost")]
        public Input<string>? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.GetKafkaMirrorMakerServiceIntegrationInputArgs>? _serviceIntegrations;
        public InputList<Inputs.GetKafkaMirrorMakerServiceIntegrationInputArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.GetKafkaMirrorMakerServiceIntegrationInputArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// specifies the actual name of the service. The name cannot be changed
        /// later without destroying and re-creating the service so name should be picked based on
        /// intended service usage rather than current attributes.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Password used for connecting to the Kafka MirrorMaker 2 service, if applicable.
        /// </summary>
        [Input("servicePassword")]
        public Input<string>? ServicePassword { get; set; }

        /// <summary>
        /// Kafka MirrorMaker 2 port.
        /// </summary>
        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// URI for connecting to the Kafka MirrorMaker 2 service.
        /// </summary>
        [Input("serviceUri")]
        public Input<string>? ServiceUri { get; set; }

        /// <summary>
        /// Username used for connecting to the Kafka MirrorMaker 2 service, if applicable.
        /// </summary>
        [Input("serviceUsername")]
        public Input<string>? ServiceUsername { get; set; }

        /// <summary>
        /// Service state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// prevents the service from being deleted. It is recommended to
        /// set this to `true` for all production services to prevent unintentional service
        /// deletion. This does not shield against deleting databases or topics but for services
        /// with backups much of the content can at least be restored from backup in case accidental
        /// deletion is done.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public GetKafkaMirrorMakerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaMirrorMakerResult
    {
        /// <summary>
        /// defines where the cloud provider and region where the service is hosted
        /// in. This can be changed freely after service is created. Changing the value will trigger
        /// a potentially lengthy migration process for the service. Format is cloud provider name
        /// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
        /// specific region name. These are documented on each Cloud provider's own support articles,
        /// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
        /// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        /// </summary>
        public readonly string? CloudName;
        public readonly ImmutableArray<Outputs.GetKafkaMirrorMakerComponentResult> Components;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kafka MirrorMaker 2 specific server provided values.
        /// </summary>
        public readonly Outputs.GetKafkaMirrorMakerKafkaMirrormakerResult KafkaMirrormaker;
        /// <summary>
        /// defines Kafka MirrorMaker 2 specific additional configuration options. 
        /// The following configuration options available:
        /// </summary>
        public readonly Outputs.GetKafkaMirrorMakerKafkaMirrormakerUserConfigResult? KafkaMirrormakerUserConfig;
        /// <summary>
        /// day of week when maintenance operations should be performed. 
        /// On monday, tuesday, wednesday, etc.
        /// </summary>
        public readonly string? MaintenanceWindowDow;
        /// <summary>
        /// time of day when maintenance operations should be performed. 
        /// UTC time in HH:mm:ss format.
        /// </summary>
        public readonly string? MaintenanceWindowTime;
        /// <summary>
        /// defines what kind of computing resources are allocated for the service. It can
        /// be changed after creation, though there are some restrictions when going to a smaller
        /// plan such as the new plan must have sufficient amount of disk space to store all current
        /// data and switching to a plan with fewer nodes might not be supported. The basic plan
        /// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
        /// (roughly) the amount of memory on each node (also other attributes like number of CPUs
        /// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        public readonly string? Plan;
        public readonly string Project;
        /// <summary>
        /// optionally specifies the VPC the service should run in. If the value
        /// is not set the service is not run inside a VPC. When set, the value should be given as a
        /// reference as shown above to set up dependencies correctly and the VPC must be in the same
        /// cloud and region as the service itself. Project can be freely moved to and from VPC after
        /// creation but doing so triggers migration to new servers so the operation can take
        /// significant amount of time to complete if the service has a lot of data.
        /// </summary>
        public readonly string? ProjectVpcId;
        /// <summary>
        /// Kafka MirrorMaker 2 hostname.
        /// </summary>
        public readonly string ServiceHost;
        public readonly ImmutableArray<Outputs.GetKafkaMirrorMakerServiceIntegrationResult> ServiceIntegrations;
        public readonly string ServiceName;
        /// <summary>
        /// Password used for connecting to the Kafka MirrorMaker 2 service, if applicable.
        /// </summary>
        public readonly string ServicePassword;
        /// <summary>
        /// Kafka MirrorMaker 2 port.
        /// </summary>
        public readonly int ServicePort;
        public readonly string ServiceType;
        /// <summary>
        /// URI for connecting to the Kafka MirrorMaker 2 service.
        /// </summary>
        public readonly string ServiceUri;
        /// <summary>
        /// Username used for connecting to the Kafka MirrorMaker 2 service, if applicable.
        /// </summary>
        public readonly string ServiceUsername;
        /// <summary>
        /// Service state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// prevents the service from being deleted. It is recommended to
        /// set this to `true` for all production services to prevent unintentional service
        /// deletion. This does not shield against deleting databases or topics but for services
        /// with backups much of the content can at least be restored from backup in case accidental
        /// deletion is done.
        /// </summary>
        public readonly bool? TerminationProtection;

        [OutputConstructor]
        private GetKafkaMirrorMakerResult(
            string? cloudName,

            ImmutableArray<Outputs.GetKafkaMirrorMakerComponentResult> components,

            string id,

            Outputs.GetKafkaMirrorMakerKafkaMirrormakerResult kafkaMirrormaker,

            Outputs.GetKafkaMirrorMakerKafkaMirrormakerUserConfigResult? kafkaMirrormakerUserConfig,

            string? maintenanceWindowDow,

            string? maintenanceWindowTime,

            string? plan,

            string project,

            string? projectVpcId,

            string serviceHost,

            ImmutableArray<Outputs.GetKafkaMirrorMakerServiceIntegrationResult> serviceIntegrations,

            string serviceName,

            string servicePassword,

            int servicePort,

            string serviceType,

            string serviceUri,

            string serviceUsername,

            string state,

            bool? terminationProtection)
        {
            CloudName = cloudName;
            Components = components;
            Id = id;
            KafkaMirrormaker = kafkaMirrormaker;
            KafkaMirrormakerUserConfig = kafkaMirrormakerUserConfig;
            MaintenanceWindowDow = maintenanceWindowDow;
            MaintenanceWindowTime = maintenanceWindowTime;
            Plan = plan;
            Project = project;
            ProjectVpcId = projectVpcId;
            ServiceHost = serviceHost;
            ServiceIntegrations = serviceIntegrations;
            ServiceName = serviceName;
            ServicePassword = servicePassword;
            ServicePort = servicePort;
            ServiceType = serviceType;
            ServiceUri = serviceUri;
            ServiceUsername = serviceUsername;
            State = state;
            TerminationProtection = terminationProtection;
        }
    }
}
