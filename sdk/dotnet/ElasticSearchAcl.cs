// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public partial class ElasticSearchAcl : Pulumi.CustomResource
    {
        /// <summary>
        /// List of Elasticsearch ACLs
        /// </summary>
        [Output("acls")]
        public Output<ImmutableArray<Outputs.ElasticSearchAclAcls>> Acls { get; private set; } = null!;

        /// <summary>
        /// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by
        /// enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all
        /// operations only target indexes they have been granted access to
        /// </summary>
        [Output("extendedAcl")]
        public Output<bool?> ExtendedAcl { get; private set; } = null!;

        /// <summary>
        /// Project to link the Elasticsearch ACLs to
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Service to link the Elasticsearch ACLs to
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;


        /// <summary>
        /// Create a ElasticSearchAcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ElasticSearchAcl(string name, ElasticSearchAclArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/elasticSearchAcl:ElasticSearchAcl", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ElasticSearchAcl(string name, Input<string> id, ElasticSearchAclState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/elasticSearchAcl:ElasticSearchAcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ElasticSearchAcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ElasticSearchAcl Get(string name, Input<string> id, ElasticSearchAclState? state = null, CustomResourceOptions? options = null)
        {
            return new ElasticSearchAcl(name, id, state, options);
        }
    }

    public sealed class ElasticSearchAclArgs : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.ElasticSearchAclAclsArgs>? _acls;

        /// <summary>
        /// List of Elasticsearch ACLs
        /// </summary>
        public InputList<Inputs.ElasticSearchAclAclsArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.ElasticSearchAclAclsArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by
        /// enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all
        /// operations only target indexes they have been granted access to
        /// </summary>
        [Input("extendedAcl")]
        public Input<bool>? ExtendedAcl { get; set; }

        /// <summary>
        /// Project to link the Elasticsearch ACLs to
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Service to link the Elasticsearch ACLs to
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public ElasticSearchAclArgs()
        {
        }
    }

    public sealed class ElasticSearchAclState : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.ElasticSearchAclAclsGetArgs>? _acls;

        /// <summary>
        /// List of Elasticsearch ACLs
        /// </summary>
        public InputList<Inputs.ElasticSearchAclAclsGetArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.ElasticSearchAclAclsGetArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by
        /// enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all
        /// operations only target indexes they have been granted access to
        /// </summary>
        [Input("extendedAcl")]
        public Input<bool>? ExtendedAcl { get; set; }

        /// <summary>
        /// Project to link the Elasticsearch ACLs to
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service to link the Elasticsearch ACLs to
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        public ElasticSearchAclState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ElasticSearchAclAclsArgs : Pulumi.ResourceArgs
    {
        [Input("rules", required: true)]
        private InputList<ElasticSearchAclAclsRulesArgs>? _rules;
        public InputList<ElasticSearchAclAclsRulesArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<ElasticSearchAclAclsRulesArgs>());
            set => _rules = value;
        }

        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ElasticSearchAclAclsArgs()
        {
        }
    }

    public sealed class ElasticSearchAclAclsGetArgs : Pulumi.ResourceArgs
    {
        [Input("rules", required: true)]
        private InputList<ElasticSearchAclAclsRulesGetArgs>? _rules;
        public InputList<ElasticSearchAclAclsRulesGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<ElasticSearchAclAclsRulesGetArgs>());
            set => _rules = value;
        }

        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ElasticSearchAclAclsGetArgs()
        {
        }
    }

    public sealed class ElasticSearchAclAclsRulesArgs : Pulumi.ResourceArgs
    {
        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        [Input("permission", required: true)]
        public Input<string> Permission { get; set; } = null!;

        public ElasticSearchAclAclsRulesArgs()
        {
        }
    }

    public sealed class ElasticSearchAclAclsRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        [Input("permission", required: true)]
        public Input<string> Permission { get; set; } = null!;

        public ElasticSearchAclAclsRulesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ElasticSearchAclAcls
    {
        public readonly ImmutableArray<ElasticSearchAclAclsRules> Rules;
        public readonly string Username;

        [OutputConstructor]
        private ElasticSearchAclAcls(
            ImmutableArray<ElasticSearchAclAclsRules> rules,
            string username)
        {
            Rules = rules;
            Username = username;
        }
    }

    [OutputType]
    public sealed class ElasticSearchAclAclsRules
    {
        public readonly string Index;
        public readonly string Permission;

        [OutputConstructor]
        private ElasticSearchAclAclsRules(
            string index,
            string permission)
        {
            Index = index;
            Permission = permission;
        }
    }
    }
}
