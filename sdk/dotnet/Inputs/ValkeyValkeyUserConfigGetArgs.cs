// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class ValkeyValkeyUserConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        [Input("additionalBackupRegions")]
        public Input<string>? AdditionalBackupRegions { get; set; }

        [Input("ipFilterObjects")]
        private InputList<Inputs.ValkeyValkeyUserConfigIpFilterObjectGetArgs>? _ipFilterObjects;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public InputList<Inputs.ValkeyValkeyUserConfigIpFilterObjectGetArgs> IpFilterObjects
        {
            get => _ipFilterObjects ?? (_ipFilterObjects = new InputList<Inputs.ValkeyValkeyUserConfigIpFilterObjectGetArgs>());
            set => _ipFilterObjects = value;
        }

        [Input("ipFilterStrings")]
        private InputList<string>? _ipFilterStrings;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public InputList<string> IpFilterStrings
        {
            get => _ipFilterStrings ?? (_ipFilterStrings = new InputList<string>());
            set => _ipFilterStrings = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        [Obsolete(@"Deprecated. Use `ip_filter_string` instead.")]
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        /// <summary>
        /// Migrate data from existing server
        /// </summary>
        [Input("migration")]
        public Input<Inputs.ValkeyValkeyUserConfigMigrationGetArgs>? Migration { get; set; }

        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        [Input("privateAccess")]
        public Input<Inputs.ValkeyValkeyUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        [Input("privatelinkAccess")]
        public Input<Inputs.ValkeyValkeyUserConfigPrivatelinkAccessGetArgs>? PrivatelinkAccess { get; set; }

        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
        /// </summary>
        [Input("projectToForkFrom")]
        public Input<string>? ProjectToForkFrom { get; set; }

        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        [Input("publicAccess")]
        public Input<Inputs.ValkeyValkeyUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        /// <summary>
        /// Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
        /// </summary>
        [Input("recoveryBasebackupName")]
        public Input<string>? RecoveryBasebackupName { get; set; }

        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        [Input("serviceLog")]
        public Input<bool>? ServiceLog { get; set; }

        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
        /// </summary>
        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        [Input("staticIps")]
        public Input<bool>? StaticIps { get; set; }

        /// <summary>
        /// Enum: `allchannels`, `resetchannels`. Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Valkey configuration acl-pubsub-default.
        /// </summary>
        [Input("valkeyAclChannelsDefault")]
        public Input<string>? ValkeyAclChannelsDefault { get; set; }

        /// <summary>
        /// Set Valkey IO thread count. Changing this will cause a restart of the Valkey service. Example: `1`.
        /// </summary>
        [Input("valkeyIoThreads")]
        public Input<int>? ValkeyIoThreads { get; set; }

        /// <summary>
        /// LFU maxmemory-policy counter decay time in minutes. Default: `1`.
        /// </summary>
        [Input("valkeyLfuDecayTime")]
        public Input<int>? ValkeyLfuDecayTime { get; set; }

        /// <summary>
        /// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
        /// </summary>
        [Input("valkeyLfuLogFactor")]
        public Input<int>? ValkeyLfuLogFactor { get; set; }

        /// <summary>
        /// Enum: `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`. Valkey maxmemory-policy. Default: `noeviction`.
        /// </summary>
        [Input("valkeyMaxmemoryPolicy")]
        public Input<string>? ValkeyMaxmemoryPolicy { get; set; }

        /// <summary>
        /// Set notify-keyspace-events option.
        /// </summary>
        [Input("valkeyNotifyKeyspaceEvents")]
        public Input<string>? ValkeyNotifyKeyspaceEvents { get; set; }

        /// <summary>
        /// Set number of Valkey databases. Changing this will cause a restart of the Valkey service. Example: `16`.
        /// </summary>
        [Input("valkeyNumberOfDatabases")]
        public Input<int>? ValkeyNumberOfDatabases { get; set; }

        /// <summary>
        /// Enum: `off`, `rdb`. When persistence is `rdb`, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
        /// </summary>
        [Input("valkeyPersistence")]
        public Input<string>? ValkeyPersistence { get; set; }

        /// <summary>
        /// Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
        /// </summary>
        [Input("valkeyPubsubClientOutputBufferLimit")]
        public Input<int>? ValkeyPubsubClientOutputBufferLimit { get; set; }

        /// <summary>
        /// Require SSL to access Valkey. Default: `true`.
        /// </summary>
        [Input("valkeySsl")]
        public Input<bool>? ValkeySsl { get; set; }

        /// <summary>
        /// Valkey idle connection timeout in seconds. Default: `300`.
        /// </summary>
        [Input("valkeyTimeout")]
        public Input<int>? ValkeyTimeout { get; set; }

        public ValkeyValkeyUserConfigGetArgs()
        {
        }
        public static new ValkeyValkeyUserConfigGetArgs Empty => new ValkeyValkeyUserConfigGetArgs();
    }
}
