// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class OpenSearchOpensearchUserConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication
        /// </summary>
        [Input("additionalBackupRegions")]
        public Input<string>? AdditionalBackupRegions { get; set; }

        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("disableReplicationFactorAdjustment")]
        public Input<string>? DisableReplicationFactorAdjustment { get; set; }

        [Input("indexPatterns")]
        private InputList<Inputs.OpenSearchOpensearchUserConfigIndexPatternArgs>? _indexPatterns;

        /// <summary>
        /// Index patterns
        /// </summary>
        public InputList<Inputs.OpenSearchOpensearchUserConfigIndexPatternArgs> IndexPatterns
        {
            get => _indexPatterns ?? (_indexPatterns = new InputList<Inputs.OpenSearchOpensearchUserConfigIndexPatternArgs>());
            set => _indexPatterns = value;
        }

        /// <summary>
        /// Template settings for all new indexes
        /// </summary>
        [Input("indexTemplate")]
        public Input<Inputs.OpenSearchOpensearchUserConfigIndexTemplateArgs>? IndexTemplate { get; set; }

        [Input("ipFilterObjects")]
        private InputList<Inputs.OpenSearchOpensearchUserConfigIpFilterObjectArgs>? _ipFilterObjects;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        /// </summary>
        public InputList<Inputs.OpenSearchOpensearchUserConfigIpFilterObjectArgs> IpFilterObjects
        {
            get => _ipFilterObjects ?? (_ipFilterObjects = new InputList<Inputs.OpenSearchOpensearchUserConfigIpFilterObjectArgs>());
            set => _ipFilterObjects = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        /// </summary>
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        /// <summary>
        /// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
        /// </summary>
        [Input("keepIndexRefreshInterval")]
        public Input<string>? KeepIndexRefreshInterval { get; set; }

        [Input("maxIndexCount")]
        public Input<string>? MaxIndexCount { get; set; }

        /// <summary>
        /// OpenSearch settings
        /// </summary>
        [Input("opensearch")]
        public Input<Inputs.OpenSearchOpensearchUserConfigOpensearchArgs>? Opensearch { get; set; }

        /// <summary>
        /// OpenSearch Dashboards settings
        /// </summary>
        [Input("opensearchDashboards")]
        public Input<Inputs.OpenSearchOpensearchUserConfigOpensearchDashboardsArgs>? OpensearchDashboards { get; set; }

        /// <summary>
        /// OpenSearch major version
        /// </summary>
        [Input("opensearchVersion")]
        public Input<string>? OpensearchVersion { get; set; }

        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        [Input("privateAccess")]
        public Input<Inputs.OpenSearchOpensearchUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        [Input("privatelinkAccess")]
        public Input<Inputs.OpenSearchOpensearchUserConfigPrivatelinkAccessArgs>? PrivatelinkAccess { get; set; }

        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created.
        /// </summary>
        [Input("projectToForkFrom")]
        public Input<string>? ProjectToForkFrom { get; set; }

        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        [Input("publicAccess")]
        public Input<Inputs.OpenSearchOpensearchUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        /// <summary>
        /// Name of the basebackup to restore in forked service
        /// </summary>
        [Input("recoveryBasebackupName")]
        public Input<string>? RecoveryBasebackupName { get; set; }

        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created.
        /// </summary>
        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        /// <summary>
        /// Use static public IP addresses
        /// </summary>
        [Input("staticIps")]
        public Input<string>? StaticIps { get; set; }

        public OpenSearchOpensearchUserConfigArgs()
        {
        }
        public static new OpenSearchOpensearchUserConfigArgs Empty => new OpenSearchOpensearchUserConfigArgs();
    }
}
