// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class ServiceIntegrationMetricsUserConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the database where to store metric datapoints. Only affects PostgreSQL destinations. Defaults to `metrics`. Note that this must be the same for all metrics integrations that write data to the same PostgreSQL service.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Number of days to keep old metrics. Only affects PostgreSQL destinations. Set to 0 for no automatic cleanup. Defaults to 30 days.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        /// <summary>
        /// Name of a user that can be used to read metrics. This will be used for Grafana integration (if enabled) to prevent Grafana users from making undesired changes. Only affects PostgreSQL destinations. Defaults to `metrics_reader`. Note that this must be the same for all metrics integrations that write data to the same PostgreSQL service.
        /// </summary>
        [Input("roUsername")]
        public Input<string>? RoUsername { get; set; }

        /// <summary>
        /// Configuration options for metrics where source service is MySQL
        /// </summary>
        [Input("sourceMysql")]
        public Input<Inputs.ServiceIntegrationMetricsUserConfigSourceMysqlArgs>? SourceMysql { get; set; }

        /// <summary>
        /// Name of the user used to write metrics. Only affects PostgreSQL destinations. Defaults to `metrics_writer`. Note that this must be the same for all metrics integrations that write data to the same PostgreSQL service.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ServiceIntegrationMetricsUserConfigArgs()
        {
        }
        public static new ServiceIntegrationMetricsUserConfigArgs Empty => new ServiceIntegrationMetricsUserConfigArgs();
    }
}
