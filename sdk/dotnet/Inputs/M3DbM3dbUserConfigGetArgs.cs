// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class M3DbM3dbUserConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        [Input("additionalBackupRegions")]
        public Input<string>? AdditionalBackupRegions { get; set; }

        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        [Input("ipFilterObjects")]
        private InputList<Inputs.M3DbM3dbUserConfigIpFilterObjectGetArgs>? _ipFilterObjects;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public InputList<Inputs.M3DbM3dbUserConfigIpFilterObjectGetArgs> IpFilterObjects
        {
            get => _ipFilterObjects ?? (_ipFilterObjects = new InputList<Inputs.M3DbM3dbUserConfigIpFilterObjectGetArgs>());
            set => _ipFilterObjects = value;
        }

        [Input("ipFilterStrings")]
        private InputList<string>? _ipFilterStrings;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public InputList<string> IpFilterStrings
        {
            get => _ipFilterStrings ?? (_ipFilterStrings = new InputList<string>());
            set => _ipFilterStrings = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        [Obsolete(@"Deprecated. Use `ip_filter_string` instead.")]
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        /// <summary>
        /// M3 limits
        /// </summary>
        [Input("limits")]
        public Input<Inputs.M3DbM3dbUserConfigLimitsGetArgs>? Limits { get; set; }

        /// <summary>
        /// M3 specific configuration options
        /// </summary>
        [Input("m3")]
        public Input<Inputs.M3DbM3dbUserConfigM3GetArgs>? M3 { get; set; }

        /// <summary>
        /// Enum: `1.1`, `1.2`, `1.5`, and newer. M3 major version (deprecated, use m3db_version).
        /// </summary>
        [Input("m3Version")]
        public Input<string>? M3Version { get; set; }

        /// <summary>
        /// Enables access to Graphite Carbon plaintext metrics ingestion. It can be enabled only for services inside VPCs. The metrics are written to aggregated namespaces only.
        /// </summary>
        [Input("m3coordinatorEnableGraphiteCarbonIngest")]
        public Input<bool>? M3coordinatorEnableGraphiteCarbonIngest { get; set; }

        /// <summary>
        /// Enum: `1.1`, `1.2`, `1.5`, and newer. M3 major version (the minimum compatible version).
        /// </summary>
        [Input("m3dbVersion")]
        public Input<string>? M3dbVersion { get; set; }

        [Input("namespaces")]
        private InputList<Inputs.M3DbM3dbUserConfigNamespaceGetArgs>? _namespaces;

        /// <summary>
        /// List of M3 namespaces
        /// </summary>
        public InputList<Inputs.M3DbM3dbUserConfigNamespaceGetArgs> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<Inputs.M3DbM3dbUserConfigNamespaceGetArgs>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        [Input("privateAccess")]
        public Input<Inputs.M3DbM3dbUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
        /// </summary>
        [Input("projectToForkFrom")]
        public Input<string>? ProjectToForkFrom { get; set; }

        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        [Input("publicAccess")]
        public Input<Inputs.M3DbM3dbUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        /// <summary>
        /// M3 rules
        /// </summary>
        [Input("rules")]
        public Input<Inputs.M3DbM3dbUserConfigRulesGetArgs>? Rules { get; set; }

        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        [Input("serviceLog")]
        public Input<bool>? ServiceLog { get; set; }

        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
        /// </summary>
        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        [Input("staticIps")]
        public Input<bool>? StaticIps { get; set; }

        public M3DbM3dbUserConfigGetArgs()
        {
        }
        public static new M3DbM3dbUserConfigGetArgs Empty => new M3DbM3dbUserConfigGetArgs();
    }
}
