// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class RedisRedisGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Redis password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("replicaUri")]
        private Input<string>? _replicaUri;

        /// <summary>
        /// Redis replica server URI.
        /// </summary>
        public Input<string>? ReplicaUri
        {
            get => _replicaUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _replicaUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("slaveUris")]
        private InputList<string>? _slaveUris;

        /// <summary>
        /// Redis slave server URIs.
        /// </summary>
        public InputList<string> SlaveUris
        {
            get => _slaveUris ?? (_slaveUris = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _slaveUris = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// Redis server URIs.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _uris = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public RedisRedisGetArgs()
        {
        }
        public static new RedisRedisGetArgs Empty => new RedisRedisGetArgs();
    }
}
