// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class ServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormakerGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The minimum amount of data the server should return for a fetch request.
        /// </summary>
        [Input("consumerFetchMinBytes")]
        public Input<int>? ConsumerFetchMinBytes { get; set; }

        /// <summary>
        /// The batch size in bytes producer will attempt to collect before publishing to broker.
        /// </summary>
        [Input("producerBatchSize")]
        public Input<int>? ProducerBatchSize { get; set; }

        /// <summary>
        /// The amount of bytes producer can use for buffering data before publishing to broker.
        /// </summary>
        [Input("producerBufferMemory")]
        public Input<int>? ProducerBufferMemory { get; set; }

        /// <summary>
        /// Enum: `gzip`, `snappy`, `lz4`, `zstd`, `none`. Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.
        /// </summary>
        [Input("producerCompressionType")]
        public Input<string>? ProducerCompressionType { get; set; }

        /// <summary>
        /// The linger time (ms) for waiting new data to arrive for publishing.
        /// </summary>
        [Input("producerLingerMs")]
        public Input<int>? ProducerLingerMs { get; set; }

        /// <summary>
        /// The maximum request size in bytes.
        /// </summary>
        [Input("producerMaxRequestSize")]
        public Input<int>? ProducerMaxRequestSize { get; set; }

        public ServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormakerGetArgs()
        {
        }
        public static new ServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormakerGetArgs Empty => new ServiceIntegrationKafkaMirrormakerUserConfigKafkaMirrormakerGetArgs();
    }
}
