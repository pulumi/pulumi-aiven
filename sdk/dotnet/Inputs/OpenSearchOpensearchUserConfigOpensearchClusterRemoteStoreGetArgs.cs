// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The amount of time to wait for the cluster state upload to complete. Defaults to 20s.
        /// </summary>
        [Input("stateGlobalMetadataUploadTimeout")]
        public Input<string>? StateGlobalMetadataUploadTimeout { get; set; }

        /// <summary>
        /// The amount of time to wait for the manifest file upload to complete. The manifest file contains the details of each of the files uploaded for a single cluster state, both index metadata files and global metadata files. Defaults to 20s.
        /// </summary>
        [Input("stateMetadataManifestUploadTimeout")]
        public Input<string>? StateMetadataManifestUploadTimeout { get; set; }

        /// <summary>
        /// The default value of the translog buffer interval used when performing periodic translog updates. This setting is only effective when the index setting `index.remote_store.translog.buffer_interval` is not present. Defaults to 650ms.
        /// </summary>
        [Input("translogBufferInterval")]
        public Input<string>? TranslogBufferInterval { get; set; }

        /// <summary>
        /// Sets the maximum number of open translog files for remote-backed indexes. This limits the total number of translog files per shard. After reaching this limit, the remote store flushes the translog files. Default is 1000. The minimum required is 100. Example: `1000`.
        /// </summary>
        [Input("translogMaxReaders")]
        public Input<int>? TranslogMaxReaders { get; set; }

        public OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreGetArgs()
        {
        }
        public static new OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreGetArgs Empty => new OpenSearchOpensearchUserConfigOpensearchClusterRemoteStoreGetArgs();
    }
}
