// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class RedisRedisUserConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        [Input("additionalBackupRegions")]
        public Input<string>? AdditionalBackupRegions { get; set; }

        /// <summary>
        /// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed. Example: `3`.
        /// </summary>
        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        /// <summary>
        /// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed. Example: `30`.
        /// </summary>
        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        [Input("ipFilterObjects")]
        private InputList<Inputs.RedisRedisUserConfigIpFilterObjectArgs>? _ipFilterObjects;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public InputList<Inputs.RedisRedisUserConfigIpFilterObjectArgs> IpFilterObjects
        {
            get => _ipFilterObjects ?? (_ipFilterObjects = new InputList<Inputs.RedisRedisUserConfigIpFilterObjectArgs>());
            set => _ipFilterObjects = value;
        }

        [Input("ipFilterStrings")]
        private InputList<string>? _ipFilterStrings;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public InputList<string> IpFilterStrings
        {
            get => _ipFilterStrings ?? (_ipFilterStrings = new InputList<string>());
            set => _ipFilterStrings = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        [Obsolete(@"Deprecated. Use `IpFilterString` instead.")]
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        /// <summary>
        /// Migrate data from existing server
        /// </summary>
        [Input("migration")]
        public Input<Inputs.RedisRedisUserConfigMigrationArgs>? Migration { get; set; }

        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        [Input("privateAccess")]
        public Input<Inputs.RedisRedisUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        [Input("privatelinkAccess")]
        public Input<Inputs.RedisRedisUserConfigPrivatelinkAccessArgs>? PrivatelinkAccess { get; set; }

        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created. Example: `Anotherprojectname`.
        /// </summary>
        [Input("projectToForkFrom")]
        public Input<string>? ProjectToForkFrom { get; set; }

        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        [Input("publicAccess")]
        public Input<Inputs.RedisRedisUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        /// <summary>
        /// Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
        /// </summary>
        [Input("recoveryBasebackupName")]
        public Input<string>? RecoveryBasebackupName { get; set; }

        /// <summary>
        /// Enum: `Allchannels`, `Resetchannels`. Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, AllChannels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
        /// </summary>
        [Input("redisAclChannelsDefault")]
        public Input<string>? RedisAclChannelsDefault { get; set; }

        /// <summary>
        /// Set Redis IO thread count. Changing this will cause a restart of the Redis service. Example: `1`.
        /// </summary>
        [Input("redisIoThreads")]
        public Input<int>? RedisIoThreads { get; set; }

        /// <summary>
        /// LFU maxmemory-policy counter decay time in minutes. Default: `1`.
        /// </summary>
        [Input("redisLfuDecayTime")]
        public Input<int>? RedisLfuDecayTime { get; set; }

        /// <summary>
        /// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. Default: `10`.
        /// </summary>
        [Input("redisLfuLogFactor")]
        public Input<int>? RedisLfuLogFactor { get; set; }

        /// <summary>
        /// Enum: `allkeys-lfu`, `allkeys-lru`, `allkeys-random`, `Noeviction`, `volatile-lfu`, `volatile-lru`, `volatile-random`, `volatile-ttl`. Redis maxmemory-policy. Default: `Noeviction`.
        /// </summary>
        [Input("redisMaxmemoryPolicy")]
        public Input<string>? RedisMaxmemoryPolicy { get; set; }

        /// <summary>
        /// Set notify-keyspace-events option.
        /// </summary>
        [Input("redisNotifyKeyspaceEvents")]
        public Input<string>? RedisNotifyKeyspaceEvents { get; set; }

        /// <summary>
        /// Set number of Redis databases. Changing this will cause a restart of the Redis service. Example: `16`.
        /// </summary>
        [Input("redisNumberOfDatabases")]
        public Input<int>? RedisNumberOfDatabases { get; set; }

        /// <summary>
        /// Enum: `Off`, `Rdb`. When persistence is `Rdb`, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is `Off`, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can't be forked.
        /// </summary>
        [Input("redisPersistence")]
        public Input<string>? RedisPersistence { get; set; }

        /// <summary>
        /// Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan. Example: `64`.
        /// </summary>
        [Input("redisPubsubClientOutputBufferLimit")]
        public Input<int>? RedisPubsubClientOutputBufferLimit { get; set; }

        /// <summary>
        /// Require SSL to access Redis. Default: `True`.
        /// </summary>
        [Input("redisSsl")]
        public Input<bool>? RedisSsl { get; set; }

        /// <summary>
        /// Redis idle connection timeout in seconds. Default: `300`.
        /// </summary>
        [Input("redisTimeout")]
        public Input<int>? RedisTimeout { get; set; }

        /// <summary>
        /// Enum: `7.0`, and newer. Redis major version.
        /// </summary>
        [Input("redisVersion")]
        public Input<string>? RedisVersion { get; set; }

        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        [Input("serviceLog")]
        public Input<bool>? ServiceLog { get; set; }

        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created. Example: `Anotherservicename`.
        /// </summary>
        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        [Input("staticIps")]
        public Input<bool>? StaticIps { get; set; }

        public RedisRedisUserConfigArgs()
        {
        }
        public static new RedisRedisUserConfigArgs Empty => new RedisRedisUserConfigArgs();
    }
}
