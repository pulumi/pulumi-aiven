// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class GrafanaGrafanaUserConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        [Input("additionalBackupRegions")]
        public Input<string>? AdditionalBackupRegions { get; set; }

        /// <summary>
        /// Enable or disable Grafana legacy alerting functionality. This should not be enabled with unified*alerting*enabled.
        /// </summary>
        [Input("alertingEnabled")]
        public Input<bool>? AlertingEnabled { get; set; }

        /// <summary>
        /// Enum: `alerting`, `keep_state`. Default error or timeout setting for new alerting rules.
        /// </summary>
        [Input("alertingErrorOrTimeout")]
        public Input<string>? AlertingErrorOrTimeout { get; set; }

        /// <summary>
        /// Max number of alert annotations that Grafana stores. 0 (default) keeps all alert annotations. Example: `0`.
        /// </summary>
        [Input("alertingMaxAnnotationsToKeep")]
        public Input<int>? AlertingMaxAnnotationsToKeep { get; set; }

        /// <summary>
        /// Enum: `alerting`, `no_data`, `keep_state`, `ok`. Default value for 'no data or null values' for new alerting rules.
        /// </summary>
        [Input("alertingNodataOrNullvalues")]
        public Input<string>? AlertingNodataOrNullvalues { get; set; }

        /// <summary>
        /// Allow embedding Grafana dashboards with iframe/frame/object/embed tags. Disabled by default to limit impact of clickjacking.
        /// </summary>
        [Input("allowEmbedding")]
        public Input<bool>? AllowEmbedding { get; set; }

        /// <summary>
        /// Azure AD OAuth integration
        /// </summary>
        [Input("authAzuread")]
        public Input<Inputs.GrafanaGrafanaUserConfigAuthAzureadGetArgs>? AuthAzuread { get; set; }

        /// <summary>
        /// Enable or disable basic authentication form, used by Grafana built-in login.
        /// </summary>
        [Input("authBasicEnabled")]
        public Input<bool>? AuthBasicEnabled { get; set; }

        /// <summary>
        /// Generic OAuth integration
        /// </summary>
        [Input("authGenericOauth")]
        public Input<Inputs.GrafanaGrafanaUserConfigAuthGenericOauthGetArgs>? AuthGenericOauth { get; set; }

        /// <summary>
        /// Github Auth integration
        /// </summary>
        [Input("authGithub")]
        public Input<Inputs.GrafanaGrafanaUserConfigAuthGithubGetArgs>? AuthGithub { get; set; }

        /// <summary>
        /// GitLab Auth integration
        /// </summary>
        [Input("authGitlab")]
        public Input<Inputs.GrafanaGrafanaUserConfigAuthGitlabGetArgs>? AuthGitlab { get; set; }

        /// <summary>
        /// Google Auth integration
        /// </summary>
        [Input("authGoogle")]
        public Input<Inputs.GrafanaGrafanaUserConfigAuthGoogleGetArgs>? AuthGoogle { get; set; }

        /// <summary>
        /// Enum: `lax`, `strict`, `none`. Cookie SameSite attribute: `strict` prevents sending cookie for cross-site requests, effectively disabling direct linking from other sites to Grafana. `lax` is the default value.
        /// </summary>
        [Input("cookieSamesite")]
        public Input<string>? CookieSamesite { get; set; }

        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// This feature is new in Grafana 9 and is quite resource intensive. It may cause low-end plans to work more slowly while the dashboard previews are rendering.
        /// </summary>
        [Input("dashboardPreviewsEnabled")]
        public Input<bool>? DashboardPreviewsEnabled { get; set; }

        /// <summary>
        /// Signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h. Example: `5s`.
        /// </summary>
        [Input("dashboardsMinRefreshInterval")]
        public Input<string>? DashboardsMinRefreshInterval { get; set; }

        /// <summary>
        /// Dashboard versions to keep per dashboard. Example: `20`.
        /// </summary>
        [Input("dashboardsVersionsToKeep")]
        public Input<int>? DashboardsVersionsToKeep { get; set; }

        /// <summary>
        /// Send `X-Grafana-User` header to data source.
        /// </summary>
        [Input("dataproxySendUserHeader")]
        public Input<bool>? DataproxySendUserHeader { get; set; }

        /// <summary>
        /// Timeout for data proxy requests in seconds. Example: `30`.
        /// </summary>
        [Input("dataproxyTimeout")]
        public Input<int>? DataproxyTimeout { get; set; }

        /// <summary>
        /// Grafana date format specifications
        /// </summary>
        [Input("dateFormats")]
        public Input<Inputs.GrafanaGrafanaUserConfigDateFormatsGetArgs>? DateFormats { get; set; }

        /// <summary>
        /// Set to true to disable gravatar. Defaults to false (gravatar is enabled).
        /// </summary>
        [Input("disableGravatar")]
        public Input<bool>? DisableGravatar { get; set; }

        /// <summary>
        /// Editors can manage folders, teams and dashboards created by them.
        /// </summary>
        [Input("editorsCanAdmin")]
        public Input<bool>? EditorsCanAdmin { get; set; }

        /// <summary>
        /// External image store settings
        /// </summary>
        [Input("externalImageStorage")]
        public Input<Inputs.GrafanaGrafanaUserConfigExternalImageStorageGetArgs>? ExternalImageStorage { get; set; }

        /// <summary>
        /// Google Analytics ID. Example: `UA-123456-4`.
        /// </summary>
        [Input("googleAnalyticsUaId")]
        public Input<string>? GoogleAnalyticsUaId { get; set; }

        [Input("ipFilterObjects")]
        private InputList<Inputs.GrafanaGrafanaUserConfigIpFilterObjectGetArgs>? _ipFilterObjects;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public InputList<Inputs.GrafanaGrafanaUserConfigIpFilterObjectGetArgs> IpFilterObjects
        {
            get => _ipFilterObjects ?? (_ipFilterObjects = new InputList<Inputs.GrafanaGrafanaUserConfigIpFilterObjectGetArgs>());
            set => _ipFilterObjects = value;
        }

        [Input("ipFilterStrings")]
        private InputList<string>? _ipFilterStrings;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public InputList<string> IpFilterStrings
        {
            get => _ipFilterStrings ?? (_ipFilterStrings = new InputList<string>());
            set => _ipFilterStrings = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        [Obsolete(@"Deprecated. Use `ip_filter_string` instead.")]
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        /// <summary>
        /// Enable Grafana /metrics endpoint.
        /// </summary>
        [Input("metricsEnabled")]
        public Input<bool>? MetricsEnabled { get; set; }

        /// <summary>
        /// Enforce user lookup based on email instead of the unique ID provided by the IdP.
        /// </summary>
        [Input("oauthAllowInsecureEmailLookup")]
        public Input<bool>? OauthAllowInsecureEmailLookup { get; set; }

        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        [Input("privateAccess")]
        public Input<Inputs.GrafanaGrafanaUserConfigPrivateAccessGetArgs>? PrivateAccess { get; set; }

        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        [Input("privatelinkAccess")]
        public Input<Inputs.GrafanaGrafanaUserConfigPrivatelinkAccessGetArgs>? PrivatelinkAccess { get; set; }

        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created. Example: `anotherprojectname`.
        /// </summary>
        [Input("projectToForkFrom")]
        public Input<string>? ProjectToForkFrom { get; set; }

        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        [Input("publicAccess")]
        public Input<Inputs.GrafanaGrafanaUserConfigPublicAccessGetArgs>? PublicAccess { get; set; }

        /// <summary>
        /// Name of the basebackup to restore in forked service. Example: `backup-20191112t091354293891z`.
        /// </summary>
        [Input("recoveryBasebackupName")]
        public Input<string>? RecoveryBasebackupName { get; set; }

        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        [Input("serviceLog")]
        public Input<bool>? ServiceLog { get; set; }

        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created. Example: `anotherservicename`.
        /// </summary>
        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        /// <summary>
        /// SMTP server settings
        /// </summary>
        [Input("smtpServer")]
        public Input<Inputs.GrafanaGrafanaUserConfigSmtpServerGetArgs>? SmtpServer { get; set; }

        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        [Input("staticIps")]
        public Input<bool>? StaticIps { get; set; }

        /// <summary>
        /// Enable or disable Grafana unified alerting functionality. By default this is enabled and any legacy alerts will be migrated on upgrade to Grafana 9+. To stay on legacy alerting, set unified*alerting*enabled to false and alerting_enabled to true. See https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/ for more details.
        /// </summary>
        [Input("unifiedAlertingEnabled")]
        public Input<bool>? UnifiedAlertingEnabled { get; set; }

        /// <summary>
        /// Auto-assign new users on signup to main organization. Defaults to false.
        /// </summary>
        [Input("userAutoAssignOrg")]
        public Input<bool>? UserAutoAssignOrg { get; set; }

        /// <summary>
        /// Enum: `Viewer`, `Admin`, `Editor`. Set role for new signups. Defaults to Viewer.
        /// </summary>
        [Input("userAutoAssignOrgRole")]
        public Input<string>? UserAutoAssignOrgRole { get; set; }

        /// <summary>
        /// Users with view-only permission can edit but not save dashboards.
        /// </summary>
        [Input("viewersCanEdit")]
        public Input<bool>? ViewersCanEdit { get; set; }

        /// <summary>
        /// Setting to enable/disable Write-Ahead Logging. The default value is false (disabled).
        /// </summary>
        [Input("wal")]
        public Input<bool>? Wal { get; set; }

        public GrafanaGrafanaUserConfigGetArgs()
        {
        }
        public static new GrafanaGrafanaUserConfigGetArgs Empty => new GrafanaGrafanaUserConfigGetArgs();
    }
}
