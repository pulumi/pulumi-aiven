// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class PgPgUserConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        [Input("additionalBackupRegions")]
        public Input<string>? AdditionalBackupRegions { get; set; }

        [Input("adminPassword")]
        private Input<string>? _adminPassword;

        /// <summary>
        /// Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Custom username for admin user. This must be set only when a new service is being created.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
        /// </summary>
        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        /// <summary>
        /// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
        /// </summary>
        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        /// <summary>
        /// Register AAAA DNS records for the service, and allow IPv6 packets to service ports.
        /// </summary>
        [Input("enableIpv6")]
        public Input<bool>? EnableIpv6 { get; set; }

        [Input("ipFilterObjects")]
        private InputList<Inputs.PgPgUserConfigIpFilterObjectArgs>? _ipFilterObjects;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        /// </summary>
        public InputList<Inputs.PgPgUserConfigIpFilterObjectArgs> IpFilterObjects
        {
            get => _ipFilterObjects ?? (_ipFilterObjects = new InputList<Inputs.PgPgUserConfigIpFilterObjectArgs>());
            set => _ipFilterObjects = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        /// </summary>
        [Obsolete(@"This will be removed in v5.0.0 and replaced with ip_filter_string instead.")]
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        /// <summary>
        /// Migrate data from existing server.
        /// </summary>
        [Input("migration")]
        public Input<Inputs.PgPgUserConfigMigrationArgs>? Migration { get; set; }

        /// <summary>
        /// postgresql.conf configuration values.
        /// </summary>
        [Input("pg")]
        public Input<Inputs.PgPgUserConfigPgArgs>? Pg { get; set; }

        /// <summary>
        /// Use read_replica service integration instead.
        /// </summary>
        [Input("pgReadReplica")]
        public Input<bool>? PgReadReplica { get; set; }

        /// <summary>
        /// Name of the PG Service from which to fork (deprecated, use service*to*fork_from). This has effect only when a new service is being created.
        /// </summary>
        [Input("pgServiceToForkFrom")]
        public Input<string>? PgServiceToForkFrom { get; set; }

        /// <summary>
        /// Enable the pg*stat*monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg*stat*statements results for utility commands are unreliable. The default value is `false`.
        /// </summary>
        [Input("pgStatMonitorEnable")]
        public Input<bool>? PgStatMonitorEnable { get; set; }

        /// <summary>
        /// PostgreSQL major version.
        /// </summary>
        [Input("pgVersion")]
        public Input<string>? PgVersion { get; set; }

        /// <summary>
        /// PGBouncer connection pooling settings.
        /// </summary>
        [Input("pgbouncer")]
        public Input<Inputs.PgPgUserConfigPgbouncerArgs>? Pgbouncer { get; set; }

        /// <summary>
        /// PGLookout settings.
        /// </summary>
        [Input("pglookout")]
        public Input<Inputs.PgPgUserConfigPglookoutArgs>? Pglookout { get; set; }

        /// <summary>
        /// Allow access to selected service ports from private networks.
        /// </summary>
        [Input("privateAccess")]
        public Input<Inputs.PgPgUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        /// <summary>
        /// Allow access to selected service components through Privatelink.
        /// </summary>
        [Input("privatelinkAccess")]
        public Input<Inputs.PgPgUserConfigPrivatelinkAccessArgs>? PrivatelinkAccess { get; set; }

        /// <summary>
        /// Name of another project to fork a service from. This has effect only when a new service is being created.
        /// </summary>
        [Input("projectToForkFrom")]
        public Input<string>? ProjectToForkFrom { get; set; }

        /// <summary>
        /// Allow access to selected service ports from the public Internet.
        /// </summary>
        [Input("publicAccess")]
        public Input<Inputs.PgPgUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        /// <summary>
        /// Recovery target time when forking a service. This has effect only when a new service is being created.
        /// </summary>
        [Input("recoveryTargetTime")]
        public Input<string>? RecoveryTargetTime { get; set; }

        /// <summary>
        /// Name of another service to fork from. This has effect only when a new service is being created.
        /// </summary>
        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        /// <summary>
        /// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
        /// </summary>
        [Input("sharedBuffersPercentage")]
        public Input<double>? SharedBuffersPercentage { get; set; }

        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        [Input("staticIps")]
        public Input<bool>? StaticIps { get; set; }

        /// <summary>
        /// Synchronous replication type. Note that the service plan also needs to support synchronous replication.
        /// </summary>
        [Input("synchronousReplication")]
        public Input<string>? SynchronousReplication { get; set; }

        /// <summary>
        /// TimescaleDB extension configuration values.
        /// </summary>
        [Input("timescaledb")]
        public Input<Inputs.PgPgUserConfigTimescaledbArgs>? Timescaledb { get; set; }

        /// <summary>
        /// Variant of the PostgreSQL service, may affect the features that are exposed by default.
        /// </summary>
        [Input("variant")]
        public Input<string>? Variant { get; set; }

        /// <summary>
        /// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
        /// </summary>
        [Input("workMem")]
        public Input<int>? WorkMem { get; set; }

        public PgPgUserConfigArgs()
        {
        }
        public static new PgPgUserConfigArgs Empty => new PgPgUserConfigArgs();
    }
}
