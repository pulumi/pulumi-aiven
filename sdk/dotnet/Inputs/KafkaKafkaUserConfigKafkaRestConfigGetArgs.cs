// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class KafkaKafkaUserConfigKafkaRestConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true the consumer's offset will be periodically committed to Kafka in the background. The default value is `true`.
        /// </summary>
        [Input("consumerEnableAutoCommit")]
        public Input<bool>? ConsumerEnableAutoCommit { get; set; }

        /// <summary>
        /// Maximum number of bytes in unencoded message keys and values by a single request. The default value is `67108864`.
        /// </summary>
        [Input("consumerRequestMaxBytes")]
        public Input<int>? ConsumerRequestMaxBytes { get; set; }

        /// <summary>
        /// The maximum total time to wait for messages for a request if the maximum number of messages has not yet been reached. The default value is `1000`.
        /// </summary>
        [Input("consumerRequestTimeoutMs")]
        public Input<int>? ConsumerRequestTimeoutMs { get; set; }

        /// <summary>
        /// Name strategy to use when selecting subject for storing schemas. The default value is `topic_name`.
        /// </summary>
        [Input("nameStrategy")]
        public Input<string>? NameStrategy { get; set; }

        /// <summary>
        /// If true, validate that given schema is registered under expected subject name by the used name strategy when producing messages. The default value is `true`.
        /// </summary>
        [Input("nameStrategyValidation")]
        public Input<bool>? NameStrategyValidation { get; set; }

        /// <summary>
        /// The number of acknowledgments the producer requires the leader to have received before considering a request complete. If set to 'all' or '-1', the leader will wait for the full set of in-sync replicas to acknowledge the record. The default value is `1`.
        /// </summary>
        [Input("producerAcks")]
        public Input<string>? ProducerAcks { get; set; }

        /// <summary>
        /// Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.
        /// </summary>
        [Input("producerCompressionType")]
        public Input<string>? ProducerCompressionType { get; set; }

        /// <summary>
        /// Wait for up to the given delay to allow batching records together. The default value is `0`.
        /// </summary>
        [Input("producerLingerMs")]
        public Input<int>? ProducerLingerMs { get; set; }

        /// <summary>
        /// The maximum size of a request in bytes. Note that Kafka broker can also cap the record batch size. The default value is `1048576`.
        /// </summary>
        [Input("producerMaxRequestSize")]
        public Input<int>? ProducerMaxRequestSize { get; set; }

        /// <summary>
        /// Maximum number of SimpleConsumers that can be instantiated per broker. The default value is `25`.
        /// </summary>
        [Input("simpleconsumerPoolSizeMax")]
        public Input<int>? SimpleconsumerPoolSizeMax { get; set; }

        public KafkaKafkaUserConfigKafkaRestConfigGetArgs()
        {
        }
        public static new KafkaKafkaUserConfigKafkaRestConfigGetArgs Empty => new KafkaKafkaUserConfigKafkaRestConfigGetArgs();
    }
}
