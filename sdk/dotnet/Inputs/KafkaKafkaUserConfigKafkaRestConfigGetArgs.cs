// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class KafkaKafkaUserConfigKafkaRestConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true the consumer's offset will be periodically committed to Kafka in the background. Default: `True`.
        /// </summary>
        [Input("consumerEnableAutoCommit")]
        public Input<bool>? ConsumerEnableAutoCommit { get; set; }

        /// <summary>
        /// Specifies the maximum duration (in seconds) a client can remain idle before it is deleted. If a consumer is inactive, it will exit the consumer group, and its state will be discarded. A value of 0 (default) indicates that the consumer will not be disconnected automatically due to inactivity. Default: `0`.
        /// </summary>
        [Input("consumerIdleDisconnectTimeout")]
        public Input<int>? ConsumerIdleDisconnectTimeout { get; set; }

        /// <summary>
        /// Maximum number of bytes in unencoded message keys and values by a single request.
        /// </summary>
        [Input("consumerRequestMaxBytes")]
        public Input<int>? ConsumerRequestMaxBytes { get; set; }

        /// <summary>
        /// Enum: `1000`, `15000`, `30000`. The maximum total time to wait for messages for a request if the maximum number of messages has not yet been reached. Default: `1000`.
        /// </summary>
        [Input("consumerRequestTimeoutMs")]
        public Input<int>? ConsumerRequestTimeoutMs { get; set; }

        /// <summary>
        /// Enum: `RecordName`, `TopicName`, `TopicRecordName`. Name strategy to use when selecting subject for storing schemas. Default: `TopicName`.
        /// </summary>
        [Input("nameStrategy")]
        public Input<string>? NameStrategy { get; set; }

        /// <summary>
        /// If true, validate that given schema is registered under expected subject name by the used name strategy when producing messages. Default: `True`.
        /// </summary>
        [Input("nameStrategyValidation")]
        public Input<bool>? NameStrategyValidation { get; set; }

        /// <summary>
        /// Enum: `-1`, `0`, `1`, `All`. The number of acknowledgments the producer requires the leader to have received before considering a request complete. If set to `All` or `-1`, the leader will wait for the full set of in-sync replicas to acknowledge the record. Default: `1`.
        /// </summary>
        [Input("producerAcks")]
        public Input<string>? ProducerAcks { get; set; }

        /// <summary>
        /// Enum: `Gzip`, `Lz4`, `None`, `Snappy`, `Zstd`. Specify the default compression type for producers. This configuration accepts the standard compression codecs (`Gzip`, `Snappy`, `Lz4`, `Zstd`). It additionally accepts `None` which is the default and equivalent to no compression.
        /// </summary>
        [Input("producerCompressionType")]
        public Input<string>? ProducerCompressionType { get; set; }

        /// <summary>
        /// Wait for up to the given delay to allow batching records together. Default: `0`.
        /// </summary>
        [Input("producerLingerMs")]
        public Input<int>? ProducerLingerMs { get; set; }

        /// <summary>
        /// The maximum size of a request in bytes. Note that Kafka broker can also cap the record batch size.
        /// </summary>
        [Input("producerMaxRequestSize")]
        public Input<int>? ProducerMaxRequestSize { get; set; }

        /// <summary>
        /// Maximum number of SimpleConsumers that can be instantiated per broker. Default: `25`.
        /// </summary>
        [Input("simpleconsumerPoolSizeMax")]
        public Input<int>? SimpleconsumerPoolSizeMax { get; set; }

        public KafkaKafkaUserConfigKafkaRestConfigGetArgs()
        {
        }
        public static new KafkaKafkaUserConfigKafkaRestConfigGetArgs Empty => new KafkaKafkaUserConfigKafkaRestConfigGetArgs();
    }
}
