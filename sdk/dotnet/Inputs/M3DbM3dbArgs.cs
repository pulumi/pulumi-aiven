// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class M3DbM3dbArgs : global::Pulumi.ResourceArgs
    {
        [Input("httpClusterUri")]
        private Input<string>? _httpClusterUri;

        /// <summary>
        /// M3DB cluster URI.
        /// </summary>
        public Input<string>? HttpClusterUri
        {
            get => _httpClusterUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _httpClusterUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("httpNodeUri")]
        private Input<string>? _httpNodeUri;

        /// <summary>
        /// M3DB node URI.
        /// </summary>
        public Input<string>? HttpNodeUri
        {
            get => _httpNodeUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _httpNodeUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("influxdbUri")]
        private Input<string>? _influxdbUri;

        /// <summary>
        /// InfluxDB URI.
        /// </summary>
        public Input<string>? InfluxdbUri
        {
            get => _influxdbUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _influxdbUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("prometheusRemoteReadUri")]
        private Input<string>? _prometheusRemoteReadUri;

        /// <summary>
        /// Prometheus remote read URI.
        /// </summary>
        public Input<string>? PrometheusRemoteReadUri
        {
            get => _prometheusRemoteReadUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _prometheusRemoteReadUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("prometheusRemoteWriteUri")]
        private Input<string>? _prometheusRemoteWriteUri;

        /// <summary>
        /// Prometheus remote write URI.
        /// </summary>
        public Input<string>? PrometheusRemoteWriteUri
        {
            get => _prometheusRemoteWriteUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _prometheusRemoteWriteUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// M3DB server URIs.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _uris = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public M3DbM3dbArgs()
        {
        }
        public static new M3DbM3dbArgs Empty => new M3DbM3dbArgs();
    }
}
