// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to emit consumer group offset checkpoints to target cluster periodically (default: true).
        /// </summary>
        [Input("emitCheckpointsEnabled")]
        public Input<bool>? EmitCheckpointsEnabled { get; set; }

        /// <summary>
        /// Frequency at which consumer group offset checkpoints are emitted (default: 60, every minute).
        /// </summary>
        [Input("emitCheckpointsIntervalSeconds")]
        public Input<int>? EmitCheckpointsIntervalSeconds { get; set; }

        /// <summary>
        /// Consumer groups to replicate. Supports comma-separated group IDs and regexes.
        /// </summary>
        [Input("groups")]
        public Input<string>? Groups { get; set; }

        /// <summary>
        /// Exclude groups. Supports comma-separated group IDs and regexes. Excludes take precedence over includes.
        /// </summary>
        [Input("groupsExclude")]
        public Input<string>? GroupsExclude { get; set; }

        /// <summary>
        /// How out-of-sync a remote partition can be before it is resynced.
        /// </summary>
        [Input("offsetLagMax")]
        public Input<int>? OffsetLagMax { get; set; }

        /// <summary>
        /// Whether to periodically check for new consumer groups. Defaults to 'true'.
        /// </summary>
        [Input("refreshGroupsEnabled")]
        public Input<bool>? RefreshGroupsEnabled { get; set; }

        /// <summary>
        /// Frequency of consumer group refresh in seconds. Defaults to 600 seconds (10 minutes).
        /// </summary>
        [Input("refreshGroupsIntervalSeconds")]
        public Input<int>? RefreshGroupsIntervalSeconds { get; set; }

        /// <summary>
        /// Whether to periodically check for new topics and partitions. Defaults to 'true'.
        /// </summary>
        [Input("refreshTopicsEnabled")]
        public Input<bool>? RefreshTopicsEnabled { get; set; }

        /// <summary>
        /// Frequency of topic and partitions refresh in seconds. Defaults to 600 seconds (10 minutes).
        /// </summary>
        [Input("refreshTopicsIntervalSeconds")]
        public Input<int>? RefreshTopicsIntervalSeconds { get; set; }

        /// <summary>
        /// Whether to periodically write the translated offsets of replicated consumer groups (in the source cluster) to _*consumer*offsets topic in target cluster, as long as no active consumers in that group are connected to the target cluster.
        /// </summary>
        [Input("syncGroupOffsetsEnabled")]
        public Input<bool>? SyncGroupOffsetsEnabled { get; set; }

        /// <summary>
        /// Frequency at which consumer group offsets are synced (default: 60, every minute).
        /// </summary>
        [Input("syncGroupOffsetsIntervalSeconds")]
        public Input<int>? SyncGroupOffsetsIntervalSeconds { get; set; }

        /// <summary>
        /// Whether to periodically configure remote topics to match their corresponding upstream topics.
        /// </summary>
        [Input("syncTopicConfigsEnabled")]
        public Input<bool>? SyncTopicConfigsEnabled { get; set; }

        /// <summary>
        /// 'tasks.max' is set to this multiplied by the number of CPUs in the service. The default value is `1`.
        /// </summary>
        [Input("tasksMaxPerCpu")]
        public Input<int>? TasksMaxPerCpu { get; set; }

        public KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs()
        {
        }
        public static new KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs Empty => new KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs();
    }
}
