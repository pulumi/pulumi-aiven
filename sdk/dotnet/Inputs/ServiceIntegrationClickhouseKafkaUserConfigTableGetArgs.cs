// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class ServiceIntegrationClickhouseKafkaUserConfigTableGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enum: `beginning`, `earliest`, `end`, `largest`, `latest`, `smallest`. Action to take when there is no initial offset in offset store or the desired offset is out of range. Default: `earliest`.
        /// </summary>
        [Input("autoOffsetReset")]
        public Input<string>? AutoOffsetReset { get; set; }

        [Input("columns", required: true)]
        private InputList<Inputs.ServiceIntegrationClickhouseKafkaUserConfigTableColumnGetArgs>? _columns;

        /// <summary>
        /// Table columns
        /// </summary>
        public InputList<Inputs.ServiceIntegrationClickhouseKafkaUserConfigTableColumnGetArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.ServiceIntegrationClickhouseKafkaUserConfigTableColumnGetArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// Enum: `Avro`, `AvroConfluent`, `CSV`, `JSONAsString`, `JSONCompactEachRow`, `JSONCompactStringsEachRow`, `JSONEachRow`, `JSONStringsEachRow`, `MsgPack`, `Parquet`, `RawBLOB`, `TSKV`, `TSV`, `TabSeparated`. Message data format. Default: `JSONEachRow`.
        /// </summary>
        [Input("dataFormat", required: true)]
        public Input<string> DataFormat { get; set; } = null!;

        /// <summary>
        /// Enum: `basic`, `best_effort`, `best_effort_us`. Method to read DateTime from text input formats. Default: `basic`.
        /// </summary>
        [Input("dateTimeInputFormat")]
        public Input<string>? DateTimeInputFormat { get; set; }

        /// <summary>
        /// Kafka consumers group. Default: `clickhouse`.
        /// </summary>
        [Input("groupName", required: true)]
        public Input<string> GroupName { get; set; } = null!;

        /// <summary>
        /// Enum: `default`, `stream`. How to handle errors for Kafka engine. Default: `default`.
        /// </summary>
        [Input("handleErrorMode")]
        public Input<string>? HandleErrorMode { get; set; }

        /// <summary>
        /// Number of row collected by poll(s) for flushing data from Kafka. Default: `0`.
        /// </summary>
        [Input("maxBlockSize")]
        public Input<int>? MaxBlockSize { get; set; }

        /// <summary>
        /// The maximum number of rows produced in one kafka message for row-based formats. Default: `1`.
        /// </summary>
        [Input("maxRowsPerMessage")]
        public Input<int>? MaxRowsPerMessage { get; set; }

        /// <summary>
        /// Name of the table. Example: `events`.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The number of consumers per table per replica. Default: `1`.
        /// </summary>
        [Input("numConsumers")]
        public Input<int>? NumConsumers { get; set; }

        /// <summary>
        /// Maximum amount of messages to be polled in a single Kafka poll. Default: `0`.
        /// </summary>
        [Input("pollMaxBatchSize")]
        public Input<int>? PollMaxBatchSize { get; set; }

        /// <summary>
        /// Timeout in milliseconds for a single poll from Kafka. Takes the value of the stream*flush*interval_ms server setting by default (500ms). Default: `0`.
        /// </summary>
        [Input("pollMaxTimeoutMs")]
        public Input<int>? PollMaxTimeoutMs { get; set; }

        /// <summary>
        /// Skip at least this number of broken messages from Kafka topic per block. Default: `0`.
        /// </summary>
        [Input("skipBrokenMessages")]
        public Input<int>? SkipBrokenMessages { get; set; }

        /// <summary>
        /// Provide an independent thread for each consumer. All consumers run in the same thread by default. Default: `false`.
        /// </summary>
        [Input("threadPerConsumer")]
        public Input<bool>? ThreadPerConsumer { get; set; }

        [Input("topics", required: true)]
        private InputList<Inputs.ServiceIntegrationClickhouseKafkaUserConfigTableTopicGetArgs>? _topics;

        /// <summary>
        /// Kafka topics
        /// </summary>
        public InputList<Inputs.ServiceIntegrationClickhouseKafkaUserConfigTableTopicGetArgs> Topics
        {
            get => _topics ?? (_topics = new InputList<Inputs.ServiceIntegrationClickhouseKafkaUserConfigTableTopicGetArgs>());
            set => _topics = value;
        }

        public ServiceIntegrationClickhouseKafkaUserConfigTableGetArgs()
        {
        }
        public static new ServiceIntegrationClickhouseKafkaUserConfigTableGetArgs Empty => new ServiceIntegrationClickhouseKafkaUserConfigTableGetArgs();
    }
}
