// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class OpenSearchOpensearchArgs : global::Pulumi.ResourceArgs
    {
        [Input("kibanaUri")]
        private Input<string>? _kibanaUri;

        /// <summary>
        /// URI for Kibana dashboard frontend.
        /// </summary>
        [Obsolete(@"This field was added by mistake and has never worked. It will be removed in future versions.")]
        public Input<string>? KibanaUri
        {
            get => _kibanaUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kibanaUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("opensearchDashboardsUri")]
        private Input<string>? _opensearchDashboardsUri;

        /// <summary>
        /// URI for OpenSearch dashboard frontend.
        /// </summary>
        public Input<string>? OpensearchDashboardsUri
        {
            get => _opensearchDashboardsUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _opensearchDashboardsUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// OpenSearch password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// OpenSearch server URIs.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _uris = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("username")]
        private Input<string>? _username;

        /// <summary>
        /// OpenSearch username.
        /// </summary>
        public Input<string>? Username
        {
            get => _username;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _username = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public OpenSearchOpensearchArgs()
        {
        }
        public static new OpenSearchOpensearchArgs Empty => new OpenSearchOpensearchArgs();
    }
}
