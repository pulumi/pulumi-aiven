// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class KafkaKafkaUserConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional Cloud Regions for Backup Replication.
        /// </summary>
        [Input("additionalBackupRegions")]
        public Input<string>? AdditionalBackupRegions { get; set; }

        /// <summary>
        /// Allow access to read Kafka topic messages in the Aiven Console and REST API.
        /// </summary>
        [Input("aivenKafkaTopicMessages")]
        public Input<bool>? AivenKafkaTopicMessages { get; set; }

        /// <summary>
        /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name. Example: `grafana.example.org`.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// Enable follower fetching
        /// </summary>
        [Input("followerFetching")]
        public Input<Inputs.KafkaKafkaUserConfigFollowerFetchingArgs>? FollowerFetching { get; set; }

        [Input("ipFilterObjects")]
        private InputList<Inputs.KafkaKafkaUserConfigIpFilterObjectArgs>? _ipFilterObjects;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`
        /// </summary>
        public InputList<Inputs.KafkaKafkaUserConfigIpFilterObjectArgs> IpFilterObjects
        {
            get => _ipFilterObjects ?? (_ipFilterObjects = new InputList<Inputs.KafkaKafkaUserConfigIpFilterObjectArgs>());
            set => _ipFilterObjects = value;
        }

        [Input("ipFilterStrings")]
        private InputList<string>? _ipFilterStrings;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        public InputList<string> IpFilterStrings
        {
            get => _ipFilterStrings ?? (_ipFilterStrings = new InputList<string>());
            set => _ipFilterStrings = value;
        }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. `10.20.0.0/16`.
        /// </summary>
        [Obsolete(@"Deprecated. Use `IpFilterString` instead.")]
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        /// <summary>
        /// Kafka broker configuration values
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.KafkaKafkaUserConfigKafkaArgs>? Kafka { get; set; }

        /// <summary>
        /// Kafka authentication methods
        /// </summary>
        [Input("kafkaAuthenticationMethods")]
        public Input<Inputs.KafkaKafkaUserConfigKafkaAuthenticationMethodsArgs>? KafkaAuthenticationMethods { get; set; }

        /// <summary>
        /// Enable Kafka Connect service. Default: `False`.
        /// </summary>
        [Input("kafkaConnect")]
        public Input<bool>? KafkaConnect { get; set; }

        /// <summary>
        /// Kafka Connect configuration values
        /// </summary>
        [Input("kafkaConnectConfig")]
        public Input<Inputs.KafkaKafkaUserConfigKafkaConnectConfigArgs>? KafkaConnectConfig { get; set; }

        [Input("kafkaConnectPluginVersions")]
        private InputList<Inputs.KafkaKafkaUserConfigKafkaConnectPluginVersionArgs>? _kafkaConnectPluginVersions;

        /// <summary>
        /// The plugin selected by the user
        /// </summary>
        public InputList<Inputs.KafkaKafkaUserConfigKafkaConnectPluginVersionArgs> KafkaConnectPluginVersions
        {
            get => _kafkaConnectPluginVersions ?? (_kafkaConnectPluginVersions = new InputList<Inputs.KafkaKafkaUserConfigKafkaConnectPluginVersionArgs>());
            set => _kafkaConnectPluginVersions = value;
        }

        [Input("kafkaConnectSecretProviders")]
        private InputList<Inputs.KafkaKafkaUserConfigKafkaConnectSecretProviderArgs>? _kafkaConnectSecretProviders;
        public InputList<Inputs.KafkaKafkaUserConfigKafkaConnectSecretProviderArgs> KafkaConnectSecretProviders
        {
            get => _kafkaConnectSecretProviders ?? (_kafkaConnectSecretProviders = new InputList<Inputs.KafkaKafkaUserConfigKafkaConnectSecretProviderArgs>());
            set => _kafkaConnectSecretProviders = value;
        }

        /// <summary>
        /// Kafka Diskless configuration values
        /// </summary>
        [Input("kafkaDiskless")]
        public Input<Inputs.KafkaKafkaUserConfigKafkaDisklessArgs>? KafkaDiskless { get; set; }

        /// <summary>
        /// Enable Kafka-REST service. Default: `False`.
        /// </summary>
        [Input("kafkaRest")]
        public Input<bool>? KafkaRest { get; set; }

        /// <summary>
        /// Enable authorization in Kafka-REST service.
        /// </summary>
        [Input("kafkaRestAuthorization")]
        public Input<bool>? KafkaRestAuthorization { get; set; }

        /// <summary>
        /// Kafka REST configuration
        /// </summary>
        [Input("kafkaRestConfig")]
        public Input<Inputs.KafkaKafkaUserConfigKafkaRestConfigArgs>? KafkaRestConfig { get; set; }

        /// <summary>
        /// Kafka SASL mechanisms
        /// </summary>
        [Input("kafkaSaslMechanisms")]
        public Input<Inputs.KafkaKafkaUserConfigKafkaSaslMechanismsArgs>? KafkaSaslMechanisms { get; set; }

        /// <summary>
        /// Enum: `3.1`, `3.2`, `3.3`, `3.4`, `3.5`, `3.6`, `3.7`, `3.8`, `3.9`, `4.0`, and newer. Kafka major version.
        /// </summary>
        [Input("kafkaVersion")]
        public Input<string>? KafkaVersion { get; set; }

        /// <summary>
        /// Use Letsencrypt CA for Kafka SASL via Privatelink.
        /// </summary>
        [Input("letsencryptSaslPrivatelink")]
        public Input<bool>? LetsencryptSaslPrivatelink { get; set; }

        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        [Input("privateAccess")]
        public Input<Inputs.KafkaKafkaUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        [Input("privatelinkAccess")]
        public Input<Inputs.KafkaKafkaUserConfigPrivatelinkAccessArgs>? PrivatelinkAccess { get; set; }

        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        [Input("publicAccess")]
        public Input<Inputs.KafkaKafkaUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        /// <summary>
        /// Enable Schema-Registry service. Default: `False`.
        /// </summary>
        [Input("schemaRegistry")]
        public Input<bool>? SchemaRegistry { get; set; }

        /// <summary>
        /// Schema Registry configuration
        /// </summary>
        [Input("schemaRegistryConfig")]
        public Input<Inputs.KafkaKafkaUserConfigSchemaRegistryConfigArgs>? SchemaRegistryConfig { get; set; }

        /// <summary>
        /// Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        [Input("serviceLog")]
        public Input<bool>? ServiceLog { get; set; }

        /// <summary>
        /// Single-zone configuration
        /// </summary>
        [Input("singleZone")]
        public Input<Inputs.KafkaKafkaUserConfigSingleZoneArgs>? SingleZone { get; set; }

        /// <summary>
        /// Use static public IP addresses.
        /// </summary>
        [Input("staticIps")]
        public Input<bool>? StaticIps { get; set; }

        /// <summary>
        /// Tiered storage configuration
        /// </summary>
        [Input("tieredStorage")]
        public Input<Inputs.KafkaKafkaUserConfigTieredStorageArgs>? TieredStorage { get; set; }

        public KafkaKafkaUserConfigArgs()
        {
        }
        public static new KafkaKafkaUserConfigArgs Empty => new KafkaKafkaUserConfigArgs();
    }
}
