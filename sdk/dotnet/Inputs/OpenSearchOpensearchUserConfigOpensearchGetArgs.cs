// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class OpenSearchOpensearchUserConfigOpensearchGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Explicitly allow or block automatic creation of indices. Defaults to true.
        /// </summary>
        [Input("actionAutoCreateIndexEnabled")]
        public Input<bool>? ActionAutoCreateIndexEnabled { get; set; }

        /// <summary>
        /// Require explicit index names when deleting.
        /// </summary>
        [Input("actionDestructiveRequiresName")]
        public Input<bool>? ActionDestructiveRequiresName { get; set; }

        /// <summary>
        /// Opensearch Security Plugin Settings
        /// </summary>
        [Input("authFailureListeners")]
        public Input<Inputs.OpenSearchOpensearchUserConfigOpensearchAuthFailureListenersGetArgs>? AuthFailureListeners { get; set; }

        /// <summary>
        /// Controls the number of shards allowed in the cluster per data node.
        /// </summary>
        [Input("clusterMaxShardsPerNode")]
        public Input<int>? ClusterMaxShardsPerNode { get; set; }

        /// <summary>
        /// How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to 2.
        /// </summary>
        [Input("clusterRoutingAllocationNodeConcurrentRecoveries")]
        public Input<int>? ClusterRoutingAllocationNodeConcurrentRecoveries { get; set; }

        /// <summary>
        /// Sender name placeholder to be used in Opensearch Dashboards and Opensearch keystore.
        /// </summary>
        [Input("emailSenderName")]
        public Input<string>? EmailSenderName { get; set; }

        [Input("emailSenderPassword")]
        private Input<string>? _emailSenderPassword;

        /// <summary>
        /// Sender password for Opensearch alerts to authenticate with SMTP server.
        /// </summary>
        public Input<string>? EmailSenderPassword
        {
            get => _emailSenderPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _emailSenderPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Sender username for Opensearch alerts.
        /// </summary>
        [Input("emailSenderUsername")]
        public Input<string>? EmailSenderUsername { get; set; }

        /// <summary>
        /// Enable/Disable security audit. The default value is `false`.
        /// </summary>
        [Input("enableSecurityAudit")]
        public Input<bool>? EnableSecurityAudit { get; set; }

        /// <summary>
        /// Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.
        /// </summary>
        [Input("httpMaxContentLength")]
        public Input<int>? HttpMaxContentLength { get; set; }

        /// <summary>
        /// The max size of allowed headers, in bytes.
        /// </summary>
        [Input("httpMaxHeaderSize")]
        public Input<int>? HttpMaxHeaderSize { get; set; }

        /// <summary>
        /// The max length of an HTTP URL, in bytes.
        /// </summary>
        [Input("httpMaxInitialLineLength")]
        public Input<int>? HttpMaxInitialLineLength { get; set; }

        /// <summary>
        /// Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.
        /// </summary>
        [Input("indicesFielddataCacheSize")]
        public Input<int>? IndicesFielddataCacheSize { get; set; }

        /// <summary>
        /// Percentage value. Default is 10%! (MISSING)Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.
        /// </summary>
        [Input("indicesMemoryIndexBufferSize")]
        public Input<int>? IndicesMemoryIndexBufferSize { get; set; }

        /// <summary>
        /// Absolute value. Default is unbound. Doesn't work without indices.memory.index*buffer*size. Maximum amount of heap used for query cache, an absolute indices.memory.index*buffer*size maximum hard limit.
        /// </summary>
        [Input("indicesMemoryMaxIndexBufferSize")]
        public Input<int>? IndicesMemoryMaxIndexBufferSize { get; set; }

        /// <summary>
        /// Absolute value. Default is 48mb. Doesn't work without indices.memory.index*buffer*size. Minimum amount of heap used for query cache, an absolute indices.memory.index*buffer*size minimal hard limit.
        /// </summary>
        [Input("indicesMemoryMinIndexBufferSize")]
        public Input<int>? IndicesMemoryMinIndexBufferSize { get; set; }

        /// <summary>
        /// Percentage value. Default is 10%! (MISSING)Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.
        /// </summary>
        [Input("indicesQueriesCacheSize")]
        public Input<int>? IndicesQueriesCacheSize { get; set; }

        /// <summary>
        /// Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.
        /// </summary>
        [Input("indicesQueryBoolMaxClauseCount")]
        public Input<int>? IndicesQueryBoolMaxClauseCount { get; set; }

        /// <summary>
        /// Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.
        /// </summary>
        [Input("indicesRecoveryMaxBytesPerSec")]
        public Input<int>? IndicesRecoveryMaxBytesPerSec { get; set; }

        /// <summary>
        /// Number of file chunks sent in parallel for each recovery. Defaults to 2.
        /// </summary>
        [Input("indicesRecoveryMaxConcurrentFileChunks")]
        public Input<int>? IndicesRecoveryMaxConcurrentFileChunks { get; set; }

        /// <summary>
        /// Specifies whether ISM is enabled or not. The default value is `true`.
        /// </summary>
        [Input("ismEnabled")]
        public Input<bool>? IsmEnabled { get; set; }

        /// <summary>
        /// Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. The default value is `true`.
        /// </summary>
        [Input("ismHistoryEnabled")]
        public Input<bool>? IsmHistoryEnabled { get; set; }

        /// <summary>
        /// The maximum age before rolling over the audit history index in hours. The default value is `24`.
        /// </summary>
        [Input("ismHistoryMaxAge")]
        public Input<int>? IsmHistoryMaxAge { get; set; }

        /// <summary>
        /// The maximum number of documents before rolling over the audit history index. The default value is `2500000`.
        /// </summary>
        [Input("ismHistoryMaxDocs")]
        public Input<int>? IsmHistoryMaxDocs { get; set; }

        /// <summary>
        /// The time between rollover checks for the audit history index in hours. The default value is `8`.
        /// </summary>
        [Input("ismHistoryRolloverCheckPeriod")]
        public Input<int>? IsmHistoryRolloverCheckPeriod { get; set; }

        /// <summary>
        /// How long audit history indices are kept in days. The default value is `30`.
        /// </summary>
        [Input("ismHistoryRolloverRetentionPeriod")]
        public Input<int>? IsmHistoryRolloverRetentionPeriod { get; set; }

        /// <summary>
        /// Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.
        /// </summary>
        [Input("overrideMainResponseVersion")]
        public Input<bool>? OverrideMainResponseVersion { get; set; }

        [Input("reindexRemoteWhitelists")]
        private InputList<string>? _reindexRemoteWhitelists;

        /// <summary>
        /// Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
        /// </summary>
        public InputList<string> ReindexRemoteWhitelists
        {
            get => _reindexRemoteWhitelists ?? (_reindexRemoteWhitelists = new InputList<string>());
            set => _reindexRemoteWhitelists = value;
        }

        /// <summary>
        /// Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.
        /// </summary>
        [Input("scriptMaxCompilationsRate")]
        public Input<string>? ScriptMaxCompilationsRate { get; set; }

        /// <summary>
        /// Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.
        /// </summary>
        [Input("searchMaxBuckets")]
        public Input<int>? SearchMaxBuckets { get; set; }

        /// <summary>
        /// Size for the thread pool queue. See documentation for exact details.
        /// </summary>
        [Input("threadPoolAnalyzeQueueSize")]
        public Input<int>? ThreadPoolAnalyzeQueueSize { get; set; }

        /// <summary>
        /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolAnalyzeSize")]
        public Input<int>? ThreadPoolAnalyzeSize { get; set; }

        /// <summary>
        /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolForceMergeSize")]
        public Input<int>? ThreadPoolForceMergeSize { get; set; }

        /// <summary>
        /// Size for the thread pool queue. See documentation for exact details.
        /// </summary>
        [Input("threadPoolGetQueueSize")]
        public Input<int>? ThreadPoolGetQueueSize { get; set; }

        /// <summary>
        /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolGetSize")]
        public Input<int>? ThreadPoolGetSize { get; set; }

        /// <summary>
        /// Size for the thread pool queue. See documentation for exact details.
        /// </summary>
        [Input("threadPoolSearchQueueSize")]
        public Input<int>? ThreadPoolSearchQueueSize { get; set; }

        /// <summary>
        /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolSearchSize")]
        public Input<int>? ThreadPoolSearchSize { get; set; }

        /// <summary>
        /// Size for the thread pool queue. See documentation for exact details.
        /// </summary>
        [Input("threadPoolSearchThrottledQueueSize")]
        public Input<int>? ThreadPoolSearchThrottledQueueSize { get; set; }

        /// <summary>
        /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolSearchThrottledSize")]
        public Input<int>? ThreadPoolSearchThrottledSize { get; set; }

        /// <summary>
        /// Size for the thread pool queue. See documentation for exact details.
        /// </summary>
        [Input("threadPoolWriteQueueSize")]
        public Input<int>? ThreadPoolWriteQueueSize { get; set; }

        /// <summary>
        /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolWriteSize")]
        public Input<int>? ThreadPoolWriteSize { get; set; }

        public OpenSearchOpensearchUserConfigOpensearchGetArgs()
        {
        }
        public static new OpenSearchOpensearchUserConfigOpensearchGetArgs Empty => new OpenSearchOpensearchUserConfigOpensearchGetArgs();
    }
}
