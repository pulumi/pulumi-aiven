// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class MySqlMysqlUserConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom password for admin user. Defaults to random string. 
        /// This must be set only when a new service is being created.
        /// </summary>
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        /// <summary>
        /// Custom username for admin user. This must be set only when a 
        /// new service is being created.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// The hour of day (in UTC) when backup for the service is started. 
        /// New backup is only started if previous backup has already completed.
        /// </summary>
        [Input("backupHour")]
        public Input<string>? BackupHour { get; set; }

        /// <summary>
        /// The minute of an hour when backup for the service is started. 
        /// New backup is only started if previous backup has already completed.
        /// </summary>
        [Input("backupMinute")]
        public Input<string>? BackupMinute { get; set; }

        /// <summary>
        /// The minimum amount of time in seconds to keep binlog entries 
        /// before deletion. This may be extended for services that require binlog entries for longer than the
        /// default for example if using the MySQL Debezium Kafka connector.
        /// </summary>
        [Input("binlogRetentionPeriod")]
        public Input<string>? BinlogRetentionPeriod { get; set; }

        [Input("ipFilters")]
        private InputList<string>? _ipFilters;

        /// <summary>
        /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
        /// </summary>
        public InputList<string> IpFilters
        {
            get => _ipFilters ?? (_ipFilters = new InputList<string>());
            set => _ipFilters = value;
        }

        /// <summary>
        /// Migrate data from existing server
        /// </summary>
        [Input("migration")]
        public Input<Inputs.MySqlMysqlUserConfigMigrationArgs>? Migration { get; set; }

        /// <summary>
        /// Allow clients to connect to mysql from the public internet for service 
        /// nodes that are in a project VPC or another type of private network
        /// </summary>
        [Input("mysql")]
        public Input<Inputs.MySqlMysqlUserConfigMysqlArgs>? Mysql { get; set; }

        /// <summary>
        /// MySQL major version
        /// </summary>
        [Input("mysqlVersion")]
        public Input<string>? MysqlVersion { get; set; }

        /// <summary>
        /// Allow access to selected service ports from private networks
        /// </summary>
        [Input("privateAccess")]
        public Input<Inputs.MySqlMysqlUserConfigPrivateAccessArgs>? PrivateAccess { get; set; }

        /// <summary>
        /// Allow access to selected service components through Privatelink
        /// </summary>
        [Input("privatelinkAccess")]
        public Input<Inputs.MySqlMysqlUserConfigPrivatelinkAccessArgs>? PrivatelinkAccess { get; set; }

        /// <summary>
        /// Name of another project to fork a service from. This has
        /// effect only when a new service is being created.
        /// </summary>
        [Input("projectToForkFrom")]
        public Input<string>? ProjectToForkFrom { get; set; }

        /// <summary>
        /// Allow access to selected service ports from the public Internet
        /// </summary>
        [Input("publicAccess")]
        public Input<Inputs.MySqlMysqlUserConfigPublicAccessArgs>? PublicAccess { get; set; }

        /// <summary>
        /// Recovery target time when forking a service. This has effect 
        /// only when a new service is being created.
        /// </summary>
        [Input("recoveryTargetTime")]
        public Input<string>? RecoveryTargetTime { get; set; }

        /// <summary>
        /// Name of another service to fork from. This has effect only when 
        /// a new service is being created.
        /// </summary>
        [Input("serviceToForkFrom")]
        public Input<string>? ServiceToForkFrom { get; set; }

        public MySqlMysqlUserConfigArgs()
        {
        }
    }
}
