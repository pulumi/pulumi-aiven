// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven.Inputs
{

    public sealed class KafkaKafkaUserConfigKafkaConnectConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines what client configurations can be overridden by the connector. Default is None.
        /// </summary>
        [Input("connectorClientConfigOverridePolicy")]
        public Input<string>? ConnectorClientConfigOverridePolicy { get; set; }

        /// <summary>
        /// What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest.
        /// </summary>
        [Input("consumerAutoOffsetReset")]
        public Input<string>? ConsumerAutoOffsetReset { get; set; }

        /// <summary>
        /// Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
        /// </summary>
        [Input("consumerFetchMaxBytes")]
        public Input<int>? ConsumerFetchMaxBytes { get; set; }

        /// <summary>
        /// Transaction read isolation level. read*uncommitted is the default, but read*committed can be used if consume-exactly-once behavior is desired.
        /// </summary>
        [Input("consumerIsolationLevel")]
        public Input<string>? ConsumerIsolationLevel { get; set; }

        /// <summary>
        /// Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. .
        /// </summary>
        [Input("consumerMaxPartitionFetchBytes")]
        public Input<int>? ConsumerMaxPartitionFetchBytes { get; set; }

        /// <summary>
        /// The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
        /// </summary>
        [Input("consumerMaxPollIntervalMs")]
        public Input<int>? ConsumerMaxPollIntervalMs { get; set; }

        /// <summary>
        /// The maximum number of records returned in a single call to poll() (defaults to 500).
        /// </summary>
        [Input("consumerMaxPollRecords")]
        public Input<int>? ConsumerMaxPollRecords { get; set; }

        /// <summary>
        /// The interval at which to try committing offsets for tasks (defaults to 60000).
        /// </summary>
        [Input("offsetFlushIntervalMs")]
        public Input<int>? OffsetFlushIntervalMs { get; set; }

        /// <summary>
        /// Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
        /// </summary>
        [Input("offsetFlushTimeoutMs")]
        public Input<int>? OffsetFlushTimeoutMs { get; set; }

        /// <summary>
        /// This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
        /// </summary>
        [Input("producerBatchSize")]
        public Input<int>? ProducerBatchSize { get; set; }

        /// <summary>
        /// The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
        /// </summary>
        [Input("producerBufferMemory")]
        public Input<int>? ProducerBufferMemory { get; set; }

        /// <summary>
        /// Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.
        /// </summary>
        [Input("producerCompressionType")]
        public Input<string>? ProducerCompressionType { get; set; }

        /// <summary>
        /// This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Defaults to 0.
        /// </summary>
        [Input("producerLingerMs")]
        public Input<int>? ProducerLingerMs { get; set; }

        /// <summary>
        /// This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
        /// </summary>
        [Input("producerMaxRequestSize")]
        public Input<int>? ProducerMaxRequestSize { get; set; }

        /// <summary>
        /// The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned.  Defaults to 5 minutes.
        /// </summary>
        [Input("scheduledRebalanceMaxDelayMs")]
        public Input<int>? ScheduledRebalanceMaxDelayMs { get; set; }

        /// <summary>
        /// The timeout in milliseconds used to detect failures when using Kafkaâ€™s group management facilities (defaults to 10000).
        /// </summary>
        [Input("sessionTimeoutMs")]
        public Input<int>? SessionTimeoutMs { get; set; }

        public KafkaKafkaUserConfigKafkaConnectConfigGetArgs()
        {
        }
        public static new KafkaKafkaUserConfigKafkaConnectConfigGetArgs Empty => new KafkaKafkaUserConfigKafkaConnectConfigGetArgs();
    }
}
