// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Aiven
{
    public static class GetOpenSearch
    {
        /// <summary>
        /// ## # Opensearch Data Source
        /// 
        /// The Opensearch data source provides information about the existing Aiven Opensearch service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var os1 = Output.Create(Aiven.GetOpenSearch.InvokeAsync(new Aiven.GetOpenSearchArgs
        ///         {
        ///             Project = data.Aiven_project.Pr1.Project,
        ///             ServiceName = "my-os1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOpenSearchResult> InvokeAsync(GetOpenSearchArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOpenSearchResult>("aiven:index/getOpenSearch:getOpenSearch", args ?? new GetOpenSearchArgs(), options.WithVersion());

        /// <summary>
        /// ## # Opensearch Data Source
        /// 
        /// The Opensearch data source provides information about the existing Aiven Opensearch service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var os1 = Output.Create(Aiven.GetOpenSearch.InvokeAsync(new Aiven.GetOpenSearchArgs
        ///         {
        ///             Project = data.Aiven_project.Pr1.Project,
        ///             ServiceName = "my-os1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetOpenSearchResult> Invoke(GetOpenSearchInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetOpenSearchResult>("aiven:index/getOpenSearch:getOpenSearch", args ?? new GetOpenSearchInvokeArgs(), options.WithVersion());
    }


    public sealed class GetOpenSearchArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// defines where the cloud provider and region where the service is hosted in. This can be changed freely
        /// after service is created. Changing the value will trigger a potentially lengthy migration process for the service.
        /// Format is cloud provider name
        /// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
        /// documented on each Cloud provider's own support articles,
        /// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
        /// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        /// </summary>
        [Input("cloudName")]
        public string? CloudName { get; set; }

        [Input("components")]
        private List<Inputs.GetOpenSearchComponentArgs>? _components;
        public List<Inputs.GetOpenSearchComponentArgs> Components
        {
            get => _components ?? (_components = new List<Inputs.GetOpenSearchComponentArgs>());
            set => _components = value;
        }

        /// <summary>
        /// day of week when maintenance operations should be performed. On monday, tuesday, wednesday,
        /// etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public string? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public string? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Allow clients to connect to opensearch from the public internet for service nodes that are in a
        /// project VPC or another type of private network.
        /// </summary>
        [Input("opensearch")]
        public Inputs.GetOpenSearchOpensearchArgs? Opensearch { get; set; }

        /// <summary>
        /// defines Opensearch specific additional configuration options. The following configuration
        /// options available:
        /// </summary>
        [Input("opensearchUserConfig")]
        public Inputs.GetOpenSearchOpensearchUserConfigArgs? OpensearchUserConfig { get; set; }

        /// <summary>
        /// defines what kind of computing resources are allocated for the service. It can be changed after creation,
        /// though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of
        /// disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan
        /// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
        /// (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
        /// but naming is based on memory). The available options can be seem from
        /// the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Input("plan")]
        public string? Plan { get; set; }

        /// <summary>
        /// identifies the project the service belongs to. To set up proper dependency between the project
        /// and the service, refer to the project as shown in the above example. Project cannot be changed later without
        /// destroying and re-creating the service.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// optionally specifies the VPC the service should run in. If the value is not set the service is not
        /// run inside a VPC. When set, the value should be given as a reference as shown above to set up dependencies correctly
        /// and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC
        /// after creation but doing so triggers migration to new servers so the operation can take significant amount of time to
        /// complete if the service has a lot of data.
        /// </summary>
        [Input("projectVpcId")]
        public string? ProjectVpcId { get; set; }

        /// <summary>
        /// Opensearch hostname.
        /// </summary>
        [Input("serviceHost")]
        public string? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private List<Inputs.GetOpenSearchServiceIntegrationArgs>? _serviceIntegrations;
        public List<Inputs.GetOpenSearchServiceIntegrationArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new List<Inputs.GetOpenSearchServiceIntegrationArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// specifies the actual name of the service. The name cannot be changed later without
        /// destroying and re-creating the service so name should be picked based on intended service usage rather than current
        /// attributes.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// Password used for connecting to the Opensearch service, if applicable.
        /// </summary>
        [Input("servicePassword")]
        public string? ServicePassword { get; set; }

        /// <summary>
        /// Opensearch port.
        /// </summary>
        [Input("servicePort")]
        public int? ServicePort { get; set; }

        [Input("serviceType")]
        public string? ServiceType { get; set; }

        /// <summary>
        /// URI for connecting to the Opensearch service.
        /// </summary>
        [Input("serviceUri")]
        public string? ServiceUri { get; set; }

        /// <summary>
        /// Username used for connecting to the Opensearch service, if applicable.
        /// </summary>
        [Input("serviceUsername")]
        public string? ServiceUsername { get; set; }

        /// <summary>
        /// Service state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// prevents the service from being deleted. It is recommended to set this to `true` for all
        /// production services to prevent unintentional service deletion. This does not shield against deleting databases or
        /// topics but for services with backups much of the content can at least be restored from backup in case accidental
        /// deletion is done.
        /// </summary>
        [Input("terminationProtection")]
        public bool? TerminationProtection { get; set; }

        public GetOpenSearchArgs()
        {
        }
    }

    public sealed class GetOpenSearchInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// defines where the cloud provider and region where the service is hosted in. This can be changed freely
        /// after service is created. Changing the value will trigger a potentially lengthy migration process for the service.
        /// Format is cloud provider name
        /// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
        /// documented on each Cloud provider's own support articles,
        /// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
        /// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        [Input("components")]
        private InputList<Inputs.GetOpenSearchComponentInputArgs>? _components;
        public InputList<Inputs.GetOpenSearchComponentInputArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.GetOpenSearchComponentInputArgs>());
            set => _components = value;
        }

        /// <summary>
        /// day of week when maintenance operations should be performed. On monday, tuesday, wednesday,
        /// etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Allow clients to connect to opensearch from the public internet for service nodes that are in a
        /// project VPC or another type of private network.
        /// </summary>
        [Input("opensearch")]
        public Input<Inputs.GetOpenSearchOpensearchInputArgs>? Opensearch { get; set; }

        /// <summary>
        /// defines Opensearch specific additional configuration options. The following configuration
        /// options available:
        /// </summary>
        [Input("opensearchUserConfig")]
        public Input<Inputs.GetOpenSearchOpensearchUserConfigInputArgs>? OpensearchUserConfig { get; set; }

        /// <summary>
        /// defines what kind of computing resources are allocated for the service. It can be changed after creation,
        /// though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of
        /// disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan
        /// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
        /// (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
        /// but naming is based on memory). The available options can be seem from
        /// the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// identifies the project the service belongs to. To set up proper dependency between the project
        /// and the service, refer to the project as shown in the above example. Project cannot be changed later without
        /// destroying and re-creating the service.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// optionally specifies the VPC the service should run in. If the value is not set the service is not
        /// run inside a VPC. When set, the value should be given as a reference as shown above to set up dependencies correctly
        /// and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC
        /// after creation but doing so triggers migration to new servers so the operation can take significant amount of time to
        /// complete if the service has a lot of data.
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// Opensearch hostname.
        /// </summary>
        [Input("serviceHost")]
        public Input<string>? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.GetOpenSearchServiceIntegrationInputArgs>? _serviceIntegrations;
        public InputList<Inputs.GetOpenSearchServiceIntegrationInputArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.GetOpenSearchServiceIntegrationInputArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// specifies the actual name of the service. The name cannot be changed later without
        /// destroying and re-creating the service so name should be picked based on intended service usage rather than current
        /// attributes.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Password used for connecting to the Opensearch service, if applicable.
        /// </summary>
        [Input("servicePassword")]
        public Input<string>? ServicePassword { get; set; }

        /// <summary>
        /// Opensearch port.
        /// </summary>
        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// URI for connecting to the Opensearch service.
        /// </summary>
        [Input("serviceUri")]
        public Input<string>? ServiceUri { get; set; }

        /// <summary>
        /// Username used for connecting to the Opensearch service, if applicable.
        /// </summary>
        [Input("serviceUsername")]
        public Input<string>? ServiceUsername { get; set; }

        /// <summary>
        /// Service state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// prevents the service from being deleted. It is recommended to set this to `true` for all
        /// production services to prevent unintentional service deletion. This does not shield against deleting databases or
        /// topics but for services with backups much of the content can at least be restored from backup in case accidental
        /// deletion is done.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public GetOpenSearchInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetOpenSearchResult
    {
        /// <summary>
        /// defines where the cloud provider and region where the service is hosted in. This can be changed freely
        /// after service is created. Changing the value will trigger a potentially lengthy migration process for the service.
        /// Format is cloud provider name
        /// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
        /// documented on each Cloud provider's own support articles,
        /// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
        /// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        /// </summary>
        public readonly string? CloudName;
        public readonly ImmutableArray<Outputs.GetOpenSearchComponentResult> Components;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// day of week when maintenance operations should be performed. On monday, tuesday, wednesday,
        /// etc.
        /// </summary>
        public readonly string? MaintenanceWindowDow;
        /// <summary>
        /// time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        public readonly string? MaintenanceWindowTime;
        /// <summary>
        /// Allow clients to connect to opensearch from the public internet for service nodes that are in a
        /// project VPC or another type of private network.
        /// </summary>
        public readonly Outputs.GetOpenSearchOpensearchResult Opensearch;
        /// <summary>
        /// defines Opensearch specific additional configuration options. The following configuration
        /// options available:
        /// </summary>
        public readonly Outputs.GetOpenSearchOpensearchUserConfigResult? OpensearchUserConfig;
        /// <summary>
        /// defines what kind of computing resources are allocated for the service. It can be changed after creation,
        /// though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of
        /// disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan
        /// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
        /// (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
        /// but naming is based on memory). The available options can be seem from
        /// the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        public readonly string? Plan;
        public readonly string Project;
        /// <summary>
        /// optionally specifies the VPC the service should run in. If the value is not set the service is not
        /// run inside a VPC. When set, the value should be given as a reference as shown above to set up dependencies correctly
        /// and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC
        /// after creation but doing so triggers migration to new servers so the operation can take significant amount of time to
        /// complete if the service has a lot of data.
        /// </summary>
        public readonly string? ProjectVpcId;
        /// <summary>
        /// Opensearch hostname.
        /// </summary>
        public readonly string ServiceHost;
        public readonly ImmutableArray<Outputs.GetOpenSearchServiceIntegrationResult> ServiceIntegrations;
        public readonly string ServiceName;
        /// <summary>
        /// Password used for connecting to the Opensearch service, if applicable.
        /// </summary>
        public readonly string ServicePassword;
        /// <summary>
        /// Opensearch port.
        /// </summary>
        public readonly int ServicePort;
        public readonly string ServiceType;
        /// <summary>
        /// URI for connecting to the Opensearch service.
        /// </summary>
        public readonly string ServiceUri;
        /// <summary>
        /// Username used for connecting to the Opensearch service, if applicable.
        /// </summary>
        public readonly string ServiceUsername;
        /// <summary>
        /// Service state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// prevents the service from being deleted. It is recommended to set this to `true` for all
        /// production services to prevent unintentional service deletion. This does not shield against deleting databases or
        /// topics but for services with backups much of the content can at least be restored from backup in case accidental
        /// deletion is done.
        /// </summary>
        public readonly bool? TerminationProtection;

        [OutputConstructor]
        private GetOpenSearchResult(
            string? cloudName,

            ImmutableArray<Outputs.GetOpenSearchComponentResult> components,

            string id,

            string? maintenanceWindowDow,

            string? maintenanceWindowTime,

            Outputs.GetOpenSearchOpensearchResult opensearch,

            Outputs.GetOpenSearchOpensearchUserConfigResult? opensearchUserConfig,

            string? plan,

            string project,

            string? projectVpcId,

            string serviceHost,

            ImmutableArray<Outputs.GetOpenSearchServiceIntegrationResult> serviceIntegrations,

            string serviceName,

            string servicePassword,

            int servicePort,

            string serviceType,

            string serviceUri,

            string serviceUsername,

            string state,

            bool? terminationProtection)
        {
            CloudName = cloudName;
            Components = components;
            Id = id;
            MaintenanceWindowDow = maintenanceWindowDow;
            MaintenanceWindowTime = maintenanceWindowTime;
            Opensearch = opensearch;
            OpensearchUserConfig = opensearchUserConfig;
            Plan = plan;
            Project = project;
            ProjectVpcId = projectVpcId;
            ServiceHost = serviceHost;
            ServiceIntegrations = serviceIntegrations;
            ServiceName = serviceName;
            ServicePassword = servicePassword;
            ServicePort = servicePort;
            ServiceType = serviceType;
            ServiceUri = serviceUri;
            ServiceUsername = serviceUsername;
            State = state;
            TerminationProtection = terminationProtection;
        }
    }
}
