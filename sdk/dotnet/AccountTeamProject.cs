// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// **This resource is deprecated.** Use `aiven.OrganizationGroupProject` instead.
    /// 
    /// Links an existing project to an existing team. Both the project and team should have the same `account_id`.
    /// 
    /// &gt; **Teams have been deprecated and are being migrated to groups**
    /// **On 30 September 2024** the Account Owners team will transition to super admin. Super admin have full access to the organization.
    /// The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions.
    /// **From 4 November 2024** you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after
    /// this date. **On 2 December 2024** all teams will be deleted and the teams feature will be completely removed. View the
    /// migration guide for more information on the changes and migrating to groups.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleProject = new Aiven.Project("example_project", new()
    ///     {
    ///         ProjectName = "project-1",
    ///         AccountId = ACCOUNT_RESOURCE_NAME.AccountId,
    ///     });
    /// 
    ///     var exampleTeam = new Aiven.AccountTeam("example_team", new()
    ///     {
    ///         AccountId = ACCOUNT_RESOURCE_NAMEAivenAccount.AccountId,
    ///         Name = "Example team",
    ///     });
    /// 
    ///     var main = new Aiven.AccountTeamProject("main", new()
    ///     {
    ///         AccountId = ACCOUNT_RESOURCE_NAMEAivenAccount.AccountId,
    ///         TeamId = exampleTeam.TeamId,
    ///         ProjectName = exampleProject.ProjectName,
    ///         TeamType = "admin",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import aiven:index/accountTeamProject:AccountTeamProject account_team_project1 account_id/team_id/project_name
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/accountTeamProject:AccountTeamProject")]
    public partial class AccountTeamProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique account id
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The name of an already existing project
        /// </summary>
        [Output("projectName")]
        public Output<string?> ProjectName { get; private set; } = null!;

        /// <summary>
        /// An account team id
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// The Account team project type. The possible values are `admin`, `operator`, `developer`, `read_only`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `service:configuration:write`, `service:logs:read`, `project:services:read`, `project:services:write`, `project:audit_logs:read`, `service:data:write`, `service:secrets:read`, `role:services:maintenance`, `role:services:recover`, `organization:billing:read`, `organization:billing:write`, `organization:audit_logs:read`, `organization:projects:read`, `organization:projects:write`, `organization:users:write`, `organization:permissions:read`, `organization:permissions:write`, `organization:app_users:write`, `organization:groups:write`, `organization:idps:write`, `organization:domains:write`, `organization:network:read`, `organization:network:write`, `role:organization:admin` and `service:users:write`.
        /// </summary>
        [Output("teamType")]
        public Output<string?> TeamType { get; private set; } = null!;


        /// <summary>
        /// Create a AccountTeamProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountTeamProject(string name, AccountTeamProjectArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/accountTeamProject:AccountTeamProject", name, args ?? new AccountTeamProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountTeamProject(string name, Input<string> id, AccountTeamProjectState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/accountTeamProject:AccountTeamProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountTeamProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountTeamProject Get(string name, Input<string> id, AccountTeamProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new AccountTeamProject(name, id, state, options);
        }
    }

    public sealed class AccountTeamProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique account id
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The name of an already existing project
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// An account team id
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        /// <summary>
        /// The Account team project type. The possible values are `admin`, `operator`, `developer`, `read_only`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `service:configuration:write`, `service:logs:read`, `project:services:read`, `project:services:write`, `project:audit_logs:read`, `service:data:write`, `service:secrets:read`, `role:services:maintenance`, `role:services:recover`, `organization:billing:read`, `organization:billing:write`, `organization:audit_logs:read`, `organization:projects:read`, `organization:projects:write`, `organization:users:write`, `organization:permissions:read`, `organization:permissions:write`, `organization:app_users:write`, `organization:groups:write`, `organization:idps:write`, `organization:domains:write`, `organization:network:read`, `organization:network:write`, `role:organization:admin` and `service:users:write`.
        /// </summary>
        [Input("teamType")]
        public Input<string>? TeamType { get; set; }

        public AccountTeamProjectArgs()
        {
        }
        public static new AccountTeamProjectArgs Empty => new AccountTeamProjectArgs();
    }

    public sealed class AccountTeamProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique account id
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The name of an already existing project
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// An account team id
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// The Account team project type. The possible values are `admin`, `operator`, `developer`, `read_only`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `service:configuration:write`, `service:logs:read`, `project:services:read`, `project:services:write`, `project:audit_logs:read`, `service:data:write`, `service:secrets:read`, `role:services:maintenance`, `role:services:recover`, `organization:billing:read`, `organization:billing:write`, `organization:audit_logs:read`, `organization:projects:read`, `organization:projects:write`, `organization:users:write`, `organization:permissions:read`, `organization:permissions:write`, `organization:app_users:write`, `organization:groups:write`, `organization:idps:write`, `organization:domains:write`, `organization:network:read`, `organization:network:write`, `role:organization:admin` and `service:users:write`.
        /// </summary>
        [Input("teamType")]
        public Input<string>? TeamType { get; set; }

        public AccountTeamProjectState()
        {
        }
        public static new AccountTeamProjectState Empty => new AccountTeamProjectState();
    }
}
