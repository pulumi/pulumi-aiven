// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// ## # Kafka Schema Resource
    /// 
    /// The Kafka Schema resource allows the creation and management of Aiven Kafka Schemas.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var kafka_schema1 = new Aiven.KafkaSchema("kafka-schema1", new Aiven.KafkaSchemaArgs
    ///         {
    ///             Project = aiven_project.Kafka_schemas_project1.Project,
    ///             ServiceName = aiven_service.Kafka_service1.Service_name,
    ///             SubjectName = "kafka-schema1",
    ///             CompatibilityLevel = "FORWARD",
    ///             Schema = @"    {
    ///        ""doc"": ""example"",
    ///        ""fields"": [{
    ///            ""default"": 5,
    ///            ""doc"": ""my test number"",
    ///            ""name"": ""test"",
    ///            ""namespace"": ""test"",
    ///            ""type"": ""int""
    ///        }],
    ///        ""name"": ""example"",
    ///        ""namespace"": ""example"",
    ///        ""type"": ""record""
    ///     }
    /// ",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// You can also load the schema from an external file:
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var kafka_schema2 = new Aiven.KafkaSchema("kafka-schema2", new Aiven.KafkaSchemaArgs
    ///         {
    ///             Project = aiven_project.Kafka_schemas_project1.Project,
    ///             ServiceName = aiven_service.Kafka_service1.Service_name,
    ///             SubjectName = "kafka-schema2",
    ///             CompatibilityLevel = "FORWARD",
    ///             Schema = File.ReadAllText($"{path.Module}/external_schema.avsc"),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/kafkaSchema:KafkaSchema")]
    public partial class KafkaSchema : Pulumi.CustomResource
    {
        /// <summary>
        /// configuration compatibility level overrides specific subject
        /// resource. If the compatibility level not specified for the individual subject by default,
        /// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
        /// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
        /// </summary>
        [Output("compatibilityLevel")]
        public Output<string?> CompatibilityLevel { get; private set; } = null!;

        /// <summary>
        /// and `service_name` - (Required) define the project and service the Kafka Schemas belongs to. 
        /// They should be defined using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// is Kafka Schema configuration should be a valid Avro Schema JSON format.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// Service to link the Kafka Schema to
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// is Kafka Schema subject name.
        /// </summary>
        [Output("subjectName")]
        public Output<string> SubjectName { get; private set; } = null!;

        /// <summary>
        /// Kafka Schema configuration version
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaSchema resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaSchema(string name, KafkaSchemaArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/kafkaSchema:KafkaSchema", name, args ?? new KafkaSchemaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaSchema(string name, Input<string> id, KafkaSchemaState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/kafkaSchema:KafkaSchema", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaSchema resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaSchema Get(string name, Input<string> id, KafkaSchemaState? state = null, CustomResourceOptions? options = null)
        {
            return new KafkaSchema(name, id, state, options);
        }
    }

    public sealed class KafkaSchemaArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// configuration compatibility level overrides specific subject
        /// resource. If the compatibility level not specified for the individual subject by default,
        /// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
        /// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
        /// </summary>
        [Input("compatibilityLevel")]
        public Input<string>? CompatibilityLevel { get; set; }

        /// <summary>
        /// and `service_name` - (Required) define the project and service the Kafka Schemas belongs to. 
        /// They should be defined using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// is Kafka Schema configuration should be a valid Avro Schema JSON format.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        /// <summary>
        /// Service to link the Kafka Schema to
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// is Kafka Schema subject name.
        /// </summary>
        [Input("subjectName", required: true)]
        public Input<string> SubjectName { get; set; } = null!;

        public KafkaSchemaArgs()
        {
        }
    }

    public sealed class KafkaSchemaState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// configuration compatibility level overrides specific subject
        /// resource. If the compatibility level not specified for the individual subject by default,
        /// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
        /// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
        /// </summary>
        [Input("compatibilityLevel")]
        public Input<string>? CompatibilityLevel { get; set; }

        /// <summary>
        /// and `service_name` - (Required) define the project and service the Kafka Schemas belongs to. 
        /// They should be defined using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// is Kafka Schema configuration should be a valid Avro Schema JSON format.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// Service to link the Kafka Schema to
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// is Kafka Schema subject name.
        /// </summary>
        [Input("subjectName")]
        public Input<string>? SubjectName { get; set; }

        /// <summary>
        /// Kafka Schema configuration version
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public KafkaSchemaState()
        {
        }
    }
}
