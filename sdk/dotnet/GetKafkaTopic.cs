// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetKafkaTopic
    {
        /// <summary>
        /// The Kafka Topic data source provides information about the existing Aiven Kafka Topic.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mytesttopic = Output.Create(Aiven.GetKafkaTopic.InvokeAsync(new Aiven.GetKafkaTopicArgs
        ///         {
        ///             Project = aiven_project.Myproject.Project,
        ///             ServiceName = aiven_service.Myservice.Service_name,
        ///             TopicName = "&lt;TOPIC_NAME&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaTopicResult> InvokeAsync(GetKafkaTopicArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaTopicResult>("aiven:index/getKafkaTopic:getKafkaTopic", args ?? new GetKafkaTopicArgs(), options.WithDefaults());

        /// <summary>
        /// The Kafka Topic data source provides information about the existing Aiven Kafka Topic.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mytesttopic = Output.Create(Aiven.GetKafkaTopic.InvokeAsync(new Aiven.GetKafkaTopicArgs
        ///         {
        ///             Project = aiven_project.Myproject.Project,
        ///             ServiceName = aiven_service.Myservice.Service_name,
        ///             TopicName = "&lt;TOPIC_NAME&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKafkaTopicResult> Invoke(GetKafkaTopicInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKafkaTopicResult>("aiven:index/getKafkaTopic:getKafkaTopic", args ?? new GetKafkaTopicInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKafkaTopicArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the topic. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("topicName", required: true)]
        public string TopicName { get; set; } = null!;

        public GetKafkaTopicArgs()
        {
        }
    }

    public sealed class GetKafkaTopicInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the topic. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public GetKafkaTopicInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaTopicResult
    {
        /// <summary>
        /// **DEPRECATED use config.cleanup_policy instead** Topic cleanup policy. The possible values are `delete` and `compact`.
        /// </summary>
        public readonly string CleanupPolicy;
        /// <summary>
        /// Kafka topic configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKafkaTopicConfigResult> Configs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// **DEPRECATED use config.min*insync*replicas instead** Minimum required nodes in-sync replicas (ISR) to produce to a partition.
        /// </summary>
        public readonly int MinimumInSyncReplicas;
        /// <summary>
        /// The number of partitions to create in the topic.
        /// </summary>
        public readonly int Partitions;
        /// <summary>
        /// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// The replication factor for the topic.
        /// </summary>
        public readonly int Replication;
        /// <summary>
        /// **DEPRECATED use config.retention_bytes instead** Retention bytes.
        /// </summary>
        public readonly int RetentionBytes;
        /// <summary>
        /// **DEPRECATED use config.retention_ms instead** Retention period (hours).
        /// </summary>
        public readonly int RetentionHours;
        /// <summary>
        /// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        public readonly string ServiceName;
        /// <summary>
        /// Kafka Topic tag.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKafkaTopicTagResult> Tags;
        public readonly bool TerminationProtection;
        /// <summary>
        /// The name of the topic. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        public readonly string TopicName;

        [OutputConstructor]
        private GetKafkaTopicResult(
            string cleanupPolicy,

            ImmutableArray<Outputs.GetKafkaTopicConfigResult> configs,

            string id,

            int minimumInSyncReplicas,

            int partitions,

            string project,

            int replication,

            int retentionBytes,

            int retentionHours,

            string serviceName,

            ImmutableArray<Outputs.GetKafkaTopicTagResult> tags,

            bool terminationProtection,

            string topicName)
        {
            CleanupPolicy = cleanupPolicy;
            Configs = configs;
            Id = id;
            MinimumInSyncReplicas = minimumInSyncReplicas;
            Partitions = partitions;
            Project = project;
            Replication = replication;
            RetentionBytes = retentionBytes;
            RetentionHours = retentionHours;
            ServiceName = serviceName;
            Tags = tags;
            TerminationProtection = terminationProtection;
            TopicName = topicName;
        }
    }
}
