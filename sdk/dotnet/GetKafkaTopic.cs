// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetKafkaTopic
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mytesttopic = Output.Create(Aiven.GetKafkaTopic.InvokeAsync(new Aiven.GetKafkaTopicArgs
        ///         {
        ///             Project = data.Aiven_service.Myservice.Project,
        ///             ServiceName = data.Aiven_service.Myservice.Service_name,
        ///             TopicName = "&lt;TOPIC_NAME&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaTopicResult> InvokeAsync(GetKafkaTopicArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaTopicResult>("aiven:index/getKafkaTopic:getKafkaTopic", args ?? new GetKafkaTopicArgs(), options.WithVersion());
    }


    public sealed class GetKafkaTopicArgs : Pulumi.InvokeArgs
    {
        [Input("cleanupPolicy")]
        public string? CleanupPolicy { get; set; }

        [Input("minimumInSyncReplicas")]
        public int? MinimumInSyncReplicas { get; set; }

        [Input("partitions")]
        public int? Partitions { get; set; }

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("replication")]
        public int? Replication { get; set; }

        [Input("retentionBytes")]
        public int? RetentionBytes { get; set; }

        [Input("retentionHours")]
        public int? RetentionHours { get; set; }

        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        [Input("terminationProtection")]
        public bool? TerminationProtection { get; set; }

        [Input("topicName", required: true)]
        public string TopicName { get; set; } = null!;

        public GetKafkaTopicArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaTopicResult
    {
        public readonly string? CleanupPolicy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? MinimumInSyncReplicas;
        public readonly int? Partitions;
        public readonly string Project;
        public readonly int? Replication;
        public readonly int? RetentionBytes;
        public readonly int? RetentionHours;
        public readonly string ServiceName;
        public readonly bool? TerminationProtection;
        public readonly string TopicName;

        [OutputConstructor]
        private GetKafkaTopicResult(
            string? cleanupPolicy,

            string id,

            int? minimumInSyncReplicas,

            int? partitions,

            string project,

            int? replication,

            int? retentionBytes,

            int? retentionHours,

            string serviceName,

            bool? terminationProtection,

            string topicName)
        {
            CleanupPolicy = cleanupPolicy;
            Id = id;
            MinimumInSyncReplicas = minimumInSyncReplicas;
            Partitions = partitions;
            Project = project;
            Replication = replication;
            RetentionBytes = retentionBytes;
            RetentionHours = retentionHours;
            ServiceName = serviceName;
            TerminationProtection = terminationProtection;
            TopicName = topicName;
        }
    }
}
