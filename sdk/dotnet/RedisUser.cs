// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// Creates and manages an [Aiven for Caching](https://aiven.io/docs/products/caching) (formerly known as Aiven for Redis®) service user.
    /// 
    /// !&gt; **End of life notice**
    /// In March 2024, a new licensing model was announced for Redis® that impacts the Aiven for Caching offering (formerly Aiven for Redis®).
    /// Aiven for Caching is entering its end-of-life cycle to comply with Redis's copyright and license agreements.
    /// From **February 15th, 2025**, it will not be possible to start a new Aiven for Caching service, but existing services up until version 7.2 will still be available until end of life.
    /// From **March 31st, 2025**, Aiven for Caching will no longer be available and all existing services will be migrated to Aiven for Valkey™.
    /// You can [upgrade to Valkey for free](https://aiven.io/docs/products/caching/howto/upgrade-aiven-for-caching-to-valkey) before then
    /// and update your existing `aiven.Redis` resources.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Aiven.RedisUser("foo", new()
    ///     {
    ///         ServiceName = bar.ServiceName,
    ///         Project = "my-project",
    ///         Username = "user-1",
    ///         Password = "Test$1234",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import aiven:index/redisUser:RedisUser foo PROJECT/SERVICE_NAME/USERNAME
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/redisUser:RedisUser")]
    public partial class RedisUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The password of the Redis User.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Defines command category rules. The field is required with `RedisAclCommands` and `RedisAclKeys`. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("redisAclCategories")]
        public Output<ImmutableArray<string>> RedisAclCategories { get; private set; } = null!;

        /// <summary>
        /// Defines the permitted pub/sub channel patterns. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("redisAclChannels")]
        public Output<ImmutableArray<string>> RedisAclChannels { get; private set; } = null!;

        /// <summary>
        /// Defines rules for individual commands. The field is required with `RedisAclCategories` and `RedisAclKeys`. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("redisAclCommands")]
        public Output<ImmutableArray<string>> RedisAclCommands { get; private set; } = null!;

        /// <summary>
        /// Defines key access rules. The field is required with `RedisAclCategories` and `RedisAclKeys`. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("redisAclKeys")]
        public Output<ImmutableArray<string>> RedisAclKeys { get; private set; } = null!;

        /// <summary>
        /// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Type of the user account. Tells whether the user is the primary account or a regular account.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a RedisUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RedisUser(string name, RedisUserArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/redisUser:RedisUser", name, args ?? new RedisUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RedisUser(string name, Input<string> id, RedisUserState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/redisUser:RedisUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RedisUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RedisUser Get(string name, Input<string> id, RedisUserState? state = null, CustomResourceOptions? options = null)
        {
            return new RedisUser(name, id, state, options);
        }
    }

    public sealed class RedisUserArgs : global::Pulumi.ResourceArgs
    {
        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of the Redis User.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("redisAclCategories")]
        private InputList<string>? _redisAclCategories;

        /// <summary>
        /// Defines command category rules. The field is required with `RedisAclCommands` and `RedisAclKeys`. Changing this property forces recreation of the resource.
        /// </summary>
        public InputList<string> RedisAclCategories
        {
            get => _redisAclCategories ?? (_redisAclCategories = new InputList<string>());
            set => _redisAclCategories = value;
        }

        [Input("redisAclChannels")]
        private InputList<string>? _redisAclChannels;

        /// <summary>
        /// Defines the permitted pub/sub channel patterns. Changing this property forces recreation of the resource.
        /// </summary>
        public InputList<string> RedisAclChannels
        {
            get => _redisAclChannels ?? (_redisAclChannels = new InputList<string>());
            set => _redisAclChannels = value;
        }

        [Input("redisAclCommands")]
        private InputList<string>? _redisAclCommands;

        /// <summary>
        /// Defines rules for individual commands. The field is required with `RedisAclCategories` and `RedisAclKeys`. Changing this property forces recreation of the resource.
        /// </summary>
        public InputList<string> RedisAclCommands
        {
            get => _redisAclCommands ?? (_redisAclCommands = new InputList<string>());
            set => _redisAclCommands = value;
        }

        [Input("redisAclKeys")]
        private InputList<string>? _redisAclKeys;

        /// <summary>
        /// Defines key access rules. The field is required with `RedisAclCategories` and `RedisAclKeys`. Changing this property forces recreation of the resource.
        /// </summary>
        public InputList<string> RedisAclKeys
        {
            get => _redisAclKeys ?? (_redisAclKeys = new InputList<string>());
            set => _redisAclKeys = value;
        }

        /// <summary>
        /// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public RedisUserArgs()
        {
        }
        public static new RedisUserArgs Empty => new RedisUserArgs();
    }

    public sealed class RedisUserState : global::Pulumi.ResourceArgs
    {
        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of the Redis User.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("redisAclCategories")]
        private InputList<string>? _redisAclCategories;

        /// <summary>
        /// Defines command category rules. The field is required with `RedisAclCommands` and `RedisAclKeys`. Changing this property forces recreation of the resource.
        /// </summary>
        public InputList<string> RedisAclCategories
        {
            get => _redisAclCategories ?? (_redisAclCategories = new InputList<string>());
            set => _redisAclCategories = value;
        }

        [Input("redisAclChannels")]
        private InputList<string>? _redisAclChannels;

        /// <summary>
        /// Defines the permitted pub/sub channel patterns. Changing this property forces recreation of the resource.
        /// </summary>
        public InputList<string> RedisAclChannels
        {
            get => _redisAclChannels ?? (_redisAclChannels = new InputList<string>());
            set => _redisAclChannels = value;
        }

        [Input("redisAclCommands")]
        private InputList<string>? _redisAclCommands;

        /// <summary>
        /// Defines rules for individual commands. The field is required with `RedisAclCategories` and `RedisAclKeys`. Changing this property forces recreation of the resource.
        /// </summary>
        public InputList<string> RedisAclCommands
        {
            get => _redisAclCommands ?? (_redisAclCommands = new InputList<string>());
            set => _redisAclCommands = value;
        }

        [Input("redisAclKeys")]
        private InputList<string>? _redisAclKeys;

        /// <summary>
        /// Defines key access rules. The field is required with `RedisAclCategories` and `RedisAclKeys`. Changing this property forces recreation of the resource.
        /// </summary>
        public InputList<string> RedisAclKeys
        {
            get => _redisAclKeys ?? (_redisAclKeys = new InputList<string>());
            set => _redisAclKeys = value;
        }

        /// <summary>
        /// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Type of the user account. Tells whether the user is the primary account or a regular account.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public RedisUserState()
        {
        }
        public static new RedisUserState Empty => new RedisUserState();
    }
}
