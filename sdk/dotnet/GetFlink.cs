// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetFlink
    {
        /// <summary>
        /// The Flink data source provides information about the existing Aiven Flink service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var flink = Output.Create(Aiven.GetFlink.InvokeAsync(new Aiven.GetFlinkArgs
        ///         {
        ///             Project = data.Aiven_project.Pr1.Project,
        ///             ServiceName = "&lt;SERVICE_NAME&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFlinkResult> InvokeAsync(GetFlinkArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFlinkResult>("aiven:index/getFlink:getFlink", args ?? new GetFlinkArgs(), options.WithDefaults());

        /// <summary>
        /// The Flink data source provides information about the existing Aiven Flink service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var flink = Output.Create(Aiven.GetFlink.InvokeAsync(new Aiven.GetFlinkArgs
        ///         {
        ///             Project = data.Aiven_project.Pr1.Project,
        ///             ServiceName = "&lt;SERVICE_NAME&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFlinkResult> Invoke(GetFlinkInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFlinkResult>("aiven:index/getFlink:getFlink", args ?? new GetFlinkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFlinkArgs : Pulumi.InvokeArgs
    {
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetFlinkArgs()
        {
        }
    }

    public sealed class GetFlinkInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetFlinkInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFlinkResult
    {
        public readonly string CloudName;
        public readonly ImmutableArray<Outputs.GetFlinkComponentResult> Components;
        public readonly string DiskSpace;
        public readonly string DiskSpaceCap;
        public readonly string DiskSpaceDefault;
        public readonly string DiskSpaceStep;
        public readonly string DiskSpaceUsed;
        public readonly ImmutableArray<Outputs.GetFlinkFlinkUserConfigResult> FlinkUserConfigs;
        public readonly ImmutableArray<Outputs.GetFlinkFlinkResult> Flinks;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string MaintenanceWindowDow;
        public readonly string MaintenanceWindowTime;
        public readonly string Plan;
        public readonly string Project;
        public readonly string ProjectVpcId;
        public readonly string ServiceHost;
        public readonly ImmutableArray<Outputs.GetFlinkServiceIntegrationResult> ServiceIntegrations;
        public readonly string ServiceName;
        public readonly string ServicePassword;
        public readonly int ServicePort;
        public readonly string ServiceType;
        public readonly string ServiceUri;
        public readonly string ServiceUsername;
        public readonly string State;
        public readonly ImmutableArray<string> StaticIps;
        public readonly ImmutableArray<Outputs.GetFlinkTagResult> Tags;
        public readonly bool TerminationProtection;

        [OutputConstructor]
        private GetFlinkResult(
            string cloudName,

            ImmutableArray<Outputs.GetFlinkComponentResult> components,

            string diskSpace,

            string diskSpaceCap,

            string diskSpaceDefault,

            string diskSpaceStep,

            string diskSpaceUsed,

            ImmutableArray<Outputs.GetFlinkFlinkUserConfigResult> flinkUserConfigs,

            ImmutableArray<Outputs.GetFlinkFlinkResult> flinks,

            string id,

            string maintenanceWindowDow,

            string maintenanceWindowTime,

            string plan,

            string project,

            string projectVpcId,

            string serviceHost,

            ImmutableArray<Outputs.GetFlinkServiceIntegrationResult> serviceIntegrations,

            string serviceName,

            string servicePassword,

            int servicePort,

            string serviceType,

            string serviceUri,

            string serviceUsername,

            string state,

            ImmutableArray<string> staticIps,

            ImmutableArray<Outputs.GetFlinkTagResult> tags,

            bool terminationProtection)
        {
            CloudName = cloudName;
            Components = components;
            DiskSpace = diskSpace;
            DiskSpaceCap = diskSpaceCap;
            DiskSpaceDefault = diskSpaceDefault;
            DiskSpaceStep = diskSpaceStep;
            DiskSpaceUsed = diskSpaceUsed;
            FlinkUserConfigs = flinkUserConfigs;
            Flinks = flinks;
            Id = id;
            MaintenanceWindowDow = maintenanceWindowDow;
            MaintenanceWindowTime = maintenanceWindowTime;
            Plan = plan;
            Project = project;
            ProjectVpcId = projectVpcId;
            ServiceHost = serviceHost;
            ServiceIntegrations = serviceIntegrations;
            ServiceName = serviceName;
            ServicePassword = servicePassword;
            ServicePort = servicePort;
            ServiceType = serviceType;
            ServiceUri = serviceUri;
            ServiceUsername = serviceUsername;
            State = state;
            StaticIps = staticIps;
            Tags = tags;
            TerminationProtection = terminationProtection;
        }
    }
}
