// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    public static class GetServiceComponent
    {
        /// <summary>
        /// The Service Component data source provides information about the existing Aiven service Component.
        /// 
        /// Service components can be defined to get the connection info for specific service. Services may support multiple different access routes (VPC peering and public access), have additional components or support various authentication methods. Each of these may be represented by different DNS name or TCP port and the specific component to match can be selected by specifying appropriate filters as shown below.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sc1 = Aiven.GetServiceComponent.Invoke(new()
        ///     {
        ///         Project = project1.Project,
        ///         ServiceName = service1.ServiceName,
        ///         Component = "kafka",
        ///         Route = "dynamic",
        ///         KafkaAuthenticationMethod = "certificate",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceComponentResult> InvokeAsync(GetServiceComponentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceComponentResult>("aiven:index/getServiceComponent:getServiceComponent", args ?? new GetServiceComponentArgs(), options.WithDefaults());

        /// <summary>
        /// The Service Component data source provides information about the existing Aiven service Component.
        /// 
        /// Service components can be defined to get the connection info for specific service. Services may support multiple different access routes (VPC peering and public access), have additional components or support various authentication methods. Each of these may be represented by different DNS name or TCP port and the specific component to match can be selected by specifying appropriate filters as shown below.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sc1 = Aiven.GetServiceComponent.Invoke(new()
        ///     {
        ///         Project = project1.Project,
        ///         ServiceName = service1.ServiceName,
        ///         Component = "kafka",
        ///         Route = "dynamic",
        ///         KafkaAuthenticationMethod = "certificate",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceComponentResult> Invoke(GetServiceComponentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceComponentResult>("aiven:index/getServiceComponent:getServiceComponent", args ?? new GetServiceComponentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The Service Component data source provides information about the existing Aiven service Component.
        /// 
        /// Service components can be defined to get the connection info for specific service. Services may support multiple different access routes (VPC peering and public access), have additional components or support various authentication methods. Each of these may be represented by different DNS name or TCP port and the specific component to match can be selected by specifying appropriate filters as shown below.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sc1 = Aiven.GetServiceComponent.Invoke(new()
        ///     {
        ///         Project = project1.Project,
        ///         ServiceName = service1.ServiceName,
        ///         Component = "kafka",
        ///         Route = "dynamic",
        ///         KafkaAuthenticationMethod = "certificate",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceComponentResult> Invoke(GetServiceComponentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceComponentResult>("aiven:index/getServiceComponent:getServiceComponent", args ?? new GetServiceComponentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceComponentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Service component name
        /// </summary>
        [Input("component", required: true)]
        public string Component { get; set; } = null!;

        /// <summary>
        /// Kafka authentication method. This is a value specific to the 'kafka' service component. The possible values are `Certificate` and `Sasl`.
        /// </summary>
        [Input("kafkaAuthenticationMethod")]
        public string? KafkaAuthenticationMethod { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// Network access route. The possible values are `Dynamic`, `Private`, `Privatelink` and `Public`.
        /// </summary>
        [Input("route")]
        public string? Route { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public string? ServiceName { get; set; }

        /// <summary>
        /// Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
        /// </summary>
        [Input("ssl")]
        public bool? Ssl { get; set; }

        /// <summary>
        /// DNS usage name. The possible values are `DisasterRecovery`, `Primary` and `Replica`.
        /// </summary>
        [Input("usage")]
        public string? Usage { get; set; }

        public GetServiceComponentArgs()
        {
        }
        public static new GetServiceComponentArgs Empty => new GetServiceComponentArgs();
    }

    public sealed class GetServiceComponentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Service component name
        /// </summary>
        [Input("component", required: true)]
        public Input<string> Component { get; set; } = null!;

        /// <summary>
        /// Kafka authentication method. This is a value specific to the 'kafka' service component. The possible values are `Certificate` and `Sasl`.
        /// </summary>
        [Input("kafkaAuthenticationMethod")]
        public Input<string>? KafkaAuthenticationMethod { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Network access route. The possible values are `Dynamic`, `Private`, `Privatelink` and `Public`.
        /// </summary>
        [Input("route")]
        public Input<string>? Route { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
        /// </summary>
        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        /// <summary>
        /// DNS usage name. The possible values are `DisasterRecovery`, `Primary` and `Replica`.
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        public GetServiceComponentInvokeArgs()
        {
        }
        public static new GetServiceComponentInvokeArgs Empty => new GetServiceComponentInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceComponentResult
    {
        /// <summary>
        /// Service component name
        /// </summary>
        public readonly string Component;
        /// <summary>
        /// DNS name for connecting to the service component
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kafka authentication method. This is a value specific to the 'kafka' service component. The possible values are `Certificate` and `Sasl`.
        /// </summary>
        public readonly string? KafkaAuthenticationMethod;
        /// <summary>
        /// Kafka certificate used. The possible values are `Letsencrypt` and `ProjectCa`.
        /// </summary>
        public readonly string KafkaSslCa;
        /// <summary>
        /// Port number for connecting to the service component
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Project name
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Network access route. The possible values are `Dynamic`, `Private`, `Privatelink` and `Public`.
        /// </summary>
        public readonly string? Route;
        /// <summary>
        /// Service name
        /// </summary>
        public readonly string? ServiceName;
        /// <summary>
        /// Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
        /// </summary>
        public readonly bool? Ssl;
        /// <summary>
        /// DNS usage name. The possible values are `DisasterRecovery`, `Primary` and `Replica`.
        /// </summary>
        public readonly string? Usage;

        [OutputConstructor]
        private GetServiceComponentResult(
            string component,

            string host,

            string id,

            string? kafkaAuthenticationMethod,

            string kafkaSslCa,

            int port,

            string project,

            string? route,

            string? serviceName,

            bool? ssl,

            string? usage)
        {
            Component = component;
            Host = host;
            Id = id;
            KafkaAuthenticationMethod = kafkaAuthenticationMethod;
            KafkaSslCa = kafkaSslCa;
            Port = port;
            Project = project;
            Route = route;
            ServiceName = serviceName;
            Ssl = ssl;
            Usage = usage;
        }
    }
}
