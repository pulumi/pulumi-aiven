// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    [AivenResourceType("aiven:index/influxDb:InfluxDb")]
    public partial class InfluxDb : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Add [disk storage](https://aiven.io/docs/platform/howto/add-storage-space) in increments of 30 GiB to scale your
        /// service. The maximum value depends on the service type and cloud provider. Removing additional storage causes the
        /// service nodes to go through a rolling restart, and there might be a short downtime for services without an autoscaler
        /// integration or high availability capabilities. The field can be safely removed when autoscaler is enabled without
        /// causing any changes.
        /// </summary>
        [Output("additionalDiskSpace")]
        public Output<string> AdditionalDiskSpace { get; private set; } = null!;

        /// <summary>
        /// The cloud provider and region the service is hosted in. The format is `provider-region`, for example:
        /// `google-europe-west1`. The [available cloud regions](https://aiven.io/docs/platform/reference/list_of_clouds) can differ
        /// per project and service. Changing this value [migrates the service to another cloud provider or
        /// region](https://aiven.io/docs/platform/howto/migrate-services-cloud-region). The migration runs in the background and
        /// includes a DNS update to redirect traffic to the new region. Most services experience no downtime, but some databases
        /// may have a brief interruption during DNS propagation.
        /// </summary>
        [Output("cloudName")]
        public Output<string?> CloudName { get; private set; } = null!;

        /// <summary>
        /// Service component information objects
        /// </summary>
        [Output("components")]
        public Output<ImmutableArray<Outputs.InfluxDbComponent>> Components { get; private set; } = null!;

        /// <summary>
        /// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
        /// will result in the service rebalancing.
        /// </summary>
        [Output("diskSpace")]
        public Output<string?> DiskSpace { get; private set; } = null!;

        /// <summary>
        /// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
        /// </summary>
        [Output("diskSpaceCap")]
        public Output<string> DiskSpaceCap { get; private set; } = null!;

        /// <summary>
        /// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
        /// Its also the minimum value for `disk_space`
        /// </summary>
        [Output("diskSpaceDefault")]
        public Output<string> DiskSpaceDefault { get; private set; } = null!;

        /// <summary>
        /// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
        /// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
        /// </summary>
        [Output("diskSpaceStep")]
        public Output<string> DiskSpaceStep { get; private set; } = null!;

        /// <summary>
        /// Disk space that service is currently using
        /// </summary>
        [Output("diskSpaceUsed")]
        public Output<string> DiskSpaceUsed { get; private set; } = null!;

        /// <summary>
        /// Influxdb user configurable settings. **Warning:** There's no way to reset advanced configuration options to default.
        /// Options that you add cannot be removed later
        /// </summary>
        [Output("influxdbUserConfig")]
        public Output<Outputs.InfluxDbInfluxdbUserConfig?> InfluxdbUserConfig { get; private set; } = null!;

        /// <summary>
        /// InfluxDB server provided values
        /// </summary>
        [Output("influxdbs")]
        public Output<ImmutableArray<Outputs.InfluxDbInfluxdb>> Influxdbs { get; private set; } = null!;

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Output("maintenanceWindowDow")]
        public Output<string?> MaintenanceWindowDow { get; private set; } = null!;

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Output("maintenanceWindowTime")]
        public Output<string?> MaintenanceWindowTime { get; private set; } = null!;

        /// <summary>
        /// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
        /// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
        /// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
        /// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
        /// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
        /// options can be seen from the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Output("plan")]
        public Output<string> Plan { get; private set; } = null!;

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a
        /// reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
        /// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
        /// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
        /// servers so the operation can take significant amount of time to complete if the service has a lot of data.
        /// </summary>
        [Output("projectVpcId")]
        public Output<string> ProjectVpcId { get; private set; } = null!;

        /// <summary>
        /// The hostname of the service.
        /// </summary>
        [Output("serviceHost")]
        public Output<string> ServiceHost { get; private set; } = null!;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        [Output("serviceIntegrations")]
        public Output<ImmutableArray<Outputs.InfluxDbServiceIntegration>> ServiceIntegrations { get; private set; } = null!;

        /// <summary>
        /// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
        /// service so name should be picked based on intended service usage rather than current attributes.
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Output("servicePassword")]
        public Output<string> ServicePassword { get; private set; } = null!;

        /// <summary>
        /// The port of the service
        /// </summary>
        [Output("servicePort")]
        public Output<int> ServicePort { get; private set; } = null!;

        /// <summary>
        /// Aiven internal service type code
        /// </summary>
        [Output("serviceType")]
        public Output<string> ServiceType { get; private set; } = null!;

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Output("serviceUri")]
        public Output<string> ServiceUri { get; private set; } = null!;

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Output("serviceUsername")]
        public Output<string> ServiceUsername { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
        /// static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        [Output("staticIps")]
        public Output<ImmutableArray<string>> StaticIps { get; private set; } = null!;

        /// <summary>
        /// Tags are key-value pairs that allow you to categorize services.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.InfluxDbTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive
        /// important alerts and updates about this service. You can also set email contacts at the project level.
        /// </summary>
        [Output("techEmails")]
        public Output<ImmutableArray<Outputs.InfluxDbTechEmail>> TechEmails { get; private set; } = null!;

        /// <summary>
        /// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
        /// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
        /// much of the content can at least be restored from backup in case accidental deletion is done.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;


        /// <summary>
        /// Create a InfluxDb resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InfluxDb(string name, InfluxDbArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/influxDb:InfluxDb", name, args ?? new InfluxDbArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InfluxDb(string name, Input<string> id, InfluxDbState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/influxDb:InfluxDb", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "influxdbs",
                    "servicePassword",
                    "serviceUri",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InfluxDb resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InfluxDb Get(string name, Input<string> id, InfluxDbState? state = null, CustomResourceOptions? options = null)
        {
            return new InfluxDb(name, id, state, options);
        }
    }

    public sealed class InfluxDbArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Add [disk storage](https://aiven.io/docs/platform/howto/add-storage-space) in increments of 30 GiB to scale your
        /// service. The maximum value depends on the service type and cloud provider. Removing additional storage causes the
        /// service nodes to go through a rolling restart, and there might be a short downtime for services without an autoscaler
        /// integration or high availability capabilities. The field can be safely removed when autoscaler is enabled without
        /// causing any changes.
        /// </summary>
        [Input("additionalDiskSpace")]
        public Input<string>? AdditionalDiskSpace { get; set; }

        /// <summary>
        /// The cloud provider and region the service is hosted in. The format is `provider-region`, for example:
        /// `google-europe-west1`. The [available cloud regions](https://aiven.io/docs/platform/reference/list_of_clouds) can differ
        /// per project and service. Changing this value [migrates the service to another cloud provider or
        /// region](https://aiven.io/docs/platform/howto/migrate-services-cloud-region). The migration runs in the background and
        /// includes a DNS update to redirect traffic to the new region. Most services experience no downtime, but some databases
        /// may have a brief interruption during DNS propagation.
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        /// <summary>
        /// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
        /// will result in the service rebalancing.
        /// </summary>
        [Input("diskSpace")]
        public Input<string>? DiskSpace { get; set; }

        /// <summary>
        /// Influxdb user configurable settings. **Warning:** There's no way to reset advanced configuration options to default.
        /// Options that you add cannot be removed later
        /// </summary>
        [Input("influxdbUserConfig")]
        public Input<Inputs.InfluxDbInfluxdbUserConfigArgs>? InfluxdbUserConfig { get; set; }

        [Input("influxdbs")]
        private InputList<Inputs.InfluxDbInfluxdbArgs>? _influxdbs;

        /// <summary>
        /// InfluxDB server provided values
        /// </summary>
        public InputList<Inputs.InfluxDbInfluxdbArgs> Influxdbs
        {
            get => _influxdbs ?? (_influxdbs = new InputList<Inputs.InfluxDbInfluxdbArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.InfluxDbInfluxdbArgs>());
                _influxdbs = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
        /// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
        /// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
        /// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
        /// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
        /// options can be seen from the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Input("plan", required: true)]
        public Input<string> Plan { get; set; } = null!;

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a
        /// reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
        /// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
        /// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
        /// servers so the operation can take significant amount of time to complete if the service has a lot of data.
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.InfluxDbServiceIntegrationArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.InfluxDbServiceIntegrationArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.InfluxDbServiceIntegrationArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
        /// service so name should be picked based on intended service usage rather than current attributes.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        [Input("staticIps")]
        private InputList<string>? _staticIps;

        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
        /// static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        public InputList<string> StaticIps
        {
            get => _staticIps ?? (_staticIps = new InputList<string>());
            set => _staticIps = value;
        }

        [Input("tags")]
        private InputList<Inputs.InfluxDbTagArgs>? _tags;

        /// <summary>
        /// Tags are key-value pairs that allow you to categorize services.
        /// </summary>
        public InputList<Inputs.InfluxDbTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InfluxDbTagArgs>());
            set => _tags = value;
        }

        [Input("techEmails")]
        private InputList<Inputs.InfluxDbTechEmailArgs>? _techEmails;

        /// <summary>
        /// The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive
        /// important alerts and updates about this service. You can also set email contacts at the project level.
        /// </summary>
        public InputList<Inputs.InfluxDbTechEmailArgs> TechEmails
        {
            get => _techEmails ?? (_techEmails = new InputList<Inputs.InfluxDbTechEmailArgs>());
            set => _techEmails = value;
        }

        /// <summary>
        /// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
        /// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
        /// much of the content can at least be restored from backup in case accidental deletion is done.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public InfluxDbArgs()
        {
        }
        public static new InfluxDbArgs Empty => new InfluxDbArgs();
    }

    public sealed class InfluxDbState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Add [disk storage](https://aiven.io/docs/platform/howto/add-storage-space) in increments of 30 GiB to scale your
        /// service. The maximum value depends on the service type and cloud provider. Removing additional storage causes the
        /// service nodes to go through a rolling restart, and there might be a short downtime for services without an autoscaler
        /// integration or high availability capabilities. The field can be safely removed when autoscaler is enabled without
        /// causing any changes.
        /// </summary>
        [Input("additionalDiskSpace")]
        public Input<string>? AdditionalDiskSpace { get; set; }

        /// <summary>
        /// The cloud provider and region the service is hosted in. The format is `provider-region`, for example:
        /// `google-europe-west1`. The [available cloud regions](https://aiven.io/docs/platform/reference/list_of_clouds) can differ
        /// per project and service. Changing this value [migrates the service to another cloud provider or
        /// region](https://aiven.io/docs/platform/howto/migrate-services-cloud-region). The migration runs in the background and
        /// includes a DNS update to redirect traffic to the new region. Most services experience no downtime, but some databases
        /// may have a brief interruption during DNS propagation.
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        [Input("components")]
        private InputList<Inputs.InfluxDbComponentGetArgs>? _components;

        /// <summary>
        /// Service component information objects
        /// </summary>
        public InputList<Inputs.InfluxDbComponentGetArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.InfluxDbComponentGetArgs>());
            set => _components = value;
        }

        /// <summary>
        /// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
        /// will result in the service rebalancing.
        /// </summary>
        [Input("diskSpace")]
        public Input<string>? DiskSpace { get; set; }

        /// <summary>
        /// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
        /// </summary>
        [Input("diskSpaceCap")]
        public Input<string>? DiskSpaceCap { get; set; }

        /// <summary>
        /// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
        /// Its also the minimum value for `disk_space`
        /// </summary>
        [Input("diskSpaceDefault")]
        public Input<string>? DiskSpaceDefault { get; set; }

        /// <summary>
        /// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
        /// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
        /// </summary>
        [Input("diskSpaceStep")]
        public Input<string>? DiskSpaceStep { get; set; }

        /// <summary>
        /// Disk space that service is currently using
        /// </summary>
        [Input("diskSpaceUsed")]
        public Input<string>? DiskSpaceUsed { get; set; }

        /// <summary>
        /// Influxdb user configurable settings. **Warning:** There's no way to reset advanced configuration options to default.
        /// Options that you add cannot be removed later
        /// </summary>
        [Input("influxdbUserConfig")]
        public Input<Inputs.InfluxDbInfluxdbUserConfigGetArgs>? InfluxdbUserConfig { get; set; }

        [Input("influxdbs")]
        private InputList<Inputs.InfluxDbInfluxdbGetArgs>? _influxdbs;

        /// <summary>
        /// InfluxDB server provided values
        /// </summary>
        public InputList<Inputs.InfluxDbInfluxdbGetArgs> Influxdbs
        {
            get => _influxdbs ?? (_influxdbs = new InputList<Inputs.InfluxDbInfluxdbGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.InfluxDbInfluxdbGetArgs>());
                _influxdbs = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
        /// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
        /// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
        /// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
        /// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
        /// options can be seen from the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a
        /// reference. Changing this property forces recreation of the resource.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
        /// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
        /// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
        /// servers so the operation can take significant amount of time to complete if the service has a lot of data.
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// The hostname of the service.
        /// </summary>
        [Input("serviceHost")]
        public Input<string>? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.InfluxDbServiceIntegrationGetArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.InfluxDbServiceIntegrationGetArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.InfluxDbServiceIntegrationGetArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
        /// service so name should be picked based on intended service usage rather than current attributes.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        [Input("servicePassword")]
        private Input<string>? _servicePassword;

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        public Input<string>? ServicePassword
        {
            get => _servicePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _servicePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The port of the service
        /// </summary>
        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        /// <summary>
        /// Aiven internal service type code
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        [Input("serviceUri")]
        private Input<string>? _serviceUri;

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        public Input<string>? ServiceUri
        {
            get => _serviceUri;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serviceUri = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Input("serviceUsername")]
        public Input<string>? ServiceUsername { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("staticIps")]
        private InputList<string>? _staticIps;

        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
        /// static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        public InputList<string> StaticIps
        {
            get => _staticIps ?? (_staticIps = new InputList<string>());
            set => _staticIps = value;
        }

        [Input("tags")]
        private InputList<Inputs.InfluxDbTagGetArgs>? _tags;

        /// <summary>
        /// Tags are key-value pairs that allow you to categorize services.
        /// </summary>
        public InputList<Inputs.InfluxDbTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InfluxDbTagGetArgs>());
            set => _tags = value;
        }

        [Input("techEmails")]
        private InputList<Inputs.InfluxDbTechEmailGetArgs>? _techEmails;

        /// <summary>
        /// The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive
        /// important alerts and updates about this service. You can also set email contacts at the project level.
        /// </summary>
        public InputList<Inputs.InfluxDbTechEmailGetArgs> TechEmails
        {
            get => _techEmails ?? (_techEmails = new InputList<Inputs.InfluxDbTechEmailGetArgs>());
            set => _techEmails = value;
        }

        /// <summary>
        /// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
        /// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
        /// much of the content can at least be restored from backup in case accidental deletion is done.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public InfluxDbState()
        {
        }
        public static new InfluxDbState Empty => new InfluxDbState();
    }
}
