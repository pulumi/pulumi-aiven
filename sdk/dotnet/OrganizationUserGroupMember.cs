// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// Adds and manages users in a [user group](https://aiven.io/docs/platform/concepts/projects_accounts_access#groups).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aiven.OrganizationUserGroup("example", new()
    ///     {
    ///         Description = "Example group of users.",
    ///         OrganizationId = main.Id,
    ///         Name = "Example group",
    ///     });
    /// 
    ///     var projectAdmin = new Aiven.OrganizationUserGroupMember("project_admin", new()
    ///     {
    ///         GroupId = example.GroupId,
    ///         OrganizationId = main.Id,
    ///         UserId = "u123a456b7890c",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import aiven:index/organizationUserGroupMember:OrganizationUserGroupMember project_admin ORGANIZATION_ID/USER_GROUP_ID/USER_ID
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/organizationUserGroupMember:OrganizationUserGroupMember")]
    public partial class OrganizationUserGroupMember : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the user group.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// Last activity time of the user group member.
        /// </summary>
        [Output("lastActivityTime")]
        public Output<string> LastActivityTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the organization.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.OrganizationUserGroupMemberTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The ID of the organization user.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationUserGroupMember resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationUserGroupMember(string name, OrganizationUserGroupMemberArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/organizationUserGroupMember:OrganizationUserGroupMember", name, args ?? new OrganizationUserGroupMemberArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationUserGroupMember(string name, Input<string> id, OrganizationUserGroupMemberState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/organizationUserGroupMember:OrganizationUserGroupMember", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationUserGroupMember resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationUserGroupMember Get(string name, Input<string> id, OrganizationUserGroupMemberState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationUserGroupMember(name, id, state, options);
        }
    }

    public sealed class OrganizationUserGroupMemberArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the user group.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// The ID of the organization.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.OrganizationUserGroupMemberTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// The ID of the organization user.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public OrganizationUserGroupMemberArgs()
        {
        }
        public static new OrganizationUserGroupMemberArgs Empty => new OrganizationUserGroupMemberArgs();
    }

    public sealed class OrganizationUserGroupMemberState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the user group.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// Last activity time of the user group member.
        /// </summary>
        [Input("lastActivityTime")]
        public Input<string>? LastActivityTime { get; set; }

        /// <summary>
        /// The ID of the organization.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.OrganizationUserGroupMemberTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The ID of the organization user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public OrganizationUserGroupMemberState()
        {
        }
        public static new OrganizationUserGroupMemberState Empty => new OrganizationUserGroupMemberState();
    }
}
