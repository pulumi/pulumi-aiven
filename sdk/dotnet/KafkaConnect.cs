// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aiven
{
    /// <summary>
    /// The Kafka Connect resource allows the creation and management of Aiven Kafka Connect services.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aiven = Pulumi.Aiven;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var kc1 = new Aiven.KafkaConnect("kc1", new()
    ///     {
    ///         Project = data.Aiven_project.Pr1.Project,
    ///         CloudName = "google-europe-west1",
    ///         Plan = "startup-4",
    ///         ServiceName = "my-kc1",
    ///         MaintenanceWindowDow = "monday",
    ///         MaintenanceWindowTime = "10:00:00",
    ///         KafkaConnectUserConfig = new Aiven.Inputs.KafkaConnectKafkaConnectUserConfigArgs
    ///         {
    ///             KafkaConnect = new Aiven.Inputs.KafkaConnectKafkaConnectUserConfigKafkaConnectArgs
    ///             {
    ///                 ConsumerIsolationLevel = "read_committed",
    ///             },
    ///             PublicAccess = new Aiven.Inputs.KafkaConnectKafkaConnectUserConfigPublicAccessArgs
    ///             {
    ///                 KafkaConnect = "true",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import aiven:index/kafkaConnect:KafkaConnect kc1 project/service_name
    /// ```
    /// </summary>
    [AivenResourceType("aiven:index/kafkaConnect:KafkaConnect")]
    public partial class KafkaConnect : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        /// </summary>
        [Output("cloudName")]
        public Output<string?> CloudName { get; private set; } = null!;

        /// <summary>
        /// Service component information objects
        /// </summary>
        [Output("components")]
        public Output<ImmutableArray<Outputs.KafkaConnectComponent>> Components { get; private set; } = null!;

        /// <summary>
        /// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
        /// </summary>
        [Output("diskSpace")]
        public Output<string?> DiskSpace { get; private set; } = null!;

        /// <summary>
        /// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
        /// </summary>
        [Output("diskSpaceCap")]
        public Output<string> DiskSpaceCap { get; private set; } = null!;

        /// <summary>
        /// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `disk_space`
        /// </summary>
        [Output("diskSpaceDefault")]
        public Output<string> DiskSpaceDefault { get; private set; } = null!;

        /// <summary>
        /// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
        /// </summary>
        [Output("diskSpaceStep")]
        public Output<string> DiskSpaceStep { get; private set; } = null!;

        /// <summary>
        /// Disk space that service is currently using
        /// </summary>
        [Output("diskSpaceUsed")]
        public Output<string> DiskSpaceUsed { get; private set; } = null!;

        /// <summary>
        /// Kafka*connect user configurable settings
        /// </summary>
        [Output("kafkaConnectUserConfig")]
        public Output<Outputs.KafkaConnectKafkaConnectUserConfig?> KafkaConnectUserConfig { get; private set; } = null!;

        /// <summary>
        /// Kafka Connect server provided values
        /// </summary>
        [Output("kafkaConnects")]
        public Output<ImmutableArray<Outputs.KafkaConnectKafkaConnect>> KafkaConnectServer { get; private set; } = null!;

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Output("maintenanceWindowDow")]
        public Output<string?> MaintenanceWindowDow { get; private set; } = null!;

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Output("maintenanceWindowTime")]
        public Output<string?> MaintenanceWindowTime { get; private set; } = null!;

        /// <summary>
        /// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
        /// </summary>
        [Output("projectVpcId")]
        public Output<string?> ProjectVpcId { get; private set; } = null!;

        /// <summary>
        /// The hostname of the service.
        /// </summary>
        [Output("serviceHost")]
        public Output<string> ServiceHost { get; private set; } = null!;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        [Output("serviceIntegrations")]
        public Output<ImmutableArray<Outputs.KafkaConnectServiceIntegration>> ServiceIntegrations { get; private set; } = null!;

        /// <summary>
        /// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Output("servicePassword")]
        public Output<string> ServicePassword { get; private set; } = null!;

        /// <summary>
        /// The port of the service
        /// </summary>
        [Output("servicePort")]
        public Output<int> ServicePort { get; private set; } = null!;

        /// <summary>
        /// Aiven internal service type code
        /// </summary>
        [Output("serviceType")]
        public Output<string> ServiceType { get; private set; } = null!;

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Output("serviceUri")]
        public Output<string> ServiceUri { get; private set; } = null!;

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Output("serviceUsername")]
        public Output<string> ServiceUsername { get; private set; } = null!;

        /// <summary>
        /// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        [Output("staticIps")]
        public Output<ImmutableArray<string>> StaticIps { get; private set; } = null!;

        /// <summary>
        /// Tags are key-value pairs that allow you to categorize services.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.KafkaConnectTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaConnect resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaConnect(string name, KafkaConnectArgs args, CustomResourceOptions? options = null)
            : base("aiven:index/kafkaConnect:KafkaConnect", name, args ?? new KafkaConnectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaConnect(string name, Input<string> id, KafkaConnectState? state = null, CustomResourceOptions? options = null)
            : base("aiven:index/kafkaConnect:KafkaConnect", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaConnect resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaConnect Get(string name, Input<string> id, KafkaConnectState? state = null, CustomResourceOptions? options = null)
        {
            return new KafkaConnect(name, id, state, options);
        }
    }

    public sealed class KafkaConnectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        /// <summary>
        /// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
        /// </summary>
        [Input("diskSpace")]
        public Input<string>? DiskSpace { get; set; }

        /// <summary>
        /// Kafka*connect user configurable settings
        /// </summary>
        [Input("kafkaConnectUserConfig")]
        public Input<Inputs.KafkaConnectKafkaConnectUserConfigArgs>? KafkaConnectUserConfig { get; set; }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.KafkaConnectServiceIntegrationArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.KafkaConnectServiceIntegrationArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.KafkaConnectServiceIntegrationArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        [Input("staticIps")]
        private InputList<string>? _staticIps;

        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        public InputList<string> StaticIps
        {
            get => _staticIps ?? (_staticIps = new InputList<string>());
            set => _staticIps = value;
        }

        [Input("tags")]
        private InputList<Inputs.KafkaConnectTagArgs>? _tags;

        /// <summary>
        /// Tags are key-value pairs that allow you to categorize services.
        /// </summary>
        public InputList<Inputs.KafkaConnectTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.KafkaConnectTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public KafkaConnectArgs()
        {
        }
        public static new KafkaConnectArgs Empty => new KafkaConnectArgs();
    }

    public sealed class KafkaConnectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        /// </summary>
        [Input("cloudName")]
        public Input<string>? CloudName { get; set; }

        [Input("components")]
        private InputList<Inputs.KafkaConnectComponentGetArgs>? _components;

        /// <summary>
        /// Service component information objects
        /// </summary>
        public InputList<Inputs.KafkaConnectComponentGetArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.KafkaConnectComponentGetArgs>());
            set => _components = value;
        }

        /// <summary>
        /// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
        /// </summary>
        [Input("diskSpace")]
        public Input<string>? DiskSpace { get; set; }

        /// <summary>
        /// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
        /// </summary>
        [Input("diskSpaceCap")]
        public Input<string>? DiskSpaceCap { get; set; }

        /// <summary>
        /// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `disk_space`
        /// </summary>
        [Input("diskSpaceDefault")]
        public Input<string>? DiskSpaceDefault { get; set; }

        /// <summary>
        /// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
        /// </summary>
        [Input("diskSpaceStep")]
        public Input<string>? DiskSpaceStep { get; set; }

        /// <summary>
        /// Disk space that service is currently using
        /// </summary>
        [Input("diskSpaceUsed")]
        public Input<string>? DiskSpaceUsed { get; set; }

        /// <summary>
        /// Kafka*connect user configurable settings
        /// </summary>
        [Input("kafkaConnectUserConfig")]
        public Input<Inputs.KafkaConnectKafkaConnectUserConfigGetArgs>? KafkaConnectUserConfig { get; set; }

        [Input("kafkaConnects")]
        private InputList<Inputs.KafkaConnectKafkaConnectGetArgs>? _kafkaConnects;

        /// <summary>
        /// Kafka Connect server provided values
        /// </summary>
        public InputList<Inputs.KafkaConnectKafkaConnectGetArgs> KafkaConnectServer
        {
            get => _kafkaConnects ?? (_kafkaConnects = new InputList<Inputs.KafkaConnectKafkaConnectGetArgs>());
            set => _kafkaConnects = value;
        }

        /// <summary>
        /// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
        /// </summary>
        [Input("maintenanceWindowDow")]
        public Input<string>? MaintenanceWindowDow { get; set; }

        /// <summary>
        /// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
        /// </summary>
        [Input("maintenanceWindowTime")]
        public Input<string>? MaintenanceWindowTime { get; set; }

        /// <summary>
        /// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
        /// </summary>
        [Input("projectVpcId")]
        public Input<string>? ProjectVpcId { get; set; }

        /// <summary>
        /// The hostname of the service.
        /// </summary>
        [Input("serviceHost")]
        public Input<string>? ServiceHost { get; set; }

        [Input("serviceIntegrations")]
        private InputList<Inputs.KafkaConnectServiceIntegrationGetArgs>? _serviceIntegrations;

        /// <summary>
        /// Service integrations to specify when creating a service. Not applied after initial service creation
        /// </summary>
        public InputList<Inputs.KafkaConnectServiceIntegrationGetArgs> ServiceIntegrations
        {
            get => _serviceIntegrations ?? (_serviceIntegrations = new InputList<Inputs.KafkaConnectServiceIntegrationGetArgs>());
            set => _serviceIntegrations = value;
        }

        /// <summary>
        /// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Password used for connecting to the service, if applicable
        /// </summary>
        [Input("servicePassword")]
        public Input<string>? ServicePassword { get; set; }

        /// <summary>
        /// The port of the service
        /// </summary>
        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        /// <summary>
        /// Aiven internal service type code
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
        /// </summary>
        [Input("serviceUri")]
        public Input<string>? ServiceUri { get; set; }

        /// <summary>
        /// Username used for connecting to the service, if applicable
        /// </summary>
        [Input("serviceUsername")]
        public Input<string>? ServiceUsername { get; set; }

        /// <summary>
        /// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("staticIps")]
        private InputList<string>? _staticIps;

        /// <summary>
        /// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
        /// </summary>
        public InputList<string> StaticIps
        {
            get => _staticIps ?? (_staticIps = new InputList<string>());
            set => _staticIps = value;
        }

        [Input("tags")]
        private InputList<Inputs.KafkaConnectTagGetArgs>? _tags;

        /// <summary>
        /// Tags are key-value pairs that allow you to categorize services.
        /// </summary>
        public InputList<Inputs.KafkaConnectTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.KafkaConnectTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public KafkaConnectState()
        {
        }
        public static new KafkaConnectState Empty => new KafkaConnectState();
    }
}
