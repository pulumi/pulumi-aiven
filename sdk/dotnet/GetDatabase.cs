// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Aiven
{
    public static class GetDatabase
    {
        /// <summary>
        /// ## # Database Data Source
        /// 
        /// The Database data source provides information about the existing Aiven Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mydatabase = Output.Create(Aiven.GetDatabase.InvokeAsync(new Aiven.GetDatabaseArgs
        ///         {
        ///             Project = aiven_project.Myproject.Project,
        ///             ServiceName = aiven_service.Myservice.Service_name,
        ///             DatabaseName = "&lt;DATABASE_NAME&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("aiven:index/getDatabase:getDatabase", args ?? new GetDatabaseArgs(), options.WithVersion());

        /// <summary>
        /// ## # Database Data Source
        /// 
        /// The Database data source provides information about the existing Aiven Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aiven = Pulumi.Aiven;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mydatabase = Output.Create(Aiven.GetDatabase.InvokeAsync(new Aiven.GetDatabaseArgs
        ///         {
        ///             Project = aiven_project.Myproject.Project,
        ///             ServiceName = aiven_service.Myservice.Service_name,
        ///             DatabaseName = "&lt;DATABASE_NAME&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("aiven:index/getDatabase:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithVersion());
    }


    public sealed class GetDatabaseArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// is the actual name of the database.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
        /// </summary>
        [Input("lcCollate")]
        public string? LcCollate { get; set; }

        /// <summary>
        /// default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
        /// </summary>
        [Input("lcCtype")]
        public string? LcCtype { get; set; }

        /// <summary>
        /// and `service_name` - (Required) define the project and service the database belongs to.
        /// They should be defined using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        [Input("terminationProtection")]
        public bool? TerminationProtection { get; set; }

        public GetDatabaseArgs()
        {
        }
    }

    public sealed class GetDatabaseInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// is the actual name of the database.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
        /// </summary>
        [Input("lcCollate")]
        public Input<string>? LcCollate { get; set; }

        /// <summary>
        /// default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
        /// </summary>
        [Input("lcCtype")]
        public Input<string>? LcCtype { get; set; }

        /// <summary>
        /// and `service_name` - (Required) define the project and service the database belongs to.
        /// They should be defined using reference as shown above to set up dependencies correctly.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public GetDatabaseInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDatabaseResult
    {
        public readonly string DatabaseName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
        /// </summary>
        public readonly string? LcCollate;
        /// <summary>
        /// default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
        /// </summary>
        public readonly string? LcCtype;
        public readonly string Project;
        public readonly string ServiceName;
        public readonly bool? TerminationProtection;

        [OutputConstructor]
        private GetDatabaseResult(
            string databaseName,

            string id,

            string? lcCollate,

            string? lcCtype,

            string project,

            string serviceName,

            bool? terminationProtection)
        {
            DatabaseName = databaseName;
            Id = id;
            LcCollate = lcCollate;
            LcCtype = lcCtype;
            Project = project;
            ServiceName = serviceName;
            TerminationProtection = terminationProtection;
        }
    }
}
