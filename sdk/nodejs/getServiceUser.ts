// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Service User Data Source
 *
 * The Service User data source provides information about the existing Aiven Service User.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myserviceuser = aiven.getServiceUser({
 *     project: aiven_project.myproject.project,
 *     serviceName: aiven_service.myservice.service_name,
 *     username: "<USERNAME>",
 * });
 * ```
 *
 * > **Note** The service user data source is not supported for Aiven Grafana services.
 */
export function getServiceUser(args: GetServiceUserArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceUserResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aiven:index/getServiceUser:getServiceUser", {
        "accessCert": args.accessCert,
        "accessKey": args.accessKey,
        "authentication": args.authentication,
        "password": args.password,
        "project": args.project,
        "redisAclCategories": args.redisAclCategories,
        "redisAclChannels": args.redisAclChannels,
        "redisAclCommands": args.redisAclCommands,
        "redisAclKeys": args.redisAclKeys,
        "serviceName": args.serviceName,
        "type": args.type,
        "username": args.username,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceUser.
 */
export interface GetServiceUserArgs {
    /**
     * is the access certificate of the user (not applicable for all services).
     */
    accessCert?: string;
    /**
     * is the access key of the user (not applicable for all services).
     */
    accessKey?: string;
    authentication?: string;
    /**
     * is the password of the user (not applicable for all services).
     */
    password?: string;
    /**
     * and `serviceName` - (Required) define the project and service the user belongs to. They should be defined
     * using reference as shown above to set up dependencies correctly.
     */
    project: string;
    /**
     * Redis specific field, defines command category rules.
     */
    redisAclCategories?: string[];
    redisAclChannels?: string[];
    /**
     * Redis specific field, defines rules for individual commands.
     */
    redisAclCommands?: string[];
    /**
     * Redis specific field, defines key access rules.
     */
    redisAclKeys?: string[];
    serviceName: string;
    /**
     * tells whether the user is primary account or regular account.
     */
    type?: string;
    /**
     * is the actual name of the user account.
     */
    username: string;
}

/**
 * A collection of values returned by getServiceUser.
 */
export interface GetServiceUserResult {
    /**
     * is the access certificate of the user (not applicable for all services).
     */
    readonly accessCert: string;
    /**
     * is the access key of the user (not applicable for all services).
     */
    readonly accessKey: string;
    readonly authentication?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * is the password of the user (not applicable for all services).
     */
    readonly password: string;
    readonly project: string;
    /**
     * Redis specific field, defines command category rules.
     */
    readonly redisAclCategories?: string[];
    readonly redisAclChannels?: string[];
    /**
     * Redis specific field, defines rules for individual commands.
     */
    readonly redisAclCommands?: string[];
    /**
     * Redis specific field, defines key access rules.
     */
    readonly redisAclKeys?: string[];
    readonly serviceName: string;
    /**
     * tells whether the user is primary account or regular account.
     */
    readonly type: string;
    readonly username: string;
}

export function getServiceUserOutput(args: GetServiceUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceUserResult> {
    return pulumi.output(args).apply(a => getServiceUser(a, opts))
}

/**
 * A collection of arguments for invoking getServiceUser.
 */
export interface GetServiceUserOutputArgs {
    /**
     * is the access certificate of the user (not applicable for all services).
     */
    accessCert?: pulumi.Input<string>;
    /**
     * is the access key of the user (not applicable for all services).
     */
    accessKey?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    /**
     * is the password of the user (not applicable for all services).
     */
    password?: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the user belongs to. They should be defined
     * using reference as shown above to set up dependencies correctly.
     */
    project: pulumi.Input<string>;
    /**
     * Redis specific field, defines command category rules.
     */
    redisAclCategories?: pulumi.Input<pulumi.Input<string>[]>;
    redisAclChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis specific field, defines rules for individual commands.
     */
    redisAclCommands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis specific field, defines key access rules.
     */
    redisAclKeys?: pulumi.Input<pulumi.Input<string>[]>;
    serviceName: pulumi.Input<string>;
    /**
     * tells whether the user is primary account or regular account.
     */
    type?: pulumi.Input<string>;
    /**
     * is the actual name of the user account.
     */
    username: pulumi.Input<string>;
}
