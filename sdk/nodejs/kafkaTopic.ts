// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 * 
 * const mytesttopic = new aiven.KafkaTopic("mytesttopic", {
 *     cleanupPolicy: "delete",
 *     minimumInSyncReplicas: 2,
 *     partitions: 5,
 *     project: aiven_project_myproject.project,
 *     replication: 3,
 *     retentionBytes: -1,
 *     retentionHours: 72,
 *     serviceName: aiven_service_myservice.serviceName,
 *     topicName: "<TOPIC_NAME>",
 * });
 * ```
 *
 * > This content is derived from https://github.com/aiven/terraform-provider-aiven/blob/master/website/docs/r/kafka_topic.html.markdown.
 */
export class KafkaTopic extends pulumi.CustomResource {
    /**
     * Get an existing KafkaTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaTopicState, opts?: pulumi.CustomResourceOptions): KafkaTopic {
        return new KafkaTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaTopic:KafkaTopic';

    /**
     * Returns true if the given object is an instance of KafkaTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaTopic.__pulumiType;
    }

    /**
     * Topic cleanup policy. Allowed values: delete, compact
     */
    public readonly cleanupPolicy!: pulumi.Output<string | undefined>;
    /**
     * Minimum required nodes in-sync replicas (ISR) to produce to a partition
     */
    public readonly minimumInSyncReplicas!: pulumi.Output<number | undefined>;
    /**
     * Number of partitions to create in the topic
     */
    public readonly partitions!: pulumi.Output<number>;
    /**
     * Project to link the kafka topic to
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Replication factor for the topic
     */
    public readonly replication!: pulumi.Output<number>;
    /**
     * Retention bytes
     */
    public readonly retentionBytes!: pulumi.Output<number | undefined>;
    /**
     * Retention period (hours)
     */
    public readonly retentionHours!: pulumi.Output<number | undefined>;
    /**
     * Service to link the kafka topic to
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is
     * recommended to enable this for any production Kafka topic containing critical data.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Topic name
     */
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a KafkaTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaTopicArgs | KafkaTopicState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as KafkaTopicState | undefined;
            inputs["cleanupPolicy"] = state ? state.cleanupPolicy : undefined;
            inputs["minimumInSyncReplicas"] = state ? state.minimumInSyncReplicas : undefined;
            inputs["partitions"] = state ? state.partitions : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["replication"] = state ? state.replication : undefined;
            inputs["retentionBytes"] = state ? state.retentionBytes : undefined;
            inputs["retentionHours"] = state ? state.retentionHours : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            inputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as KafkaTopicArgs | undefined;
            if (!args || args.partitions === undefined) {
                throw new Error("Missing required property 'partitions'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.replication === undefined) {
                throw new Error("Missing required property 'replication'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (!args || args.topicName === undefined) {
                throw new Error("Missing required property 'topicName'");
            }
            inputs["cleanupPolicy"] = args ? args.cleanupPolicy : undefined;
            inputs["minimumInSyncReplicas"] = args ? args.minimumInSyncReplicas : undefined;
            inputs["partitions"] = args ? args.partitions : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["replication"] = args ? args.replication : undefined;
            inputs["retentionBytes"] = args ? args.retentionBytes : undefined;
            inputs["retentionHours"] = args ? args.retentionHours : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            inputs["topicName"] = args ? args.topicName : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(KafkaTopic.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaTopic resources.
 */
export interface KafkaTopicState {
    /**
     * Topic cleanup policy. Allowed values: delete, compact
     */
    readonly cleanupPolicy?: pulumi.Input<string>;
    /**
     * Minimum required nodes in-sync replicas (ISR) to produce to a partition
     */
    readonly minimumInSyncReplicas?: pulumi.Input<number>;
    /**
     * Number of partitions to create in the topic
     */
    readonly partitions?: pulumi.Input<number>;
    /**
     * Project to link the kafka topic to
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Replication factor for the topic
     */
    readonly replication?: pulumi.Input<number>;
    /**
     * Retention bytes
     */
    readonly retentionBytes?: pulumi.Input<number>;
    /**
     * Retention period (hours)
     */
    readonly retentionHours?: pulumi.Input<number>;
    /**
     * Service to link the kafka topic to
     */
    readonly serviceName?: pulumi.Input<string>;
    /**
     * It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is
     * recommended to enable this for any production Kafka topic containing critical data.
     */
    readonly terminationProtection?: pulumi.Input<boolean>;
    /**
     * Topic name
     */
    readonly topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaTopic resource.
 */
export interface KafkaTopicArgs {
    /**
     * Topic cleanup policy. Allowed values: delete, compact
     */
    readonly cleanupPolicy?: pulumi.Input<string>;
    /**
     * Minimum required nodes in-sync replicas (ISR) to produce to a partition
     */
    readonly minimumInSyncReplicas?: pulumi.Input<number>;
    /**
     * Number of partitions to create in the topic
     */
    readonly partitions: pulumi.Input<number>;
    /**
     * Project to link the kafka topic to
     */
    readonly project: pulumi.Input<string>;
    /**
     * Replication factor for the topic
     */
    readonly replication: pulumi.Input<number>;
    /**
     * Retention bytes
     */
    readonly retentionBytes?: pulumi.Input<number>;
    /**
     * Retention period (hours)
     */
    readonly retentionHours?: pulumi.Input<number>;
    /**
     * Service to link the kafka topic to
     */
    readonly serviceName: pulumi.Input<string>;
    /**
     * It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is
     * recommended to enable this for any production Kafka topic containing critical data.
     */
    readonly terminationProtection?: pulumi.Input<boolean>;
    /**
     * Topic name
     */
    readonly topicName: pulumi.Input<string>;
}
