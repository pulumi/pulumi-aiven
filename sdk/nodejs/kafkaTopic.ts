// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class KafkaTopic extends pulumi.CustomResource {
    /**
     * Get an existing KafkaTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaTopicState, opts?: pulumi.CustomResourceOptions): KafkaTopic {
        return new KafkaTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaTopic:KafkaTopic';

    /**
     * Returns true if the given object is an instance of KafkaTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaTopic.__pulumiType;
    }

    /**
     * cleanup.policy value, can be `create`, `delete` or `compact,delete`
     *
     * @deprecated use config.cleanup_policy instead
     */
    public readonly cleanupPolicy!: pulumi.Output<string | undefined>;
    /**
     * Kafka topic configuration
     */
    public readonly config!: pulumi.Output<outputs.KafkaTopicConfig | undefined>;
    /**
     * Minimum required nodes in-sync replicas 
     * (ISR) to produce to a partition.
     *
     * @deprecated use config.min_insync_replicas instead
     */
    public readonly minimumInSyncReplicas!: pulumi.Output<number | undefined>;
    /**
     * Number of partitions to create in the topic.
     */
    public readonly partitions!: pulumi.Output<number>;
    /**
     * and `serviceName` - (Required) define the project and service the topic belongs to.
     * They should be defined using reference as shown above to set up dependencies correctly.
     * These properties cannot be changed once the service is created. Doing so will result in
     * the topic being deleted and new one created instead.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Replication factor for the topic.
     */
    public readonly replication!: pulumi.Output<number>;
    /**
     * retention.bytes value
     *
     * @deprecated use config.retention_bytes instead
     */
    public readonly retentionBytes!: pulumi.Output<number | undefined>;
    /**
     * Retention period in hours, if -1 it is infinite.
     *
     * @deprecated use config.retention_ms instead
     */
    public readonly retentionHours!: pulumi.Output<number | undefined>;
    /**
     * Service to link the kafka topic to
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Kafka Topic tag
     */
    public readonly tags!: pulumi.Output<outputs.KafkaTopicTag[] | undefined>;
    /**
     * It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
     * enable this for any production Kafka topic containing critical data.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * is the actual name of the topic account. This propery cannot be changed
     * once the service is created. Doing so will result in the topic being deleted and new one
     * created instead.
     */
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a KafkaTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaTopicArgs | KafkaTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaTopicState | undefined;
            resourceInputs["cleanupPolicy"] = state ? state.cleanupPolicy : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["minimumInSyncReplicas"] = state ? state.minimumInSyncReplicas : undefined;
            resourceInputs["partitions"] = state ? state.partitions : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["replication"] = state ? state.replication : undefined;
            resourceInputs["retentionBytes"] = state ? state.retentionBytes : undefined;
            resourceInputs["retentionHours"] = state ? state.retentionHours : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as KafkaTopicArgs | undefined;
            if ((!args || args.partitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitions'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.replication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replication'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["cleanupPolicy"] = args ? args.cleanupPolicy : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["minimumInSyncReplicas"] = args ? args.minimumInSyncReplicas : undefined;
            resourceInputs["partitions"] = args ? args.partitions : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["replication"] = args ? args.replication : undefined;
            resourceInputs["retentionBytes"] = args ? args.retentionBytes : undefined;
            resourceInputs["retentionHours"] = args ? args.retentionHours : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaTopic resources.
 */
export interface KafkaTopicState {
    /**
     * cleanup.policy value, can be `create`, `delete` or `compact,delete`
     *
     * @deprecated use config.cleanup_policy instead
     */
    cleanupPolicy?: pulumi.Input<string>;
    /**
     * Kafka topic configuration
     */
    config?: pulumi.Input<inputs.KafkaTopicConfig>;
    /**
     * Minimum required nodes in-sync replicas 
     * (ISR) to produce to a partition.
     *
     * @deprecated use config.min_insync_replicas instead
     */
    minimumInSyncReplicas?: pulumi.Input<number>;
    /**
     * Number of partitions to create in the topic.
     */
    partitions?: pulumi.Input<number>;
    /**
     * and `serviceName` - (Required) define the project and service the topic belongs to.
     * They should be defined using reference as shown above to set up dependencies correctly.
     * These properties cannot be changed once the service is created. Doing so will result in
     * the topic being deleted and new one created instead.
     */
    project?: pulumi.Input<string>;
    /**
     * Replication factor for the topic.
     */
    replication?: pulumi.Input<number>;
    /**
     * retention.bytes value
     *
     * @deprecated use config.retention_bytes instead
     */
    retentionBytes?: pulumi.Input<number>;
    /**
     * Retention period in hours, if -1 it is infinite.
     *
     * @deprecated use config.retention_ms instead
     */
    retentionHours?: pulumi.Input<number>;
    /**
     * Service to link the kafka topic to
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Kafka Topic tag
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KafkaTopicTag>[]>;
    /**
     * It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
     * enable this for any production Kafka topic containing critical data.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * is the actual name of the topic account. This propery cannot be changed
     * once the service is created. Doing so will result in the topic being deleted and new one
     * created instead.
     */
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaTopic resource.
 */
export interface KafkaTopicArgs {
    /**
     * cleanup.policy value, can be `create`, `delete` or `compact,delete`
     *
     * @deprecated use config.cleanup_policy instead
     */
    cleanupPolicy?: pulumi.Input<string>;
    /**
     * Kafka topic configuration
     */
    config?: pulumi.Input<inputs.KafkaTopicConfig>;
    /**
     * Minimum required nodes in-sync replicas 
     * (ISR) to produce to a partition.
     *
     * @deprecated use config.min_insync_replicas instead
     */
    minimumInSyncReplicas?: pulumi.Input<number>;
    /**
     * Number of partitions to create in the topic.
     */
    partitions: pulumi.Input<number>;
    /**
     * and `serviceName` - (Required) define the project and service the topic belongs to.
     * They should be defined using reference as shown above to set up dependencies correctly.
     * These properties cannot be changed once the service is created. Doing so will result in
     * the topic being deleted and new one created instead.
     */
    project: pulumi.Input<string>;
    /**
     * Replication factor for the topic.
     */
    replication: pulumi.Input<number>;
    /**
     * retention.bytes value
     *
     * @deprecated use config.retention_bytes instead
     */
    retentionBytes?: pulumi.Input<number>;
    /**
     * Retention period in hours, if -1 it is infinite.
     *
     * @deprecated use config.retention_ms instead
     */
    retentionHours?: pulumi.Input<number>;
    /**
     * Service to link the kafka topic to
     */
    serviceName: pulumi.Input<string>;
    /**
     * Kafka Topic tag
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KafkaTopicTag>[]>;
    /**
     * It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
     * enable this for any production Kafka topic containing critical data.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * is the actual name of the topic account. This propery cannot be changed
     * once the service is created. Doing so will result in the topic being deleted and new one
     * created instead.
     */
    topicName: pulumi.Input<string>;
}
