// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getElasticSearch(args: GetElasticSearchArgs, opts?: pulumi.InvokeOptions): Promise<GetElasticSearchResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aiven:index/getElasticSearch:getElasticSearch", {
        "cloudName": args.cloudName,
        "components": args.components,
        "elasticsearch": args.elasticsearch,
        "elasticsearchUserConfig": args.elasticsearchUserConfig,
        "maintenanceWindowDow": args.maintenanceWindowDow,
        "maintenanceWindowTime": args.maintenanceWindowTime,
        "plan": args.plan,
        "project": args.project,
        "projectVpcId": args.projectVpcId,
        "serviceHost": args.serviceHost,
        "serviceIntegrations": args.serviceIntegrations,
        "serviceName": args.serviceName,
        "servicePassword": args.servicePassword,
        "servicePort": args.servicePort,
        "serviceType": args.serviceType,
        "serviceUri": args.serviceUri,
        "serviceUsername": args.serviceUsername,
        "state": args.state,
        "terminationProtection": args.terminationProtection,
    }, opts);
}

/**
 * A collection of arguments for invoking getElasticSearch.
 */
export interface GetElasticSearchArgs {
    readonly cloudName?: string;
    readonly components?: inputs.GetElasticSearchComponent[];
    readonly elasticsearch?: inputs.GetElasticSearchElasticsearch;
    readonly elasticsearchUserConfig?: inputs.GetElasticSearchElasticsearchUserConfig;
    readonly maintenanceWindowDow?: string;
    readonly maintenanceWindowTime?: string;
    readonly plan?: string;
    readonly project: string;
    readonly projectVpcId?: string;
    readonly serviceHost?: string;
    readonly serviceIntegrations?: inputs.GetElasticSearchServiceIntegration[];
    readonly serviceName: string;
    readonly servicePassword?: string;
    readonly servicePort?: number;
    readonly serviceType?: string;
    readonly serviceUri?: string;
    readonly serviceUsername?: string;
    readonly state?: string;
    readonly terminationProtection?: boolean;
}

/**
 * A collection of values returned by getElasticSearch.
 */
export interface GetElasticSearchResult {
    readonly cloudName?: string;
    readonly components: outputs.GetElasticSearchComponent[];
    readonly elasticsearch: outputs.GetElasticSearchElasticsearch;
    readonly elasticsearchUserConfig?: outputs.GetElasticSearchElasticsearchUserConfig;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly maintenanceWindowDow?: string;
    readonly maintenanceWindowTime?: string;
    readonly plan?: string;
    readonly project: string;
    readonly projectVpcId?: string;
    readonly serviceHost: string;
    readonly serviceIntegrations?: outputs.GetElasticSearchServiceIntegration[];
    readonly serviceName: string;
    readonly servicePassword: string;
    readonly servicePort: number;
    readonly serviceType: string;
    readonly serviceUri: string;
    readonly serviceUsername: string;
    readonly state: string;
    readonly terminationProtection?: boolean;
}
