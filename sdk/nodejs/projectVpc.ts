// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 * 
 * const myvpc = new aiven.ProjectVpc("myvpc", {
 *     cloudName: "google-europe-west1",
 *     networkCidr: "192.168.0.1/24",
 *     project: aiven_project_myproject.project,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aiven/blob/master/website/docs/r/project_vpc.html.markdown.
 */
export class ProjectVpc extends pulumi.CustomResource {
    /**
     * Get an existing ProjectVpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectVpcState, opts?: pulumi.CustomResourceOptions): ProjectVpc {
        return new ProjectVpc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/projectVpc:ProjectVpc';

    /**
     * Returns true if the given object is an instance of ProjectVpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectVpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectVpc.__pulumiType;
    }

    /**
     * Cloud the VPC is in
     */
    public readonly cloudName!: pulumi.Output<string>;
    /**
     * Network address range used by the VPC like 192.168.0.0/24
     */
    public readonly networkCidr!: pulumi.Output<string>;
    /**
     * The project the VPC belongs to
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * State of the VPC (APPROVED, ACTIVE, DELETING, DELETED)
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a ProjectVpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectVpcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectVpcArgs | ProjectVpcState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ProjectVpcState | undefined;
            inputs["cloudName"] = state ? state.cloudName : undefined;
            inputs["networkCidr"] = state ? state.networkCidr : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as ProjectVpcArgs | undefined;
            if (!args || args.cloudName === undefined) {
                throw new Error("Missing required property 'cloudName'");
            }
            if (!args || args.networkCidr === undefined) {
                throw new Error("Missing required property 'networkCidr'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            inputs["cloudName"] = args ? args.cloudName : undefined;
            inputs["networkCidr"] = args ? args.networkCidr : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ProjectVpc.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectVpc resources.
 */
export interface ProjectVpcState {
    /**
     * Cloud the VPC is in
     */
    readonly cloudName?: pulumi.Input<string>;
    /**
     * Network address range used by the VPC like 192.168.0.0/24
     */
    readonly networkCidr?: pulumi.Input<string>;
    /**
     * The project the VPC belongs to
     */
    readonly project?: pulumi.Input<string>;
    /**
     * State of the VPC (APPROVED, ACTIVE, DELETING, DELETED)
     */
    readonly state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectVpc resource.
 */
export interface ProjectVpcArgs {
    /**
     * Cloud the VPC is in
     */
    readonly cloudName: pulumi.Input<string>;
    /**
     * Network address range used by the VPC like 192.168.0.0/24
     */
    readonly networkCidr: pulumi.Input<string>;
    /**
     * The project the VPC belongs to
     */
    readonly project: pulumi.Input<string>;
}
