// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The Service Integration data source provides information about the existing Aiven Service Integration.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
 *
 * ## Example Usage
 *
 * {{tffile "examples/data-sources/aiven_service_integration/data-source.tf"}}
 */
export function getServiceIntegration(args: GetServiceIntegrationArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceIntegrationResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aiven:index/getServiceIntegration:getServiceIntegration", {
        "destinationServiceName": args.destinationServiceName,
        "integrationType": args.integrationType,
        "project": args.project,
        "sourceServiceName": args.sourceServiceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationArgs {
    destinationServiceName: string;
    integrationType: string;
    project: string;
    sourceServiceName: string;
}

/**
 * A collection of values returned by getServiceIntegration.
 */
export interface GetServiceIntegrationResult {
    readonly destinationEndpointId: string;
    readonly destinationServiceName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly integrationId: string;
    readonly integrationType: string;
    readonly kafkaConnectUserConfigs: outputs.GetServiceIntegrationKafkaConnectUserConfig[];
    readonly kafkaLogsUserConfigs: outputs.GetServiceIntegrationKafkaLogsUserConfig[];
    readonly kafkaMirrormakerUserConfigs: outputs.GetServiceIntegrationKafkaMirrormakerUserConfig[];
    readonly logsUserConfigs: outputs.GetServiceIntegrationLogsUserConfig[];
    readonly metricsUserConfigs: outputs.GetServiceIntegrationMetricsUserConfig[];
    readonly mirrormakerUserConfigs: outputs.GetServiceIntegrationMirrormakerUserConfig[];
    readonly project: string;
    readonly sourceEndpointId: string;
    readonly sourceServiceName: string;
}

export function getServiceIntegrationOutput(args: GetServiceIntegrationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceIntegrationResult> {
    return pulumi.output(args).apply(a => getServiceIntegration(a, opts))
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationOutputArgs {
    destinationServiceName: pulumi.Input<string>;
    integrationType: pulumi.Input<string>;
    project: pulumi.Input<string>;
    sourceServiceName: pulumi.Input<string>;
}
