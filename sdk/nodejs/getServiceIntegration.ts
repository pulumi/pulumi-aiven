// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Gets information about an Aiven service integration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const exampleIntegration = aiven.getServiceIntegration({
 *     project: exampleProject.project,
 *     destinationServiceName: exampleM3db.serviceName,
 *     integrationType: "metrics",
 *     sourceServiceName: exampleKafka.serviceName,
 * });
 * ```
 */
export function getServiceIntegration(args: GetServiceIntegrationArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceIntegrationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aiven:index/getServiceIntegration:getServiceIntegration", {
        "destinationServiceName": args.destinationServiceName,
        "integrationType": args.integrationType,
        "project": args.project,
        "sourceServiceName": args.sourceServiceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationArgs {
    /**
     * Destination service for the integration.
     */
    destinationServiceName: string;
    /**
     * Type of the service integration. The possible values are `alertmanager`, `autoscaler`, `caching`, `cassandraCrossServiceCluster`, `clickhouseCredentials`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `disasterRecovery`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `flinkExternalBigquery`, `flinkExternalKafka`, `flinkExternalPostgresql`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaConnectPostgresql`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`, `stresstester`, `thanosDistributedQuery`, `thanosMigrate`, `thanoscompactor`, `thanosquery`, `thanosruler`, `thanosstore`, `vector` and `vmalert`.
     */
    integrationType: string;
    /**
     * Project the integration belongs to.
     */
    project: string;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName: string;
}

/**
 * A collection of values returned by getServiceIntegration.
 */
export interface GetServiceIntegrationResult {
    /**
     * ClickhouseKafka user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly clickhouseKafkaUserConfigs: outputs.GetServiceIntegrationClickhouseKafkaUserConfig[];
    /**
     * ClickhousePostgresql user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly clickhousePostgresqlUserConfigs: outputs.GetServiceIntegrationClickhousePostgresqlUserConfig[];
    /**
     * Datadog user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly datadogUserConfigs: outputs.GetServiceIntegrationDatadogUserConfig[];
    /**
     * Destination endpoint for the integration.
     */
    readonly destinationEndpointId: string;
    /**
     * Destination service for the integration.
     */
    readonly destinationServiceName: string;
    /**
     * Destination service project name
     */
    readonly destinationServiceProject: string;
    /**
     * ExternalAwsCloudwatchLogs user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly externalAwsCloudwatchLogsUserConfigs: outputs.GetServiceIntegrationExternalAwsCloudwatchLogsUserConfig[];
    /**
     * ExternalAwsCloudwatchMetrics user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly externalAwsCloudwatchMetricsUserConfigs: outputs.GetServiceIntegrationExternalAwsCloudwatchMetricsUserConfig[];
    /**
     * ExternalElasticsearchLogs user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly externalElasticsearchLogsUserConfigs: outputs.GetServiceIntegrationExternalElasticsearchLogsUserConfig[];
    /**
     * ExternalOpensearchLogs user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly externalOpensearchLogsUserConfigs: outputs.GetServiceIntegrationExternalOpensearchLogsUserConfig[];
    /**
     * FlinkExternalPostgresql user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly flinkExternalPostgresqlUserConfigs: outputs.GetServiceIntegrationFlinkExternalPostgresqlUserConfig[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the Aiven service integration.
     */
    readonly integrationId: string;
    /**
     * Type of the service integration. The possible values are `alertmanager`, `autoscaler`, `caching`, `cassandraCrossServiceCluster`, `clickhouseCredentials`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `disasterRecovery`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `flinkExternalBigquery`, `flinkExternalKafka`, `flinkExternalPostgresql`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaConnectPostgresql`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`, `stresstester`, `thanosDistributedQuery`, `thanosMigrate`, `thanoscompactor`, `thanosquery`, `thanosruler`, `thanosstore`, `vector` and `vmalert`.
     */
    readonly integrationType: string;
    /**
     * KafkaConnect user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly kafkaConnectUserConfigs: outputs.GetServiceIntegrationKafkaConnectUserConfig[];
    /**
     * KafkaLogs user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly kafkaLogsUserConfigs: outputs.GetServiceIntegrationKafkaLogsUserConfig[];
    /**
     * KafkaMirrormaker user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly kafkaMirrormakerUserConfigs: outputs.GetServiceIntegrationKafkaMirrormakerUserConfig[];
    /**
     * Logs user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly logsUserConfigs: outputs.GetServiceIntegrationLogsUserConfig[];
    /**
     * Metrics user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly metricsUserConfigs: outputs.GetServiceIntegrationMetricsUserConfig[];
    /**
     * Project the integration belongs to.
     */
    readonly project: string;
    /**
     * Prometheus user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     */
    readonly prometheusUserConfigs: outputs.GetServiceIntegrationPrometheusUserConfig[];
    /**
     * Source endpoint for the integration.
     */
    readonly sourceEndpointId: string;
    /**
     * Source service for the integration (if any)
     */
    readonly sourceServiceName: string;
    /**
     * Source service project name
     */
    readonly sourceServiceProject: string;
}
/**
 * Gets information about an Aiven service integration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const exampleIntegration = aiven.getServiceIntegration({
 *     project: exampleProject.project,
 *     destinationServiceName: exampleM3db.serviceName,
 *     integrationType: "metrics",
 *     sourceServiceName: exampleKafka.serviceName,
 * });
 * ```
 */
export function getServiceIntegrationOutput(args: GetServiceIntegrationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServiceIntegrationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aiven:index/getServiceIntegration:getServiceIntegration", {
        "destinationServiceName": args.destinationServiceName,
        "integrationType": args.integrationType,
        "project": args.project,
        "sourceServiceName": args.sourceServiceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationOutputArgs {
    /**
     * Destination service for the integration.
     */
    destinationServiceName: pulumi.Input<string>;
    /**
     * Type of the service integration. The possible values are `alertmanager`, `autoscaler`, `caching`, `cassandraCrossServiceCluster`, `clickhouseCredentials`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `disasterRecovery`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `flinkExternalBigquery`, `flinkExternalKafka`, `flinkExternalPostgresql`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaConnectPostgresql`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`, `stresstester`, `thanosDistributedQuery`, `thanosMigrate`, `thanoscompactor`, `thanosquery`, `thanosruler`, `thanosstore`, `vector` and `vmalert`.
     */
    integrationType: pulumi.Input<string>;
    /**
     * Project the integration belongs to.
     */
    project: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName: pulumi.Input<string>;
}
