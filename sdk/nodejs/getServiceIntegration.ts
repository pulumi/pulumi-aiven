// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Service Integration Data Source
 *
 * The Service Integration data source provides information about the existing Aiven Service Integration.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external
 * integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service,
 * getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to
 * Elasticsearch, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myintegration = aiven_project_myproject.project.apply(project => aiven.getServiceIntegration({
 *     destinationServiceName: "<DESTINATION_SERVICE_NAME>",
 *     integrationType: "datadog",
 *     project: project,
 *     sourceServiceName: "<SOURCE_SERVICE_NAME>",
 * }, { async: true }));
 * ```
 */
export function getServiceIntegration(args: GetServiceIntegrationArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceIntegrationResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aiven:index/getServiceIntegration:getServiceIntegration", {
        "dashboardUserConfig": args.dashboardUserConfig,
        "datadogUserConfig": args.datadogUserConfig,
        "destinationEndpointId": args.destinationEndpointId,
        "destinationServiceName": args.destinationServiceName,
        "externalAwsCloudwatchLogsUserConfig": args.externalAwsCloudwatchLogsUserConfig,
        "externalElasticsearchLogsUserConfig": args.externalElasticsearchLogsUserConfig,
        "externalGoogleCloudLoggingUserConfig": args.externalGoogleCloudLoggingUserConfig,
        "integrationType": args.integrationType,
        "kafkaConnectUserConfig": args.kafkaConnectUserConfig,
        "kafkaLogsUserConfig": args.kafkaLogsUserConfig,
        "kafkaMirrormakerUserConfig": args.kafkaMirrormakerUserConfig,
        "logsUserConfig": args.logsUserConfig,
        "m3aggregatorUserConfig": args.m3aggregatorUserConfig,
        "m3coordinatorUserConfig": args.m3coordinatorUserConfig,
        "metricsUserConfig": args.metricsUserConfig,
        "mirrormakerUserConfig": args.mirrormakerUserConfig,
        "project": args.project,
        "prometheusUserConfig": args.prometheusUserConfig,
        "readReplicaUserConfig": args.readReplicaUserConfig,
        "rsyslogUserConfig": args.rsyslogUserConfig,
        "schemaRegistryProxyUserConfig": args.schemaRegistryProxyUserConfig,
        "signalfxUserConfig": args.signalfxUserConfig,
        "sourceEndpointId": args.sourceEndpointId,
        "sourceServiceName": args.sourceServiceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationArgs {
    readonly dashboardUserConfig?: inputs.GetServiceIntegrationDashboardUserConfig;
    readonly datadogUserConfig?: inputs.GetServiceIntegrationDatadogUserConfig;
    readonly destinationEndpointId?: string;
    /**
     * identifies the target side of the integration.
     */
    readonly destinationServiceName: string;
    readonly externalAwsCloudwatchLogsUserConfig?: inputs.GetServiceIntegrationExternalAwsCloudwatchLogsUserConfig;
    readonly externalElasticsearchLogsUserConfig?: inputs.GetServiceIntegrationExternalElasticsearchLogsUserConfig;
    readonly externalGoogleCloudLoggingUserConfig?: inputs.GetServiceIntegrationExternalGoogleCloudLoggingUserConfig;
    /**
     * identifies the type of integration that is set up. Possible values include `dashboard`
     * , `datadog`, `logs`, `metrics` and `mirrormaker`.
     */
    readonly integrationType: string;
    readonly kafkaConnectUserConfig?: inputs.GetServiceIntegrationKafkaConnectUserConfig;
    readonly kafkaLogsUserConfig?: inputs.GetServiceIntegrationKafkaLogsUserConfig;
    readonly kafkaMirrormakerUserConfig?: inputs.GetServiceIntegrationKafkaMirrormakerUserConfig;
    readonly logsUserConfig?: inputs.GetServiceIntegrationLogsUserConfig;
    readonly m3aggregatorUserConfig?: inputs.GetServiceIntegrationM3aggregatorUserConfig;
    readonly m3coordinatorUserConfig?: inputs.GetServiceIntegrationM3coordinatorUserConfig;
    readonly metricsUserConfig?: inputs.GetServiceIntegrationMetricsUserConfig;
    readonly mirrormakerUserConfig?: inputs.GetServiceIntegrationMirrormakerUserConfig;
    /**
     * defines the project the integration belongs to.
     */
    readonly project: string;
    readonly prometheusUserConfig?: inputs.GetServiceIntegrationPrometheusUserConfig;
    readonly readReplicaUserConfig?: inputs.GetServiceIntegrationReadReplicaUserConfig;
    readonly rsyslogUserConfig?: inputs.GetServiceIntegrationRsyslogUserConfig;
    readonly schemaRegistryProxyUserConfig?: inputs.GetServiceIntegrationSchemaRegistryProxyUserConfig;
    readonly signalfxUserConfig?: inputs.GetServiceIntegrationSignalfxUserConfig;
    readonly sourceEndpointId?: string;
    /**
     * identifies the source side of the integration.
     */
    readonly sourceServiceName: string;
}

/**
 * A collection of values returned by getServiceIntegration.
 */
export interface GetServiceIntegrationResult {
    readonly dashboardUserConfig?: outputs.GetServiceIntegrationDashboardUserConfig;
    readonly datadogUserConfig?: outputs.GetServiceIntegrationDatadogUserConfig;
    readonly destinationEndpointId?: string;
    readonly destinationServiceName: string;
    readonly externalAwsCloudwatchLogsUserConfig?: outputs.GetServiceIntegrationExternalAwsCloudwatchLogsUserConfig;
    readonly externalElasticsearchLogsUserConfig?: outputs.GetServiceIntegrationExternalElasticsearchLogsUserConfig;
    readonly externalGoogleCloudLoggingUserConfig?: outputs.GetServiceIntegrationExternalGoogleCloudLoggingUserConfig;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly integrationType: string;
    readonly kafkaConnectUserConfig?: outputs.GetServiceIntegrationKafkaConnectUserConfig;
    readonly kafkaLogsUserConfig?: outputs.GetServiceIntegrationKafkaLogsUserConfig;
    readonly kafkaMirrormakerUserConfig?: outputs.GetServiceIntegrationKafkaMirrormakerUserConfig;
    readonly logsUserConfig?: outputs.GetServiceIntegrationLogsUserConfig;
    readonly m3aggregatorUserConfig?: outputs.GetServiceIntegrationM3aggregatorUserConfig;
    readonly m3coordinatorUserConfig?: outputs.GetServiceIntegrationM3coordinatorUserConfig;
    readonly metricsUserConfig?: outputs.GetServiceIntegrationMetricsUserConfig;
    readonly mirrormakerUserConfig?: outputs.GetServiceIntegrationMirrormakerUserConfig;
    readonly project: string;
    readonly prometheusUserConfig?: outputs.GetServiceIntegrationPrometheusUserConfig;
    readonly readReplicaUserConfig?: outputs.GetServiceIntegrationReadReplicaUserConfig;
    readonly rsyslogUserConfig?: outputs.GetServiceIntegrationRsyslogUserConfig;
    readonly schemaRegistryProxyUserConfig?: outputs.GetServiceIntegrationSchemaRegistryProxyUserConfig;
    readonly signalfxUserConfig?: outputs.GetServiceIntegrationSignalfxUserConfig;
    readonly sourceEndpointId?: string;
    readonly sourceServiceName: string;
}
