// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The Service Integration data source provides information about the existing Aiven Service Integration.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
 */
export function getServiceIntegration(args: GetServiceIntegrationArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceIntegrationResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aiven:index/getServiceIntegration:getServiceIntegration", {
        "destinationServiceName": args.destinationServiceName,
        "integrationType": args.integrationType,
        "project": args.project,
        "sourceServiceName": args.sourceServiceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationArgs {
    /**
     * Destination service for the integration (if any)
     */
    destinationServiceName: string;
    /**
     * Type of the service integration
     */
    integrationType: string;
    /**
     * Project the integration belongs to
     */
    project: string;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName: string;
}

/**
 * A collection of values returned by getServiceIntegration.
 */
export interface GetServiceIntegrationResult {
    /**
     * Destination endpoint for the integration (if any)
     */
    readonly destinationEndpointId: string;
    /**
     * Destination service for the integration (if any)
     */
    readonly destinationServiceName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Service Integration Id at aiven
     */
    readonly integrationId: string;
    /**
     * Type of the service integration
     */
    readonly integrationType: string;
    /**
     * Kafka Connect specific user configurable settings
     */
    readonly kafkaConnectUserConfigs: outputs.GetServiceIntegrationKafkaConnectUserConfig[];
    /**
     * Kafka Logs specific user configurable settings
     */
    readonly kafkaLogsUserConfigs: outputs.GetServiceIntegrationKafkaLogsUserConfig[];
    /**
     * Mirrormaker 2 integration specific user configurable settings
     */
    readonly kafkaMirrormakerUserConfigs: outputs.GetServiceIntegrationKafkaMirrormakerUserConfig[];
    /**
     * Log integration specific user configurable settings
     */
    readonly logsUserConfigs: outputs.GetServiceIntegrationLogsUserConfig[];
    /**
     * Metrics specific user configurable settings
     */
    readonly metricsUserConfigs: outputs.GetServiceIntegrationMetricsUserConfig[];
    /**
     * Mirrormaker 1 integration specific user configurable settings
     */
    readonly mirrormakerUserConfigs: outputs.GetServiceIntegrationMirrormakerUserConfig[];
    /**
     * Project the integration belongs to
     */
    readonly project: string;
    /**
     * Source endpoint for the integration (if any)
     */
    readonly sourceEndpointId: string;
    /**
     * Source service for the integration (if any)
     */
    readonly sourceServiceName: string;
}

export function getServiceIntegrationOutput(args: GetServiceIntegrationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceIntegrationResult> {
    return pulumi.output(args).apply(a => getServiceIntegration(a, opts))
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationOutputArgs {
    /**
     * Destination service for the integration (if any)
     */
    destinationServiceName: pulumi.Input<string>;
    /**
     * Type of the service integration
     */
    integrationType: pulumi.Input<string>;
    /**
     * Project the integration belongs to
     */
    project: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName: pulumi.Input<string>;
}
