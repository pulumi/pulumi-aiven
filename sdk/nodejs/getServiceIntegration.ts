// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The Service Integration data source provides information about the existing Aiven Service Integration.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external
 * integration endpoint. Integration could be for example sending metrics from Kafka service to an M3DB service,
 * getting metrics from an M3Db service to a Grafana service to show dashboards, sending logs from any service to
 * OpenSearch, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myintegration = aiven.getServiceIntegration({
 *     project: aiven_project.myproject.project,
 *     destinationServiceName: "<DESTINATION_SERVICE_NAME>",
 *     integrationType: "datadog",
 *     sourceServiceName: "<SOURCE_SERVICE_NAME>",
 * });
 * ```
 */
export function getServiceIntegration(args: GetServiceIntegrationArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceIntegrationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aiven:index/getServiceIntegration:getServiceIntegration", {
        "destinationServiceName": args.destinationServiceName,
        "integrationType": args.integrationType,
        "project": args.project,
        "sourceServiceName": args.sourceServiceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationArgs {
    /**
     * Destination service for the integration (if any)
     */
    destinationServiceName: string;
    /**
     * Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
     */
    integrationType: string;
    /**
     * Project the integration belongs to
     */
    project: string;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName: string;
}

/**
 * A collection of values returned by getServiceIntegration.
 */
export interface GetServiceIntegrationResult {
    /**
     * ClickhouseKafka user configurable settings
     */
    readonly clickhouseKafkaUserConfigs: outputs.GetServiceIntegrationClickhouseKafkaUserConfig[];
    /**
     * ClickhousePostgresql user configurable settings
     */
    readonly clickhousePostgresqlUserConfigs: outputs.GetServiceIntegrationClickhousePostgresqlUserConfig[];
    /**
     * Datadog user configurable settings
     */
    readonly datadogUserConfigs: outputs.GetServiceIntegrationDatadogUserConfig[];
    /**
     * Destination endpoint for the integration (if any)
     */
    readonly destinationEndpointId: string;
    /**
     * Destination service for the integration (if any)
     */
    readonly destinationServiceName: string;
    /**
     * ExternalAwsCloudwatchMetrics user configurable settings
     */
    readonly externalAwsCloudwatchMetricsUserConfigs: outputs.GetServiceIntegrationExternalAwsCloudwatchMetricsUserConfig[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Service Integration Id at aiven
     */
    readonly integrationId: string;
    /**
     * Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
     */
    readonly integrationType: string;
    /**
     * KafkaConnect user configurable settings
     */
    readonly kafkaConnectUserConfigs: outputs.GetServiceIntegrationKafkaConnectUserConfig[];
    /**
     * KafkaLogs user configurable settings
     */
    readonly kafkaLogsUserConfigs: outputs.GetServiceIntegrationKafkaLogsUserConfig[];
    /**
     * KafkaMirrormaker user configurable settings
     */
    readonly kafkaMirrormakerUserConfigs: outputs.GetServiceIntegrationKafkaMirrormakerUserConfig[];
    /**
     * Logs user configurable settings
     */
    readonly logsUserConfigs: outputs.GetServiceIntegrationLogsUserConfig[];
    /**
     * Metrics user configurable settings
     */
    readonly metricsUserConfigs: outputs.GetServiceIntegrationMetricsUserConfig[];
    /**
     * Project the integration belongs to
     */
    readonly project: string;
    /**
     * Source endpoint for the integration (if any)
     */
    readonly sourceEndpointId: string;
    /**
     * Source service for the integration (if any)
     */
    readonly sourceServiceName: string;
}
/**
 * The Service Integration data source provides information about the existing Aiven Service Integration.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external
 * integration endpoint. Integration could be for example sending metrics from Kafka service to an M3DB service,
 * getting metrics from an M3Db service to a Grafana service to show dashboards, sending logs from any service to
 * OpenSearch, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myintegration = aiven.getServiceIntegration({
 *     project: aiven_project.myproject.project,
 *     destinationServiceName: "<DESTINATION_SERVICE_NAME>",
 *     integrationType: "datadog",
 *     sourceServiceName: "<SOURCE_SERVICE_NAME>",
 * });
 * ```
 */
export function getServiceIntegrationOutput(args: GetServiceIntegrationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceIntegrationResult> {
    return pulumi.output(args).apply((a: any) => getServiceIntegration(a, opts))
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationOutputArgs {
    /**
     * Destination service for the integration (if any)
     */
    destinationServiceName: pulumi.Input<string>;
    /**
     * Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
     */
    integrationType: pulumi.Input<string>;
    /**
     * Project the integration belongs to
     */
    project: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName: pulumi.Input<string>;
}
