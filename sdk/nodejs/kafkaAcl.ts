// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KafkaAcl extends pulumi.CustomResource {
    /**
     * Get an existing KafkaAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaAclState, opts?: pulumi.CustomResourceOptions): KafkaAcl {
        return new KafkaAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaAcl:KafkaAcl';

    /**
     * Returns true if the given object is an instance of KafkaAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaAcl.__pulumiType;
    }

    /**
     * Kafka permission to grant (admin, read, readwrite, write)
     */
    public readonly permission!: pulumi.Output<string>;
    /**
     * Project to link the Kafka ACL to
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Service to link the Kafka ACL to
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Topic name pattern for the ACL entry
     */
    public readonly topic!: pulumi.Output<string>;
    /**
     * Username pattern for the ACL entry
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a KafkaAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaAclArgs | KafkaAclState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as KafkaAclState | undefined;
            inputs["permission"] = state ? state.permission : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["topic"] = state ? state.topic : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as KafkaAclArgs | undefined;
            if (!args || args.permission === undefined) {
                throw new Error("Missing required property 'permission'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (!args || args.topic === undefined) {
                throw new Error("Missing required property 'topic'");
            }
            if (!args || args.username === undefined) {
                throw new Error("Missing required property 'username'");
            }
            inputs["permission"] = args ? args.permission : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["topic"] = args ? args.topic : undefined;
            inputs["username"] = args ? args.username : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(KafkaAcl.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaAcl resources.
 */
export interface KafkaAclState {
    /**
     * Kafka permission to grant (admin, read, readwrite, write)
     */
    readonly permission?: pulumi.Input<string>;
    /**
     * Project to link the Kafka ACL to
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Service to link the Kafka ACL to
     */
    readonly serviceName?: pulumi.Input<string>;
    /**
     * Topic name pattern for the ACL entry
     */
    readonly topic?: pulumi.Input<string>;
    /**
     * Username pattern for the ACL entry
     */
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaAcl resource.
 */
export interface KafkaAclArgs {
    /**
     * Kafka permission to grant (admin, read, readwrite, write)
     */
    readonly permission: pulumi.Input<string>;
    /**
     * Project to link the Kafka ACL to
     */
    readonly project: pulumi.Input<string>;
    /**
     * Service to link the Kafka ACL to
     */
    readonly serviceName: pulumi.Input<string>;
    /**
     * Topic name pattern for the ACL entry
     */
    readonly topic: pulumi.Input<string>;
    /**
     * Username pattern for the ACL entry
     */
    readonly username: pulumi.Input<string>;
}
