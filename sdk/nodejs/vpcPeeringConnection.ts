// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const mypeeringconnection = new aiven.VpcPeeringConnection("mypeeringconnection", {
 *     peerCloudAccount: "<PEER_ACCOUNT_ID>",
 *     peerRegion: "<PEER_REGION>",
 *     peerVpc: "<PEER_VPC_ID/NAME>",
 *     vpcId: aiven_project_vpc_myvpc.id,
 * });
 * ```
 */
export class VpcPeeringConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpcPeeringConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcPeeringConnectionState, opts?: pulumi.CustomResourceOptions): VpcPeeringConnection {
        return new VpcPeeringConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/vpcPeeringConnection:VpcPeeringConnection';

    /**
     * Returns true if the given object is an instance of VpcPeeringConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcPeeringConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcPeeringConnection.__pulumiType;
    }

    /**
     * Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet
     */
    public readonly peerAzureAppId!: pulumi.Output<string | undefined>;
    /**
     * Azure tenant id in UUID4 form
     */
    public readonly peerAzureTenantId!: pulumi.Output<string | undefined>;
    /**
     * AWS account ID or GCP project ID of the peered VPC
     */
    public readonly peerCloudAccount!: pulumi.Output<string>;
    /**
     * AWS region of the peered VPC (if not in the same region as Aiven VPC)
     */
    public readonly peerRegion!: pulumi.Output<string | undefined>;
    /**
     * Azure resource group name of the peered VPC
     */
    public readonly peerResourceGroup!: pulumi.Output<string | undefined>;
    /**
     * AWS VPC ID or GCP VPC network name of the peered VPC
     */
    public readonly peerVpc!: pulumi.Output<string>;
    /**
     * Cloud provider identifier for the peering connection if available
     */
    public /*out*/ readonly peeringConnectionId!: pulumi.Output<string>;
    /**
     * State of the peering connection
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * State-specific help or error information
     */
    public /*out*/ readonly stateInfo!: pulumi.Output<{[key: string]: any}>;
    /**
     * The VPC the peering connection belongs to
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VpcPeeringConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcPeeringConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcPeeringConnectionArgs | VpcPeeringConnectionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as VpcPeeringConnectionState | undefined;
            inputs["peerAzureAppId"] = state ? state.peerAzureAppId : undefined;
            inputs["peerAzureTenantId"] = state ? state.peerAzureTenantId : undefined;
            inputs["peerCloudAccount"] = state ? state.peerCloudAccount : undefined;
            inputs["peerRegion"] = state ? state.peerRegion : undefined;
            inputs["peerResourceGroup"] = state ? state.peerResourceGroup : undefined;
            inputs["peerVpc"] = state ? state.peerVpc : undefined;
            inputs["peeringConnectionId"] = state ? state.peeringConnectionId : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["stateInfo"] = state ? state.stateInfo : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpcPeeringConnectionArgs | undefined;
            if (!args || args.peerCloudAccount === undefined) {
                throw new Error("Missing required property 'peerCloudAccount'");
            }
            if (!args || args.peerVpc === undefined) {
                throw new Error("Missing required property 'peerVpc'");
            }
            if (!args || args.vpcId === undefined) {
                throw new Error("Missing required property 'vpcId'");
            }
            inputs["peerAzureAppId"] = args ? args.peerAzureAppId : undefined;
            inputs["peerAzureTenantId"] = args ? args.peerAzureTenantId : undefined;
            inputs["peerCloudAccount"] = args ? args.peerCloudAccount : undefined;
            inputs["peerRegion"] = args ? args.peerRegion : undefined;
            inputs["peerResourceGroup"] = args ? args.peerResourceGroup : undefined;
            inputs["peerVpc"] = args ? args.peerVpc : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["peeringConnectionId"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["stateInfo"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VpcPeeringConnection.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcPeeringConnection resources.
 */
export interface VpcPeeringConnectionState {
    /**
     * Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet
     */
    readonly peerAzureAppId?: pulumi.Input<string>;
    /**
     * Azure tenant id in UUID4 form
     */
    readonly peerAzureTenantId?: pulumi.Input<string>;
    /**
     * AWS account ID or GCP project ID of the peered VPC
     */
    readonly peerCloudAccount?: pulumi.Input<string>;
    /**
     * AWS region of the peered VPC (if not in the same region as Aiven VPC)
     */
    readonly peerRegion?: pulumi.Input<string>;
    /**
     * Azure resource group name of the peered VPC
     */
    readonly peerResourceGroup?: pulumi.Input<string>;
    /**
     * AWS VPC ID or GCP VPC network name of the peered VPC
     */
    readonly peerVpc?: pulumi.Input<string>;
    /**
     * Cloud provider identifier for the peering connection if available
     */
    readonly peeringConnectionId?: pulumi.Input<string>;
    /**
     * State of the peering connection
     */
    readonly state?: pulumi.Input<string>;
    /**
     * State-specific help or error information
     */
    readonly stateInfo?: pulumi.Input<{[key: string]: any}>;
    /**
     * The VPC the peering connection belongs to
     */
    readonly vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcPeeringConnection resource.
 */
export interface VpcPeeringConnectionArgs {
    /**
     * Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet
     */
    readonly peerAzureAppId?: pulumi.Input<string>;
    /**
     * Azure tenant id in UUID4 form
     */
    readonly peerAzureTenantId?: pulumi.Input<string>;
    /**
     * AWS account ID or GCP project ID of the peered VPC
     */
    readonly peerCloudAccount: pulumi.Input<string>;
    /**
     * AWS region of the peered VPC (if not in the same region as Aiven VPC)
     */
    readonly peerRegion?: pulumi.Input<string>;
    /**
     * Azure resource group name of the peered VPC
     */
    readonly peerResourceGroup?: pulumi.Input<string>;
    /**
     * AWS VPC ID or GCP VPC network name of the peered VPC
     */
    readonly peerVpc: pulumi.Input<string>;
    /**
     * The VPC the peering connection belongs to
     */
    readonly vpcId: pulumi.Input<string>;
}
