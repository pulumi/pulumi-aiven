// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # VPC Peering Connection Resource
 *
 * The VPC Peering Connection resource allows the creation and management of Aiven VPC Peering Connections.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const mypeeringconnection = new aiven.VpcPeeringConnection("mypeeringconnection", {
 *     vpcId: aiven_project_vpc.myvpc.id,
 *     peerCloudAccount: "<PEER_ACCOUNT_ID>",
 *     peerVpc: "<PEER_VPC_ID/NAME>",
 *     peerRegion: "<PEER_REGION>",
 *     timeouts: [{
 *         create: "10m",
 *     }],
 * });
 * ```
 */
export class VpcPeeringConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpcPeeringConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcPeeringConnectionState, opts?: pulumi.CustomResourceOptions): VpcPeeringConnection {
        return new VpcPeeringConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/vpcPeeringConnection:VpcPeeringConnection';

    /**
     * Returns true if the given object is an instance of VpcPeeringConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcPeeringConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcPeeringConnection.__pulumiType;
    }

    /**
     * an Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet.
     */
    public readonly peerAzureAppId!: pulumi.Output<string | undefined>;
    /**
     * an Azure tenant id in UUID4 form.
     */
    public readonly peerAzureTenantId!: pulumi.Output<string | undefined>;
    /**
     * defines the identifier of the cloud account the VPC is being
     * peered with.
     */
    public readonly peerCloudAccount!: pulumi.Output<string>;
    /**
     * defines the region of the remote VPC if it is not in the same region as Aiven VPC.
     */
    public readonly peerRegion!: pulumi.Output<string | undefined>;
    /**
     * an Azure resource group name of the peered VPC.
     */
    public readonly peerResourceGroup!: pulumi.Output<string | undefined>;
    /**
     * defines the identifier or name of the remote VPC.
     */
    public readonly peerVpc!: pulumi.Output<string>;
    /**
     * a cloud provider identifier for the peering connection if available.
     */
    public /*out*/ readonly peeringConnectionId!: pulumi.Output<string>;
    /**
     * is the state of the peering connection. This property is computed by Aiven 
     * therefore cannot be set, only read. Where state can be one of: `APPROVED`,
     * `PENDING_PEER`, `ACTIVE`, `DELETED`, `DELETED_BY_PEER`, `REJECTED_BY_PEER` and
     * `INVALID_SPECIFICATION`.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * state-specific help or error information.
     */
    public /*out*/ readonly stateInfo!: pulumi.Output<{[key: string]: any}>;
    /**
     * is the Aiven VPC the peering connection is associated with.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VpcPeeringConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcPeeringConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcPeeringConnectionArgs | VpcPeeringConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcPeeringConnectionState | undefined;
            resourceInputs["peerAzureAppId"] = state ? state.peerAzureAppId : undefined;
            resourceInputs["peerAzureTenantId"] = state ? state.peerAzureTenantId : undefined;
            resourceInputs["peerCloudAccount"] = state ? state.peerCloudAccount : undefined;
            resourceInputs["peerRegion"] = state ? state.peerRegion : undefined;
            resourceInputs["peerResourceGroup"] = state ? state.peerResourceGroup : undefined;
            resourceInputs["peerVpc"] = state ? state.peerVpc : undefined;
            resourceInputs["peeringConnectionId"] = state ? state.peeringConnectionId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateInfo"] = state ? state.stateInfo : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpcPeeringConnectionArgs | undefined;
            if ((!args || args.peerCloudAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerCloudAccount'");
            }
            if ((!args || args.peerVpc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerVpc'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["peerAzureAppId"] = args ? args.peerAzureAppId : undefined;
            resourceInputs["peerAzureTenantId"] = args ? args.peerAzureTenantId : undefined;
            resourceInputs["peerCloudAccount"] = args ? args.peerCloudAccount : undefined;
            resourceInputs["peerRegion"] = args ? args.peerRegion : undefined;
            resourceInputs["peerResourceGroup"] = args ? args.peerResourceGroup : undefined;
            resourceInputs["peerVpc"] = args ? args.peerVpc : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["peeringConnectionId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateInfo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcPeeringConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcPeeringConnection resources.
 */
export interface VpcPeeringConnectionState {
    /**
     * an Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet.
     */
    peerAzureAppId?: pulumi.Input<string>;
    /**
     * an Azure tenant id in UUID4 form.
     */
    peerAzureTenantId?: pulumi.Input<string>;
    /**
     * defines the identifier of the cloud account the VPC is being
     * peered with.
     */
    peerCloudAccount?: pulumi.Input<string>;
    /**
     * defines the region of the remote VPC if it is not in the same region as Aiven VPC.
     */
    peerRegion?: pulumi.Input<string>;
    /**
     * an Azure resource group name of the peered VPC.
     */
    peerResourceGroup?: pulumi.Input<string>;
    /**
     * defines the identifier or name of the remote VPC.
     */
    peerVpc?: pulumi.Input<string>;
    /**
     * a cloud provider identifier for the peering connection if available.
     */
    peeringConnectionId?: pulumi.Input<string>;
    /**
     * is the state of the peering connection. This property is computed by Aiven 
     * therefore cannot be set, only read. Where state can be one of: `APPROVED`,
     * `PENDING_PEER`, `ACTIVE`, `DELETED`, `DELETED_BY_PEER`, `REJECTED_BY_PEER` and
     * `INVALID_SPECIFICATION`.
     */
    state?: pulumi.Input<string>;
    /**
     * state-specific help or error information.
     */
    stateInfo?: pulumi.Input<{[key: string]: any}>;
    /**
     * is the Aiven VPC the peering connection is associated with.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcPeeringConnection resource.
 */
export interface VpcPeeringConnectionArgs {
    /**
     * an Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet.
     */
    peerAzureAppId?: pulumi.Input<string>;
    /**
     * an Azure tenant id in UUID4 form.
     */
    peerAzureTenantId?: pulumi.Input<string>;
    /**
     * defines the identifier of the cloud account the VPC is being
     * peered with.
     */
    peerCloudAccount: pulumi.Input<string>;
    /**
     * defines the region of the remote VPC if it is not in the same region as Aiven VPC.
     */
    peerRegion?: pulumi.Input<string>;
    /**
     * an Azure resource group name of the peered VPC.
     */
    peerResourceGroup?: pulumi.Input<string>;
    /**
     * defines the identifier or name of the remote VPC.
     */
    peerVpc: pulumi.Input<string>;
    /**
     * is the Aiven VPC the peering connection is associated with.
     */
    vpcId: pulumi.Input<string>;
}
