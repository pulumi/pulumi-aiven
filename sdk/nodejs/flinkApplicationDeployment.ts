// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages the deployment of an Aiven for Apache FlinkÂ® application.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const exampleApp = new aiven.FlinkApplication("example_app", {
 *     project: exampleProject.project,
 *     serviceName: "example-flink-service",
 *     name: "example-app",
 * });
 * const main = new aiven.FlinkApplicationVersion("main", {
 *     project: exampleProject.project,
 *     serviceName: exampleFlink.serviceName,
 *     applicationId: exampleApp.applicationId,
 *     statement: "    INSERT INTO kafka_known_pizza SELECT * FROM kafka_pizza WHERE shop LIKE '%Luigis Pizza%'\n",
 *     sinks: [{
 *         createTable: `      CREATE TABLE kafka_known_pizza (
 *         shop STRING,
 *         name STRING
 *       ) WITH (
 *         'connector' = 'kafka',
 *         'properties.bootstrap.servers' = '',
 *         'scan.startup.mode' = 'earliest-offset',
 *         'topic' = 'sink_topic',
 *         'value.format' = 'json'
 *       )
 * `,
 *         integrationId: flinkToKafka.integrationId,
 *     }],
 *     sources: [{
 *         createTable: `      CREATE TABLE kafka_pizza (
 *         shop STRING,
 *         name STRING
 *       ) WITH (
 *         'connector' = 'kafka',
 *         'properties.bootstrap.servers' = '',
 *         'scan.startup.mode' = 'earliest-offset',
 *         'topic' = 'source_topic',
 *         'value.format' = 'json'
 *       )
 * `,
 *         integrationId: flinkToKafka.integrationId,
 *     }],
 * });
 * const mainFlinkApplicationDeployment = new aiven.FlinkApplicationDeployment("main", {
 *     project: exampleProject.project,
 *     serviceName: exampleFlink.serviceName,
 *     applicationId: exampleApp.applicationId,
 *     versionId: main.applicationVersionId,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/flinkApplicationDeployment:FlinkApplicationDeployment main PROJECT/SERVICE_NAME/APPLICATION_ID/DEPLOYMENT_ID
 * ```
 */
export class FlinkApplicationDeployment extends pulumi.CustomResource {
    /**
     * Get an existing FlinkApplicationDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlinkApplicationDeploymentState, opts?: pulumi.CustomResourceOptions): FlinkApplicationDeployment {
        return new FlinkApplicationDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/flinkApplicationDeployment:FlinkApplicationDeployment';

    /**
     * Returns true if the given object is an instance of FlinkApplicationDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlinkApplicationDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlinkApplicationDeployment.__pulumiType;
    }

    /**
     * Application ID.
     */
    declare public readonly applicationId: pulumi.Output<string>;
    /**
     * Application deployment creation time.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The user who deployed the application.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * The number of parallel instances for the task.
     */
    declare public readonly parallelism: pulumi.Output<number | undefined>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Restart a Flink job if it fails.
     */
    declare public readonly restartEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly serviceName: pulumi.Output<string>;
    /**
     * The savepoint to deploy from.
     */
    declare public readonly startingSavepoint: pulumi.Output<string | undefined>;
    /**
     * Application version ID.
     */
    declare public readonly versionId: pulumi.Output<string>;

    /**
     * Create a FlinkApplicationDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlinkApplicationDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlinkApplicationDeploymentArgs | FlinkApplicationDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlinkApplicationDeploymentState | undefined;
            resourceInputs["applicationId"] = state?.applicationId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["parallelism"] = state?.parallelism;
            resourceInputs["project"] = state?.project;
            resourceInputs["restartEnabled"] = state?.restartEnabled;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["startingSavepoint"] = state?.startingSavepoint;
            resourceInputs["versionId"] = state?.versionId;
        } else {
            const args = argsOrState as FlinkApplicationDeploymentArgs | undefined;
            if (args?.applicationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.serviceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (args?.versionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'versionId'");
            }
            resourceInputs["applicationId"] = args?.applicationId;
            resourceInputs["parallelism"] = args?.parallelism;
            resourceInputs["project"] = args?.project;
            resourceInputs["restartEnabled"] = args?.restartEnabled;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["startingSavepoint"] = args?.startingSavepoint;
            resourceInputs["versionId"] = args?.versionId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlinkApplicationDeployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlinkApplicationDeployment resources.
 */
export interface FlinkApplicationDeploymentState {
    /**
     * Application ID.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Application deployment creation time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The user who deployed the application.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The number of parallel instances for the task.
     */
    parallelism?: pulumi.Input<number>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * Restart a Flink job if it fails.
     */
    restartEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The savepoint to deploy from.
     */
    startingSavepoint?: pulumi.Input<string>;
    /**
     * Application version ID.
     */
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlinkApplicationDeployment resource.
 */
export interface FlinkApplicationDeploymentArgs {
    /**
     * Application ID.
     */
    applicationId: pulumi.Input<string>;
    /**
     * The number of parallel instances for the task.
     */
    parallelism?: pulumi.Input<number>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * Restart a Flink job if it fails.
     */
    restartEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The savepoint to deploy from.
     */
    startingSavepoint?: pulumi.Input<string>;
    /**
     * Application version ID.
     */
    versionId: pulumi.Input<string>;
}
