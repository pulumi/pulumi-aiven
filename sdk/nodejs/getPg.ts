// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # PG Data Source
 *
 * The PG data source provides information about the existing Aiven PostgreSQL service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const pg = aiven.getPg({
 *     project: data.aiven_project.pr1.project,
 *     serviceName: "my-pg1",
 * });
 * ```
 */
export function getPg(args: GetPgArgs, opts?: pulumi.InvokeOptions): Promise<GetPgResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aiven:index/getPg:getPg", {
        "cloudName": args.cloudName,
        "components": args.components,
        "maintenanceWindowDow": args.maintenanceWindowDow,
        "maintenanceWindowTime": args.maintenanceWindowTime,
        "pg": args.pg,
        "pgUserConfig": args.pgUserConfig,
        "plan": args.plan,
        "project": args.project,
        "projectVpcId": args.projectVpcId,
        "serviceHost": args.serviceHost,
        "serviceIntegrations": args.serviceIntegrations,
        "serviceName": args.serviceName,
        "servicePassword": args.servicePassword,
        "servicePort": args.servicePort,
        "serviceType": args.serviceType,
        "serviceUri": args.serviceUri,
        "serviceUsername": args.serviceUsername,
        "state": args.state,
        "terminationProtection": args.terminationProtection,
    }, opts);
}

/**
 * A collection of arguments for invoking getPg.
 */
export interface GetPgArgs {
    /**
     * defines where the cloud provider and region where the service is hosted
     * in. This can be changed freely after service is created. Changing the value will trigger
     * a potentially lenghty migration process for the service. Format is cloud provider name
     * (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
     * specific region name. These are documented on each Cloud provider's own support articles,
     * like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
     * [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     */
    readonly cloudName?: string;
    readonly components?: inputs.GetPgComponent[];
    /**
     * day of week when maintenance operations should be performed. 
     * One monday, tuesday, wednesday, etc.
     */
    readonly maintenanceWindowDow?: string;
    /**
     * time of day when maintenance operations should be performed. 
     * UTC time in HH:mm:ss format.
     */
    readonly maintenanceWindowTime?: string;
    /**
     * PostgreSQL specific server provided values.
     */
    readonly pg?: inputs.GetPgPg;
    /**
     * defines PostgreSQL specific additional configuration options. The following 
     * configuration options available:
     */
    readonly pgUserConfig?: inputs.GetPgPgUserConfig;
    /**
     * defines what kind of computing resources are allocated for the service. It can
     * be changed after creation, though there are some restrictions when going to a smaller
     * plan such as the new plan must have sufficient amount of disk space to store all current
     * data and switching to a plan with fewer nodes might not be supported. The basic plan
     * names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
     * (roughly) the amount of memory on each node (also other attributes like number of CPUs
     * and amount of disk space varies but naming is based on memory). The exact options can be
     * seen from the Aiven web console's Create Service dialog.
     */
    readonly plan?: string;
    /**
     * identifies the project the service belongs to. To set up proper dependency
     * between the project and the service, refer to the project as shown in the above example.
     * Project cannot be changed later without destroying and re-creating the service.
     */
    readonly project: string;
    /**
     * optionally specifies the VPC the service should run in. If the value
     * is not set the service is not run inside a VPC. When set, the value should be given as a
     * reference as shown above to set up dependencies correctly and the VPC must be in the same
     * cloud and region as the service itself. Project can be freely moved to and from VPC after
     * creation but doing so triggers migration to new servers so the operation can take
     * significant amount of time to complete if the service has a lot of data.
     */
    readonly projectVpcId?: string;
    /**
     * PostgreSQL hostname.
     */
    readonly serviceHost?: string;
    readonly serviceIntegrations?: inputs.GetPgServiceIntegration[];
    /**
     * specifies the actual name of the service. The name cannot be changed
     * later without destroying and re-creating the service so name should be picked based on
     * intended service usage rather than current attributes.
     */
    readonly serviceName: string;
    /**
     * Password used for connecting to the PostgreSQL service, if applicable.
     */
    readonly servicePassword?: string;
    /**
     * PostgreSQL port.
     */
    readonly servicePort?: number;
    readonly serviceType?: string;
    /**
     * URI for connecting to the PostgreSQL service.
     */
    readonly serviceUri?: string;
    /**
     * Username used for connecting to the PostgreSQL service, if applicable.
     */
    readonly serviceUsername?: string;
    /**
     * Service state.
     */
    readonly state?: string;
    /**
     * prevents the service from being deleted. It is recommended to
     * set this to `true` for all production services to prevent unintentional service
     * deletions. This does not shield against deleting databases or topics but for services
     * with backups much of the content can at least be restored from backup in case accidental
     * deletion is done.
     */
    readonly terminationProtection?: boolean;
}

/**
 * A collection of values returned by getPg.
 */
export interface GetPgResult {
    /**
     * defines where the cloud provider and region where the service is hosted
     * in. This can be changed freely after service is created. Changing the value will trigger
     * a potentially lenghty migration process for the service. Format is cloud provider name
     * (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
     * specific region name. These are documented on each Cloud provider's own support articles,
     * like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
     * [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     */
    readonly cloudName?: string;
    readonly components: outputs.GetPgComponent[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * day of week when maintenance operations should be performed. 
     * One monday, tuesday, wednesday, etc.
     */
    readonly maintenanceWindowDow?: string;
    /**
     * time of day when maintenance operations should be performed. 
     * UTC time in HH:mm:ss format.
     */
    readonly maintenanceWindowTime?: string;
    /**
     * PostgreSQL specific server provided values.
     */
    readonly pg: outputs.GetPgPg;
    /**
     * defines PostgreSQL specific additional configuration options. The following 
     * configuration options available:
     */
    readonly pgUserConfig?: outputs.GetPgPgUserConfig;
    /**
     * defines what kind of computing resources are allocated for the service. It can
     * be changed after creation, though there are some restrictions when going to a smaller
     * plan such as the new plan must have sufficient amount of disk space to store all current
     * data and switching to a plan with fewer nodes might not be supported. The basic plan
     * names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
     * (roughly) the amount of memory on each node (also other attributes like number of CPUs
     * and amount of disk space varies but naming is based on memory). The exact options can be
     * seen from the Aiven web console's Create Service dialog.
     */
    readonly plan?: string;
    readonly project: string;
    /**
     * optionally specifies the VPC the service should run in. If the value
     * is not set the service is not run inside a VPC. When set, the value should be given as a
     * reference as shown above to set up dependencies correctly and the VPC must be in the same
     * cloud and region as the service itself. Project can be freely moved to and from VPC after
     * creation but doing so triggers migration to new servers so the operation can take
     * significant amount of time to complete if the service has a lot of data.
     */
    readonly projectVpcId?: string;
    /**
     * PostgreSQL hostname.
     */
    readonly serviceHost: string;
    readonly serviceIntegrations?: outputs.GetPgServiceIntegration[];
    readonly serviceName: string;
    /**
     * Password used for connecting to the PostgreSQL service, if applicable.
     */
    readonly servicePassword: string;
    /**
     * PostgreSQL port.
     */
    readonly servicePort: number;
    readonly serviceType: string;
    /**
     * URI for connecting to the PostgreSQL service.
     */
    readonly serviceUri: string;
    /**
     * Username used for connecting to the PostgreSQL service, if applicable.
     */
    readonly serviceUsername: string;
    /**
     * Service state.
     */
    readonly state: string;
    /**
     * prevents the service from being deleted. It is recommended to
     * set this to `true` for all production services to prevent unintentional service
     * deletions. This does not shield against deleting databases or topics but for services
     * with backups much of the content can at least be restored from backup in case accidental
     * deletion is done.
     */
    readonly terminationProtection?: boolean;
}
