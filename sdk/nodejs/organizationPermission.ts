// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Grants [roles and permissions](https://aiven.io/docs/platform/concepts/permissions)
 * to a principal for a resource. Permissions can be granted at the organization, organizational unit, and project level.
 * Unit-level permissions aren't shown in the Aiven Console.
 *
 * To assign permissions to multiple users and groups on the same combination of organization ID, resource ID and resource type, don't use multiple `aiven.OrganizationPermission` resources.
 * Instead, use multiple permission blocks as in the example usage.
 *
 * **Do not use the `aiven.ProjectUser` or `aiven.OrganizationGroupProject` resources with this resource**.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * // Grant access to a specific project
 * const exampleProjectPermissions = new aiven.OrganizationPermission("example_project_permissions", {
 *     organizationId: main.id,
 *     resourceId: exampleProject.project,
 *     resourceType: "project",
 *     permissions: [
 *         {
 *             permissions: [
 *                 "operator",
 *                 "service:logs:read",
 *             ],
 *             principalId: "u123a456b7890c",
 *             principalType: "user",
 *         },
 *         {
 *             permissions: [
 *                 "project:integrations:write",
 *                 "developer",
 *             ],
 *             principalId: exampleGroup.groupId,
 *             principalType: "user_group",
 *         },
 *     ],
 * });
 * // Organization-level permissions
 * const exampleOrgPermissions = new aiven.OrganizationPermission("example_org_permissions", {
 *     organizationId: main.id,
 *     resourceId: main.id,
 *     resourceType: "organization",
 *     permissions: [
 *         {
 *             permissions: [
 *                 "organization:app_users:write",
 *                 "project:audit_logs:read",
 *             ],
 *             principalId: "u123a456b7890c",
 *             principalType: "user",
 *         },
 *         {
 *             permissions: [
 *                 "organization:users:write",
 *                 "organization:groups:write",
 *                 "organization:domains:write",
 *                 "organization:idps:write",
 *             ],
 *             principalId: exampleGroupAivenOrganizationUserGroup.groupId,
 *             principalType: "user_group",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/organizationPermission:OrganizationPermission operator ORGANIZATION_ID/ID
 * ```
 */
export class OrganizationPermission extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationPermissionState, opts?: pulumi.CustomResourceOptions): OrganizationPermission {
        return new OrganizationPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/organizationPermission:OrganizationPermission';

    /**
     * Returns true if the given object is an instance of OrganizationPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationPermission.__pulumiType;
    }

    /**
     * Organization ID.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * Permissions to grant to principals.
     */
    public readonly permissions!: pulumi.Output<outputs.OrganizationPermissionPermission[]>;
    /**
     * Resource ID.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * Resource type. The possible values are `organization`, `organizationUnit` and `project`.
     */
    public readonly resourceType!: pulumi.Output<string>;

    /**
     * Create a OrganizationPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationPermissionArgs | OrganizationPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationPermissionState | undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
        } else {
            const args = argsOrState as OrganizationPermissionArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationPermission resources.
 */
export interface OrganizationPermissionState {
    /**
     * Organization ID.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Permissions to grant to principals.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.OrganizationPermissionPermission>[]>;
    /**
     * Resource ID.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Resource type. The possible values are `organization`, `organizationUnit` and `project`.
     */
    resourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrganizationPermission resource.
 */
export interface OrganizationPermissionArgs {
    /**
     * Organization ID.
     */
    organizationId: pulumi.Input<string>;
    /**
     * Permissions to grant to principals.
     */
    permissions: pulumi.Input<pulumi.Input<inputs.OrganizationPermissionPermission>[]>;
    /**
     * Resource ID.
     */
    resourceId: pulumi.Input<string>;
    /**
     * Resource type. The possible values are `organization`, `organizationUnit` and `project`.
     */
    resourceType: pulumi.Input<string>;
}
