// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages an [Aiven for Valkeyâ„¢](https://aiven.io/docs/products/valkey) service user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * // Example user with read-only access for analytics
 * const readAnalytics = new aiven.ValkeyUser("read_analytics", {
 *     project: exampleProject.project,
 *     serviceName: exampleValkey.serviceName,
 *     username: "example-analytics-reader",
 *     password: valkeyUserPw,
 *     valkeyAclCategories: ["+@read"],
 *     valkeyAclCommands: [
 *         "+get",
 *         "+set",
 *         "+mget",
 *         "+hget",
 *         "+zrange",
 *     ],
 *     valkeyAclKeys: ["analytics:*"],
 * });
 * // Example user with restricted write access for session management
 * const manageSessions = new aiven.ValkeyUser("manage_sessions", {
 *     project: exampleProject.project,
 *     serviceName: exampleValkey.serviceName,
 *     username: "example-session-manager",
 *     password: valkeyUserPw,
 *     valkeyAclCategories: [
 *         "+@write",
 *         "+@keyspace",
 *     ],
 *     valkeyAclCommands: [
 *         "+set",
 *         "+del",
 *         "+expire",
 *         "-flushall",
 *         "-flushdb",
 *     ],
 *     valkeyAclKeys: ["session:*"],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/valkeyUser:ValkeyUser example_valkey PROJECT/SERVICE_NAME/USERNAME
 * ```
 */
export class ValkeyUser extends pulumi.CustomResource {
    /**
     * Get an existing ValkeyUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ValkeyUserState, opts?: pulumi.CustomResourceOptions): ValkeyUser {
        return new ValkeyUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/valkeyUser:ValkeyUser';

    /**
     * Returns true if the given object is an instance of ValkeyUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ValkeyUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ValkeyUser.__pulumiType;
    }

    /**
     * The Valkey service user's password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * User account type, such as primary or regular account.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Name of the Valkey service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * Allow or disallow command categories. To allow a category use the prefix `+@` and to disallow use `-@`. See the [Valkey documentation](https://valkey.io/topics/acl/) for details on the ACL feature. The field is required with`valkeyAclCommands` and `valkeyAclKeys`. Changing this property forces recreation of the resource.
     */
    public readonly valkeyAclCategories!: pulumi.Output<string[] | undefined>;
    /**
     * Allows and disallows access to pub/sub channels. Entries are defined as standard glob patterns. Changing this property forces recreation of the resource.
     */
    public readonly valkeyAclChannels!: pulumi.Output<string[] | undefined>;
    /**
     * Defines rules for individual commands. To allow a command use the prefix `+` and to disallow use `-`. The field is required with`valkeyAclCategories` and `valkeyAclKeys`. Changing this property forces recreation of the resource.
     */
    public readonly valkeyAclCommands!: pulumi.Output<string[] | undefined>;
    /**
     * Key access rules. Entries are defined as standard glob patterns. The field is required with`valkeyAclCategories` and `valkeyAclKeys`. Changing this property forces recreation of the resource.
     */
    public readonly valkeyAclKeys!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ValkeyUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ValkeyUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ValkeyUserArgs | ValkeyUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ValkeyUserState | undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["valkeyAclCategories"] = state ? state.valkeyAclCategories : undefined;
            resourceInputs["valkeyAclChannels"] = state ? state.valkeyAclChannels : undefined;
            resourceInputs["valkeyAclCommands"] = state ? state.valkeyAclCommands : undefined;
            resourceInputs["valkeyAclKeys"] = state ? state.valkeyAclKeys : undefined;
        } else {
            const args = argsOrState as ValkeyUserArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["valkeyAclCategories"] = args ? args.valkeyAclCategories : undefined;
            resourceInputs["valkeyAclChannels"] = args ? args.valkeyAclChannels : undefined;
            resourceInputs["valkeyAclCommands"] = args ? args.valkeyAclCommands : undefined;
            resourceInputs["valkeyAclKeys"] = args ? args.valkeyAclKeys : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ValkeyUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ValkeyUser resources.
 */
export interface ValkeyUserState {
    /**
     * The Valkey service user's password.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * User account type, such as primary or regular account.
     */
    type?: pulumi.Input<string>;
    /**
     * Name of the Valkey service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    username?: pulumi.Input<string>;
    /**
     * Allow or disallow command categories. To allow a category use the prefix `+@` and to disallow use `-@`. See the [Valkey documentation](https://valkey.io/topics/acl/) for details on the ACL feature. The field is required with`valkeyAclCommands` and `valkeyAclKeys`. Changing this property forces recreation of the resource.
     */
    valkeyAclCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allows and disallows access to pub/sub channels. Entries are defined as standard glob patterns. Changing this property forces recreation of the resource.
     */
    valkeyAclChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines rules for individual commands. To allow a command use the prefix `+` and to disallow use `-`. The field is required with`valkeyAclCategories` and `valkeyAclKeys`. Changing this property forces recreation of the resource.
     */
    valkeyAclCommands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key access rules. Entries are defined as standard glob patterns. The field is required with`valkeyAclCategories` and `valkeyAclKeys`. Changing this property forces recreation of the resource.
     */
    valkeyAclKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ValkeyUser resource.
 */
export interface ValkeyUserArgs {
    /**
     * The Valkey service user's password.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Name of the Valkey service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    username: pulumi.Input<string>;
    /**
     * Allow or disallow command categories. To allow a category use the prefix `+@` and to disallow use `-@`. See the [Valkey documentation](https://valkey.io/topics/acl/) for details on the ACL feature. The field is required with`valkeyAclCommands` and `valkeyAclKeys`. Changing this property forces recreation of the resource.
     */
    valkeyAclCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allows and disallows access to pub/sub channels. Entries are defined as standard glob patterns. Changing this property forces recreation of the resource.
     */
    valkeyAclChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines rules for individual commands. To allow a command use the prefix `+` and to disallow use `-`. The field is required with`valkeyAclCategories` and `valkeyAclKeys`. Changing this property forces recreation of the resource.
     */
    valkeyAclCommands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key access rules. Entries are defined as standard glob patterns. The field is required with`valkeyAclCategories` and `valkeyAclKeys`. Changing this property forces recreation of the resource.
     */
    valkeyAclKeys?: pulumi.Input<pulumi.Input<string>[]>;
}
