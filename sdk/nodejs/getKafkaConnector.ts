// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Kafka connector Data Source
 *
 * The Kafka connector data source provides information about the existing Aiven Kafka connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const kafka-es-con1 = aiven.getKafkaConnector({
 *     project: aiven_project["kafka-con-project1"].project,
 *     serviceName: aiven_service["kafka-service1"].service_name,
 *     connectorName: "kafka-es-con1",
 * });
 * ```
 *
 * * `project` and `serviceName`- (Required) define the project and service the Kafka Connectors belongs to.
 * They should be defined using reference as shown above to set up dependencies correctly.
 *
 * * `connectorName`- (Required) is the Kafka connector name.
 */
export function getKafkaConnector(args: GetKafkaConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetKafkaConnectorResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aiven:index/getKafkaConnector:getKafkaConnector", {
        "config": args.config,
        "connectorName": args.connectorName,
        "pluginAuthor": args.pluginAuthor,
        "pluginClass": args.pluginClass,
        "pluginDocUrl": args.pluginDocUrl,
        "pluginTitle": args.pluginTitle,
        "pluginType": args.pluginType,
        "pluginVersion": args.pluginVersion,
        "project": args.project,
        "serviceName": args.serviceName,
        "tasks": args.tasks,
    }, opts);
}

/**
 * A collection of arguments for invoking getKafkaConnector.
 */
export interface GetKafkaConnectorArgs {
    config?: {[key: string]: string};
    connectorName: string;
    /**
     * Kafka connector author.
     */
    pluginAuthor?: string;
    /**
     * Kafka connector Java class.
     */
    pluginClass?: string;
    /**
     * Kafka connector documentation URL.
     */
    pluginDocUrl?: string;
    /**
     * Kafka connector title.
     */
    pluginTitle?: string;
    /**
     * Kafka connector type.
     */
    pluginType?: string;
    /**
     * Kafka connector version.
     */
    pluginVersion?: string;
    project: string;
    serviceName: string;
    /**
     * List of tasks of a connector, each element contains `connector` 
     * (Related connector name) and `task` (Task id / number).
     */
    tasks?: inputs.GetKafkaConnectorTask[];
}

/**
 * A collection of values returned by getKafkaConnector.
 */
export interface GetKafkaConnectorResult {
    readonly config?: {[key: string]: string};
    readonly connectorName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Kafka connector author.
     */
    readonly pluginAuthor: string;
    /**
     * Kafka connector Java class.
     */
    readonly pluginClass: string;
    /**
     * Kafka connector documentation URL.
     */
    readonly pluginDocUrl: string;
    /**
     * Kafka connector title.
     */
    readonly pluginTitle: string;
    /**
     * Kafka connector type.
     */
    readonly pluginType: string;
    /**
     * Kafka connector version.
     */
    readonly pluginVersion: string;
    readonly project: string;
    readonly serviceName: string;
    /**
     * List of tasks of a connector, each element contains `connector` 
     * (Related connector name) and `task` (Task id / number).
     */
    readonly tasks: outputs.GetKafkaConnectorTask[];
}

export function getKafkaConnectorOutput(args: GetKafkaConnectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKafkaConnectorResult> {
    return pulumi.output(args).apply(a => getKafkaConnector(a, opts))
}

/**
 * A collection of arguments for invoking getKafkaConnector.
 */
export interface GetKafkaConnectorOutputArgs {
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    connectorName: pulumi.Input<string>;
    /**
     * Kafka connector author.
     */
    pluginAuthor?: pulumi.Input<string>;
    /**
     * Kafka connector Java class.
     */
    pluginClass?: pulumi.Input<string>;
    /**
     * Kafka connector documentation URL.
     */
    pluginDocUrl?: pulumi.Input<string>;
    /**
     * Kafka connector title.
     */
    pluginTitle?: pulumi.Input<string>;
    /**
     * Kafka connector type.
     */
    pluginType?: pulumi.Input<string>;
    /**
     * Kafka connector version.
     */
    pluginVersion?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    /**
     * List of tasks of a connector, each element contains `connector` 
     * (Related connector name) and `task` (Task id / number).
     */
    tasks?: pulumi.Input<pulumi.Input<inputs.GetKafkaConnectorTaskArgs>[]>;
}
