// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class M3Aggregator extends pulumi.CustomResource {
    /**
     * Get an existing M3Aggregator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: M3AggregatorState, opts?: pulumi.CustomResourceOptions): M3Aggregator {
        return new M3Aggregator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/m3Aggregator:M3Aggregator';

    /**
     * Returns true if the given object is an instance of M3Aggregator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is M3Aggregator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === M3Aggregator.__pulumiType;
    }

    /**
     * Add [disk storage](https://aiven.io/docs/platform/howto/add-storage-space) in increments of 30  GiB to scale your service. The maximum value depends on the service type and cloud provider. Removing additional storage causes the service nodes to go through a rolling restart, and there might be a short downtime for services without an autoscaler integration or high availability capabilities. The field can be safely removed when autoscaler is enabled without causing any changes.
     */
    declare public readonly additionalDiskSpace: pulumi.Output<string>;
    /**
     * The cloud provider and region the service is hosted in. The format is `provider-region`, for example: `google-europe-west1`. The [available cloud regions](https://aiven.io/docs/platform/reference/list_of_clouds) can differ per project and service. Changing this value [migrates the service to another cloud provider or region](https://aiven.io/docs/platform/howto/migrate-services-cloud-region). The migration runs in the background and includes a DNS update to redirect traffic to the new region. Most services experience no downtime, but some databases may have a brief interruption during DNS propagation.
     */
    declare public readonly cloudName: pulumi.Output<string | undefined>;
    /**
     * Service component information objects
     */
    declare public /*out*/ readonly components: pulumi.Output<outputs.M3AggregatorComponent[]>;
    /**
     * Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing. Please use `additionalDiskSpace` to specify the space to be added to the default disk space defined by the plan.
     *
     * @deprecated Please use `additionalDiskSpace` to specify the space to be added to the default disk space defined by the plan.
     */
    declare public readonly diskSpace: pulumi.Output<string | undefined>;
    /**
     * The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
     */
    declare public /*out*/ readonly diskSpaceCap: pulumi.Output<string>;
    /**
     * The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
     */
    declare public /*out*/ readonly diskSpaceDefault: pulumi.Output<string>;
    /**
     * The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
     */
    declare public /*out*/ readonly diskSpaceStep: pulumi.Output<string>;
    /**
     * The disk space that the service is currently using. This is the sum of `diskSpace` and `additionalDiskSpace` in human-readable format (for example: `90GiB`).
     */
    declare public /*out*/ readonly diskSpaceUsed: pulumi.Output<string>;
    /**
     * M3 Aggregator server provided values
     */
    declare public readonly m3aggregator: pulumi.Output<outputs.M3AggregatorM3aggregator>;
    /**
     * M3aggregator user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     *
     * @deprecated This property is deprecated.
     */
    declare public readonly m3aggregatorUserConfig: pulumi.Output<outputs.M3AggregatorM3aggregatorUserConfig | undefined>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    declare public readonly maintenanceWindowDow: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the maintenance window is currently enabled for this service.
     */
    declare public /*out*/ readonly maintenanceWindowEnabled: pulumi.Output<boolean>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    declare public readonly maintenanceWindowTime: pulumi.Output<string | undefined>;
    /**
     * Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seen from the [Aiven pricing page](https://aiven.io/pricing).
     */
    declare public readonly plan: pulumi.Output<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Specifies the VPC the service should run in. If the value is not set, the service runs on the Public Internet. When set, the value should be given as a reference to set up dependencies correctly, and the VPC must be in the same cloud and region as the service itself. The service can be freely moved to and from VPC after creation, but doing so triggers migration to new servers, so the operation can take a significant amount of time to complete if the service has a lot of data.
     */
    declare public readonly projectVpcId: pulumi.Output<string | undefined>;
    /**
     * The hostname of the service.
     */
    declare public /*out*/ readonly serviceHost: pulumi.Output<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    declare public readonly serviceIntegrations: pulumi.Output<outputs.M3AggregatorServiceIntegration[]>;
    /**
     * Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
     */
    declare public readonly serviceName: pulumi.Output<string>;
    /**
     * Password used for connecting to the service, if applicable
     */
    declare public /*out*/ readonly servicePassword: pulumi.Output<string>;
    /**
     * The port of the service
     */
    declare public /*out*/ readonly servicePort: pulumi.Output<number>;
    /**
     * Aiven internal service type code
     */
    declare public /*out*/ readonly serviceType: pulumi.Output<string>;
    /**
     * URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
     */
    declare public /*out*/ readonly serviceUri: pulumi.Output<string>;
    /**
     * Username used for connecting to the service, if applicable
     */
    declare public /*out*/ readonly serviceUsername: pulumi.Output<string>;
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
     */
    declare public readonly staticIps: pulumi.Output<string[] | undefined>;
    /**
     * Tags are key-value pairs that allow you to categorize services.
     */
    declare public readonly tags: pulumi.Output<outputs.M3AggregatorTag[] | undefined>;
    /**
     * The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
     */
    declare public readonly techEmails: pulumi.Output<outputs.M3AggregatorTechEmail[] | undefined>;
    /**
     * Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
     */
    declare public readonly terminationProtection: pulumi.Output<boolean | undefined>;

    /**
     * Create a M3Aggregator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: M3AggregatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: M3AggregatorArgs | M3AggregatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as M3AggregatorState | undefined;
            resourceInputs["additionalDiskSpace"] = state?.additionalDiskSpace;
            resourceInputs["cloudName"] = state?.cloudName;
            resourceInputs["components"] = state?.components;
            resourceInputs["diskSpace"] = state?.diskSpace;
            resourceInputs["diskSpaceCap"] = state?.diskSpaceCap;
            resourceInputs["diskSpaceDefault"] = state?.diskSpaceDefault;
            resourceInputs["diskSpaceStep"] = state?.diskSpaceStep;
            resourceInputs["diskSpaceUsed"] = state?.diskSpaceUsed;
            resourceInputs["m3aggregator"] = state?.m3aggregator;
            resourceInputs["m3aggregatorUserConfig"] = state?.m3aggregatorUserConfig;
            resourceInputs["maintenanceWindowDow"] = state?.maintenanceWindowDow;
            resourceInputs["maintenanceWindowEnabled"] = state?.maintenanceWindowEnabled;
            resourceInputs["maintenanceWindowTime"] = state?.maintenanceWindowTime;
            resourceInputs["plan"] = state?.plan;
            resourceInputs["project"] = state?.project;
            resourceInputs["projectVpcId"] = state?.projectVpcId;
            resourceInputs["serviceHost"] = state?.serviceHost;
            resourceInputs["serviceIntegrations"] = state?.serviceIntegrations;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["servicePassword"] = state?.servicePassword;
            resourceInputs["servicePort"] = state?.servicePort;
            resourceInputs["serviceType"] = state?.serviceType;
            resourceInputs["serviceUri"] = state?.serviceUri;
            resourceInputs["serviceUsername"] = state?.serviceUsername;
            resourceInputs["state"] = state?.state;
            resourceInputs["staticIps"] = state?.staticIps;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["techEmails"] = state?.techEmails;
            resourceInputs["terminationProtection"] = state?.terminationProtection;
        } else {
            const args = argsOrState as M3AggregatorArgs | undefined;
            if (args?.plan === undefined && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.serviceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["additionalDiskSpace"] = args?.additionalDiskSpace;
            resourceInputs["cloudName"] = args?.cloudName;
            resourceInputs["diskSpace"] = args?.diskSpace;
            resourceInputs["m3aggregator"] = args?.m3aggregator ? pulumi.secret(args.m3aggregator) : undefined;
            resourceInputs["m3aggregatorUserConfig"] = args?.m3aggregatorUserConfig;
            resourceInputs["maintenanceWindowDow"] = args?.maintenanceWindowDow;
            resourceInputs["maintenanceWindowTime"] = args?.maintenanceWindowTime;
            resourceInputs["plan"] = args?.plan;
            resourceInputs["project"] = args?.project;
            resourceInputs["projectVpcId"] = args?.projectVpcId;
            resourceInputs["serviceIntegrations"] = args?.serviceIntegrations;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["staticIps"] = args?.staticIps;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["techEmails"] = args?.techEmails;
            resourceInputs["terminationProtection"] = args?.terminationProtection;
            resourceInputs["components"] = undefined /*out*/;
            resourceInputs["diskSpaceCap"] = undefined /*out*/;
            resourceInputs["diskSpaceDefault"] = undefined /*out*/;
            resourceInputs["diskSpaceStep"] = undefined /*out*/;
            resourceInputs["diskSpaceUsed"] = undefined /*out*/;
            resourceInputs["maintenanceWindowEnabled"] = undefined /*out*/;
            resourceInputs["serviceHost"] = undefined /*out*/;
            resourceInputs["servicePassword"] = undefined /*out*/;
            resourceInputs["servicePort"] = undefined /*out*/;
            resourceInputs["serviceType"] = undefined /*out*/;
            resourceInputs["serviceUri"] = undefined /*out*/;
            resourceInputs["serviceUsername"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["m3aggregator", "servicePassword", "serviceUri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(M3Aggregator.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering M3Aggregator resources.
 */
export interface M3AggregatorState {
    /**
     * Add [disk storage](https://aiven.io/docs/platform/howto/add-storage-space) in increments of 30  GiB to scale your service. The maximum value depends on the service type and cloud provider. Removing additional storage causes the service nodes to go through a rolling restart, and there might be a short downtime for services without an autoscaler integration or high availability capabilities. The field can be safely removed when autoscaler is enabled without causing any changes.
     */
    additionalDiskSpace?: pulumi.Input<string>;
    /**
     * The cloud provider and region the service is hosted in. The format is `provider-region`, for example: `google-europe-west1`. The [available cloud regions](https://aiven.io/docs/platform/reference/list_of_clouds) can differ per project and service. Changing this value [migrates the service to another cloud provider or region](https://aiven.io/docs/platform/howto/migrate-services-cloud-region). The migration runs in the background and includes a DNS update to redirect traffic to the new region. Most services experience no downtime, but some databases may have a brief interruption during DNS propagation.
     */
    cloudName?: pulumi.Input<string>;
    /**
     * Service component information objects
     */
    components?: pulumi.Input<pulumi.Input<inputs.M3AggregatorComponent>[]>;
    /**
     * Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing. Please use `additionalDiskSpace` to specify the space to be added to the default disk space defined by the plan.
     *
     * @deprecated Please use `additionalDiskSpace` to specify the space to be added to the default disk space defined by the plan.
     */
    diskSpace?: pulumi.Input<string>;
    /**
     * The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
     */
    diskSpaceCap?: pulumi.Input<string>;
    /**
     * The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
     */
    diskSpaceDefault?: pulumi.Input<string>;
    /**
     * The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
     */
    diskSpaceStep?: pulumi.Input<string>;
    /**
     * The disk space that the service is currently using. This is the sum of `diskSpace` and `additionalDiskSpace` in human-readable format (for example: `90GiB`).
     */
    diskSpaceUsed?: pulumi.Input<string>;
    /**
     * M3 Aggregator server provided values
     */
    m3aggregator?: pulumi.Input<inputs.M3AggregatorM3aggregator>;
    /**
     * M3aggregator user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     *
     * @deprecated This property is deprecated.
     */
    m3aggregatorUserConfig?: pulumi.Input<inputs.M3AggregatorM3aggregatorUserConfig>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * Indicates whether the maintenance window is currently enabled for this service.
     */
    maintenanceWindowEnabled?: pulumi.Input<boolean>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seen from the [Aiven pricing page](https://aiven.io/pricing).
     */
    plan?: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * Specifies the VPC the service should run in. If the value is not set, the service runs on the Public Internet. When set, the value should be given as a reference to set up dependencies correctly, and the VPC must be in the same cloud and region as the service itself. The service can be freely moved to and from VPC after creation, but doing so triggers migration to new servers, so the operation can take a significant amount of time to complete if the service has a lot of data.
     */
    projectVpcId?: pulumi.Input<string>;
    /**
     * The hostname of the service.
     */
    serviceHost?: pulumi.Input<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.M3AggregatorServiceIntegration>[]>;
    /**
     * Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Password used for connecting to the service, if applicable
     */
    servicePassword?: pulumi.Input<string>;
    /**
     * The port of the service
     */
    servicePort?: pulumi.Input<number>;
    /**
     * Aiven internal service type code
     */
    serviceType?: pulumi.Input<string>;
    /**
     * URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
     */
    serviceUri?: pulumi.Input<string>;
    /**
     * Username used for connecting to the service, if applicable
     */
    serviceUsername?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    /**
     * Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
     */
    staticIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags are key-value pairs that allow you to categorize services.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.M3AggregatorTag>[]>;
    /**
     * The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
     */
    techEmails?: pulumi.Input<pulumi.Input<inputs.M3AggregatorTechEmail>[]>;
    /**
     * Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
     */
    terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a M3Aggregator resource.
 */
export interface M3AggregatorArgs {
    /**
     * Add [disk storage](https://aiven.io/docs/platform/howto/add-storage-space) in increments of 30  GiB to scale your service. The maximum value depends on the service type and cloud provider. Removing additional storage causes the service nodes to go through a rolling restart, and there might be a short downtime for services without an autoscaler integration or high availability capabilities. The field can be safely removed when autoscaler is enabled without causing any changes.
     */
    additionalDiskSpace?: pulumi.Input<string>;
    /**
     * The cloud provider and region the service is hosted in. The format is `provider-region`, for example: `google-europe-west1`. The [available cloud regions](https://aiven.io/docs/platform/reference/list_of_clouds) can differ per project and service. Changing this value [migrates the service to another cloud provider or region](https://aiven.io/docs/platform/howto/migrate-services-cloud-region). The migration runs in the background and includes a DNS update to redirect traffic to the new region. Most services experience no downtime, but some databases may have a brief interruption during DNS propagation.
     */
    cloudName?: pulumi.Input<string>;
    /**
     * Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing. Please use `additionalDiskSpace` to specify the space to be added to the default disk space defined by the plan.
     *
     * @deprecated Please use `additionalDiskSpace` to specify the space to be added to the default disk space defined by the plan.
     */
    diskSpace?: pulumi.Input<string>;
    /**
     * M3 Aggregator server provided values
     */
    m3aggregator?: pulumi.Input<inputs.M3AggregatorM3aggregator>;
    /**
     * M3aggregator user configurable settings. **Warning:** There's no way to reset advanced configuration options to default. Options that you add cannot be removed later
     *
     * @deprecated This property is deprecated.
     */
    m3aggregatorUserConfig?: pulumi.Input<inputs.M3AggregatorM3aggregatorUserConfig>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seen from the [Aiven pricing page](https://aiven.io/pricing).
     */
    plan: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * Specifies the VPC the service should run in. If the value is not set, the service runs on the Public Internet. When set, the value should be given as a reference to set up dependencies correctly, and the VPC must be in the same cloud and region as the service itself. The service can be freely moved to and from VPC after creation, but doing so triggers migration to new servers, so the operation can take a significant amount of time to complete if the service has a lot of data.
     */
    projectVpcId?: pulumi.Input<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.M3AggregatorServiceIntegration>[]>;
    /**
     * Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
     */
    staticIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags are key-value pairs that allow you to categorize services.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.M3AggregatorTag>[]>;
    /**
     * The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
     */
    techEmails?: pulumi.Input<pulumi.Input<inputs.M3AggregatorTechEmail>[]>;
    /**
     * Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
