// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/** @deprecated aiven.getCassanda has been deprecated in favor of aiven.getCassandra */
export function getCassanda(args: GetCassandaArgs, opts?: pulumi.InvokeOptions): Promise<GetCassandaResult> {
    pulumi.log.warn("getCassanda is deprecated: aiven.getCassanda has been deprecated in favor of aiven.getCassandra")
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aiven:index/getCassanda:getCassanda", {
        "cassandra": args.cassandra,
        "cassandraUserConfig": args.cassandraUserConfig,
        "cloudName": args.cloudName,
        "components": args.components,
        "maintenanceWindowDow": args.maintenanceWindowDow,
        "maintenanceWindowTime": args.maintenanceWindowTime,
        "plan": args.plan,
        "project": args.project,
        "projectVpcId": args.projectVpcId,
        "serviceHost": args.serviceHost,
        "serviceIntegrations": args.serviceIntegrations,
        "serviceName": args.serviceName,
        "servicePassword": args.servicePassword,
        "servicePort": args.servicePort,
        "serviceType": args.serviceType,
        "serviceUri": args.serviceUri,
        "serviceUsername": args.serviceUsername,
        "state": args.state,
        "terminationProtection": args.terminationProtection,
    }, opts);
}

/**
 * A collection of arguments for invoking getCassanda.
 */
export interface GetCassandaArgs {
    cassandra?: inputs.GetCassandaCassandra;
    cassandraUserConfig?: inputs.GetCassandaCassandraUserConfig;
    cloudName?: string;
    components?: inputs.GetCassandaComponent[];
    maintenanceWindowDow?: string;
    maintenanceWindowTime?: string;
    plan?: string;
    project: string;
    projectVpcId?: string;
    serviceHost?: string;
    serviceIntegrations?: inputs.GetCassandaServiceIntegration[];
    serviceName: string;
    servicePassword?: string;
    servicePort?: number;
    serviceType?: string;
    serviceUri?: string;
    serviceUsername?: string;
    state?: string;
    terminationProtection?: boolean;
}

/**
 * A collection of values returned by getCassanda.
 */
export interface GetCassandaResult {
    readonly cassandra: outputs.GetCassandaCassandra;
    readonly cassandraUserConfig?: outputs.GetCassandaCassandraUserConfig;
    readonly cloudName?: string;
    readonly components: outputs.GetCassandaComponent[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly maintenanceWindowDow?: string;
    readonly maintenanceWindowTime?: string;
    readonly plan?: string;
    readonly project: string;
    readonly projectVpcId?: string;
    readonly serviceHost: string;
    readonly serviceIntegrations?: outputs.GetCassandaServiceIntegration[];
    readonly serviceName: string;
    readonly servicePassword: string;
    readonly servicePort: number;
    readonly serviceType: string;
    readonly serviceUri: string;
    readonly serviceUsername: string;
    readonly state: string;
    readonly terminationProtection?: boolean;
}

export function getCassandaOutput(args: GetCassandaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCassandaResult> {
    return pulumi.output(args).apply(a => getCassanda(a, opts))
}

/**
 * A collection of arguments for invoking getCassanda.
 */
export interface GetCassandaOutputArgs {
    cassandra?: pulumi.Input<inputs.GetCassandaCassandraArgs>;
    cassandraUserConfig?: pulumi.Input<inputs.GetCassandaCassandraUserConfigArgs>;
    cloudName?: pulumi.Input<string>;
    components?: pulumi.Input<pulumi.Input<inputs.GetCassandaComponentArgs>[]>;
    maintenanceWindowDow?: pulumi.Input<string>;
    maintenanceWindowTime?: pulumi.Input<string>;
    plan?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    projectVpcId?: pulumi.Input<string>;
    serviceHost?: pulumi.Input<string>;
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.GetCassandaServiceIntegrationArgs>[]>;
    serviceName: pulumi.Input<string>;
    servicePassword?: pulumi.Input<string>;
    servicePort?: pulumi.Input<number>;
    serviceType?: pulumi.Input<string>;
    serviceUri?: pulumi.Input<string>;
    serviceUsername?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    terminationProtection?: pulumi.Input<boolean>;
}
