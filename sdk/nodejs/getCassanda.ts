// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/** @deprecated aiven.getCassanda has been deprecated in favor of aiven.getCassandra */
export function getCassanda(args: GetCassandaArgs, opts?: pulumi.InvokeOptions): Promise<GetCassandaResult> {
    pulumi.log.warn("getCassanda is deprecated: aiven.getCassanda has been deprecated in favor of aiven.getCassandra")
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aiven:index/getCassanda:getCassanda", {
        "project": args.project,
        "serviceName": args.serviceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getCassanda.
 */
export interface GetCassandaArgs {
    project: string;
    serviceName: string;
}

/**
 * A collection of values returned by getCassanda.
 */
export interface GetCassandaResult {
    readonly cassandraUserConfigs: outputs.GetCassandaCassandraUserConfig[];
    readonly cassandras: outputs.GetCassandaCassandra[];
    readonly cloudName: string;
    readonly components: outputs.GetCassandaComponent[];
    readonly diskSpace: string;
    readonly diskSpaceCap: string;
    readonly diskSpaceDefault: string;
    readonly diskSpaceStep: string;
    readonly diskSpaceUsed: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly maintenanceWindowDow: string;
    readonly maintenanceWindowTime: string;
    readonly plan: string;
    readonly project: string;
    readonly projectVpcId: string;
    readonly serviceHost: string;
    readonly serviceIntegrations: outputs.GetCassandaServiceIntegration[];
    readonly serviceName: string;
    readonly servicePassword: string;
    readonly servicePort: number;
    readonly serviceType: string;
    readonly serviceUri: string;
    readonly serviceUsername: string;
    readonly state: string;
    readonly staticIps: string[];
    readonly terminationProtection: boolean;
}

export function getCassandaOutput(args: GetCassandaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCassandaResult> {
    return pulumi.output(args).apply(a => getCassanda(a, opts))
}

/**
 * A collection of arguments for invoking getCassanda.
 */
export interface GetCassandaOutputArgs {
    project: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
}
