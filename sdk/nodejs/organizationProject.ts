// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages an [Aiven project](https://aiven.io/docs/platform/concepts/orgs-units-projects#projects).
 *
 * **This resource is in the beta stage and may change without notice.** Set
 * the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const foo = new aiven.OrganizationProject("foo", {
 *     projectId: "example-project",
 *     organizationId: fooAivenOrganization.id,
 *     billingGroupId: fooAivenBillingGroup.id,
 *     tags: [{
 *         key: "key_1",
 *         value: "value_1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/organizationProject:OrganizationProject main ORGANIZATION_ID/PROJECT_ID
 * ```
 */
export class OrganizationProject extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationProjectState, opts?: pulumi.CustomResourceOptions): OrganizationProject {
        return new OrganizationProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/organizationProject:OrganizationProject';

    /**
     * Returns true if the given object is an instance of OrganizationProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationProject.__pulumiType;
    }

    /**
     * Billing group ID to assign to the project.
     */
    public readonly billingGroupId!: pulumi.Output<string>;
    /**
     * The CA certificate for the project. This is required for configuring clients that connect to certain services like Kafka.
     */
    public /*out*/ readonly caCert!: pulumi.Output<string>;
    /**
     * ID of an organization. Changing this property forces recreation of the resource.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
     */
    public readonly parentId!: pulumi.Output<string>;
    /**
     * Unique identifier for the project that also serves as the project name.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Tags are key-value pairs that allow you to categorize projects.
     */
    public readonly tags!: pulumi.Output<outputs.OrganizationProjectTag[] | undefined>;
    /**
     * The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
     */
    public readonly technicalEmails!: pulumi.Output<string[] | undefined>;

    /**
     * Create a OrganizationProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationProjectArgs | OrganizationProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationProjectState | undefined;
            resourceInputs["billingGroupId"] = state ? state.billingGroupId : undefined;
            resourceInputs["caCert"] = state ? state.caCert : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["technicalEmails"] = state ? state.technicalEmails : undefined;
        } else {
            const args = argsOrState as OrganizationProjectArgs | undefined;
            if ((!args || args.billingGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'billingGroupId'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.parentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["billingGroupId"] = args ? args.billingGroupId : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["technicalEmails"] = args ? args.technicalEmails : undefined;
            resourceInputs["caCert"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCert"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OrganizationProject.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationProject resources.
 */
export interface OrganizationProjectState {
    /**
     * Billing group ID to assign to the project.
     */
    billingGroupId?: pulumi.Input<string>;
    /**
     * The CA certificate for the project. This is required for configuring clients that connect to certain services like Kafka.
     */
    caCert?: pulumi.Input<string>;
    /**
     * ID of an organization. Changing this property forces recreation of the resource.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
     */
    parentId?: pulumi.Input<string>;
    /**
     * Unique identifier for the project that also serves as the project name.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags are key-value pairs that allow you to categorize projects.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.OrganizationProjectTag>[]>;
    /**
     * The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
     */
    technicalEmails?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OrganizationProject resource.
 */
export interface OrganizationProjectArgs {
    /**
     * Billing group ID to assign to the project.
     */
    billingGroupId: pulumi.Input<string>;
    /**
     * ID of an organization. Changing this property forces recreation of the resource.
     */
    organizationId: pulumi.Input<string>;
    /**
     * Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
     */
    parentId: pulumi.Input<string>;
    /**
     * Unique identifier for the project that also serves as the project name.
     */
    projectId: pulumi.Input<string>;
    /**
     * Tags are key-value pairs that allow you to categorize projects.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.OrganizationProjectTag>[]>;
    /**
     * The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
     */
    technicalEmails?: pulumi.Input<pulumi.Input<string>[]>;
}
