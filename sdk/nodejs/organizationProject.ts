// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages an [Aiven project](https://aiven.io/docs/platform/concepts/orgs-units-projects#projects).
 *
 * **This resource is in the beta stage and may change without notice.** Set
 * the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/organizationProject:OrganizationProject example_project ORGANIZATION_ID/PROJECT_ID
 * ```
 */
export class OrganizationProject extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationProjectState, opts?: pulumi.CustomResourceOptions): OrganizationProject {
        return new OrganizationProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/organizationProject:OrganizationProject';

    /**
     * Returns true if the given object is an instance of OrganizationProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationProject.__pulumiType;
    }

    /**
     * Valid port number (1-65535) to use as a base for service port allocation.
     */
    declare public readonly basePort: pulumi.Output<number>;
    /**
     * Billing group ID to assign to the project. It's required when moving projects between organizations.
     */
    declare public readonly billingGroupId: pulumi.Output<string>;
    /**
     * PEM encoded certificate.
     */
    declare public /*out*/ readonly caCert: pulumi.Output<string>;
    /**
     * ID of an organization. Maximum length: `36`.
     */
    declare public readonly organizationId: pulumi.Output<string>;
    /**
     * Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
     */
    declare public readonly parentId: pulumi.Output<string>;
    /**
     * The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Tags are key-value pairs that allow you to categorize projects.
     */
    declare public readonly tags: pulumi.Output<outputs.OrganizationProjectTag[] | undefined>;
    /**
     * The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
     */
    declare public readonly technicalEmails: pulumi.Output<string[] | undefined>;
    declare public readonly timeouts: pulumi.Output<outputs.OrganizationProjectTimeouts | undefined>;

    /**
     * Create a OrganizationProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationProjectArgs | OrganizationProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationProjectState | undefined;
            resourceInputs["basePort"] = state?.basePort;
            resourceInputs["billingGroupId"] = state?.billingGroupId;
            resourceInputs["caCert"] = state?.caCert;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["parentId"] = state?.parentId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["technicalEmails"] = state?.technicalEmails;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as OrganizationProjectArgs | undefined;
            if (args?.billingGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'billingGroupId'");
            }
            if (args?.organizationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if (args?.parentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["basePort"] = args?.basePort;
            resourceInputs["billingGroupId"] = args?.billingGroupId;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["parentId"] = args?.parentId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["technicalEmails"] = args?.technicalEmails;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["caCert"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCert"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OrganizationProject.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationProject resources.
 */
export interface OrganizationProjectState {
    /**
     * Valid port number (1-65535) to use as a base for service port allocation.
     */
    basePort?: pulumi.Input<number>;
    /**
     * Billing group ID to assign to the project. It's required when moving projects between organizations.
     */
    billingGroupId?: pulumi.Input<string>;
    /**
     * PEM encoded certificate.
     */
    caCert?: pulumi.Input<string>;
    /**
     * ID of an organization. Maximum length: `36`.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
     */
    parentId?: pulumi.Input<string>;
    /**
     * The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags are key-value pairs that allow you to categorize projects.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.OrganizationProjectTag>[]>;
    /**
     * The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
     */
    technicalEmails?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.OrganizationProjectTimeouts>;
}

/**
 * The set of arguments for constructing a OrganizationProject resource.
 */
export interface OrganizationProjectArgs {
    /**
     * Valid port number (1-65535) to use as a base for service port allocation.
     */
    basePort?: pulumi.Input<number>;
    /**
     * Billing group ID to assign to the project. It's required when moving projects between organizations.
     */
    billingGroupId: pulumi.Input<string>;
    /**
     * ID of an organization. Maximum length: `36`.
     */
    organizationId: pulumi.Input<string>;
    /**
     * Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
     */
    parentId: pulumi.Input<string>;
    /**
     * The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
     */
    projectId: pulumi.Input<string>;
    /**
     * Tags are key-value pairs that allow you to categorize projects.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.OrganizationProjectTag>[]>;
    /**
     * The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
     */
    technicalEmails?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.OrganizationProjectTimeouts>;
}
