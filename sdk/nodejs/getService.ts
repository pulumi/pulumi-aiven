// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> & GetServiceResult {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    const promise: Promise<GetServiceResult> = pulumi.runtime.invoke("aiven:index/getService:getService", {
        "cassandra": args.cassandra,
        "cassandraUserConfig": args.cassandraUserConfig,
        "cloudName": args.cloudName,
        "elasticsearch": args.elasticsearch,
        "elasticsearchUserConfig": args.elasticsearchUserConfig,
        "grafana": args.grafana,
        "grafanaUserConfig": args.grafanaUserConfig,
        "influxdb": args.influxdb,
        "influxdbUserConfig": args.influxdbUserConfig,
        "kafka": args.kafka,
        "kafkaConnect": args.kafkaConnect,
        "kafkaConnectUserConfig": args.kafkaConnectUserConfig,
        "kafkaUserConfig": args.kafkaUserConfig,
        "maintenanceWindowDow": args.maintenanceWindowDow,
        "maintenanceWindowTime": args.maintenanceWindowTime,
        "mysql": args.mysql,
        "mysqlUserConfig": args.mysqlUserConfig,
        "pg": args.pg,
        "pgUserConfig": args.pgUserConfig,
        "plan": args.plan,
        "project": args.project,
        "projectVpcId": args.projectVpcId,
        "redis": args.redis,
        "redisUserConfig": args.redisUserConfig,
        "serviceHost": args.serviceHost,
        "serviceIntegrations": args.serviceIntegrations,
        "serviceName": args.serviceName,
        "servicePassword": args.servicePassword,
        "servicePort": args.servicePort,
        "serviceType": args.serviceType,
        "serviceUri": args.serviceUri,
        "serviceUsername": args.serviceUsername,
        "state": args.state,
        "terminationProtection": args.terminationProtection,
    }, opts);

    return pulumi.utils.liftProperties(promise, opts);
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceArgs {
    readonly cassandra?: inputs.GetServiceCassandra;
    readonly cassandraUserConfig?: inputs.GetServiceCassandraUserConfig;
    readonly cloudName?: string;
    readonly elasticsearch?: inputs.GetServiceElasticsearch;
    readonly elasticsearchUserConfig?: inputs.GetServiceElasticsearchUserConfig;
    readonly grafana?: inputs.GetServiceGrafana;
    readonly grafanaUserConfig?: inputs.GetServiceGrafanaUserConfig;
    readonly influxdb?: inputs.GetServiceInfluxdb;
    readonly influxdbUserConfig?: inputs.GetServiceInfluxdbUserConfig;
    readonly kafka?: inputs.GetServiceKafka;
    readonly kafkaConnect?: inputs.GetServiceKafkaConnect;
    readonly kafkaConnectUserConfig?: inputs.GetServiceKafkaConnectUserConfig;
    readonly kafkaUserConfig?: inputs.GetServiceKafkaUserConfig;
    readonly maintenanceWindowDow?: string;
    readonly maintenanceWindowTime?: string;
    readonly mysql?: inputs.GetServiceMysql;
    readonly mysqlUserConfig?: inputs.GetServiceMysqlUserConfig;
    readonly pg?: inputs.GetServicePg;
    readonly pgUserConfig?: inputs.GetServicePgUserConfig;
    readonly plan?: string;
    readonly project: string;
    readonly projectVpcId?: string;
    readonly redis?: inputs.GetServiceRedis;
    readonly redisUserConfig?: inputs.GetServiceRedisUserConfig;
    readonly serviceHost?: string;
    readonly serviceIntegrations?: inputs.GetServiceServiceIntegration[];
    readonly serviceName: string;
    readonly servicePassword?: string;
    readonly servicePort?: number;
    readonly serviceType?: string;
    readonly serviceUri?: string;
    readonly serviceUsername?: string;
    readonly state?: string;
    readonly terminationProtection?: boolean;
}

/**
 * A collection of values returned by getService.
 */
export interface GetServiceResult {
    readonly cassandra: outputs.GetServiceCassandra;
    readonly cassandraUserConfig?: outputs.GetServiceCassandraUserConfig;
    readonly cloudName?: string;
    readonly elasticsearch: outputs.GetServiceElasticsearch;
    readonly elasticsearchUserConfig?: outputs.GetServiceElasticsearchUserConfig;
    readonly grafana: outputs.GetServiceGrafana;
    readonly grafanaUserConfig?: outputs.GetServiceGrafanaUserConfig;
    readonly influxdb: outputs.GetServiceInfluxdb;
    readonly influxdbUserConfig?: outputs.GetServiceInfluxdbUserConfig;
    readonly kafka: outputs.GetServiceKafka;
    readonly kafkaConnect: outputs.GetServiceKafkaConnect;
    readonly kafkaConnectUserConfig?: outputs.GetServiceKafkaConnectUserConfig;
    readonly kafkaUserConfig?: outputs.GetServiceKafkaUserConfig;
    readonly maintenanceWindowDow?: string;
    readonly maintenanceWindowTime?: string;
    readonly mysql: outputs.GetServiceMysql;
    readonly mysqlUserConfig?: outputs.GetServiceMysqlUserConfig;
    readonly pg: outputs.GetServicePg;
    readonly pgUserConfig?: outputs.GetServicePgUserConfig;
    readonly plan?: string;
    readonly project: string;
    readonly projectVpcId?: string;
    readonly redis: outputs.GetServiceRedis;
    readonly redisUserConfig?: outputs.GetServiceRedisUserConfig;
    readonly serviceHost: string;
    readonly serviceIntegrations?: outputs.GetServiceServiceIntegration[];
    readonly serviceName: string;
    readonly servicePassword: string;
    readonly servicePort: number;
    readonly serviceType?: string;
    readonly serviceUri: string;
    readonly serviceUsername: string;
    readonly state: string;
    readonly terminationProtection?: boolean;
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
