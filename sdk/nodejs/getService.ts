// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aiven:index/getService:getService", {
        "cassandra": args.cassandra,
        "cassandraUserConfig": args.cassandraUserConfig,
        "cloudName": args.cloudName,
        "components": args.components,
        "elasticsearch": args.elasticsearch,
        "elasticsearchUserConfig": args.elasticsearchUserConfig,
        "grafana": args.grafana,
        "grafanaUserConfig": args.grafanaUserConfig,
        "influxdb": args.influxdb,
        "influxdbUserConfig": args.influxdbUserConfig,
        "kafka": args.kafka,
        "kafkaConnect": args.kafkaConnect,
        "kafkaConnectUserConfig": args.kafkaConnectUserConfig,
        "kafkaMirrormaker": args.kafkaMirrormaker,
        "kafkaMirrormakerUserConfig": args.kafkaMirrormakerUserConfig,
        "kafkaUserConfig": args.kafkaUserConfig,
        "maintenanceWindowDow": args.maintenanceWindowDow,
        "maintenanceWindowTime": args.maintenanceWindowTime,
        "mysql": args.mysql,
        "mysqlUserConfig": args.mysqlUserConfig,
        "opensearch": args.opensearch,
        "opensearchUserConfig": args.opensearchUserConfig,
        "pg": args.pg,
        "pgUserConfig": args.pgUserConfig,
        "plan": args.plan,
        "project": args.project,
        "projectVpcId": args.projectVpcId,
        "redis": args.redis,
        "redisUserConfig": args.redisUserConfig,
        "serviceHost": args.serviceHost,
        "serviceIntegrations": args.serviceIntegrations,
        "serviceName": args.serviceName,
        "servicePassword": args.servicePassword,
        "servicePort": args.servicePort,
        "serviceType": args.serviceType,
        "serviceUri": args.serviceUri,
        "serviceUsername": args.serviceUsername,
        "state": args.state,
        "terminationProtection": args.terminationProtection,
    }, opts);
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceArgs {
    cassandra?: inputs.GetServiceCassandra;
    cassandraUserConfig?: inputs.GetServiceCassandraUserConfig;
    cloudName?: string;
    components?: inputs.GetServiceComponent[];
    elasticsearch?: inputs.GetServiceElasticsearch;
    elasticsearchUserConfig?: inputs.GetServiceElasticsearchUserConfig;
    grafana?: inputs.GetServiceGrafana;
    grafanaUserConfig?: inputs.GetServiceGrafanaUserConfig;
    influxdb?: inputs.GetServiceInfluxdb;
    influxdbUserConfig?: inputs.GetServiceInfluxdbUserConfig;
    kafka?: inputs.GetServiceKafka;
    kafkaConnect?: inputs.GetServiceKafkaConnect;
    kafkaConnectUserConfig?: inputs.GetServiceKafkaConnectUserConfig;
    kafkaMirrormaker?: inputs.GetServiceKafkaMirrormaker;
    kafkaMirrormakerUserConfig?: inputs.GetServiceKafkaMirrormakerUserConfig;
    kafkaUserConfig?: inputs.GetServiceKafkaUserConfig;
    maintenanceWindowDow?: string;
    maintenanceWindowTime?: string;
    mysql?: inputs.GetServiceMysql;
    mysqlUserConfig?: inputs.GetServiceMysqlUserConfig;
    opensearch?: inputs.GetServiceOpensearch;
    opensearchUserConfig?: inputs.GetServiceOpensearchUserConfig;
    pg?: inputs.GetServicePg;
    pgUserConfig?: inputs.GetServicePgUserConfig;
    plan?: string;
    project: string;
    projectVpcId?: string;
    redis?: inputs.GetServiceRedis;
    redisUserConfig?: inputs.GetServiceRedisUserConfig;
    serviceHost?: string;
    serviceIntegrations?: inputs.GetServiceServiceIntegration[];
    serviceName: string;
    servicePassword?: string;
    servicePort?: number;
    serviceType?: string;
    serviceUri?: string;
    serviceUsername?: string;
    state?: string;
    terminationProtection?: boolean;
}

/**
 * A collection of values returned by getService.
 */
export interface GetServiceResult {
    readonly cassandra: outputs.GetServiceCassandra;
    readonly cassandraUserConfig?: outputs.GetServiceCassandraUserConfig;
    readonly cloudName?: string;
    readonly components: outputs.GetServiceComponent[];
    readonly elasticsearch: outputs.GetServiceElasticsearch;
    readonly elasticsearchUserConfig?: outputs.GetServiceElasticsearchUserConfig;
    readonly grafana: outputs.GetServiceGrafana;
    readonly grafanaUserConfig?: outputs.GetServiceGrafanaUserConfig;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly influxdb: outputs.GetServiceInfluxdb;
    readonly influxdbUserConfig?: outputs.GetServiceInfluxdbUserConfig;
    readonly kafka: outputs.GetServiceKafka;
    readonly kafkaConnect: outputs.GetServiceKafkaConnect;
    readonly kafkaConnectUserConfig?: outputs.GetServiceKafkaConnectUserConfig;
    readonly kafkaMirrormaker: outputs.GetServiceKafkaMirrormaker;
    readonly kafkaMirrormakerUserConfig?: outputs.GetServiceKafkaMirrormakerUserConfig;
    readonly kafkaUserConfig?: outputs.GetServiceKafkaUserConfig;
    readonly maintenanceWindowDow?: string;
    readonly maintenanceWindowTime?: string;
    readonly mysql: outputs.GetServiceMysql;
    readonly mysqlUserConfig?: outputs.GetServiceMysqlUserConfig;
    readonly opensearch: outputs.GetServiceOpensearch;
    readonly opensearchUserConfig?: outputs.GetServiceOpensearchUserConfig;
    readonly pg: outputs.GetServicePg;
    readonly pgUserConfig?: outputs.GetServicePgUserConfig;
    readonly plan?: string;
    readonly project: string;
    readonly projectVpcId?: string;
    readonly redis: outputs.GetServiceRedis;
    readonly redisUserConfig?: outputs.GetServiceRedisUserConfig;
    readonly serviceHost: string;
    readonly serviceIntegrations?: outputs.GetServiceServiceIntegration[];
    readonly serviceName: string;
    readonly servicePassword: string;
    readonly servicePort: number;
    readonly serviceType?: string;
    readonly serviceUri: string;
    readonly serviceUsername: string;
    readonly state: string;
    readonly terminationProtection?: boolean;
}

export function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceResult> {
    return pulumi.output(args).apply(a => getService(a, opts))
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceOutputArgs {
    cassandra?: pulumi.Input<inputs.GetServiceCassandraArgs>;
    cassandraUserConfig?: pulumi.Input<inputs.GetServiceCassandraUserConfigArgs>;
    cloudName?: pulumi.Input<string>;
    components?: pulumi.Input<pulumi.Input<inputs.GetServiceComponentArgs>[]>;
    elasticsearch?: pulumi.Input<inputs.GetServiceElasticsearchArgs>;
    elasticsearchUserConfig?: pulumi.Input<inputs.GetServiceElasticsearchUserConfigArgs>;
    grafana?: pulumi.Input<inputs.GetServiceGrafanaArgs>;
    grafanaUserConfig?: pulumi.Input<inputs.GetServiceGrafanaUserConfigArgs>;
    influxdb?: pulumi.Input<inputs.GetServiceInfluxdbArgs>;
    influxdbUserConfig?: pulumi.Input<inputs.GetServiceInfluxdbUserConfigArgs>;
    kafka?: pulumi.Input<inputs.GetServiceKafkaArgs>;
    kafkaConnect?: pulumi.Input<inputs.GetServiceKafkaConnectArgs>;
    kafkaConnectUserConfig?: pulumi.Input<inputs.GetServiceKafkaConnectUserConfigArgs>;
    kafkaMirrormaker?: pulumi.Input<inputs.GetServiceKafkaMirrormakerArgs>;
    kafkaMirrormakerUserConfig?: pulumi.Input<inputs.GetServiceKafkaMirrormakerUserConfigArgs>;
    kafkaUserConfig?: pulumi.Input<inputs.GetServiceKafkaUserConfigArgs>;
    maintenanceWindowDow?: pulumi.Input<string>;
    maintenanceWindowTime?: pulumi.Input<string>;
    mysql?: pulumi.Input<inputs.GetServiceMysqlArgs>;
    mysqlUserConfig?: pulumi.Input<inputs.GetServiceMysqlUserConfigArgs>;
    opensearch?: pulumi.Input<inputs.GetServiceOpensearchArgs>;
    opensearchUserConfig?: pulumi.Input<inputs.GetServiceOpensearchUserConfigArgs>;
    pg?: pulumi.Input<inputs.GetServicePgArgs>;
    pgUserConfig?: pulumi.Input<inputs.GetServicePgUserConfigArgs>;
    plan?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    projectVpcId?: pulumi.Input<string>;
    redis?: pulumi.Input<inputs.GetServiceRedisArgs>;
    redisUserConfig?: pulumi.Input<inputs.GetServiceRedisUserConfigArgs>;
    serviceHost?: pulumi.Input<string>;
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.GetServiceServiceIntegrationArgs>[]>;
    serviceName: pulumi.Input<string>;
    servicePassword?: pulumi.Input<string>;
    servicePort?: pulumi.Input<number>;
    serviceType?: pulumi.Input<string>;
    serviceUri?: pulumi.Input<string>;
    serviceUsername?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    terminationProtection?: pulumi.Input<boolean>;
}
