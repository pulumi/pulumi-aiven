// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The Service datasource provides information about specific Aiven Services.
 */
export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aiven:index/getService:getService", {
        "project": args.project,
        "serviceName": args.serviceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceArgs {
    /**
     * Target project
     */
    project: string;
    /**
     * Service name
     */
    serviceName: string;
}

/**
 * A collection of values returned by getService.
 */
export interface GetServiceResult {
    /**
     * Cassandra user configurable settings
     */
    readonly cassandraUserConfigs: outputs.GetServiceCassandraUserConfig[];
    /**
     * Cassandra specific server provided values
     */
    readonly cassandras: outputs.GetServiceCassandra[];
    /**
     * Clickhouse user configurable settings
     */
    readonly clickhouseUserConfigs: outputs.GetServiceClickhouseUserConfig[];
    /**
     * Clickhouse specific server provided values
     */
    readonly clickhouses: outputs.GetServiceClickhouse[];
    /**
     * Cloud the service runs in
     */
    readonly cloudName: string;
    /**
     * Service component information objects
     */
    readonly components: outputs.GetServiceComponent[];
    /**
     * The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
     */
    readonly diskSpace: string;
    /**
     * The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
     */
    readonly diskSpaceCap: string;
    /**
     * The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
     */
    readonly diskSpaceDefault: string;
    /**
     * The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
     */
    readonly diskSpaceStep: string;
    /**
     * Disk space that service is currently using
     */
    readonly diskSpaceUsed: string;
    /**
     * Elasticsearch user configurable settings
     */
    readonly elasticsearchUserConfigs: outputs.GetServiceElasticsearchUserConfig[];
    /**
     * Elasticsearch specific server provided values
     */
    readonly elasticsearches: outputs.GetServiceElasticsearch[];
    /**
     * Flink user configurable settings
     */
    readonly flinkUserConfigs: outputs.GetServiceFlinkUserConfig[];
    /**
     * Flink specific server provided values
     */
    readonly flinks: outputs.GetServiceFlink[];
    /**
     * Grafana user configurable settings
     */
    readonly grafanaUserConfigs: outputs.GetServiceGrafanaUserConfig[];
    /**
     * Grafana specific server provided values
     */
    readonly grafanas: outputs.GetServiceGrafana[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Influxdb user configurable settings
     */
    readonly influxdbUserConfigs: outputs.GetServiceInfluxdbUserConfig[];
    /**
     * InfluxDB specific server provided values
     */
    readonly influxdbs: outputs.GetServiceInfluxdb[];
    /**
     * Kafka*connect user configurable settings
     */
    readonly kafkaConnectUserConfigs: outputs.GetServiceKafkaConnectUserConfig[];
    /**
     * Kafka Connect specific server provided values
     */
    readonly kafkaConnects: outputs.GetServiceKafkaConnect[];
    /**
     * Kafka*mirrormaker user configurable settings
     */
    readonly kafkaMirrormakerUserConfigs: outputs.GetServiceKafkaMirrormakerUserConfig[];
    /**
     * Kafka MirrorMaker 2 specific server provided values
     */
    readonly kafkaMirrormakers: outputs.GetServiceKafkaMirrormaker[];
    /**
     * Kafka user configurable settings
     */
    readonly kafkaUserConfigs: outputs.GetServiceKafkaUserConfig[];
    /**
     * Kafka specific server provided values
     */
    readonly kafkas: outputs.GetServiceKafka[];
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    readonly maintenanceWindowDow: string;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    readonly maintenanceWindowTime: string;
    /**
     * Mysql user configurable settings
     */
    readonly mysqlUserConfigs: outputs.GetServiceMysqlUserConfig[];
    /**
     * MySQL specific server provided values
     */
    readonly mysqls: outputs.GetServiceMysql[];
    /**
     * Opensearch user configurable settings
     */
    readonly opensearchUserConfigs: outputs.GetServiceOpensearchUserConfig[];
    /**
     * Opensearch specific server provided values
     */
    readonly opensearches: outputs.GetServiceOpensearch[];
    /**
     * Pg user configurable settings
     */
    readonly pgUserConfigs: outputs.GetServicePgUserConfig[];
    /**
     * PostgreSQL specific server provided values
     */
    readonly pgs: outputs.GetServicePg[];
    /**
     * Subscription plan
     */
    readonly plan: string;
    /**
     * Target project
     */
    readonly project: string;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    readonly projectVpcId: string;
    /**
     * Redis specific server provided values
     */
    readonly redis: outputs.GetServiceRedi[];
    /**
     * Redis user configurable settings
     */
    readonly redisUserConfigs: outputs.GetServiceRedisUserConfig[];
    /**
     * Service hostname
     */
    readonly serviceHost: string;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    readonly serviceIntegrations: outputs.GetServiceServiceIntegration[];
    /**
     * Service name
     */
    readonly serviceName: string;
    /**
     * Password used for connecting to the service, if applicable
     */
    readonly servicePassword: string;
    /**
     * Service port
     */
    readonly servicePort: number;
    /**
     * Service type code
     */
    readonly serviceType: string;
    /**
     * URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
     */
    readonly serviceUri: string;
    /**
     * Username used for connecting to the service, if applicable
     */
    readonly serviceUsername: string;
    /**
     * Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` and `RUNNING`.
     */
    readonly state: string;
    /**
     * Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
     */
    readonly staticIps: string[];
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    readonly terminationProtection: boolean;
}

export function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceResult> {
    return pulumi.output(args).apply(a => getService(a, opts))
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceOutputArgs {
    /**
     * Target project
     */
    project: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
}
