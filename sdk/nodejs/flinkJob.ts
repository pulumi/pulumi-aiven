// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The Flink Job resource allows the creation and management of Aiven Jobs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const job = new aiven.FlinkJob("job", {
 *     project: aiven_flink.flink.project,
 *     serviceName: aiven_flink.flink.service_name,
 *     jobName: "<JOB_NAME>",
 *     tableIds: [
 *         aiven_flink_table.source.table_id,
 *         aiven_flink_table.sink.table_id,
 *     ],
 *     statement: `        INSERT INTO ${aiven_flink_table.sink.table_name}                                            
 *         SELECT * FROM ${aiven_flink_table.source.table_name}                                        
 *         WHERE `cpu` > 50                                                                            
 * `,
 * });
 * ```
 */
export class FlinkJob extends pulumi.CustomResource {
    /**
     * Get an existing FlinkJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlinkJobState, opts?: pulumi.CustomResourceOptions): FlinkJob {
        return new FlinkJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/flinkJob:FlinkJob';

    /**
     * Returns true if the given object is an instance of FlinkJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlinkJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlinkJob.__pulumiType;
    }

    /**
     * The Job ID of the flink job in the flink service.
     */
    public /*out*/ readonly jobId!: pulumi.Output<string>;
    /**
     * Specifies the name of the service that this job is submitted to. To set up proper dependencies please refer to this
     * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly jobName!: pulumi.Output<string>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
     * reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
     * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * The current state of the flink job in the flink service
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The SQL statement to define the job. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly statement!: pulumi.Output<string>;
    /**
     * A list of table ids that are required in the job runtime. To set up proper dependencies please refer to this variable as
     * a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly tableIds!: pulumi.Output<string[]>;

    /**
     * Create a FlinkJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlinkJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlinkJobArgs | FlinkJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlinkJobState | undefined;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["jobName"] = state ? state.jobName : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["statement"] = state ? state.statement : undefined;
            resourceInputs["tableIds"] = state ? state.tableIds : undefined;
        } else {
            const args = argsOrState as FlinkJobArgs | undefined;
            if ((!args || args.jobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobName'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.statement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statement'");
            }
            if ((!args || args.tableIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableIds'");
            }
            resourceInputs["jobName"] = args ? args.jobName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["statement"] = args ? args.statement : undefined;
            resourceInputs["tableIds"] = args ? args.tableIds : undefined;
            resourceInputs["jobId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlinkJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlinkJob resources.
 */
export interface FlinkJobState {
    /**
     * The Job ID of the flink job in the flink service.
     */
    jobId?: pulumi.Input<string>;
    /**
     * Specifies the name of the service that this job is submitted to. To set up proper dependencies please refer to this
     * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    jobName?: pulumi.Input<string>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
     * reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
     * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The current state of the flink job in the flink service
     */
    state?: pulumi.Input<string>;
    /**
     * The SQL statement to define the job. This property cannot be changed, doing so forces recreation of the resource.
     */
    statement?: pulumi.Input<string>;
    /**
     * A list of table ids that are required in the job runtime. To set up proper dependencies please refer to this variable as
     * a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    tableIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FlinkJob resource.
 */
export interface FlinkJobArgs {
    /**
     * Specifies the name of the service that this job is submitted to. To set up proper dependencies please refer to this
     * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    jobName: pulumi.Input<string>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
     * reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
     * variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The SQL statement to define the job. This property cannot be changed, doing so forces recreation of the resource.
     */
    statement: pulumi.Input<string>;
    /**
     * A list of table ids that are required in the job runtime. To set up proper dependencies please refer to this variable as
     * a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    tableIds: pulumi.Input<pulumi.Input<string>[]>;
}
