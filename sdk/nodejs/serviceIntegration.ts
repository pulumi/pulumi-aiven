// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Service Integration Resource
 *
 * The Service Integration resource allows the creation and management of Aiven Service Integrations.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external
 * integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service,
 * getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to
 * Elasticsearch, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myintegration = new aiven.ServiceIntegration("myintegration", {
 *     project: aiven_project.myproject.project,
 *     destinationEndpointId: aiven_service_integration_endpoint.XX.id,
 *     integrationType: "datadog",
 *     sourceServiceName: aiven_kafka.XXX.service_name,
 * });
 * ```
 *
 * > **Note** For services running on `hobbiest` plan service integrations are not supported.
 */
export class ServiceIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ServiceIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceIntegrationState, opts?: pulumi.CustomResourceOptions): ServiceIntegration {
        return new ServiceIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/serviceIntegration:ServiceIntegration';

    /**
     * Returns true if the given object is an instance of ServiceIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceIntegration.__pulumiType;
    }

    /**
     * Dashboard specific user configurable settings
     */
    public readonly dashboardUserConfig!: pulumi.Output<outputs.ServiceIntegrationDashboardUserConfig | undefined>;
    /**
     * Dashboard specific user configurable settings
     */
    public readonly datadogUserConfig!: pulumi.Output<outputs.ServiceIntegrationDatadogUserConfig | undefined>;
    /**
     * or `destinationServiceName` - (Required) identifies the target side of the integration.
     * Only either endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
     * e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the target needs to be defined using the
     * reference syntax described above to set up the dependency correctly.
     */
    public readonly destinationEndpointId!: pulumi.Output<string | undefined>;
    /**
     * Destination service for the integration (if any)
     */
    public readonly destinationServiceName!: pulumi.Output<string | undefined>;
    /**
     * External AWS Cloudwatch logs specific user configurable settings
     */
    public readonly externalAwsCloudwatchLogsUserConfig!: pulumi.Output<outputs.ServiceIntegrationExternalAwsCloudwatchLogsUserConfig | undefined>;
    /**
     * External Elasticsearch logs specific user configurable settings
     */
    public readonly externalElasticsearchLogsUserConfig!: pulumi.Output<outputs.ServiceIntegrationExternalElasticsearchLogsUserConfig | undefined>;
    /**
     * External Google Cloud Logging specific user configurable settings
     */
    public readonly externalGoogleCloudLoggingUserConfig!: pulumi.Output<outputs.ServiceIntegrationExternalGoogleCloudLoggingUserConfig | undefined>;
    /**
     * identifies the type of integration that is set up. Possible values include `dashboard`
     * , `datadog`, `logs`, `metrics`, `kafkaConnect`, `externalGoogleCloudLogging`, `externalElasticsearchLogs`
     * `externalAwsCloudwatchLogs`, `readReplica`, `rsyslog`, `signalfx`, `kafkaLogs`, `m3aggregator`,
     * `m3coordinator`, `prometheus`, `schemaRegistryProxy` and `kafkaMirrormaker`.
     */
    public readonly integrationType!: pulumi.Output<string>;
    /**
     * Kafka Connect specific user configurable settings
     */
    public readonly kafkaConnectUserConfig!: pulumi.Output<outputs.ServiceIntegrationKafkaConnectUserConfig | undefined>;
    /**
     * Kafka Logs specific user configurable settings
     */
    public readonly kafkaLogsUserConfig!: pulumi.Output<outputs.ServiceIntegrationKafkaLogsUserConfig | undefined>;
    /**
     * Mirrormaker 2 integration specific user configurable settings
     */
    public readonly kafkaMirrormakerUserConfig!: pulumi.Output<outputs.ServiceIntegrationKafkaMirrormakerUserConfig | undefined>;
    /**
     * Log integration specific user configurable settings
     */
    public readonly logsUserConfig!: pulumi.Output<outputs.ServiceIntegrationLogsUserConfig | undefined>;
    /**
     * M3 aggregator specific user configurable settings
     */
    public readonly m3aggregatorUserConfig!: pulumi.Output<outputs.ServiceIntegrationM3aggregatorUserConfig | undefined>;
    /**
     * M3 coordinator specific user configurable settings
     */
    public readonly m3coordinatorUserConfig!: pulumi.Output<outputs.ServiceIntegrationM3coordinatorUserConfig | undefined>;
    /**
     * Metrics specific user configurable settings
     */
    public readonly metricsUserConfig!: pulumi.Output<outputs.ServiceIntegrationMetricsUserConfig | undefined>;
    /**
     * Mirrormaker 1 integration specific user configurable settings
     */
    public readonly mirrormakerUserConfig!: pulumi.Output<outputs.ServiceIntegrationMirrormakerUserConfig | undefined>;
    /**
     * defines the project the integration belongs to.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Prometheus coordinator specific user configurable settings
     */
    public readonly prometheusUserConfig!: pulumi.Output<outputs.ServiceIntegrationPrometheusUserConfig | undefined>;
    /**
     * PG Read replica specific user configurable settings
     */
    public readonly readReplicaUserConfig!: pulumi.Output<outputs.ServiceIntegrationReadReplicaUserConfig | undefined>;
    /**
     * RSyslog specific user configurable settings
     */
    public readonly rsyslogUserConfig!: pulumi.Output<outputs.ServiceIntegrationRsyslogUserConfig | undefined>;
    /**
     * Schema registry proxy specific user configurable settings
     */
    public readonly schemaRegistryProxyUserConfig!: pulumi.Output<outputs.ServiceIntegrationSchemaRegistryProxyUserConfig | undefined>;
    /**
     * Signalfx specific user configurable settings
     */
    public readonly signalfxUserConfig!: pulumi.Output<outputs.ServiceIntegrationSignalfxUserConfig | undefined>;
    /**
     * or `sourceServiceName` - (Optional) identifies the source side of the integration. Only either
     * endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
     * e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the source needs to be defined using the
     * reference syntax described above to set up the dependency correctly.
     */
    public readonly sourceEndpointId!: pulumi.Output<string | undefined>;
    /**
     * Source service for the integration (if any)
     */
    public readonly sourceServiceName!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceIntegrationArgs | ServiceIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServiceIntegrationState | undefined;
            inputs["dashboardUserConfig"] = state ? state.dashboardUserConfig : undefined;
            inputs["datadogUserConfig"] = state ? state.datadogUserConfig : undefined;
            inputs["destinationEndpointId"] = state ? state.destinationEndpointId : undefined;
            inputs["destinationServiceName"] = state ? state.destinationServiceName : undefined;
            inputs["externalAwsCloudwatchLogsUserConfig"] = state ? state.externalAwsCloudwatchLogsUserConfig : undefined;
            inputs["externalElasticsearchLogsUserConfig"] = state ? state.externalElasticsearchLogsUserConfig : undefined;
            inputs["externalGoogleCloudLoggingUserConfig"] = state ? state.externalGoogleCloudLoggingUserConfig : undefined;
            inputs["integrationType"] = state ? state.integrationType : undefined;
            inputs["kafkaConnectUserConfig"] = state ? state.kafkaConnectUserConfig : undefined;
            inputs["kafkaLogsUserConfig"] = state ? state.kafkaLogsUserConfig : undefined;
            inputs["kafkaMirrormakerUserConfig"] = state ? state.kafkaMirrormakerUserConfig : undefined;
            inputs["logsUserConfig"] = state ? state.logsUserConfig : undefined;
            inputs["m3aggregatorUserConfig"] = state ? state.m3aggregatorUserConfig : undefined;
            inputs["m3coordinatorUserConfig"] = state ? state.m3coordinatorUserConfig : undefined;
            inputs["metricsUserConfig"] = state ? state.metricsUserConfig : undefined;
            inputs["mirrormakerUserConfig"] = state ? state.mirrormakerUserConfig : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["prometheusUserConfig"] = state ? state.prometheusUserConfig : undefined;
            inputs["readReplicaUserConfig"] = state ? state.readReplicaUserConfig : undefined;
            inputs["rsyslogUserConfig"] = state ? state.rsyslogUserConfig : undefined;
            inputs["schemaRegistryProxyUserConfig"] = state ? state.schemaRegistryProxyUserConfig : undefined;
            inputs["signalfxUserConfig"] = state ? state.signalfxUserConfig : undefined;
            inputs["sourceEndpointId"] = state ? state.sourceEndpointId : undefined;
            inputs["sourceServiceName"] = state ? state.sourceServiceName : undefined;
        } else {
            const args = argsOrState as ServiceIntegrationArgs | undefined;
            if ((!args || args.integrationType === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'integrationType'");
            }
            if ((!args || args.project === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'project'");
            }
            inputs["dashboardUserConfig"] = args ? args.dashboardUserConfig : undefined;
            inputs["datadogUserConfig"] = args ? args.datadogUserConfig : undefined;
            inputs["destinationEndpointId"] = args ? args.destinationEndpointId : undefined;
            inputs["destinationServiceName"] = args ? args.destinationServiceName : undefined;
            inputs["externalAwsCloudwatchLogsUserConfig"] = args ? args.externalAwsCloudwatchLogsUserConfig : undefined;
            inputs["externalElasticsearchLogsUserConfig"] = args ? args.externalElasticsearchLogsUserConfig : undefined;
            inputs["externalGoogleCloudLoggingUserConfig"] = args ? args.externalGoogleCloudLoggingUserConfig : undefined;
            inputs["integrationType"] = args ? args.integrationType : undefined;
            inputs["kafkaConnectUserConfig"] = args ? args.kafkaConnectUserConfig : undefined;
            inputs["kafkaLogsUserConfig"] = args ? args.kafkaLogsUserConfig : undefined;
            inputs["kafkaMirrormakerUserConfig"] = args ? args.kafkaMirrormakerUserConfig : undefined;
            inputs["logsUserConfig"] = args ? args.logsUserConfig : undefined;
            inputs["m3aggregatorUserConfig"] = args ? args.m3aggregatorUserConfig : undefined;
            inputs["m3coordinatorUserConfig"] = args ? args.m3coordinatorUserConfig : undefined;
            inputs["metricsUserConfig"] = args ? args.metricsUserConfig : undefined;
            inputs["mirrormakerUserConfig"] = args ? args.mirrormakerUserConfig : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["prometheusUserConfig"] = args ? args.prometheusUserConfig : undefined;
            inputs["readReplicaUserConfig"] = args ? args.readReplicaUserConfig : undefined;
            inputs["rsyslogUserConfig"] = args ? args.rsyslogUserConfig : undefined;
            inputs["schemaRegistryProxyUserConfig"] = args ? args.schemaRegistryProxyUserConfig : undefined;
            inputs["signalfxUserConfig"] = args ? args.signalfxUserConfig : undefined;
            inputs["sourceEndpointId"] = args ? args.sourceEndpointId : undefined;
            inputs["sourceServiceName"] = args ? args.sourceServiceName : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ServiceIntegration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceIntegration resources.
 */
export interface ServiceIntegrationState {
    /**
     * Dashboard specific user configurable settings
     */
    readonly dashboardUserConfig?: pulumi.Input<inputs.ServiceIntegrationDashboardUserConfig>;
    /**
     * Dashboard specific user configurable settings
     */
    readonly datadogUserConfig?: pulumi.Input<inputs.ServiceIntegrationDatadogUserConfig>;
    /**
     * or `destinationServiceName` - (Required) identifies the target side of the integration.
     * Only either endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
     * e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the target needs to be defined using the
     * reference syntax described above to set up the dependency correctly.
     */
    readonly destinationEndpointId?: pulumi.Input<string>;
    /**
     * Destination service for the integration (if any)
     */
    readonly destinationServiceName?: pulumi.Input<string>;
    /**
     * External AWS Cloudwatch logs specific user configurable settings
     */
    readonly externalAwsCloudwatchLogsUserConfig?: pulumi.Input<inputs.ServiceIntegrationExternalAwsCloudwatchLogsUserConfig>;
    /**
     * External Elasticsearch logs specific user configurable settings
     */
    readonly externalElasticsearchLogsUserConfig?: pulumi.Input<inputs.ServiceIntegrationExternalElasticsearchLogsUserConfig>;
    /**
     * External Google Cloud Logging specific user configurable settings
     */
    readonly externalGoogleCloudLoggingUserConfig?: pulumi.Input<inputs.ServiceIntegrationExternalGoogleCloudLoggingUserConfig>;
    /**
     * identifies the type of integration that is set up. Possible values include `dashboard`
     * , `datadog`, `logs`, `metrics`, `kafkaConnect`, `externalGoogleCloudLogging`, `externalElasticsearchLogs`
     * `externalAwsCloudwatchLogs`, `readReplica`, `rsyslog`, `signalfx`, `kafkaLogs`, `m3aggregator`,
     * `m3coordinator`, `prometheus`, `schemaRegistryProxy` and `kafkaMirrormaker`.
     */
    readonly integrationType?: pulumi.Input<string>;
    /**
     * Kafka Connect specific user configurable settings
     */
    readonly kafkaConnectUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaConnectUserConfig>;
    /**
     * Kafka Logs specific user configurable settings
     */
    readonly kafkaLogsUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaLogsUserConfig>;
    /**
     * Mirrormaker 2 integration specific user configurable settings
     */
    readonly kafkaMirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaMirrormakerUserConfig>;
    /**
     * Log integration specific user configurable settings
     */
    readonly logsUserConfig?: pulumi.Input<inputs.ServiceIntegrationLogsUserConfig>;
    /**
     * M3 aggregator specific user configurable settings
     */
    readonly m3aggregatorUserConfig?: pulumi.Input<inputs.ServiceIntegrationM3aggregatorUserConfig>;
    /**
     * M3 coordinator specific user configurable settings
     */
    readonly m3coordinatorUserConfig?: pulumi.Input<inputs.ServiceIntegrationM3coordinatorUserConfig>;
    /**
     * Metrics specific user configurable settings
     */
    readonly metricsUserConfig?: pulumi.Input<inputs.ServiceIntegrationMetricsUserConfig>;
    /**
     * Mirrormaker 1 integration specific user configurable settings
     */
    readonly mirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationMirrormakerUserConfig>;
    /**
     * defines the project the integration belongs to.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Prometheus coordinator specific user configurable settings
     */
    readonly prometheusUserConfig?: pulumi.Input<inputs.ServiceIntegrationPrometheusUserConfig>;
    /**
     * PG Read replica specific user configurable settings
     */
    readonly readReplicaUserConfig?: pulumi.Input<inputs.ServiceIntegrationReadReplicaUserConfig>;
    /**
     * RSyslog specific user configurable settings
     */
    readonly rsyslogUserConfig?: pulumi.Input<inputs.ServiceIntegrationRsyslogUserConfig>;
    /**
     * Schema registry proxy specific user configurable settings
     */
    readonly schemaRegistryProxyUserConfig?: pulumi.Input<inputs.ServiceIntegrationSchemaRegistryProxyUserConfig>;
    /**
     * Signalfx specific user configurable settings
     */
    readonly signalfxUserConfig?: pulumi.Input<inputs.ServiceIntegrationSignalfxUserConfig>;
    /**
     * or `sourceServiceName` - (Optional) identifies the source side of the integration. Only either
     * endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
     * e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the source needs to be defined using the
     * reference syntax described above to set up the dependency correctly.
     */
    readonly sourceEndpointId?: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    readonly sourceServiceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceIntegration resource.
 */
export interface ServiceIntegrationArgs {
    /**
     * Dashboard specific user configurable settings
     */
    readonly dashboardUserConfig?: pulumi.Input<inputs.ServiceIntegrationDashboardUserConfig>;
    /**
     * Dashboard specific user configurable settings
     */
    readonly datadogUserConfig?: pulumi.Input<inputs.ServiceIntegrationDatadogUserConfig>;
    /**
     * or `destinationServiceName` - (Required) identifies the target side of the integration.
     * Only either endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
     * e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the target needs to be defined using the
     * reference syntax described above to set up the dependency correctly.
     */
    readonly destinationEndpointId?: pulumi.Input<string>;
    /**
     * Destination service for the integration (if any)
     */
    readonly destinationServiceName?: pulumi.Input<string>;
    /**
     * External AWS Cloudwatch logs specific user configurable settings
     */
    readonly externalAwsCloudwatchLogsUserConfig?: pulumi.Input<inputs.ServiceIntegrationExternalAwsCloudwatchLogsUserConfig>;
    /**
     * External Elasticsearch logs specific user configurable settings
     */
    readonly externalElasticsearchLogsUserConfig?: pulumi.Input<inputs.ServiceIntegrationExternalElasticsearchLogsUserConfig>;
    /**
     * External Google Cloud Logging specific user configurable settings
     */
    readonly externalGoogleCloudLoggingUserConfig?: pulumi.Input<inputs.ServiceIntegrationExternalGoogleCloudLoggingUserConfig>;
    /**
     * identifies the type of integration that is set up. Possible values include `dashboard`
     * , `datadog`, `logs`, `metrics`, `kafkaConnect`, `externalGoogleCloudLogging`, `externalElasticsearchLogs`
     * `externalAwsCloudwatchLogs`, `readReplica`, `rsyslog`, `signalfx`, `kafkaLogs`, `m3aggregator`,
     * `m3coordinator`, `prometheus`, `schemaRegistryProxy` and `kafkaMirrormaker`.
     */
    readonly integrationType: pulumi.Input<string>;
    /**
     * Kafka Connect specific user configurable settings
     */
    readonly kafkaConnectUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaConnectUserConfig>;
    /**
     * Kafka Logs specific user configurable settings
     */
    readonly kafkaLogsUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaLogsUserConfig>;
    /**
     * Mirrormaker 2 integration specific user configurable settings
     */
    readonly kafkaMirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaMirrormakerUserConfig>;
    /**
     * Log integration specific user configurable settings
     */
    readonly logsUserConfig?: pulumi.Input<inputs.ServiceIntegrationLogsUserConfig>;
    /**
     * M3 aggregator specific user configurable settings
     */
    readonly m3aggregatorUserConfig?: pulumi.Input<inputs.ServiceIntegrationM3aggregatorUserConfig>;
    /**
     * M3 coordinator specific user configurable settings
     */
    readonly m3coordinatorUserConfig?: pulumi.Input<inputs.ServiceIntegrationM3coordinatorUserConfig>;
    /**
     * Metrics specific user configurable settings
     */
    readonly metricsUserConfig?: pulumi.Input<inputs.ServiceIntegrationMetricsUserConfig>;
    /**
     * Mirrormaker 1 integration specific user configurable settings
     */
    readonly mirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationMirrormakerUserConfig>;
    /**
     * defines the project the integration belongs to.
     */
    readonly project: pulumi.Input<string>;
    /**
     * Prometheus coordinator specific user configurable settings
     */
    readonly prometheusUserConfig?: pulumi.Input<inputs.ServiceIntegrationPrometheusUserConfig>;
    /**
     * PG Read replica specific user configurable settings
     */
    readonly readReplicaUserConfig?: pulumi.Input<inputs.ServiceIntegrationReadReplicaUserConfig>;
    /**
     * RSyslog specific user configurable settings
     */
    readonly rsyslogUserConfig?: pulumi.Input<inputs.ServiceIntegrationRsyslogUserConfig>;
    /**
     * Schema registry proxy specific user configurable settings
     */
    readonly schemaRegistryProxyUserConfig?: pulumi.Input<inputs.ServiceIntegrationSchemaRegistryProxyUserConfig>;
    /**
     * Signalfx specific user configurable settings
     */
    readonly signalfxUserConfig?: pulumi.Input<inputs.ServiceIntegrationSignalfxUserConfig>;
    /**
     * or `sourceServiceName` - (Optional) identifies the source side of the integration. Only either
     * endpoint identifier (e.g. `aiven_service_integration_endpoint.XXX.id`) or service name (
     * e.g. `aiven_kafka.XXX.service_name`) must be specified. In either case the source needs to be defined using the
     * reference syntax described above to set up the dependency correctly.
     */
    readonly sourceEndpointId?: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    readonly sourceServiceName?: pulumi.Input<string>;
}
