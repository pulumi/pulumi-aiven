// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 * 
 * const myintegration = new aiven.ServiceIntegration("myintegration", {
 *     destinationEndpointId: aiven_service_integration_endpoint_myendpoint.id,
 *     destinationServiceName: "",
 *     integrationType: "datadog",
 *     project: aiven_project_myproject.project,
 *     sourceEndpointId: "",
 *     sourceServiceName: aiven_service_testkafka.serviceName,
 * });
 * ```
 *
 * > This content is derived from https://github.com/aiven/terraform-provider-aiven/blob/master/website/docs/r/service_integration.html.markdown.
 */
export class ServiceIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ServiceIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceIntegrationState, opts?: pulumi.CustomResourceOptions): ServiceIntegration {
        return new ServiceIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/serviceIntegration:ServiceIntegration';

    /**
     * Returns true if the given object is an instance of ServiceIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceIntegration.__pulumiType;
    }

    /**
     * Destination endpoint for the integration (if any)
     */
    public readonly destinationEndpointId!: pulumi.Output<string | undefined>;
    /**
     * Destination service for the integration (if any)
     */
    public readonly destinationServiceName!: pulumi.Output<string | undefined>;
    /**
     * Type of the service integration
     */
    public readonly integrationType!: pulumi.Output<string>;
    /**
     * Log integration specific user configurable settings
     */
    public readonly logsUserConfig!: pulumi.Output<outputs.ServiceIntegrationLogsUserConfig | undefined>;
    /**
     * Mirrormaker integration specific user configurable settings
     */
    public readonly mirrormakerUserConfig!: pulumi.Output<outputs.ServiceIntegrationMirrormakerUserConfig | undefined>;
    /**
     * Project the integration belongs to
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Source endpoint for the integration (if any)
     */
    public readonly sourceEndpointId!: pulumi.Output<string | undefined>;
    /**
     * Source service for the integration (if any)
     */
    public readonly sourceServiceName!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceIntegrationArgs | ServiceIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServiceIntegrationState | undefined;
            inputs["destinationEndpointId"] = state ? state.destinationEndpointId : undefined;
            inputs["destinationServiceName"] = state ? state.destinationServiceName : undefined;
            inputs["integrationType"] = state ? state.integrationType : undefined;
            inputs["logsUserConfig"] = state ? state.logsUserConfig : undefined;
            inputs["mirrormakerUserConfig"] = state ? state.mirrormakerUserConfig : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["sourceEndpointId"] = state ? state.sourceEndpointId : undefined;
            inputs["sourceServiceName"] = state ? state.sourceServiceName : undefined;
        } else {
            const args = argsOrState as ServiceIntegrationArgs | undefined;
            if (!args || args.integrationType === undefined) {
                throw new Error("Missing required property 'integrationType'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            inputs["destinationEndpointId"] = args ? args.destinationEndpointId : undefined;
            inputs["destinationServiceName"] = args ? args.destinationServiceName : undefined;
            inputs["integrationType"] = args ? args.integrationType : undefined;
            inputs["logsUserConfig"] = args ? args.logsUserConfig : undefined;
            inputs["mirrormakerUserConfig"] = args ? args.mirrormakerUserConfig : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["sourceEndpointId"] = args ? args.sourceEndpointId : undefined;
            inputs["sourceServiceName"] = args ? args.sourceServiceName : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ServiceIntegration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceIntegration resources.
 */
export interface ServiceIntegrationState {
    /**
     * Destination endpoint for the integration (if any)
     */
    readonly destinationEndpointId?: pulumi.Input<string>;
    /**
     * Destination service for the integration (if any)
     */
    readonly destinationServiceName?: pulumi.Input<string>;
    /**
     * Type of the service integration
     */
    readonly integrationType?: pulumi.Input<string>;
    /**
     * Log integration specific user configurable settings
     */
    readonly logsUserConfig?: pulumi.Input<inputs.ServiceIntegrationLogsUserConfig>;
    /**
     * Mirrormaker integration specific user configurable settings
     */
    readonly mirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationMirrormakerUserConfig>;
    /**
     * Project the integration belongs to
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Source endpoint for the integration (if any)
     */
    readonly sourceEndpointId?: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    readonly sourceServiceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceIntegration resource.
 */
export interface ServiceIntegrationArgs {
    /**
     * Destination endpoint for the integration (if any)
     */
    readonly destinationEndpointId?: pulumi.Input<string>;
    /**
     * Destination service for the integration (if any)
     */
    readonly destinationServiceName?: pulumi.Input<string>;
    /**
     * Type of the service integration
     */
    readonly integrationType: pulumi.Input<string>;
    /**
     * Log integration specific user configurable settings
     */
    readonly logsUserConfig?: pulumi.Input<inputs.ServiceIntegrationLogsUserConfig>;
    /**
     * Mirrormaker integration specific user configurable settings
     */
    readonly mirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationMirrormakerUserConfig>;
    /**
     * Project the integration belongs to
     */
    readonly project: pulumi.Input<string>;
    /**
     * Source endpoint for the integration (if any)
     */
    readonly sourceEndpointId?: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    readonly sourceServiceName?: pulumi.Input<string>;
}
