// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages a [connection pool](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling) in an Aiven for PostgreSQLÂ® service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const main = new aiven.ConnectionPool("main", {
 *     project: exampleProject.project,
 *     serviceName: examplePostgres.serviceName,
 *     databaseName: mainAivenPgDatabase.databaseName,
 *     poolMode: "transaction",
 *     poolName: "example-pool",
 *     poolSize: 10,
 *     username: exampleUser.username,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/connectionPool:ConnectionPool main PROJECT/SERVICE_NAME/POOL_NAME
 * ```
 */
export class ConnectionPool extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionPoolState, opts?: pulumi.CustomResourceOptions): ConnectionPool {
        return new ConnectionPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/connectionPool:ConnectionPool';

    /**
     * Returns true if the given object is an instance of ConnectionPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectionPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionPool.__pulumiType;
    }

    /**
     * The URI for connecting to the pool.
     */
    public /*out*/ readonly connectionUri!: pulumi.Output<string>;
    /**
     * The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * The [operational mode](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling#pooling-modes). The possible values are `session`, `statement` and `transaction`. The default value is `transaction`.
     */
    public readonly poolMode!: pulumi.Output<string | undefined>;
    /**
     * Name of the pool. Changing this property forces recreation of the resource.
     */
    public readonly poolName!: pulumi.Output<string>;
    /**
     * The number of PostgreSQL server connections this pool can use at a time. This does not affect the number of incoming connections. Each pool can handle a minimum of 5000 client connections. The default value is `10`.
     */
    public readonly poolSize!: pulumi.Output<number | undefined>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a ConnectionPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionPoolArgs | ConnectionPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionPoolState | undefined;
            resourceInputs["connectionUri"] = state ? state.connectionUri : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["poolMode"] = state ? state.poolMode : undefined;
            resourceInputs["poolName"] = state ? state.poolName : undefined;
            resourceInputs["poolSize"] = state ? state.poolSize : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ConnectionPoolArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.poolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolName'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["poolMode"] = args ? args.poolMode : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["poolSize"] = args ? args.poolSize : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["connectionUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionUri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConnectionPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectionPool resources.
 */
export interface ConnectionPoolState {
    /**
     * The URI for connecting to the pool.
     */
    connectionUri?: pulumi.Input<string>;
    /**
     * The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The [operational mode](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling#pooling-modes). The possible values are `session`, `statement` and `transaction`. The default value is `transaction`.
     */
    poolMode?: pulumi.Input<string>;
    /**
     * Name of the pool. Changing this property forces recreation of the resource.
     */
    poolName?: pulumi.Input<string>;
    /**
     * The number of PostgreSQL server connections this pool can use at a time. This does not affect the number of incoming connections. Each pool can handle a minimum of 5000 client connections. The default value is `10`.
     */
    poolSize?: pulumi.Input<number>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectionPool resource.
 */
export interface ConnectionPoolArgs {
    /**
     * The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    databaseName: pulumi.Input<string>;
    /**
     * The [operational mode](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling#pooling-modes). The possible values are `session`, `statement` and `transaction`. The default value is `transaction`.
     */
    poolMode?: pulumi.Input<string>;
    /**
     * Name of the pool. Changing this property forces recreation of the resource.
     */
    poolName: pulumi.Input<string>;
    /**
     * The number of PostgreSQL server connections this pool can use at a time. This does not affect the number of incoming connections. Each pool can handle a minimum of 5000 client connections. The default value is `10`.
     */
    poolSize?: pulumi.Input<number>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
     */
    username?: pulumi.Input<string>;
}
