// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 * 
 * const mytestpool = new aiven.ConnectionPool("mytestpool", {
 *     databaseName: aiven_database_mydatabase.databaseName,
 *     poolMode: "transaction",
 *     poolName: "mypool",
 *     poolSize: 10,
 *     project: aiven_project_myproject.project,
 *     serviceName: aiven_service_myservice.serviceName,
 *     username: aiven_service_user_myserviceuser.username,
 * });
 * ```
 *
 * > This content is derived from https://github.com/aiven/terraform-provider-aiven/blob/master/website/docs/r/connection_pool.html.markdown.
 */
export class ConnectionPool extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionPoolState, opts?: pulumi.CustomResourceOptions): ConnectionPool {
        return new ConnectionPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/connectionPool:ConnectionPool';

    /**
     * Returns true if the given object is an instance of ConnectionPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectionPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionPool.__pulumiType;
    }

    /**
     * URI for connecting to the pool
     */
    public /*out*/ readonly connectionUri!: pulumi.Output<string>;
    /**
     * Name of the database the pool connects to
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * Mode the pool operates in (session, transaction, statement)
     */
    public readonly poolMode!: pulumi.Output<string | undefined>;
    /**
     * Name of the pool
     */
    public readonly poolName!: pulumi.Output<string>;
    /**
     * Number of connections the pool may create towards the backend server
     */
    public readonly poolSize!: pulumi.Output<number | undefined>;
    /**
     * Project to link the connection pool to
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Service to link the connection pool to
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Name of the service user used to connect to the database
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ConnectionPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionPoolArgs | ConnectionPoolState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ConnectionPoolState | undefined;
            inputs["connectionUri"] = state ? state.connectionUri : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["poolMode"] = state ? state.poolMode : undefined;
            inputs["poolName"] = state ? state.poolName : undefined;
            inputs["poolSize"] = state ? state.poolSize : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ConnectionPoolArgs | undefined;
            if (!args || args.databaseName === undefined) {
                throw new Error("Missing required property 'databaseName'");
            }
            if (!args || args.poolName === undefined) {
                throw new Error("Missing required property 'poolName'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (!args || args.username === undefined) {
                throw new Error("Missing required property 'username'");
            }
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["poolMode"] = args ? args.poolMode : undefined;
            inputs["poolName"] = args ? args.poolName : undefined;
            inputs["poolSize"] = args ? args.poolSize : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["connectionUri"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ConnectionPool.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectionPool resources.
 */
export interface ConnectionPoolState {
    /**
     * URI for connecting to the pool
     */
    readonly connectionUri?: pulumi.Input<string>;
    /**
     * Name of the database the pool connects to
     */
    readonly databaseName?: pulumi.Input<string>;
    /**
     * Mode the pool operates in (session, transaction, statement)
     */
    readonly poolMode?: pulumi.Input<string>;
    /**
     * Name of the pool
     */
    readonly poolName?: pulumi.Input<string>;
    /**
     * Number of connections the pool may create towards the backend server
     */
    readonly poolSize?: pulumi.Input<number>;
    /**
     * Project to link the connection pool to
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Service to link the connection pool to
     */
    readonly serviceName?: pulumi.Input<string>;
    /**
     * Name of the service user used to connect to the database
     */
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectionPool resource.
 */
export interface ConnectionPoolArgs {
    /**
     * Name of the database the pool connects to
     */
    readonly databaseName: pulumi.Input<string>;
    /**
     * Mode the pool operates in (session, transaction, statement)
     */
    readonly poolMode?: pulumi.Input<string>;
    /**
     * Name of the pool
     */
    readonly poolName: pulumi.Input<string>;
    /**
     * Number of connections the pool may create towards the backend server
     */
    readonly poolSize?: pulumi.Input<number>;
    /**
     * Project to link the connection pool to
     */
    readonly project: pulumi.Input<string>;
    /**
     * Service to link the connection pool to
     */
    readonly serviceName: pulumi.Input<string>;
    /**
     * Name of the service user used to connect to the database
     */
    readonly username: pulumi.Input<string>;
}
