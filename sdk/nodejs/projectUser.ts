// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const mytestuser = new aiven.ProjectUser("mytestuser", {
 *     email: "john.doe@example.com",
 *     memberType: "admin",
 *     project: aiven_project_myproject.project,
 * });
 * ```
 */
export class ProjectUser extends pulumi.CustomResource {
    /**
     * Get an existing ProjectUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectUserState, opts?: pulumi.CustomResourceOptions): ProjectUser {
        return new ProjectUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/projectUser:ProjectUser';

    /**
     * Returns true if the given object is an instance of ProjectUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectUser.__pulumiType;
    }

    /**
     * Whether the user has accepted project membership or not
     */
    public /*out*/ readonly accepted!: pulumi.Output<boolean>;
    /**
     * Email address of the user
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Project membership type. One of: admin, developer, operator
     */
    public readonly memberType!: pulumi.Output<string>;
    /**
     * The project the user belongs to
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a ProjectUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectUserArgs | ProjectUserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ProjectUserState | undefined;
            inputs["accepted"] = state ? state.accepted : undefined;
            inputs["email"] = state ? state.email : undefined;
            inputs["memberType"] = state ? state.memberType : undefined;
            inputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as ProjectUserArgs | undefined;
            if (!args || args.email === undefined) {
                throw new Error("Missing required property 'email'");
            }
            if (!args || args.memberType === undefined) {
                throw new Error("Missing required property 'memberType'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            inputs["email"] = args ? args.email : undefined;
            inputs["memberType"] = args ? args.memberType : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["accepted"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ProjectUser.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectUser resources.
 */
export interface ProjectUserState {
    /**
     * Whether the user has accepted project membership or not
     */
    readonly accepted?: pulumi.Input<boolean>;
    /**
     * Email address of the user
     */
    readonly email?: pulumi.Input<string>;
    /**
     * Project membership type. One of: admin, developer, operator
     */
    readonly memberType?: pulumi.Input<string>;
    /**
     * The project the user belongs to
     */
    readonly project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectUser resource.
 */
export interface ProjectUserArgs {
    /**
     * Email address of the user
     */
    readonly email: pulumi.Input<string>;
    /**
     * Project membership type. One of: admin, developer, operator
     */
    readonly memberType: pulumi.Input<string>;
    /**
     * The project the user belongs to
     */
    readonly project: pulumi.Input<string>;
}
