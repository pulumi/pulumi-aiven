// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The Service Component data source provides information about the existing Aiven service Component.
 *
 * Service components can be defined to get the connection info for specific service. Services may support multiple different access routes (VPC peering and public access), have additional components or support various authentication methods. Each of these may be represented by different DNS name or TCP port and the specific component to match can be selected by specifying appropriate filters as shown below.
 *
 * ## Example Usage
 *
 * {{tffile "examples/data-sources/aiven_service_component/data-source.tf"}}
 */
export function getServiceComponent(args: GetServiceComponentArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceComponentResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aiven:index/getServiceComponent:getServiceComponent", {
        "component": args.component,
        "kafkaAuthenticationMethod": args.kafkaAuthenticationMethod,
        "project": args.project,
        "route": args.route,
        "serviceName": args.serviceName,
        "ssl": args.ssl,
        "usage": args.usage,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceComponent.
 */
export interface GetServiceComponentArgs {
    /**
     * Service component name
     */
    component: string;
    /**
     * Kafka authentication method. This is a value specific to the 'kafka' service component
     */
    kafkaAuthenticationMethod?: string;
    /**
     * Project name
     */
    project: string;
    /**
     * Network access route
     */
    route?: string;
    /**
     * Service name
     */
    serviceName?: string;
    /**
     * Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
     */
    ssl?: boolean;
    /**
     * DNS usage name
     */
    usage?: string;
}

/**
 * A collection of values returned by getServiceComponent.
 */
export interface GetServiceComponentResult {
    /**
     * Service component name
     */
    readonly component: string;
    /**
     * DNS name for connecting to the service component
     */
    readonly host: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Kafka authentication method. This is a value specific to the 'kafka' service component
     */
    readonly kafkaAuthenticationMethod?: string;
    /**
     * Port number for connecting to the service component
     */
    readonly port: number;
    /**
     * Project name
     */
    readonly project: string;
    /**
     * Network access route
     */
    readonly route?: string;
    /**
     * Service name
     */
    readonly serviceName?: string;
    /**
     * Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
     */
    readonly ssl?: boolean;
    /**
     * DNS usage name
     */
    readonly usage?: string;
}

export function getServiceComponentOutput(args: GetServiceComponentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceComponentResult> {
    return pulumi.output(args).apply(a => getServiceComponent(a, opts))
}

/**
 * A collection of arguments for invoking getServiceComponent.
 */
export interface GetServiceComponentOutputArgs {
    /**
     * Service component name
     */
    component: pulumi.Input<string>;
    /**
     * Kafka authentication method. This is a value specific to the 'kafka' service component
     */
    kafkaAuthenticationMethod?: pulumi.Input<string>;
    /**
     * Project name
     */
    project: pulumi.Input<string>;
    /**
     * Network access route
     */
    route?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
     */
    ssl?: pulumi.Input<boolean>;
    /**
     * DNS usage name
     */
    usage?: pulumi.Input<string>;
}
