// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Service Component Data Source
 *
 * The Service Component data source provides information about the existing Aiven service Component.
 *
 * Service components can be defined to get the connection info for specific service.
 * Services may support multiple different access routes (VPC peering and public access),
 * have additional components or support various authentication methods. Each of these
 * may be represented by different DNS name or TCP port and the specific component to
 * match can be selected by specifying appropriate filters as shown below.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const sc1 = aiven.getServiceComponent({
 *     project: aiven_kafka.project1.project,
 *     serviceName: aiven_kafka.service1.service_name,
 *     component: "kafka",
 *     route: "dynamic",
 *     kafkaAuthenticationMethod: "certificate",
 * });
 * ```
 */
export function getServiceComponent(args: GetServiceComponentArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceComponentResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aiven:index/getServiceComponent:getServiceComponent", {
        "component": args.component,
        "kafkaAuthenticationMethod": args.kafkaAuthenticationMethod,
        "project": args.project,
        "route": args.route,
        "serviceName": args.serviceName,
        "ssl": args.ssl,
        "usage": args.usage,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceComponent.
 */
export interface GetServiceComponentArgs {
    /**
     * is a service component name. Component may match the name of the service 
     * (`cassandra`, `elasticsearch`, `grafana`, `influxdb`, `kafka`, `kafkaConnect`, `mysql`,
     * `pg` and `redis`), in which case the connection info of the service itself is returned.
     * Some service types support additional service specific components like `kibana` for
     * Elasticsearch, `kafkaConnect`, `kafkaRest` and `schemaRegistry` for Kafka, and
     * `pgbouncer` for PostgreSQL. Most service types also support `prometheus`.
     */
    component: string;
    /**
     * is Kafka authentication method. This is a value specific 
     * to the 'kafka' service components. And has the following available options: `certificate`
     * and `sasl`. If not set by the user only entries with empty `kafkaAuthenticationMethod`
     * will be selected.
     */
    kafkaAuthenticationMethod?: string;
    /**
     * and `serviceName` - (Required) define the project and service the service component
     * belongs to.
     */
    project: string;
    /**
     * is network access route. The route may be one of `dynamic`, `public`, and `private`. 
     * Usually, you'll want to use `dynamic`, which for services that are not in a private network
     * identifies the regular public DNS name of the service and for services in a private network
     * the private DNS name. If the service is in a private network but has also public access
     * enabled the `public` route type can be used to get the public DNS name of the service. The
     * `private` option should typically not be used.
     */
    route?: string;
    serviceName?: string;
    /**
     * whether the endpoint is encrypted or accepts plaintext. By default endpoints are
     * always encrypted and this property is only included for service components they may
     * disable encryption. If not set by the user only entries with empty `ssl` or `ssl` set
     * to true will be selected.
     */
    ssl?: boolean;
    /**
     * is DNS usage name, and can be one of `primary`, `replica` or `syncing`. `replica` 
     * is used by services that have separate master and standby roles for which it identifies
     * the `replica` DNS name. `syncing` is used by limited set of services to expose nodes
     * before they have finished restoring state but may already be partially available, for
     * example a PostgreSQL node that is streaming WAL segments from backup or current master
     * but hasn't yet fully caught up.
     */
    usage?: string;
}

/**
 * A collection of values returned by getServiceComponent.
 */
export interface GetServiceComponentResult {
    readonly component: string;
    /**
     * is DNS name for connecting to the service component.
     */
    readonly host: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly kafkaAuthenticationMethod?: string;
    /**
     * is port number for connecting to the service component.
     */
    readonly port: number;
    readonly project: string;
    readonly route?: string;
    readonly serviceName?: string;
    /**
     * whether the endpoint is encrypted or accepts plaintext. By default endpoints are
     * always encrypted and this property is only included for service components they may
     * disable encryption. If not set by the user only entries with empty `ssl` or `ssl` set
     * to true will be selected.
     */
    readonly ssl?: boolean;
    /**
     * is DNS usage name, and can be one of `primary`, `replica` or `syncing`. `replica` 
     * is used by services that have separate master and standby roles for which it identifies
     * the `replica` DNS name. `syncing` is used by limited set of services to expose nodes
     * before they have finished restoring state but may already be partially available, for
     * example a PostgreSQL node that is streaming WAL segments from backup or current master
     * but hasn't yet fully caught up.
     */
    readonly usage?: string;
}
