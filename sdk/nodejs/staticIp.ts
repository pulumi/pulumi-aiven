// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The aiven.StaticIp resource allows the creation and deletion of static ips. Please not that once a static ip is in the 'assigned' state it is bound to the node it is assigned to and cannot be deleted or disassociated until the node is recycled. Plans that would delete static ips that are in the assigned state will be blocked.
 */
export class StaticIp extends pulumi.CustomResource {
    /**
     * Get an existing StaticIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StaticIpState, opts?: pulumi.CustomResourceOptions): StaticIp {
        return new StaticIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/staticIp:StaticIp';

    /**
     * Returns true if the given object is an instance of StaticIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StaticIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StaticIp.__pulumiType;
    }

    /**
     * Specifies the cloud that the static ip belongs to. Changing this property forces recreation of the resource.
     */
    public readonly cloudName!: pulumi.Output<string>;
    /**
     * The address of the static ip.
     */
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The service name the static ip is associated with.
     */
    public /*out*/ readonly serviceName!: pulumi.Output<string>;
    /**
     * The state the static ip is in.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The static ip id of the resource. Should be used as a reference elsewhere.
     */
    public /*out*/ readonly staticIpAddressId!: pulumi.Output<string>;

    /**
     * Create a StaticIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StaticIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StaticIpArgs | StaticIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StaticIpState | undefined;
            resourceInputs["cloudName"] = state ? state.cloudName : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["staticIpAddressId"] = state ? state.staticIpAddressId : undefined;
        } else {
            const args = argsOrState as StaticIpArgs | undefined;
            if ((!args || args.cloudName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudName'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["cloudName"] = args ? args.cloudName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["serviceName"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["staticIpAddressId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StaticIp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StaticIp resources.
 */
export interface StaticIpState {
    /**
     * Specifies the cloud that the static ip belongs to. Changing this property forces recreation of the resource.
     */
    cloudName?: pulumi.Input<string>;
    /**
     * The address of the static ip.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * The service name the static ip is associated with.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The state the static ip is in.
     */
    state?: pulumi.Input<string>;
    /**
     * The static ip id of the resource. Should be used as a reference elsewhere.
     */
    staticIpAddressId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StaticIp resource.
 */
export interface StaticIpArgs {
    /**
     * Specifies the cloud that the static ip belongs to. Changing this property forces recreation of the resource.
     */
    cloudName: pulumi.Input<string>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project: pulumi.Input<string>;
}
