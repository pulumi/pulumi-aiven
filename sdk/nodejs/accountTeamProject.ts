// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Links an existing project to an existing team. Both the project and team should have the same `accountId`.
 *
 * !> **Teams have been deprecated and are being migrated to groups**
 * **On 30 September 2024** the Account Owners team will transition to super admin. Super admin have full access to the organization.
 * The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions.
 * **From 4 November 2024** you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after
 * this date. **On 2 December 2024** all teams will be deleted and the teams feature will be completely removed. View the
 * migration guide for more information on the changes and migrating to groups.
 *
 * > **Important**
 * You can't delete the Account Owners team. **Deleting all other teams in your organization will disable the teams feature.**
 * You won't be able to create new teams or access your Account Owners team.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const exampleProject = new aiven.Project("example_project", {
 *     project: "project-1",
 *     accountId: ACCOUNT_RESOURCE_NAME.accountId,
 * });
 * const exampleTeam = new aiven.AccountTeam("example_team", {
 *     accountId: ACCOUNT_RESOURCE_NAMEAivenAccount.accountId,
 *     name: "Example team",
 * });
 * const main = new aiven.AccountTeamProject("main", {
 *     accountId: ACCOUNT_RESOURCE_NAMEAivenAccount.accountId,
 *     teamId: exampleTeam.teamId,
 *     projectName: exampleProject.project,
 *     teamType: "admin",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/accountTeamProject:AccountTeamProject account_team_project1 account_id/team_id/project_name
 * ```
 */
export class AccountTeamProject extends pulumi.CustomResource {
    /**
     * Get an existing AccountTeamProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountTeamProjectState, opts?: pulumi.CustomResourceOptions): AccountTeamProject {
        return new AccountTeamProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/accountTeamProject:AccountTeamProject';

    /**
     * Returns true if the given object is an instance of AccountTeamProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountTeamProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountTeamProject.__pulumiType;
    }

    /**
     * The unique account id
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The name of an already existing project
     */
    declare public readonly projectName: pulumi.Output<string | undefined>;
    /**
     * An account team id
     */
    declare public readonly teamId: pulumi.Output<string>;
    /**
     * The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
     */
    declare public readonly teamType: pulumi.Output<string | undefined>;

    /**
     * Create a AccountTeamProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountTeamProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountTeamProjectArgs | AccountTeamProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountTeamProjectState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["projectName"] = state?.projectName;
            resourceInputs["teamId"] = state?.teamId;
            resourceInputs["teamType"] = state?.teamType;
        } else {
            const args = argsOrState as AccountTeamProjectArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.teamId === undefined && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["projectName"] = args?.projectName;
            resourceInputs["teamId"] = args?.teamId;
            resourceInputs["teamType"] = args?.teamType;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountTeamProject.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountTeamProject resources.
 */
export interface AccountTeamProjectState {
    /**
     * The unique account id
     */
    accountId?: pulumi.Input<string>;
    /**
     * The name of an already existing project
     */
    projectName?: pulumi.Input<string>;
    /**
     * An account team id
     */
    teamId?: pulumi.Input<string>;
    /**
     * The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
     */
    teamType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountTeamProject resource.
 */
export interface AccountTeamProjectArgs {
    /**
     * The unique account id
     */
    accountId: pulumi.Input<string>;
    /**
     * The name of an already existing project
     */
    projectName?: pulumi.Input<string>;
    /**
     * An account team id
     */
    teamId: pulumi.Input<string>;
    /**
     * The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
     */
    teamType?: pulumi.Input<string>;
}
