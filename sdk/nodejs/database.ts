// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Database Resource
 *
 * The Database resource allows the creation and management of Aiven Databases.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const mydatabase = new aiven.Database("mydatabase", {
 *     project: aiven_project.myproject.project,
 *     serviceName: aiven_service.myservice.service_name,
 *     databaseName: "<DATABASE_NAME>",
 * });
 * ```
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * is the actual name of the database.
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
     */
    public readonly lcCollate!: pulumi.Output<string | undefined>;
    /**
     * default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
     */
    public readonly lcCtype!: pulumi.Output<string | undefined>;
    /**
     * and `serviceName` - (Required) define the project and service the database belongs to.
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Service to link the database to
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is
     * recommended to enable this for any production databases containing critical data.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["lcCollate"] = state ? state.lcCollate : undefined;
            inputs["lcCtype"] = state ? state.lcCtype : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["lcCollate"] = args ? args.lcCollate : undefined;
            inputs["lcCtype"] = args ? args.lcCtype : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["terminationProtection"] = args ? args.terminationProtection : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Database.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * is the actual name of the database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
     */
    lcCollate?: pulumi.Input<string>;
    /**
     * default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
     */
    lcCtype?: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the database belongs to.
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    project?: pulumi.Input<string>;
    /**
     * Service to link the database to
     */
    serviceName?: pulumi.Input<string>;
    /**
     * It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is
     * recommended to enable this for any production databases containing critical data.
     */
    terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * is the actual name of the database.
     */
    databaseName: pulumi.Input<string>;
    /**
     * default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
     */
    lcCollate?: pulumi.Input<string>;
    /**
     * default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
     */
    lcCtype?: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the database belongs to.
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    project: pulumi.Input<string>;
    /**
     * Service to link the database to
     */
    serviceName: pulumi.Input<string>;
    /**
     * It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is
     * recommended to enable this for any production databases containing critical data.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
