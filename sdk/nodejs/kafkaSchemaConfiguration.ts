// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Kafka Schema Configuration Resource
 *
 * The Kafka Schema Configuration resource allows the creation and management of Aiven Kafka Schema Configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const config = new aiven.KafkaSchemaConfiguration("config", {
 *     project: aiven_project["kafka-schemas-project1"].project,
 *     serviceName: aiven_kafka["kafka-service1"].service_name,
 *     compatibilityLevel: "BACKWARD",
 * });
 * ```
 */
export class KafkaSchemaConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing KafkaSchemaConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaSchemaConfigurationState, opts?: pulumi.CustomResourceOptions): KafkaSchemaConfiguration {
        return new KafkaSchemaConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration';

    /**
     * Returns true if the given object is an instance of KafkaSchemaConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaSchemaConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaSchemaConfiguration.__pulumiType;
    }

    /**
     * is the Global Kafka Schema configuration compatibility level when defined 
     * for `aiven.KafkaSchemaConfiguration` resource. Also, Kafka Schema configuration
     * compatibility level can be overridden for a specific subject when used in `aiven.KafkaSchema`
     * resource. If the compatibility level not specified for the individual subject by default,
     * it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
     * `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
     */
    public readonly compatibilityLevel!: pulumi.Output<string>;
    /**
     * and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to. 
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Service to link the Kafka Schemas Configuration to
     */
    public readonly serviceName!: pulumi.Output<string>;

    /**
     * Create a KafkaSchemaConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaSchemaConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaSchemaConfigurationArgs | KafkaSchemaConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaSchemaConfigurationState | undefined;
            resourceInputs["compatibilityLevel"] = state ? state.compatibilityLevel : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
        } else {
            const args = argsOrState as KafkaSchemaConfigurationArgs | undefined;
            if ((!args || args.compatibilityLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compatibilityLevel'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["compatibilityLevel"] = args ? args.compatibilityLevel : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaSchemaConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaSchemaConfiguration resources.
 */
export interface KafkaSchemaConfigurationState {
    /**
     * is the Global Kafka Schema configuration compatibility level when defined 
     * for `aiven.KafkaSchemaConfiguration` resource. Also, Kafka Schema configuration
     * compatibility level can be overridden for a specific subject when used in `aiven.KafkaSchema`
     * resource. If the compatibility level not specified for the individual subject by default,
     * it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
     * `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
     */
    compatibilityLevel?: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to. 
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    project?: pulumi.Input<string>;
    /**
     * Service to link the Kafka Schemas Configuration to
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaSchemaConfiguration resource.
 */
export interface KafkaSchemaConfigurationArgs {
    /**
     * is the Global Kafka Schema configuration compatibility level when defined 
     * for `aiven.KafkaSchemaConfiguration` resource. Also, Kafka Schema configuration
     * compatibility level can be overridden for a specific subject when used in `aiven.KafkaSchema`
     * resource. If the compatibility level not specified for the individual subject by default,
     * it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
     * `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
     */
    compatibilityLevel: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to. 
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    project: pulumi.Input<string>;
    /**
     * Service to link the Kafka Schemas Configuration to
     */
    serviceName: pulumi.Input<string>;
}
