// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KafkaSchemaConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing KafkaSchemaConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaSchemaConfigurationState, opts?: pulumi.CustomResourceOptions): KafkaSchemaConfiguration {
        return new KafkaSchemaConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration';

    /**
     * Returns true if the given object is an instance of KafkaSchemaConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaSchemaConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaSchemaConfiguration.__pulumiType;
    }

    /**
     * Kafka Schemas compatibility level
     */
    public readonly compatibilityLevel!: pulumi.Output<string>;
    /**
     * Project to link the Kafka Schemas Configuration to
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Service to link the Kafka Schemas Configuration to
     */
    public readonly serviceName!: pulumi.Output<string>;

    /**
     * Create a KafkaSchemaConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaSchemaConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaSchemaConfigurationArgs | KafkaSchemaConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as KafkaSchemaConfigurationState | undefined;
            inputs["compatibilityLevel"] = state ? state.compatibilityLevel : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
        } else {
            const args = argsOrState as KafkaSchemaConfigurationArgs | undefined;
            if (!args || args.compatibilityLevel === undefined) {
                throw new Error("Missing required property 'compatibilityLevel'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["compatibilityLevel"] = args ? args.compatibilityLevel : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(KafkaSchemaConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaSchemaConfiguration resources.
 */
export interface KafkaSchemaConfigurationState {
    /**
     * Kafka Schemas compatibility level
     */
    readonly compatibilityLevel?: pulumi.Input<string>;
    /**
     * Project to link the Kafka Schemas Configuration to
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Service to link the Kafka Schemas Configuration to
     */
    readonly serviceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaSchemaConfiguration resource.
 */
export interface KafkaSchemaConfigurationArgs {
    /**
     * Kafka Schemas compatibility level
     */
    readonly compatibilityLevel: pulumi.Input<string>;
    /**
     * Project to link the Kafka Schemas Configuration to
     */
    readonly project: pulumi.Input<string>;
    /**
     * Service to link the Kafka Schemas Configuration to
     */
    readonly serviceName: pulumi.Input<string>;
}
