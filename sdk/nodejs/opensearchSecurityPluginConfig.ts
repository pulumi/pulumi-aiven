// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The OpenSearch Security Plugin Config resource allows the creation and management of AivenOpenSearch Security Plugin config.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/opensearchSecurityPluginConfig:OpensearchSecurityPluginConfig foo project/service_name
 * ```
 */
export class OpensearchSecurityPluginConfig extends pulumi.CustomResource {
    /**
     * Get an existing OpensearchSecurityPluginConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpensearchSecurityPluginConfigState, opts?: pulumi.CustomResourceOptions): OpensearchSecurityPluginConfig {
        return new OpensearchSecurityPluginConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/opensearchSecurityPluginConfig:OpensearchSecurityPluginConfig';

    /**
     * Returns true if the given object is an instance of OpensearchSecurityPluginConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpensearchSecurityPluginConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpensearchSecurityPluginConfig.__pulumiType;
    }

    /**
     * Whether the os-sec-admin user is enabled. This indicates whether the user management with the security plugin is enabled. This is always true when the os-sec-admin password was set at least once.
     */
    public /*out*/ readonly adminEnabled!: pulumi.Output<boolean>;
    /**
     * The password for the os-sec-admin user.
     */
    public readonly adminPassword!: pulumi.Output<string>;
    /**
     * Whether the security plugin is available. This is always true for recently created services.
     */
    public /*out*/ readonly available!: pulumi.Output<boolean>;
    /**
     * Whether the security plugin is enabled. This is always true for recently created services.
     */
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly serviceName!: pulumi.Output<string>;

    /**
     * Create a OpensearchSecurityPluginConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpensearchSecurityPluginConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpensearchSecurityPluginConfigArgs | OpensearchSecurityPluginConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpensearchSecurityPluginConfigState | undefined;
            resourceInputs["adminEnabled"] = state ? state.adminEnabled : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["available"] = state ? state.available : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
        } else {
            const args = argsOrState as OpensearchSecurityPluginConfigArgs | undefined;
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["adminEnabled"] = undefined /*out*/;
            resourceInputs["available"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OpensearchSecurityPluginConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OpensearchSecurityPluginConfig resources.
 */
export interface OpensearchSecurityPluginConfigState {
    /**
     * Whether the os-sec-admin user is enabled. This indicates whether the user management with the security plugin is enabled. This is always true when the os-sec-admin password was set at least once.
     */
    adminEnabled?: pulumi.Input<boolean>;
    /**
     * The password for the os-sec-admin user.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * Whether the security plugin is available. This is always true for recently created services.
     */
    available?: pulumi.Input<boolean>;
    /**
     * Whether the security plugin is enabled. This is always true for recently created services.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OpensearchSecurityPluginConfig resource.
 */
export interface OpensearchSecurityPluginConfigArgs {
    /**
     * The password for the os-sec-admin user.
     */
    adminPassword: pulumi.Input<string>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
}
