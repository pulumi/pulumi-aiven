// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Grafana extends pulumi.CustomResource {
    /**
     * Get an existing Grafana resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrafanaState, opts?: pulumi.CustomResourceOptions): Grafana {
        return new Grafana(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/grafana:Grafana';

    /**
     * Returns true if the given object is an instance of Grafana.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Grafana {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Grafana.__pulumiType;
    }

    /**
     * Cloud the service runs in
     */
    public readonly cloudName!: pulumi.Output<string | undefined>;
    /**
     * Service component information objects
     */
    public /*out*/ readonly components!: pulumi.Output<outputs.GrafanaComponent[]>;
    /**
     * Grafana server provided values
     */
    public readonly grafana!: pulumi.Output<outputs.GrafanaGrafana>;
    /**
     * Grafana user configurable settings
     */
    public readonly grafanaUserConfig!: pulumi.Output<outputs.GrafanaGrafanaUserConfig | undefined>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    public readonly maintenanceWindowDow!: pulumi.Output<string | undefined>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    public readonly maintenanceWindowTime!: pulumi.Output<string | undefined>;
    /**
     * Subscription plan
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * Target project
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    public readonly projectVpcId!: pulumi.Output<string | undefined>;
    /**
     * Service hostname
     */
    public /*out*/ readonly serviceHost!: pulumi.Output<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    public readonly serviceIntegrations!: pulumi.Output<outputs.GrafanaServiceIntegration[] | undefined>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Password used for connecting to the service, if applicable
     */
    public /*out*/ readonly servicePassword!: pulumi.Output<string>;
    /**
     * Service port
     */
    public /*out*/ readonly servicePort!: pulumi.Output<number>;
    /**
     * Aiven internal service type code
     */
    public /*out*/ readonly serviceType!: pulumi.Output<string>;
    /**
     * URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
     */
    public /*out*/ readonly serviceUri!: pulumi.Output<string>;
    /**
     * Username used for connecting to the service, if applicable
     */
    public /*out*/ readonly serviceUsername!: pulumi.Output<string>;
    /**
     * Service state
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Grafana resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrafanaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GrafanaArgs | GrafanaState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as GrafanaState | undefined;
            inputs["cloudName"] = state ? state.cloudName : undefined;
            inputs["components"] = state ? state.components : undefined;
            inputs["grafana"] = state ? state.grafana : undefined;
            inputs["grafanaUserConfig"] = state ? state.grafanaUserConfig : undefined;
            inputs["maintenanceWindowDow"] = state ? state.maintenanceWindowDow : undefined;
            inputs["maintenanceWindowTime"] = state ? state.maintenanceWindowTime : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["projectVpcId"] = state ? state.projectVpcId : undefined;
            inputs["serviceHost"] = state ? state.serviceHost : undefined;
            inputs["serviceIntegrations"] = state ? state.serviceIntegrations : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["servicePassword"] = state ? state.servicePassword : undefined;
            inputs["servicePort"] = state ? state.servicePort : undefined;
            inputs["serviceType"] = state ? state.serviceType : undefined;
            inputs["serviceUri"] = state ? state.serviceUri : undefined;
            inputs["serviceUsername"] = state ? state.serviceUsername : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as GrafanaArgs | undefined;
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["cloudName"] = args ? args.cloudName : undefined;
            inputs["grafana"] = args ? args.grafana : undefined;
            inputs["grafanaUserConfig"] = args ? args.grafanaUserConfig : undefined;
            inputs["maintenanceWindowDow"] = args ? args.maintenanceWindowDow : undefined;
            inputs["maintenanceWindowTime"] = args ? args.maintenanceWindowTime : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["projectVpcId"] = args ? args.projectVpcId : undefined;
            inputs["serviceIntegrations"] = args ? args.serviceIntegrations : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            inputs["components"] = undefined /*out*/;
            inputs["serviceHost"] = undefined /*out*/;
            inputs["servicePassword"] = undefined /*out*/;
            inputs["servicePort"] = undefined /*out*/;
            inputs["serviceType"] = undefined /*out*/;
            inputs["serviceUri"] = undefined /*out*/;
            inputs["serviceUsername"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Grafana.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Grafana resources.
 */
export interface GrafanaState {
    /**
     * Cloud the service runs in
     */
    readonly cloudName?: pulumi.Input<string>;
    /**
     * Service component information objects
     */
    readonly components?: pulumi.Input<pulumi.Input<inputs.GrafanaComponent>[]>;
    /**
     * Grafana server provided values
     */
    readonly grafana?: pulumi.Input<inputs.GrafanaGrafana>;
    /**
     * Grafana user configurable settings
     */
    readonly grafanaUserConfig?: pulumi.Input<inputs.GrafanaGrafanaUserConfig>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    readonly maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    readonly maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Subscription plan
     */
    readonly plan?: pulumi.Input<string>;
    /**
     * Target project
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    readonly projectVpcId?: pulumi.Input<string>;
    /**
     * Service hostname
     */
    readonly serviceHost?: pulumi.Input<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    readonly serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.GrafanaServiceIntegration>[]>;
    /**
     * Service name
     */
    readonly serviceName?: pulumi.Input<string>;
    /**
     * Password used for connecting to the service, if applicable
     */
    readonly servicePassword?: pulumi.Input<string>;
    /**
     * Service port
     */
    readonly servicePort?: pulumi.Input<number>;
    /**
     * Aiven internal service type code
     */
    readonly serviceType?: pulumi.Input<string>;
    /**
     * URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
     */
    readonly serviceUri?: pulumi.Input<string>;
    /**
     * Username used for connecting to the service, if applicable
     */
    readonly serviceUsername?: pulumi.Input<string>;
    /**
     * Service state
     */
    readonly state?: pulumi.Input<string>;
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    readonly terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Grafana resource.
 */
export interface GrafanaArgs {
    /**
     * Cloud the service runs in
     */
    readonly cloudName?: pulumi.Input<string>;
    /**
     * Grafana server provided values
     */
    readonly grafana?: pulumi.Input<inputs.GrafanaGrafana>;
    /**
     * Grafana user configurable settings
     */
    readonly grafanaUserConfig?: pulumi.Input<inputs.GrafanaGrafanaUserConfig>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    readonly maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    readonly maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Subscription plan
     */
    readonly plan?: pulumi.Input<string>;
    /**
     * Target project
     */
    readonly project: pulumi.Input<string>;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    readonly projectVpcId?: pulumi.Input<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    readonly serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.GrafanaServiceIntegration>[]>;
    /**
     * Service name
     */
    readonly serviceName: pulumi.Input<string>;
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    readonly terminationProtection?: pulumi.Input<boolean>;
}
