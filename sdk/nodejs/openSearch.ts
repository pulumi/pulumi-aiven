// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Opensearch Resource
 *
 * The Opensearch resource allows the creation and management of Aiven Opensearch services.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const os1 = new aiven.OpenSearch("os1", {
 *     project: data.aiven_project.pr1.project,
 *     cloudName: "google-europe-west1",
 *     plan: "startup-4",
 *     serviceName: "my-os1",
 *     maintenanceWindowDow: "monday",
 *     maintenanceWindowTime: "10:00:00",
 *     opensearchUserConfig: {
 *         opensearchVersion: 1,
 *         opensearchDashboards: {
 *             enabled: true,
 *             opensearchRequestTimeout: 30000,
 *         },
 *         publicAccess: {
 *             opensearch: true,
 *             opensearchDashboards: true,
 *         },
 *     },
 * });
 * ```
 */
export class OpenSearch extends pulumi.CustomResource {
    /**
     * Get an existing OpenSearch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpenSearchState, opts?: pulumi.CustomResourceOptions): OpenSearch {
        return new OpenSearch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/openSearch:OpenSearch';

    /**
     * Returns true if the given object is an instance of OpenSearch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpenSearch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenSearch.__pulumiType;
    }

    /**
     * defines where the cloud provider and region where the service is hosted in. This can be
     * changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for
     * the service. Format is cloud provider name
     * (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
     * documented on each Cloud provider's own support articles,
     * like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
     * [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     */
    public readonly cloudName!: pulumi.Output<string | undefined>;
    /**
     * Service component information objects
     */
    public /*out*/ readonly components!: pulumi.Output<outputs.OpenSearchComponent[]>;
    /**
     * day of week when maintenance operations should be performed. On monday, tuesday,
     * wednesday, etc.
     */
    public readonly maintenanceWindowDow!: pulumi.Output<string | undefined>;
    /**
     * time of day when maintenance operations should be performed. UTC time in HH:mm:
     * ss format.
     */
    public readonly maintenanceWindowTime!: pulumi.Output<string | undefined>;
    /**
     * Allow clients to connect to opensearch from the public internet for service nodes
     * that are in a project VPC or another type of private network.
     */
    public readonly opensearch!: pulumi.Output<outputs.OpenSearchOpensearch>;
    /**
     * defines Opensearch specific additional configuration options. The following
     * configuration options available:
     */
    public readonly opensearchUserConfig!: pulumi.Output<outputs.OpenSearchOpensearchUserConfig | undefined>;
    /**
     * defines what kind of computing resources are allocated for the service. It can be changed after
     * creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient
     * amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The
     * basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
     * (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
     * but naming is based on memory). The available options can be seem from
     * the [Aiven pricing page](https://aiven.io/pricing).
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * identifies the project the service belongs to. To set up proper dependency between the project
     * and the service, refer to the project as shown in the above example. Project cannot be changed later without
     * destroying and re-creating the service.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * optionally specifies the VPC the service should run in. If the value is not set the
     * service is not run inside a VPC. When set, the value should be given as a reference as shown above to set up
     * dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely
     * moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take
     * significant amount of time to complete if the service has a lot of data.
     */
    public readonly projectVpcId!: pulumi.Output<string | undefined>;
    /**
     * Opensearch hostname.
     */
    public /*out*/ readonly serviceHost!: pulumi.Output<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    public readonly serviceIntegrations!: pulumi.Output<outputs.OpenSearchServiceIntegration[] | undefined>;
    /**
     * specifies the actual name of the service. The name cannot be changed later without
     * destroying and re-creating the service so name should be picked based on intended service usage rather than current
     * attributes.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Password used for connecting to the Opensearch service, if applicable.
     */
    public /*out*/ readonly servicePassword!: pulumi.Output<string>;
    /**
     * Opensearch port.
     */
    public /*out*/ readonly servicePort!: pulumi.Output<number>;
    /**
     * Aiven internal service type code
     */
    public /*out*/ readonly serviceType!: pulumi.Output<string>;
    /**
     * URI for connecting to the Opensearch service.
     */
    public /*out*/ readonly serviceUri!: pulumi.Output<string>;
    /**
     * Username used for connecting to the Opensearch service, if applicable.
     */
    public /*out*/ readonly serviceUsername!: pulumi.Output<string>;
    /**
     * Service state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * prevents the service from being deleted. It is recommended to set this to `true`
     * for all production services to prevent unintentional service deletion. This does not shield against deleting databases
     * or topics but for services with backups much of the content can at least be restored from backup in case accidental
     * deletion is done.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a OpenSearch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpenSearchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpenSearchArgs | OpenSearchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpenSearchState | undefined;
            resourceInputs["cloudName"] = state ? state.cloudName : undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["maintenanceWindowDow"] = state ? state.maintenanceWindowDow : undefined;
            resourceInputs["maintenanceWindowTime"] = state ? state.maintenanceWindowTime : undefined;
            resourceInputs["opensearch"] = state ? state.opensearch : undefined;
            resourceInputs["opensearchUserConfig"] = state ? state.opensearchUserConfig : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectVpcId"] = state ? state.projectVpcId : undefined;
            resourceInputs["serviceHost"] = state ? state.serviceHost : undefined;
            resourceInputs["serviceIntegrations"] = state ? state.serviceIntegrations : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["servicePassword"] = state ? state.servicePassword : undefined;
            resourceInputs["servicePort"] = state ? state.servicePort : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["serviceUri"] = state ? state.serviceUri : undefined;
            resourceInputs["serviceUsername"] = state ? state.serviceUsername : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as OpenSearchArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["cloudName"] = args ? args.cloudName : undefined;
            resourceInputs["maintenanceWindowDow"] = args ? args.maintenanceWindowDow : undefined;
            resourceInputs["maintenanceWindowTime"] = args ? args.maintenanceWindowTime : undefined;
            resourceInputs["opensearch"] = args ? args.opensearch : undefined;
            resourceInputs["opensearchUserConfig"] = args ? args.opensearchUserConfig : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectVpcId"] = args ? args.projectVpcId : undefined;
            resourceInputs["serviceIntegrations"] = args ? args.serviceIntegrations : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["components"] = undefined /*out*/;
            resourceInputs["serviceHost"] = undefined /*out*/;
            resourceInputs["servicePassword"] = undefined /*out*/;
            resourceInputs["servicePort"] = undefined /*out*/;
            resourceInputs["serviceType"] = undefined /*out*/;
            resourceInputs["serviceUri"] = undefined /*out*/;
            resourceInputs["serviceUsername"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenSearch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OpenSearch resources.
 */
export interface OpenSearchState {
    /**
     * defines where the cloud provider and region where the service is hosted in. This can be
     * changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for
     * the service. Format is cloud provider name
     * (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
     * documented on each Cloud provider's own support articles,
     * like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
     * [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     */
    cloudName?: pulumi.Input<string>;
    /**
     * Service component information objects
     */
    components?: pulumi.Input<pulumi.Input<inputs.OpenSearchComponent>[]>;
    /**
     * day of week when maintenance operations should be performed. On monday, tuesday,
     * wednesday, etc.
     */
    maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * time of day when maintenance operations should be performed. UTC time in HH:mm:
     * ss format.
     */
    maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Allow clients to connect to opensearch from the public internet for service nodes
     * that are in a project VPC or another type of private network.
     */
    opensearch?: pulumi.Input<inputs.OpenSearchOpensearch>;
    /**
     * defines Opensearch specific additional configuration options. The following
     * configuration options available:
     */
    opensearchUserConfig?: pulumi.Input<inputs.OpenSearchOpensearchUserConfig>;
    /**
     * defines what kind of computing resources are allocated for the service. It can be changed after
     * creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient
     * amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The
     * basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
     * (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
     * but naming is based on memory). The available options can be seem from
     * the [Aiven pricing page](https://aiven.io/pricing).
     */
    plan?: pulumi.Input<string>;
    /**
     * identifies the project the service belongs to. To set up proper dependency between the project
     * and the service, refer to the project as shown in the above example. Project cannot be changed later without
     * destroying and re-creating the service.
     */
    project?: pulumi.Input<string>;
    /**
     * optionally specifies the VPC the service should run in. If the value is not set the
     * service is not run inside a VPC. When set, the value should be given as a reference as shown above to set up
     * dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely
     * moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take
     * significant amount of time to complete if the service has a lot of data.
     */
    projectVpcId?: pulumi.Input<string>;
    /**
     * Opensearch hostname.
     */
    serviceHost?: pulumi.Input<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.OpenSearchServiceIntegration>[]>;
    /**
     * specifies the actual name of the service. The name cannot be changed later without
     * destroying and re-creating the service so name should be picked based on intended service usage rather than current
     * attributes.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Password used for connecting to the Opensearch service, if applicable.
     */
    servicePassword?: pulumi.Input<string>;
    /**
     * Opensearch port.
     */
    servicePort?: pulumi.Input<number>;
    /**
     * Aiven internal service type code
     */
    serviceType?: pulumi.Input<string>;
    /**
     * URI for connecting to the Opensearch service.
     */
    serviceUri?: pulumi.Input<string>;
    /**
     * Username used for connecting to the Opensearch service, if applicable.
     */
    serviceUsername?: pulumi.Input<string>;
    /**
     * Service state.
     */
    state?: pulumi.Input<string>;
    /**
     * prevents the service from being deleted. It is recommended to set this to `true`
     * for all production services to prevent unintentional service deletion. This does not shield against deleting databases
     * or topics but for services with backups much of the content can at least be restored from backup in case accidental
     * deletion is done.
     */
    terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a OpenSearch resource.
 */
export interface OpenSearchArgs {
    /**
     * defines where the cloud provider and region where the service is hosted in. This can be
     * changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for
     * the service. Format is cloud provider name
     * (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
     * documented on each Cloud provider's own support articles,
     * like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
     * [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     */
    cloudName?: pulumi.Input<string>;
    /**
     * day of week when maintenance operations should be performed. On monday, tuesday,
     * wednesday, etc.
     */
    maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * time of day when maintenance operations should be performed. UTC time in HH:mm:
     * ss format.
     */
    maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Allow clients to connect to opensearch from the public internet for service nodes
     * that are in a project VPC or another type of private network.
     */
    opensearch?: pulumi.Input<inputs.OpenSearchOpensearch>;
    /**
     * defines Opensearch specific additional configuration options. The following
     * configuration options available:
     */
    opensearchUserConfig?: pulumi.Input<inputs.OpenSearchOpensearchUserConfig>;
    /**
     * defines what kind of computing resources are allocated for the service. It can be changed after
     * creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient
     * amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The
     * basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
     * (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
     * but naming is based on memory). The available options can be seem from
     * the [Aiven pricing page](https://aiven.io/pricing).
     */
    plan?: pulumi.Input<string>;
    /**
     * identifies the project the service belongs to. To set up proper dependency between the project
     * and the service, refer to the project as shown in the above example. Project cannot be changed later without
     * destroying and re-creating the service.
     */
    project: pulumi.Input<string>;
    /**
     * optionally specifies the VPC the service should run in. If the value is not set the
     * service is not run inside a VPC. When set, the value should be given as a reference as shown above to set up
     * dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely
     * moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take
     * significant amount of time to complete if the service has a lot of data.
     */
    projectVpcId?: pulumi.Input<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.OpenSearchServiceIntegration>[]>;
    /**
     * specifies the actual name of the service. The name cannot be changed later without
     * destroying and re-creating the service so name should be picked based on intended service usage rather than current
     * attributes.
     */
    serviceName: pulumi.Input<string>;
    /**
     * prevents the service from being deleted. It is recommended to set this to `true`
     * for all production services to prevent unintentional service deletion. This does not shield against deleting databases
     * or topics but for services with backups much of the content can at least be restored from backup in case accidental
     * deletion is done.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
