// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const exampleAccess = new aiven.GovernanceAccess("example_access", {
 *     organizationId: main.id,
 *     accessName: "example-topic-access",
 *     accessType: "KAFKA",
 *     accessData: {
 *         project: exampleProject.project,
 *         serviceName: exampleKafka.serviceName,
 *         acls: [{
 *             resourceName: "example-topic",
 *             resourceType: "Topic",
 *             operation: "Read",
 *             permissionType: "ALLOW",
 *             host: "*",
 *         }],
 *     },
 *     ownerUserGroupId: example.groupId,
 * });
 * ```
 */
export class GovernanceAccess extends pulumi.CustomResource {
    /**
     * Get an existing GovernanceAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GovernanceAccessState, opts?: pulumi.CustomResourceOptions): GovernanceAccess {
        return new GovernanceAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/governanceAccess:GovernanceAccess';

    /**
     * Returns true if the given object is an instance of GovernanceAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GovernanceAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GovernanceAccess.__pulumiType;
    }

    /**
     * Details of the access. Changing this property forces recreation of the resource.
     */
    public readonly accessData!: pulumi.Output<outputs.GovernanceAccessAccessData>;
    /**
     * The name to describe the access. Maximum length: `54`. Changing this property forces recreation of the resource.
     */
    public readonly accessName!: pulumi.Output<string>;
    /**
     * The type of access. The possible value is `KAFKA`. Changing this property forces recreation of the resource.
     */
    public readonly accessType!: pulumi.Output<string>;
    /**
     * The ID of the organization. Changing this property forces recreation of the resource.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * The ID of the user group that owns the access. Maximum length: `54`. Changing this property forces recreation of the resource.
     */
    public readonly ownerUserGroupId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the access.
     */
    public /*out*/ readonly susbcriptionId!: pulumi.Output<string>;

    /**
     * Create a GovernanceAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GovernanceAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GovernanceAccessArgs | GovernanceAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GovernanceAccessState | undefined;
            resourceInputs["accessData"] = state ? state.accessData : undefined;
            resourceInputs["accessName"] = state ? state.accessName : undefined;
            resourceInputs["accessType"] = state ? state.accessType : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["ownerUserGroupId"] = state ? state.ownerUserGroupId : undefined;
            resourceInputs["susbcriptionId"] = state ? state.susbcriptionId : undefined;
        } else {
            const args = argsOrState as GovernanceAccessArgs | undefined;
            if ((!args || args.accessData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessData'");
            }
            if ((!args || args.accessName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessName'");
            }
            if ((!args || args.accessType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessType'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["accessData"] = args ? args.accessData : undefined;
            resourceInputs["accessName"] = args ? args.accessName : undefined;
            resourceInputs["accessType"] = args ? args.accessType : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["ownerUserGroupId"] = args ? args.ownerUserGroupId : undefined;
            resourceInputs["susbcriptionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GovernanceAccess.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GovernanceAccess resources.
 */
export interface GovernanceAccessState {
    /**
     * Details of the access. Changing this property forces recreation of the resource.
     */
    accessData?: pulumi.Input<inputs.GovernanceAccessAccessData>;
    /**
     * The name to describe the access. Maximum length: `54`. Changing this property forces recreation of the resource.
     */
    accessName?: pulumi.Input<string>;
    /**
     * The type of access. The possible value is `KAFKA`. Changing this property forces recreation of the resource.
     */
    accessType?: pulumi.Input<string>;
    /**
     * The ID of the organization. Changing this property forces recreation of the resource.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The ID of the user group that owns the access. Maximum length: `54`. Changing this property forces recreation of the resource.
     */
    ownerUserGroupId?: pulumi.Input<string>;
    /**
     * The ID of the access.
     */
    susbcriptionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GovernanceAccess resource.
 */
export interface GovernanceAccessArgs {
    /**
     * Details of the access. Changing this property forces recreation of the resource.
     */
    accessData: pulumi.Input<inputs.GovernanceAccessAccessData>;
    /**
     * The name to describe the access. Maximum length: `54`. Changing this property forces recreation of the resource.
     */
    accessName: pulumi.Input<string>;
    /**
     * The type of access. The possible value is `KAFKA`. Changing this property forces recreation of the resource.
     */
    accessType: pulumi.Input<string>;
    /**
     * The ID of the organization. Changing this property forces recreation of the resource.
     */
    organizationId: pulumi.Input<string>;
    /**
     * The ID of the user group that owns the access. Maximum length: `54`. Changing this property forces recreation of the resource.
     */
    ownerUserGroupId?: pulumi.Input<string>;
}
