// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Gets information about an Aiven project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const example = aiven.getOrganizationProject({
 *     projectId: foo.projectId,
 *     organizationId: foo.organizationId,
 * });
 * ```
 */
export function getOrganizationProject(args: GetOrganizationProjectArgs, opts?: pulumi.InvokeOptions): Promise<GetOrganizationProjectResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aiven:index/getOrganizationProject:getOrganizationProject", {
        "organizationId": args.organizationId,
        "projectId": args.projectId,
        "tags": args.tags,
        "timeouts": args.timeouts,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrganizationProject.
 */
export interface GetOrganizationProjectArgs {
    /**
     * ID of an organization.
     */
    organizationId: string;
    /**
     * The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource.
     */
    projectId: string;
    /**
     * Tags are key-value pairs that allow you to categorize projects.
     */
    tags?: inputs.GetOrganizationProjectTag[];
    timeouts?: inputs.GetOrganizationProjectTimeouts;
}

/**
 * A collection of values returned by getOrganizationProject.
 */
export interface GetOrganizationProjectResult {
    /**
     * Valid port number (1-65535) to use as a base for service port allocation.
     */
    readonly basePort: number;
    /**
     * Billing group ID to assign to the project. It's required when moving projects between organizations.
     */
    readonly billingGroupId: string;
    /**
     * PEM encoded certificate.
     */
    readonly caCert: string;
    /**
     * Resource ID, a composite of `organizationId` and `projectId` IDs.
     */
    readonly id: string;
    /**
     * ID of an organization.
     */
    readonly organizationId: string;
    /**
     * Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
     */
    readonly parentId: string;
    /**
     * The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource.
     */
    readonly projectId: string;
    /**
     * Tags are key-value pairs that allow you to categorize projects.
     */
    readonly tags?: outputs.GetOrganizationProjectTag[];
    /**
     * The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
     */
    readonly technicalEmails: string[];
    readonly timeouts?: outputs.GetOrganizationProjectTimeouts;
}
/**
 * Gets information about an Aiven project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const example = aiven.getOrganizationProject({
 *     projectId: foo.projectId,
 *     organizationId: foo.organizationId,
 * });
 * ```
 */
export function getOrganizationProjectOutput(args: GetOrganizationProjectOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOrganizationProjectResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aiven:index/getOrganizationProject:getOrganizationProject", {
        "organizationId": args.organizationId,
        "projectId": args.projectId,
        "tags": args.tags,
        "timeouts": args.timeouts,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrganizationProject.
 */
export interface GetOrganizationProjectOutputArgs {
    /**
     * ID of an organization.
     */
    organizationId: pulumi.Input<string>;
    /**
     * The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource.
     */
    projectId: pulumi.Input<string>;
    /**
     * Tags are key-value pairs that allow you to categorize projects.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GetOrganizationProjectTagArgs>[]>;
    timeouts?: pulumi.Input<inputs.GetOrganizationProjectTimeoutsArgs>;
}
