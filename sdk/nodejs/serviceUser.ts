// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Service User Resource
 *
 * The Service User resource allows the creation and management of Aiven Service Users.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myserviceuser = new aiven.ServiceUser("myserviceuser", {
 *     project: aiven_project_myproject.project,
 *     serviceName: aiven_service_myservice.serviceName,
 *     username: "<USERNAME>",
 * });
 * ```
 */
export class ServiceUser extends pulumi.CustomResource {
    /**
     * Get an existing ServiceUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceUserState, opts?: pulumi.CustomResourceOptions): ServiceUser {
        return new ServiceUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/serviceUser:ServiceUser';

    /**
     * Returns true if the given object is an instance of ServiceUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceUser.__pulumiType;
    }

    /**
     * is the access certificate of the user (not applicable for all services).
     */
    public /*out*/ readonly accessCert!: pulumi.Output<string>;
    /**
     * is the access key of the user (not applicable for all services).
     */
    public /*out*/ readonly accessKey!: pulumi.Output<string>;
    /**
     * is the password of the user (not applicable for all services).
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * and `serviceName` - (Required) define the project and service the user belongs to.
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Service to link the user to
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * tells whether the user is primary account or regular account.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * is the actual name of the user account.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ServiceUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceUserArgs | ServiceUserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServiceUserState | undefined;
            inputs["accessCert"] = state ? state.accessCert : undefined;
            inputs["accessKey"] = state ? state.accessKey : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ServiceUserArgs | undefined;
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (!args || args.username === undefined) {
                throw new Error("Missing required property 'username'");
            }
            inputs["project"] = args ? args.project : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["accessCert"] = undefined /*out*/;
            inputs["accessKey"] = undefined /*out*/;
            inputs["password"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ServiceUser.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceUser resources.
 */
export interface ServiceUserState {
    /**
     * is the access certificate of the user (not applicable for all services).
     */
    readonly accessCert?: pulumi.Input<string>;
    /**
     * is the access key of the user (not applicable for all services).
     */
    readonly accessKey?: pulumi.Input<string>;
    /**
     * is the password of the user (not applicable for all services).
     */
    readonly password?: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the user belongs to.
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Service to link the user to
     */
    readonly serviceName?: pulumi.Input<string>;
    /**
     * tells whether the user is primary account or regular account.
     */
    readonly type?: pulumi.Input<string>;
    /**
     * is the actual name of the user account.
     */
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceUser resource.
 */
export interface ServiceUserArgs {
    /**
     * and `serviceName` - (Required) define the project and service the user belongs to.
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    readonly project: pulumi.Input<string>;
    /**
     * Service to link the user to
     */
    readonly serviceName: pulumi.Input<string>;
    /**
     * is the actual name of the user account.
     */
    readonly username: pulumi.Input<string>;
}
