// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The Service User resource allows the creation and management of Aiven Service Users.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myserviceuser = new aiven.ServiceUser("myserviceuser", {
 *     project: aiven_project.myproject.project,
 *     serviceName: aiven_service.myservice.service_name,
 *     username: "<USERNAME>",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/serviceUser:ServiceUser myserviceuser project/service_name/username
 * ```
 */
export class ServiceUser extends pulumi.CustomResource {
    /**
     * Get an existing ServiceUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceUserState, opts?: pulumi.CustomResourceOptions): ServiceUser {
        return new ServiceUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/serviceUser:ServiceUser';

    /**
     * Returns true if the given object is an instance of ServiceUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceUser.__pulumiType;
    }

    /**
     * Access certificate for the user if applicable for the service in question
     */
    public /*out*/ readonly accessCert!: pulumi.Output<string>;
    /**
     * Access certificate key for the user if applicable for the service in question
     */
    public /*out*/ readonly accessKey!: pulumi.Output<string>;
    /**
     * Authentication details. The possible values are `cachingSha2Password` and `mysqlNativePassword`.
     */
    public readonly authentication!: pulumi.Output<string | undefined>;
    /**
     * The password of the service user ( not applicable for all services ).
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Postgres specific field, defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly pgAllowReplication!: pulumi.Output<boolean | undefined>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Redis specific field, defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly redisAclCategories!: pulumi.Output<string[] | undefined>;
    /**
     * Redis specific field, defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly redisAclChannels!: pulumi.Output<string[] | undefined>;
    /**
     * Redis specific field, defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly redisAclCommands!: pulumi.Output<string[] | undefined>;
    /**
     * Redis specific field, defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly redisAclKeys!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Type of the user account. Tells wether the user is the primary account or a regular account.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The actual name of the service user. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ServiceUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceUserArgs | ServiceUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceUserState | undefined;
            resourceInputs["accessCert"] = state ? state.accessCert : undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pgAllowReplication"] = state ? state.pgAllowReplication : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["redisAclCategories"] = state ? state.redisAclCategories : undefined;
            resourceInputs["redisAclChannels"] = state ? state.redisAclChannels : undefined;
            resourceInputs["redisAclCommands"] = state ? state.redisAclCommands : undefined;
            resourceInputs["redisAclKeys"] = state ? state.redisAclKeys : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ServiceUserArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["pgAllowReplication"] = args ? args.pgAllowReplication : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["redisAclCategories"] = args ? args.redisAclCategories : undefined;
            resourceInputs["redisAclChannels"] = args ? args.redisAclChannels : undefined;
            resourceInputs["redisAclCommands"] = args ? args.redisAclCommands : undefined;
            resourceInputs["redisAclKeys"] = args ? args.redisAclKeys : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["accessCert"] = undefined /*out*/;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceUser resources.
 */
export interface ServiceUserState {
    /**
     * Access certificate for the user if applicable for the service in question
     */
    accessCert?: pulumi.Input<string>;
    /**
     * Access certificate key for the user if applicable for the service in question
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Authentication details. The possible values are `cachingSha2Password` and `mysqlNativePassword`.
     */
    authentication?: pulumi.Input<string>;
    /**
     * The password of the service user ( not applicable for all services ).
     */
    password?: pulumi.Input<string>;
    /**
     * Postgres specific field, defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
     */
    pgAllowReplication?: pulumi.Input<boolean>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * Redis specific field, defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
     */
    redisAclCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis specific field, defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
     */
    redisAclChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis specific field, defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
     */
    redisAclCommands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis specific field, defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
     */
    redisAclKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Type of the user account. Tells wether the user is the primary account or a regular account.
     */
    type?: pulumi.Input<string>;
    /**
     * The actual name of the service user. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceUser resource.
 */
export interface ServiceUserArgs {
    /**
     * Authentication details. The possible values are `cachingSha2Password` and `mysqlNativePassword`.
     */
    authentication?: pulumi.Input<string>;
    /**
     * The password of the service user ( not applicable for all services ).
     */
    password?: pulumi.Input<string>;
    /**
     * Postgres specific field, defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
     */
    pgAllowReplication?: pulumi.Input<boolean>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * Redis specific field, defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
     */
    redisAclCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis specific field, defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
     */
    redisAclChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis specific field, defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
     */
    redisAclCommands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis specific field, defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
     */
    redisAclKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The actual name of the service user. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    username: pulumi.Input<string>;
}
