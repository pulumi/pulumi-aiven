// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Elasticsearch ACL Rule Resource
 *
 * The Elasticsearch ACL Rule resource models a single ACL Rule for an Aiven Elasticsearch service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const esUser = new aiven.ServiceUser("esUser", {
 *     project: _var.aiven_project_name,
 *     serviceName: aiven_elasticsearch.es_test.service_name,
 *     username: "documentation-user-1",
 * });
 * const esUser2 = new aiven.ServiceUser("esUser2", {
 *     project: _var.aiven_project_name,
 *     serviceName: aiven_elasticsearch.es_test.service_name,
 *     username: "documentation-user-2",
 * });
 * const esAclsConfig = new aiven.ElasticSearchAclConfig("esAclsConfig", {
 *     project: _var.aiven_project_name,
 *     serviceName: aiven_elasticsearch.es_test.service_name,
 *     enabled: true,
 *     extendedAcl: false,
 * });
 * const aclRules = [
 *     {
 *         username: esUser.username,
 *         index: "index2",
 *         permission: "readwrite",
 *     },
 *     {
 *         username: esUser.username,
 *         index: "index3",
 *         permission: "read",
 *     },
 *     {
 *         username: esUser.username,
 *         index: "index5",
 *         permission: "deny",
 *     },
 *     {
 *         username: esUser2.username,
 *         index: "index3",
 *         permission: "write",
 *     },
 *     {
 *         username: esUser2.username,
 *         index: "index7",
 *         permission: "readwrite",
 *     },
 * ];
 * const esAclRule: aiven.ElasticSearchAclRule[];
 * for (const range of Object.entries(aclRules.map((v, k) => [k, v]).reduce((__obj, [, ]) => { ...__obj, [i]: v })).map(([k, v]) => {key: k, value: v})) {
 *     esAclRule.push(new aiven.ElasticSearchAclRule(`esAclRule-${range.key}`, {
 *         project: esAclsConfig.project,
 *         serviceName: esAclsConfig.serviceName,
 *         username: range.value.username,
 *         index: range.value.index,
 *         permission: range.value.permission,
 *     }));
 * }
 * ```
 */
export class ElasticSearchAclRule extends pulumi.CustomResource {
    /**
     * Get an existing ElasticSearchAclRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticSearchAclRuleState, opts?: pulumi.CustomResourceOptions): ElasticSearchAclRule {
        return new ElasticSearchAclRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/elasticSearchAclRule:ElasticSearchAclRule';

    /**
     * Returns true if the given object is an instance of ElasticSearchAclRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticSearchAclRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticSearchAclRule.__pulumiType;
    }

    /**
     * Elasticsearch index pattern
     */
    public readonly index!: pulumi.Output<string>;
    /**
     * is the Elasticsearch permission, list of supported permissions: 
     * `deny`, `admin`, `read`, `readwrite`, `write`.
     */
    public readonly permission!: pulumi.Output<string>;
    /**
     * and `serviceName` - (Required) define the project and service the ACL belongs to.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Service to link the Elasticsearch ACLs to
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * and `index` - (Required) define the username and index the ACL rule should apply to.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ElasticSearchAclRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticSearchAclRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticSearchAclRuleArgs | ElasticSearchAclRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticSearchAclRuleState | undefined;
            inputs["index"] = state ? state.index : undefined;
            inputs["permission"] = state ? state.permission : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ElasticSearchAclRuleArgs | undefined;
            if ((!args || args.index === undefined) && !opts.urn) {
                throw new Error("Missing required property 'index'");
            }
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            inputs["index"] = args ? args.index : undefined;
            inputs["permission"] = args ? args.permission : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["username"] = args ? args.username : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ElasticSearchAclRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElasticSearchAclRule resources.
 */
export interface ElasticSearchAclRuleState {
    /**
     * Elasticsearch index pattern
     */
    index?: pulumi.Input<string>;
    /**
     * is the Elasticsearch permission, list of supported permissions: 
     * `deny`, `admin`, `read`, `readwrite`, `write`.
     */
    permission?: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the ACL belongs to.
     */
    project?: pulumi.Input<string>;
    /**
     * Service to link the Elasticsearch ACLs to
     */
    serviceName?: pulumi.Input<string>;
    /**
     * and `index` - (Required) define the username and index the ACL rule should apply to.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElasticSearchAclRule resource.
 */
export interface ElasticSearchAclRuleArgs {
    /**
     * Elasticsearch index pattern
     */
    index: pulumi.Input<string>;
    /**
     * is the Elasticsearch permission, list of supported permissions: 
     * `deny`, `admin`, `read`, `readwrite`, `write`.
     */
    permission: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the ACL belongs to.
     */
    project: pulumi.Input<string>;
    /**
     * Service to link the Elasticsearch ACLs to
     */
    serviceName: pulumi.Input<string>;
    /**
     * and `index` - (Required) define the username and index the ACL rule should apply to.
     */
    username: pulumi.Input<string>;
}
