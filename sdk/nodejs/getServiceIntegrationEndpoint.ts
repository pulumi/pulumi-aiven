// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Service Integration Endpoint Data Source
 *
 * The Service Integration Endpoint data source provides information about the existing
 * Aiven Service Integration Endpoint.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myendpoint = aiven.getServiceIntegrationEndpoint({
 *     project: aiven_project.myproject.project,
 *     endpointName: "<ENDPOINT_NAME>",
 * });
 * ```
 */
export function getServiceIntegrationEndpoint(args: GetServiceIntegrationEndpointArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceIntegrationEndpointResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aiven:index/getServiceIntegrationEndpoint:getServiceIntegrationEndpoint", {
        "datadogUserConfig": args.datadogUserConfig,
        "endpointConfig": args.endpointConfig,
        "endpointName": args.endpointName,
        "endpointType": args.endpointType,
        "externalAwsCloudwatchLogsUserConfig": args.externalAwsCloudwatchLogsUserConfig,
        "externalAwsCloudwatchMetricsUserConfig": args.externalAwsCloudwatchMetricsUserConfig,
        "externalElasticsearchLogsUserConfig": args.externalElasticsearchLogsUserConfig,
        "externalGoogleCloudLoggingUserConfig": args.externalGoogleCloudLoggingUserConfig,
        "externalKafkaUserConfig": args.externalKafkaUserConfig,
        "externalSchemaRegistryUserConfig": args.externalSchemaRegistryUserConfig,
        "jolokiaUserConfig": args.jolokiaUserConfig,
        "project": args.project,
        "prometheusUserConfig": args.prometheusUserConfig,
        "rsyslogUserConfig": args.rsyslogUserConfig,
        "signalfxUserConfig": args.signalfxUserConfig,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceIntegrationEndpoint.
 */
export interface GetServiceIntegrationEndpointArgs {
    datadogUserConfig?: inputs.GetServiceIntegrationEndpointDatadogUserConfig;
    endpointConfig?: {[key: string]: string};
    /**
     * is the name of the endpoint. This value has no effect beyond being used
     * to identify different integration endpoints.
     */
    endpointName: string;
    /**
     * is the type of the external service this endpoint is associated with.
     * By the time of writing the only available option is `datadog`.
     */
    endpointType?: string;
    externalAwsCloudwatchLogsUserConfig?: inputs.GetServiceIntegrationEndpointExternalAwsCloudwatchLogsUserConfig;
    externalAwsCloudwatchMetricsUserConfig?: inputs.GetServiceIntegrationEndpointExternalAwsCloudwatchMetricsUserConfig;
    externalElasticsearchLogsUserConfig?: inputs.GetServiceIntegrationEndpointExternalElasticsearchLogsUserConfig;
    externalGoogleCloudLoggingUserConfig?: inputs.GetServiceIntegrationEndpointExternalGoogleCloudLoggingUserConfig;
    externalKafkaUserConfig?: inputs.GetServiceIntegrationEndpointExternalKafkaUserConfig;
    externalSchemaRegistryUserConfig?: inputs.GetServiceIntegrationEndpointExternalSchemaRegistryUserConfig;
    jolokiaUserConfig?: inputs.GetServiceIntegrationEndpointJolokiaUserConfig;
    /**
     * defines the project the endpoint is associated with.
     */
    project: string;
    prometheusUserConfig?: inputs.GetServiceIntegrationEndpointPrometheusUserConfig;
    rsyslogUserConfig?: inputs.GetServiceIntegrationEndpointRsyslogUserConfig;
    signalfxUserConfig?: inputs.GetServiceIntegrationEndpointSignalfxUserConfig;
}

/**
 * A collection of values returned by getServiceIntegrationEndpoint.
 */
export interface GetServiceIntegrationEndpointResult {
    readonly datadogUserConfig?: outputs.GetServiceIntegrationEndpointDatadogUserConfig;
    readonly endpointConfig: {[key: string]: string};
    readonly endpointName: string;
    /**
     * is the type of the external service this endpoint is associated with.
     * By the time of writing the only available option is `datadog`.
     */
    readonly endpointType?: string;
    readonly externalAwsCloudwatchLogsUserConfig?: outputs.GetServiceIntegrationEndpointExternalAwsCloudwatchLogsUserConfig;
    readonly externalAwsCloudwatchMetricsUserConfig?: outputs.GetServiceIntegrationEndpointExternalAwsCloudwatchMetricsUserConfig;
    readonly externalElasticsearchLogsUserConfig?: outputs.GetServiceIntegrationEndpointExternalElasticsearchLogsUserConfig;
    readonly externalGoogleCloudLoggingUserConfig?: outputs.GetServiceIntegrationEndpointExternalGoogleCloudLoggingUserConfig;
    readonly externalKafkaUserConfig?: outputs.GetServiceIntegrationEndpointExternalKafkaUserConfig;
    readonly externalSchemaRegistryUserConfig?: outputs.GetServiceIntegrationEndpointExternalSchemaRegistryUserConfig;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly jolokiaUserConfig?: outputs.GetServiceIntegrationEndpointJolokiaUserConfig;
    readonly project: string;
    readonly prometheusUserConfig?: outputs.GetServiceIntegrationEndpointPrometheusUserConfig;
    readonly rsyslogUserConfig?: outputs.GetServiceIntegrationEndpointRsyslogUserConfig;
    readonly signalfxUserConfig?: outputs.GetServiceIntegrationEndpointSignalfxUserConfig;
}

export function getServiceIntegrationEndpointOutput(args: GetServiceIntegrationEndpointOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceIntegrationEndpointResult> {
    return pulumi.output(args).apply(a => getServiceIntegrationEndpoint(a, opts))
}

/**
 * A collection of arguments for invoking getServiceIntegrationEndpoint.
 */
export interface GetServiceIntegrationEndpointOutputArgs {
    datadogUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointDatadogUserConfigArgs>;
    endpointConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is the name of the endpoint. This value has no effect beyond being used
     * to identify different integration endpoints.
     */
    endpointName: pulumi.Input<string>;
    /**
     * is the type of the external service this endpoint is associated with.
     * By the time of writing the only available option is `datadog`.
     */
    endpointType?: pulumi.Input<string>;
    externalAwsCloudwatchLogsUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointExternalAwsCloudwatchLogsUserConfigArgs>;
    externalAwsCloudwatchMetricsUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointExternalAwsCloudwatchMetricsUserConfigArgs>;
    externalElasticsearchLogsUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointExternalElasticsearchLogsUserConfigArgs>;
    externalGoogleCloudLoggingUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointExternalGoogleCloudLoggingUserConfigArgs>;
    externalKafkaUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointExternalKafkaUserConfigArgs>;
    externalSchemaRegistryUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointExternalSchemaRegistryUserConfigArgs>;
    jolokiaUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointJolokiaUserConfigArgs>;
    /**
     * defines the project the endpoint is associated with.
     */
    project: pulumi.Input<string>;
    prometheusUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointPrometheusUserConfigArgs>;
    rsyslogUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointRsyslogUserConfigArgs>;
    signalfxUserConfig?: pulumi.Input<inputs.GetServiceIntegrationEndpointSignalfxUserConfigArgs>;
}
