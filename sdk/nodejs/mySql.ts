// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # MySQL Resource
 *
 * The MySQL resource allows the creation and management of Aiven MySQL services.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const mysql1 = new aiven.MySql("mysql1", {
 *     project: data.aiven_project.foo.project,
 *     cloudName: "google-europe-west1",
 *     plan: "business-4",
 *     serviceName: "my-mysql1",
 *     maintenanceWindowDow: "monday",
 *     maintenanceWindowTime: "10:00:00",
 *     mysqlUserConfig: {
 *         mysqlVersion: 8,
 *         mysql: {
 *             sqlMode: "ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE",
 *             sqlRequirePrimaryKey: true,
 *         },
 *         publicAccess: {
 *             mysql: true,
 *         },
 *     },
 * });
 * ```
 */
export class MySql extends pulumi.CustomResource {
    /**
     * Get an existing MySql resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MySqlState, opts?: pulumi.CustomResourceOptions): MySql {
        return new MySql(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/mySql:MySql';

    /**
     * Returns true if the given object is an instance of MySql.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MySql {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MySql.__pulumiType;
    }

    /**
     * defines where the cloud provider and region where the service is hosted
     * in. This can be changed freely after service is created. Changing the value will trigger
     * a potentially lengthy migration process for the service. Format is cloud provider name
     * (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
     * specific region name. These are documented on each Cloud provider's own support articles,
     * like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
     * [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     */
    public readonly cloudName!: pulumi.Output<string | undefined>;
    /**
     * Service component information objects
     */
    public /*out*/ readonly components!: pulumi.Output<outputs.MySqlComponent[]>;
    /**
     * day of week when maintenance operations should be performed. 
     * On monday, tuesday, wednesday, etc.
     */
    public readonly maintenanceWindowDow!: pulumi.Output<string | undefined>;
    /**
     * time of day when maintenance operations should be performed. 
     * UTC time in HH:mm:ss format.
     */
    public readonly maintenanceWindowTime!: pulumi.Output<string | undefined>;
    /**
     * Allow clients to connect to mysql from the public internet for service 
     * nodes that are in a project VPC or another type of private network
     */
    public readonly mysql!: pulumi.Output<outputs.MySqlMysql>;
    /**
     * defines MySQL specific additional configuration options. The following 
     * configuration options available:
     */
    public readonly mysqlUserConfig!: pulumi.Output<outputs.MySqlMysqlUserConfig | undefined>;
    /**
     * defines what kind of computing resources are allocated for the service. It can
     * be changed after creation, though there are some restrictions when going to a smaller
     * plan such as the new plan must have sufficient amount of disk space to store all current
     * data and switching to a plan with fewer nodes might not be supported. The basic plan
     * names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
     * (roughly) the amount of memory on each node (also other attributes like number of CPUs
     * and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * identifies the project the service belongs to. To set up proper dependency
     * between the project and the service, refer to the project as shown in the above example.
     * Project cannot be changed later without destroying and re-creating the service.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * optionally specifies the VPC the service should run in. If the value
     * is not set the service is not run inside a VPC. When set, the value should be given as a
     * reference as shown above to set up dependencies correctly and the VPC must be in the same
     * cloud and region as the service itself. Project can be freely moved to and from VPC after
     * creation but doing so triggers migration to new servers so the operation can take
     * significant amount of time to complete if the service has a lot of data.
     */
    public readonly projectVpcId!: pulumi.Output<string | undefined>;
    /**
     * MySQL hostname.
     */
    public /*out*/ readonly serviceHost!: pulumi.Output<string>;
    /**
     * can be used to define service integrations that must exist
     * immediately upon service creation. By the time of writing the only such integration is
     * defining that MySQL service is a read-replica of another service. To define a read-
     * replica the following configuration needs to be added:
     */
    public readonly serviceIntegrations!: pulumi.Output<outputs.MySqlServiceIntegration[] | undefined>;
    /**
     * specifies the actual name of the service. The name cannot be changed
     * later without destroying and re-creating the service so name should be picked based on
     * intended service usage rather than current attributes.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Password used for connecting to the MySQL service, if applicable.
     */
    public /*out*/ readonly servicePassword!: pulumi.Output<string>;
    /**
     * MySQL port.
     */
    public /*out*/ readonly servicePort!: pulumi.Output<number>;
    /**
     * Aiven internal service type code
     */
    public /*out*/ readonly serviceType!: pulumi.Output<string>;
    /**
     * URI for connecting to the MySQL service.
     */
    public /*out*/ readonly serviceUri!: pulumi.Output<string>;
    /**
     * Username used for connecting to the MySQL service, if applicable.
     */
    public /*out*/ readonly serviceUsername!: pulumi.Output<string>;
    /**
     * Service state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * prevents the service from being deleted. It is recommended to
     * set this to `true` for all production services to prevent unintentional service
     * deletion. This does not shield against deleting databases or topics but for services
     * with backups much of the content can at least be restored from backup in case accidental
     * deletion is done.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a MySql resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MySqlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MySqlArgs | MySqlState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MySqlState | undefined;
            inputs["cloudName"] = state ? state.cloudName : undefined;
            inputs["components"] = state ? state.components : undefined;
            inputs["maintenanceWindowDow"] = state ? state.maintenanceWindowDow : undefined;
            inputs["maintenanceWindowTime"] = state ? state.maintenanceWindowTime : undefined;
            inputs["mysql"] = state ? state.mysql : undefined;
            inputs["mysqlUserConfig"] = state ? state.mysqlUserConfig : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["projectVpcId"] = state ? state.projectVpcId : undefined;
            inputs["serviceHost"] = state ? state.serviceHost : undefined;
            inputs["serviceIntegrations"] = state ? state.serviceIntegrations : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["servicePassword"] = state ? state.servicePassword : undefined;
            inputs["servicePort"] = state ? state.servicePort : undefined;
            inputs["serviceType"] = state ? state.serviceType : undefined;
            inputs["serviceUri"] = state ? state.serviceUri : undefined;
            inputs["serviceUsername"] = state ? state.serviceUsername : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as MySqlArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["cloudName"] = args ? args.cloudName : undefined;
            inputs["maintenanceWindowDow"] = args ? args.maintenanceWindowDow : undefined;
            inputs["maintenanceWindowTime"] = args ? args.maintenanceWindowTime : undefined;
            inputs["mysql"] = args ? args.mysql : undefined;
            inputs["mysqlUserConfig"] = args ? args.mysqlUserConfig : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["projectVpcId"] = args ? args.projectVpcId : undefined;
            inputs["serviceIntegrations"] = args ? args.serviceIntegrations : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            inputs["components"] = undefined /*out*/;
            inputs["serviceHost"] = undefined /*out*/;
            inputs["servicePassword"] = undefined /*out*/;
            inputs["servicePort"] = undefined /*out*/;
            inputs["serviceType"] = undefined /*out*/;
            inputs["serviceUri"] = undefined /*out*/;
            inputs["serviceUsername"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(MySql.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MySql resources.
 */
export interface MySqlState {
    /**
     * defines where the cloud provider and region where the service is hosted
     * in. This can be changed freely after service is created. Changing the value will trigger
     * a potentially lengthy migration process for the service. Format is cloud provider name
     * (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
     * specific region name. These are documented on each Cloud provider's own support articles,
     * like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
     * [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     */
    cloudName?: pulumi.Input<string>;
    /**
     * Service component information objects
     */
    components?: pulumi.Input<pulumi.Input<inputs.MySqlComponent>[]>;
    /**
     * day of week when maintenance operations should be performed. 
     * On monday, tuesday, wednesday, etc.
     */
    maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * time of day when maintenance operations should be performed. 
     * UTC time in HH:mm:ss format.
     */
    maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Allow clients to connect to mysql from the public internet for service 
     * nodes that are in a project VPC or another type of private network
     */
    mysql?: pulumi.Input<inputs.MySqlMysql>;
    /**
     * defines MySQL specific additional configuration options. The following 
     * configuration options available:
     */
    mysqlUserConfig?: pulumi.Input<inputs.MySqlMysqlUserConfig>;
    /**
     * defines what kind of computing resources are allocated for the service. It can
     * be changed after creation, though there are some restrictions when going to a smaller
     * plan such as the new plan must have sufficient amount of disk space to store all current
     * data and switching to a plan with fewer nodes might not be supported. The basic plan
     * names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
     * (roughly) the amount of memory on each node (also other attributes like number of CPUs
     * and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
     */
    plan?: pulumi.Input<string>;
    /**
     * identifies the project the service belongs to. To set up proper dependency
     * between the project and the service, refer to the project as shown in the above example.
     * Project cannot be changed later without destroying and re-creating the service.
     */
    project?: pulumi.Input<string>;
    /**
     * optionally specifies the VPC the service should run in. If the value
     * is not set the service is not run inside a VPC. When set, the value should be given as a
     * reference as shown above to set up dependencies correctly and the VPC must be in the same
     * cloud and region as the service itself. Project can be freely moved to and from VPC after
     * creation but doing so triggers migration to new servers so the operation can take
     * significant amount of time to complete if the service has a lot of data.
     */
    projectVpcId?: pulumi.Input<string>;
    /**
     * MySQL hostname.
     */
    serviceHost?: pulumi.Input<string>;
    /**
     * can be used to define service integrations that must exist
     * immediately upon service creation. By the time of writing the only such integration is
     * defining that MySQL service is a read-replica of another service. To define a read-
     * replica the following configuration needs to be added:
     */
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.MySqlServiceIntegration>[]>;
    /**
     * specifies the actual name of the service. The name cannot be changed
     * later without destroying and re-creating the service so name should be picked based on
     * intended service usage rather than current attributes.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Password used for connecting to the MySQL service, if applicable.
     */
    servicePassword?: pulumi.Input<string>;
    /**
     * MySQL port.
     */
    servicePort?: pulumi.Input<number>;
    /**
     * Aiven internal service type code
     */
    serviceType?: pulumi.Input<string>;
    /**
     * URI for connecting to the MySQL service.
     */
    serviceUri?: pulumi.Input<string>;
    /**
     * Username used for connecting to the MySQL service, if applicable.
     */
    serviceUsername?: pulumi.Input<string>;
    /**
     * Service state.
     */
    state?: pulumi.Input<string>;
    /**
     * prevents the service from being deleted. It is recommended to
     * set this to `true` for all production services to prevent unintentional service
     * deletion. This does not shield against deleting databases or topics but for services
     * with backups much of the content can at least be restored from backup in case accidental
     * deletion is done.
     */
    terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MySql resource.
 */
export interface MySqlArgs {
    /**
     * defines where the cloud provider and region where the service is hosted
     * in. This can be changed freely after service is created. Changing the value will trigger
     * a potentially lengthy migration process for the service. Format is cloud provider name
     * (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
     * specific region name. These are documented on each Cloud provider's own support articles,
     * like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
     * [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
     */
    cloudName?: pulumi.Input<string>;
    /**
     * day of week when maintenance operations should be performed. 
     * On monday, tuesday, wednesday, etc.
     */
    maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * time of day when maintenance operations should be performed. 
     * UTC time in HH:mm:ss format.
     */
    maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Allow clients to connect to mysql from the public internet for service 
     * nodes that are in a project VPC or another type of private network
     */
    mysql?: pulumi.Input<inputs.MySqlMysql>;
    /**
     * defines MySQL specific additional configuration options. The following 
     * configuration options available:
     */
    mysqlUserConfig?: pulumi.Input<inputs.MySqlMysqlUserConfig>;
    /**
     * defines what kind of computing resources are allocated for the service. It can
     * be changed after creation, though there are some restrictions when going to a smaller
     * plan such as the new plan must have sufficient amount of disk space to store all current
     * data and switching to a plan with fewer nodes might not be supported. The basic plan
     * names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
     * (roughly) the amount of memory on each node (also other attributes like number of CPUs
     * and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
     */
    plan?: pulumi.Input<string>;
    /**
     * identifies the project the service belongs to. To set up proper dependency
     * between the project and the service, refer to the project as shown in the above example.
     * Project cannot be changed later without destroying and re-creating the service.
     */
    project: pulumi.Input<string>;
    /**
     * optionally specifies the VPC the service should run in. If the value
     * is not set the service is not run inside a VPC. When set, the value should be given as a
     * reference as shown above to set up dependencies correctly and the VPC must be in the same
     * cloud and region as the service itself. Project can be freely moved to and from VPC after
     * creation but doing so triggers migration to new servers so the operation can take
     * significant amount of time to complete if the service has a lot of data.
     */
    projectVpcId?: pulumi.Input<string>;
    /**
     * can be used to define service integrations that must exist
     * immediately upon service creation. By the time of writing the only such integration is
     * defining that MySQL service is a read-replica of another service. To define a read-
     * replica the following configuration needs to be added:
     */
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.MySqlServiceIntegration>[]>;
    /**
     * specifies the actual name of the service. The name cannot be changed
     * later without destroying and re-creating the service so name should be picked based on
     * intended service usage rather than current attributes.
     */
    serviceName: pulumi.Input<string>;
    /**
     * prevents the service from being deleted. It is recommended to
     * set this to `true` for all production services to prevent unintentional service
     * deletion. This does not shield against deleting databases or topics but for services
     * with backups much of the content can at least be restored from backup in case accidental
     * deletion is done.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
