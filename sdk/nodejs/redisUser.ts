// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages an [Aiven for Caching](https://aiven.io/docs/products/caching) (formerly known as Aiven for Redis®) service user.
 *
 * !> **End of life notice**
 * In March 2024, a new licensing model was announced for Redis® that impacts the Aiven for Caching offering (formerly Aiven for Redis®).
 * Aiven for Caching is entering its end-of-life cycle to comply with Redis's copyright and license agreements.
 * From **February 15th, 2025**, it will not be possible to start a new Aiven for Caching service, but existing services up until version 7.2 will still be available until end of life.
 * From **March 31st, 2025**, Aiven for Caching will no longer be available and all existing services will be migrated to Aiven for Valkey™.
 * You can [upgrade to Valkey for free](https://aiven.io/docs/products/caching/howto/upgrade-aiven-for-caching-to-valkey) before then
 * and update your existing `aiven.Redis` resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const foo = new aiven.RedisUser("foo", {
 *     serviceName: bar.serviceName,
 *     project: "my-project",
 *     username: "user-1",
 *     password: "Test$1234",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/redisUser:RedisUser foo PROJECT/SERVICE_NAME/USERNAME
 * ```
 */
export class RedisUser extends pulumi.CustomResource {
    /**
     * Get an existing RedisUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisUserState, opts?: pulumi.CustomResourceOptions): RedisUser {
        return new RedisUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/redisUser:RedisUser';

    /**
     * Returns true if the given object is an instance of RedisUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisUser.__pulumiType;
    }

    /**
     * The password of the Redis User.
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. Changing this property forces recreation of the resource.
     */
    declare public readonly redisAclCategories: pulumi.Output<string[] | undefined>;
    /**
     * Defines the permitted pub/sub channel patterns. Changing this property forces recreation of the resource.
     */
    declare public readonly redisAclChannels: pulumi.Output<string[] | undefined>;
    /**
     * Defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. Changing this property forces recreation of the resource.
     */
    declare public readonly redisAclCommands: pulumi.Output<string[] | undefined>;
    /**
     * Defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. Changing this property forces recreation of the resource.
     */
    declare public readonly redisAclKeys: pulumi.Output<string[] | undefined>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly serviceName: pulumi.Output<string>;
    /**
     * Type of the user account. Tells whether the user is the primary account or a regular account.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a RedisUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisUserArgs | RedisUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisUserState | undefined;
            resourceInputs["password"] = state?.password;
            resourceInputs["project"] = state?.project;
            resourceInputs["redisAclCategories"] = state?.redisAclCategories;
            resourceInputs["redisAclChannels"] = state?.redisAclChannels;
            resourceInputs["redisAclCommands"] = state?.redisAclCommands;
            resourceInputs["redisAclKeys"] = state?.redisAclKeys;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["type"] = state?.type;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as RedisUserArgs | undefined;
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.serviceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["project"] = args?.project;
            resourceInputs["redisAclCategories"] = args?.redisAclCategories;
            resourceInputs["redisAclChannels"] = args?.redisAclChannels;
            resourceInputs["redisAclCommands"] = args?.redisAclCommands;
            resourceInputs["redisAclKeys"] = args?.redisAclKeys;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["username"] = args?.username;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedisUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RedisUser resources.
 */
export interface RedisUserState {
    /**
     * The password of the Redis User.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * Defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. Changing this property forces recreation of the resource.
     */
    redisAclCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines the permitted pub/sub channel patterns. Changing this property forces recreation of the resource.
     */
    redisAclChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. Changing this property forces recreation of the resource.
     */
    redisAclCommands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. Changing this property forces recreation of the resource.
     */
    redisAclKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Type of the user account. Tells whether the user is the primary account or a regular account.
     */
    type?: pulumi.Input<string>;
    /**
     * The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedisUser resource.
 */
export interface RedisUserArgs {
    /**
     * The password of the Redis User.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * Defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. Changing this property forces recreation of the resource.
     */
    redisAclCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines the permitted pub/sub channel patterns. Changing this property forces recreation of the resource.
     */
    redisAclChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. Changing this property forces recreation of the resource.
     */
    redisAclCommands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. Changing this property forces recreation of the resource.
     */
    redisAclKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    username: pulumi.Input<string>;
}
