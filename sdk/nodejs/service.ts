// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The Service resource allows the creation and management of Aiven Services.
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Cassandra user configurable settings
     */
    public readonly cassandraUserConfig!: pulumi.Output<outputs.ServiceCassandraUserConfig | undefined>;
    /**
     * Cassandra specific server provided values
     */
    public /*out*/ readonly cassandras!: pulumi.Output<outputs.ServiceCassandra[]>;
    /**
     * Clickhouse user configurable settings
     */
    public readonly clickhouseUserConfig!: pulumi.Output<outputs.ServiceClickhouseUserConfig | undefined>;
    /**
     * Clickhouse specific server provided values
     */
    public /*out*/ readonly clickhouses!: pulumi.Output<outputs.ServiceClickhouse[]>;
    /**
     * Cloud the service runs in
     */
    public readonly cloudName!: pulumi.Output<string | undefined>;
    /**
     * Service component information objects
     */
    public /*out*/ readonly components!: pulumi.Output<outputs.ServiceComponent[]>;
    /**
     * The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
     */
    public readonly diskSpace!: pulumi.Output<string | undefined>;
    /**
     * The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
     */
    public /*out*/ readonly diskSpaceCap!: pulumi.Output<string>;
    /**
     * The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
     */
    public /*out*/ readonly diskSpaceDefault!: pulumi.Output<string>;
    /**
     * The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
     */
    public /*out*/ readonly diskSpaceStep!: pulumi.Output<string>;
    /**
     * Disk space that service is currently using
     */
    public /*out*/ readonly diskSpaceUsed!: pulumi.Output<string>;
    /**
     * Elasticsearch user configurable settings
     */
    public readonly elasticsearchUserConfig!: pulumi.Output<outputs.ServiceElasticsearchUserConfig | undefined>;
    /**
     * Elasticsearch specific server provided values
     */
    public /*out*/ readonly elasticsearches!: pulumi.Output<outputs.ServiceElasticsearch[]>;
    /**
     * Flink user configurable settings
     */
    public readonly flinkUserConfig!: pulumi.Output<outputs.ServiceFlinkUserConfig | undefined>;
    /**
     * Flink specific server provided values
     */
    public readonly flinks!: pulumi.Output<outputs.ServiceFlink[]>;
    /**
     * Grafana user configurable settings
     */
    public readonly grafanaUserConfig!: pulumi.Output<outputs.ServiceGrafanaUserConfig | undefined>;
    /**
     * Grafana specific server provided values
     */
    public /*out*/ readonly grafanas!: pulumi.Output<outputs.ServiceGrafana[]>;
    /**
     * Influxdb user configurable settings
     */
    public readonly influxdbUserConfig!: pulumi.Output<outputs.ServiceInfluxdbUserConfig | undefined>;
    /**
     * InfluxDB specific server provided values
     */
    public /*out*/ readonly influxdbs!: pulumi.Output<outputs.ServiceInfluxdb[]>;
    /**
     * Kafka*connect user configurable settings
     */
    public readonly kafkaConnectUserConfig!: pulumi.Output<outputs.ServiceKafkaConnectUserConfig | undefined>;
    /**
     * Kafka Connect specific server provided values
     */
    public /*out*/ readonly kafkaConnects!: pulumi.Output<outputs.ServiceKafkaConnect[]>;
    /**
     * Kafka*mirrormaker user configurable settings
     */
    public readonly kafkaMirrormakerUserConfig!: pulumi.Output<outputs.ServiceKafkaMirrormakerUserConfig | undefined>;
    /**
     * Kafka MirrorMaker 2 specific server provided values
     */
    public /*out*/ readonly kafkaMirrormakers!: pulumi.Output<outputs.ServiceKafkaMirrormaker[]>;
    /**
     * Kafka user configurable settings
     */
    public readonly kafkaUserConfig!: pulumi.Output<outputs.ServiceKafkaUserConfig | undefined>;
    /**
     * Kafka specific server provided values
     */
    public readonly kafkas!: pulumi.Output<outputs.ServiceKafka[]>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    public readonly maintenanceWindowDow!: pulumi.Output<string | undefined>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    public readonly maintenanceWindowTime!: pulumi.Output<string | undefined>;
    /**
     * Mysql user configurable settings
     */
    public readonly mysqlUserConfig!: pulumi.Output<outputs.ServiceMysqlUserConfig | undefined>;
    /**
     * MySQL specific server provided values
     */
    public /*out*/ readonly mysqls!: pulumi.Output<outputs.ServiceMysql[]>;
    /**
     * Opensearch user configurable settings
     */
    public readonly opensearchUserConfig!: pulumi.Output<outputs.ServiceOpensearchUserConfig | undefined>;
    /**
     * Opensearch specific server provided values
     */
    public /*out*/ readonly opensearches!: pulumi.Output<outputs.ServiceOpensearch[]>;
    /**
     * Pg user configurable settings
     */
    public readonly pgUserConfig!: pulumi.Output<outputs.ServicePgUserConfig | undefined>;
    /**
     * PostgreSQL specific server provided values
     */
    public /*out*/ readonly pgs!: pulumi.Output<outputs.ServicePg[]>;
    /**
     * Subscription plan
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * Target project
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    public readonly projectVpcId!: pulumi.Output<string | undefined>;
    /**
     * Redis specific server provided values
     */
    public /*out*/ readonly redis!: pulumi.Output<outputs.ServiceRedi[]>;
    /**
     * Redis user configurable settings
     */
    public readonly redisUserConfig!: pulumi.Output<outputs.ServiceRedisUserConfig | undefined>;
    /**
     * Service hostname
     */
    public /*out*/ readonly serviceHost!: pulumi.Output<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    public readonly serviceIntegrations!: pulumi.Output<outputs.ServiceServiceIntegration[] | undefined>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Password used for connecting to the service, if applicable
     */
    public /*out*/ readonly servicePassword!: pulumi.Output<string>;
    /**
     * Service port
     */
    public /*out*/ readonly servicePort!: pulumi.Output<number>;
    /**
     * Service type code
     */
    public readonly serviceType!: pulumi.Output<string>;
    /**
     * URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
     */
    public /*out*/ readonly serviceUri!: pulumi.Output<string>;
    /**
     * Username used for connecting to the service, if applicable
     */
    public /*out*/ readonly serviceUsername!: pulumi.Output<string>;
    /**
     * Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` and `RUNNING`.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
     */
    public readonly staticIps!: pulumi.Output<string[] | undefined>;
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["cassandraUserConfig"] = state ? state.cassandraUserConfig : undefined;
            resourceInputs["cassandras"] = state ? state.cassandras : undefined;
            resourceInputs["clickhouseUserConfig"] = state ? state.clickhouseUserConfig : undefined;
            resourceInputs["clickhouses"] = state ? state.clickhouses : undefined;
            resourceInputs["cloudName"] = state ? state.cloudName : undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["diskSpace"] = state ? state.diskSpace : undefined;
            resourceInputs["diskSpaceCap"] = state ? state.diskSpaceCap : undefined;
            resourceInputs["diskSpaceDefault"] = state ? state.diskSpaceDefault : undefined;
            resourceInputs["diskSpaceStep"] = state ? state.diskSpaceStep : undefined;
            resourceInputs["diskSpaceUsed"] = state ? state.diskSpaceUsed : undefined;
            resourceInputs["elasticsearchUserConfig"] = state ? state.elasticsearchUserConfig : undefined;
            resourceInputs["elasticsearches"] = state ? state.elasticsearches : undefined;
            resourceInputs["flinkUserConfig"] = state ? state.flinkUserConfig : undefined;
            resourceInputs["flinks"] = state ? state.flinks : undefined;
            resourceInputs["grafanaUserConfig"] = state ? state.grafanaUserConfig : undefined;
            resourceInputs["grafanas"] = state ? state.grafanas : undefined;
            resourceInputs["influxdbUserConfig"] = state ? state.influxdbUserConfig : undefined;
            resourceInputs["influxdbs"] = state ? state.influxdbs : undefined;
            resourceInputs["kafkaConnectUserConfig"] = state ? state.kafkaConnectUserConfig : undefined;
            resourceInputs["kafkaConnects"] = state ? state.kafkaConnects : undefined;
            resourceInputs["kafkaMirrormakerUserConfig"] = state ? state.kafkaMirrormakerUserConfig : undefined;
            resourceInputs["kafkaMirrormakers"] = state ? state.kafkaMirrormakers : undefined;
            resourceInputs["kafkaUserConfig"] = state ? state.kafkaUserConfig : undefined;
            resourceInputs["kafkas"] = state ? state.kafkas : undefined;
            resourceInputs["maintenanceWindowDow"] = state ? state.maintenanceWindowDow : undefined;
            resourceInputs["maintenanceWindowTime"] = state ? state.maintenanceWindowTime : undefined;
            resourceInputs["mysqlUserConfig"] = state ? state.mysqlUserConfig : undefined;
            resourceInputs["mysqls"] = state ? state.mysqls : undefined;
            resourceInputs["opensearchUserConfig"] = state ? state.opensearchUserConfig : undefined;
            resourceInputs["opensearches"] = state ? state.opensearches : undefined;
            resourceInputs["pgUserConfig"] = state ? state.pgUserConfig : undefined;
            resourceInputs["pgs"] = state ? state.pgs : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectVpcId"] = state ? state.projectVpcId : undefined;
            resourceInputs["redis"] = state ? state.redis : undefined;
            resourceInputs["redisUserConfig"] = state ? state.redisUserConfig : undefined;
            resourceInputs["serviceHost"] = state ? state.serviceHost : undefined;
            resourceInputs["serviceIntegrations"] = state ? state.serviceIntegrations : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["servicePassword"] = state ? state.servicePassword : undefined;
            resourceInputs["servicePort"] = state ? state.servicePort : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["serviceUri"] = state ? state.serviceUri : undefined;
            resourceInputs["serviceUsername"] = state ? state.serviceUsername : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["staticIps"] = state ? state.staticIps : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.serviceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceType'");
            }
            resourceInputs["cassandraUserConfig"] = args ? args.cassandraUserConfig : undefined;
            resourceInputs["clickhouseUserConfig"] = args ? args.clickhouseUserConfig : undefined;
            resourceInputs["cloudName"] = args ? args.cloudName : undefined;
            resourceInputs["diskSpace"] = args ? args.diskSpace : undefined;
            resourceInputs["elasticsearchUserConfig"] = args ? args.elasticsearchUserConfig : undefined;
            resourceInputs["flinkUserConfig"] = args ? args.flinkUserConfig : undefined;
            resourceInputs["flinks"] = args ? args.flinks : undefined;
            resourceInputs["grafanaUserConfig"] = args ? args.grafanaUserConfig : undefined;
            resourceInputs["influxdbUserConfig"] = args ? args.influxdbUserConfig : undefined;
            resourceInputs["kafkaConnectUserConfig"] = args ? args.kafkaConnectUserConfig : undefined;
            resourceInputs["kafkaMirrormakerUserConfig"] = args ? args.kafkaMirrormakerUserConfig : undefined;
            resourceInputs["kafkaUserConfig"] = args ? args.kafkaUserConfig : undefined;
            resourceInputs["kafkas"] = args ? args.kafkas : undefined;
            resourceInputs["maintenanceWindowDow"] = args ? args.maintenanceWindowDow : undefined;
            resourceInputs["maintenanceWindowTime"] = args ? args.maintenanceWindowTime : undefined;
            resourceInputs["mysqlUserConfig"] = args ? args.mysqlUserConfig : undefined;
            resourceInputs["opensearchUserConfig"] = args ? args.opensearchUserConfig : undefined;
            resourceInputs["pgUserConfig"] = args ? args.pgUserConfig : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectVpcId"] = args ? args.projectVpcId : undefined;
            resourceInputs["redisUserConfig"] = args ? args.redisUserConfig : undefined;
            resourceInputs["serviceIntegrations"] = args ? args.serviceIntegrations : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["staticIps"] = args ? args.staticIps : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["cassandras"] = undefined /*out*/;
            resourceInputs["clickhouses"] = undefined /*out*/;
            resourceInputs["components"] = undefined /*out*/;
            resourceInputs["diskSpaceCap"] = undefined /*out*/;
            resourceInputs["diskSpaceDefault"] = undefined /*out*/;
            resourceInputs["diskSpaceStep"] = undefined /*out*/;
            resourceInputs["diskSpaceUsed"] = undefined /*out*/;
            resourceInputs["elasticsearches"] = undefined /*out*/;
            resourceInputs["grafanas"] = undefined /*out*/;
            resourceInputs["influxdbs"] = undefined /*out*/;
            resourceInputs["kafkaConnects"] = undefined /*out*/;
            resourceInputs["kafkaMirrormakers"] = undefined /*out*/;
            resourceInputs["mysqls"] = undefined /*out*/;
            resourceInputs["opensearches"] = undefined /*out*/;
            resourceInputs["pgs"] = undefined /*out*/;
            resourceInputs["redis"] = undefined /*out*/;
            resourceInputs["serviceHost"] = undefined /*out*/;
            resourceInputs["servicePassword"] = undefined /*out*/;
            resourceInputs["servicePort"] = undefined /*out*/;
            resourceInputs["serviceUri"] = undefined /*out*/;
            resourceInputs["serviceUsername"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * Cassandra user configurable settings
     */
    cassandraUserConfig?: pulumi.Input<inputs.ServiceCassandraUserConfig>;
    /**
     * Cassandra specific server provided values
     */
    cassandras?: pulumi.Input<pulumi.Input<inputs.ServiceCassandra>[]>;
    /**
     * Clickhouse user configurable settings
     */
    clickhouseUserConfig?: pulumi.Input<inputs.ServiceClickhouseUserConfig>;
    /**
     * Clickhouse specific server provided values
     */
    clickhouses?: pulumi.Input<pulumi.Input<inputs.ServiceClickhouse>[]>;
    /**
     * Cloud the service runs in
     */
    cloudName?: pulumi.Input<string>;
    /**
     * Service component information objects
     */
    components?: pulumi.Input<pulumi.Input<inputs.ServiceComponent>[]>;
    /**
     * The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
     */
    diskSpace?: pulumi.Input<string>;
    /**
     * The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
     */
    diskSpaceCap?: pulumi.Input<string>;
    /**
     * The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
     */
    diskSpaceDefault?: pulumi.Input<string>;
    /**
     * The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
     */
    diskSpaceStep?: pulumi.Input<string>;
    /**
     * Disk space that service is currently using
     */
    diskSpaceUsed?: pulumi.Input<string>;
    /**
     * Elasticsearch user configurable settings
     */
    elasticsearchUserConfig?: pulumi.Input<inputs.ServiceElasticsearchUserConfig>;
    /**
     * Elasticsearch specific server provided values
     */
    elasticsearches?: pulumi.Input<pulumi.Input<inputs.ServiceElasticsearch>[]>;
    /**
     * Flink user configurable settings
     */
    flinkUserConfig?: pulumi.Input<inputs.ServiceFlinkUserConfig>;
    /**
     * Flink specific server provided values
     */
    flinks?: pulumi.Input<pulumi.Input<inputs.ServiceFlink>[]>;
    /**
     * Grafana user configurable settings
     */
    grafanaUserConfig?: pulumi.Input<inputs.ServiceGrafanaUserConfig>;
    /**
     * Grafana specific server provided values
     */
    grafanas?: pulumi.Input<pulumi.Input<inputs.ServiceGrafana>[]>;
    /**
     * Influxdb user configurable settings
     */
    influxdbUserConfig?: pulumi.Input<inputs.ServiceInfluxdbUserConfig>;
    /**
     * InfluxDB specific server provided values
     */
    influxdbs?: pulumi.Input<pulumi.Input<inputs.ServiceInfluxdb>[]>;
    /**
     * Kafka*connect user configurable settings
     */
    kafkaConnectUserConfig?: pulumi.Input<inputs.ServiceKafkaConnectUserConfig>;
    /**
     * Kafka Connect specific server provided values
     */
    kafkaConnects?: pulumi.Input<pulumi.Input<inputs.ServiceKafkaConnect>[]>;
    /**
     * Kafka*mirrormaker user configurable settings
     */
    kafkaMirrormakerUserConfig?: pulumi.Input<inputs.ServiceKafkaMirrormakerUserConfig>;
    /**
     * Kafka MirrorMaker 2 specific server provided values
     */
    kafkaMirrormakers?: pulumi.Input<pulumi.Input<inputs.ServiceKafkaMirrormaker>[]>;
    /**
     * Kafka user configurable settings
     */
    kafkaUserConfig?: pulumi.Input<inputs.ServiceKafkaUserConfig>;
    /**
     * Kafka specific server provided values
     */
    kafkas?: pulumi.Input<pulumi.Input<inputs.ServiceKafka>[]>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Mysql user configurable settings
     */
    mysqlUserConfig?: pulumi.Input<inputs.ServiceMysqlUserConfig>;
    /**
     * MySQL specific server provided values
     */
    mysqls?: pulumi.Input<pulumi.Input<inputs.ServiceMysql>[]>;
    /**
     * Opensearch user configurable settings
     */
    opensearchUserConfig?: pulumi.Input<inputs.ServiceOpensearchUserConfig>;
    /**
     * Opensearch specific server provided values
     */
    opensearches?: pulumi.Input<pulumi.Input<inputs.ServiceOpensearch>[]>;
    /**
     * Pg user configurable settings
     */
    pgUserConfig?: pulumi.Input<inputs.ServicePgUserConfig>;
    /**
     * PostgreSQL specific server provided values
     */
    pgs?: pulumi.Input<pulumi.Input<inputs.ServicePg>[]>;
    /**
     * Subscription plan
     */
    plan?: pulumi.Input<string>;
    /**
     * Target project
     */
    project?: pulumi.Input<string>;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    projectVpcId?: pulumi.Input<string>;
    /**
     * Redis specific server provided values
     */
    redis?: pulumi.Input<pulumi.Input<inputs.ServiceRedi>[]>;
    /**
     * Redis user configurable settings
     */
    redisUserConfig?: pulumi.Input<inputs.ServiceRedisUserConfig>;
    /**
     * Service hostname
     */
    serviceHost?: pulumi.Input<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.ServiceServiceIntegration>[]>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Password used for connecting to the service, if applicable
     */
    servicePassword?: pulumi.Input<string>;
    /**
     * Service port
     */
    servicePort?: pulumi.Input<number>;
    /**
     * Service type code
     */
    serviceType?: pulumi.Input<string>;
    /**
     * URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
     */
    serviceUri?: pulumi.Input<string>;
    /**
     * Username used for connecting to the service, if applicable
     */
    serviceUsername?: pulumi.Input<string>;
    /**
     * Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` and `RUNNING`.
     */
    state?: pulumi.Input<string>;
    /**
     * Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
     */
    staticIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Cassandra user configurable settings
     */
    cassandraUserConfig?: pulumi.Input<inputs.ServiceCassandraUserConfig>;
    /**
     * Clickhouse user configurable settings
     */
    clickhouseUserConfig?: pulumi.Input<inputs.ServiceClickhouseUserConfig>;
    /**
     * Cloud the service runs in
     */
    cloudName?: pulumi.Input<string>;
    /**
     * The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
     */
    diskSpace?: pulumi.Input<string>;
    /**
     * Elasticsearch user configurable settings
     */
    elasticsearchUserConfig?: pulumi.Input<inputs.ServiceElasticsearchUserConfig>;
    /**
     * Flink user configurable settings
     */
    flinkUserConfig?: pulumi.Input<inputs.ServiceFlinkUserConfig>;
    /**
     * Flink specific server provided values
     */
    flinks?: pulumi.Input<pulumi.Input<inputs.ServiceFlink>[]>;
    /**
     * Grafana user configurable settings
     */
    grafanaUserConfig?: pulumi.Input<inputs.ServiceGrafanaUserConfig>;
    /**
     * Influxdb user configurable settings
     */
    influxdbUserConfig?: pulumi.Input<inputs.ServiceInfluxdbUserConfig>;
    /**
     * Kafka*connect user configurable settings
     */
    kafkaConnectUserConfig?: pulumi.Input<inputs.ServiceKafkaConnectUserConfig>;
    /**
     * Kafka*mirrormaker user configurable settings
     */
    kafkaMirrormakerUserConfig?: pulumi.Input<inputs.ServiceKafkaMirrormakerUserConfig>;
    /**
     * Kafka user configurable settings
     */
    kafkaUserConfig?: pulumi.Input<inputs.ServiceKafkaUserConfig>;
    /**
     * Kafka specific server provided values
     */
    kafkas?: pulumi.Input<pulumi.Input<inputs.ServiceKafka>[]>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * Mysql user configurable settings
     */
    mysqlUserConfig?: pulumi.Input<inputs.ServiceMysqlUserConfig>;
    /**
     * Opensearch user configurable settings
     */
    opensearchUserConfig?: pulumi.Input<inputs.ServiceOpensearchUserConfig>;
    /**
     * Pg user configurable settings
     */
    pgUserConfig?: pulumi.Input<inputs.ServicePgUserConfig>;
    /**
     * Subscription plan
     */
    plan?: pulumi.Input<string>;
    /**
     * Target project
     */
    project: pulumi.Input<string>;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    projectVpcId?: pulumi.Input<string>;
    /**
     * Redis user configurable settings
     */
    redisUserConfig?: pulumi.Input<inputs.ServiceRedisUserConfig>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.ServiceServiceIntegration>[]>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * Service type code
     */
    serviceType: pulumi.Input<string>;
    /**
     * Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
     */
    staticIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
