// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * 
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 * 
 * const myservice = new aiven.Service("myservice", {
 *     cloudName: "google-europe-west1",
 *     pgUserConfig: {
 *         ipFilters: ["0.0.0.0/0"],
 *         pgVersion: "10",
 *     },
 *     plan: "business-8",
 *     project: aiven_project_myproject.project,
 *     projectVpcId: aiven_project_vpc_vpc_gcp_europe_west1.id,
 *     serviceName: "<SERVICE_NAME>",
 *     serviceType: "pg",
 *     terminationProtection: true,
 * });
 * ```
 *
 * > This content is derived from https://github.com/aiven/terraform-provider-aiven/blob/master/website/docs/r/service.html.markdown.
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Cassandra specific server provided values
     */
    public readonly cassandra!: pulumi.Output<outputs.ServiceCassandra>;
    /**
     * Cassandra specific user configurable settings
     */
    public readonly cassandraUserConfig!: pulumi.Output<outputs.ServiceCassandraUserConfig | undefined>;
    /**
     * Cloud the service runs in
     */
    public readonly cloudName!: pulumi.Output<string | undefined>;
    /**
     * Service component information objects
     */
    public /*out*/ readonly components!: pulumi.Output<outputs.ServiceComponent[]>;
    /**
     * Elasticsearch specific server provided values
     */
    public readonly elasticsearch!: pulumi.Output<outputs.ServiceElasticsearch>;
    /**
     * Elasticsearch specific user configurable settings
     */
    public readonly elasticsearchUserConfig!: pulumi.Output<outputs.ServiceElasticsearchUserConfig | undefined>;
    /**
     * Grafana specific server provided values
     */
    public readonly grafana!: pulumi.Output<outputs.ServiceGrafana>;
    /**
     * Grafana specific user configurable settings
     */
    public readonly grafanaUserConfig!: pulumi.Output<outputs.ServiceGrafanaUserConfig | undefined>;
    /**
     * InfluxDB specific server provided values
     */
    public readonly influxdb!: pulumi.Output<outputs.ServiceInfluxdb>;
    /**
     * InfluxDB specific user configurable settings
     */
    public readonly influxdbUserConfig!: pulumi.Output<outputs.ServiceInfluxdbUserConfig | undefined>;
    /**
     * Kafka specific server provided values
     */
    public readonly kafka!: pulumi.Output<outputs.ServiceKafka>;
    /**
     * Kafka Connect specific server provided values
     */
    public readonly kafkaConnect!: pulumi.Output<outputs.ServiceKafkaConnect>;
    /**
     * Kafka Connect specific user configurable settings
     */
    public readonly kafkaConnectUserConfig!: pulumi.Output<outputs.ServiceKafkaConnectUserConfig | undefined>;
    /**
     * Kafka specific user configurable settings
     */
    public readonly kafkaUserConfig!: pulumi.Output<outputs.ServiceKafkaUserConfig | undefined>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    public readonly maintenanceWindowDow!: pulumi.Output<string | undefined>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    public readonly maintenanceWindowTime!: pulumi.Output<string | undefined>;
    /**
     * MySQL specific server provided values
     */
    public readonly mysql!: pulumi.Output<outputs.ServiceMysql>;
    /**
     * MySQL specific user configurable settings
     */
    public readonly mysqlUserConfig!: pulumi.Output<outputs.ServiceMysqlUserConfig | undefined>;
    /**
     * PostgreSQL specific server provided values
     */
    public readonly pg!: pulumi.Output<outputs.ServicePg>;
    /**
     * PostgreSQL specific user configurable settings
     */
    public readonly pgUserConfig!: pulumi.Output<outputs.ServicePgUserConfig | undefined>;
    /**
     * Subscription plan
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * Target project
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    public readonly projectVpcId!: pulumi.Output<string | undefined>;
    /**
     * Redis specific server provided values
     */
    public readonly redis!: pulumi.Output<outputs.ServiceRedis>;
    /**
     * Redis specific user configurable settings
     */
    public readonly redisUserConfig!: pulumi.Output<outputs.ServiceRedisUserConfig | undefined>;
    /**
     * Service hostname
     */
    public /*out*/ readonly serviceHost!: pulumi.Output<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    public readonly serviceIntegrations!: pulumi.Output<outputs.ServiceServiceIntegration[] | undefined>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Password used for connecting to the service, if applicable
     */
    public /*out*/ readonly servicePassword!: pulumi.Output<string>;
    /**
     * Service port
     */
    public /*out*/ readonly servicePort!: pulumi.Output<number>;
    /**
     * Service type code
     */
    public readonly serviceType!: pulumi.Output<string>;
    /**
     * URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
     */
    public /*out*/ readonly serviceUri!: pulumi.Output<string>;
    /**
     * Username used for connecting to the service, if applicable
     */
    public /*out*/ readonly serviceUsername!: pulumi.Output<string>;
    /**
     * Service state
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServiceState | undefined;
            inputs["cassandra"] = state ? state.cassandra : undefined;
            inputs["cassandraUserConfig"] = state ? state.cassandraUserConfig : undefined;
            inputs["cloudName"] = state ? state.cloudName : undefined;
            inputs["components"] = state ? state.components : undefined;
            inputs["elasticsearch"] = state ? state.elasticsearch : undefined;
            inputs["elasticsearchUserConfig"] = state ? state.elasticsearchUserConfig : undefined;
            inputs["grafana"] = state ? state.grafana : undefined;
            inputs["grafanaUserConfig"] = state ? state.grafanaUserConfig : undefined;
            inputs["influxdb"] = state ? state.influxdb : undefined;
            inputs["influxdbUserConfig"] = state ? state.influxdbUserConfig : undefined;
            inputs["kafka"] = state ? state.kafka : undefined;
            inputs["kafkaConnect"] = state ? state.kafkaConnect : undefined;
            inputs["kafkaConnectUserConfig"] = state ? state.kafkaConnectUserConfig : undefined;
            inputs["kafkaUserConfig"] = state ? state.kafkaUserConfig : undefined;
            inputs["maintenanceWindowDow"] = state ? state.maintenanceWindowDow : undefined;
            inputs["maintenanceWindowTime"] = state ? state.maintenanceWindowTime : undefined;
            inputs["mysql"] = state ? state.mysql : undefined;
            inputs["mysqlUserConfig"] = state ? state.mysqlUserConfig : undefined;
            inputs["pg"] = state ? state.pg : undefined;
            inputs["pgUserConfig"] = state ? state.pgUserConfig : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["projectVpcId"] = state ? state.projectVpcId : undefined;
            inputs["redis"] = state ? state.redis : undefined;
            inputs["redisUserConfig"] = state ? state.redisUserConfig : undefined;
            inputs["serviceHost"] = state ? state.serviceHost : undefined;
            inputs["serviceIntegrations"] = state ? state.serviceIntegrations : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["servicePassword"] = state ? state.servicePassword : undefined;
            inputs["servicePort"] = state ? state.servicePort : undefined;
            inputs["serviceType"] = state ? state.serviceType : undefined;
            inputs["serviceUri"] = state ? state.serviceUri : undefined;
            inputs["serviceUsername"] = state ? state.serviceUsername : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (!args || args.serviceType === undefined) {
                throw new Error("Missing required property 'serviceType'");
            }
            inputs["cassandra"] = args ? args.cassandra : undefined;
            inputs["cassandraUserConfig"] = args ? args.cassandraUserConfig : undefined;
            inputs["cloudName"] = args ? args.cloudName : undefined;
            inputs["elasticsearch"] = args ? args.elasticsearch : undefined;
            inputs["elasticsearchUserConfig"] = args ? args.elasticsearchUserConfig : undefined;
            inputs["grafana"] = args ? args.grafana : undefined;
            inputs["grafanaUserConfig"] = args ? args.grafanaUserConfig : undefined;
            inputs["influxdb"] = args ? args.influxdb : undefined;
            inputs["influxdbUserConfig"] = args ? args.influxdbUserConfig : undefined;
            inputs["kafka"] = args ? args.kafka : undefined;
            inputs["kafkaConnect"] = args ? args.kafkaConnect : undefined;
            inputs["kafkaConnectUserConfig"] = args ? args.kafkaConnectUserConfig : undefined;
            inputs["kafkaUserConfig"] = args ? args.kafkaUserConfig : undefined;
            inputs["maintenanceWindowDow"] = args ? args.maintenanceWindowDow : undefined;
            inputs["maintenanceWindowTime"] = args ? args.maintenanceWindowTime : undefined;
            inputs["mysql"] = args ? args.mysql : undefined;
            inputs["mysqlUserConfig"] = args ? args.mysqlUserConfig : undefined;
            inputs["pg"] = args ? args.pg : undefined;
            inputs["pgUserConfig"] = args ? args.pgUserConfig : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["projectVpcId"] = args ? args.projectVpcId : undefined;
            inputs["redis"] = args ? args.redis : undefined;
            inputs["redisUserConfig"] = args ? args.redisUserConfig : undefined;
            inputs["serviceIntegrations"] = args ? args.serviceIntegrations : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["serviceType"] = args ? args.serviceType : undefined;
            inputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            inputs["components"] = undefined /*out*/;
            inputs["serviceHost"] = undefined /*out*/;
            inputs["servicePassword"] = undefined /*out*/;
            inputs["servicePort"] = undefined /*out*/;
            inputs["serviceUri"] = undefined /*out*/;
            inputs["serviceUsername"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Service.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * Cassandra specific server provided values
     */
    readonly cassandra?: pulumi.Input<inputs.ServiceCassandra>;
    /**
     * Cassandra specific user configurable settings
     */
    readonly cassandraUserConfig?: pulumi.Input<inputs.ServiceCassandraUserConfig>;
    /**
     * Cloud the service runs in
     */
    readonly cloudName?: pulumi.Input<string>;
    /**
     * Service component information objects
     */
    readonly components?: pulumi.Input<pulumi.Input<inputs.ServiceComponent>[]>;
    /**
     * Elasticsearch specific server provided values
     */
    readonly elasticsearch?: pulumi.Input<inputs.ServiceElasticsearch>;
    /**
     * Elasticsearch specific user configurable settings
     */
    readonly elasticsearchUserConfig?: pulumi.Input<inputs.ServiceElasticsearchUserConfig>;
    /**
     * Grafana specific server provided values
     */
    readonly grafana?: pulumi.Input<inputs.ServiceGrafana>;
    /**
     * Grafana specific user configurable settings
     */
    readonly grafanaUserConfig?: pulumi.Input<inputs.ServiceGrafanaUserConfig>;
    /**
     * InfluxDB specific server provided values
     */
    readonly influxdb?: pulumi.Input<inputs.ServiceInfluxdb>;
    /**
     * InfluxDB specific user configurable settings
     */
    readonly influxdbUserConfig?: pulumi.Input<inputs.ServiceInfluxdbUserConfig>;
    /**
     * Kafka specific server provided values
     */
    readonly kafka?: pulumi.Input<inputs.ServiceKafka>;
    /**
     * Kafka Connect specific server provided values
     */
    readonly kafkaConnect?: pulumi.Input<inputs.ServiceKafkaConnect>;
    /**
     * Kafka Connect specific user configurable settings
     */
    readonly kafkaConnectUserConfig?: pulumi.Input<inputs.ServiceKafkaConnectUserConfig>;
    /**
     * Kafka specific user configurable settings
     */
    readonly kafkaUserConfig?: pulumi.Input<inputs.ServiceKafkaUserConfig>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    readonly maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    readonly maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * MySQL specific server provided values
     */
    readonly mysql?: pulumi.Input<inputs.ServiceMysql>;
    /**
     * MySQL specific user configurable settings
     */
    readonly mysqlUserConfig?: pulumi.Input<inputs.ServiceMysqlUserConfig>;
    /**
     * PostgreSQL specific server provided values
     */
    readonly pg?: pulumi.Input<inputs.ServicePg>;
    /**
     * PostgreSQL specific user configurable settings
     */
    readonly pgUserConfig?: pulumi.Input<inputs.ServicePgUserConfig>;
    /**
     * Subscription plan
     */
    readonly plan?: pulumi.Input<string>;
    /**
     * Target project
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    readonly projectVpcId?: pulumi.Input<string>;
    /**
     * Redis specific server provided values
     */
    readonly redis?: pulumi.Input<inputs.ServiceRedis>;
    /**
     * Redis specific user configurable settings
     */
    readonly redisUserConfig?: pulumi.Input<inputs.ServiceRedisUserConfig>;
    /**
     * Service hostname
     */
    readonly serviceHost?: pulumi.Input<string>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    readonly serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.ServiceServiceIntegration>[]>;
    /**
     * Service name
     */
    readonly serviceName?: pulumi.Input<string>;
    /**
     * Password used for connecting to the service, if applicable
     */
    readonly servicePassword?: pulumi.Input<string>;
    /**
     * Service port
     */
    readonly servicePort?: pulumi.Input<number>;
    /**
     * Service type code
     */
    readonly serviceType?: pulumi.Input<string>;
    /**
     * URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
     */
    readonly serviceUri?: pulumi.Input<string>;
    /**
     * Username used for connecting to the service, if applicable
     */
    readonly serviceUsername?: pulumi.Input<string>;
    /**
     * Service state
     */
    readonly state?: pulumi.Input<string>;
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    readonly terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Cassandra specific server provided values
     */
    readonly cassandra?: pulumi.Input<inputs.ServiceCassandra>;
    /**
     * Cassandra specific user configurable settings
     */
    readonly cassandraUserConfig?: pulumi.Input<inputs.ServiceCassandraUserConfig>;
    /**
     * Cloud the service runs in
     */
    readonly cloudName?: pulumi.Input<string>;
    /**
     * Elasticsearch specific server provided values
     */
    readonly elasticsearch?: pulumi.Input<inputs.ServiceElasticsearch>;
    /**
     * Elasticsearch specific user configurable settings
     */
    readonly elasticsearchUserConfig?: pulumi.Input<inputs.ServiceElasticsearchUserConfig>;
    /**
     * Grafana specific server provided values
     */
    readonly grafana?: pulumi.Input<inputs.ServiceGrafana>;
    /**
     * Grafana specific user configurable settings
     */
    readonly grafanaUserConfig?: pulumi.Input<inputs.ServiceGrafanaUserConfig>;
    /**
     * InfluxDB specific server provided values
     */
    readonly influxdb?: pulumi.Input<inputs.ServiceInfluxdb>;
    /**
     * InfluxDB specific user configurable settings
     */
    readonly influxdbUserConfig?: pulumi.Input<inputs.ServiceInfluxdbUserConfig>;
    /**
     * Kafka specific server provided values
     */
    readonly kafka?: pulumi.Input<inputs.ServiceKafka>;
    /**
     * Kafka Connect specific server provided values
     */
    readonly kafkaConnect?: pulumi.Input<inputs.ServiceKafkaConnect>;
    /**
     * Kafka Connect specific user configurable settings
     */
    readonly kafkaConnectUserConfig?: pulumi.Input<inputs.ServiceKafkaConnectUserConfig>;
    /**
     * Kafka specific user configurable settings
     */
    readonly kafkaUserConfig?: pulumi.Input<inputs.ServiceKafkaUserConfig>;
    /**
     * Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
     */
    readonly maintenanceWindowDow?: pulumi.Input<string>;
    /**
     * Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
     */
    readonly maintenanceWindowTime?: pulumi.Input<string>;
    /**
     * MySQL specific server provided values
     */
    readonly mysql?: pulumi.Input<inputs.ServiceMysql>;
    /**
     * MySQL specific user configurable settings
     */
    readonly mysqlUserConfig?: pulumi.Input<inputs.ServiceMysqlUserConfig>;
    /**
     * PostgreSQL specific server provided values
     */
    readonly pg?: pulumi.Input<inputs.ServicePg>;
    /**
     * PostgreSQL specific user configurable settings
     */
    readonly pgUserConfig?: pulumi.Input<inputs.ServicePgUserConfig>;
    /**
     * Subscription plan
     */
    readonly plan?: pulumi.Input<string>;
    /**
     * Target project
     */
    readonly project: pulumi.Input<string>;
    /**
     * Identifier of the VPC the service should be in, if any
     */
    readonly projectVpcId?: pulumi.Input<string>;
    /**
     * Redis specific server provided values
     */
    readonly redis?: pulumi.Input<inputs.ServiceRedis>;
    /**
     * Redis specific user configurable settings
     */
    readonly redisUserConfig?: pulumi.Input<inputs.ServiceRedisUserConfig>;
    /**
     * Service integrations to specify when creating a service. Not applied after initial service creation
     */
    readonly serviceIntegrations?: pulumi.Input<pulumi.Input<inputs.ServiceServiceIntegration>[]>;
    /**
     * Service name
     */
    readonly serviceName: pulumi.Input<string>;
    /**
     * Service type code
     */
    readonly serviceType: pulumi.Input<string>;
    /**
     * Prevent service from being deleted. It is recommended to have this enabled for all services.
     */
    readonly terminationProtection?: pulumi.Input<boolean>;
}
