// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages quotas for an Aiven for Apache KafkaÂ® service user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const exampleQuota = new aiven.KafkaQuota("example_quota", {
 *     project: foo.project,
 *     serviceName: exampleKafka.serviceName,
 *     user: "example-kafka-user",
 *     clientId: "example_client",
 *     consumerByteRate: 1000,
 *     producerByteRate: 1000,
 *     requestPercentage: 50,
 * });
 * ```
 *
 * ## Import
 *
 * When both USER and CLIENT_ID are specified
 *
 * ```sh
 * $ pulumi import aiven:index/kafkaQuota:KafkaQuota example_quota PROJECT/SERVICE_NAME/CLIENT_ID/USER
 * ```
 *
 * When only USER is specified
 *
 * ```sh
 * $ pulumi import aiven:index/kafkaQuota:KafkaQuota example_quota PROJECT/SERVICE_NAME//USER
 * ```
 *
 * When only CLIENT_ID is specified
 *
 * ```sh
 * $ pulumi import aiven:index/kafkaQuota:KafkaQuota example_quota PROJECT/SERVICE_NAME/CLIENT_ID/
 * ```
 */
export class KafkaQuota extends pulumi.CustomResource {
    /**
     * Get an existing KafkaQuota resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaQuotaState, opts?: pulumi.CustomResourceOptions): KafkaQuota {
        return new KafkaQuota(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaQuota:KafkaQuota';

    /**
     * Returns true if the given object is an instance of KafkaQuota.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaQuota {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaQuota.__pulumiType;
    }

    /**
     * Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
     */
    declare public readonly clientId: pulumi.Output<string | undefined>;
    /**
     * Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     */
    declare public readonly consumerByteRate: pulumi.Output<number | undefined>;
    /**
     * Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     */
    declare public readonly producerByteRate: pulumi.Output<number | undefined>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
     * Exceeding this limit triggers throttling.
     * The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
     */
    declare public readonly requestPercentage: pulumi.Output<number | undefined>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly serviceName: pulumi.Output<string>;
    /**
     * Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
     */
    declare public readonly user: pulumi.Output<string | undefined>;

    /**
     * Create a KafkaQuota resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaQuotaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaQuotaArgs | KafkaQuotaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaQuotaState | undefined;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["consumerByteRate"] = state?.consumerByteRate;
            resourceInputs["producerByteRate"] = state?.producerByteRate;
            resourceInputs["project"] = state?.project;
            resourceInputs["requestPercentage"] = state?.requestPercentage;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["user"] = state?.user;
        } else {
            const args = argsOrState as KafkaQuotaArgs | undefined;
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.serviceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["consumerByteRate"] = args?.consumerByteRate;
            resourceInputs["producerByteRate"] = args?.producerByteRate;
            resourceInputs["project"] = args?.project;
            resourceInputs["requestPercentage"] = args?.requestPercentage;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["user"] = args?.user;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaQuota.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaQuota resources.
 */
export interface KafkaQuotaState {
    /**
     * Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
     */
    clientId?: pulumi.Input<string>;
    /**
     * Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     */
    consumerByteRate?: pulumi.Input<number>;
    /**
     * Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     */
    producerByteRate?: pulumi.Input<number>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
     * Exceeding this limit triggers throttling.
     * The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
     */
    requestPercentage?: pulumi.Input<number>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaQuota resource.
 */
export interface KafkaQuotaArgs {
    /**
     * Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
     */
    clientId?: pulumi.Input<string>;
    /**
     * Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     */
    consumerByteRate?: pulumi.Input<number>;
    /**
     * Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
     * Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
     * Exceeding this limit results in client throttling.
     */
    producerByteRate?: pulumi.Input<number>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
     * Exceeding this limit triggers throttling.
     * The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
     */
    requestPercentage?: pulumi.Input<number>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Represents a logical group of clients, assigned a unique name by the client application.
     * Quotas can be applied based on user, client-id, or both.
     * The most relevant quota is chosen for each connection.
     * All connections within a quota group share the same quota.
     * It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
     */
    user?: pulumi.Input<string>;
}
