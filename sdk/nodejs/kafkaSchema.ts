// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Kafka Schema Resource
 *
 * The Kafka Schema resource allows the creation and management of Aiven Kafka Schemas.
 */
export class KafkaSchema extends pulumi.CustomResource {
    /**
     * Get an existing KafkaSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaSchemaState, opts?: pulumi.CustomResourceOptions): KafkaSchema {
        return new KafkaSchema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaSchema:KafkaSchema';

    /**
     * Returns true if the given object is an instance of KafkaSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaSchema.__pulumiType;
    }

    /**
     * configuration compatibility level overrides specific subject
     * resource. If the compatibility level not specified for the individual subject by default,
     * it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
     * `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
     */
    public readonly compatibilityLevel!: pulumi.Output<string | undefined>;
    /**
     * and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to. 
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * is Kafka Schema configuration should be a valid Avro Schema JSON format.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * Service to link the Kafka Schema to
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * is Kafka Schema subject name.
     */
    public readonly subjectName!: pulumi.Output<string>;
    /**
     * Kafka Schema configuration version
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a KafkaSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaSchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaSchemaArgs | KafkaSchemaState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaSchemaState | undefined;
            inputs["compatibilityLevel"] = state ? state.compatibilityLevel : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["schema"] = state ? state.schema : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["subjectName"] = state ? state.subjectName : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as KafkaSchemaArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.subjectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subjectName'");
            }
            inputs["compatibilityLevel"] = args ? args.compatibilityLevel : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["schema"] = args ? args.schema : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["subjectName"] = args ? args.subjectName : undefined;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(KafkaSchema.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaSchema resources.
 */
export interface KafkaSchemaState {
    /**
     * configuration compatibility level overrides specific subject
     * resource. If the compatibility level not specified for the individual subject by default,
     * it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
     * `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
     */
    compatibilityLevel?: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to. 
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    project?: pulumi.Input<string>;
    /**
     * is Kafka Schema configuration should be a valid Avro Schema JSON format.
     */
    schema?: pulumi.Input<string>;
    /**
     * Service to link the Kafka Schema to
     */
    serviceName?: pulumi.Input<string>;
    /**
     * is Kafka Schema subject name.
     */
    subjectName?: pulumi.Input<string>;
    /**
     * Kafka Schema configuration version
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KafkaSchema resource.
 */
export interface KafkaSchemaArgs {
    /**
     * configuration compatibility level overrides specific subject
     * resource. If the compatibility level not specified for the individual subject by default,
     * it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
     * `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
     */
    compatibilityLevel?: pulumi.Input<string>;
    /**
     * and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to. 
     * They should be defined using reference as shown above to set up dependencies correctly.
     */
    project: pulumi.Input<string>;
    /**
     * is Kafka Schema configuration should be a valid Avro Schema JSON format.
     */
    schema: pulumi.Input<string>;
    /**
     * Service to link the Kafka Schema to
     */
    serviceName: pulumi.Input<string>;
    /**
     * is Kafka Schema subject name.
     */
    subjectName: pulumi.Input<string>;
}
