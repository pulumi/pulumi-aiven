// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The MirrorMaker 2 Replication Flow data source provides information about the existing MirrorMaker 2 Replication Flow on Aiven Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const f1 = aiven.getMirrorMakerReplicationFlow({
 *     project: aiven_project["kafka-mm-project1"].project,
 *     serviceName: aiven_service.mm.service_name,
 *     sourceCluster: aiven_service.source.service_name,
 *     targetCluster: aiven_service.target.service_name,
 * });
 * ```
 */
export function getMirrorMakerReplicationFlow(args: GetMirrorMakerReplicationFlowArgs, opts?: pulumi.InvokeOptions): Promise<GetMirrorMakerReplicationFlowResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aiven:index/getMirrorMakerReplicationFlow:getMirrorMakerReplicationFlow", {
        "project": args.project,
        "serviceName": args.serviceName,
        "sourceCluster": args.sourceCluster,
        "targetCluster": args.targetCluster,
    }, opts);
}

/**
 * A collection of arguments for invoking getMirrorMakerReplicationFlow.
 */
export interface GetMirrorMakerReplicationFlowArgs {
    project: string;
    serviceName: string;
    sourceCluster: string;
    targetCluster: string;
}

/**
 * A collection of values returned by getMirrorMakerReplicationFlow.
 */
export interface GetMirrorMakerReplicationFlowResult {
    readonly emitHeartbeatsEnabled: boolean;
    readonly enable: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly project: string;
    readonly replicationPolicyClass: string;
    readonly serviceName: string;
    readonly sourceCluster: string;
    readonly syncGroupOffsetsEnabled: boolean;
    readonly syncGroupOffsetsIntervalSeconds: number;
    readonly targetCluster: string;
    readonly topics: string[];
    readonly topicsBlacklists: string[];
}

export function getMirrorMakerReplicationFlowOutput(args: GetMirrorMakerReplicationFlowOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMirrorMakerReplicationFlowResult> {
    return pulumi.output(args).apply(a => getMirrorMakerReplicationFlow(a, opts))
}

/**
 * A collection of arguments for invoking getMirrorMakerReplicationFlow.
 */
export interface GetMirrorMakerReplicationFlowOutputArgs {
    project: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    sourceCluster: pulumi.Input<string>;
    targetCluster: pulumi.Input<string>;
}
