// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KafkaConnector extends pulumi.CustomResource {
    /**
     * Get an existing KafkaConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaConnectorState, opts?: pulumi.CustomResourceOptions): KafkaConnector {
        return new KafkaConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaConnector:KafkaConnector';

    /**
     * Returns true if the given object is an instance of KafkaConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaConnector.__pulumiType;
    }

    /**
     * Kafka Connector configuration parameters
     */
    public readonly config!: pulumi.Output<{[key: string]: string}>;
    /**
     * Kafka connector name
     */
    public readonly connectorName!: pulumi.Output<string>;
    /**
     * Kafka connector author
     */
    public /*out*/ readonly pluginAuthor!: pulumi.Output<string>;
    /**
     * Kafka connector Java class
     */
    public /*out*/ readonly pluginClass!: pulumi.Output<string>;
    /**
     * Kafka connector documentation URL
     */
    public /*out*/ readonly pluginDocUrl!: pulumi.Output<string>;
    /**
     * Kafka connector title
     */
    public /*out*/ readonly pluginTitle!: pulumi.Output<string>;
    /**
     * Kafka connector type
     */
    public /*out*/ readonly pluginType!: pulumi.Output<string>;
    /**
     * Kafka connector version
     */
    public /*out*/ readonly pluginVersion!: pulumi.Output<string>;
    /**
     * Project to link the kafka connector to
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Service to link the kafka connector to
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * List of tasks of a connector
     */
    public /*out*/ readonly tasks!: pulumi.Output<outputs.KafkaConnectorTask[]>;

    /**
     * Create a KafkaConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaConnectorArgs | KafkaConnectorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as KafkaConnectorState | undefined;
            inputs["config"] = state ? state.config : undefined;
            inputs["connectorName"] = state ? state.connectorName : undefined;
            inputs["pluginAuthor"] = state ? state.pluginAuthor : undefined;
            inputs["pluginClass"] = state ? state.pluginClass : undefined;
            inputs["pluginDocUrl"] = state ? state.pluginDocUrl : undefined;
            inputs["pluginTitle"] = state ? state.pluginTitle : undefined;
            inputs["pluginType"] = state ? state.pluginType : undefined;
            inputs["pluginVersion"] = state ? state.pluginVersion : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["tasks"] = state ? state.tasks : undefined;
        } else {
            const args = argsOrState as KafkaConnectorArgs | undefined;
            if (!args || args.config === undefined) {
                throw new Error("Missing required property 'config'");
            }
            if (!args || args.connectorName === undefined) {
                throw new Error("Missing required property 'connectorName'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["config"] = args ? args.config : undefined;
            inputs["connectorName"] = args ? args.connectorName : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["pluginAuthor"] = undefined /*out*/;
            inputs["pluginClass"] = undefined /*out*/;
            inputs["pluginDocUrl"] = undefined /*out*/;
            inputs["pluginTitle"] = undefined /*out*/;
            inputs["pluginType"] = undefined /*out*/;
            inputs["pluginVersion"] = undefined /*out*/;
            inputs["tasks"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(KafkaConnector.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaConnector resources.
 */
export interface KafkaConnectorState {
    /**
     * Kafka Connector configuration parameters
     */
    readonly config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Kafka connector name
     */
    readonly connectorName?: pulumi.Input<string>;
    /**
     * Kafka connector author
     */
    readonly pluginAuthor?: pulumi.Input<string>;
    /**
     * Kafka connector Java class
     */
    readonly pluginClass?: pulumi.Input<string>;
    /**
     * Kafka connector documentation URL
     */
    readonly pluginDocUrl?: pulumi.Input<string>;
    /**
     * Kafka connector title
     */
    readonly pluginTitle?: pulumi.Input<string>;
    /**
     * Kafka connector type
     */
    readonly pluginType?: pulumi.Input<string>;
    /**
     * Kafka connector version
     */
    readonly pluginVersion?: pulumi.Input<string>;
    /**
     * Project to link the kafka connector to
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Service to link the kafka connector to
     */
    readonly serviceName?: pulumi.Input<string>;
    /**
     * List of tasks of a connector
     */
    readonly tasks?: pulumi.Input<pulumi.Input<inputs.KafkaConnectorTask>[]>;
}

/**
 * The set of arguments for constructing a KafkaConnector resource.
 */
export interface KafkaConnectorArgs {
    /**
     * Kafka Connector configuration parameters
     */
    readonly config: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Kafka connector name
     */
    readonly connectorName: pulumi.Input<string>;
    /**
     * Project to link the kafka connector to
     */
    readonly project: pulumi.Input<string>;
    /**
     * Service to link the kafka connector to
     */
    readonly serviceName: pulumi.Input<string>;
}
