// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The Kafka connectors resource allows the creation and management of Aiven Kafka connectors.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const kafka_os_con1 = new aiven.KafkaConnector("kafka-os-con1", {
 *     project: kafka_con_project1.project,
 *     serviceName: kafka_service1.serviceName,
 *     connectorName: "kafka-os-con1",
 *     config: {
 *         topics: kafka_topic1.topicName,
 *         "connector.class": "io.aiven.kafka.connect.opensearch.OpensearchSinkConnector",
 *         "type.name": "os-connector",
 *         name: "kafka-os-con1",
 *         "connection.url": os_service1.serviceUri,
 *         "connection.username": os_service1.serviceUsername,
 *         "connection.password": os_service1.servicePassword,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/kafkaConnector:KafkaConnector kafka-os-con1 project/service_name/connector_name
 * ```
 */
export class KafkaConnector extends pulumi.CustomResource {
    /**
     * Get an existing KafkaConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaConnectorState, opts?: pulumi.CustomResourceOptions): KafkaConnector {
        return new KafkaConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaConnector:KafkaConnector';

    /**
     * Returns true if the given object is an instance of KafkaConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaConnector.__pulumiType;
    }

    /**
     * The Kafka Connector configuration parameters.
     */
    public readonly config!: pulumi.Output<{[key: string]: string}>;
    /**
     * The kafka connector name. Changing this property forces recreation of the resource.
     */
    public readonly connectorName!: pulumi.Output<string>;
    /**
     * The Kafka connector author.
     */
    public /*out*/ readonly pluginAuthor!: pulumi.Output<string>;
    /**
     * The Kafka connector Java class.
     */
    public /*out*/ readonly pluginClass!: pulumi.Output<string>;
    /**
     * The Kafka connector documentation URL.
     */
    public /*out*/ readonly pluginDocUrl!: pulumi.Output<string>;
    /**
     * The Kafka connector title.
     */
    public /*out*/ readonly pluginTitle!: pulumi.Output<string>;
    /**
     * The Kafka connector type.
     */
    public /*out*/ readonly pluginType!: pulumi.Output<string>;
    /**
     * The version of the kafka connector.
     */
    public /*out*/ readonly pluginVersion!: pulumi.Output<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * List of tasks of a connector.
     */
    public /*out*/ readonly tasks!: pulumi.Output<outputs.KafkaConnectorTask[]>;

    /**
     * Create a KafkaConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaConnectorArgs | KafkaConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaConnectorState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["connectorName"] = state ? state.connectorName : undefined;
            resourceInputs["pluginAuthor"] = state ? state.pluginAuthor : undefined;
            resourceInputs["pluginClass"] = state ? state.pluginClass : undefined;
            resourceInputs["pluginDocUrl"] = state ? state.pluginDocUrl : undefined;
            resourceInputs["pluginTitle"] = state ? state.pluginTitle : undefined;
            resourceInputs["pluginType"] = state ? state.pluginType : undefined;
            resourceInputs["pluginVersion"] = state ? state.pluginVersion : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["tasks"] = state ? state.tasks : undefined;
        } else {
            const args = argsOrState as KafkaConnectorArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.connectorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorName'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["connectorName"] = args ? args.connectorName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["pluginAuthor"] = undefined /*out*/;
            resourceInputs["pluginClass"] = undefined /*out*/;
            resourceInputs["pluginDocUrl"] = undefined /*out*/;
            resourceInputs["pluginTitle"] = undefined /*out*/;
            resourceInputs["pluginType"] = undefined /*out*/;
            resourceInputs["pluginVersion"] = undefined /*out*/;
            resourceInputs["tasks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaConnector resources.
 */
export interface KafkaConnectorState {
    /**
     * The Kafka Connector configuration parameters.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The kafka connector name. Changing this property forces recreation of the resource.
     */
    connectorName?: pulumi.Input<string>;
    /**
     * The Kafka connector author.
     */
    pluginAuthor?: pulumi.Input<string>;
    /**
     * The Kafka connector Java class.
     */
    pluginClass?: pulumi.Input<string>;
    /**
     * The Kafka connector documentation URL.
     */
    pluginDocUrl?: pulumi.Input<string>;
    /**
     * The Kafka connector title.
     */
    pluginTitle?: pulumi.Input<string>;
    /**
     * The Kafka connector type.
     */
    pluginType?: pulumi.Input<string>;
    /**
     * The version of the kafka connector.
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * List of tasks of a connector.
     */
    tasks?: pulumi.Input<pulumi.Input<inputs.KafkaConnectorTask>[]>;
}

/**
 * The set of arguments for constructing a KafkaConnector resource.
 */
export interface KafkaConnectorArgs {
    /**
     * The Kafka Connector configuration parameters.
     */
    config: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The kafka connector name. Changing this property forces recreation of the resource.
     */
    connectorName: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
}
