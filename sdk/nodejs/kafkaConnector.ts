// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Aiven for Apache Kafka® [connectors](https://aiven.io/docs/products/kafka/kafka-connect/concepts/list-of-connector-plugins).
 * Source connectors let you import data from an external system into a Kafka topic. Sink connectors let you export data from a topic to an external system.
 *
 * You can use connectors with any Aiven for Apache Kafka® service that is integrated with an Aiven for Apache Kafka® Connect service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const kafka_os_connector = new aiven.KafkaConnector("kafka-os-connector", {
 *     project: exampleProject.project,
 *     serviceName: exampleKafka.serviceName,
 *     connectorName: "kafka-opensearch-connector",
 *     config: {
 *         name: "kafka-opensearch-connector",
 *         topics: exampleTopic.topicName,
 *         "connector.class": "io.aiven.kafka.connect.opensearch.OpensearchSinkConnector",
 *         "type.name": "os-connector",
 *         "connection.url": exampleOs.serviceUri,
 *         "connection.username": exampleOs.serviceUsername,
 *         "connection.password": exampleOs.servicePassword,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import aiven:index/kafkaConnector:KafkaConnector kafka-os-connector PROJECT/SERVICE_NAME/CONNECTOR_NAME
 * ```
 */
export class KafkaConnector extends pulumi.CustomResource {
    /**
     * Get an existing KafkaConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaConnectorState, opts?: pulumi.CustomResourceOptions): KafkaConnector {
        return new KafkaConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aiven:index/kafkaConnector:KafkaConnector';

    /**
     * Returns true if the given object is an instance of KafkaConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaConnector.__pulumiType;
    }

    /**
     * The Kafka connector configuration parameters.
     */
    declare public readonly config: pulumi.Output<{[key: string]: string}>;
    /**
     * The Kafka connector name. Changing this property forces recreation of the resource.
     */
    declare public readonly connectorName: pulumi.Output<string>;
    /**
     * The Kafka connector author.
     */
    declare public /*out*/ readonly pluginAuthor: pulumi.Output<string>;
    /**
     * The Kafka connector Java class.
     */
    declare public /*out*/ readonly pluginClass: pulumi.Output<string>;
    /**
     * The Kafka connector documentation URL.
     */
    declare public /*out*/ readonly pluginDocUrl: pulumi.Output<string>;
    /**
     * The Kafka connector title.
     */
    declare public /*out*/ readonly pluginTitle: pulumi.Output<string>;
    /**
     * The Kafka connector type.
     */
    declare public /*out*/ readonly pluginType: pulumi.Output<string>;
    /**
     * The version of the Kafka connector.
     */
    declare public /*out*/ readonly pluginVersion: pulumi.Output<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    declare public readonly serviceName: pulumi.Output<string>;
    /**
     * List of tasks of a connector.
     */
    declare public /*out*/ readonly tasks: pulumi.Output<outputs.KafkaConnectorTask[]>;

    /**
     * Create a KafkaConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaConnectorArgs | KafkaConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaConnectorState | undefined;
            resourceInputs["config"] = state?.config;
            resourceInputs["connectorName"] = state?.connectorName;
            resourceInputs["pluginAuthor"] = state?.pluginAuthor;
            resourceInputs["pluginClass"] = state?.pluginClass;
            resourceInputs["pluginDocUrl"] = state?.pluginDocUrl;
            resourceInputs["pluginTitle"] = state?.pluginTitle;
            resourceInputs["pluginType"] = state?.pluginType;
            resourceInputs["pluginVersion"] = state?.pluginVersion;
            resourceInputs["project"] = state?.project;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["tasks"] = state?.tasks;
        } else {
            const args = argsOrState as KafkaConnectorArgs | undefined;
            if (args?.config === undefined && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if (args?.connectorName === undefined && !opts.urn) {
                throw new Error("Missing required property 'connectorName'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.serviceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["config"] = args?.config;
            resourceInputs["connectorName"] = args?.connectorName;
            resourceInputs["project"] = args?.project;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["pluginAuthor"] = undefined /*out*/;
            resourceInputs["pluginClass"] = undefined /*out*/;
            resourceInputs["pluginDocUrl"] = undefined /*out*/;
            resourceInputs["pluginTitle"] = undefined /*out*/;
            resourceInputs["pluginType"] = undefined /*out*/;
            resourceInputs["pluginVersion"] = undefined /*out*/;
            resourceInputs["tasks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaConnector resources.
 */
export interface KafkaConnectorState {
    /**
     * The Kafka connector configuration parameters.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Kafka connector name. Changing this property forces recreation of the resource.
     */
    connectorName?: pulumi.Input<string>;
    /**
     * The Kafka connector author.
     */
    pluginAuthor?: pulumi.Input<string>;
    /**
     * The Kafka connector Java class.
     */
    pluginClass?: pulumi.Input<string>;
    /**
     * The Kafka connector documentation URL.
     */
    pluginDocUrl?: pulumi.Input<string>;
    /**
     * The Kafka connector title.
     */
    pluginTitle?: pulumi.Input<string>;
    /**
     * The Kafka connector type.
     */
    pluginType?: pulumi.Input<string>;
    /**
     * The version of the Kafka connector.
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * List of tasks of a connector.
     */
    tasks?: pulumi.Input<pulumi.Input<inputs.KafkaConnectorTask>[]>;
}

/**
 * The set of arguments for constructing a KafkaConnector resource.
 */
export interface KafkaConnectorArgs {
    /**
     * The Kafka connector configuration parameters.
     */
    config: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Kafka connector name. Changing this property forces recreation of the resource.
     */
    connectorName: pulumi.Input<string>;
    /**
     * The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
}
