// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountAuthenticationArgs, AccountAuthenticationState } from "./accountAuthentication";
export type AccountAuthentication = import("./accountAuthentication").AccountAuthentication;
export const AccountAuthentication: typeof import("./accountAuthentication").AccountAuthentication = null as any;
utilities.lazyLoad(exports, ["AccountAuthentication"], () => require("./accountAuthentication"));

export { AccountTeamArgs, AccountTeamState } from "./accountTeam";
export type AccountTeam = import("./accountTeam").AccountTeam;
export const AccountTeam: typeof import("./accountTeam").AccountTeam = null as any;
utilities.lazyLoad(exports, ["AccountTeam"], () => require("./accountTeam"));

export { AccountTeamMemberArgs, AccountTeamMemberState } from "./accountTeamMember";
export type AccountTeamMember = import("./accountTeamMember").AccountTeamMember;
export const AccountTeamMember: typeof import("./accountTeamMember").AccountTeamMember = null as any;
utilities.lazyLoad(exports, ["AccountTeamMember"], () => require("./accountTeamMember"));

export { AccountTeamProjectArgs, AccountTeamProjectState } from "./accountTeamProject";
export type AccountTeamProject = import("./accountTeamProject").AccountTeamProject;
export const AccountTeamProject: typeof import("./accountTeamProject").AccountTeamProject = null as any;
utilities.lazyLoad(exports, ["AccountTeamProject"], () => require("./accountTeamProject"));

export { AwsPrivatelinkArgs, AwsPrivatelinkState } from "./awsPrivatelink";
export type AwsPrivatelink = import("./awsPrivatelink").AwsPrivatelink;
export const AwsPrivatelink: typeof import("./awsPrivatelink").AwsPrivatelink = null as any;
utilities.lazyLoad(exports, ["AwsPrivatelink"], () => require("./awsPrivatelink"));

export { AwsVpcPeeringConnectionArgs, AwsVpcPeeringConnectionState } from "./awsVpcPeeringConnection";
export type AwsVpcPeeringConnection = import("./awsVpcPeeringConnection").AwsVpcPeeringConnection;
export const AwsVpcPeeringConnection: typeof import("./awsVpcPeeringConnection").AwsVpcPeeringConnection = null as any;
utilities.lazyLoad(exports, ["AwsVpcPeeringConnection"], () => require("./awsVpcPeeringConnection"));

export { AzurePrivatelinkArgs, AzurePrivatelinkState } from "./azurePrivatelink";
export type AzurePrivatelink = import("./azurePrivatelink").AzurePrivatelink;
export const AzurePrivatelink: typeof import("./azurePrivatelink").AzurePrivatelink = null as any;
utilities.lazyLoad(exports, ["AzurePrivatelink"], () => require("./azurePrivatelink"));

export { AzurePrivatelinkConnectionApprovalArgs, AzurePrivatelinkConnectionApprovalState } from "./azurePrivatelinkConnectionApproval";
export type AzurePrivatelinkConnectionApproval = import("./azurePrivatelinkConnectionApproval").AzurePrivatelinkConnectionApproval;
export const AzurePrivatelinkConnectionApproval: typeof import("./azurePrivatelinkConnectionApproval").AzurePrivatelinkConnectionApproval = null as any;
utilities.lazyLoad(exports, ["AzurePrivatelinkConnectionApproval"], () => require("./azurePrivatelinkConnectionApproval"));

export { AzureVpcPeeringConnectionArgs, AzureVpcPeeringConnectionState } from "./azureVpcPeeringConnection";
export type AzureVpcPeeringConnection = import("./azureVpcPeeringConnection").AzureVpcPeeringConnection;
export const AzureVpcPeeringConnection: typeof import("./azureVpcPeeringConnection").AzureVpcPeeringConnection = null as any;
utilities.lazyLoad(exports, ["AzureVpcPeeringConnection"], () => require("./azureVpcPeeringConnection"));

export { BillingGroupArgs, BillingGroupState } from "./billingGroup";
export type BillingGroup = import("./billingGroup").BillingGroup;
export const BillingGroup: typeof import("./billingGroup").BillingGroup = null as any;
utilities.lazyLoad(exports, ["BillingGroup"], () => require("./billingGroup"));

export { CassandraArgs, CassandraState } from "./cassandra";
export type Cassandra = import("./cassandra").Cassandra;
export const Cassandra: typeof import("./cassandra").Cassandra = null as any;
utilities.lazyLoad(exports, ["Cassandra"], () => require("./cassandra"));

export { CassandraUserArgs, CassandraUserState } from "./cassandraUser";
export type CassandraUser = import("./cassandraUser").CassandraUser;
export const CassandraUser: typeof import("./cassandraUser").CassandraUser = null as any;
utilities.lazyLoad(exports, ["CassandraUser"], () => require("./cassandraUser"));

export { ClickhouseArgs, ClickhouseState } from "./clickhouse";
export type Clickhouse = import("./clickhouse").Clickhouse;
export const Clickhouse: typeof import("./clickhouse").Clickhouse = null as any;
utilities.lazyLoad(exports, ["Clickhouse"], () => require("./clickhouse"));

export { ClickhouseDatabaseArgs, ClickhouseDatabaseState } from "./clickhouseDatabase";
export type ClickhouseDatabase = import("./clickhouseDatabase").ClickhouseDatabase;
export const ClickhouseDatabase: typeof import("./clickhouseDatabase").ClickhouseDatabase = null as any;
utilities.lazyLoad(exports, ["ClickhouseDatabase"], () => require("./clickhouseDatabase"));

export { ClickhouseGrantArgs, ClickhouseGrantState } from "./clickhouseGrant";
export type ClickhouseGrant = import("./clickhouseGrant").ClickhouseGrant;
export const ClickhouseGrant: typeof import("./clickhouseGrant").ClickhouseGrant = null as any;
utilities.lazyLoad(exports, ["ClickhouseGrant"], () => require("./clickhouseGrant"));

export { ClickhouseRoleArgs, ClickhouseRoleState } from "./clickhouseRole";
export type ClickhouseRole = import("./clickhouseRole").ClickhouseRole;
export const ClickhouseRole: typeof import("./clickhouseRole").ClickhouseRole = null as any;
utilities.lazyLoad(exports, ["ClickhouseRole"], () => require("./clickhouseRole"));

export { ClickhouseUserArgs, ClickhouseUserState } from "./clickhouseUser";
export type ClickhouseUser = import("./clickhouseUser").ClickhouseUser;
export const ClickhouseUser: typeof import("./clickhouseUser").ClickhouseUser = null as any;
utilities.lazyLoad(exports, ["ClickhouseUser"], () => require("./clickhouseUser"));

export { ConnectionPoolArgs, ConnectionPoolState } from "./connectionPool";
export type ConnectionPool = import("./connectionPool").ConnectionPool;
export const ConnectionPool: typeof import("./connectionPool").ConnectionPool = null as any;
utilities.lazyLoad(exports, ["ConnectionPool"], () => require("./connectionPool"));

export { DragonflyArgs, DragonflyState } from "./dragonfly";
export type Dragonfly = import("./dragonfly").Dragonfly;
export const Dragonfly: typeof import("./dragonfly").Dragonfly = null as any;
utilities.lazyLoad(exports, ["Dragonfly"], () => require("./dragonfly"));

export { FlinkArgs, FlinkState } from "./flink";
export type Flink = import("./flink").Flink;
export const Flink: typeof import("./flink").Flink = null as any;
utilities.lazyLoad(exports, ["Flink"], () => require("./flink"));

export { FlinkApplicationArgs, FlinkApplicationState } from "./flinkApplication";
export type FlinkApplication = import("./flinkApplication").FlinkApplication;
export const FlinkApplication: typeof import("./flinkApplication").FlinkApplication = null as any;
utilities.lazyLoad(exports, ["FlinkApplication"], () => require("./flinkApplication"));

export { FlinkApplicationDeploymentArgs, FlinkApplicationDeploymentState } from "./flinkApplicationDeployment";
export type FlinkApplicationDeployment = import("./flinkApplicationDeployment").FlinkApplicationDeployment;
export const FlinkApplicationDeployment: typeof import("./flinkApplicationDeployment").FlinkApplicationDeployment = null as any;
utilities.lazyLoad(exports, ["FlinkApplicationDeployment"], () => require("./flinkApplicationDeployment"));

export { FlinkApplicationVersionArgs, FlinkApplicationVersionState } from "./flinkApplicationVersion";
export type FlinkApplicationVersion = import("./flinkApplicationVersion").FlinkApplicationVersion;
export const FlinkApplicationVersion: typeof import("./flinkApplicationVersion").FlinkApplicationVersion = null as any;
utilities.lazyLoad(exports, ["FlinkApplicationVersion"], () => require("./flinkApplicationVersion"));

export { GcpPrivatelinkArgs, GcpPrivatelinkState } from "./gcpPrivatelink";
export type GcpPrivatelink = import("./gcpPrivatelink").GcpPrivatelink;
export const GcpPrivatelink: typeof import("./gcpPrivatelink").GcpPrivatelink = null as any;
utilities.lazyLoad(exports, ["GcpPrivatelink"], () => require("./gcpPrivatelink"));

export { GcpPrivatelinkConnectionApprovalArgs, GcpPrivatelinkConnectionApprovalState } from "./gcpPrivatelinkConnectionApproval";
export type GcpPrivatelinkConnectionApproval = import("./gcpPrivatelinkConnectionApproval").GcpPrivatelinkConnectionApproval;
export const GcpPrivatelinkConnectionApproval: typeof import("./gcpPrivatelinkConnectionApproval").GcpPrivatelinkConnectionApproval = null as any;
utilities.lazyLoad(exports, ["GcpPrivatelinkConnectionApproval"], () => require("./gcpPrivatelinkConnectionApproval"));

export { GcpVpcPeeringConnectionArgs, GcpVpcPeeringConnectionState } from "./gcpVpcPeeringConnection";
export type GcpVpcPeeringConnection = import("./gcpVpcPeeringConnection").GcpVpcPeeringConnection;
export const GcpVpcPeeringConnection: typeof import("./gcpVpcPeeringConnection").GcpVpcPeeringConnection = null as any;
utilities.lazyLoad(exports, ["GcpVpcPeeringConnection"], () => require("./gcpVpcPeeringConnection"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountAuthenticationArgs, GetAccountAuthenticationResult, GetAccountAuthenticationOutputArgs } from "./getAccountAuthentication";
export const getAccountAuthentication: typeof import("./getAccountAuthentication").getAccountAuthentication = null as any;
export const getAccountAuthenticationOutput: typeof import("./getAccountAuthentication").getAccountAuthenticationOutput = null as any;
utilities.lazyLoad(exports, ["getAccountAuthentication","getAccountAuthenticationOutput"], () => require("./getAccountAuthentication"));

export { GetAccountTeamArgs, GetAccountTeamResult, GetAccountTeamOutputArgs } from "./getAccountTeam";
export const getAccountTeam: typeof import("./getAccountTeam").getAccountTeam = null as any;
export const getAccountTeamOutput: typeof import("./getAccountTeam").getAccountTeamOutput = null as any;
utilities.lazyLoad(exports, ["getAccountTeam","getAccountTeamOutput"], () => require("./getAccountTeam"));

export { GetAccountTeamMemberArgs, GetAccountTeamMemberResult, GetAccountTeamMemberOutputArgs } from "./getAccountTeamMember";
export const getAccountTeamMember: typeof import("./getAccountTeamMember").getAccountTeamMember = null as any;
export const getAccountTeamMemberOutput: typeof import("./getAccountTeamMember").getAccountTeamMemberOutput = null as any;
utilities.lazyLoad(exports, ["getAccountTeamMember","getAccountTeamMemberOutput"], () => require("./getAccountTeamMember"));

export { GetAccountTeamProjectArgs, GetAccountTeamProjectResult, GetAccountTeamProjectOutputArgs } from "./getAccountTeamProject";
export const getAccountTeamProject: typeof import("./getAccountTeamProject").getAccountTeamProject = null as any;
export const getAccountTeamProjectOutput: typeof import("./getAccountTeamProject").getAccountTeamProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAccountTeamProject","getAccountTeamProjectOutput"], () => require("./getAccountTeamProject"));

export { GetAwsPrivatelinkArgs, GetAwsPrivatelinkResult, GetAwsPrivatelinkOutputArgs } from "./getAwsPrivatelink";
export const getAwsPrivatelink: typeof import("./getAwsPrivatelink").getAwsPrivatelink = null as any;
export const getAwsPrivatelinkOutput: typeof import("./getAwsPrivatelink").getAwsPrivatelinkOutput = null as any;
utilities.lazyLoad(exports, ["getAwsPrivatelink","getAwsPrivatelinkOutput"], () => require("./getAwsPrivatelink"));

export { GetAwsVpcPeeringConnectionArgs, GetAwsVpcPeeringConnectionResult, GetAwsVpcPeeringConnectionOutputArgs } from "./getAwsVpcPeeringConnection";
export const getAwsVpcPeeringConnection: typeof import("./getAwsVpcPeeringConnection").getAwsVpcPeeringConnection = null as any;
export const getAwsVpcPeeringConnectionOutput: typeof import("./getAwsVpcPeeringConnection").getAwsVpcPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getAwsVpcPeeringConnection","getAwsVpcPeeringConnectionOutput"], () => require("./getAwsVpcPeeringConnection"));

export { GetAzurePrivatelinkArgs, GetAzurePrivatelinkResult, GetAzurePrivatelinkOutputArgs } from "./getAzurePrivatelink";
export const getAzurePrivatelink: typeof import("./getAzurePrivatelink").getAzurePrivatelink = null as any;
export const getAzurePrivatelinkOutput: typeof import("./getAzurePrivatelink").getAzurePrivatelinkOutput = null as any;
utilities.lazyLoad(exports, ["getAzurePrivatelink","getAzurePrivatelinkOutput"], () => require("./getAzurePrivatelink"));

export { GetAzureVpcPeeringConnectionArgs, GetAzureVpcPeeringConnectionResult, GetAzureVpcPeeringConnectionOutputArgs } from "./getAzureVpcPeeringConnection";
export const getAzureVpcPeeringConnection: typeof import("./getAzureVpcPeeringConnection").getAzureVpcPeeringConnection = null as any;
export const getAzureVpcPeeringConnectionOutput: typeof import("./getAzureVpcPeeringConnection").getAzureVpcPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getAzureVpcPeeringConnection","getAzureVpcPeeringConnectionOutput"], () => require("./getAzureVpcPeeringConnection"));

export { GetBillingGroupArgs, GetBillingGroupResult, GetBillingGroupOutputArgs } from "./getBillingGroup";
export const getBillingGroup: typeof import("./getBillingGroup").getBillingGroup = null as any;
export const getBillingGroupOutput: typeof import("./getBillingGroup").getBillingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getBillingGroup","getBillingGroupOutput"], () => require("./getBillingGroup"));

export { GetCassandaArgs, GetCassandaResult, GetCassandaOutputArgs } from "./getCassanda";
export const getCassanda: typeof import("./getCassanda").getCassanda = null as any;
export const getCassandaOutput: typeof import("./getCassanda").getCassandaOutput = null as any;
utilities.lazyLoad(exports, ["getCassanda","getCassandaOutput"], () => require("./getCassanda"));

export { GetCassandraArgs, GetCassandraResult, GetCassandraOutputArgs } from "./getCassandra";
export const getCassandra: typeof import("./getCassandra").getCassandra = null as any;
export const getCassandraOutput: typeof import("./getCassandra").getCassandraOutput = null as any;
utilities.lazyLoad(exports, ["getCassandra","getCassandraOutput"], () => require("./getCassandra"));

export { GetCassandraUserArgs, GetCassandraUserResult, GetCassandraUserOutputArgs } from "./getCassandraUser";
export const getCassandraUser: typeof import("./getCassandraUser").getCassandraUser = null as any;
export const getCassandraUserOutput: typeof import("./getCassandraUser").getCassandraUserOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraUser","getCassandraUserOutput"], () => require("./getCassandraUser"));

export { GetClickhouseArgs, GetClickhouseResult, GetClickhouseOutputArgs } from "./getClickhouse";
export const getClickhouse: typeof import("./getClickhouse").getClickhouse = null as any;
export const getClickhouseOutput: typeof import("./getClickhouse").getClickhouseOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouse","getClickhouseOutput"], () => require("./getClickhouse"));

export { GetClickhouseDatabaseArgs, GetClickhouseDatabaseResult, GetClickhouseDatabaseOutputArgs } from "./getClickhouseDatabase";
export const getClickhouseDatabase: typeof import("./getClickhouseDatabase").getClickhouseDatabase = null as any;
export const getClickhouseDatabaseOutput: typeof import("./getClickhouseDatabase").getClickhouseDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouseDatabase","getClickhouseDatabaseOutput"], () => require("./getClickhouseDatabase"));

export { GetClickhouseUserArgs, GetClickhouseUserResult, GetClickhouseUserOutputArgs } from "./getClickhouseUser";
export const getClickhouseUser: typeof import("./getClickhouseUser").getClickhouseUser = null as any;
export const getClickhouseUserOutput: typeof import("./getClickhouseUser").getClickhouseUserOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouseUser","getClickhouseUserOutput"], () => require("./getClickhouseUser"));

export { GetConnectionPoolArgs, GetConnectionPoolResult, GetConnectionPoolOutputArgs } from "./getConnectionPool";
export const getConnectionPool: typeof import("./getConnectionPool").getConnectionPool = null as any;
export const getConnectionPoolOutput: typeof import("./getConnectionPool").getConnectionPoolOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionPool","getConnectionPoolOutput"], () => require("./getConnectionPool"));

export { GetDragonflyArgs, GetDragonflyResult, GetDragonflyOutputArgs } from "./getDragonfly";
export const getDragonfly: typeof import("./getDragonfly").getDragonfly = null as any;
export const getDragonflyOutput: typeof import("./getDragonfly").getDragonflyOutput = null as any;
utilities.lazyLoad(exports, ["getDragonfly","getDragonflyOutput"], () => require("./getDragonfly"));

export { GetExternalIdentityArgs, GetExternalIdentityResult, GetExternalIdentityOutputArgs } from "./getExternalIdentity";
export const getExternalIdentity: typeof import("./getExternalIdentity").getExternalIdentity = null as any;
export const getExternalIdentityOutput: typeof import("./getExternalIdentity").getExternalIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getExternalIdentity","getExternalIdentityOutput"], () => require("./getExternalIdentity"));

export { GetFlinkArgs, GetFlinkResult, GetFlinkOutputArgs } from "./getFlink";
export const getFlink: typeof import("./getFlink").getFlink = null as any;
export const getFlinkOutput: typeof import("./getFlink").getFlinkOutput = null as any;
utilities.lazyLoad(exports, ["getFlink","getFlinkOutput"], () => require("./getFlink"));

export { GetFlinkApplicationArgs, GetFlinkApplicationResult, GetFlinkApplicationOutputArgs } from "./getFlinkApplication";
export const getFlinkApplication: typeof import("./getFlinkApplication").getFlinkApplication = null as any;
export const getFlinkApplicationOutput: typeof import("./getFlinkApplication").getFlinkApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getFlinkApplication","getFlinkApplicationOutput"], () => require("./getFlinkApplication"));

export { GetFlinkApplicationVersionArgs, GetFlinkApplicationVersionResult, GetFlinkApplicationVersionOutputArgs } from "./getFlinkApplicationVersion";
export const getFlinkApplicationVersion: typeof import("./getFlinkApplicationVersion").getFlinkApplicationVersion = null as any;
export const getFlinkApplicationVersionOutput: typeof import("./getFlinkApplicationVersion").getFlinkApplicationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getFlinkApplicationVersion","getFlinkApplicationVersionOutput"], () => require("./getFlinkApplicationVersion"));

export { GetGcpPrivatelinkArgs, GetGcpPrivatelinkResult, GetGcpPrivatelinkOutputArgs } from "./getGcpPrivatelink";
export const getGcpPrivatelink: typeof import("./getGcpPrivatelink").getGcpPrivatelink = null as any;
export const getGcpPrivatelinkOutput: typeof import("./getGcpPrivatelink").getGcpPrivatelinkOutput = null as any;
utilities.lazyLoad(exports, ["getGcpPrivatelink","getGcpPrivatelinkOutput"], () => require("./getGcpPrivatelink"));

export { GetGcpVpcPeeringConnectionArgs, GetGcpVpcPeeringConnectionResult, GetGcpVpcPeeringConnectionOutputArgs } from "./getGcpVpcPeeringConnection";
export const getGcpVpcPeeringConnection: typeof import("./getGcpVpcPeeringConnection").getGcpVpcPeeringConnection = null as any;
export const getGcpVpcPeeringConnectionOutput: typeof import("./getGcpVpcPeeringConnection").getGcpVpcPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getGcpVpcPeeringConnection","getGcpVpcPeeringConnectionOutput"], () => require("./getGcpVpcPeeringConnection"));

export { GetGrafanaArgs, GetGrafanaResult, GetGrafanaOutputArgs } from "./getGrafana";
export const getGrafana: typeof import("./getGrafana").getGrafana = null as any;
export const getGrafanaOutput: typeof import("./getGrafana").getGrafanaOutput = null as any;
utilities.lazyLoad(exports, ["getGrafana","getGrafanaOutput"], () => require("./getGrafana"));

export { GetInfluxDbArgs, GetInfluxDbResult, GetInfluxDbOutputArgs } from "./getInfluxDb";
export const getInfluxDb: typeof import("./getInfluxDb").getInfluxDb = null as any;
export const getInfluxDbOutput: typeof import("./getInfluxDb").getInfluxDbOutput = null as any;
utilities.lazyLoad(exports, ["getInfluxDb","getInfluxDbOutput"], () => require("./getInfluxDb"));

export { GetInfluxdbDatabaseArgs, GetInfluxdbDatabaseResult, GetInfluxdbDatabaseOutputArgs } from "./getInfluxdbDatabase";
export const getInfluxdbDatabase: typeof import("./getInfluxdbDatabase").getInfluxdbDatabase = null as any;
export const getInfluxdbDatabaseOutput: typeof import("./getInfluxdbDatabase").getInfluxdbDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getInfluxdbDatabase","getInfluxdbDatabaseOutput"], () => require("./getInfluxdbDatabase"));

export { GetInfluxdbUserArgs, GetInfluxdbUserResult, GetInfluxdbUserOutputArgs } from "./getInfluxdbUser";
export const getInfluxdbUser: typeof import("./getInfluxdbUser").getInfluxdbUser = null as any;
export const getInfluxdbUserOutput: typeof import("./getInfluxdbUser").getInfluxdbUserOutput = null as any;
utilities.lazyLoad(exports, ["getInfluxdbUser","getInfluxdbUserOutput"], () => require("./getInfluxdbUser"));

export { GetKafkaArgs, GetKafkaResult, GetKafkaOutputArgs } from "./getKafka";
export const getKafka: typeof import("./getKafka").getKafka = null as any;
export const getKafkaOutput: typeof import("./getKafka").getKafkaOutput = null as any;
utilities.lazyLoad(exports, ["getKafka","getKafkaOutput"], () => require("./getKafka"));

export { GetKafkaAclArgs, GetKafkaAclResult, GetKafkaAclOutputArgs } from "./getKafkaAcl";
export const getKafkaAcl: typeof import("./getKafkaAcl").getKafkaAcl = null as any;
export const getKafkaAclOutput: typeof import("./getKafkaAcl").getKafkaAclOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaAcl","getKafkaAclOutput"], () => require("./getKafkaAcl"));

export { GetKafkaConnectArgs, GetKafkaConnectResult, GetKafkaConnectOutputArgs } from "./getKafkaConnect";
export const getKafkaConnect: typeof import("./getKafkaConnect").getKafkaConnect = null as any;
export const getKafkaConnectOutput: typeof import("./getKafkaConnect").getKafkaConnectOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaConnect","getKafkaConnectOutput"], () => require("./getKafkaConnect"));

export { GetKafkaConnectorArgs, GetKafkaConnectorResult, GetKafkaConnectorOutputArgs } from "./getKafkaConnector";
export const getKafkaConnector: typeof import("./getKafkaConnector").getKafkaConnector = null as any;
export const getKafkaConnectorOutput: typeof import("./getKafkaConnector").getKafkaConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaConnector","getKafkaConnectorOutput"], () => require("./getKafkaConnector"));

export { GetKafkaMirrorMakerArgs, GetKafkaMirrorMakerResult, GetKafkaMirrorMakerOutputArgs } from "./getKafkaMirrorMaker";
export const getKafkaMirrorMaker: typeof import("./getKafkaMirrorMaker").getKafkaMirrorMaker = null as any;
export const getKafkaMirrorMakerOutput: typeof import("./getKafkaMirrorMaker").getKafkaMirrorMakerOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaMirrorMaker","getKafkaMirrorMakerOutput"], () => require("./getKafkaMirrorMaker"));

export { GetKafkaSchemaArgs, GetKafkaSchemaResult, GetKafkaSchemaOutputArgs } from "./getKafkaSchema";
export const getKafkaSchema: typeof import("./getKafkaSchema").getKafkaSchema = null as any;
export const getKafkaSchemaOutput: typeof import("./getKafkaSchema").getKafkaSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaSchema","getKafkaSchemaOutput"], () => require("./getKafkaSchema"));

export { GetKafkaSchemaConfigurationArgs, GetKafkaSchemaConfigurationResult, GetKafkaSchemaConfigurationOutputArgs } from "./getKafkaSchemaConfiguration";
export const getKafkaSchemaConfiguration: typeof import("./getKafkaSchemaConfiguration").getKafkaSchemaConfiguration = null as any;
export const getKafkaSchemaConfigurationOutput: typeof import("./getKafkaSchemaConfiguration").getKafkaSchemaConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaSchemaConfiguration","getKafkaSchemaConfigurationOutput"], () => require("./getKafkaSchemaConfiguration"));

export { GetKafkaSchemaRegistryAclArgs, GetKafkaSchemaRegistryAclResult, GetKafkaSchemaRegistryAclOutputArgs } from "./getKafkaSchemaRegistryAcl";
export const getKafkaSchemaRegistryAcl: typeof import("./getKafkaSchemaRegistryAcl").getKafkaSchemaRegistryAcl = null as any;
export const getKafkaSchemaRegistryAclOutput: typeof import("./getKafkaSchemaRegistryAcl").getKafkaSchemaRegistryAclOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaSchemaRegistryAcl","getKafkaSchemaRegistryAclOutput"], () => require("./getKafkaSchemaRegistryAcl"));

export { GetKafkaTopicArgs, GetKafkaTopicResult, GetKafkaTopicOutputArgs } from "./getKafkaTopic";
export const getKafkaTopic: typeof import("./getKafkaTopic").getKafkaTopic = null as any;
export const getKafkaTopicOutput: typeof import("./getKafkaTopic").getKafkaTopicOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaTopic","getKafkaTopicOutput"], () => require("./getKafkaTopic"));

export { GetKafkaUserArgs, GetKafkaUserResult, GetKafkaUserOutputArgs } from "./getKafkaUser";
export const getKafkaUser: typeof import("./getKafkaUser").getKafkaUser = null as any;
export const getKafkaUserOutput: typeof import("./getKafkaUser").getKafkaUserOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaUser","getKafkaUserOutput"], () => require("./getKafkaUser"));

export { GetM3AggregatorArgs, GetM3AggregatorResult, GetM3AggregatorOutputArgs } from "./getM3Aggregator";
export const getM3Aggregator: typeof import("./getM3Aggregator").getM3Aggregator = null as any;
export const getM3AggregatorOutput: typeof import("./getM3Aggregator").getM3AggregatorOutput = null as any;
utilities.lazyLoad(exports, ["getM3Aggregator","getM3AggregatorOutput"], () => require("./getM3Aggregator"));

export { GetM3DbArgs, GetM3DbResult, GetM3DbOutputArgs } from "./getM3Db";
export const getM3Db: typeof import("./getM3Db").getM3Db = null as any;
export const getM3DbOutput: typeof import("./getM3Db").getM3DbOutput = null as any;
utilities.lazyLoad(exports, ["getM3Db","getM3DbOutput"], () => require("./getM3Db"));

export { GetM3dbUserArgs, GetM3dbUserResult, GetM3dbUserOutputArgs } from "./getM3dbUser";
export const getM3dbUser: typeof import("./getM3dbUser").getM3dbUser = null as any;
export const getM3dbUserOutput: typeof import("./getM3dbUser").getM3dbUserOutput = null as any;
utilities.lazyLoad(exports, ["getM3dbUser","getM3dbUserOutput"], () => require("./getM3dbUser"));

export { GetMirrorMakerReplicationFlowArgs, GetMirrorMakerReplicationFlowResult, GetMirrorMakerReplicationFlowOutputArgs } from "./getMirrorMakerReplicationFlow";
export const getMirrorMakerReplicationFlow: typeof import("./getMirrorMakerReplicationFlow").getMirrorMakerReplicationFlow = null as any;
export const getMirrorMakerReplicationFlowOutput: typeof import("./getMirrorMakerReplicationFlow").getMirrorMakerReplicationFlowOutput = null as any;
utilities.lazyLoad(exports, ["getMirrorMakerReplicationFlow","getMirrorMakerReplicationFlowOutput"], () => require("./getMirrorMakerReplicationFlow"));

export { GetMySqlArgs, GetMySqlResult, GetMySqlOutputArgs } from "./getMySql";
export const getMySql: typeof import("./getMySql").getMySql = null as any;
export const getMySqlOutput: typeof import("./getMySql").getMySqlOutput = null as any;
utilities.lazyLoad(exports, ["getMySql","getMySqlOutput"], () => require("./getMySql"));

export { GetMysqlDatabaseArgs, GetMysqlDatabaseResult, GetMysqlDatabaseOutputArgs } from "./getMysqlDatabase";
export const getMysqlDatabase: typeof import("./getMysqlDatabase").getMysqlDatabase = null as any;
export const getMysqlDatabaseOutput: typeof import("./getMysqlDatabase").getMysqlDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlDatabase","getMysqlDatabaseOutput"], () => require("./getMysqlDatabase"));

export { GetMysqlUserArgs, GetMysqlUserResult, GetMysqlUserOutputArgs } from "./getMysqlUser";
export const getMysqlUser: typeof import("./getMysqlUser").getMysqlUser = null as any;
export const getMysqlUserOutput: typeof import("./getMysqlUser").getMysqlUserOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlUser","getMysqlUserOutput"], () => require("./getMysqlUser"));

export { GetOpenSearchArgs, GetOpenSearchResult, GetOpenSearchOutputArgs } from "./getOpenSearch";
export const getOpenSearch: typeof import("./getOpenSearch").getOpenSearch = null as any;
export const getOpenSearchOutput: typeof import("./getOpenSearch").getOpenSearchOutput = null as any;
utilities.lazyLoad(exports, ["getOpenSearch","getOpenSearchOutput"], () => require("./getOpenSearch"));

export { GetOpenSearchAclConfigArgs, GetOpenSearchAclConfigResult, GetOpenSearchAclConfigOutputArgs } from "./getOpenSearchAclConfig";
export const getOpenSearchAclConfig: typeof import("./getOpenSearchAclConfig").getOpenSearchAclConfig = null as any;
export const getOpenSearchAclConfigOutput: typeof import("./getOpenSearchAclConfig").getOpenSearchAclConfigOutput = null as any;
utilities.lazyLoad(exports, ["getOpenSearchAclConfig","getOpenSearchAclConfigOutput"], () => require("./getOpenSearchAclConfig"));

export { GetOpenSearchAclRuleArgs, GetOpenSearchAclRuleResult, GetOpenSearchAclRuleOutputArgs } from "./getOpenSearchAclRule";
export const getOpenSearchAclRule: typeof import("./getOpenSearchAclRule").getOpenSearchAclRule = null as any;
export const getOpenSearchAclRuleOutput: typeof import("./getOpenSearchAclRule").getOpenSearchAclRuleOutput = null as any;
utilities.lazyLoad(exports, ["getOpenSearchAclRule","getOpenSearchAclRuleOutput"], () => require("./getOpenSearchAclRule"));

export { GetOpensearchSecurityPluginConfigArgs, GetOpensearchSecurityPluginConfigResult, GetOpensearchSecurityPluginConfigOutputArgs } from "./getOpensearchSecurityPluginConfig";
export const getOpensearchSecurityPluginConfig: typeof import("./getOpensearchSecurityPluginConfig").getOpensearchSecurityPluginConfig = null as any;
export const getOpensearchSecurityPluginConfigOutput: typeof import("./getOpensearchSecurityPluginConfig").getOpensearchSecurityPluginConfigOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchSecurityPluginConfig","getOpensearchSecurityPluginConfigOutput"], () => require("./getOpensearchSecurityPluginConfig"));

export { GetOpensearchUserArgs, GetOpensearchUserResult, GetOpensearchUserOutputArgs } from "./getOpensearchUser";
export const getOpensearchUser: typeof import("./getOpensearchUser").getOpensearchUser = null as any;
export const getOpensearchUserOutput: typeof import("./getOpensearchUser").getOpensearchUserOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchUser","getOpensearchUserOutput"], () => require("./getOpensearchUser"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetOrganizationApplicationUserArgs, GetOrganizationApplicationUserResult, GetOrganizationApplicationUserOutputArgs } from "./getOrganizationApplicationUser";
export const getOrganizationApplicationUser: typeof import("./getOrganizationApplicationUser").getOrganizationApplicationUser = null as any;
export const getOrganizationApplicationUserOutput: typeof import("./getOrganizationApplicationUser").getOrganizationApplicationUserOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationApplicationUser","getOrganizationApplicationUserOutput"], () => require("./getOrganizationApplicationUser"));

export { GetOrganizationUserArgs, GetOrganizationUserResult, GetOrganizationUserOutputArgs } from "./getOrganizationUser";
export const getOrganizationUser: typeof import("./getOrganizationUser").getOrganizationUser = null as any;
export const getOrganizationUserOutput: typeof import("./getOrganizationUser").getOrganizationUserOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationUser","getOrganizationUserOutput"], () => require("./getOrganizationUser"));

export { GetOrganizationUserGroupArgs, GetOrganizationUserGroupResult, GetOrganizationUserGroupOutputArgs } from "./getOrganizationUserGroup";
export const getOrganizationUserGroup: typeof import("./getOrganizationUserGroup").getOrganizationUserGroup = null as any;
export const getOrganizationUserGroupOutput: typeof import("./getOrganizationUserGroup").getOrganizationUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationUserGroup","getOrganizationUserGroupOutput"], () => require("./getOrganizationUserGroup"));

export { GetOrganizationUserListArgs, GetOrganizationUserListResult, GetOrganizationUserListOutputArgs } from "./getOrganizationUserList";
export const getOrganizationUserList: typeof import("./getOrganizationUserList").getOrganizationUserList = null as any;
export const getOrganizationUserListOutput: typeof import("./getOrganizationUserList").getOrganizationUserListOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationUserList","getOrganizationUserListOutput"], () => require("./getOrganizationUserList"));

export { GetOrganizationalUnitArgs, GetOrganizationalUnitResult, GetOrganizationalUnitOutputArgs } from "./getOrganizationalUnit";
export const getOrganizationalUnit: typeof import("./getOrganizationalUnit").getOrganizationalUnit = null as any;
export const getOrganizationalUnitOutput: typeof import("./getOrganizationalUnit").getOrganizationalUnitOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationalUnit","getOrganizationalUnitOutput"], () => require("./getOrganizationalUnit"));

export { GetPgArgs, GetPgResult, GetPgOutputArgs } from "./getPg";
export const getPg: typeof import("./getPg").getPg = null as any;
export const getPgOutput: typeof import("./getPg").getPgOutput = null as any;
utilities.lazyLoad(exports, ["getPg","getPgOutput"], () => require("./getPg"));

export { GetPgDatabaseArgs, GetPgDatabaseResult, GetPgDatabaseOutputArgs } from "./getPgDatabase";
export const getPgDatabase: typeof import("./getPgDatabase").getPgDatabase = null as any;
export const getPgDatabaseOutput: typeof import("./getPgDatabase").getPgDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getPgDatabase","getPgDatabaseOutput"], () => require("./getPgDatabase"));

export { GetPgUserArgs, GetPgUserResult, GetPgUserOutputArgs } from "./getPgUser";
export const getPgUser: typeof import("./getPgUser").getPgUser = null as any;
export const getPgUserOutput: typeof import("./getPgUser").getPgUserOutput = null as any;
utilities.lazyLoad(exports, ["getPgUser","getPgUserOutput"], () => require("./getPgUser"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectUserArgs, GetProjectUserResult, GetProjectUserOutputArgs } from "./getProjectUser";
export const getProjectUser: typeof import("./getProjectUser").getProjectUser = null as any;
export const getProjectUserOutput: typeof import("./getProjectUser").getProjectUserOutput = null as any;
utilities.lazyLoad(exports, ["getProjectUser","getProjectUserOutput"], () => require("./getProjectUser"));

export { GetProjectVpcArgs, GetProjectVpcResult, GetProjectVpcOutputArgs } from "./getProjectVpc";
export const getProjectVpc: typeof import("./getProjectVpc").getProjectVpc = null as any;
export const getProjectVpcOutput: typeof import("./getProjectVpc").getProjectVpcOutput = null as any;
utilities.lazyLoad(exports, ["getProjectVpc","getProjectVpcOutput"], () => require("./getProjectVpc"));

export { GetRedisArgs, GetRedisResult, GetRedisOutputArgs } from "./getRedis";
export const getRedis: typeof import("./getRedis").getRedis = null as any;
export const getRedisOutput: typeof import("./getRedis").getRedisOutput = null as any;
utilities.lazyLoad(exports, ["getRedis","getRedisOutput"], () => require("./getRedis"));

export { GetRedisUserArgs, GetRedisUserResult, GetRedisUserOutputArgs } from "./getRedisUser";
export const getRedisUser: typeof import("./getRedisUser").getRedisUser = null as any;
export const getRedisUserOutput: typeof import("./getRedisUser").getRedisUserOutput = null as any;
utilities.lazyLoad(exports, ["getRedisUser","getRedisUserOutput"], () => require("./getRedisUser"));

export { GetServiceComponentArgs, GetServiceComponentResult, GetServiceComponentOutputArgs } from "./getServiceComponent";
export const getServiceComponent: typeof import("./getServiceComponent").getServiceComponent = null as any;
export const getServiceComponentOutput: typeof import("./getServiceComponent").getServiceComponentOutput = null as any;
utilities.lazyLoad(exports, ["getServiceComponent","getServiceComponentOutput"], () => require("./getServiceComponent"));

export { GetServiceIntegrationArgs, GetServiceIntegrationResult, GetServiceIntegrationOutputArgs } from "./getServiceIntegration";
export const getServiceIntegration: typeof import("./getServiceIntegration").getServiceIntegration = null as any;
export const getServiceIntegrationOutput: typeof import("./getServiceIntegration").getServiceIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getServiceIntegration","getServiceIntegrationOutput"], () => require("./getServiceIntegration"));

export { GetServiceIntegrationEndpointArgs, GetServiceIntegrationEndpointResult, GetServiceIntegrationEndpointOutputArgs } from "./getServiceIntegrationEndpoint";
export const getServiceIntegrationEndpoint: typeof import("./getServiceIntegrationEndpoint").getServiceIntegrationEndpoint = null as any;
export const getServiceIntegrationEndpointOutput: typeof import("./getServiceIntegrationEndpoint").getServiceIntegrationEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getServiceIntegrationEndpoint","getServiceIntegrationEndpointOutput"], () => require("./getServiceIntegrationEndpoint"));

export { GetThanosArgs, GetThanosResult, GetThanosOutputArgs } from "./getThanos";
export const getThanos: typeof import("./getThanos").getThanos = null as any;
export const getThanosOutput: typeof import("./getThanos").getThanosOutput = null as any;
utilities.lazyLoad(exports, ["getThanos","getThanosOutput"], () => require("./getThanos"));

export { GetTransitGatewayVpcAttachmentArgs, GetTransitGatewayVpcAttachmentResult, GetTransitGatewayVpcAttachmentOutputArgs } from "./getTransitGatewayVpcAttachment";
export const getTransitGatewayVpcAttachment: typeof import("./getTransitGatewayVpcAttachment").getTransitGatewayVpcAttachment = null as any;
export const getTransitGatewayVpcAttachmentOutput: typeof import("./getTransitGatewayVpcAttachment").getTransitGatewayVpcAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayVpcAttachment","getTransitGatewayVpcAttachmentOutput"], () => require("./getTransitGatewayVpcAttachment"));

export { GetValkeyArgs, GetValkeyResult, GetValkeyOutputArgs } from "./getValkey";
export const getValkey: typeof import("./getValkey").getValkey = null as any;
export const getValkeyOutput: typeof import("./getValkey").getValkeyOutput = null as any;
utilities.lazyLoad(exports, ["getValkey","getValkeyOutput"], () => require("./getValkey"));

export { GetValkeyUserArgs, GetValkeyUserResult, GetValkeyUserOutputArgs } from "./getValkeyUser";
export const getValkeyUser: typeof import("./getValkeyUser").getValkeyUser = null as any;
export const getValkeyUserOutput: typeof import("./getValkeyUser").getValkeyUserOutput = null as any;
utilities.lazyLoad(exports, ["getValkeyUser","getValkeyUserOutput"], () => require("./getValkeyUser"));

export { GrafanaArgs, GrafanaState } from "./grafana";
export type Grafana = import("./grafana").Grafana;
export const Grafana: typeof import("./grafana").Grafana = null as any;
utilities.lazyLoad(exports, ["Grafana"], () => require("./grafana"));

export { InfluxDbArgs, InfluxDbState } from "./influxDb";
export type InfluxDb = import("./influxDb").InfluxDb;
export const InfluxDb: typeof import("./influxDb").InfluxDb = null as any;
utilities.lazyLoad(exports, ["InfluxDb"], () => require("./influxDb"));

export { InfluxdbDatabaseArgs, InfluxdbDatabaseState } from "./influxdbDatabase";
export type InfluxdbDatabase = import("./influxdbDatabase").InfluxdbDatabase;
export const InfluxdbDatabase: typeof import("./influxdbDatabase").InfluxdbDatabase = null as any;
utilities.lazyLoad(exports, ["InfluxdbDatabase"], () => require("./influxdbDatabase"));

export { InfluxdbUserArgs, InfluxdbUserState } from "./influxdbUser";
export type InfluxdbUser = import("./influxdbUser").InfluxdbUser;
export const InfluxdbUser: typeof import("./influxdbUser").InfluxdbUser = null as any;
utilities.lazyLoad(exports, ["InfluxdbUser"], () => require("./influxdbUser"));

export { KafkaArgs, KafkaState } from "./kafka";
export type Kafka = import("./kafka").Kafka;
export const Kafka: typeof import("./kafka").Kafka = null as any;
utilities.lazyLoad(exports, ["Kafka"], () => require("./kafka"));

export { KafkaAclArgs, KafkaAclState } from "./kafkaAcl";
export type KafkaAcl = import("./kafkaAcl").KafkaAcl;
export const KafkaAcl: typeof import("./kafkaAcl").KafkaAcl = null as any;
utilities.lazyLoad(exports, ["KafkaAcl"], () => require("./kafkaAcl"));

export { KafkaConnectArgs, KafkaConnectState } from "./kafkaConnect";
export type KafkaConnect = import("./kafkaConnect").KafkaConnect;
export const KafkaConnect: typeof import("./kafkaConnect").KafkaConnect = null as any;
utilities.lazyLoad(exports, ["KafkaConnect"], () => require("./kafkaConnect"));

export { KafkaConnectorArgs, KafkaConnectorState } from "./kafkaConnector";
export type KafkaConnector = import("./kafkaConnector").KafkaConnector;
export const KafkaConnector: typeof import("./kafkaConnector").KafkaConnector = null as any;
utilities.lazyLoad(exports, ["KafkaConnector"], () => require("./kafkaConnector"));

export { KafkaMirrorMakerArgs, KafkaMirrorMakerState } from "./kafkaMirrorMaker";
export type KafkaMirrorMaker = import("./kafkaMirrorMaker").KafkaMirrorMaker;
export const KafkaMirrorMaker: typeof import("./kafkaMirrorMaker").KafkaMirrorMaker = null as any;
utilities.lazyLoad(exports, ["KafkaMirrorMaker"], () => require("./kafkaMirrorMaker"));

export { KafkaNativeAclArgs, KafkaNativeAclState } from "./kafkaNativeAcl";
export type KafkaNativeAcl = import("./kafkaNativeAcl").KafkaNativeAcl;
export const KafkaNativeAcl: typeof import("./kafkaNativeAcl").KafkaNativeAcl = null as any;
utilities.lazyLoad(exports, ["KafkaNativeAcl"], () => require("./kafkaNativeAcl"));

export { KafkaSchemaArgs, KafkaSchemaState } from "./kafkaSchema";
export type KafkaSchema = import("./kafkaSchema").KafkaSchema;
export const KafkaSchema: typeof import("./kafkaSchema").KafkaSchema = null as any;
utilities.lazyLoad(exports, ["KafkaSchema"], () => require("./kafkaSchema"));

export { KafkaSchemaConfigurationArgs, KafkaSchemaConfigurationState } from "./kafkaSchemaConfiguration";
export type KafkaSchemaConfiguration = import("./kafkaSchemaConfiguration").KafkaSchemaConfiguration;
export const KafkaSchemaConfiguration: typeof import("./kafkaSchemaConfiguration").KafkaSchemaConfiguration = null as any;
utilities.lazyLoad(exports, ["KafkaSchemaConfiguration"], () => require("./kafkaSchemaConfiguration"));

export { KafkaSchemaRegistryAclArgs, KafkaSchemaRegistryAclState } from "./kafkaSchemaRegistryAcl";
export type KafkaSchemaRegistryAcl = import("./kafkaSchemaRegistryAcl").KafkaSchemaRegistryAcl;
export const KafkaSchemaRegistryAcl: typeof import("./kafkaSchemaRegistryAcl").KafkaSchemaRegistryAcl = null as any;
utilities.lazyLoad(exports, ["KafkaSchemaRegistryAcl"], () => require("./kafkaSchemaRegistryAcl"));

export { KafkaTopicArgs, KafkaTopicState } from "./kafkaTopic";
export type KafkaTopic = import("./kafkaTopic").KafkaTopic;
export const KafkaTopic: typeof import("./kafkaTopic").KafkaTopic = null as any;
utilities.lazyLoad(exports, ["KafkaTopic"], () => require("./kafkaTopic"));

export { KafkaUserArgs, KafkaUserState } from "./kafkaUser";
export type KafkaUser = import("./kafkaUser").KafkaUser;
export const KafkaUser: typeof import("./kafkaUser").KafkaUser = null as any;
utilities.lazyLoad(exports, ["KafkaUser"], () => require("./kafkaUser"));

export { M3AggregatorArgs, M3AggregatorState } from "./m3aggregator";
export type M3Aggregator = import("./m3aggregator").M3Aggregator;
export const M3Aggregator: typeof import("./m3aggregator").M3Aggregator = null as any;
utilities.lazyLoad(exports, ["M3Aggregator"], () => require("./m3aggregator"));

export { M3DbArgs, M3DbState } from "./m3db";
export type M3Db = import("./m3db").M3Db;
export const M3Db: typeof import("./m3db").M3Db = null as any;
utilities.lazyLoad(exports, ["M3Db"], () => require("./m3db"));

export { M3dbUserArgs, M3dbUserState } from "./m3dbUser";
export type M3dbUser = import("./m3dbUser").M3dbUser;
export const M3dbUser: typeof import("./m3dbUser").M3dbUser = null as any;
utilities.lazyLoad(exports, ["M3dbUser"], () => require("./m3dbUser"));

export { MirrorMakerReplicationFlowArgs, MirrorMakerReplicationFlowState } from "./mirrorMakerReplicationFlow";
export type MirrorMakerReplicationFlow = import("./mirrorMakerReplicationFlow").MirrorMakerReplicationFlow;
export const MirrorMakerReplicationFlow: typeof import("./mirrorMakerReplicationFlow").MirrorMakerReplicationFlow = null as any;
utilities.lazyLoad(exports, ["MirrorMakerReplicationFlow"], () => require("./mirrorMakerReplicationFlow"));

export { MySqlArgs, MySqlState } from "./mySql";
export type MySql = import("./mySql").MySql;
export const MySql: typeof import("./mySql").MySql = null as any;
utilities.lazyLoad(exports, ["MySql"], () => require("./mySql"));

export { MysqlDatabaseArgs, MysqlDatabaseState } from "./mysqlDatabase";
export type MysqlDatabase = import("./mysqlDatabase").MysqlDatabase;
export const MysqlDatabase: typeof import("./mysqlDatabase").MysqlDatabase = null as any;
utilities.lazyLoad(exports, ["MysqlDatabase"], () => require("./mysqlDatabase"));

export { MysqlUserArgs, MysqlUserState } from "./mysqlUser";
export type MysqlUser = import("./mysqlUser").MysqlUser;
export const MysqlUser: typeof import("./mysqlUser").MysqlUser = null as any;
utilities.lazyLoad(exports, ["MysqlUser"], () => require("./mysqlUser"));

export { OpenSearchArgs, OpenSearchState } from "./openSearch";
export type OpenSearch = import("./openSearch").OpenSearch;
export const OpenSearch: typeof import("./openSearch").OpenSearch = null as any;
utilities.lazyLoad(exports, ["OpenSearch"], () => require("./openSearch"));

export { OpenSearchAclConfigArgs, OpenSearchAclConfigState } from "./openSearchAclConfig";
export type OpenSearchAclConfig = import("./openSearchAclConfig").OpenSearchAclConfig;
export const OpenSearchAclConfig: typeof import("./openSearchAclConfig").OpenSearchAclConfig = null as any;
utilities.lazyLoad(exports, ["OpenSearchAclConfig"], () => require("./openSearchAclConfig"));

export { OpenSearchAclRuleArgs, OpenSearchAclRuleState } from "./openSearchAclRule";
export type OpenSearchAclRule = import("./openSearchAclRule").OpenSearchAclRule;
export const OpenSearchAclRule: typeof import("./openSearchAclRule").OpenSearchAclRule = null as any;
utilities.lazyLoad(exports, ["OpenSearchAclRule"], () => require("./openSearchAclRule"));

export { OpensearchSecurityPluginConfigArgs, OpensearchSecurityPluginConfigState } from "./opensearchSecurityPluginConfig";
export type OpensearchSecurityPluginConfig = import("./opensearchSecurityPluginConfig").OpensearchSecurityPluginConfig;
export const OpensearchSecurityPluginConfig: typeof import("./opensearchSecurityPluginConfig").OpensearchSecurityPluginConfig = null as any;
utilities.lazyLoad(exports, ["OpensearchSecurityPluginConfig"], () => require("./opensearchSecurityPluginConfig"));

export { OpensearchUserArgs, OpensearchUserState } from "./opensearchUser";
export type OpensearchUser = import("./opensearchUser").OpensearchUser;
export const OpensearchUser: typeof import("./opensearchUser").OpensearchUser = null as any;
utilities.lazyLoad(exports, ["OpensearchUser"], () => require("./opensearchUser"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationApplicationUserArgs, OrganizationApplicationUserState } from "./organizationApplicationUser";
export type OrganizationApplicationUser = import("./organizationApplicationUser").OrganizationApplicationUser;
export const OrganizationApplicationUser: typeof import("./organizationApplicationUser").OrganizationApplicationUser = null as any;
utilities.lazyLoad(exports, ["OrganizationApplicationUser"], () => require("./organizationApplicationUser"));

export { OrganizationApplicationUserTokenArgs, OrganizationApplicationUserTokenState } from "./organizationApplicationUserToken";
export type OrganizationApplicationUserToken = import("./organizationApplicationUserToken").OrganizationApplicationUserToken;
export const OrganizationApplicationUserToken: typeof import("./organizationApplicationUserToken").OrganizationApplicationUserToken = null as any;
utilities.lazyLoad(exports, ["OrganizationApplicationUserToken"], () => require("./organizationApplicationUserToken"));

export { OrganizationGroupProjectArgs, OrganizationGroupProjectState } from "./organizationGroupProject";
export type OrganizationGroupProject = import("./organizationGroupProject").OrganizationGroupProject;
export const OrganizationGroupProject: typeof import("./organizationGroupProject").OrganizationGroupProject = null as any;
utilities.lazyLoad(exports, ["OrganizationGroupProject"], () => require("./organizationGroupProject"));

export { OrganizationPermissionArgs, OrganizationPermissionState } from "./organizationPermission";
export type OrganizationPermission = import("./organizationPermission").OrganizationPermission;
export const OrganizationPermission: typeof import("./organizationPermission").OrganizationPermission = null as any;
utilities.lazyLoad(exports, ["OrganizationPermission"], () => require("./organizationPermission"));

export { OrganizationUserArgs, OrganizationUserState } from "./organizationUser";
export type OrganizationUser = import("./organizationUser").OrganizationUser;
export const OrganizationUser: typeof import("./organizationUser").OrganizationUser = null as any;
utilities.lazyLoad(exports, ["OrganizationUser"], () => require("./organizationUser"));

export { OrganizationUserGroupArgs, OrganizationUserGroupState } from "./organizationUserGroup";
export type OrganizationUserGroup = import("./organizationUserGroup").OrganizationUserGroup;
export const OrganizationUserGroup: typeof import("./organizationUserGroup").OrganizationUserGroup = null as any;
utilities.lazyLoad(exports, ["OrganizationUserGroup"], () => require("./organizationUserGroup"));

export { OrganizationUserGroupMemberArgs, OrganizationUserGroupMemberState } from "./organizationUserGroupMember";
export type OrganizationUserGroupMember = import("./organizationUserGroupMember").OrganizationUserGroupMember;
export const OrganizationUserGroupMember: typeof import("./organizationUserGroupMember").OrganizationUserGroupMember = null as any;
utilities.lazyLoad(exports, ["OrganizationUserGroupMember"], () => require("./organizationUserGroupMember"));

export { OrganizationalUnitArgs, OrganizationalUnitState } from "./organizationalUnit";
export type OrganizationalUnit = import("./organizationalUnit").OrganizationalUnit;
export const OrganizationalUnit: typeof import("./organizationalUnit").OrganizationalUnit = null as any;
utilities.lazyLoad(exports, ["OrganizationalUnit"], () => require("./organizationalUnit"));

export { PgArgs, PgState } from "./pg";
export type Pg = import("./pg").Pg;
export const Pg: typeof import("./pg").Pg = null as any;
utilities.lazyLoad(exports, ["Pg"], () => require("./pg"));

export { PgDatabaseArgs, PgDatabaseState } from "./pgDatabase";
export type PgDatabase = import("./pgDatabase").PgDatabase;
export const PgDatabase: typeof import("./pgDatabase").PgDatabase = null as any;
utilities.lazyLoad(exports, ["PgDatabase"], () => require("./pgDatabase"));

export { PgUserArgs, PgUserState } from "./pgUser";
export type PgUser = import("./pgUser").PgUser;
export const PgUser: typeof import("./pgUser").PgUser = null as any;
utilities.lazyLoad(exports, ["PgUser"], () => require("./pgUser"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectUserArgs, ProjectUserState } from "./projectUser";
export type ProjectUser = import("./projectUser").ProjectUser;
export const ProjectUser: typeof import("./projectUser").ProjectUser = null as any;
utilities.lazyLoad(exports, ["ProjectUser"], () => require("./projectUser"));

export { ProjectVpcArgs, ProjectVpcState } from "./projectVpc";
export type ProjectVpc = import("./projectVpc").ProjectVpc;
export const ProjectVpc: typeof import("./projectVpc").ProjectVpc = null as any;
utilities.lazyLoad(exports, ["ProjectVpc"], () => require("./projectVpc"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RedisArgs, RedisState } from "./redis";
export type Redis = import("./redis").Redis;
export const Redis: typeof import("./redis").Redis = null as any;
utilities.lazyLoad(exports, ["Redis"], () => require("./redis"));

export { RedisUserArgs, RedisUserState } from "./redisUser";
export type RedisUser = import("./redisUser").RedisUser;
export const RedisUser: typeof import("./redisUser").RedisUser = null as any;
utilities.lazyLoad(exports, ["RedisUser"], () => require("./redisUser"));

export { ServiceIntegrationArgs, ServiceIntegrationState } from "./serviceIntegration";
export type ServiceIntegration = import("./serviceIntegration").ServiceIntegration;
export const ServiceIntegration: typeof import("./serviceIntegration").ServiceIntegration = null as any;
utilities.lazyLoad(exports, ["ServiceIntegration"], () => require("./serviceIntegration"));

export { ServiceIntegrationEndpointArgs, ServiceIntegrationEndpointState } from "./serviceIntegrationEndpoint";
export type ServiceIntegrationEndpoint = import("./serviceIntegrationEndpoint").ServiceIntegrationEndpoint;
export const ServiceIntegrationEndpoint: typeof import("./serviceIntegrationEndpoint").ServiceIntegrationEndpoint = null as any;
utilities.lazyLoad(exports, ["ServiceIntegrationEndpoint"], () => require("./serviceIntegrationEndpoint"));

export { StaticIpArgs, StaticIpState } from "./staticIp";
export type StaticIp = import("./staticIp").StaticIp;
export const StaticIp: typeof import("./staticIp").StaticIp = null as any;
utilities.lazyLoad(exports, ["StaticIp"], () => require("./staticIp"));

export { ThanosArgs, ThanosState } from "./thanos";
export type Thanos = import("./thanos").Thanos;
export const Thanos: typeof import("./thanos").Thanos = null as any;
utilities.lazyLoad(exports, ["Thanos"], () => require("./thanos"));

export { TransitGatewayVpcAttachmentArgs, TransitGatewayVpcAttachmentState } from "./transitGatewayVpcAttachment";
export type TransitGatewayVpcAttachment = import("./transitGatewayVpcAttachment").TransitGatewayVpcAttachment;
export const TransitGatewayVpcAttachment: typeof import("./transitGatewayVpcAttachment").TransitGatewayVpcAttachment = null as any;
utilities.lazyLoad(exports, ["TransitGatewayVpcAttachment"], () => require("./transitGatewayVpcAttachment"));

export { ValkeyArgs, ValkeyState } from "./valkey";
export type Valkey = import("./valkey").Valkey;
export const Valkey: typeof import("./valkey").Valkey = null as any;
utilities.lazyLoad(exports, ["Valkey"], () => require("./valkey"));

export { ValkeyUserArgs, ValkeyUserState } from "./valkeyUser";
export type ValkeyUser = import("./valkeyUser").ValkeyUser;
export const ValkeyUser: typeof import("./valkeyUser").ValkeyUser = null as any;
utilities.lazyLoad(exports, ["ValkeyUser"], () => require("./valkeyUser"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aiven:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "aiven:index/accountAuthentication:AccountAuthentication":
                return new AccountAuthentication(name, <any>undefined, { urn })
            case "aiven:index/accountTeam:AccountTeam":
                return new AccountTeam(name, <any>undefined, { urn })
            case "aiven:index/accountTeamMember:AccountTeamMember":
                return new AccountTeamMember(name, <any>undefined, { urn })
            case "aiven:index/accountTeamProject:AccountTeamProject":
                return new AccountTeamProject(name, <any>undefined, { urn })
            case "aiven:index/awsPrivatelink:AwsPrivatelink":
                return new AwsPrivatelink(name, <any>undefined, { urn })
            case "aiven:index/awsVpcPeeringConnection:AwsVpcPeeringConnection":
                return new AwsVpcPeeringConnection(name, <any>undefined, { urn })
            case "aiven:index/azurePrivatelink:AzurePrivatelink":
                return new AzurePrivatelink(name, <any>undefined, { urn })
            case "aiven:index/azurePrivatelinkConnectionApproval:AzurePrivatelinkConnectionApproval":
                return new AzurePrivatelinkConnectionApproval(name, <any>undefined, { urn })
            case "aiven:index/azureVpcPeeringConnection:AzureVpcPeeringConnection":
                return new AzureVpcPeeringConnection(name, <any>undefined, { urn })
            case "aiven:index/billingGroup:BillingGroup":
                return new BillingGroup(name, <any>undefined, { urn })
            case "aiven:index/cassandra:Cassandra":
                return new Cassandra(name, <any>undefined, { urn })
            case "aiven:index/cassandraUser:CassandraUser":
                return new CassandraUser(name, <any>undefined, { urn })
            case "aiven:index/clickhouse:Clickhouse":
                return new Clickhouse(name, <any>undefined, { urn })
            case "aiven:index/clickhouseDatabase:ClickhouseDatabase":
                return new ClickhouseDatabase(name, <any>undefined, { urn })
            case "aiven:index/clickhouseGrant:ClickhouseGrant":
                return new ClickhouseGrant(name, <any>undefined, { urn })
            case "aiven:index/clickhouseRole:ClickhouseRole":
                return new ClickhouseRole(name, <any>undefined, { urn })
            case "aiven:index/clickhouseUser:ClickhouseUser":
                return new ClickhouseUser(name, <any>undefined, { urn })
            case "aiven:index/connectionPool:ConnectionPool":
                return new ConnectionPool(name, <any>undefined, { urn })
            case "aiven:index/dragonfly:Dragonfly":
                return new Dragonfly(name, <any>undefined, { urn })
            case "aiven:index/flink:Flink":
                return new Flink(name, <any>undefined, { urn })
            case "aiven:index/flinkApplication:FlinkApplication":
                return new FlinkApplication(name, <any>undefined, { urn })
            case "aiven:index/flinkApplicationDeployment:FlinkApplicationDeployment":
                return new FlinkApplicationDeployment(name, <any>undefined, { urn })
            case "aiven:index/flinkApplicationVersion:FlinkApplicationVersion":
                return new FlinkApplicationVersion(name, <any>undefined, { urn })
            case "aiven:index/gcpPrivatelink:GcpPrivatelink":
                return new GcpPrivatelink(name, <any>undefined, { urn })
            case "aiven:index/gcpPrivatelinkConnectionApproval:GcpPrivatelinkConnectionApproval":
                return new GcpPrivatelinkConnectionApproval(name, <any>undefined, { urn })
            case "aiven:index/gcpVpcPeeringConnection:GcpVpcPeeringConnection":
                return new GcpVpcPeeringConnection(name, <any>undefined, { urn })
            case "aiven:index/grafana:Grafana":
                return new Grafana(name, <any>undefined, { urn })
            case "aiven:index/influxDb:InfluxDb":
                return new InfluxDb(name, <any>undefined, { urn })
            case "aiven:index/influxdbDatabase:InfluxdbDatabase":
                return new InfluxdbDatabase(name, <any>undefined, { urn })
            case "aiven:index/influxdbUser:InfluxdbUser":
                return new InfluxdbUser(name, <any>undefined, { urn })
            case "aiven:index/kafka:Kafka":
                return new Kafka(name, <any>undefined, { urn })
            case "aiven:index/kafkaAcl:KafkaAcl":
                return new KafkaAcl(name, <any>undefined, { urn })
            case "aiven:index/kafkaConnect:KafkaConnect":
                return new KafkaConnect(name, <any>undefined, { urn })
            case "aiven:index/kafkaConnector:KafkaConnector":
                return new KafkaConnector(name, <any>undefined, { urn })
            case "aiven:index/kafkaMirrorMaker:KafkaMirrorMaker":
                return new KafkaMirrorMaker(name, <any>undefined, { urn })
            case "aiven:index/kafkaNativeAcl:KafkaNativeAcl":
                return new KafkaNativeAcl(name, <any>undefined, { urn })
            case "aiven:index/kafkaSchema:KafkaSchema":
                return new KafkaSchema(name, <any>undefined, { urn })
            case "aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration":
                return new KafkaSchemaConfiguration(name, <any>undefined, { urn })
            case "aiven:index/kafkaSchemaRegistryAcl:KafkaSchemaRegistryAcl":
                return new KafkaSchemaRegistryAcl(name, <any>undefined, { urn })
            case "aiven:index/kafkaTopic:KafkaTopic":
                return new KafkaTopic(name, <any>undefined, { urn })
            case "aiven:index/kafkaUser:KafkaUser":
                return new KafkaUser(name, <any>undefined, { urn })
            case "aiven:index/m3Aggregator:M3Aggregator":
                return new M3Aggregator(name, <any>undefined, { urn })
            case "aiven:index/m3Db:M3Db":
                return new M3Db(name, <any>undefined, { urn })
            case "aiven:index/m3dbUser:M3dbUser":
                return new M3dbUser(name, <any>undefined, { urn })
            case "aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow":
                return new MirrorMakerReplicationFlow(name, <any>undefined, { urn })
            case "aiven:index/mySql:MySql":
                return new MySql(name, <any>undefined, { urn })
            case "aiven:index/mysqlDatabase:MysqlDatabase":
                return new MysqlDatabase(name, <any>undefined, { urn })
            case "aiven:index/mysqlUser:MysqlUser":
                return new MysqlUser(name, <any>undefined, { urn })
            case "aiven:index/openSearch:OpenSearch":
                return new OpenSearch(name, <any>undefined, { urn })
            case "aiven:index/openSearchAclConfig:OpenSearchAclConfig":
                return new OpenSearchAclConfig(name, <any>undefined, { urn })
            case "aiven:index/openSearchAclRule:OpenSearchAclRule":
                return new OpenSearchAclRule(name, <any>undefined, { urn })
            case "aiven:index/opensearchSecurityPluginConfig:OpensearchSecurityPluginConfig":
                return new OpensearchSecurityPluginConfig(name, <any>undefined, { urn })
            case "aiven:index/opensearchUser:OpensearchUser":
                return new OpensearchUser(name, <any>undefined, { urn })
            case "aiven:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "aiven:index/organizationApplicationUser:OrganizationApplicationUser":
                return new OrganizationApplicationUser(name, <any>undefined, { urn })
            case "aiven:index/organizationApplicationUserToken:OrganizationApplicationUserToken":
                return new OrganizationApplicationUserToken(name, <any>undefined, { urn })
            case "aiven:index/organizationGroupProject:OrganizationGroupProject":
                return new OrganizationGroupProject(name, <any>undefined, { urn })
            case "aiven:index/organizationPermission:OrganizationPermission":
                return new OrganizationPermission(name, <any>undefined, { urn })
            case "aiven:index/organizationUser:OrganizationUser":
                return new OrganizationUser(name, <any>undefined, { urn })
            case "aiven:index/organizationUserGroup:OrganizationUserGroup":
                return new OrganizationUserGroup(name, <any>undefined, { urn })
            case "aiven:index/organizationUserGroupMember:OrganizationUserGroupMember":
                return new OrganizationUserGroupMember(name, <any>undefined, { urn })
            case "aiven:index/organizationalUnit:OrganizationalUnit":
                return new OrganizationalUnit(name, <any>undefined, { urn })
            case "aiven:index/pg:Pg":
                return new Pg(name, <any>undefined, { urn })
            case "aiven:index/pgDatabase:PgDatabase":
                return new PgDatabase(name, <any>undefined, { urn })
            case "aiven:index/pgUser:PgUser":
                return new PgUser(name, <any>undefined, { urn })
            case "aiven:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "aiven:index/projectUser:ProjectUser":
                return new ProjectUser(name, <any>undefined, { urn })
            case "aiven:index/projectVpc:ProjectVpc":
                return new ProjectVpc(name, <any>undefined, { urn })
            case "aiven:index/redis:Redis":
                return new Redis(name, <any>undefined, { urn })
            case "aiven:index/redisUser:RedisUser":
                return new RedisUser(name, <any>undefined, { urn })
            case "aiven:index/serviceIntegration:ServiceIntegration":
                return new ServiceIntegration(name, <any>undefined, { urn })
            case "aiven:index/serviceIntegrationEndpoint:ServiceIntegrationEndpoint":
                return new ServiceIntegrationEndpoint(name, <any>undefined, { urn })
            case "aiven:index/staticIp:StaticIp":
                return new StaticIp(name, <any>undefined, { urn })
            case "aiven:index/thanos:Thanos":
                return new Thanos(name, <any>undefined, { urn })
            case "aiven:index/transitGatewayVpcAttachment:TransitGatewayVpcAttachment":
                return new TransitGatewayVpcAttachment(name, <any>undefined, { urn })
            case "aiven:index/valkey:Valkey":
                return new Valkey(name, <any>undefined, { urn })
            case "aiven:index/valkeyUser:ValkeyUser":
                return new ValkeyUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aiven", "index/account", _module)
pulumi.runtime.registerResourceModule("aiven", "index/accountAuthentication", _module)
pulumi.runtime.registerResourceModule("aiven", "index/accountTeam", _module)
pulumi.runtime.registerResourceModule("aiven", "index/accountTeamMember", _module)
pulumi.runtime.registerResourceModule("aiven", "index/accountTeamProject", _module)
pulumi.runtime.registerResourceModule("aiven", "index/awsPrivatelink", _module)
pulumi.runtime.registerResourceModule("aiven", "index/awsVpcPeeringConnection", _module)
pulumi.runtime.registerResourceModule("aiven", "index/azurePrivatelink", _module)
pulumi.runtime.registerResourceModule("aiven", "index/azurePrivatelinkConnectionApproval", _module)
pulumi.runtime.registerResourceModule("aiven", "index/azureVpcPeeringConnection", _module)
pulumi.runtime.registerResourceModule("aiven", "index/billingGroup", _module)
pulumi.runtime.registerResourceModule("aiven", "index/cassandra", _module)
pulumi.runtime.registerResourceModule("aiven", "index/cassandraUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/clickhouse", _module)
pulumi.runtime.registerResourceModule("aiven", "index/clickhouseDatabase", _module)
pulumi.runtime.registerResourceModule("aiven", "index/clickhouseGrant", _module)
pulumi.runtime.registerResourceModule("aiven", "index/clickhouseRole", _module)
pulumi.runtime.registerResourceModule("aiven", "index/clickhouseUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/connectionPool", _module)
pulumi.runtime.registerResourceModule("aiven", "index/dragonfly", _module)
pulumi.runtime.registerResourceModule("aiven", "index/flink", _module)
pulumi.runtime.registerResourceModule("aiven", "index/flinkApplication", _module)
pulumi.runtime.registerResourceModule("aiven", "index/flinkApplicationDeployment", _module)
pulumi.runtime.registerResourceModule("aiven", "index/flinkApplicationVersion", _module)
pulumi.runtime.registerResourceModule("aiven", "index/gcpPrivatelink", _module)
pulumi.runtime.registerResourceModule("aiven", "index/gcpPrivatelinkConnectionApproval", _module)
pulumi.runtime.registerResourceModule("aiven", "index/gcpVpcPeeringConnection", _module)
pulumi.runtime.registerResourceModule("aiven", "index/grafana", _module)
pulumi.runtime.registerResourceModule("aiven", "index/influxDb", _module)
pulumi.runtime.registerResourceModule("aiven", "index/influxdbDatabase", _module)
pulumi.runtime.registerResourceModule("aiven", "index/influxdbUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafka", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaAcl", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaConnect", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaConnector", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaMirrorMaker", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaNativeAcl", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaSchema", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaSchemaConfiguration", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaSchemaRegistryAcl", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaTopic", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/m3Aggregator", _module)
pulumi.runtime.registerResourceModule("aiven", "index/m3Db", _module)
pulumi.runtime.registerResourceModule("aiven", "index/m3dbUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/mirrorMakerReplicationFlow", _module)
pulumi.runtime.registerResourceModule("aiven", "index/mySql", _module)
pulumi.runtime.registerResourceModule("aiven", "index/mysqlDatabase", _module)
pulumi.runtime.registerResourceModule("aiven", "index/mysqlUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/openSearch", _module)
pulumi.runtime.registerResourceModule("aiven", "index/openSearchAclConfig", _module)
pulumi.runtime.registerResourceModule("aiven", "index/openSearchAclRule", _module)
pulumi.runtime.registerResourceModule("aiven", "index/opensearchSecurityPluginConfig", _module)
pulumi.runtime.registerResourceModule("aiven", "index/opensearchUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/organization", _module)
pulumi.runtime.registerResourceModule("aiven", "index/organizationApplicationUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/organizationApplicationUserToken", _module)
pulumi.runtime.registerResourceModule("aiven", "index/organizationGroupProject", _module)
pulumi.runtime.registerResourceModule("aiven", "index/organizationPermission", _module)
pulumi.runtime.registerResourceModule("aiven", "index/organizationUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/organizationUserGroup", _module)
pulumi.runtime.registerResourceModule("aiven", "index/organizationUserGroupMember", _module)
pulumi.runtime.registerResourceModule("aiven", "index/organizationalUnit", _module)
pulumi.runtime.registerResourceModule("aiven", "index/pg", _module)
pulumi.runtime.registerResourceModule("aiven", "index/pgDatabase", _module)
pulumi.runtime.registerResourceModule("aiven", "index/pgUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/project", _module)
pulumi.runtime.registerResourceModule("aiven", "index/projectUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/projectVpc", _module)
pulumi.runtime.registerResourceModule("aiven", "index/redis", _module)
pulumi.runtime.registerResourceModule("aiven", "index/redisUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/serviceIntegration", _module)
pulumi.runtime.registerResourceModule("aiven", "index/serviceIntegrationEndpoint", _module)
pulumi.runtime.registerResourceModule("aiven", "index/staticIp", _module)
pulumi.runtime.registerResourceModule("aiven", "index/thanos", _module)
pulumi.runtime.registerResourceModule("aiven", "index/transitGatewayVpcAttachment", _module)
pulumi.runtime.registerResourceModule("aiven", "index/valkey", _module)
pulumi.runtime.registerResourceModule("aiven", "index/valkeyUser", _module)
pulumi.runtime.registerResourcePackage("aiven", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:aiven") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
