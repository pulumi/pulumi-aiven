// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./account";
export * from "./accountAuthentication";
export * from "./accountTeam";
export * from "./accountTeamMember";
export * from "./accountTeamProject";
export * from "./awsPrivatelink";
export * from "./billingGroup";
export * from "./cassandra";
export * from "./connectionPool";
export * from "./database";
export * from "./elasticSearch";
export * from "./elasticSearchAcl";
export * from "./getAccount";
export * from "./getAccountAuthentication";
export * from "./getAccountTeam";
export * from "./getAccountTeamMember";
export * from "./getAccountTeamProject";
export * from "./getAwsPrivatelink";
export * from "./getCassanda";
export * from "./getConnectionPool";
export * from "./getDatabase";
export * from "./getElasticSearch";
export * from "./getElasticSearchAcl";
export * from "./getGrafana";
export * from "./getInfluxDb";
export * from "./getKafka";
export * from "./getKafkaAcl";
export * from "./getKafkaConnect";
export * from "./getKafkaConnector";
export * from "./getKafkaMirrorMaker";
export * from "./getKafkaSchema";
export * from "./getKafkaSchemaConfiguration";
export * from "./getKafkaTopic";
export * from "./getM3Aggregator";
export * from "./getM3Db";
export * from "./getMirrorMakerReplicationFlow";
export * from "./getMySql";
export * from "./getPg";
export * from "./getProject";
export * from "./getProjectUser";
export * from "./getProjectVpc";
export * from "./getRedis";
export * from "./getService";
export * from "./getServiceComponent";
export * from "./getServiceIntegration";
export * from "./getServiceIntegrationEndpoint";
export * from "./getServiceUser";
export * from "./getTransitGatewayVpcAttachment";
export * from "./getVpcPeeringConnection";
export * from "./grafana";
export * from "./influxDb";
export * from "./kafka";
export * from "./kafkaAcl";
export * from "./kafkaConnect";
export * from "./kafkaConnector";
export * from "./kafkaMirrorMaker";
export * from "./kafkaSchema";
export * from "./kafkaSchemaConfiguration";
export * from "./kafkaTopic";
export * from "./m3aggregator";
export * from "./m3db";
export * from "./mirrorMakerReplicationFlow";
export * from "./mySql";
export * from "./pg";
export * from "./project";
export * from "./projectUser";
export * from "./projectVpc";
export * from "./provider";
export * from "./redis";
export * from "./service";
export * from "./serviceIntegration";
export * from "./serviceIntegrationEndpoint";
export * from "./serviceUser";
export * from "./transitGatewayVpcAttachment";
export * from "./vpcPeeringConnection";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Account } from "./account";
import { AccountAuthentication } from "./accountAuthentication";
import { AccountTeam } from "./accountTeam";
import { AccountTeamMember } from "./accountTeamMember";
import { AccountTeamProject } from "./accountTeamProject";
import { AwsPrivatelink } from "./awsPrivatelink";
import { BillingGroup } from "./billingGroup";
import { Cassandra } from "./cassandra";
import { ConnectionPool } from "./connectionPool";
import { Database } from "./database";
import { ElasticSearch } from "./elasticSearch";
import { ElasticSearchAcl } from "./elasticSearchAcl";
import { Grafana } from "./grafana";
import { InfluxDb } from "./influxDb";
import { Kafka } from "./kafka";
import { KafkaAcl } from "./kafkaAcl";
import { KafkaConnect } from "./kafkaConnect";
import { KafkaConnector } from "./kafkaConnector";
import { KafkaMirrorMaker } from "./kafkaMirrorMaker";
import { KafkaSchema } from "./kafkaSchema";
import { KafkaSchemaConfiguration } from "./kafkaSchemaConfiguration";
import { KafkaTopic } from "./kafkaTopic";
import { M3Aggregator } from "./m3aggregator";
import { M3Db } from "./m3db";
import { MirrorMakerReplicationFlow } from "./mirrorMakerReplicationFlow";
import { MySql } from "./mySql";
import { Pg } from "./pg";
import { Project } from "./project";
import { ProjectUser } from "./projectUser";
import { ProjectVpc } from "./projectVpc";
import { Redis } from "./redis";
import { Service } from "./service";
import { ServiceIntegration } from "./serviceIntegration";
import { ServiceIntegrationEndpoint } from "./serviceIntegrationEndpoint";
import { ServiceUser } from "./serviceUser";
import { TransitGatewayVpcAttachment } from "./transitGatewayVpcAttachment";
import { VpcPeeringConnection } from "./vpcPeeringConnection";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aiven:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "aiven:index/accountAuthentication:AccountAuthentication":
                return new AccountAuthentication(name, <any>undefined, { urn })
            case "aiven:index/accountTeam:AccountTeam":
                return new AccountTeam(name, <any>undefined, { urn })
            case "aiven:index/accountTeamMember:AccountTeamMember":
                return new AccountTeamMember(name, <any>undefined, { urn })
            case "aiven:index/accountTeamProject:AccountTeamProject":
                return new AccountTeamProject(name, <any>undefined, { urn })
            case "aiven:index/awsPrivatelink:AwsPrivatelink":
                return new AwsPrivatelink(name, <any>undefined, { urn })
            case "aiven:index/billingGroup:BillingGroup":
                return new BillingGroup(name, <any>undefined, { urn })
            case "aiven:index/cassandra:Cassandra":
                return new Cassandra(name, <any>undefined, { urn })
            case "aiven:index/connectionPool:ConnectionPool":
                return new ConnectionPool(name, <any>undefined, { urn })
            case "aiven:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "aiven:index/elasticSearch:ElasticSearch":
                return new ElasticSearch(name, <any>undefined, { urn })
            case "aiven:index/elasticSearchAcl:ElasticSearchAcl":
                return new ElasticSearchAcl(name, <any>undefined, { urn })
            case "aiven:index/grafana:Grafana":
                return new Grafana(name, <any>undefined, { urn })
            case "aiven:index/influxDb:InfluxDb":
                return new InfluxDb(name, <any>undefined, { urn })
            case "aiven:index/kafka:Kafka":
                return new Kafka(name, <any>undefined, { urn })
            case "aiven:index/kafkaAcl:KafkaAcl":
                return new KafkaAcl(name, <any>undefined, { urn })
            case "aiven:index/kafkaConnect:KafkaConnect":
                return new KafkaConnect(name, <any>undefined, { urn })
            case "aiven:index/kafkaConnector:KafkaConnector":
                return new KafkaConnector(name, <any>undefined, { urn })
            case "aiven:index/kafkaMirrorMaker:KafkaMirrorMaker":
                return new KafkaMirrorMaker(name, <any>undefined, { urn })
            case "aiven:index/kafkaSchema:KafkaSchema":
                return new KafkaSchema(name, <any>undefined, { urn })
            case "aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration":
                return new KafkaSchemaConfiguration(name, <any>undefined, { urn })
            case "aiven:index/kafkaTopic:KafkaTopic":
                return new KafkaTopic(name, <any>undefined, { urn })
            case "aiven:index/m3Aggregator:M3Aggregator":
                return new M3Aggregator(name, <any>undefined, { urn })
            case "aiven:index/m3Db:M3Db":
                return new M3Db(name, <any>undefined, { urn })
            case "aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow":
                return new MirrorMakerReplicationFlow(name, <any>undefined, { urn })
            case "aiven:index/mySql:MySql":
                return new MySql(name, <any>undefined, { urn })
            case "aiven:index/pg:Pg":
                return new Pg(name, <any>undefined, { urn })
            case "aiven:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "aiven:index/projectUser:ProjectUser":
                return new ProjectUser(name, <any>undefined, { urn })
            case "aiven:index/projectVpc:ProjectVpc":
                return new ProjectVpc(name, <any>undefined, { urn })
            case "aiven:index/redis:Redis":
                return new Redis(name, <any>undefined, { urn })
            case "aiven:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "aiven:index/serviceIntegration:ServiceIntegration":
                return new ServiceIntegration(name, <any>undefined, { urn })
            case "aiven:index/serviceIntegrationEndpoint:ServiceIntegrationEndpoint":
                return new ServiceIntegrationEndpoint(name, <any>undefined, { urn })
            case "aiven:index/serviceUser:ServiceUser":
                return new ServiceUser(name, <any>undefined, { urn })
            case "aiven:index/transitGatewayVpcAttachment:TransitGatewayVpcAttachment":
                return new TransitGatewayVpcAttachment(name, <any>undefined, { urn })
            case "aiven:index/vpcPeeringConnection:VpcPeeringConnection":
                return new VpcPeeringConnection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aiven", "index/account", _module)
pulumi.runtime.registerResourceModule("aiven", "index/accountAuthentication", _module)
pulumi.runtime.registerResourceModule("aiven", "index/accountTeam", _module)
pulumi.runtime.registerResourceModule("aiven", "index/accountTeamMember", _module)
pulumi.runtime.registerResourceModule("aiven", "index/accountTeamProject", _module)
pulumi.runtime.registerResourceModule("aiven", "index/awsPrivatelink", _module)
pulumi.runtime.registerResourceModule("aiven", "index/billingGroup", _module)
pulumi.runtime.registerResourceModule("aiven", "index/cassandra", _module)
pulumi.runtime.registerResourceModule("aiven", "index/connectionPool", _module)
pulumi.runtime.registerResourceModule("aiven", "index/database", _module)
pulumi.runtime.registerResourceModule("aiven", "index/elasticSearch", _module)
pulumi.runtime.registerResourceModule("aiven", "index/elasticSearchAcl", _module)
pulumi.runtime.registerResourceModule("aiven", "index/grafana", _module)
pulumi.runtime.registerResourceModule("aiven", "index/influxDb", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafka", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaAcl", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaConnect", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaConnector", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaMirrorMaker", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaSchema", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaSchemaConfiguration", _module)
pulumi.runtime.registerResourceModule("aiven", "index/kafkaTopic", _module)
pulumi.runtime.registerResourceModule("aiven", "index/m3Aggregator", _module)
pulumi.runtime.registerResourceModule("aiven", "index/m3Db", _module)
pulumi.runtime.registerResourceModule("aiven", "index/mirrorMakerReplicationFlow", _module)
pulumi.runtime.registerResourceModule("aiven", "index/mySql", _module)
pulumi.runtime.registerResourceModule("aiven", "index/pg", _module)
pulumi.runtime.registerResourceModule("aiven", "index/project", _module)
pulumi.runtime.registerResourceModule("aiven", "index/projectUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/projectVpc", _module)
pulumi.runtime.registerResourceModule("aiven", "index/redis", _module)
pulumi.runtime.registerResourceModule("aiven", "index/service", _module)
pulumi.runtime.registerResourceModule("aiven", "index/serviceIntegration", _module)
pulumi.runtime.registerResourceModule("aiven", "index/serviceIntegrationEndpoint", _module)
pulumi.runtime.registerResourceModule("aiven", "index/serviceUser", _module)
pulumi.runtime.registerResourceModule("aiven", "index/transitGatewayVpcAttachment", _module)
pulumi.runtime.registerResourceModule("aiven", "index/vpcPeeringConnection", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("aiven", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:aiven") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
