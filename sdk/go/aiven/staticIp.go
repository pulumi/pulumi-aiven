// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The StaticIp resource allows the creation and deletion of static ips. Please note that once a static ip is in the 'assigned' state it is bound to the node it is assigned to and cannot be deleted or disassociated until the node is recycled. Plans that would delete static ips that are in the assigned state will be blocked.
type StaticIp struct {
	pulumi.CustomResourceState

	// Specifies the cloud that the static ip belongs to. Changing this property forces recreation of the resource.
	CloudName pulumi.StringOutput `pulumi:"cloudName"`
	// The address of the static ip.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// The service name the static ip is associated with.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The state the static ip is in.
	State pulumi.StringOutput `pulumi:"state"`
	// The static ip id of the resource. Should be used as a reference elsewhere.
	StaticIpAddressId pulumi.StringOutput `pulumi:"staticIpAddressId"`
}

// NewStaticIp registers a new resource with the given unique name, arguments, and options.
func NewStaticIp(ctx *pulumi.Context,
	name string, args *StaticIpArgs, opts ...pulumi.ResourceOption) (*StaticIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudName == nil {
		return nil, errors.New("invalid value for required argument 'CloudName'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StaticIp
	err := ctx.RegisterResource("aiven:index/staticIp:StaticIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticIp gets an existing StaticIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticIpState, opts ...pulumi.ResourceOption) (*StaticIp, error) {
	var resource StaticIp
	err := ctx.ReadResource("aiven:index/staticIp:StaticIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticIp resources.
type staticIpState struct {
	// Specifies the cloud that the static ip belongs to. Changing this property forces recreation of the resource.
	CloudName *string `pulumi:"cloudName"`
	// The address of the static ip.
	IpAddress *string `pulumi:"ipAddress"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// The service name the static ip is associated with.
	ServiceName *string `pulumi:"serviceName"`
	// The state the static ip is in.
	State *string `pulumi:"state"`
	// The static ip id of the resource. Should be used as a reference elsewhere.
	StaticIpAddressId *string `pulumi:"staticIpAddressId"`
}

type StaticIpState struct {
	// Specifies the cloud that the static ip belongs to. Changing this property forces recreation of the resource.
	CloudName pulumi.StringPtrInput
	// The address of the static ip.
	IpAddress pulumi.StringPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// The service name the static ip is associated with.
	ServiceName pulumi.StringPtrInput
	// The state the static ip is in.
	State pulumi.StringPtrInput
	// The static ip id of the resource. Should be used as a reference elsewhere.
	StaticIpAddressId pulumi.StringPtrInput
}

func (StaticIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticIpState)(nil)).Elem()
}

type staticIpArgs struct {
	// Specifies the cloud that the static ip belongs to. Changing this property forces recreation of the resource.
	CloudName string `pulumi:"cloudName"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a StaticIp resource.
type StaticIpArgs struct {
	// Specifies the cloud that the static ip belongs to. Changing this property forces recreation of the resource.
	CloudName pulumi.StringInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
}

func (StaticIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticIpArgs)(nil)).Elem()
}

type StaticIpInput interface {
	pulumi.Input

	ToStaticIpOutput() StaticIpOutput
	ToStaticIpOutputWithContext(ctx context.Context) StaticIpOutput
}

func (*StaticIp) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticIp)(nil)).Elem()
}

func (i *StaticIp) ToStaticIpOutput() StaticIpOutput {
	return i.ToStaticIpOutputWithContext(context.Background())
}

func (i *StaticIp) ToStaticIpOutputWithContext(ctx context.Context) StaticIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticIpOutput)
}

// StaticIpArrayInput is an input type that accepts StaticIpArray and StaticIpArrayOutput values.
// You can construct a concrete instance of `StaticIpArrayInput` via:
//
//	StaticIpArray{ StaticIpArgs{...} }
type StaticIpArrayInput interface {
	pulumi.Input

	ToStaticIpArrayOutput() StaticIpArrayOutput
	ToStaticIpArrayOutputWithContext(context.Context) StaticIpArrayOutput
}

type StaticIpArray []StaticIpInput

func (StaticIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticIp)(nil)).Elem()
}

func (i StaticIpArray) ToStaticIpArrayOutput() StaticIpArrayOutput {
	return i.ToStaticIpArrayOutputWithContext(context.Background())
}

func (i StaticIpArray) ToStaticIpArrayOutputWithContext(ctx context.Context) StaticIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticIpArrayOutput)
}

// StaticIpMapInput is an input type that accepts StaticIpMap and StaticIpMapOutput values.
// You can construct a concrete instance of `StaticIpMapInput` via:
//
//	StaticIpMap{ "key": StaticIpArgs{...} }
type StaticIpMapInput interface {
	pulumi.Input

	ToStaticIpMapOutput() StaticIpMapOutput
	ToStaticIpMapOutputWithContext(context.Context) StaticIpMapOutput
}

type StaticIpMap map[string]StaticIpInput

func (StaticIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticIp)(nil)).Elem()
}

func (i StaticIpMap) ToStaticIpMapOutput() StaticIpMapOutput {
	return i.ToStaticIpMapOutputWithContext(context.Background())
}

func (i StaticIpMap) ToStaticIpMapOutputWithContext(ctx context.Context) StaticIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticIpMapOutput)
}

type StaticIpOutput struct{ *pulumi.OutputState }

func (StaticIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticIp)(nil)).Elem()
}

func (o StaticIpOutput) ToStaticIpOutput() StaticIpOutput {
	return o
}

func (o StaticIpOutput) ToStaticIpOutputWithContext(ctx context.Context) StaticIpOutput {
	return o
}

// Specifies the cloud that the static ip belongs to. Changing this property forces recreation of the resource.
func (o StaticIpOutput) CloudName() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticIp) pulumi.StringOutput { return v.CloudName }).(pulumi.StringOutput)
}

// The address of the static ip.
func (o StaticIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticIp) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o StaticIpOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticIp) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The service name the static ip is associated with.
func (o StaticIpOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticIp) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The state the static ip is in.
func (o StaticIpOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticIp) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The static ip id of the resource. Should be used as a reference elsewhere.
func (o StaticIpOutput) StaticIpAddressId() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticIp) pulumi.StringOutput { return v.StaticIpAddressId }).(pulumi.StringOutput)
}

type StaticIpArrayOutput struct{ *pulumi.OutputState }

func (StaticIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticIp)(nil)).Elem()
}

func (o StaticIpArrayOutput) ToStaticIpArrayOutput() StaticIpArrayOutput {
	return o
}

func (o StaticIpArrayOutput) ToStaticIpArrayOutputWithContext(ctx context.Context) StaticIpArrayOutput {
	return o
}

func (o StaticIpArrayOutput) Index(i pulumi.IntInput) StaticIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StaticIp {
		return vs[0].([]*StaticIp)[vs[1].(int)]
	}).(StaticIpOutput)
}

type StaticIpMapOutput struct{ *pulumi.OutputState }

func (StaticIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticIp)(nil)).Elem()
}

func (o StaticIpMapOutput) ToStaticIpMapOutput() StaticIpMapOutput {
	return o
}

func (o StaticIpMapOutput) ToStaticIpMapOutputWithContext(ctx context.Context) StaticIpMapOutput {
	return o
}

func (o StaticIpMapOutput) MapIndex(k pulumi.StringInput) StaticIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StaticIp {
		return vs[0].(map[string]*StaticIp)[vs[1].(string)]
	}).(StaticIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StaticIpInput)(nil)).Elem(), &StaticIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticIpArrayInput)(nil)).Elem(), StaticIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticIpMapInput)(nil)).Elem(), StaticIpMap{})
	pulumi.RegisterOutputType(StaticIpOutput{})
	pulumi.RegisterOutputType(StaticIpArrayOutput{})
	pulumi.RegisterOutputType(StaticIpMapOutput{})
}
