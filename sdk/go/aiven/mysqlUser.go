// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The MySQL User resource allows the creation and management of Aiven MySQL Users.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewMysqlUser(ctx, "foo", &aiven.MysqlUserArgs{
//				ServiceName: pulumi.Any(bar.ServiceName),
//				Project:     pulumi.String("my-project"),
//				Username:    pulumi.String("user-1"),
//				Password:    pulumi.String("Test$1234"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/mysqlUser:MysqlUser foo PROJECT/SERVICE_NAME/USERNAME
// ```
type MysqlUser struct {
	pulumi.CustomResourceState

	// Access certificate for the user
	AccessCert pulumi.StringOutput `pulumi:"accessCert"`
	// Access certificate key for the user
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// Authentication details. The possible values are `cachingSha2Password`, `mysqlNativePassword` and `null`.
	Authentication pulumi.StringPtrOutput `pulumi:"authentication"`
	// The password of the MySQL User ( not applicable for all services ).
	Password pulumi.StringOutput `pulumi:"password"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Type of the user account. Tells whether the user is the primary account or a regular account.
	Type pulumi.StringOutput `pulumi:"type"`
	// The actual name of the MySQL User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewMysqlUser registers a new resource with the given unique name, arguments, and options.
func NewMysqlUser(ctx *pulumi.Context,
	name string, args *MysqlUserArgs, opts ...pulumi.ResourceOption) (*MysqlUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessCert",
		"accessKey",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MysqlUser
	err := ctx.RegisterResource("aiven:index/mysqlUser:MysqlUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlUser gets an existing MysqlUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlUserState, opts ...pulumi.ResourceOption) (*MysqlUser, error) {
	var resource MysqlUser
	err := ctx.ReadResource("aiven:index/mysqlUser:MysqlUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlUser resources.
type mysqlUserState struct {
	// Access certificate for the user
	AccessCert *string `pulumi:"accessCert"`
	// Access certificate key for the user
	AccessKey *string `pulumi:"accessKey"`
	// Authentication details. The possible values are `cachingSha2Password`, `mysqlNativePassword` and `null`.
	Authentication *string `pulumi:"authentication"`
	// The password of the MySQL User ( not applicable for all services ).
	Password *string `pulumi:"password"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// Type of the user account. Tells whether the user is the primary account or a regular account.
	Type *string `pulumi:"type"`
	// The actual name of the MySQL User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username *string `pulumi:"username"`
}

type MysqlUserState struct {
	// Access certificate for the user
	AccessCert pulumi.StringPtrInput
	// Access certificate key for the user
	AccessKey pulumi.StringPtrInput
	// Authentication details. The possible values are `cachingSha2Password`, `mysqlNativePassword` and `null`.
	Authentication pulumi.StringPtrInput
	// The password of the MySQL User ( not applicable for all services ).
	Password pulumi.StringPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// Type of the user account. Tells whether the user is the primary account or a regular account.
	Type pulumi.StringPtrInput
	// The actual name of the MySQL User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username pulumi.StringPtrInput
}

func (MysqlUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlUserState)(nil)).Elem()
}

type mysqlUserArgs struct {
	// Authentication details. The possible values are `cachingSha2Password`, `mysqlNativePassword` and `null`.
	Authentication *string `pulumi:"authentication"`
	// The password of the MySQL User ( not applicable for all services ).
	Password *string `pulumi:"password"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// The actual name of the MySQL User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a MysqlUser resource.
type MysqlUserArgs struct {
	// Authentication details. The possible values are `cachingSha2Password`, `mysqlNativePassword` and `null`.
	Authentication pulumi.StringPtrInput
	// The password of the MySQL User ( not applicable for all services ).
	Password pulumi.StringPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringInput
	// The actual name of the MySQL User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username pulumi.StringInput
}

func (MysqlUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlUserArgs)(nil)).Elem()
}

type MysqlUserInput interface {
	pulumi.Input

	ToMysqlUserOutput() MysqlUserOutput
	ToMysqlUserOutputWithContext(ctx context.Context) MysqlUserOutput
}

func (*MysqlUser) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlUser)(nil)).Elem()
}

func (i *MysqlUser) ToMysqlUserOutput() MysqlUserOutput {
	return i.ToMysqlUserOutputWithContext(context.Background())
}

func (i *MysqlUser) ToMysqlUserOutputWithContext(ctx context.Context) MysqlUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlUserOutput)
}

// MysqlUserArrayInput is an input type that accepts MysqlUserArray and MysqlUserArrayOutput values.
// You can construct a concrete instance of `MysqlUserArrayInput` via:
//
//	MysqlUserArray{ MysqlUserArgs{...} }
type MysqlUserArrayInput interface {
	pulumi.Input

	ToMysqlUserArrayOutput() MysqlUserArrayOutput
	ToMysqlUserArrayOutputWithContext(context.Context) MysqlUserArrayOutput
}

type MysqlUserArray []MysqlUserInput

func (MysqlUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlUser)(nil)).Elem()
}

func (i MysqlUserArray) ToMysqlUserArrayOutput() MysqlUserArrayOutput {
	return i.ToMysqlUserArrayOutputWithContext(context.Background())
}

func (i MysqlUserArray) ToMysqlUserArrayOutputWithContext(ctx context.Context) MysqlUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlUserArrayOutput)
}

// MysqlUserMapInput is an input type that accepts MysqlUserMap and MysqlUserMapOutput values.
// You can construct a concrete instance of `MysqlUserMapInput` via:
//
//	MysqlUserMap{ "key": MysqlUserArgs{...} }
type MysqlUserMapInput interface {
	pulumi.Input

	ToMysqlUserMapOutput() MysqlUserMapOutput
	ToMysqlUserMapOutputWithContext(context.Context) MysqlUserMapOutput
}

type MysqlUserMap map[string]MysqlUserInput

func (MysqlUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlUser)(nil)).Elem()
}

func (i MysqlUserMap) ToMysqlUserMapOutput() MysqlUserMapOutput {
	return i.ToMysqlUserMapOutputWithContext(context.Background())
}

func (i MysqlUserMap) ToMysqlUserMapOutputWithContext(ctx context.Context) MysqlUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlUserMapOutput)
}

type MysqlUserOutput struct{ *pulumi.OutputState }

func (MysqlUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlUser)(nil)).Elem()
}

func (o MysqlUserOutput) ToMysqlUserOutput() MysqlUserOutput {
	return o
}

func (o MysqlUserOutput) ToMysqlUserOutputWithContext(ctx context.Context) MysqlUserOutput {
	return o
}

// Access certificate for the user
func (o MysqlUserOutput) AccessCert() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlUser) pulumi.StringOutput { return v.AccessCert }).(pulumi.StringOutput)
}

// Access certificate key for the user
func (o MysqlUserOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlUser) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// Authentication details. The possible values are `cachingSha2Password`, `mysqlNativePassword` and `null`.
func (o MysqlUserOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlUser) pulumi.StringPtrOutput { return v.Authentication }).(pulumi.StringPtrOutput)
}

// The password of the MySQL User ( not applicable for all services ).
func (o MysqlUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o MysqlUserOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlUser) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o MysqlUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Type of the user account. Tells whether the user is the primary account or a regular account.
func (o MysqlUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The actual name of the MySQL User. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o MysqlUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type MysqlUserArrayOutput struct{ *pulumi.OutputState }

func (MysqlUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlUser)(nil)).Elem()
}

func (o MysqlUserArrayOutput) ToMysqlUserArrayOutput() MysqlUserArrayOutput {
	return o
}

func (o MysqlUserArrayOutput) ToMysqlUserArrayOutputWithContext(ctx context.Context) MysqlUserArrayOutput {
	return o
}

func (o MysqlUserArrayOutput) Index(i pulumi.IntInput) MysqlUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlUser {
		return vs[0].([]*MysqlUser)[vs[1].(int)]
	}).(MysqlUserOutput)
}

type MysqlUserMapOutput struct{ *pulumi.OutputState }

func (MysqlUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlUser)(nil)).Elem()
}

func (o MysqlUserMapOutput) ToMysqlUserMapOutput() MysqlUserMapOutput {
	return o
}

func (o MysqlUserMapOutput) ToMysqlUserMapOutputWithContext(ctx context.Context) MysqlUserMapOutput {
	return o
}

func (o MysqlUserMapOutput) MapIndex(k pulumi.StringInput) MysqlUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlUser {
		return vs[0].(map[string]*MysqlUser)[vs[1].(string)]
	}).(MysqlUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlUserInput)(nil)).Elem(), &MysqlUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlUserArrayInput)(nil)).Elem(), MysqlUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlUserMapInput)(nil)).Elem(), MysqlUserMap{})
	pulumi.RegisterOutputType(MysqlUserOutput{})
	pulumi.RegisterOutputType(MysqlUserArrayOutput{})
	pulumi.RegisterOutputType(MysqlUserMapOutput{})
}
