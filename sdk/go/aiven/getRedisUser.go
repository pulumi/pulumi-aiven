// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Redis User data source provides information about the existing Aiven Redis User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupRedisUser(ctx, &GetRedisUserArgs{
// 			Project:     "my-project",
// 			ServiceName: "my-service",
// 			Username:    "user1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupRedisUser(ctx *pulumi.Context, args *LookupRedisUserArgs, opts ...pulumi.InvokeOption) (*LookupRedisUserResult, error) {
	var rv LookupRedisUserResult
	err := ctx.Invoke("aiven:index/getRedisUser:getRedisUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRedisUser.
type LookupRedisUserArgs struct {
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	Username    string `pulumi:"username"`
}

// A collection of values returned by getRedisUser.
type LookupRedisUserResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                 string   `pulumi:"id"`
	Password           string   `pulumi:"password"`
	Project            string   `pulumi:"project"`
	RedisAclCategories []string `pulumi:"redisAclCategories"`
	RedisAclChannels   []string `pulumi:"redisAclChannels"`
	RedisAclCommands   []string `pulumi:"redisAclCommands"`
	RedisAclKeys       []string `pulumi:"redisAclKeys"`
	ServiceName        string   `pulumi:"serviceName"`
	Type               string   `pulumi:"type"`
	Username           string   `pulumi:"username"`
}

func LookupRedisUserOutput(ctx *pulumi.Context, args LookupRedisUserOutputArgs, opts ...pulumi.InvokeOption) LookupRedisUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRedisUserResult, error) {
			args := v.(LookupRedisUserArgs)
			r, err := LookupRedisUser(ctx, &args, opts...)
			var s LookupRedisUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRedisUserResultOutput)
}

// A collection of arguments for invoking getRedisUser.
type LookupRedisUserOutputArgs struct {
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	Username    pulumi.StringInput `pulumi:"username"`
}

func (LookupRedisUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRedisUserArgs)(nil)).Elem()
}

// A collection of values returned by getRedisUser.
type LookupRedisUserResultOutput struct{ *pulumi.OutputState }

func (LookupRedisUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRedisUserResult)(nil)).Elem()
}

func (o LookupRedisUserResultOutput) ToLookupRedisUserResultOutput() LookupRedisUserResultOutput {
	return o
}

func (o LookupRedisUserResultOutput) ToLookupRedisUserResultOutputWithContext(ctx context.Context) LookupRedisUserResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRedisUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRedisUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisUserResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupRedisUserResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisUserResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupRedisUserResultOutput) RedisAclCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRedisUserResult) []string { return v.RedisAclCategories }).(pulumi.StringArrayOutput)
}

func (o LookupRedisUserResultOutput) RedisAclChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRedisUserResult) []string { return v.RedisAclChannels }).(pulumi.StringArrayOutput)
}

func (o LookupRedisUserResultOutput) RedisAclCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRedisUserResult) []string { return v.RedisAclCommands }).(pulumi.StringArrayOutput)
}

func (o LookupRedisUserResultOutput) RedisAclKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRedisUserResult) []string { return v.RedisAclKeys }).(pulumi.StringArrayOutput)
}

func (o LookupRedisUserResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisUserResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupRedisUserResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisUserResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupRedisUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRedisUserResultOutput{})
}
