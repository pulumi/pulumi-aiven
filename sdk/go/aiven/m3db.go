// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # M3 DB Resource
//
// The M3 DB resource allows the creation and management of Aiven M3 services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewM3Db(ctx, "m3", &aiven.M3DbArgs{
// 			Project:               pulumi.Any(data.Aiven_project.Foo.Project),
// 			CloudName:             pulumi.String("google-europe-west1"),
// 			Plan:                  pulumi.String("business-8"),
// 			ServiceName:           pulumi.String("my-m3db"),
// 			MaintenanceWindowDow:  pulumi.String("monday"),
// 			MaintenanceWindowTime: pulumi.String("10:00:00"),
// 			M3dbUserConfig: &aiven.M3DbM3dbUserConfigArgs{
// 				M3dbVersion: pulumi.String("0.15"),
// 				Namespaces: aiven.M3DbM3dbUserConfigNamespaceArray{
// 					&aiven.M3DbM3dbUserConfigNamespaceArgs{
// 						Name: pulumi.String("my-ns1"),
// 						Type: pulumi.String("unaggregated"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type M3Db struct {
	pulumi.CustomResourceState

	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components M3DbComponentArrayOutput `pulumi:"components"`
	// M3 specific server provided values.
	M3db M3DbM3dbOutput `pulumi:"m3db"`
	// defines M3 specific additional configuration options. The following
	// configuration options available:
	M3dbUserConfig M3DbM3dbUserConfigPtrOutput `pulumi:"m3dbUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringOutput `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// M3 hostname.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations M3DbServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the M3 service, if applicable.
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// M3 port.
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the M3 service.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the M3 service, if applicable.
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state.
	State pulumi.StringOutput `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewM3Db registers a new resource with the given unique name, arguments, and options.
func NewM3Db(ctx *pulumi.Context,
	name string, args *M3DbArgs, opts ...pulumi.ResourceOption) (*M3Db, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource M3Db
	err := ctx.RegisterResource("aiven:index/m3Db:M3Db", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetM3Db gets an existing M3Db resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetM3Db(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *M3DbState, opts ...pulumi.ResourceOption) (*M3Db, error) {
	var resource M3Db
	err := ctx.ReadResource("aiven:index/m3Db:M3Db", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering M3Db resources.
type m3dbState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []M3DbComponent `pulumi:"components"`
	// M3 specific server provided values.
	M3db *M3DbM3db `pulumi:"m3db"`
	// defines M3 specific additional configuration options. The following
	// configuration options available:
	M3dbUserConfig *M3DbM3dbUserConfig `pulumi:"m3dbUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project *string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// M3 hostname.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []M3DbServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the M3 service, if applicable.
	ServicePassword *string `pulumi:"servicePassword"`
	// M3 port.
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the M3 service.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the M3 service, if applicable.
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state.
	State *string `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type M3DbState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components M3DbComponentArrayInput
	// M3 specific server provided values.
	M3db M3DbM3dbPtrInput
	// defines M3 specific additional configuration options. The following
	// configuration options available:
	M3dbUserConfig M3DbM3dbUserConfigPtrInput
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringPtrInput
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// M3 hostname.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations M3DbServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the M3 service, if applicable.
	ServicePassword pulumi.StringPtrInput
	// M3 port.
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the M3 service.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the M3 service, if applicable.
	ServiceUsername pulumi.StringPtrInput
	// Service state.
	State pulumi.StringPtrInput
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (M3DbState) ElementType() reflect.Type {
	return reflect.TypeOf((*m3dbState)(nil)).Elem()
}

type m3dbArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// M3 specific server provided values.
	M3db *M3DbM3db `pulumi:"m3db"`
	// defines M3 specific additional configuration options. The following
	// configuration options available:
	M3dbUserConfig *M3DbM3dbUserConfig `pulumi:"m3dbUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []M3DbServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a M3Db resource.
type M3DbArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// M3 specific server provided values.
	M3db M3DbM3dbPtrInput
	// defines M3 specific additional configuration options. The following
	// configuration options available:
	M3dbUserConfig M3DbM3dbUserConfigPtrInput
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringInput
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations M3DbServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (M3DbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*m3dbArgs)(nil)).Elem()
}

type M3DbInput interface {
	pulumi.Input

	ToM3DbOutput() M3DbOutput
	ToM3DbOutputWithContext(ctx context.Context) M3DbOutput
}

func (*M3Db) ElementType() reflect.Type {
	return reflect.TypeOf((*M3Db)(nil))
}

func (i *M3Db) ToM3DbOutput() M3DbOutput {
	return i.ToM3DbOutputWithContext(context.Background())
}

func (i *M3Db) ToM3DbOutputWithContext(ctx context.Context) M3DbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(M3DbOutput)
}

func (i *M3Db) ToM3DbPtrOutput() M3DbPtrOutput {
	return i.ToM3DbPtrOutputWithContext(context.Background())
}

func (i *M3Db) ToM3DbPtrOutputWithContext(ctx context.Context) M3DbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(M3DbPtrOutput)
}

type M3DbPtrInput interface {
	pulumi.Input

	ToM3DbPtrOutput() M3DbPtrOutput
	ToM3DbPtrOutputWithContext(ctx context.Context) M3DbPtrOutput
}

type m3dbPtrType M3DbArgs

func (*m3dbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**M3Db)(nil))
}

func (i *m3dbPtrType) ToM3DbPtrOutput() M3DbPtrOutput {
	return i.ToM3DbPtrOutputWithContext(context.Background())
}

func (i *m3dbPtrType) ToM3DbPtrOutputWithContext(ctx context.Context) M3DbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(M3DbPtrOutput)
}

// M3DbArrayInput is an input type that accepts M3DbArray and M3DbArrayOutput values.
// You can construct a concrete instance of `M3DbArrayInput` via:
//
//          M3DbArray{ M3DbArgs{...} }
type M3DbArrayInput interface {
	pulumi.Input

	ToM3DbArrayOutput() M3DbArrayOutput
	ToM3DbArrayOutputWithContext(context.Context) M3DbArrayOutput
}

type M3DbArray []M3DbInput

func (M3DbArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*M3Db)(nil))
}

func (i M3DbArray) ToM3DbArrayOutput() M3DbArrayOutput {
	return i.ToM3DbArrayOutputWithContext(context.Background())
}

func (i M3DbArray) ToM3DbArrayOutputWithContext(ctx context.Context) M3DbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(M3DbArrayOutput)
}

// M3DbMapInput is an input type that accepts M3DbMap and M3DbMapOutput values.
// You can construct a concrete instance of `M3DbMapInput` via:
//
//          M3DbMap{ "key": M3DbArgs{...} }
type M3DbMapInput interface {
	pulumi.Input

	ToM3DbMapOutput() M3DbMapOutput
	ToM3DbMapOutputWithContext(context.Context) M3DbMapOutput
}

type M3DbMap map[string]M3DbInput

func (M3DbMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*M3Db)(nil))
}

func (i M3DbMap) ToM3DbMapOutput() M3DbMapOutput {
	return i.ToM3DbMapOutputWithContext(context.Background())
}

func (i M3DbMap) ToM3DbMapOutputWithContext(ctx context.Context) M3DbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(M3DbMapOutput)
}

type M3DbOutput struct {
	*pulumi.OutputState
}

func (M3DbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*M3Db)(nil))
}

func (o M3DbOutput) ToM3DbOutput() M3DbOutput {
	return o
}

func (o M3DbOutput) ToM3DbOutputWithContext(ctx context.Context) M3DbOutput {
	return o
}

func (o M3DbOutput) ToM3DbPtrOutput() M3DbPtrOutput {
	return o.ToM3DbPtrOutputWithContext(context.Background())
}

func (o M3DbOutput) ToM3DbPtrOutputWithContext(ctx context.Context) M3DbPtrOutput {
	return o.ApplyT(func(v M3Db) *M3Db {
		return &v
	}).(M3DbPtrOutput)
}

type M3DbPtrOutput struct {
	*pulumi.OutputState
}

func (M3DbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**M3Db)(nil))
}

func (o M3DbPtrOutput) ToM3DbPtrOutput() M3DbPtrOutput {
	return o
}

func (o M3DbPtrOutput) ToM3DbPtrOutputWithContext(ctx context.Context) M3DbPtrOutput {
	return o
}

type M3DbArrayOutput struct{ *pulumi.OutputState }

func (M3DbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]M3Db)(nil))
}

func (o M3DbArrayOutput) ToM3DbArrayOutput() M3DbArrayOutput {
	return o
}

func (o M3DbArrayOutput) ToM3DbArrayOutputWithContext(ctx context.Context) M3DbArrayOutput {
	return o
}

func (o M3DbArrayOutput) Index(i pulumi.IntInput) M3DbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) M3Db {
		return vs[0].([]M3Db)[vs[1].(int)]
	}).(M3DbOutput)
}

type M3DbMapOutput struct{ *pulumi.OutputState }

func (M3DbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]M3Db)(nil))
}

func (o M3DbMapOutput) ToM3DbMapOutput() M3DbMapOutput {
	return o
}

func (o M3DbMapOutput) ToM3DbMapOutputWithContext(ctx context.Context) M3DbMapOutput {
	return o
}

func (o M3DbMapOutput) MapIndex(k pulumi.StringInput) M3DbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) M3Db {
		return vs[0].(map[string]M3Db)[vs[1].(string)]
	}).(M3DbOutput)
}

func init() {
	pulumi.RegisterOutputType(M3DbOutput{})
	pulumi.RegisterOutputType(M3DbPtrOutput{})
	pulumi.RegisterOutputType(M3DbArrayOutput{})
	pulumi.RegisterOutputType(M3DbMapOutput{})
}
