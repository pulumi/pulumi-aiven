// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Kafka Connect data source provides information about the existing Aiven Kafka Connect service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupKafkaConnect(ctx, &GetKafkaConnectArgs{
// 			Project:     data.Aiven_project.Pr1.Project,
// 			ServiceName: "my-kc1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupKafkaConnect(ctx *pulumi.Context, args *LookupKafkaConnectArgs, opts ...pulumi.InvokeOption) (*LookupKafkaConnectResult, error) {
	var rv LookupKafkaConnectResult
	err := ctx.Invoke("aiven:index/getKafkaConnect:getKafkaConnect", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKafkaConnect.
type LookupKafkaConnectArgs struct {
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getKafkaConnect.
type LookupKafkaConnectResult struct {
	CloudName        string                     `pulumi:"cloudName"`
	Components       []GetKafkaConnectComponent `pulumi:"components"`
	DiskSpace        string                     `pulumi:"diskSpace"`
	DiskSpaceCap     string                     `pulumi:"diskSpaceCap"`
	DiskSpaceDefault string                     `pulumi:"diskSpaceDefault"`
	DiskSpaceStep    string                     `pulumi:"diskSpaceStep"`
	DiskSpaceUsed    string                     `pulumi:"diskSpaceUsed"`
	// The provider-assigned unique ID for this managed resource.
	Id                      string                                  `pulumi:"id"`
	KafkaConnectUserConfigs []GetKafkaConnectKafkaConnectUserConfig `pulumi:"kafkaConnectUserConfigs"`
	KafkaConnects           []GetKafkaConnectKafkaConnect           `pulumi:"kafkaConnects"`
	MaintenanceWindowDow    string                                  `pulumi:"maintenanceWindowDow"`
	MaintenanceWindowTime   string                                  `pulumi:"maintenanceWindowTime"`
	Plan                    string                                  `pulumi:"plan"`
	Project                 string                                  `pulumi:"project"`
	ProjectVpcId            string                                  `pulumi:"projectVpcId"`
	ServiceHost             string                                  `pulumi:"serviceHost"`
	ServiceIntegrations     []GetKafkaConnectServiceIntegration     `pulumi:"serviceIntegrations"`
	ServiceName             string                                  `pulumi:"serviceName"`
	ServicePassword         string                                  `pulumi:"servicePassword"`
	ServicePort             int                                     `pulumi:"servicePort"`
	ServiceType             string                                  `pulumi:"serviceType"`
	ServiceUri              string                                  `pulumi:"serviceUri"`
	ServiceUsername         string                                  `pulumi:"serviceUsername"`
	State                   string                                  `pulumi:"state"`
	StaticIps               []string                                `pulumi:"staticIps"`
	Tags                    []GetKafkaConnectTag                    `pulumi:"tags"`
	TerminationProtection   bool                                    `pulumi:"terminationProtection"`
}

func LookupKafkaConnectOutput(ctx *pulumi.Context, args LookupKafkaConnectOutputArgs, opts ...pulumi.InvokeOption) LookupKafkaConnectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKafkaConnectResult, error) {
			args := v.(LookupKafkaConnectArgs)
			r, err := LookupKafkaConnect(ctx, &args, opts...)
			var s LookupKafkaConnectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKafkaConnectResultOutput)
}

// A collection of arguments for invoking getKafkaConnect.
type LookupKafkaConnectOutputArgs struct {
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupKafkaConnectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaConnectArgs)(nil)).Elem()
}

// A collection of values returned by getKafkaConnect.
type LookupKafkaConnectResultOutput struct{ *pulumi.OutputState }

func (LookupKafkaConnectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaConnectResult)(nil)).Elem()
}

func (o LookupKafkaConnectResultOutput) ToLookupKafkaConnectResultOutput() LookupKafkaConnectResultOutput {
	return o
}

func (o LookupKafkaConnectResultOutput) ToLookupKafkaConnectResultOutputWithContext(ctx context.Context) LookupKafkaConnectResultOutput {
	return o
}

func (o LookupKafkaConnectResultOutput) CloudName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.CloudName }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) Components() GetKafkaConnectComponentArrayOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) []GetKafkaConnectComponent { return v.Components }).(GetKafkaConnectComponentArrayOutput)
}

func (o LookupKafkaConnectResultOutput) DiskSpace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.DiskSpace }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) DiskSpaceCap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.DiskSpaceCap }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) DiskSpaceDefault() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.DiskSpaceDefault }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) DiskSpaceStep() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.DiskSpaceStep }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) DiskSpaceUsed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.DiskSpaceUsed }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKafkaConnectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) KafkaConnectUserConfigs() GetKafkaConnectKafkaConnectUserConfigArrayOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) []GetKafkaConnectKafkaConnectUserConfig {
		return v.KafkaConnectUserConfigs
	}).(GetKafkaConnectKafkaConnectUserConfigArrayOutput)
}

func (o LookupKafkaConnectResultOutput) KafkaConnects() GetKafkaConnectKafkaConnectArrayOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) []GetKafkaConnectKafkaConnect { return v.KafkaConnects }).(GetKafkaConnectKafkaConnectArrayOutput)
}

func (o LookupKafkaConnectResultOutput) MaintenanceWindowDow() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.MaintenanceWindowDow }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) MaintenanceWindowTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.MaintenanceWindowTime }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.Plan }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) ProjectVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.ProjectVpcId }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.ServiceHost }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) ServiceIntegrations() GetKafkaConnectServiceIntegrationArrayOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) []GetKafkaConnectServiceIntegration { return v.ServiceIntegrations }).(GetKafkaConnectServiceIntegrationArrayOutput)
}

func (o LookupKafkaConnectResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.ServicePassword }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) int { return v.ServicePort }).(pulumi.IntOutput)
}

func (o LookupKafkaConnectResultOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.ServiceType }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.ServiceUri }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.ServiceUsername }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectResultOutput) StaticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) []string { return v.StaticIps }).(pulumi.StringArrayOutput)
}

func (o LookupKafkaConnectResultOutput) Tags() GetKafkaConnectTagArrayOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) []GetKafkaConnectTag { return v.Tags }).(GetKafkaConnectTagArrayOutput)
}

func (o LookupKafkaConnectResultOutput) TerminationProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupKafkaConnectResult) bool { return v.TerminationProtection }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKafkaConnectResultOutput{})
}
