// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Service User resource allows the creation and management of Aiven Service Users.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewServiceUser(ctx, "myserviceuser", &aiven.ServiceUserArgs{
// 			Project:     pulumi.Any(aiven_project.Myproject.Project),
// 			ServiceName: pulumi.Any(aiven_service.Myservice.Service_name),
// 			Username:    pulumi.String("<USERNAME>"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ServiceUser struct {
	pulumi.CustomResourceState

	// Access certificate for the user if applicable for the service in question
	AccessCert pulumi.StringOutput `pulumi:"accessCert"`
	// Access certificate key for the user if applicable for the service in question
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// Authentication details. The possible values are `cachingSha2Password` and `mysqlNativePassword`.
	Authentication pulumi.StringPtrOutput `pulumi:"authentication"`
	// The password of the service user ( not applicable for all services ).
	Password pulumi.StringOutput `pulumi:"password"`
	// Postgres specific field, defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication pulumi.BoolPtrOutput `pulumi:"pgAllowReplication"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Redis specific field, defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories pulumi.StringArrayOutput `pulumi:"redisAclCategories"`
	// Redis specific field, defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels pulumi.StringArrayOutput `pulumi:"redisAclChannels"`
	// Redis specific field, defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands pulumi.StringArrayOutput `pulumi:"redisAclCommands"`
	// Redis specific field, defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys pulumi.StringArrayOutput `pulumi:"redisAclKeys"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Type of the user account. Tells wether the user is the primary account or a regular account.
	Type pulumi.StringOutput `pulumi:"type"`
	// The actual name of the service user. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewServiceUser registers a new resource with the given unique name, arguments, and options.
func NewServiceUser(ctx *pulumi.Context,
	name string, args *ServiceUserArgs, opts ...pulumi.ResourceOption) (*ServiceUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource ServiceUser
	err := ctx.RegisterResource("aiven:index/serviceUser:ServiceUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceUser gets an existing ServiceUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceUserState, opts ...pulumi.ResourceOption) (*ServiceUser, error) {
	var resource ServiceUser
	err := ctx.ReadResource("aiven:index/serviceUser:ServiceUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceUser resources.
type serviceUserState struct {
	// Access certificate for the user if applicable for the service in question
	AccessCert *string `pulumi:"accessCert"`
	// Access certificate key for the user if applicable for the service in question
	AccessKey *string `pulumi:"accessKey"`
	// Authentication details. The possible values are `cachingSha2Password` and `mysqlNativePassword`.
	Authentication *string `pulumi:"authentication"`
	// The password of the service user ( not applicable for all services ).
	Password *string `pulumi:"password"`
	// Postgres specific field, defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication *bool `pulumi:"pgAllowReplication"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Redis specific field, defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories []string `pulumi:"redisAclCategories"`
	// Redis specific field, defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels []string `pulumi:"redisAclChannels"`
	// Redis specific field, defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands []string `pulumi:"redisAclCommands"`
	// Redis specific field, defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys []string `pulumi:"redisAclKeys"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// Type of the user account. Tells wether the user is the primary account or a regular account.
	Type *string `pulumi:"type"`
	// The actual name of the service user. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username *string `pulumi:"username"`
}

type ServiceUserState struct {
	// Access certificate for the user if applicable for the service in question
	AccessCert pulumi.StringPtrInput
	// Access certificate key for the user if applicable for the service in question
	AccessKey pulumi.StringPtrInput
	// Authentication details. The possible values are `cachingSha2Password` and `mysqlNativePassword`.
	Authentication pulumi.StringPtrInput
	// The password of the service user ( not applicable for all services ).
	Password pulumi.StringPtrInput
	// Postgres specific field, defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication pulumi.BoolPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Redis specific field, defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories pulumi.StringArrayInput
	// Redis specific field, defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels pulumi.StringArrayInput
	// Redis specific field, defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands pulumi.StringArrayInput
	// Redis specific field, defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys pulumi.StringArrayInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// Type of the user account. Tells wether the user is the primary account or a regular account.
	Type pulumi.StringPtrInput
	// The actual name of the service user. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringPtrInput
}

func (ServiceUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceUserState)(nil)).Elem()
}

type serviceUserArgs struct {
	// Authentication details. The possible values are `cachingSha2Password` and `mysqlNativePassword`.
	Authentication *string `pulumi:"authentication"`
	// The password of the service user ( not applicable for all services ).
	Password *string `pulumi:"password"`
	// Postgres specific field, defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication *bool `pulumi:"pgAllowReplication"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Redis specific field, defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories []string `pulumi:"redisAclCategories"`
	// Redis specific field, defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels []string `pulumi:"redisAclChannels"`
	// Redis specific field, defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands []string `pulumi:"redisAclCommands"`
	// Redis specific field, defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys []string `pulumi:"redisAclKeys"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// The actual name of the service user. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ServiceUser resource.
type ServiceUserArgs struct {
	// Authentication details. The possible values are `cachingSha2Password` and `mysqlNativePassword`.
	Authentication pulumi.StringPtrInput
	// The password of the service user ( not applicable for all services ).
	Password pulumi.StringPtrInput
	// Postgres specific field, defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication pulumi.BoolPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Redis specific field, defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories pulumi.StringArrayInput
	// Redis specific field, defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels pulumi.StringArrayInput
	// Redis specific field, defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands pulumi.StringArrayInput
	// Redis specific field, defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys pulumi.StringArrayInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringInput
	// The actual name of the service user. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringInput
}

func (ServiceUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceUserArgs)(nil)).Elem()
}

type ServiceUserInput interface {
	pulumi.Input

	ToServiceUserOutput() ServiceUserOutput
	ToServiceUserOutputWithContext(ctx context.Context) ServiceUserOutput
}

func (*ServiceUser) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceUser)(nil)).Elem()
}

func (i *ServiceUser) ToServiceUserOutput() ServiceUserOutput {
	return i.ToServiceUserOutputWithContext(context.Background())
}

func (i *ServiceUser) ToServiceUserOutputWithContext(ctx context.Context) ServiceUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUserOutput)
}

// ServiceUserArrayInput is an input type that accepts ServiceUserArray and ServiceUserArrayOutput values.
// You can construct a concrete instance of `ServiceUserArrayInput` via:
//
//          ServiceUserArray{ ServiceUserArgs{...} }
type ServiceUserArrayInput interface {
	pulumi.Input

	ToServiceUserArrayOutput() ServiceUserArrayOutput
	ToServiceUserArrayOutputWithContext(context.Context) ServiceUserArrayOutput
}

type ServiceUserArray []ServiceUserInput

func (ServiceUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceUser)(nil)).Elem()
}

func (i ServiceUserArray) ToServiceUserArrayOutput() ServiceUserArrayOutput {
	return i.ToServiceUserArrayOutputWithContext(context.Background())
}

func (i ServiceUserArray) ToServiceUserArrayOutputWithContext(ctx context.Context) ServiceUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUserArrayOutput)
}

// ServiceUserMapInput is an input type that accepts ServiceUserMap and ServiceUserMapOutput values.
// You can construct a concrete instance of `ServiceUserMapInput` via:
//
//          ServiceUserMap{ "key": ServiceUserArgs{...} }
type ServiceUserMapInput interface {
	pulumi.Input

	ToServiceUserMapOutput() ServiceUserMapOutput
	ToServiceUserMapOutputWithContext(context.Context) ServiceUserMapOutput
}

type ServiceUserMap map[string]ServiceUserInput

func (ServiceUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceUser)(nil)).Elem()
}

func (i ServiceUserMap) ToServiceUserMapOutput() ServiceUserMapOutput {
	return i.ToServiceUserMapOutputWithContext(context.Background())
}

func (i ServiceUserMap) ToServiceUserMapOutputWithContext(ctx context.Context) ServiceUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUserMapOutput)
}

type ServiceUserOutput struct{ *pulumi.OutputState }

func (ServiceUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceUser)(nil)).Elem()
}

func (o ServiceUserOutput) ToServiceUserOutput() ServiceUserOutput {
	return o
}

func (o ServiceUserOutput) ToServiceUserOutputWithContext(ctx context.Context) ServiceUserOutput {
	return o
}

type ServiceUserArrayOutput struct{ *pulumi.OutputState }

func (ServiceUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceUser)(nil)).Elem()
}

func (o ServiceUserArrayOutput) ToServiceUserArrayOutput() ServiceUserArrayOutput {
	return o
}

func (o ServiceUserArrayOutput) ToServiceUserArrayOutputWithContext(ctx context.Context) ServiceUserArrayOutput {
	return o
}

func (o ServiceUserArrayOutput) Index(i pulumi.IntInput) ServiceUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceUser {
		return vs[0].([]*ServiceUser)[vs[1].(int)]
	}).(ServiceUserOutput)
}

type ServiceUserMapOutput struct{ *pulumi.OutputState }

func (ServiceUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceUser)(nil)).Elem()
}

func (o ServiceUserMapOutput) ToServiceUserMapOutput() ServiceUserMapOutput {
	return o
}

func (o ServiceUserMapOutput) ToServiceUserMapOutputWithContext(ctx context.Context) ServiceUserMapOutput {
	return o
}

func (o ServiceUserMapOutput) MapIndex(k pulumi.StringInput) ServiceUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceUser {
		return vs[0].(map[string]*ServiceUser)[vs[1].(string)]
	}).(ServiceUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceUserInput)(nil)).Elem(), &ServiceUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceUserArrayInput)(nil)).Elem(), ServiceUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceUserMapInput)(nil)).Elem(), ServiceUserMap{})
	pulumi.RegisterOutputType(ServiceUserOutput{})
	pulumi.RegisterOutputType(ServiceUserArrayOutput{})
	pulumi.RegisterOutputType(ServiceUserMapOutput{})
}
