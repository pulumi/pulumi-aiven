// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewServiceUser(ctx, "myserviceuser", &aiven.ServiceUserArgs{
// 			Project:     pulumi.Any(aiven_project.Myproject.Project),
// 			ServiceName: pulumi.Any(aiven_service.Myservice.Service_name),
// 			Username:    pulumi.String("<USERNAME>"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ServiceUser struct {
	pulumi.CustomResourceState

	// Access certificate for the user if applicable for the service in question
	AccessCert pulumi.StringOutput `pulumi:"accessCert"`
	// Access certificate key for the user if applicable for the service in question
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// Password of the user
	Password pulumi.StringOutput `pulumi:"password"`
	// Project to link the user to
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the user to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Type of the user account
	Type pulumi.StringOutput `pulumi:"type"`
	// Name of the user account
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewServiceUser registers a new resource with the given unique name, arguments, and options.
func NewServiceUser(ctx *pulumi.Context,
	name string, args *ServiceUserArgs, opts ...pulumi.ResourceOption) (*ServiceUser, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &ServiceUserArgs{}
	}
	var resource ServiceUser
	err := ctx.RegisterResource("aiven:index/serviceUser:ServiceUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceUser gets an existing ServiceUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceUserState, opts ...pulumi.ResourceOption) (*ServiceUser, error) {
	var resource ServiceUser
	err := ctx.ReadResource("aiven:index/serviceUser:ServiceUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceUser resources.
type serviceUserState struct {
	// Access certificate for the user if applicable for the service in question
	AccessCert *string `pulumi:"accessCert"`
	// Access certificate key for the user if applicable for the service in question
	AccessKey *string `pulumi:"accessKey"`
	// Password of the user
	Password *string `pulumi:"password"`
	// Project to link the user to
	Project *string `pulumi:"project"`
	// Service to link the user to
	ServiceName *string `pulumi:"serviceName"`
	// Type of the user account
	Type *string `pulumi:"type"`
	// Name of the user account
	Username *string `pulumi:"username"`
}

type ServiceUserState struct {
	// Access certificate for the user if applicable for the service in question
	AccessCert pulumi.StringPtrInput
	// Access certificate key for the user if applicable for the service in question
	AccessKey pulumi.StringPtrInput
	// Password of the user
	Password pulumi.StringPtrInput
	// Project to link the user to
	Project pulumi.StringPtrInput
	// Service to link the user to
	ServiceName pulumi.StringPtrInput
	// Type of the user account
	Type pulumi.StringPtrInput
	// Name of the user account
	Username pulumi.StringPtrInput
}

func (ServiceUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceUserState)(nil)).Elem()
}

type serviceUserArgs struct {
	// Project to link the user to
	Project string `pulumi:"project"`
	// Service to link the user to
	ServiceName string `pulumi:"serviceName"`
	// Name of the user account
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ServiceUser resource.
type ServiceUserArgs struct {
	// Project to link the user to
	Project pulumi.StringInput
	// Service to link the user to
	ServiceName pulumi.StringInput
	// Name of the user account
	Username pulumi.StringInput
}

func (ServiceUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceUserArgs)(nil)).Elem()
}
