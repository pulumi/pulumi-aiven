// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ServiceUser struct {
	s *pulumi.ResourceState
}

// NewServiceUser registers a new resource with the given unique name, arguments, and options.
func NewServiceUser(ctx *pulumi.Context,
	name string, args *ServiceUserArgs, opts ...pulumi.ResourceOpt) (*ServiceUser, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["project"] = nil
		inputs["serviceName"] = nil
		inputs["username"] = nil
	} else {
		inputs["project"] = args.Project
		inputs["serviceName"] = args.ServiceName
		inputs["username"] = args.Username
	}
	inputs["accessCert"] = nil
	inputs["accessKey"] = nil
	inputs["password"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("aiven:index/serviceUser:ServiceUser", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceUser{s: s}, nil
}

// GetServiceUser gets an existing ServiceUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceUserState, opts ...pulumi.ResourceOpt) (*ServiceUser, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessCert"] = state.AccessCert
		inputs["accessKey"] = state.AccessKey
		inputs["password"] = state.Password
		inputs["project"] = state.Project
		inputs["serviceName"] = state.ServiceName
		inputs["type"] = state.Type
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("aiven:index/serviceUser:ServiceUser", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceUser{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServiceUser) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServiceUser) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Access certificate for the user if applicable for the service in question
func (r *ServiceUser) AccessCert() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessCert"])
}

// Access certificate key for the user if applicable for the service in question
func (r *ServiceUser) AccessKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessKey"])
}

// Password of the user
func (r *ServiceUser) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// Project to link the user to
func (r *ServiceUser) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Service to link the user to
func (r *ServiceUser) ServiceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceName"])
}

// Type of the user account
func (r *ServiceUser) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Name of the user account
func (r *ServiceUser) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering ServiceUser resources.
type ServiceUserState struct {
	// Access certificate for the user if applicable for the service in question
	AccessCert interface{}
	// Access certificate key for the user if applicable for the service in question
	AccessKey interface{}
	// Password of the user
	Password interface{}
	// Project to link the user to
	Project interface{}
	// Service to link the user to
	ServiceName interface{}
	// Type of the user account
	Type interface{}
	// Name of the user account
	Username interface{}
}

// The set of arguments for constructing a ServiceUser resource.
type ServiceUserArgs struct {
	// Project to link the user to
	Project interface{}
	// Service to link the user to
	ServiceName interface{}
	// Name of the user account
	Username interface{}
}
