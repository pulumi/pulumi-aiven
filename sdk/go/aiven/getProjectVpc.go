// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The Project VPC data source provides information about the existing Aiven Project VPC.
func LookupProjectVpc(ctx *pulumi.Context, args *LookupProjectVpcArgs, opts ...pulumi.InvokeOption) (*LookupProjectVpcResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectVpcResult
	err := ctx.Invoke("aiven:index/getProjectVpc:getProjectVpc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectVpc.
type LookupProjectVpcArgs struct {
	// Defines where the cloud provider and region where the service is hosted in. See the Service resource for additional information.
	CloudName *string `pulumi:"cloudName"`
	// Identifies the project this resource belongs to.
	Project *string `pulumi:"project"`
	// ID of the VPC. This can be used to filter out the specific VPC if there are more than one datasource returned.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getProjectVpc.
type LookupProjectVpcResult struct {
	// Defines where the cloud provider and region where the service is hosted in. See the Service resource for additional information.
	CloudName *string `pulumi:"cloudName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Network address range used by the VPC like 192.168.0.0/24
	NetworkCidr string `pulumi:"networkCidr"`
	// Identifies the project this resource belongs to.
	Project *string `pulumi:"project"`
	// State of the VPC. The possible values are `APPROVED`, `ACTIVE`, `DELETING` and `DELETED`.
	State string `pulumi:"state"`
	// ID of the VPC. This can be used to filter out the specific VPC if there are more than one datasource returned.
	VpcId *string `pulumi:"vpcId"`
}

func LookupProjectVpcOutput(ctx *pulumi.Context, args LookupProjectVpcOutputArgs, opts ...pulumi.InvokeOption) LookupProjectVpcResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectVpcResult, error) {
			args := v.(LookupProjectVpcArgs)
			r, err := LookupProjectVpc(ctx, &args, opts...)
			var s LookupProjectVpcResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProjectVpcResultOutput)
}

// A collection of arguments for invoking getProjectVpc.
type LookupProjectVpcOutputArgs struct {
	// Defines where the cloud provider and region where the service is hosted in. See the Service resource for additional information.
	CloudName pulumi.StringPtrInput `pulumi:"cloudName"`
	// Identifies the project this resource belongs to.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// ID of the VPC. This can be used to filter out the specific VPC if there are more than one datasource returned.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (LookupProjectVpcOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectVpcArgs)(nil)).Elem()
}

// A collection of values returned by getProjectVpc.
type LookupProjectVpcResultOutput struct{ *pulumi.OutputState }

func (LookupProjectVpcResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectVpcResult)(nil)).Elem()
}

func (o LookupProjectVpcResultOutput) ToLookupProjectVpcResultOutput() LookupProjectVpcResultOutput {
	return o
}

func (o LookupProjectVpcResultOutput) ToLookupProjectVpcResultOutputWithContext(ctx context.Context) LookupProjectVpcResultOutput {
	return o
}

func (o LookupProjectVpcResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupProjectVpcResult] {
	return pulumix.Output[LookupProjectVpcResult]{
		OutputState: o.OutputState,
	}
}

// Defines where the cloud provider and region where the service is hosted in. See the Service resource for additional information.
func (o LookupProjectVpcResultOutput) CloudName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupProjectVpcResult) *string { return v.CloudName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectVpcResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectVpcResult) string { return v.Id }).(pulumi.StringOutput)
}

// Network address range used by the VPC like 192.168.0.0/24
func (o LookupProjectVpcResultOutput) NetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectVpcResult) string { return v.NetworkCidr }).(pulumi.StringOutput)
}

// Identifies the project this resource belongs to.
func (o LookupProjectVpcResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupProjectVpcResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// State of the VPC. The possible values are `APPROVED`, `ACTIVE`, `DELETING` and `DELETED`.
func (o LookupProjectVpcResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectVpcResult) string { return v.State }).(pulumi.StringOutput)
}

// ID of the VPC. This can be used to filter out the specific VPC if there are more than one datasource returned.
func (o LookupProjectVpcResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupProjectVpcResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectVpcResultOutput{})
}
