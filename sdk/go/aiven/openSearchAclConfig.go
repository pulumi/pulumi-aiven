// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Opensearch ACL Config Resource
//
// The Opensearch ACL Config resource allows the configuration of ACL management on an Aiven Opensearch service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewOpenSearchAclConfig(ctx, "os_acl_config", &aiven.OpenSearchAclConfigArgs{
// 			Project:     pulumi.Any(aiven_project.Os - project.Project),
// 			ServiceName: pulumi.Any(aiven_opensearch.Os.Service_name),
// 			Enabled:     pulumi.Bool(true),
// 			ExtendedAcl: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type OpenSearchAclConfig struct {
	pulumi.CustomResourceState

	// enables of disables Opensearch ACL's.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as
	// long as all operations only target indexes they have been granted access to.
	ExtendedAcl pulumi.BoolPtrOutput `pulumi:"extendedAcl"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to. They should be defined
	// using reference as shown above to set up dependencies correctly.
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the Opensearch ACLs to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewOpenSearchAclConfig registers a new resource with the given unique name, arguments, and options.
func NewOpenSearchAclConfig(ctx *pulumi.Context,
	name string, args *OpenSearchAclConfigArgs, opts ...pulumi.ResourceOption) (*OpenSearchAclConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource OpenSearchAclConfig
	err := ctx.RegisterResource("aiven:index/openSearchAclConfig:OpenSearchAclConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenSearchAclConfig gets an existing OpenSearchAclConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenSearchAclConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenSearchAclConfigState, opts ...pulumi.ResourceOption) (*OpenSearchAclConfig, error) {
	var resource OpenSearchAclConfig
	err := ctx.ReadResource("aiven:index/openSearchAclConfig:OpenSearchAclConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenSearchAclConfig resources.
type openSearchAclConfigState struct {
	// enables of disables Opensearch ACL's.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as
	// long as all operations only target indexes they have been granted access to.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to. They should be defined
	// using reference as shown above to set up dependencies correctly.
	Project *string `pulumi:"project"`
	// Service to link the Opensearch ACLs to
	ServiceName *string `pulumi:"serviceName"`
}

type OpenSearchAclConfigState struct {
	// enables of disables Opensearch ACL's.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as
	// long as all operations only target indexes they have been granted access to.
	ExtendedAcl pulumi.BoolPtrInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to. They should be defined
	// using reference as shown above to set up dependencies correctly.
	Project pulumi.StringPtrInput
	// Service to link the Opensearch ACLs to
	ServiceName pulumi.StringPtrInput
}

func (OpenSearchAclConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*openSearchAclConfigState)(nil)).Elem()
}

type openSearchAclConfigArgs struct {
	// enables of disables Opensearch ACL's.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as
	// long as all operations only target indexes they have been granted access to.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to. They should be defined
	// using reference as shown above to set up dependencies correctly.
	Project string `pulumi:"project"`
	// Service to link the Opensearch ACLs to
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a OpenSearchAclConfig resource.
type OpenSearchAclConfigArgs struct {
	// enables of disables Opensearch ACL's.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as
	// long as all operations only target indexes they have been granted access to.
	ExtendedAcl pulumi.BoolPtrInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to. They should be defined
	// using reference as shown above to set up dependencies correctly.
	Project pulumi.StringInput
	// Service to link the Opensearch ACLs to
	ServiceName pulumi.StringInput
}

func (OpenSearchAclConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openSearchAclConfigArgs)(nil)).Elem()
}

type OpenSearchAclConfigInput interface {
	pulumi.Input

	ToOpenSearchAclConfigOutput() OpenSearchAclConfigOutput
	ToOpenSearchAclConfigOutputWithContext(ctx context.Context) OpenSearchAclConfigOutput
}

func (*OpenSearchAclConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenSearchAclConfig)(nil))
}

func (i *OpenSearchAclConfig) ToOpenSearchAclConfigOutput() OpenSearchAclConfigOutput {
	return i.ToOpenSearchAclConfigOutputWithContext(context.Background())
}

func (i *OpenSearchAclConfig) ToOpenSearchAclConfigOutputWithContext(ctx context.Context) OpenSearchAclConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchAclConfigOutput)
}

func (i *OpenSearchAclConfig) ToOpenSearchAclConfigPtrOutput() OpenSearchAclConfigPtrOutput {
	return i.ToOpenSearchAclConfigPtrOutputWithContext(context.Background())
}

func (i *OpenSearchAclConfig) ToOpenSearchAclConfigPtrOutputWithContext(ctx context.Context) OpenSearchAclConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchAclConfigPtrOutput)
}

type OpenSearchAclConfigPtrInput interface {
	pulumi.Input

	ToOpenSearchAclConfigPtrOutput() OpenSearchAclConfigPtrOutput
	ToOpenSearchAclConfigPtrOutputWithContext(ctx context.Context) OpenSearchAclConfigPtrOutput
}

type openSearchAclConfigPtrType OpenSearchAclConfigArgs

func (*openSearchAclConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenSearchAclConfig)(nil))
}

func (i *openSearchAclConfigPtrType) ToOpenSearchAclConfigPtrOutput() OpenSearchAclConfigPtrOutput {
	return i.ToOpenSearchAclConfigPtrOutputWithContext(context.Background())
}

func (i *openSearchAclConfigPtrType) ToOpenSearchAclConfigPtrOutputWithContext(ctx context.Context) OpenSearchAclConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchAclConfigPtrOutput)
}

// OpenSearchAclConfigArrayInput is an input type that accepts OpenSearchAclConfigArray and OpenSearchAclConfigArrayOutput values.
// You can construct a concrete instance of `OpenSearchAclConfigArrayInput` via:
//
//          OpenSearchAclConfigArray{ OpenSearchAclConfigArgs{...} }
type OpenSearchAclConfigArrayInput interface {
	pulumi.Input

	ToOpenSearchAclConfigArrayOutput() OpenSearchAclConfigArrayOutput
	ToOpenSearchAclConfigArrayOutputWithContext(context.Context) OpenSearchAclConfigArrayOutput
}

type OpenSearchAclConfigArray []OpenSearchAclConfigInput

func (OpenSearchAclConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*OpenSearchAclConfig)(nil))
}

func (i OpenSearchAclConfigArray) ToOpenSearchAclConfigArrayOutput() OpenSearchAclConfigArrayOutput {
	return i.ToOpenSearchAclConfigArrayOutputWithContext(context.Background())
}

func (i OpenSearchAclConfigArray) ToOpenSearchAclConfigArrayOutputWithContext(ctx context.Context) OpenSearchAclConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchAclConfigArrayOutput)
}

// OpenSearchAclConfigMapInput is an input type that accepts OpenSearchAclConfigMap and OpenSearchAclConfigMapOutput values.
// You can construct a concrete instance of `OpenSearchAclConfigMapInput` via:
//
//          OpenSearchAclConfigMap{ "key": OpenSearchAclConfigArgs{...} }
type OpenSearchAclConfigMapInput interface {
	pulumi.Input

	ToOpenSearchAclConfigMapOutput() OpenSearchAclConfigMapOutput
	ToOpenSearchAclConfigMapOutputWithContext(context.Context) OpenSearchAclConfigMapOutput
}

type OpenSearchAclConfigMap map[string]OpenSearchAclConfigInput

func (OpenSearchAclConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*OpenSearchAclConfig)(nil))
}

func (i OpenSearchAclConfigMap) ToOpenSearchAclConfigMapOutput() OpenSearchAclConfigMapOutput {
	return i.ToOpenSearchAclConfigMapOutputWithContext(context.Background())
}

func (i OpenSearchAclConfigMap) ToOpenSearchAclConfigMapOutputWithContext(ctx context.Context) OpenSearchAclConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchAclConfigMapOutput)
}

type OpenSearchAclConfigOutput struct {
	*pulumi.OutputState
}

func (OpenSearchAclConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenSearchAclConfig)(nil))
}

func (o OpenSearchAclConfigOutput) ToOpenSearchAclConfigOutput() OpenSearchAclConfigOutput {
	return o
}

func (o OpenSearchAclConfigOutput) ToOpenSearchAclConfigOutputWithContext(ctx context.Context) OpenSearchAclConfigOutput {
	return o
}

func (o OpenSearchAclConfigOutput) ToOpenSearchAclConfigPtrOutput() OpenSearchAclConfigPtrOutput {
	return o.ToOpenSearchAclConfigPtrOutputWithContext(context.Background())
}

func (o OpenSearchAclConfigOutput) ToOpenSearchAclConfigPtrOutputWithContext(ctx context.Context) OpenSearchAclConfigPtrOutput {
	return o.ApplyT(func(v OpenSearchAclConfig) *OpenSearchAclConfig {
		return &v
	}).(OpenSearchAclConfigPtrOutput)
}

type OpenSearchAclConfigPtrOutput struct {
	*pulumi.OutputState
}

func (OpenSearchAclConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenSearchAclConfig)(nil))
}

func (o OpenSearchAclConfigPtrOutput) ToOpenSearchAclConfigPtrOutput() OpenSearchAclConfigPtrOutput {
	return o
}

func (o OpenSearchAclConfigPtrOutput) ToOpenSearchAclConfigPtrOutputWithContext(ctx context.Context) OpenSearchAclConfigPtrOutput {
	return o
}

type OpenSearchAclConfigArrayOutput struct{ *pulumi.OutputState }

func (OpenSearchAclConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OpenSearchAclConfig)(nil))
}

func (o OpenSearchAclConfigArrayOutput) ToOpenSearchAclConfigArrayOutput() OpenSearchAclConfigArrayOutput {
	return o
}

func (o OpenSearchAclConfigArrayOutput) ToOpenSearchAclConfigArrayOutputWithContext(ctx context.Context) OpenSearchAclConfigArrayOutput {
	return o
}

func (o OpenSearchAclConfigArrayOutput) Index(i pulumi.IntInput) OpenSearchAclConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OpenSearchAclConfig {
		return vs[0].([]OpenSearchAclConfig)[vs[1].(int)]
	}).(OpenSearchAclConfigOutput)
}

type OpenSearchAclConfigMapOutput struct{ *pulumi.OutputState }

func (OpenSearchAclConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OpenSearchAclConfig)(nil))
}

func (o OpenSearchAclConfigMapOutput) ToOpenSearchAclConfigMapOutput() OpenSearchAclConfigMapOutput {
	return o
}

func (o OpenSearchAclConfigMapOutput) ToOpenSearchAclConfigMapOutputWithContext(ctx context.Context) OpenSearchAclConfigMapOutput {
	return o
}

func (o OpenSearchAclConfigMapOutput) MapIndex(k pulumi.StringInput) OpenSearchAclConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OpenSearchAclConfig {
		return vs[0].(map[string]OpenSearchAclConfig)[vs[1].(string)]
	}).(OpenSearchAclConfigOutput)
}

func init() {
	pulumi.RegisterOutputType(OpenSearchAclConfigOutput{})
	pulumi.RegisterOutputType(OpenSearchAclConfigPtrOutput{})
	pulumi.RegisterOutputType(OpenSearchAclConfigArrayOutput{})
	pulumi.RegisterOutputType(OpenSearchAclConfigMapOutput{})
}
