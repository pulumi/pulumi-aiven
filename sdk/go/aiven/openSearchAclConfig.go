// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The OpenSearch ACL Config resource allows the creation and management of Aiven OpenSearch ACLs.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooProject, err := aiven.LookupProject(ctx, &aiven.LookupProjectArgs{
//				Project: "example_project",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			bar, err := aiven.NewOpenSearch(ctx, "bar", &aiven.OpenSearchArgs{
//				Project:               *pulumi.String(fooProject.Project),
//				CloudName:             pulumi.String("google-europe-west1"),
//				Plan:                  pulumi.String("startup-4"),
//				ServiceName:           pulumi.String("example_service_name"),
//				MaintenanceWindowDow:  pulumi.String("monday"),
//				MaintenanceWindowTime: pulumi.String("10:00:00"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aiven.NewOpensearchUser(ctx, "fooOpensearchUser", &aiven.OpensearchUserArgs{
//				ServiceName: bar.ServiceName,
//				Project:     *pulumi.String(fooProject.Project),
//				Username:    pulumi.String("user-example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aiven.NewOpenSearchAclConfig(ctx, "fooOpenSearchAclConfig", &aiven.OpenSearchAclConfigArgs{
//				Project:     *pulumi.String(fooProject.Project),
//				ServiceName: bar.ServiceName,
//				Enabled:     pulumi.Bool(true),
//				ExtendedAcl: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import aiven:index/openSearchAclConfig:OpenSearchAclConfig foo project/service_name
//
// ```
type OpenSearchAclConfig struct {
	pulumi.CustomResourceState

	// Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access. The default value is `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to. The default value is `true`.
	ExtendedAcl pulumi.BoolPtrOutput `pulumi:"extendedAcl"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewOpenSearchAclConfig registers a new resource with the given unique name, arguments, and options.
func NewOpenSearchAclConfig(ctx *pulumi.Context,
	name string, args *OpenSearchAclConfigArgs, opts ...pulumi.ResourceOption) (*OpenSearchAclConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenSearchAclConfig
	err := ctx.RegisterResource("aiven:index/openSearchAclConfig:OpenSearchAclConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenSearchAclConfig gets an existing OpenSearchAclConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenSearchAclConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenSearchAclConfigState, opts ...pulumi.ResourceOption) (*OpenSearchAclConfig, error) {
	var resource OpenSearchAclConfig
	err := ctx.ReadResource("aiven:index/openSearchAclConfig:OpenSearchAclConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenSearchAclConfig resources.
type openSearchAclConfigState struct {
	// Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access. The default value is `true`.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to. The default value is `true`.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
}

type OpenSearchAclConfigState struct {
	// Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access. The default value is `true`.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to. The default value is `true`.
	ExtendedAcl pulumi.BoolPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
}

func (OpenSearchAclConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*openSearchAclConfigState)(nil)).Elem()
}

type openSearchAclConfigArgs struct {
	// Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access. The default value is `true`.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to. The default value is `true`.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a OpenSearchAclConfig resource.
type OpenSearchAclConfigArgs struct {
	// Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access. The default value is `true`.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to. The default value is `true`.
	ExtendedAcl pulumi.BoolPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringInput
}

func (OpenSearchAclConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openSearchAclConfigArgs)(nil)).Elem()
}

type OpenSearchAclConfigInput interface {
	pulumi.Input

	ToOpenSearchAclConfigOutput() OpenSearchAclConfigOutput
	ToOpenSearchAclConfigOutputWithContext(ctx context.Context) OpenSearchAclConfigOutput
}

func (*OpenSearchAclConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenSearchAclConfig)(nil)).Elem()
}

func (i *OpenSearchAclConfig) ToOpenSearchAclConfigOutput() OpenSearchAclConfigOutput {
	return i.ToOpenSearchAclConfigOutputWithContext(context.Background())
}

func (i *OpenSearchAclConfig) ToOpenSearchAclConfigOutputWithContext(ctx context.Context) OpenSearchAclConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchAclConfigOutput)
}

func (i *OpenSearchAclConfig) ToOutput(ctx context.Context) pulumix.Output[*OpenSearchAclConfig] {
	return pulumix.Output[*OpenSearchAclConfig]{
		OutputState: i.ToOpenSearchAclConfigOutputWithContext(ctx).OutputState,
	}
}

// OpenSearchAclConfigArrayInput is an input type that accepts OpenSearchAclConfigArray and OpenSearchAclConfigArrayOutput values.
// You can construct a concrete instance of `OpenSearchAclConfigArrayInput` via:
//
//	OpenSearchAclConfigArray{ OpenSearchAclConfigArgs{...} }
type OpenSearchAclConfigArrayInput interface {
	pulumi.Input

	ToOpenSearchAclConfigArrayOutput() OpenSearchAclConfigArrayOutput
	ToOpenSearchAclConfigArrayOutputWithContext(context.Context) OpenSearchAclConfigArrayOutput
}

type OpenSearchAclConfigArray []OpenSearchAclConfigInput

func (OpenSearchAclConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenSearchAclConfig)(nil)).Elem()
}

func (i OpenSearchAclConfigArray) ToOpenSearchAclConfigArrayOutput() OpenSearchAclConfigArrayOutput {
	return i.ToOpenSearchAclConfigArrayOutputWithContext(context.Background())
}

func (i OpenSearchAclConfigArray) ToOpenSearchAclConfigArrayOutputWithContext(ctx context.Context) OpenSearchAclConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchAclConfigArrayOutput)
}

func (i OpenSearchAclConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]*OpenSearchAclConfig] {
	return pulumix.Output[[]*OpenSearchAclConfig]{
		OutputState: i.ToOpenSearchAclConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// OpenSearchAclConfigMapInput is an input type that accepts OpenSearchAclConfigMap and OpenSearchAclConfigMapOutput values.
// You can construct a concrete instance of `OpenSearchAclConfigMapInput` via:
//
//	OpenSearchAclConfigMap{ "key": OpenSearchAclConfigArgs{...} }
type OpenSearchAclConfigMapInput interface {
	pulumi.Input

	ToOpenSearchAclConfigMapOutput() OpenSearchAclConfigMapOutput
	ToOpenSearchAclConfigMapOutputWithContext(context.Context) OpenSearchAclConfigMapOutput
}

type OpenSearchAclConfigMap map[string]OpenSearchAclConfigInput

func (OpenSearchAclConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenSearchAclConfig)(nil)).Elem()
}

func (i OpenSearchAclConfigMap) ToOpenSearchAclConfigMapOutput() OpenSearchAclConfigMapOutput {
	return i.ToOpenSearchAclConfigMapOutputWithContext(context.Background())
}

func (i OpenSearchAclConfigMap) ToOpenSearchAclConfigMapOutputWithContext(ctx context.Context) OpenSearchAclConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchAclConfigMapOutput)
}

func (i OpenSearchAclConfigMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OpenSearchAclConfig] {
	return pulumix.Output[map[string]*OpenSearchAclConfig]{
		OutputState: i.ToOpenSearchAclConfigMapOutputWithContext(ctx).OutputState,
	}
}

type OpenSearchAclConfigOutput struct{ *pulumi.OutputState }

func (OpenSearchAclConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenSearchAclConfig)(nil)).Elem()
}

func (o OpenSearchAclConfigOutput) ToOpenSearchAclConfigOutput() OpenSearchAclConfigOutput {
	return o
}

func (o OpenSearchAclConfigOutput) ToOpenSearchAclConfigOutputWithContext(ctx context.Context) OpenSearchAclConfigOutput {
	return o
}

func (o OpenSearchAclConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenSearchAclConfig] {
	return pulumix.Output[*OpenSearchAclConfig]{
		OutputState: o.OutputState,
	}
}

// Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access. The default value is `true`.
func (o OpenSearchAclConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OpenSearchAclConfig) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to. The default value is `true`.
func (o OpenSearchAclConfigOutput) ExtendedAcl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OpenSearchAclConfig) pulumi.BoolPtrOutput { return v.ExtendedAcl }).(pulumi.BoolPtrOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o OpenSearchAclConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearchAclConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o OpenSearchAclConfigOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearchAclConfig) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type OpenSearchAclConfigArrayOutput struct{ *pulumi.OutputState }

func (OpenSearchAclConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenSearchAclConfig)(nil)).Elem()
}

func (o OpenSearchAclConfigArrayOutput) ToOpenSearchAclConfigArrayOutput() OpenSearchAclConfigArrayOutput {
	return o
}

func (o OpenSearchAclConfigArrayOutput) ToOpenSearchAclConfigArrayOutputWithContext(ctx context.Context) OpenSearchAclConfigArrayOutput {
	return o
}

func (o OpenSearchAclConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OpenSearchAclConfig] {
	return pulumix.Output[[]*OpenSearchAclConfig]{
		OutputState: o.OutputState,
	}
}

func (o OpenSearchAclConfigArrayOutput) Index(i pulumi.IntInput) OpenSearchAclConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenSearchAclConfig {
		return vs[0].([]*OpenSearchAclConfig)[vs[1].(int)]
	}).(OpenSearchAclConfigOutput)
}

type OpenSearchAclConfigMapOutput struct{ *pulumi.OutputState }

func (OpenSearchAclConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenSearchAclConfig)(nil)).Elem()
}

func (o OpenSearchAclConfigMapOutput) ToOpenSearchAclConfigMapOutput() OpenSearchAclConfigMapOutput {
	return o
}

func (o OpenSearchAclConfigMapOutput) ToOpenSearchAclConfigMapOutputWithContext(ctx context.Context) OpenSearchAclConfigMapOutput {
	return o
}

func (o OpenSearchAclConfigMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OpenSearchAclConfig] {
	return pulumix.Output[map[string]*OpenSearchAclConfig]{
		OutputState: o.OutputState,
	}
}

func (o OpenSearchAclConfigMapOutput) MapIndex(k pulumi.StringInput) OpenSearchAclConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenSearchAclConfig {
		return vs[0].(map[string]*OpenSearchAclConfig)[vs[1].(string)]
	}).(OpenSearchAclConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenSearchAclConfigInput)(nil)).Elem(), &OpenSearchAclConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenSearchAclConfigArrayInput)(nil)).Elem(), OpenSearchAclConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenSearchAclConfigMapInput)(nil)).Elem(), OpenSearchAclConfigMap{})
	pulumi.RegisterOutputType(OpenSearchAclConfigOutput{})
	pulumi.RegisterOutputType(OpenSearchAclConfigArrayOutput{})
	pulumi.RegisterOutputType(OpenSearchAclConfigMapOutput{})
}
