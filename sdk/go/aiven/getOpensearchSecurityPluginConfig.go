// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about OpenSearch Security configuration for an Aiven for OpenSearchÂ® service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.LookupOpensearchSecurityPluginConfig(ctx, &aiven.LookupOpensearchSecurityPluginConfigArgs{
//				Project:     exampleProject.Project,
//				ServiceName: exampleOpensearch.ServiceName,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOpensearchSecurityPluginConfig(ctx *pulumi.Context, args *LookupOpensearchSecurityPluginConfigArgs, opts ...pulumi.InvokeOption) (*LookupOpensearchSecurityPluginConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOpensearchSecurityPluginConfigResult
	err := ctx.Invoke("aiven:index/getOpensearchSecurityPluginConfig:getOpensearchSecurityPluginConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOpensearchSecurityPluginConfig.
type LookupOpensearchSecurityPluginConfigArgs struct {
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getOpensearchSecurityPluginConfig.
type LookupOpensearchSecurityPluginConfigResult struct {
	// Whether the os-sec-admin user is enabled. This indicates whether OpenSearch Security management is enabled. This is always true when the os-sec-admin password was set at least once.
	AdminEnabled bool `pulumi:"adminEnabled"`
	// The password for the os-sec-admin user.
	AdminPassword string `pulumi:"adminPassword"`
	// Whether the security plugin is available. This is always true for recently created services.
	Available bool `pulumi:"available"`
	// Whether the security plugin is enabled. This is always true for recently created services.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
}

func LookupOpensearchSecurityPluginConfigOutput(ctx *pulumi.Context, args LookupOpensearchSecurityPluginConfigOutputArgs, opts ...pulumi.InvokeOption) LookupOpensearchSecurityPluginConfigResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupOpensearchSecurityPluginConfigResultOutput, error) {
			args := v.(LookupOpensearchSecurityPluginConfigArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aiven:index/getOpensearchSecurityPluginConfig:getOpensearchSecurityPluginConfig", args, LookupOpensearchSecurityPluginConfigResultOutput{}, options).(LookupOpensearchSecurityPluginConfigResultOutput), nil
		}).(LookupOpensearchSecurityPluginConfigResultOutput)
}

// A collection of arguments for invoking getOpensearchSecurityPluginConfig.
type LookupOpensearchSecurityPluginConfigOutputArgs struct {
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupOpensearchSecurityPluginConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchSecurityPluginConfigArgs)(nil)).Elem()
}

// A collection of values returned by getOpensearchSecurityPluginConfig.
type LookupOpensearchSecurityPluginConfigResultOutput struct{ *pulumi.OutputState }

func (LookupOpensearchSecurityPluginConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchSecurityPluginConfigResult)(nil)).Elem()
}

func (o LookupOpensearchSecurityPluginConfigResultOutput) ToLookupOpensearchSecurityPluginConfigResultOutput() LookupOpensearchSecurityPluginConfigResultOutput {
	return o
}

func (o LookupOpensearchSecurityPluginConfigResultOutput) ToLookupOpensearchSecurityPluginConfigResultOutputWithContext(ctx context.Context) LookupOpensearchSecurityPluginConfigResultOutput {
	return o
}

// Whether the os-sec-admin user is enabled. This indicates whether OpenSearch Security management is enabled. This is always true when the os-sec-admin password was set at least once.
func (o LookupOpensearchSecurityPluginConfigResultOutput) AdminEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupOpensearchSecurityPluginConfigResult) bool { return v.AdminEnabled }).(pulumi.BoolOutput)
}

// The password for the os-sec-admin user.
func (o LookupOpensearchSecurityPluginConfigResultOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchSecurityPluginConfigResult) string { return v.AdminPassword }).(pulumi.StringOutput)
}

// Whether the security plugin is available. This is always true for recently created services.
func (o LookupOpensearchSecurityPluginConfigResultOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupOpensearchSecurityPluginConfigResult) bool { return v.Available }).(pulumi.BoolOutput)
}

// Whether the security plugin is enabled. This is always true for recently created services.
func (o LookupOpensearchSecurityPluginConfigResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupOpensearchSecurityPluginConfigResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupOpensearchSecurityPluginConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchSecurityPluginConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o LookupOpensearchSecurityPluginConfigResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchSecurityPluginConfigResult) string { return v.Project }).(pulumi.StringOutput)
}

// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o LookupOpensearchSecurityPluginConfigResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchSecurityPluginConfigResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOpensearchSecurityPluginConfigResultOutput{})
}
