// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Kafka Schema data source provides information about the existing Aiven Kafka Schema.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupKafkaSchemaConfiguration(ctx, &GetKafkaSchemaConfigurationArgs{
// 			Project:     aiven_project.Kafka - schemas - project1.Project,
// 			ServiceName: aiven_service.Kafka - service1.Service_name,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupKafkaSchema(ctx *pulumi.Context, args *LookupKafkaSchemaArgs, opts ...pulumi.InvokeOption) (*LookupKafkaSchemaResult, error) {
	var rv LookupKafkaSchemaResult
	err := ctx.Invoke("aiven:index/getKafkaSchema:getKafkaSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKafkaSchema.
type LookupKafkaSchemaArgs struct {
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	SubjectName string `pulumi:"subjectName"`
}

// A collection of values returned by getKafkaSchema.
type LookupKafkaSchemaResult struct {
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	Project     string `pulumi:"project"`
	Schema      string `pulumi:"schema"`
	SchemaType  string `pulumi:"schemaType"`
	ServiceName string `pulumi:"serviceName"`
	SubjectName string `pulumi:"subjectName"`
	Version     int    `pulumi:"version"`
}

func LookupKafkaSchemaOutput(ctx *pulumi.Context, args LookupKafkaSchemaOutputArgs, opts ...pulumi.InvokeOption) LookupKafkaSchemaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKafkaSchemaResult, error) {
			args := v.(LookupKafkaSchemaArgs)
			r, err := LookupKafkaSchema(ctx, &args, opts...)
			var s LookupKafkaSchemaResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKafkaSchemaResultOutput)
}

// A collection of arguments for invoking getKafkaSchema.
type LookupKafkaSchemaOutputArgs struct {
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	SubjectName pulumi.StringInput `pulumi:"subjectName"`
}

func (LookupKafkaSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaSchemaArgs)(nil)).Elem()
}

// A collection of values returned by getKafkaSchema.
type LookupKafkaSchemaResultOutput struct{ *pulumi.OutputState }

func (LookupKafkaSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaSchemaResult)(nil)).Elem()
}

func (o LookupKafkaSchemaResultOutput) ToLookupKafkaSchemaResultOutput() LookupKafkaSchemaResultOutput {
	return o
}

func (o LookupKafkaSchemaResultOutput) ToLookupKafkaSchemaResultOutputWithContext(ctx context.Context) LookupKafkaSchemaResultOutput {
	return o
}

func (o LookupKafkaSchemaResultOutput) CompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaSchemaResult) string { return v.CompatibilityLevel }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKafkaSchemaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaSchemaResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupKafkaSchemaResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaSchemaResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupKafkaSchemaResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaSchemaResult) string { return v.Schema }).(pulumi.StringOutput)
}

func (o LookupKafkaSchemaResultOutput) SchemaType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaSchemaResult) string { return v.SchemaType }).(pulumi.StringOutput)
}

func (o LookupKafkaSchemaResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaSchemaResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupKafkaSchemaResultOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaSchemaResult) string { return v.SubjectName }).(pulumi.StringOutput)
}

func (o LookupKafkaSchemaResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupKafkaSchemaResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKafkaSchemaResultOutput{})
}
