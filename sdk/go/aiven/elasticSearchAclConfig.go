// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Elasticsearch ACL Config Resource
//
// The Elasticsearch ACL Config resource allows the configuration of ACL management on an Aiven Elasticsearch service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewElasticSearchAclConfig(ctx, "es_acl_config", &aiven.ElasticSearchAclConfigArgs{
// 			Project:     pulumi.Any(aiven_project.Es - project.Project),
// 			ServiceName: pulumi.Any(aiven_service.Es.Service_name),
// 			Enabled:     pulumi.Bool(true),
// 			ExtendedAcl: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ElasticSearchAclConfig struct {
	pulumi.CustomResourceState

	// enables of disables Elasticsearch ACL's.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl pulumi.BoolPtrOutput `pulumi:"extendedAcl"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewElasticSearchAclConfig registers a new resource with the given unique name, arguments, and options.
func NewElasticSearchAclConfig(ctx *pulumi.Context,
	name string, args *ElasticSearchAclConfigArgs, opts ...pulumi.ResourceOption) (*ElasticSearchAclConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource ElasticSearchAclConfig
	err := ctx.RegisterResource("aiven:index/elasticSearchAclConfig:ElasticSearchAclConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticSearchAclConfig gets an existing ElasticSearchAclConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticSearchAclConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticSearchAclConfigState, opts ...pulumi.ResourceOption) (*ElasticSearchAclConfig, error) {
	var resource ElasticSearchAclConfig
	err := ctx.ReadResource("aiven:index/elasticSearchAclConfig:ElasticSearchAclConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticSearchAclConfig resources.
type elasticSearchAclConfigState struct {
	// enables of disables Elasticsearch ACL's.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project *string `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName *string `pulumi:"serviceName"`
}

type ElasticSearchAclConfigState struct {
	// enables of disables Elasticsearch ACL's.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl pulumi.BoolPtrInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringPtrInput
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringPtrInput
}

func (ElasticSearchAclConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclConfigState)(nil)).Elem()
}

type elasticSearchAclConfigArgs struct {
	// enables of disables Elasticsearch ACL's.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project string `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ElasticSearchAclConfig resource.
type ElasticSearchAclConfigArgs struct {
	// enables of disables Elasticsearch ACL's.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl pulumi.BoolPtrInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringInput
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringInput
}

func (ElasticSearchAclConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclConfigArgs)(nil)).Elem()
}

type ElasticSearchAclConfigInput interface {
	pulumi.Input

	ToElasticSearchAclConfigOutput() ElasticSearchAclConfigOutput
	ToElasticSearchAclConfigOutputWithContext(ctx context.Context) ElasticSearchAclConfigOutput
}

func (*ElasticSearchAclConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSearchAclConfig)(nil))
}

func (i *ElasticSearchAclConfig) ToElasticSearchAclConfigOutput() ElasticSearchAclConfigOutput {
	return i.ToElasticSearchAclConfigOutputWithContext(context.Background())
}

func (i *ElasticSearchAclConfig) ToElasticSearchAclConfigOutputWithContext(ctx context.Context) ElasticSearchAclConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclConfigOutput)
}

func (i *ElasticSearchAclConfig) ToElasticSearchAclConfigPtrOutput() ElasticSearchAclConfigPtrOutput {
	return i.ToElasticSearchAclConfigPtrOutputWithContext(context.Background())
}

func (i *ElasticSearchAclConfig) ToElasticSearchAclConfigPtrOutputWithContext(ctx context.Context) ElasticSearchAclConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclConfigPtrOutput)
}

type ElasticSearchAclConfigPtrInput interface {
	pulumi.Input

	ToElasticSearchAclConfigPtrOutput() ElasticSearchAclConfigPtrOutput
	ToElasticSearchAclConfigPtrOutputWithContext(ctx context.Context) ElasticSearchAclConfigPtrOutput
}

type elasticSearchAclConfigPtrType ElasticSearchAclConfigArgs

func (*elasticSearchAclConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearchAclConfig)(nil))
}

func (i *elasticSearchAclConfigPtrType) ToElasticSearchAclConfigPtrOutput() ElasticSearchAclConfigPtrOutput {
	return i.ToElasticSearchAclConfigPtrOutputWithContext(context.Background())
}

func (i *elasticSearchAclConfigPtrType) ToElasticSearchAclConfigPtrOutputWithContext(ctx context.Context) ElasticSearchAclConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclConfigPtrOutput)
}

// ElasticSearchAclConfigArrayInput is an input type that accepts ElasticSearchAclConfigArray and ElasticSearchAclConfigArrayOutput values.
// You can construct a concrete instance of `ElasticSearchAclConfigArrayInput` via:
//
//          ElasticSearchAclConfigArray{ ElasticSearchAclConfigArgs{...} }
type ElasticSearchAclConfigArrayInput interface {
	pulumi.Input

	ToElasticSearchAclConfigArrayOutput() ElasticSearchAclConfigArrayOutput
	ToElasticSearchAclConfigArrayOutputWithContext(context.Context) ElasticSearchAclConfigArrayOutput
}

type ElasticSearchAclConfigArray []ElasticSearchAclConfigInput

func (ElasticSearchAclConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ElasticSearchAclConfig)(nil))
}

func (i ElasticSearchAclConfigArray) ToElasticSearchAclConfigArrayOutput() ElasticSearchAclConfigArrayOutput {
	return i.ToElasticSearchAclConfigArrayOutputWithContext(context.Background())
}

func (i ElasticSearchAclConfigArray) ToElasticSearchAclConfigArrayOutputWithContext(ctx context.Context) ElasticSearchAclConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclConfigArrayOutput)
}

// ElasticSearchAclConfigMapInput is an input type that accepts ElasticSearchAclConfigMap and ElasticSearchAclConfigMapOutput values.
// You can construct a concrete instance of `ElasticSearchAclConfigMapInput` via:
//
//          ElasticSearchAclConfigMap{ "key": ElasticSearchAclConfigArgs{...} }
type ElasticSearchAclConfigMapInput interface {
	pulumi.Input

	ToElasticSearchAclConfigMapOutput() ElasticSearchAclConfigMapOutput
	ToElasticSearchAclConfigMapOutputWithContext(context.Context) ElasticSearchAclConfigMapOutput
}

type ElasticSearchAclConfigMap map[string]ElasticSearchAclConfigInput

func (ElasticSearchAclConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ElasticSearchAclConfig)(nil))
}

func (i ElasticSearchAclConfigMap) ToElasticSearchAclConfigMapOutput() ElasticSearchAclConfigMapOutput {
	return i.ToElasticSearchAclConfigMapOutputWithContext(context.Background())
}

func (i ElasticSearchAclConfigMap) ToElasticSearchAclConfigMapOutputWithContext(ctx context.Context) ElasticSearchAclConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclConfigMapOutput)
}

type ElasticSearchAclConfigOutput struct {
	*pulumi.OutputState
}

func (ElasticSearchAclConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSearchAclConfig)(nil))
}

func (o ElasticSearchAclConfigOutput) ToElasticSearchAclConfigOutput() ElasticSearchAclConfigOutput {
	return o
}

func (o ElasticSearchAclConfigOutput) ToElasticSearchAclConfigOutputWithContext(ctx context.Context) ElasticSearchAclConfigOutput {
	return o
}

func (o ElasticSearchAclConfigOutput) ToElasticSearchAclConfigPtrOutput() ElasticSearchAclConfigPtrOutput {
	return o.ToElasticSearchAclConfigPtrOutputWithContext(context.Background())
}

func (o ElasticSearchAclConfigOutput) ToElasticSearchAclConfigPtrOutputWithContext(ctx context.Context) ElasticSearchAclConfigPtrOutput {
	return o.ApplyT(func(v ElasticSearchAclConfig) *ElasticSearchAclConfig {
		return &v
	}).(ElasticSearchAclConfigPtrOutput)
}

type ElasticSearchAclConfigPtrOutput struct {
	*pulumi.OutputState
}

func (ElasticSearchAclConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearchAclConfig)(nil))
}

func (o ElasticSearchAclConfigPtrOutput) ToElasticSearchAclConfigPtrOutput() ElasticSearchAclConfigPtrOutput {
	return o
}

func (o ElasticSearchAclConfigPtrOutput) ToElasticSearchAclConfigPtrOutputWithContext(ctx context.Context) ElasticSearchAclConfigPtrOutput {
	return o
}

type ElasticSearchAclConfigArrayOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticSearchAclConfig)(nil))
}

func (o ElasticSearchAclConfigArrayOutput) ToElasticSearchAclConfigArrayOutput() ElasticSearchAclConfigArrayOutput {
	return o
}

func (o ElasticSearchAclConfigArrayOutput) ToElasticSearchAclConfigArrayOutputWithContext(ctx context.Context) ElasticSearchAclConfigArrayOutput {
	return o
}

func (o ElasticSearchAclConfigArrayOutput) Index(i pulumi.IntInput) ElasticSearchAclConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticSearchAclConfig {
		return vs[0].([]ElasticSearchAclConfig)[vs[1].(int)]
	}).(ElasticSearchAclConfigOutput)
}

type ElasticSearchAclConfigMapOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ElasticSearchAclConfig)(nil))
}

func (o ElasticSearchAclConfigMapOutput) ToElasticSearchAclConfigMapOutput() ElasticSearchAclConfigMapOutput {
	return o
}

func (o ElasticSearchAclConfigMapOutput) ToElasticSearchAclConfigMapOutputWithContext(ctx context.Context) ElasticSearchAclConfigMapOutput {
	return o
}

func (o ElasticSearchAclConfigMapOutput) MapIndex(k pulumi.StringInput) ElasticSearchAclConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ElasticSearchAclConfig {
		return vs[0].(map[string]ElasticSearchAclConfig)[vs[1].(string)]
	}).(ElasticSearchAclConfigOutput)
}

func init() {
	pulumi.RegisterOutputType(ElasticSearchAclConfigOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclConfigPtrOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclConfigArrayOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclConfigMapOutput{})
}
