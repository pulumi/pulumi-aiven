// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Elasticsearch ACL Config resource allows the configuration of ACL management on an Aiven Elasticsearch service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewElasticSearchAclConfig(ctx, "es-acl-config", &aiven.ElasticSearchAclConfigArgs{
// 			Project:     pulumi.Any(aiven_project.Es - project.Project),
// 			ServiceName: pulumi.Any(aiven_service.Es.Service_name),
// 			Enabled:     pulumi.Bool(true),
// 			ExtendedAcl: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ElasticSearchAclConfig struct {
	pulumi.CustomResourceState

	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access The default value is `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to The default value is `10`.
	ExtendedAcl pulumi.BoolPtrOutput `pulumi:"extendedAcl"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewElasticSearchAclConfig registers a new resource with the given unique name, arguments, and options.
func NewElasticSearchAclConfig(ctx *pulumi.Context,
	name string, args *ElasticSearchAclConfigArgs, opts ...pulumi.ResourceOption) (*ElasticSearchAclConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource ElasticSearchAclConfig
	err := ctx.RegisterResource("aiven:index/elasticSearchAclConfig:ElasticSearchAclConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticSearchAclConfig gets an existing ElasticSearchAclConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticSearchAclConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticSearchAclConfigState, opts ...pulumi.ResourceOption) (*ElasticSearchAclConfig, error) {
	var resource ElasticSearchAclConfig
	err := ctx.ReadResource("aiven:index/elasticSearchAclConfig:ElasticSearchAclConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticSearchAclConfig resources.
type elasticSearchAclConfigState struct {
	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access The default value is `true`.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to The default value is `10`.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
}

type ElasticSearchAclConfigState struct {
	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access The default value is `true`.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to The default value is `10`.
	ExtendedAcl pulumi.BoolPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
}

func (ElasticSearchAclConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclConfigState)(nil)).Elem()
}

type elasticSearchAclConfigArgs struct {
	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access The default value is `true`.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to The default value is `10`.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ElasticSearchAclConfig resource.
type ElasticSearchAclConfigArgs struct {
	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access The default value is `true`.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target indexes they have been granted access to The default value is `10`.
	ExtendedAcl pulumi.BoolPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringInput
}

func (ElasticSearchAclConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclConfigArgs)(nil)).Elem()
}

type ElasticSearchAclConfigInput interface {
	pulumi.Input

	ToElasticSearchAclConfigOutput() ElasticSearchAclConfigOutput
	ToElasticSearchAclConfigOutputWithContext(ctx context.Context) ElasticSearchAclConfigOutput
}

func (*ElasticSearchAclConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearchAclConfig)(nil)).Elem()
}

func (i *ElasticSearchAclConfig) ToElasticSearchAclConfigOutput() ElasticSearchAclConfigOutput {
	return i.ToElasticSearchAclConfigOutputWithContext(context.Background())
}

func (i *ElasticSearchAclConfig) ToElasticSearchAclConfigOutputWithContext(ctx context.Context) ElasticSearchAclConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclConfigOutput)
}

// ElasticSearchAclConfigArrayInput is an input type that accepts ElasticSearchAclConfigArray and ElasticSearchAclConfigArrayOutput values.
// You can construct a concrete instance of `ElasticSearchAclConfigArrayInput` via:
//
//          ElasticSearchAclConfigArray{ ElasticSearchAclConfigArgs{...} }
type ElasticSearchAclConfigArrayInput interface {
	pulumi.Input

	ToElasticSearchAclConfigArrayOutput() ElasticSearchAclConfigArrayOutput
	ToElasticSearchAclConfigArrayOutputWithContext(context.Context) ElasticSearchAclConfigArrayOutput
}

type ElasticSearchAclConfigArray []ElasticSearchAclConfigInput

func (ElasticSearchAclConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticSearchAclConfig)(nil)).Elem()
}

func (i ElasticSearchAclConfigArray) ToElasticSearchAclConfigArrayOutput() ElasticSearchAclConfigArrayOutput {
	return i.ToElasticSearchAclConfigArrayOutputWithContext(context.Background())
}

func (i ElasticSearchAclConfigArray) ToElasticSearchAclConfigArrayOutputWithContext(ctx context.Context) ElasticSearchAclConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclConfigArrayOutput)
}

// ElasticSearchAclConfigMapInput is an input type that accepts ElasticSearchAclConfigMap and ElasticSearchAclConfigMapOutput values.
// You can construct a concrete instance of `ElasticSearchAclConfigMapInput` via:
//
//          ElasticSearchAclConfigMap{ "key": ElasticSearchAclConfigArgs{...} }
type ElasticSearchAclConfigMapInput interface {
	pulumi.Input

	ToElasticSearchAclConfigMapOutput() ElasticSearchAclConfigMapOutput
	ToElasticSearchAclConfigMapOutputWithContext(context.Context) ElasticSearchAclConfigMapOutput
}

type ElasticSearchAclConfigMap map[string]ElasticSearchAclConfigInput

func (ElasticSearchAclConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticSearchAclConfig)(nil)).Elem()
}

func (i ElasticSearchAclConfigMap) ToElasticSearchAclConfigMapOutput() ElasticSearchAclConfigMapOutput {
	return i.ToElasticSearchAclConfigMapOutputWithContext(context.Background())
}

func (i ElasticSearchAclConfigMap) ToElasticSearchAclConfigMapOutputWithContext(ctx context.Context) ElasticSearchAclConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclConfigMapOutput)
}

type ElasticSearchAclConfigOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearchAclConfig)(nil)).Elem()
}

func (o ElasticSearchAclConfigOutput) ToElasticSearchAclConfigOutput() ElasticSearchAclConfigOutput {
	return o
}

func (o ElasticSearchAclConfigOutput) ToElasticSearchAclConfigOutputWithContext(ctx context.Context) ElasticSearchAclConfigOutput {
	return o
}

type ElasticSearchAclConfigArrayOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticSearchAclConfig)(nil)).Elem()
}

func (o ElasticSearchAclConfigArrayOutput) ToElasticSearchAclConfigArrayOutput() ElasticSearchAclConfigArrayOutput {
	return o
}

func (o ElasticSearchAclConfigArrayOutput) ToElasticSearchAclConfigArrayOutputWithContext(ctx context.Context) ElasticSearchAclConfigArrayOutput {
	return o
}

func (o ElasticSearchAclConfigArrayOutput) Index(i pulumi.IntInput) ElasticSearchAclConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticSearchAclConfig {
		return vs[0].([]*ElasticSearchAclConfig)[vs[1].(int)]
	}).(ElasticSearchAclConfigOutput)
}

type ElasticSearchAclConfigMapOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticSearchAclConfig)(nil)).Elem()
}

func (o ElasticSearchAclConfigMapOutput) ToElasticSearchAclConfigMapOutput() ElasticSearchAclConfigMapOutput {
	return o
}

func (o ElasticSearchAclConfigMapOutput) ToElasticSearchAclConfigMapOutputWithContext(ctx context.Context) ElasticSearchAclConfigMapOutput {
	return o
}

func (o ElasticSearchAclConfigMapOutput) MapIndex(k pulumi.StringInput) ElasticSearchAclConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticSearchAclConfig {
		return vs[0].(map[string]*ElasticSearchAclConfig)[vs[1].(string)]
	}).(ElasticSearchAclConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSearchAclConfigInput)(nil)).Elem(), &ElasticSearchAclConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSearchAclConfigArrayInput)(nil)).Elem(), ElasticSearchAclConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSearchAclConfigMapInput)(nil)).Elem(), ElasticSearchAclConfigMap{})
	pulumi.RegisterOutputType(ElasticSearchAclConfigOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclConfigArrayOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclConfigMapOutput{})
}
