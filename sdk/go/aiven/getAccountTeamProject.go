// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Account Team Project Data Source
//
// The Account Team Project data source provides information about the existing Account Team Project.
func LookupAccountTeamProject(ctx *pulumi.Context, args *LookupAccountTeamProjectArgs, opts ...pulumi.InvokeOption) (*LookupAccountTeamProjectResult, error) {
	var rv LookupAccountTeamProjectResult
	err := ctx.Invoke("aiven:index/getAccountTeamProject:getAccountTeamProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccountTeamProject.
type LookupAccountTeamProjectArgs struct {
	// is a unique account id.
	AccountId string `pulumi:"accountId"`
	// is a project name of already existing project.
	ProjectName string `pulumi:"projectName"`
	// is an account team id.
	TeamId string `pulumi:"teamId"`
	// is an account team project type, can one of the following values: `admin`,
	// `developer`, `operator` and `readOnly`.
	TeamType *string `pulumi:"teamType"`
}

// A collection of values returned by getAccountTeamProject.
type LookupAccountTeamProjectResult struct {
	AccountId string `pulumi:"accountId"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	ProjectName string `pulumi:"projectName"`
	TeamId      string `pulumi:"teamId"`
	// is an account team project type, can one of the following values: `admin`,
	// `developer`, `operator` and `readOnly`.
	TeamType *string `pulumi:"teamType"`
}

func LookupAccountTeamProjectOutput(ctx *pulumi.Context, args LookupAccountTeamProjectOutputArgs, opts ...pulumi.InvokeOption) LookupAccountTeamProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccountTeamProjectResult, error) {
			args := v.(LookupAccountTeamProjectArgs)
			r, err := LookupAccountTeamProject(ctx, &args, opts...)
			return *r, err
		}).(LookupAccountTeamProjectResultOutput)
}

// A collection of arguments for invoking getAccountTeamProject.
type LookupAccountTeamProjectOutputArgs struct {
	// is a unique account id.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// is a project name of already existing project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// is an account team id.
	TeamId pulumi.StringInput `pulumi:"teamId"`
	// is an account team project type, can one of the following values: `admin`,
	// `developer`, `operator` and `readOnly`.
	TeamType pulumi.StringPtrInput `pulumi:"teamType"`
}

func (LookupAccountTeamProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountTeamProjectArgs)(nil)).Elem()
}

// A collection of values returned by getAccountTeamProject.
type LookupAccountTeamProjectResultOutput struct{ *pulumi.OutputState }

func (LookupAccountTeamProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountTeamProjectResult)(nil)).Elem()
}

func (o LookupAccountTeamProjectResultOutput) ToLookupAccountTeamProjectResultOutput() LookupAccountTeamProjectResultOutput {
	return o
}

func (o LookupAccountTeamProjectResultOutput) ToLookupAccountTeamProjectResultOutputWithContext(ctx context.Context) LookupAccountTeamProjectResultOutput {
	return o
}

func (o LookupAccountTeamProjectResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccountTeamProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAccountTeamProjectResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

func (o LookupAccountTeamProjectResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) string { return v.TeamId }).(pulumi.StringOutput)
}

// is an account team project type, can one of the following values: `admin`,
// `developer`, `operator` and `readOnly`.
func (o LookupAccountTeamProjectResultOutput) TeamType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) *string { return v.TeamType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccountTeamProjectResultOutput{})
}
