// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Account Team Project data source provides information about the existing Account Team Project.
//
// !> **Teams have been deprecated and are being migrated to groups**
// **On 30 September 2024** the Account Owners team will transition to super admin. Super admin have full access to the organization.
// The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions.
// **From 4 November 2024** you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after
// this date. **On 2 December 2024** all teams will be deleted and the teams feature will be completely removed. View the
// migration guide for more information on the changes and migrating to groups.
//
// > **Important**
// You can't delete the Account Owners team. **Deleting all other teams in your organization will disable the teams feature.**
// You won't be able to create new teams or access your Account Owners team.
func LookupAccountTeamProject(ctx *pulumi.Context, args *LookupAccountTeamProjectArgs, opts ...pulumi.InvokeOption) (*LookupAccountTeamProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccountTeamProjectResult
	err := ctx.Invoke("aiven:index/getAccountTeamProject:getAccountTeamProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccountTeamProject.
type LookupAccountTeamProjectArgs struct {
	// The unique account id
	AccountId string `pulumi:"accountId"`
	// The name of an already existing project
	ProjectName string `pulumi:"projectName"`
	// An account team id
	TeamId string `pulumi:"teamId"`
}

// A collection of values returned by getAccountTeamProject.
type LookupAccountTeamProjectResult struct {
	// The unique account id
	AccountId string `pulumi:"accountId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of an already existing project
	ProjectName string `pulumi:"projectName"`
	// An account team id
	TeamId string `pulumi:"teamId"`
	// The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
	TeamType string `pulumi:"teamType"`
}

func LookupAccountTeamProjectOutput(ctx *pulumi.Context, args LookupAccountTeamProjectOutputArgs, opts ...pulumi.InvokeOption) LookupAccountTeamProjectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAccountTeamProjectResultOutput, error) {
			args := v.(LookupAccountTeamProjectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aiven:index/getAccountTeamProject:getAccountTeamProject", args, LookupAccountTeamProjectResultOutput{}, options).(LookupAccountTeamProjectResultOutput), nil
		}).(LookupAccountTeamProjectResultOutput)
}

// A collection of arguments for invoking getAccountTeamProject.
type LookupAccountTeamProjectOutputArgs struct {
	// The unique account id
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The name of an already existing project
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// An account team id
	TeamId pulumi.StringInput `pulumi:"teamId"`
}

func (LookupAccountTeamProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountTeamProjectArgs)(nil)).Elem()
}

// A collection of values returned by getAccountTeamProject.
type LookupAccountTeamProjectResultOutput struct{ *pulumi.OutputState }

func (LookupAccountTeamProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountTeamProjectResult)(nil)).Elem()
}

func (o LookupAccountTeamProjectResultOutput) ToLookupAccountTeamProjectResultOutput() LookupAccountTeamProjectResultOutput {
	return o
}

func (o LookupAccountTeamProjectResultOutput) ToLookupAccountTeamProjectResultOutputWithContext(ctx context.Context) LookupAccountTeamProjectResultOutput {
	return o
}

// The unique account id
func (o LookupAccountTeamProjectResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccountTeamProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of an already existing project
func (o LookupAccountTeamProjectResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// An account team id
func (o LookupAccountTeamProjectResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) string { return v.TeamId }).(pulumi.StringOutput)
}

// The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
func (o LookupAccountTeamProjectResultOutput) TeamType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountTeamProjectResult) string { return v.TeamType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccountTeamProjectResultOutput{})
}
