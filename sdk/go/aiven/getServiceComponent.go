// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Service Component data source provides information about the existing Aiven service Component.
//
// Service components can be defined to get the connection info for specific service. Services may support multiple different access routes (VPC peering and public access), have additional components or support various authentication methods. Each of these may be represented by different DNS name or TCP port and the specific component to match can be selected by specifying appropriate filters as shown below.
//
// ## Example Usage
//
// {{tffile "examples/data-sources/aiven_service_component/data-source.tf"}}
func GetServiceComponent(ctx *pulumi.Context, args *GetServiceComponentArgs, opts ...pulumi.InvokeOption) (*GetServiceComponentResult, error) {
	var rv GetServiceComponentResult
	err := ctx.Invoke("aiven:index/getServiceComponent:getServiceComponent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceComponent.
type GetServiceComponentArgs struct {
	// Service component name
	Component string `pulumi:"component"`
	// Kafka authentication method. This is a value specific to the 'kafka' service component
	KafkaAuthenticationMethod *string `pulumi:"kafkaAuthenticationMethod"`
	// Project name
	Project string `pulumi:"project"`
	// Network access route
	Route *string `pulumi:"route"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
	Ssl *bool `pulumi:"ssl"`
	// DNS usage name
	Usage *string `pulumi:"usage"`
}

// A collection of values returned by getServiceComponent.
type GetServiceComponentResult struct {
	// Service component name
	Component string `pulumi:"component"`
	// DNS name for connecting to the service component
	Host string `pulumi:"host"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Kafka authentication method. This is a value specific to the 'kafka' service component
	KafkaAuthenticationMethod *string `pulumi:"kafkaAuthenticationMethod"`
	// Port number for connecting to the service component
	Port int `pulumi:"port"`
	// Project name
	Project string `pulumi:"project"`
	// Network access route
	Route *string `pulumi:"route"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
	Ssl *bool `pulumi:"ssl"`
	// DNS usage name
	Usage *string `pulumi:"usage"`
}

func GetServiceComponentOutput(ctx *pulumi.Context, args GetServiceComponentOutputArgs, opts ...pulumi.InvokeOption) GetServiceComponentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetServiceComponentResult, error) {
			args := v.(GetServiceComponentArgs)
			r, err := GetServiceComponent(ctx, &args, opts...)
			var s GetServiceComponentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetServiceComponentResultOutput)
}

// A collection of arguments for invoking getServiceComponent.
type GetServiceComponentOutputArgs struct {
	// Service component name
	Component pulumi.StringInput `pulumi:"component"`
	// Kafka authentication method. This is a value specific to the 'kafka' service component
	KafkaAuthenticationMethod pulumi.StringPtrInput `pulumi:"kafkaAuthenticationMethod"`
	// Project name
	Project pulumi.StringInput `pulumi:"project"`
	// Network access route
	Route pulumi.StringPtrInput `pulumi:"route"`
	// Service name
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
	Ssl pulumi.BoolPtrInput `pulumi:"ssl"`
	// DNS usage name
	Usage pulumi.StringPtrInput `pulumi:"usage"`
}

func (GetServiceComponentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceComponentArgs)(nil)).Elem()
}

// A collection of values returned by getServiceComponent.
type GetServiceComponentResultOutput struct{ *pulumi.OutputState }

func (GetServiceComponentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceComponentResult)(nil)).Elem()
}

func (o GetServiceComponentResultOutput) ToGetServiceComponentResultOutput() GetServiceComponentResultOutput {
	return o
}

func (o GetServiceComponentResultOutput) ToGetServiceComponentResultOutputWithContext(ctx context.Context) GetServiceComponentResultOutput {
	return o
}

// Service component name
func (o GetServiceComponentResultOutput) Component() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceComponentResult) string { return v.Component }).(pulumi.StringOutput)
}

// DNS name for connecting to the service component
func (o GetServiceComponentResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceComponentResult) string { return v.Host }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetServiceComponentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceComponentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Kafka authentication method. This is a value specific to the 'kafka' service component
func (o GetServiceComponentResultOutput) KafkaAuthenticationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceComponentResult) *string { return v.KafkaAuthenticationMethod }).(pulumi.StringPtrOutput)
}

// Port number for connecting to the service component
func (o GetServiceComponentResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceComponentResult) int { return v.Port }).(pulumi.IntOutput)
}

// Project name
func (o GetServiceComponentResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceComponentResult) string { return v.Project }).(pulumi.StringOutput)
}

// Network access route
func (o GetServiceComponentResultOutput) Route() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceComponentResult) *string { return v.Route }).(pulumi.StringPtrOutput)
}

// Service name
func (o GetServiceComponentResultOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceComponentResult) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted and this property is only included for service components that may disable encryption
func (o GetServiceComponentResultOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetServiceComponentResult) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// DNS usage name
func (o GetServiceComponentResultOutput) Usage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceComponentResult) *string { return v.Usage }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServiceComponentResultOutput{})
}
