// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Kafka connector data source provides information about the existing Aiven Kafka connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupKafkaConnector(ctx, &GetKafkaConnectorArgs{
// 			Project:       aiven_project.Kafka - con - project1.Project,
// 			ServiceName:   aiven_service.Kafka - service1.Service_name,
// 			ConnectorName: "kafka-es-con1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupKafkaConnector(ctx *pulumi.Context, args *LookupKafkaConnectorArgs, opts ...pulumi.InvokeOption) (*LookupKafkaConnectorResult, error) {
	var rv LookupKafkaConnectorResult
	err := ctx.Invoke("aiven:index/getKafkaConnector:getKafkaConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKafkaConnector.
type LookupKafkaConnectorArgs struct {
	ConnectorName string `pulumi:"connectorName"`
	Project       string `pulumi:"project"`
	ServiceName   string `pulumi:"serviceName"`
}

// A collection of values returned by getKafkaConnector.
type LookupKafkaConnectorResult struct {
	Config        map[string]string `pulumi:"config"`
	ConnectorName string            `pulumi:"connectorName"`
	// The provider-assigned unique ID for this managed resource.
	Id            string                  `pulumi:"id"`
	PluginAuthor  string                  `pulumi:"pluginAuthor"`
	PluginClass   string                  `pulumi:"pluginClass"`
	PluginDocUrl  string                  `pulumi:"pluginDocUrl"`
	PluginTitle   string                  `pulumi:"pluginTitle"`
	PluginType    string                  `pulumi:"pluginType"`
	PluginVersion string                  `pulumi:"pluginVersion"`
	Project       string                  `pulumi:"project"`
	ServiceName   string                  `pulumi:"serviceName"`
	Tasks         []GetKafkaConnectorTask `pulumi:"tasks"`
}

func LookupKafkaConnectorOutput(ctx *pulumi.Context, args LookupKafkaConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupKafkaConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKafkaConnectorResult, error) {
			args := v.(LookupKafkaConnectorArgs)
			r, err := LookupKafkaConnector(ctx, &args, opts...)
			var s LookupKafkaConnectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKafkaConnectorResultOutput)
}

// A collection of arguments for invoking getKafkaConnector.
type LookupKafkaConnectorOutputArgs struct {
	ConnectorName pulumi.StringInput `pulumi:"connectorName"`
	Project       pulumi.StringInput `pulumi:"project"`
	ServiceName   pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupKafkaConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getKafkaConnector.
type LookupKafkaConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupKafkaConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaConnectorResult)(nil)).Elem()
}

func (o LookupKafkaConnectorResultOutput) ToLookupKafkaConnectorResultOutput() LookupKafkaConnectorResultOutput {
	return o
}

func (o LookupKafkaConnectorResultOutput) ToLookupKafkaConnectorResultOutputWithContext(ctx context.Context) LookupKafkaConnectorResultOutput {
	return o
}

func (o LookupKafkaConnectorResultOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

func (o LookupKafkaConnectorResultOutput) ConnectorName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.ConnectorName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKafkaConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectorResultOutput) PluginAuthor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.PluginAuthor }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectorResultOutput) PluginClass() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.PluginClass }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectorResultOutput) PluginDocUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.PluginDocUrl }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectorResultOutput) PluginTitle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.PluginTitle }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectorResultOutput) PluginType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.PluginType }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectorResultOutput) PluginVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.PluginVersion }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectorResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectorResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupKafkaConnectorResultOutput) Tasks() GetKafkaConnectorTaskArrayOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) []GetKafkaConnectorTask { return v.Tasks }).(GetKafkaConnectorTaskArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKafkaConnectorResultOutput{})
}
