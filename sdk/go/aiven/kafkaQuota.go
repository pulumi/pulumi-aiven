// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages quotas for an Aiven for Apache KafkaÂ® service user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewKafkaQuota(ctx, "example_quota", &aiven.KafkaQuotaArgs{
//				Project:           pulumi.Any(foo.Project),
//				ServiceName:       pulumi.Any(exampleKafka.ServiceName),
//				User:              pulumi.String("example-kafka-user"),
//				ClientId:          pulumi.String("example_client"),
//				ConsumerByteRate:  pulumi.Int(1000),
//				ProducerByteRate:  pulumi.Int(1000),
//				RequestPercentage: pulumi.Float64(50),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// When both USER and CLIENT_ID are specified
//
// ```sh
// $ pulumi import aiven:index/kafkaQuota:KafkaQuota example_quota PROJECT/SERVICE_NAME/CLIENT_ID/USER
// ```
//
// # When only USER is specified
//
// ```sh
// $ pulumi import aiven:index/kafkaQuota:KafkaQuota example_quota PROJECT/SERVICE_NAME//USER
// ```
//
// When only CLIENT_ID is specified
//
// ```sh
// $ pulumi import aiven:index/kafkaQuota:KafkaQuota example_quota PROJECT/SERVICE_NAME/CLIENT_ID/
// ```
type KafkaQuota struct {
	pulumi.CustomResourceState

	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ConsumerByteRate pulumi.IntPtrOutput `pulumi:"consumerByteRate"`
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ProducerByteRate pulumi.IntPtrOutput `pulumi:"producerByteRate"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
	// Exceeding this limit triggers throttling.
	// The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
	RequestPercentage pulumi.Float64PtrOutput `pulumi:"requestPercentage"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewKafkaQuota registers a new resource with the given unique name, arguments, and options.
func NewKafkaQuota(ctx *pulumi.Context,
	name string, args *KafkaQuotaArgs, opts ...pulumi.ResourceOption) (*KafkaQuota, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaQuota
	err := ctx.RegisterResource("aiven:index/kafkaQuota:KafkaQuota", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaQuota gets an existing KafkaQuota resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaQuota(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaQuotaState, opts ...pulumi.ResourceOption) (*KafkaQuota, error) {
	var resource KafkaQuota
	err := ctx.ReadResource("aiven:index/kafkaQuota:KafkaQuota", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaQuota resources.
type kafkaQuotaState struct {
	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	ClientId *string `pulumi:"clientId"`
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ConsumerByteRate *int `pulumi:"consumerByteRate"`
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ProducerByteRate *int `pulumi:"producerByteRate"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
	// Exceeding this limit triggers throttling.
	// The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
	RequestPercentage *float64 `pulumi:"requestPercentage"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	User *string `pulumi:"user"`
}

type KafkaQuotaState struct {
	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	ClientId pulumi.StringPtrInput
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ConsumerByteRate pulumi.IntPtrInput
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ProducerByteRate pulumi.IntPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
	// Exceeding this limit triggers throttling.
	// The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
	RequestPercentage pulumi.Float64PtrInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	User pulumi.StringPtrInput
}

func (KafkaQuotaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaQuotaState)(nil)).Elem()
}

type kafkaQuotaArgs struct {
	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	ClientId *string `pulumi:"clientId"`
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ConsumerByteRate *int `pulumi:"consumerByteRate"`
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ProducerByteRate *int `pulumi:"producerByteRate"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
	// Exceeding this limit triggers throttling.
	// The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
	RequestPercentage *float64 `pulumi:"requestPercentage"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a KafkaQuota resource.
type KafkaQuotaArgs struct {
	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	ClientId pulumi.StringPtrInput
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ConsumerByteRate pulumi.IntPtrInput
	// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
	// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
	// Exceeding this limit results in client throttling.
	ProducerByteRate pulumi.IntPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
	// Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
	// Exceeding this limit triggers throttling.
	// The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
	RequestPercentage pulumi.Float64PtrInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringInput
	// Represents a logical group of clients, assigned a unique name by the client application.
	// Quotas can be applied based on user, client-id, or both.
	// The most relevant quota is chosen for each connection.
	// All connections within a quota group share the same quota.
	// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
	User pulumi.StringPtrInput
}

func (KafkaQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaQuotaArgs)(nil)).Elem()
}

type KafkaQuotaInput interface {
	pulumi.Input

	ToKafkaQuotaOutput() KafkaQuotaOutput
	ToKafkaQuotaOutputWithContext(ctx context.Context) KafkaQuotaOutput
}

func (*KafkaQuota) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaQuota)(nil)).Elem()
}

func (i *KafkaQuota) ToKafkaQuotaOutput() KafkaQuotaOutput {
	return i.ToKafkaQuotaOutputWithContext(context.Background())
}

func (i *KafkaQuota) ToKafkaQuotaOutputWithContext(ctx context.Context) KafkaQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaQuotaOutput)
}

// KafkaQuotaArrayInput is an input type that accepts KafkaQuotaArray and KafkaQuotaArrayOutput values.
// You can construct a concrete instance of `KafkaQuotaArrayInput` via:
//
//	KafkaQuotaArray{ KafkaQuotaArgs{...} }
type KafkaQuotaArrayInput interface {
	pulumi.Input

	ToKafkaQuotaArrayOutput() KafkaQuotaArrayOutput
	ToKafkaQuotaArrayOutputWithContext(context.Context) KafkaQuotaArrayOutput
}

type KafkaQuotaArray []KafkaQuotaInput

func (KafkaQuotaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaQuota)(nil)).Elem()
}

func (i KafkaQuotaArray) ToKafkaQuotaArrayOutput() KafkaQuotaArrayOutput {
	return i.ToKafkaQuotaArrayOutputWithContext(context.Background())
}

func (i KafkaQuotaArray) ToKafkaQuotaArrayOutputWithContext(ctx context.Context) KafkaQuotaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaQuotaArrayOutput)
}

// KafkaQuotaMapInput is an input type that accepts KafkaQuotaMap and KafkaQuotaMapOutput values.
// You can construct a concrete instance of `KafkaQuotaMapInput` via:
//
//	KafkaQuotaMap{ "key": KafkaQuotaArgs{...} }
type KafkaQuotaMapInput interface {
	pulumi.Input

	ToKafkaQuotaMapOutput() KafkaQuotaMapOutput
	ToKafkaQuotaMapOutputWithContext(context.Context) KafkaQuotaMapOutput
}

type KafkaQuotaMap map[string]KafkaQuotaInput

func (KafkaQuotaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaQuota)(nil)).Elem()
}

func (i KafkaQuotaMap) ToKafkaQuotaMapOutput() KafkaQuotaMapOutput {
	return i.ToKafkaQuotaMapOutputWithContext(context.Background())
}

func (i KafkaQuotaMap) ToKafkaQuotaMapOutputWithContext(ctx context.Context) KafkaQuotaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaQuotaMapOutput)
}

type KafkaQuotaOutput struct{ *pulumi.OutputState }

func (KafkaQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaQuota)(nil)).Elem()
}

func (o KafkaQuotaOutput) ToKafkaQuotaOutput() KafkaQuotaOutput {
	return o
}

func (o KafkaQuotaOutput) ToKafkaQuotaOutputWithContext(ctx context.Context) KafkaQuotaOutput {
	return o
}

// Represents a logical group of clients, assigned a unique name by the client application.
// Quotas can be applied based on user, client-id, or both.
// The most relevant quota is chosen for each connection.
// All connections within a quota group share the same quota.
// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
func (o KafkaQuotaOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaQuota) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
// Exceeding this limit results in client throttling.
func (o KafkaQuotaOutput) ConsumerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaQuota) pulumi.IntPtrOutput { return v.ConsumerByteRate }).(pulumi.IntPtrOutput)
}

// Defines the bandwidth limit in bytes/sec for each group of clients sharing a quota.
// Every distinct client group is allocated a specific quota, as defined by the cluster, on a per-broker basis.
// Exceeding this limit results in client throttling.
func (o KafkaQuotaOutput) ProducerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaQuota) pulumi.IntPtrOutput { return v.ProducerByteRate }).(pulumi.IntPtrOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o KafkaQuotaOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaQuota) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Sets the maximum percentage of CPU time that a client group can use on request handler I/O and network threads per broker within a quota window.
// Exceeding this limit triggers throttling.
// The quota, expressed as a percentage, also indicates the total allowable CPU usage for the client groups sharing the quota.
func (o KafkaQuotaOutput) RequestPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KafkaQuota) pulumi.Float64PtrOutput { return v.RequestPercentage }).(pulumi.Float64PtrOutput)
}

// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o KafkaQuotaOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaQuota) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Represents a logical group of clients, assigned a unique name by the client application.
// Quotas can be applied based on user, client-id, or both.
// The most relevant quota is chosen for each connection.
// All connections within a quota group share the same quota.
// It is possible to set default quotas for each (user, client-id), user or client-id group by specifying 'default'
func (o KafkaQuotaOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaQuota) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

type KafkaQuotaArrayOutput struct{ *pulumi.OutputState }

func (KafkaQuotaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaQuota)(nil)).Elem()
}

func (o KafkaQuotaArrayOutput) ToKafkaQuotaArrayOutput() KafkaQuotaArrayOutput {
	return o
}

func (o KafkaQuotaArrayOutput) ToKafkaQuotaArrayOutputWithContext(ctx context.Context) KafkaQuotaArrayOutput {
	return o
}

func (o KafkaQuotaArrayOutput) Index(i pulumi.IntInput) KafkaQuotaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaQuota {
		return vs[0].([]*KafkaQuota)[vs[1].(int)]
	}).(KafkaQuotaOutput)
}

type KafkaQuotaMapOutput struct{ *pulumi.OutputState }

func (KafkaQuotaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaQuota)(nil)).Elem()
}

func (o KafkaQuotaMapOutput) ToKafkaQuotaMapOutput() KafkaQuotaMapOutput {
	return o
}

func (o KafkaQuotaMapOutput) ToKafkaQuotaMapOutputWithContext(ctx context.Context) KafkaQuotaMapOutput {
	return o
}

func (o KafkaQuotaMapOutput) MapIndex(k pulumi.StringInput) KafkaQuotaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaQuota {
		return vs[0].(map[string]*KafkaQuota)[vs[1].(string)]
	}).(KafkaQuotaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaQuotaInput)(nil)).Elem(), &KafkaQuota{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaQuotaArrayInput)(nil)).Elem(), KafkaQuotaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaQuotaMapInput)(nil)).Elem(), KafkaQuotaMap{})
	pulumi.RegisterOutputType(KafkaQuotaOutput{})
	pulumi.RegisterOutputType(KafkaQuotaArrayOutput{})
	pulumi.RegisterOutputType(KafkaQuotaMapOutput{})
}
