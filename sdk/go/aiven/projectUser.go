// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProjectUser struct {
	s *pulumi.ResourceState
}

// NewProjectUser registers a new resource with the given unique name, arguments, and options.
func NewProjectUser(ctx *pulumi.Context,
	name string, args *ProjectUserArgs, opts ...pulumi.ResourceOpt) (*ProjectUser, error) {
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	if args == nil || args.MemberType == nil {
		return nil, errors.New("missing required argument 'MemberType'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["email"] = nil
		inputs["memberType"] = nil
		inputs["project"] = nil
	} else {
		inputs["email"] = args.Email
		inputs["memberType"] = args.MemberType
		inputs["project"] = args.Project
	}
	inputs["accepted"] = nil
	s, err := ctx.RegisterResource("aiven:index/projectUser:ProjectUser", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectUser{s: s}, nil
}

// GetProjectUser gets an existing ProjectUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectUserState, opts ...pulumi.ResourceOpt) (*ProjectUser, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accepted"] = state.Accepted
		inputs["email"] = state.Email
		inputs["memberType"] = state.MemberType
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("aiven:index/projectUser:ProjectUser", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectUser{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectUser) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectUser) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Whether the user has accepted project membership or not
func (r *ProjectUser) Accepted() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["accepted"])
}

// Email address of the user
func (r *ProjectUser) Email() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["email"])
}

// Project membership type. One of: admin, developer, operator
func (r *ProjectUser) MemberType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["memberType"])
}

// The project the user belongs to
func (r *ProjectUser) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering ProjectUser resources.
type ProjectUserState struct {
	// Whether the user has accepted project membership or not
	Accepted interface{}
	// Email address of the user
	Email interface{}
	// Project membership type. One of: admin, developer, operator
	MemberType interface{}
	// The project the user belongs to
	Project interface{}
}

// The set of arguments for constructing a ProjectUser resource.
type ProjectUserArgs struct {
	// Email address of the user
	Email interface{}
	// Project membership type. One of: admin, developer, operator
	MemberType interface{}
	// The project the user belongs to
	Project interface{}
}
