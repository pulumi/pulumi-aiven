// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Project User Resource
//
// The Project User resource allows the creation and management of Aiven Project Users.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewProjectUser(ctx, "mytestuser", &aiven.ProjectUserArgs{
// 			Email:      pulumi.String("john.doe@example.com"),
// 			MemberType: pulumi.String("admin"),
// 			Project:    pulumi.Any(aiven_project.Myproject.Project),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ProjectUser struct {
	pulumi.CustomResourceState

	// is a computed property tells whether the user has accepted the request to join
	// the project; adding user to a project sends an invitation to the target user and the
	// actual membership is only created once the user accepts the invitation. This property
	// cannot be set, only read.
	Accepted pulumi.BoolOutput `pulumi:"accepted"`
	// identifies the email address of the user.
	Email pulumi.StringOutput `pulumi:"email"`
	// defines the access level the user has to the project.
	MemberType pulumi.StringOutput `pulumi:"memberType"`
	// defines the project the user is a member of.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewProjectUser registers a new resource with the given unique name, arguments, and options.
func NewProjectUser(ctx *pulumi.Context,
	name string, args *ProjectUserArgs, opts ...pulumi.ResourceOption) (*ProjectUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.MemberType == nil {
		return nil, errors.New("invalid value for required argument 'MemberType'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource ProjectUser
	err := ctx.RegisterResource("aiven:index/projectUser:ProjectUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectUser gets an existing ProjectUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectUserState, opts ...pulumi.ResourceOption) (*ProjectUser, error) {
	var resource ProjectUser
	err := ctx.ReadResource("aiven:index/projectUser:ProjectUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectUser resources.
type projectUserState struct {
	// is a computed property tells whether the user has accepted the request to join
	// the project; adding user to a project sends an invitation to the target user and the
	// actual membership is only created once the user accepts the invitation. This property
	// cannot be set, only read.
	Accepted *bool `pulumi:"accepted"`
	// identifies the email address of the user.
	Email *string `pulumi:"email"`
	// defines the access level the user has to the project.
	MemberType *string `pulumi:"memberType"`
	// defines the project the user is a member of.
	Project *string `pulumi:"project"`
}

type ProjectUserState struct {
	// is a computed property tells whether the user has accepted the request to join
	// the project; adding user to a project sends an invitation to the target user and the
	// actual membership is only created once the user accepts the invitation. This property
	// cannot be set, only read.
	Accepted pulumi.BoolPtrInput
	// identifies the email address of the user.
	Email pulumi.StringPtrInput
	// defines the access level the user has to the project.
	MemberType pulumi.StringPtrInput
	// defines the project the user is a member of.
	Project pulumi.StringPtrInput
}

func (ProjectUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserState)(nil)).Elem()
}

type projectUserArgs struct {
	// identifies the email address of the user.
	Email string `pulumi:"email"`
	// defines the access level the user has to the project.
	MemberType string `pulumi:"memberType"`
	// defines the project the user is a member of.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectUser resource.
type ProjectUserArgs struct {
	// identifies the email address of the user.
	Email pulumi.StringInput
	// defines the access level the user has to the project.
	MemberType pulumi.StringInput
	// defines the project the user is a member of.
	Project pulumi.StringInput
}

func (ProjectUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserArgs)(nil)).Elem()
}

type ProjectUserInput interface {
	pulumi.Input

	ToProjectUserOutput() ProjectUserOutput
	ToProjectUserOutputWithContext(ctx context.Context) ProjectUserOutput
}

func (ProjectUser) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectUser)(nil)).Elem()
}

func (i ProjectUser) ToProjectUserOutput() ProjectUserOutput {
	return i.ToProjectUserOutputWithContext(context.Background())
}

func (i ProjectUser) ToProjectUserOutputWithContext(ctx context.Context) ProjectUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserOutput)
}

type ProjectUserOutput struct {
	*pulumi.OutputState
}

func (ProjectUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectUserOutput)(nil)).Elem()
}

func (o ProjectUserOutput) ToProjectUserOutput() ProjectUserOutput {
	return o
}

func (o ProjectUserOutput) ToProjectUserOutputWithContext(ctx context.Context) ProjectUserOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProjectUserOutput{})
}
