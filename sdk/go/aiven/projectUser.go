// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ProjectUser struct {
	pulumi.CustomResourceState

	// Whether the user has accepted project membership or not
	Accepted pulumi.BoolOutput `pulumi:"accepted"`
	// Email address of the user
	Email pulumi.StringOutput `pulumi:"email"`
	// Project membership type. One of: admin, developer, operator
	MemberType pulumi.StringOutput `pulumi:"memberType"`
	// The project the user belongs to
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewProjectUser registers a new resource with the given unique name, arguments, and options.
func NewProjectUser(ctx *pulumi.Context,
	name string, args *ProjectUserArgs, opts ...pulumi.ResourceOption) (*ProjectUser, error) {
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	if args == nil || args.MemberType == nil {
		return nil, errors.New("missing required argument 'MemberType'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil {
		args = &ProjectUserArgs{}
	}
	var resource ProjectUser
	err := ctx.RegisterResource("aiven:index/projectUser:ProjectUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectUser gets an existing ProjectUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectUserState, opts ...pulumi.ResourceOption) (*ProjectUser, error) {
	var resource ProjectUser
	err := ctx.ReadResource("aiven:index/projectUser:ProjectUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectUser resources.
type projectUserState struct {
	// Whether the user has accepted project membership or not
	Accepted *bool `pulumi:"accepted"`
	// Email address of the user
	Email *string `pulumi:"email"`
	// Project membership type. One of: admin, developer, operator
	MemberType *string `pulumi:"memberType"`
	// The project the user belongs to
	Project *string `pulumi:"project"`
}

type ProjectUserState struct {
	// Whether the user has accepted project membership or not
	Accepted pulumi.BoolPtrInput
	// Email address of the user
	Email pulumi.StringPtrInput
	// Project membership type. One of: admin, developer, operator
	MemberType pulumi.StringPtrInput
	// The project the user belongs to
	Project pulumi.StringPtrInput
}

func (ProjectUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserState)(nil)).Elem()
}

type projectUserArgs struct {
	// Email address of the user
	Email string `pulumi:"email"`
	// Project membership type. One of: admin, developer, operator
	MemberType string `pulumi:"memberType"`
	// The project the user belongs to
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectUser resource.
type ProjectUserArgs struct {
	// Email address of the user
	Email pulumi.StringInput
	// Project membership type. One of: admin, developer, operator
	MemberType pulumi.StringInput
	// The project the user belongs to
	Project pulumi.StringInput
}

func (ProjectUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserArgs)(nil)).Elem()
}
