// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Project User resource allows the creation and management of Aiven Project Users.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewProjectUser(ctx, "mytestuser", &aiven.ProjectUserArgs{
//				Project:    pulumi.Any(myproject.Project),
//				Email:      pulumi.String("john.doe@example.com"),
//				MemberType: pulumi.String("admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/projectUser:ProjectUser mytestuser project/email
// ```
type ProjectUser struct {
	pulumi.CustomResourceState

	// Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
	Accepted pulumi.BoolOutput `pulumi:"accepted"`
	// Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
	Email pulumi.StringOutput `pulumi:"email"`
	// Project membership type. The possible values are `admin`, `developer` and `operator`.
	MemberType pulumi.StringOutput `pulumi:"memberType"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewProjectUser registers a new resource with the given unique name, arguments, and options.
func NewProjectUser(ctx *pulumi.Context,
	name string, args *ProjectUserArgs, opts ...pulumi.ResourceOption) (*ProjectUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.MemberType == nil {
		return nil, errors.New("invalid value for required argument 'MemberType'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectUser
	err := ctx.RegisterResource("aiven:index/projectUser:ProjectUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectUser gets an existing ProjectUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectUserState, opts ...pulumi.ResourceOption) (*ProjectUser, error) {
	var resource ProjectUser
	err := ctx.ReadResource("aiven:index/projectUser:ProjectUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectUser resources.
type projectUserState struct {
	// Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
	Accepted *bool `pulumi:"accepted"`
	// Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
	Email *string `pulumi:"email"`
	// Project membership type. The possible values are `admin`, `developer` and `operator`.
	MemberType *string `pulumi:"memberType"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
}

type ProjectUserState struct {
	// Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
	Accepted pulumi.BoolPtrInput
	// Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
	Email pulumi.StringPtrInput
	// Project membership type. The possible values are `admin`, `developer` and `operator`.
	MemberType pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
}

func (ProjectUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserState)(nil)).Elem()
}

type projectUserArgs struct {
	// Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
	Email string `pulumi:"email"`
	// Project membership type. The possible values are `admin`, `developer` and `operator`.
	MemberType string `pulumi:"memberType"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectUser resource.
type ProjectUserArgs struct {
	// Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
	Email pulumi.StringInput
	// Project membership type. The possible values are `admin`, `developer` and `operator`.
	MemberType pulumi.StringInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
}

func (ProjectUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserArgs)(nil)).Elem()
}

type ProjectUserInput interface {
	pulumi.Input

	ToProjectUserOutput() ProjectUserOutput
	ToProjectUserOutputWithContext(ctx context.Context) ProjectUserOutput
}

func (*ProjectUser) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectUser)(nil)).Elem()
}

func (i *ProjectUser) ToProjectUserOutput() ProjectUserOutput {
	return i.ToProjectUserOutputWithContext(context.Background())
}

func (i *ProjectUser) ToProjectUserOutputWithContext(ctx context.Context) ProjectUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserOutput)
}

// ProjectUserArrayInput is an input type that accepts ProjectUserArray and ProjectUserArrayOutput values.
// You can construct a concrete instance of `ProjectUserArrayInput` via:
//
//	ProjectUserArray{ ProjectUserArgs{...} }
type ProjectUserArrayInput interface {
	pulumi.Input

	ToProjectUserArrayOutput() ProjectUserArrayOutput
	ToProjectUserArrayOutputWithContext(context.Context) ProjectUserArrayOutput
}

type ProjectUserArray []ProjectUserInput

func (ProjectUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectUser)(nil)).Elem()
}

func (i ProjectUserArray) ToProjectUserArrayOutput() ProjectUserArrayOutput {
	return i.ToProjectUserArrayOutputWithContext(context.Background())
}

func (i ProjectUserArray) ToProjectUserArrayOutputWithContext(ctx context.Context) ProjectUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserArrayOutput)
}

// ProjectUserMapInput is an input type that accepts ProjectUserMap and ProjectUserMapOutput values.
// You can construct a concrete instance of `ProjectUserMapInput` via:
//
//	ProjectUserMap{ "key": ProjectUserArgs{...} }
type ProjectUserMapInput interface {
	pulumi.Input

	ToProjectUserMapOutput() ProjectUserMapOutput
	ToProjectUserMapOutputWithContext(context.Context) ProjectUserMapOutput
}

type ProjectUserMap map[string]ProjectUserInput

func (ProjectUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectUser)(nil)).Elem()
}

func (i ProjectUserMap) ToProjectUserMapOutput() ProjectUserMapOutput {
	return i.ToProjectUserMapOutputWithContext(context.Background())
}

func (i ProjectUserMap) ToProjectUserMapOutputWithContext(ctx context.Context) ProjectUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserMapOutput)
}

type ProjectUserOutput struct{ *pulumi.OutputState }

func (ProjectUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectUser)(nil)).Elem()
}

func (o ProjectUserOutput) ToProjectUserOutput() ProjectUserOutput {
	return o
}

func (o ProjectUserOutput) ToProjectUserOutputWithContext(ctx context.Context) ProjectUserOutput {
	return o
}

// Whether the user has accepted the request to join the project; adding user to a project sends an invitation to the target user and the actual membership is only created once the user accepts the invitation.
func (o ProjectUserOutput) Accepted() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectUser) pulumi.BoolOutput { return v.Accepted }).(pulumi.BoolOutput)
}

// Email address of the user. Should be lowercase. Changing this property forces recreation of the resource.
func (o ProjectUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUser) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Project membership type. The possible values are `admin`, `developer` and `operator`.
func (o ProjectUserOutput) MemberType() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUser) pulumi.StringOutput { return v.MemberType }).(pulumi.StringOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o ProjectUserOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUser) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ProjectUserArrayOutput struct{ *pulumi.OutputState }

func (ProjectUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectUser)(nil)).Elem()
}

func (o ProjectUserArrayOutput) ToProjectUserArrayOutput() ProjectUserArrayOutput {
	return o
}

func (o ProjectUserArrayOutput) ToProjectUserArrayOutputWithContext(ctx context.Context) ProjectUserArrayOutput {
	return o
}

func (o ProjectUserArrayOutput) Index(i pulumi.IntInput) ProjectUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectUser {
		return vs[0].([]*ProjectUser)[vs[1].(int)]
	}).(ProjectUserOutput)
}

type ProjectUserMapOutput struct{ *pulumi.OutputState }

func (ProjectUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectUser)(nil)).Elem()
}

func (o ProjectUserMapOutput) ToProjectUserMapOutput() ProjectUserMapOutput {
	return o
}

func (o ProjectUserMapOutput) ToProjectUserMapOutputWithContext(ctx context.Context) ProjectUserMapOutput {
	return o
}

func (o ProjectUserMapOutput) MapIndex(k pulumi.StringInput) ProjectUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectUser {
		return vs[0].(map[string]*ProjectUser)[vs[1].(string)]
	}).(ProjectUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUserInput)(nil)).Elem(), &ProjectUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUserArrayInput)(nil)).Elem(), ProjectUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUserMapInput)(nil)).Elem(), ProjectUserMap{})
	pulumi.RegisterOutputType(ProjectUserOutput{})
	pulumi.RegisterOutputType(ProjectUserArrayOutput{})
	pulumi.RegisterOutputType(ProjectUserMapOutput{})
}
