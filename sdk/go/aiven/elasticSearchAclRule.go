// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Elasticsearch ACL Rule Resource
//
// The Elasticsearch ACL Rule resource models a single ACL Rule for an Aiven Elasticsearch service.
type ElasticSearchAclRule struct {
	pulumi.CustomResourceState

	// Elasticsearch index pattern
	Index pulumi.StringOutput `pulumi:"index"`
	// is the Elasticsearch permission, list of supported permissions:
	// `deny`, `admin`, `read`, `readwrite`, `write`.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// and `index` - (Required) define the username and index the ACL rule should apply to.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewElasticSearchAclRule registers a new resource with the given unique name, arguments, and options.
func NewElasticSearchAclRule(ctx *pulumi.Context,
	name string, args *ElasticSearchAclRuleArgs, opts ...pulumi.ResourceOption) (*ElasticSearchAclRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource ElasticSearchAclRule
	err := ctx.RegisterResource("aiven:index/elasticSearchAclRule:ElasticSearchAclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticSearchAclRule gets an existing ElasticSearchAclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticSearchAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticSearchAclRuleState, opts ...pulumi.ResourceOption) (*ElasticSearchAclRule, error) {
	var resource ElasticSearchAclRule
	err := ctx.ReadResource("aiven:index/elasticSearchAclRule:ElasticSearchAclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticSearchAclRule resources.
type elasticSearchAclRuleState struct {
	// Elasticsearch index pattern
	Index *string `pulumi:"index"`
	// is the Elasticsearch permission, list of supported permissions:
	// `deny`, `admin`, `read`, `readwrite`, `write`.
	Permission *string `pulumi:"permission"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	Project *string `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName *string `pulumi:"serviceName"`
	// and `index` - (Required) define the username and index the ACL rule should apply to.
	Username *string `pulumi:"username"`
}

type ElasticSearchAclRuleState struct {
	// Elasticsearch index pattern
	Index pulumi.StringPtrInput
	// is the Elasticsearch permission, list of supported permissions:
	// `deny`, `admin`, `read`, `readwrite`, `write`.
	Permission pulumi.StringPtrInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	Project pulumi.StringPtrInput
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringPtrInput
	// and `index` - (Required) define the username and index the ACL rule should apply to.
	Username pulumi.StringPtrInput
}

func (ElasticSearchAclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclRuleState)(nil)).Elem()
}

type elasticSearchAclRuleArgs struct {
	// Elasticsearch index pattern
	Index string `pulumi:"index"`
	// is the Elasticsearch permission, list of supported permissions:
	// `deny`, `admin`, `read`, `readwrite`, `write`.
	Permission string `pulumi:"permission"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	Project string `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName string `pulumi:"serviceName"`
	// and `index` - (Required) define the username and index the ACL rule should apply to.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ElasticSearchAclRule resource.
type ElasticSearchAclRuleArgs struct {
	// Elasticsearch index pattern
	Index pulumi.StringInput
	// is the Elasticsearch permission, list of supported permissions:
	// `deny`, `admin`, `read`, `readwrite`, `write`.
	Permission pulumi.StringInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	Project pulumi.StringInput
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringInput
	// and `index` - (Required) define the username and index the ACL rule should apply to.
	Username pulumi.StringInput
}

func (ElasticSearchAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclRuleArgs)(nil)).Elem()
}

type ElasticSearchAclRuleInput interface {
	pulumi.Input

	ToElasticSearchAclRuleOutput() ElasticSearchAclRuleOutput
	ToElasticSearchAclRuleOutputWithContext(ctx context.Context) ElasticSearchAclRuleOutput
}

func (*ElasticSearchAclRule) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSearchAclRule)(nil))
}

func (i *ElasticSearchAclRule) ToElasticSearchAclRuleOutput() ElasticSearchAclRuleOutput {
	return i.ToElasticSearchAclRuleOutputWithContext(context.Background())
}

func (i *ElasticSearchAclRule) ToElasticSearchAclRuleOutputWithContext(ctx context.Context) ElasticSearchAclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclRuleOutput)
}

func (i *ElasticSearchAclRule) ToElasticSearchAclRulePtrOutput() ElasticSearchAclRulePtrOutput {
	return i.ToElasticSearchAclRulePtrOutputWithContext(context.Background())
}

func (i *ElasticSearchAclRule) ToElasticSearchAclRulePtrOutputWithContext(ctx context.Context) ElasticSearchAclRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclRulePtrOutput)
}

type ElasticSearchAclRulePtrInput interface {
	pulumi.Input

	ToElasticSearchAclRulePtrOutput() ElasticSearchAclRulePtrOutput
	ToElasticSearchAclRulePtrOutputWithContext(ctx context.Context) ElasticSearchAclRulePtrOutput
}

type elasticSearchAclRulePtrType ElasticSearchAclRuleArgs

func (*elasticSearchAclRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearchAclRule)(nil))
}

func (i *elasticSearchAclRulePtrType) ToElasticSearchAclRulePtrOutput() ElasticSearchAclRulePtrOutput {
	return i.ToElasticSearchAclRulePtrOutputWithContext(context.Background())
}

func (i *elasticSearchAclRulePtrType) ToElasticSearchAclRulePtrOutputWithContext(ctx context.Context) ElasticSearchAclRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclRulePtrOutput)
}

// ElasticSearchAclRuleArrayInput is an input type that accepts ElasticSearchAclRuleArray and ElasticSearchAclRuleArrayOutput values.
// You can construct a concrete instance of `ElasticSearchAclRuleArrayInput` via:
//
//          ElasticSearchAclRuleArray{ ElasticSearchAclRuleArgs{...} }
type ElasticSearchAclRuleArrayInput interface {
	pulumi.Input

	ToElasticSearchAclRuleArrayOutput() ElasticSearchAclRuleArrayOutput
	ToElasticSearchAclRuleArrayOutputWithContext(context.Context) ElasticSearchAclRuleArrayOutput
}

type ElasticSearchAclRuleArray []ElasticSearchAclRuleInput

func (ElasticSearchAclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ElasticSearchAclRule)(nil))
}

func (i ElasticSearchAclRuleArray) ToElasticSearchAclRuleArrayOutput() ElasticSearchAclRuleArrayOutput {
	return i.ToElasticSearchAclRuleArrayOutputWithContext(context.Background())
}

func (i ElasticSearchAclRuleArray) ToElasticSearchAclRuleArrayOutputWithContext(ctx context.Context) ElasticSearchAclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclRuleArrayOutput)
}

// ElasticSearchAclRuleMapInput is an input type that accepts ElasticSearchAclRuleMap and ElasticSearchAclRuleMapOutput values.
// You can construct a concrete instance of `ElasticSearchAclRuleMapInput` via:
//
//          ElasticSearchAclRuleMap{ "key": ElasticSearchAclRuleArgs{...} }
type ElasticSearchAclRuleMapInput interface {
	pulumi.Input

	ToElasticSearchAclRuleMapOutput() ElasticSearchAclRuleMapOutput
	ToElasticSearchAclRuleMapOutputWithContext(context.Context) ElasticSearchAclRuleMapOutput
}

type ElasticSearchAclRuleMap map[string]ElasticSearchAclRuleInput

func (ElasticSearchAclRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ElasticSearchAclRule)(nil))
}

func (i ElasticSearchAclRuleMap) ToElasticSearchAclRuleMapOutput() ElasticSearchAclRuleMapOutput {
	return i.ToElasticSearchAclRuleMapOutputWithContext(context.Background())
}

func (i ElasticSearchAclRuleMap) ToElasticSearchAclRuleMapOutputWithContext(ctx context.Context) ElasticSearchAclRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclRuleMapOutput)
}

type ElasticSearchAclRuleOutput struct {
	*pulumi.OutputState
}

func (ElasticSearchAclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSearchAclRule)(nil))
}

func (o ElasticSearchAclRuleOutput) ToElasticSearchAclRuleOutput() ElasticSearchAclRuleOutput {
	return o
}

func (o ElasticSearchAclRuleOutput) ToElasticSearchAclRuleOutputWithContext(ctx context.Context) ElasticSearchAclRuleOutput {
	return o
}

func (o ElasticSearchAclRuleOutput) ToElasticSearchAclRulePtrOutput() ElasticSearchAclRulePtrOutput {
	return o.ToElasticSearchAclRulePtrOutputWithContext(context.Background())
}

func (o ElasticSearchAclRuleOutput) ToElasticSearchAclRulePtrOutputWithContext(ctx context.Context) ElasticSearchAclRulePtrOutput {
	return o.ApplyT(func(v ElasticSearchAclRule) *ElasticSearchAclRule {
		return &v
	}).(ElasticSearchAclRulePtrOutput)
}

type ElasticSearchAclRulePtrOutput struct {
	*pulumi.OutputState
}

func (ElasticSearchAclRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearchAclRule)(nil))
}

func (o ElasticSearchAclRulePtrOutput) ToElasticSearchAclRulePtrOutput() ElasticSearchAclRulePtrOutput {
	return o
}

func (o ElasticSearchAclRulePtrOutput) ToElasticSearchAclRulePtrOutputWithContext(ctx context.Context) ElasticSearchAclRulePtrOutput {
	return o
}

type ElasticSearchAclRuleArrayOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticSearchAclRule)(nil))
}

func (o ElasticSearchAclRuleArrayOutput) ToElasticSearchAclRuleArrayOutput() ElasticSearchAclRuleArrayOutput {
	return o
}

func (o ElasticSearchAclRuleArrayOutput) ToElasticSearchAclRuleArrayOutputWithContext(ctx context.Context) ElasticSearchAclRuleArrayOutput {
	return o
}

func (o ElasticSearchAclRuleArrayOutput) Index(i pulumi.IntInput) ElasticSearchAclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticSearchAclRule {
		return vs[0].([]ElasticSearchAclRule)[vs[1].(int)]
	}).(ElasticSearchAclRuleOutput)
}

type ElasticSearchAclRuleMapOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ElasticSearchAclRule)(nil))
}

func (o ElasticSearchAclRuleMapOutput) ToElasticSearchAclRuleMapOutput() ElasticSearchAclRuleMapOutput {
	return o
}

func (o ElasticSearchAclRuleMapOutput) ToElasticSearchAclRuleMapOutputWithContext(ctx context.Context) ElasticSearchAclRuleMapOutput {
	return o
}

func (o ElasticSearchAclRuleMapOutput) MapIndex(k pulumi.StringInput) ElasticSearchAclRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ElasticSearchAclRule {
		return vs[0].(map[string]ElasticSearchAclRule)[vs[1].(string)]
	}).(ElasticSearchAclRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(ElasticSearchAclRuleOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclRulePtrOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclRuleArrayOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclRuleMapOutput{})
}
