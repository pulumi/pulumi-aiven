// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Database Resource
//
// The Database resource allows the creation and management of Aiven Databases.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewDatabase(ctx, "mydatabase", &aiven.DatabaseArgs{
// 			DatabaseName: pulumi.String("<DATABASE_NAME>"),
// 			Project:      pulumi.Any(aiven_project.Myproject.Project),
// 			ServiceName:  pulumi.Any(aiven_service.Myservice.Service_name),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Database struct {
	pulumi.CustomResourceState

	// is the actual name of the database.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
	LcCollate pulumi.StringPtrOutput `pulumi:"lcCollate"`
	// default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
	LcCtype pulumi.StringPtrOutput `pulumi:"lcCtype"`
	// and `serviceName` - (Required) define the project and service the database belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the database to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is
	// recommended to enable this for any production databases containing critical data.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource Database
	err := ctx.RegisterResource("aiven:index/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("aiven:index/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// is the actual name of the database.
	DatabaseName *string `pulumi:"databaseName"`
	// default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
	LcCollate *string `pulumi:"lcCollate"`
	// default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
	LcCtype *string `pulumi:"lcCtype"`
	// and `serviceName` - (Required) define the project and service the database belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project *string `pulumi:"project"`
	// Service to link the database to
	ServiceName *string `pulumi:"serviceName"`
	// It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is
	// recommended to enable this for any production databases containing critical data.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type DatabaseState struct {
	// is the actual name of the database.
	DatabaseName pulumi.StringPtrInput
	// default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
	LcCollate pulumi.StringPtrInput
	// default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
	LcCtype pulumi.StringPtrInput
	// and `serviceName` - (Required) define the project and service the database belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringPtrInput
	// Service to link the database to
	ServiceName pulumi.StringPtrInput
	// It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is
	// recommended to enable this for any production databases containing critical data.
	TerminationProtection pulumi.BoolPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// is the actual name of the database.
	DatabaseName string `pulumi:"databaseName"`
	// default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
	LcCollate *string `pulumi:"lcCollate"`
	// default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
	LcCtype *string `pulumi:"lcCtype"`
	// and `serviceName` - (Required) define the project and service the database belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project string `pulumi:"project"`
	// Service to link the database to
	ServiceName string `pulumi:"serviceName"`
	// It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is
	// recommended to enable this for any production databases containing critical data.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// is the actual name of the database.
	DatabaseName pulumi.StringInput
	// default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8.
	LcCollate pulumi.StringPtrInput
	// default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8.
	LcCtype pulumi.StringPtrInput
	// and `serviceName` - (Required) define the project and service the database belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringInput
	// Service to link the database to
	ServiceName pulumi.StringInput
	// It is a Terraform client-side deletion protections, which prevents the database from being deleted by Terraform. It is
	// recommended to enable this for any production databases containing critical data.
	TerminationProtection pulumi.BoolPtrInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((*Database)(nil))
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

func (i *Database) ToDatabasePtrOutput() DatabasePtrOutput {
	return i.ToDatabasePtrOutputWithContext(context.Background())
}

func (i *Database) ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePtrOutput)
}

type DatabasePtrInput interface {
	pulumi.Input

	ToDatabasePtrOutput() DatabasePtrOutput
	ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput
}

type databasePtrType DatabaseArgs

func (*databasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil))
}

func (i *databasePtrType) ToDatabasePtrOutput() DatabasePtrOutput {
	return i.ToDatabasePtrOutputWithContext(context.Background())
}

func (i *databasePtrType) ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePtrOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//          DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Database)(nil))
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//          DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Database)(nil))
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct {
	*pulumi.OutputState
}

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Database)(nil))
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabasePtrOutput() DatabasePtrOutput {
	return o.ToDatabasePtrOutputWithContext(context.Background())
}

func (o DatabaseOutput) ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput {
	return o.ApplyT(func(v Database) *Database {
		return &v
	}).(DatabasePtrOutput)
}

type DatabasePtrOutput struct {
	*pulumi.OutputState
}

func (DatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil))
}

func (o DatabasePtrOutput) ToDatabasePtrOutput() DatabasePtrOutput {
	return o
}

func (o DatabasePtrOutput) ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput {
	return o
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Database)(nil))
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Database {
		return vs[0].([]Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Database)(nil))
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Database {
		return vs[0].(map[string]Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabasePtrOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
