// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Database struct {
	s *pulumi.ResourceState
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOpt) (*Database, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["databaseName"] = nil
		inputs["lcCollate"] = nil
		inputs["lcCtype"] = nil
		inputs["project"] = nil
		inputs["serviceName"] = nil
	} else {
		inputs["databaseName"] = args.DatabaseName
		inputs["lcCollate"] = args.LcCollate
		inputs["lcCtype"] = args.LcCtype
		inputs["project"] = args.Project
		inputs["serviceName"] = args.ServiceName
	}
	s, err := ctx.RegisterResource("aiven:index/database:Database", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Database{s: s}, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatabaseState, opts ...pulumi.ResourceOpt) (*Database, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["databaseName"] = state.DatabaseName
		inputs["lcCollate"] = state.LcCollate
		inputs["lcCtype"] = state.LcCtype
		inputs["project"] = state.Project
		inputs["serviceName"] = state.ServiceName
	}
	s, err := ctx.ReadResource("aiven:index/database:Database", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Database{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Database) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Database) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Service database name
func (r *Database) DatabaseName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["databaseName"])
}

// Default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8
func (r *Database) LcCollate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["lcCollate"])
}

// Default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8
func (r *Database) LcCtype() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["lcCtype"])
}

// Project to link the database to
func (r *Database) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Service to link the database to
func (r *Database) ServiceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceName"])
}

// Input properties used for looking up and filtering Database resources.
type DatabaseState struct {
	// Service database name
	DatabaseName interface{}
	// Default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8
	LcCollate interface{}
	// Default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8
	LcCtype interface{}
	// Project to link the database to
	Project interface{}
	// Service to link the database to
	ServiceName interface{}
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// Service database name
	DatabaseName interface{}
	// Default string sort order (LC_COLLATE) of the database. Default value: en_US.UTF-8
	LcCollate interface{}
	// Default character classification (LC_CTYPE) of the database. Default value: en_US.UTF-8
	LcCtype interface{}
	// Project to link the database to
	Project interface{}
	// Service to link the database to
	ServiceName interface{}
}
