// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v2/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewKafkaTopic(ctx, "mytesttopic", &aiven.KafkaTopicArgs{
// 			CleanupPolicy:         pulumi.String("delete"),
// 			MinimumInSyncReplicas: pulumi.Int(2),
// 			Partitions:            pulumi.Int(5),
// 			Project:               pulumi.Any(aiven_project.Myproject.Project),
// 			Replication:           pulumi.Int(3),
// 			RetentionBytes:        pulumi.Int(-1),
// 			RetentionHours:        pulumi.Int(72),
// 			ServiceName:           pulumi.Any(aiven_service.Myservice.Service_name),
// 			TopicName:             pulumi.String("<TOPIC_NAME>"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type KafkaTopic struct {
	pulumi.CustomResourceState

	// Topic cleanup policy. Allowed values: delete, compact
	CleanupPolicy pulumi.StringPtrOutput `pulumi:"cleanupPolicy"`
	// Minimum required nodes in-sync replicas (ISR) to produce to a partition
	MinimumInSyncReplicas pulumi.IntPtrOutput `pulumi:"minimumInSyncReplicas"`
	// Number of partitions to create in the topic
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// Project to link the kafka topic to
	Project pulumi.StringOutput `pulumi:"project"`
	// Replication factor for the topic
	Replication pulumi.IntOutput `pulumi:"replication"`
	// Retention bytes
	RetentionBytes pulumi.IntPtrOutput `pulumi:"retentionBytes"`
	// Retention period (hours)
	RetentionHours pulumi.IntPtrOutput `pulumi:"retentionHours"`
	// Service to link the kafka topic to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// Topic name
	TopicName pulumi.StringOutput `pulumi:"topicName"`
}

// NewKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopic(ctx *pulumi.Context,
	name string, args *KafkaTopicArgs, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	if args == nil || args.Partitions == nil {
		return nil, errors.New("missing required argument 'Partitions'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Replication == nil {
		return nil, errors.New("missing required argument 'Replication'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.TopicName == nil {
		return nil, errors.New("missing required argument 'TopicName'")
	}
	if args == nil {
		args = &KafkaTopicArgs{}
	}
	var resource KafkaTopic
	err := ctx.RegisterResource("aiven:index/kafkaTopic:KafkaTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTopic gets an existing KafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTopicState, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	var resource KafkaTopic
	err := ctx.ReadResource("aiven:index/kafkaTopic:KafkaTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTopic resources.
type kafkaTopicState struct {
	// Topic cleanup policy. Allowed values: delete, compact
	CleanupPolicy *string `pulumi:"cleanupPolicy"`
	// Minimum required nodes in-sync replicas (ISR) to produce to a partition
	MinimumInSyncReplicas *int `pulumi:"minimumInSyncReplicas"`
	// Number of partitions to create in the topic
	Partitions *int `pulumi:"partitions"`
	// Project to link the kafka topic to
	Project *string `pulumi:"project"`
	// Replication factor for the topic
	Replication *int `pulumi:"replication"`
	// Retention bytes
	RetentionBytes *int `pulumi:"retentionBytes"`
	// Retention period (hours)
	RetentionHours *int `pulumi:"retentionHours"`
	// Service to link the kafka topic to
	ServiceName *string `pulumi:"serviceName"`
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Topic name
	TopicName *string `pulumi:"topicName"`
}

type KafkaTopicState struct {
	// Topic cleanup policy. Allowed values: delete, compact
	CleanupPolicy pulumi.StringPtrInput
	// Minimum required nodes in-sync replicas (ISR) to produce to a partition
	MinimumInSyncReplicas pulumi.IntPtrInput
	// Number of partitions to create in the topic
	Partitions pulumi.IntPtrInput
	// Project to link the kafka topic to
	Project pulumi.StringPtrInput
	// Replication factor for the topic
	Replication pulumi.IntPtrInput
	// Retention bytes
	RetentionBytes pulumi.IntPtrInput
	// Retention period (hours)
	RetentionHours pulumi.IntPtrInput
	// Service to link the kafka topic to
	ServiceName pulumi.StringPtrInput
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection pulumi.BoolPtrInput
	// Topic name
	TopicName pulumi.StringPtrInput
}

func (KafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicState)(nil)).Elem()
}

type kafkaTopicArgs struct {
	// Topic cleanup policy. Allowed values: delete, compact
	CleanupPolicy *string `pulumi:"cleanupPolicy"`
	// Minimum required nodes in-sync replicas (ISR) to produce to a partition
	MinimumInSyncReplicas *int `pulumi:"minimumInSyncReplicas"`
	// Number of partitions to create in the topic
	Partitions int `pulumi:"partitions"`
	// Project to link the kafka topic to
	Project string `pulumi:"project"`
	// Replication factor for the topic
	Replication int `pulumi:"replication"`
	// Retention bytes
	RetentionBytes *int `pulumi:"retentionBytes"`
	// Retention period (hours)
	RetentionHours *int `pulumi:"retentionHours"`
	// Service to link the kafka topic to
	ServiceName string `pulumi:"serviceName"`
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Topic name
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a KafkaTopic resource.
type KafkaTopicArgs struct {
	// Topic cleanup policy. Allowed values: delete, compact
	CleanupPolicy pulumi.StringPtrInput
	// Minimum required nodes in-sync replicas (ISR) to produce to a partition
	MinimumInSyncReplicas pulumi.IntPtrInput
	// Number of partitions to create in the topic
	Partitions pulumi.IntInput
	// Project to link the kafka topic to
	Project pulumi.StringInput
	// Replication factor for the topic
	Replication pulumi.IntInput
	// Retention bytes
	RetentionBytes pulumi.IntPtrInput
	// Retention period (hours)
	RetentionHours pulumi.IntPtrInput
	// Service to link the kafka topic to
	ServiceName pulumi.StringInput
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection pulumi.BoolPtrInput
	// Topic name
	TopicName pulumi.StringInput
}

func (KafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicArgs)(nil)).Elem()
}
