// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type KafkaTopic struct {
	s *pulumi.ResourceState
}

// NewKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopic(ctx *pulumi.Context,
	name string, args *KafkaTopicArgs, opts ...pulumi.ResourceOpt) (*KafkaTopic, error) {
	if args == nil || args.Partitions == nil {
		return nil, errors.New("missing required argument 'Partitions'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Replication == nil {
		return nil, errors.New("missing required argument 'Replication'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.TopicName == nil {
		return nil, errors.New("missing required argument 'TopicName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cleanupPolicy"] = nil
		inputs["minimumInSyncReplicas"] = nil
		inputs["partitions"] = nil
		inputs["project"] = nil
		inputs["replication"] = nil
		inputs["retentionBytes"] = nil
		inputs["retentionHours"] = nil
		inputs["serviceName"] = nil
		inputs["topicName"] = nil
	} else {
		inputs["cleanupPolicy"] = args.CleanupPolicy
		inputs["minimumInSyncReplicas"] = args.MinimumInSyncReplicas
		inputs["partitions"] = args.Partitions
		inputs["project"] = args.Project
		inputs["replication"] = args.Replication
		inputs["retentionBytes"] = args.RetentionBytes
		inputs["retentionHours"] = args.RetentionHours
		inputs["serviceName"] = args.ServiceName
		inputs["topicName"] = args.TopicName
	}
	s, err := ctx.RegisterResource("aiven:index/kafkaTopic:KafkaTopic", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KafkaTopic{s: s}, nil
}

// GetKafkaTopic gets an existing KafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KafkaTopicState, opts ...pulumi.ResourceOpt) (*KafkaTopic, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cleanupPolicy"] = state.CleanupPolicy
		inputs["minimumInSyncReplicas"] = state.MinimumInSyncReplicas
		inputs["partitions"] = state.Partitions
		inputs["project"] = state.Project
		inputs["replication"] = state.Replication
		inputs["retentionBytes"] = state.RetentionBytes
		inputs["retentionHours"] = state.RetentionHours
		inputs["serviceName"] = state.ServiceName
		inputs["topicName"] = state.TopicName
	}
	s, err := ctx.ReadResource("aiven:index/kafkaTopic:KafkaTopic", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KafkaTopic{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *KafkaTopic) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *KafkaTopic) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Topic cleanup policy. Allowed values: delete, compact
func (r *KafkaTopic) CleanupPolicy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cleanupPolicy"])
}

// Minimum required nodes in-sync replicas (ISR) to produce to a partition
func (r *KafkaTopic) MinimumInSyncReplicas() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minimumInSyncReplicas"])
}

// Number of partitions to create in the topic
func (r *KafkaTopic) Partitions() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["partitions"])
}

// Project to link the kafka topic to
func (r *KafkaTopic) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Replication factor for the topic
func (r *KafkaTopic) Replication() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["replication"])
}

// Retention bytes
func (r *KafkaTopic) RetentionBytes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["retentionBytes"])
}

// Retention period (hours)
func (r *KafkaTopic) RetentionHours() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["retentionHours"])
}

// Service to link the kafka topic to
func (r *KafkaTopic) ServiceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceName"])
}

// Topic name
func (r *KafkaTopic) TopicName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["topicName"])
}

// Input properties used for looking up and filtering KafkaTopic resources.
type KafkaTopicState struct {
	// Topic cleanup policy. Allowed values: delete, compact
	CleanupPolicy interface{}
	// Minimum required nodes in-sync replicas (ISR) to produce to a partition
	MinimumInSyncReplicas interface{}
	// Number of partitions to create in the topic
	Partitions interface{}
	// Project to link the kafka topic to
	Project interface{}
	// Replication factor for the topic
	Replication interface{}
	// Retention bytes
	RetentionBytes interface{}
	// Retention period (hours)
	RetentionHours interface{}
	// Service to link the kafka topic to
	ServiceName interface{}
	// Topic name
	TopicName interface{}
}

// The set of arguments for constructing a KafkaTopic resource.
type KafkaTopicArgs struct {
	// Topic cleanup policy. Allowed values: delete, compact
	CleanupPolicy interface{}
	// Minimum required nodes in-sync replicas (ISR) to produce to a partition
	MinimumInSyncReplicas interface{}
	// Number of partitions to create in the topic
	Partitions interface{}
	// Project to link the kafka topic to
	Project interface{}
	// Replication factor for the topic
	Replication interface{}
	// Retention bytes
	RetentionBytes interface{}
	// Retention period (hours)
	RetentionHours interface{}
	// Service to link the kafka topic to
	ServiceName interface{}
	// Topic name
	TopicName interface{}
}
