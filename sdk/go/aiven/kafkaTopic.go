// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Kafka Topic Resource
//
// The Kafka Topic resource allows the creation and management of Aiven Kafka Topics.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewKafkaTopic(ctx, "mytesttopic", &aiven.KafkaTopicArgs{
// 			Config: &aiven.KafkaTopicConfigArgs{
// 				CleanupPolicy:               pulumi.String("compact,delete"),
// 				FlushMs:                     pulumi.String("10"),
// 				UncleanLeaderElectionEnable: pulumi.String("true"),
// 			},
// 			Partitions:            pulumi.Int(5),
// 			Project:               pulumi.Any(aiven_project.Myproject.Project),
// 			Replication:           pulumi.Int(3),
// 			ServiceName:           pulumi.Any(aiven_service.Myservice.Service_name),
// 			TerminationProtection: pulumi.Bool(true),
// 			TopicName:             pulumi.String("<TOPIC_NAME>"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type KafkaTopic struct {
	pulumi.CustomResourceState

	// cleanup.policy value, can be `create`, `delete` or `compact,delete`
	//
	// Deprecated: use config.cleanup_policy instead
	CleanupPolicy pulumi.StringPtrOutput `pulumi:"cleanupPolicy"`
	// Kafka topic configuration
	Config KafkaTopicConfigPtrOutput `pulumi:"config"`
	// Minimum required nodes in-sync replicas
	// (ISR) to produce to a partition.
	//
	// Deprecated: use config.min_insync_replicas instead
	MinimumInSyncReplicas pulumi.IntPtrOutput `pulumi:"minimumInSyncReplicas"`
	// Number of partitions to create in the topic.
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// and `serviceName` - (Required) define the project and service the topic belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project pulumi.StringOutput `pulumi:"project"`
	// Replication factor for the topic.
	Replication pulumi.IntOutput `pulumi:"replication"`
	// retention.bytes value
	//
	// Deprecated: use config.retention_bytes instead
	RetentionBytes pulumi.IntPtrOutput `pulumi:"retentionBytes"`
	// Retention period in hours, if -1 it is infinite.
	//
	// Deprecated: use config.retention_ms instead
	RetentionHours pulumi.IntPtrOutput `pulumi:"retentionHours"`
	// Service to link the kafka topic to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// is the actual name of the topic account. This propery cannot be changed
	// once the service is created. Doing so will result in the topic being deleted and new one
	// created instead.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
}

// NewKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopic(ctx *pulumi.Context,
	name string, args *KafkaTopicArgs, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Partitions == nil {
		return nil, errors.New("invalid value for required argument 'Partitions'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Replication == nil {
		return nil, errors.New("invalid value for required argument 'Replication'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	var resource KafkaTopic
	err := ctx.RegisterResource("aiven:index/kafkaTopic:KafkaTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTopic gets an existing KafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTopicState, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	var resource KafkaTopic
	err := ctx.ReadResource("aiven:index/kafkaTopic:KafkaTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTopic resources.
type kafkaTopicState struct {
	// cleanup.policy value, can be `create`, `delete` or `compact,delete`
	//
	// Deprecated: use config.cleanup_policy instead
	CleanupPolicy *string `pulumi:"cleanupPolicy"`
	// Kafka topic configuration
	Config *KafkaTopicConfig `pulumi:"config"`
	// Minimum required nodes in-sync replicas
	// (ISR) to produce to a partition.
	//
	// Deprecated: use config.min_insync_replicas instead
	MinimumInSyncReplicas *int `pulumi:"minimumInSyncReplicas"`
	// Number of partitions to create in the topic.
	Partitions *int `pulumi:"partitions"`
	// and `serviceName` - (Required) define the project and service the topic belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project *string `pulumi:"project"`
	// Replication factor for the topic.
	Replication *int `pulumi:"replication"`
	// retention.bytes value
	//
	// Deprecated: use config.retention_bytes instead
	RetentionBytes *int `pulumi:"retentionBytes"`
	// Retention period in hours, if -1 it is infinite.
	//
	// Deprecated: use config.retention_ms instead
	RetentionHours *int `pulumi:"retentionHours"`
	// Service to link the kafka topic to
	ServiceName *string `pulumi:"serviceName"`
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// is the actual name of the topic account. This propery cannot be changed
	// once the service is created. Doing so will result in the topic being deleted and new one
	// created instead.
	TopicName *string `pulumi:"topicName"`
}

type KafkaTopicState struct {
	// cleanup.policy value, can be `create`, `delete` or `compact,delete`
	//
	// Deprecated: use config.cleanup_policy instead
	CleanupPolicy pulumi.StringPtrInput
	// Kafka topic configuration
	Config KafkaTopicConfigPtrInput
	// Minimum required nodes in-sync replicas
	// (ISR) to produce to a partition.
	//
	// Deprecated: use config.min_insync_replicas instead
	MinimumInSyncReplicas pulumi.IntPtrInput
	// Number of partitions to create in the topic.
	Partitions pulumi.IntPtrInput
	// and `serviceName` - (Required) define the project and service the topic belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project pulumi.StringPtrInput
	// Replication factor for the topic.
	Replication pulumi.IntPtrInput
	// retention.bytes value
	//
	// Deprecated: use config.retention_bytes instead
	RetentionBytes pulumi.IntPtrInput
	// Retention period in hours, if -1 it is infinite.
	//
	// Deprecated: use config.retention_ms instead
	RetentionHours pulumi.IntPtrInput
	// Service to link the kafka topic to
	ServiceName pulumi.StringPtrInput
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection pulumi.BoolPtrInput
	// is the actual name of the topic account. This propery cannot be changed
	// once the service is created. Doing so will result in the topic being deleted and new one
	// created instead.
	TopicName pulumi.StringPtrInput
}

func (KafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicState)(nil)).Elem()
}

type kafkaTopicArgs struct {
	// cleanup.policy value, can be `create`, `delete` or `compact,delete`
	//
	// Deprecated: use config.cleanup_policy instead
	CleanupPolicy *string `pulumi:"cleanupPolicy"`
	// Kafka topic configuration
	Config *KafkaTopicConfig `pulumi:"config"`
	// Minimum required nodes in-sync replicas
	// (ISR) to produce to a partition.
	//
	// Deprecated: use config.min_insync_replicas instead
	MinimumInSyncReplicas *int `pulumi:"minimumInSyncReplicas"`
	// Number of partitions to create in the topic.
	Partitions int `pulumi:"partitions"`
	// and `serviceName` - (Required) define the project and service the topic belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project string `pulumi:"project"`
	// Replication factor for the topic.
	Replication int `pulumi:"replication"`
	// retention.bytes value
	//
	// Deprecated: use config.retention_bytes instead
	RetentionBytes *int `pulumi:"retentionBytes"`
	// Retention period in hours, if -1 it is infinite.
	//
	// Deprecated: use config.retention_ms instead
	RetentionHours *int `pulumi:"retentionHours"`
	// Service to link the kafka topic to
	ServiceName string `pulumi:"serviceName"`
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// is the actual name of the topic account. This propery cannot be changed
	// once the service is created. Doing so will result in the topic being deleted and new one
	// created instead.
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a KafkaTopic resource.
type KafkaTopicArgs struct {
	// cleanup.policy value, can be `create`, `delete` or `compact,delete`
	//
	// Deprecated: use config.cleanup_policy instead
	CleanupPolicy pulumi.StringPtrInput
	// Kafka topic configuration
	Config KafkaTopicConfigPtrInput
	// Minimum required nodes in-sync replicas
	// (ISR) to produce to a partition.
	//
	// Deprecated: use config.min_insync_replicas instead
	MinimumInSyncReplicas pulumi.IntPtrInput
	// Number of partitions to create in the topic.
	Partitions pulumi.IntInput
	// and `serviceName` - (Required) define the project and service the topic belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project pulumi.StringInput
	// Replication factor for the topic.
	Replication pulumi.IntInput
	// retention.bytes value
	//
	// Deprecated: use config.retention_bytes instead
	RetentionBytes pulumi.IntPtrInput
	// Retention period in hours, if -1 it is infinite.
	//
	// Deprecated: use config.retention_ms instead
	RetentionHours pulumi.IntPtrInput
	// Service to link the kafka topic to
	ServiceName pulumi.StringInput
	// It is a Terraform client-side deletion protection, which prevents a Kafka topic from being deleted. It is recommended to
	// enable this for any production Kafka topic containing critical data.
	TerminationProtection pulumi.BoolPtrInput
	// is the actual name of the topic account. This propery cannot be changed
	// once the service is created. Doing so will result in the topic being deleted and new one
	// created instead.
	TopicName pulumi.StringInput
}

func (KafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicArgs)(nil)).Elem()
}

type KafkaTopicInput interface {
	pulumi.Input

	ToKafkaTopicOutput() KafkaTopicOutput
	ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput
}

func (KafkaTopic) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopic) ToKafkaTopicOutput() KafkaTopicOutput {
	return i.ToKafkaTopicOutputWithContext(context.Background())
}

func (i KafkaTopic) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicOutput)
}

type KafkaTopicOutput struct {
	*pulumi.OutputState
}

func (KafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicOutput)(nil)).Elem()
}

func (o KafkaTopicOutput) ToKafkaTopicOutput() KafkaTopicOutput {
	return o
}

func (o KafkaTopicOutput) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KafkaTopicOutput{})
}
