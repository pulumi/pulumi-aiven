// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages an Aiven for Apache CassandraÂ® service user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewCassandraUser(ctx, "example_service_user", &aiven.CassandraUserArgs{
//				ServiceName: pulumi.Any(exampleCassandra.ServiceName),
//				Project:     pulumi.Any(exampleProject.Project),
//				Username:    pulumi.String("example-cassandra-user"),
//				Password:    pulumi.Any(serviceUserPw),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/cassandraUser:CassandraUser example_service_user PROJECT/SERVICE_NAME/USERNAME
// ```
type CassandraUser struct {
	pulumi.CustomResourceState

	// Access certificate for the user.
	AccessCert pulumi.StringOutput `pulumi:"accessCert"`
	// Access certificate key for the user.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The Cassandra service user's password.
	Password pulumi.StringOutput `pulumi:"password"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// User account type, such as primary or regular account.
	Type pulumi.StringOutput `pulumi:"type"`
	// Name of the Cassandra service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewCassandraUser registers a new resource with the given unique name, arguments, and options.
func NewCassandraUser(ctx *pulumi.Context,
	name string, args *CassandraUserArgs, opts ...pulumi.ResourceOption) (*CassandraUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessCert",
		"accessKey",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CassandraUser
	err := ctx.RegisterResource("aiven:index/cassandraUser:CassandraUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCassandraUser gets an existing CassandraUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCassandraUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CassandraUserState, opts ...pulumi.ResourceOption) (*CassandraUser, error) {
	var resource CassandraUser
	err := ctx.ReadResource("aiven:index/cassandraUser:CassandraUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CassandraUser resources.
type cassandraUserState struct {
	// Access certificate for the user.
	AccessCert *string `pulumi:"accessCert"`
	// Access certificate key for the user.
	AccessKey *string `pulumi:"accessKey"`
	// The Cassandra service user's password.
	Password *string `pulumi:"password"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// User account type, such as primary or regular account.
	Type *string `pulumi:"type"`
	// Name of the Cassandra service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username *string `pulumi:"username"`
}

type CassandraUserState struct {
	// Access certificate for the user.
	AccessCert pulumi.StringPtrInput
	// Access certificate key for the user.
	AccessKey pulumi.StringPtrInput
	// The Cassandra service user's password.
	Password pulumi.StringPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// User account type, such as primary or regular account.
	Type pulumi.StringPtrInput
	// Name of the Cassandra service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username pulumi.StringPtrInput
}

func (CassandraUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraUserState)(nil)).Elem()
}

type cassandraUserArgs struct {
	// The Cassandra service user's password.
	Password *string `pulumi:"password"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// Name of the Cassandra service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a CassandraUser resource.
type CassandraUserArgs struct {
	// The Cassandra service user's password.
	Password pulumi.StringPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringInput
	// Name of the Cassandra service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username pulumi.StringInput
}

func (CassandraUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraUserArgs)(nil)).Elem()
}

type CassandraUserInput interface {
	pulumi.Input

	ToCassandraUserOutput() CassandraUserOutput
	ToCassandraUserOutputWithContext(ctx context.Context) CassandraUserOutput
}

func (*CassandraUser) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraUser)(nil)).Elem()
}

func (i *CassandraUser) ToCassandraUserOutput() CassandraUserOutput {
	return i.ToCassandraUserOutputWithContext(context.Background())
}

func (i *CassandraUser) ToCassandraUserOutputWithContext(ctx context.Context) CassandraUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraUserOutput)
}

// CassandraUserArrayInput is an input type that accepts CassandraUserArray and CassandraUserArrayOutput values.
// You can construct a concrete instance of `CassandraUserArrayInput` via:
//
//	CassandraUserArray{ CassandraUserArgs{...} }
type CassandraUserArrayInput interface {
	pulumi.Input

	ToCassandraUserArrayOutput() CassandraUserArrayOutput
	ToCassandraUserArrayOutputWithContext(context.Context) CassandraUserArrayOutput
}

type CassandraUserArray []CassandraUserInput

func (CassandraUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CassandraUser)(nil)).Elem()
}

func (i CassandraUserArray) ToCassandraUserArrayOutput() CassandraUserArrayOutput {
	return i.ToCassandraUserArrayOutputWithContext(context.Background())
}

func (i CassandraUserArray) ToCassandraUserArrayOutputWithContext(ctx context.Context) CassandraUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraUserArrayOutput)
}

// CassandraUserMapInput is an input type that accepts CassandraUserMap and CassandraUserMapOutput values.
// You can construct a concrete instance of `CassandraUserMapInput` via:
//
//	CassandraUserMap{ "key": CassandraUserArgs{...} }
type CassandraUserMapInput interface {
	pulumi.Input

	ToCassandraUserMapOutput() CassandraUserMapOutput
	ToCassandraUserMapOutputWithContext(context.Context) CassandraUserMapOutput
}

type CassandraUserMap map[string]CassandraUserInput

func (CassandraUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CassandraUser)(nil)).Elem()
}

func (i CassandraUserMap) ToCassandraUserMapOutput() CassandraUserMapOutput {
	return i.ToCassandraUserMapOutputWithContext(context.Background())
}

func (i CassandraUserMap) ToCassandraUserMapOutputWithContext(ctx context.Context) CassandraUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraUserMapOutput)
}

type CassandraUserOutput struct{ *pulumi.OutputState }

func (CassandraUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraUser)(nil)).Elem()
}

func (o CassandraUserOutput) ToCassandraUserOutput() CassandraUserOutput {
	return o
}

func (o CassandraUserOutput) ToCassandraUserOutputWithContext(ctx context.Context) CassandraUserOutput {
	return o
}

// Access certificate for the user.
func (o CassandraUserOutput) AccessCert() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraUser) pulumi.StringOutput { return v.AccessCert }).(pulumi.StringOutput)
}

// Access certificate key for the user.
func (o CassandraUserOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraUser) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The Cassandra service user's password.
func (o CassandraUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o CassandraUserOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraUser) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o CassandraUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// User account type, such as primary or regular account.
func (o CassandraUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Name of the Cassandra service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o CassandraUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type CassandraUserArrayOutput struct{ *pulumi.OutputState }

func (CassandraUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CassandraUser)(nil)).Elem()
}

func (o CassandraUserArrayOutput) ToCassandraUserArrayOutput() CassandraUserArrayOutput {
	return o
}

func (o CassandraUserArrayOutput) ToCassandraUserArrayOutputWithContext(ctx context.Context) CassandraUserArrayOutput {
	return o
}

func (o CassandraUserArrayOutput) Index(i pulumi.IntInput) CassandraUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CassandraUser {
		return vs[0].([]*CassandraUser)[vs[1].(int)]
	}).(CassandraUserOutput)
}

type CassandraUserMapOutput struct{ *pulumi.OutputState }

func (CassandraUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CassandraUser)(nil)).Elem()
}

func (o CassandraUserMapOutput) ToCassandraUserMapOutput() CassandraUserMapOutput {
	return o
}

func (o CassandraUserMapOutput) ToCassandraUserMapOutputWithContext(ctx context.Context) CassandraUserMapOutput {
	return o
}

func (o CassandraUserMapOutput) MapIndex(k pulumi.StringInput) CassandraUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CassandraUser {
		return vs[0].(map[string]*CassandraUser)[vs[1].(string)]
	}).(CassandraUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraUserInput)(nil)).Elem(), &CassandraUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraUserArrayInput)(nil)).Elem(), CassandraUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraUserMapInput)(nil)).Elem(), CassandraUserMap{})
	pulumi.RegisterOutputType(CassandraUserOutput{})
	pulumi.RegisterOutputType(CassandraUserArrayOutput{})
	pulumi.RegisterOutputType(CassandraUserMapOutput{})
}
