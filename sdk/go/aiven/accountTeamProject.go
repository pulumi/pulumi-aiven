// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The account team project is intended to link and existing project to the existing account team. It is important to note 
// that the project should have an `accountId` property set and equal to account team you are trying to link this project.
//
// > This content is derived from https://github.com/aiven/terraform-provider-aiven/blob/master/website/docs/r/account_team_project.html.markdown.
type AccountTeamProject struct {
	s *pulumi.ResourceState
}

// NewAccountTeamProject registers a new resource with the given unique name, arguments, and options.
func NewAccountTeamProject(ctx *pulumi.Context,
	name string, args *AccountTeamProjectArgs, opts ...pulumi.ResourceOpt) (*AccountTeamProject, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.TeamId == nil {
		return nil, errors.New("missing required argument 'TeamId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountId"] = nil
		inputs["projectName"] = nil
		inputs["teamId"] = nil
		inputs["teamType"] = nil
	} else {
		inputs["accountId"] = args.AccountId
		inputs["projectName"] = args.ProjectName
		inputs["teamId"] = args.TeamId
		inputs["teamType"] = args.TeamType
	}
	s, err := ctx.RegisterResource("aiven:index/accountTeamProject:AccountTeamProject", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountTeamProject{s: s}, nil
}

// GetAccountTeamProject gets an existing AccountTeamProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountTeamProject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccountTeamProjectState, opts ...pulumi.ResourceOpt) (*AccountTeamProject, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountId"] = state.AccountId
		inputs["projectName"] = state.ProjectName
		inputs["teamId"] = state.TeamId
		inputs["teamType"] = state.TeamType
	}
	s, err := ctx.ReadResource("aiven:index/accountTeamProject:AccountTeamProject", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountTeamProject{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccountTeamProject) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccountTeamProject) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Account id
func (r *AccountTeamProject) AccountId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accountId"])
}

// Account team project name
func (r *AccountTeamProject) ProjectName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectName"])
}

// Account team id
func (r *AccountTeamProject) TeamId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["teamId"])
}

// Account team project type, can one of the following values: admin, developer, operator and read_only
func (r *AccountTeamProject) TeamType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["teamType"])
}

// Input properties used for looking up and filtering AccountTeamProject resources.
type AccountTeamProjectState struct {
	// Account id
	AccountId interface{}
	// Account team project name
	ProjectName interface{}
	// Account team id
	TeamId interface{}
	// Account team project type, can one of the following values: admin, developer, operator and read_only
	TeamType interface{}
}

// The set of arguments for constructing a AccountTeamProject resource.
type AccountTeamProjectArgs struct {
	// Account id
	AccountId interface{}
	// Account team project name
	ProjectName interface{}
	// Account team id
	TeamId interface{}
	// Account team project type, can one of the following values: admin, developer, operator and read_only
	TeamType interface{}
}
