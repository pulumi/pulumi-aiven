// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Account Team Project Resource
//
// The Account Team Project resource allows the creation and management of an Account Team Project.
//
// It is intended to link an existing project to the existing account team.
// It is important to note that the project should have an `accountId` property set equal to the
// account team you are trying to link to this project.
type AccountTeamProject struct {
	pulumi.CustomResourceState

	// is a unique account id.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// is a project name of already existing project.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// is an account team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// is an account team project type, can one of the following values: `admin`,
	// `developer`, `operator` and `readOnly`.
	TeamType pulumi.StringPtrOutput `pulumi:"teamType"`
}

// NewAccountTeamProject registers a new resource with the given unique name, arguments, and options.
func NewAccountTeamProject(ctx *pulumi.Context,
	name string, args *AccountTeamProjectArgs, opts ...pulumi.ResourceOption) (*AccountTeamProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	var resource AccountTeamProject
	err := ctx.RegisterResource("aiven:index/accountTeamProject:AccountTeamProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountTeamProject gets an existing AccountTeamProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountTeamProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountTeamProjectState, opts ...pulumi.ResourceOption) (*AccountTeamProject, error) {
	var resource AccountTeamProject
	err := ctx.ReadResource("aiven:index/accountTeamProject:AccountTeamProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountTeamProject resources.
type accountTeamProjectState struct {
	// is a unique account id.
	AccountId *string `pulumi:"accountId"`
	// is a project name of already existing project.
	ProjectName *string `pulumi:"projectName"`
	// is an account team id.
	TeamId *string `pulumi:"teamId"`
	// is an account team project type, can one of the following values: `admin`,
	// `developer`, `operator` and `readOnly`.
	TeamType *string `pulumi:"teamType"`
}

type AccountTeamProjectState struct {
	// is a unique account id.
	AccountId pulumi.StringPtrInput
	// is a project name of already existing project.
	ProjectName pulumi.StringPtrInput
	// is an account team id.
	TeamId pulumi.StringPtrInput
	// is an account team project type, can one of the following values: `admin`,
	// `developer`, `operator` and `readOnly`.
	TeamType pulumi.StringPtrInput
}

func (AccountTeamProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTeamProjectState)(nil)).Elem()
}

type accountTeamProjectArgs struct {
	// is a unique account id.
	AccountId string `pulumi:"accountId"`
	// is a project name of already existing project.
	ProjectName *string `pulumi:"projectName"`
	// is an account team id.
	TeamId string `pulumi:"teamId"`
	// is an account team project type, can one of the following values: `admin`,
	// `developer`, `operator` and `readOnly`.
	TeamType *string `pulumi:"teamType"`
}

// The set of arguments for constructing a AccountTeamProject resource.
type AccountTeamProjectArgs struct {
	// is a unique account id.
	AccountId pulumi.StringInput
	// is a project name of already existing project.
	ProjectName pulumi.StringPtrInput
	// is an account team id.
	TeamId pulumi.StringInput
	// is an account team project type, can one of the following values: `admin`,
	// `developer`, `operator` and `readOnly`.
	TeamType pulumi.StringPtrInput
}

func (AccountTeamProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTeamProjectArgs)(nil)).Elem()
}

type AccountTeamProjectInput interface {
	pulumi.Input

	ToAccountTeamProjectOutput() AccountTeamProjectOutput
	ToAccountTeamProjectOutputWithContext(ctx context.Context) AccountTeamProjectOutput
}

func (*AccountTeamProject) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountTeamProject)(nil))
}

func (i *AccountTeamProject) ToAccountTeamProjectOutput() AccountTeamProjectOutput {
	return i.ToAccountTeamProjectOutputWithContext(context.Background())
}

func (i *AccountTeamProject) ToAccountTeamProjectOutputWithContext(ctx context.Context) AccountTeamProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamProjectOutput)
}

func (i *AccountTeamProject) ToAccountTeamProjectPtrOutput() AccountTeamProjectPtrOutput {
	return i.ToAccountTeamProjectPtrOutputWithContext(context.Background())
}

func (i *AccountTeamProject) ToAccountTeamProjectPtrOutputWithContext(ctx context.Context) AccountTeamProjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamProjectPtrOutput)
}

type AccountTeamProjectPtrInput interface {
	pulumi.Input

	ToAccountTeamProjectPtrOutput() AccountTeamProjectPtrOutput
	ToAccountTeamProjectPtrOutputWithContext(ctx context.Context) AccountTeamProjectPtrOutput
}

type accountTeamProjectPtrType AccountTeamProjectArgs

func (*accountTeamProjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountTeamProject)(nil))
}

func (i *accountTeamProjectPtrType) ToAccountTeamProjectPtrOutput() AccountTeamProjectPtrOutput {
	return i.ToAccountTeamProjectPtrOutputWithContext(context.Background())
}

func (i *accountTeamProjectPtrType) ToAccountTeamProjectPtrOutputWithContext(ctx context.Context) AccountTeamProjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamProjectPtrOutput)
}

// AccountTeamProjectArrayInput is an input type that accepts AccountTeamProjectArray and AccountTeamProjectArrayOutput values.
// You can construct a concrete instance of `AccountTeamProjectArrayInput` via:
//
//          AccountTeamProjectArray{ AccountTeamProjectArgs{...} }
type AccountTeamProjectArrayInput interface {
	pulumi.Input

	ToAccountTeamProjectArrayOutput() AccountTeamProjectArrayOutput
	ToAccountTeamProjectArrayOutputWithContext(context.Context) AccountTeamProjectArrayOutput
}

type AccountTeamProjectArray []AccountTeamProjectInput

func (AccountTeamProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountTeamProject)(nil)).Elem()
}

func (i AccountTeamProjectArray) ToAccountTeamProjectArrayOutput() AccountTeamProjectArrayOutput {
	return i.ToAccountTeamProjectArrayOutputWithContext(context.Background())
}

func (i AccountTeamProjectArray) ToAccountTeamProjectArrayOutputWithContext(ctx context.Context) AccountTeamProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamProjectArrayOutput)
}

// AccountTeamProjectMapInput is an input type that accepts AccountTeamProjectMap and AccountTeamProjectMapOutput values.
// You can construct a concrete instance of `AccountTeamProjectMapInput` via:
//
//          AccountTeamProjectMap{ "key": AccountTeamProjectArgs{...} }
type AccountTeamProjectMapInput interface {
	pulumi.Input

	ToAccountTeamProjectMapOutput() AccountTeamProjectMapOutput
	ToAccountTeamProjectMapOutputWithContext(context.Context) AccountTeamProjectMapOutput
}

type AccountTeamProjectMap map[string]AccountTeamProjectInput

func (AccountTeamProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountTeamProject)(nil)).Elem()
}

func (i AccountTeamProjectMap) ToAccountTeamProjectMapOutput() AccountTeamProjectMapOutput {
	return i.ToAccountTeamProjectMapOutputWithContext(context.Background())
}

func (i AccountTeamProjectMap) ToAccountTeamProjectMapOutputWithContext(ctx context.Context) AccountTeamProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamProjectMapOutput)
}

type AccountTeamProjectOutput struct{ *pulumi.OutputState }

func (AccountTeamProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountTeamProject)(nil))
}

func (o AccountTeamProjectOutput) ToAccountTeamProjectOutput() AccountTeamProjectOutput {
	return o
}

func (o AccountTeamProjectOutput) ToAccountTeamProjectOutputWithContext(ctx context.Context) AccountTeamProjectOutput {
	return o
}

func (o AccountTeamProjectOutput) ToAccountTeamProjectPtrOutput() AccountTeamProjectPtrOutput {
	return o.ToAccountTeamProjectPtrOutputWithContext(context.Background())
}

func (o AccountTeamProjectOutput) ToAccountTeamProjectPtrOutputWithContext(ctx context.Context) AccountTeamProjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountTeamProject) *AccountTeamProject {
		return &v
	}).(AccountTeamProjectPtrOutput)
}

type AccountTeamProjectPtrOutput struct{ *pulumi.OutputState }

func (AccountTeamProjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountTeamProject)(nil))
}

func (o AccountTeamProjectPtrOutput) ToAccountTeamProjectPtrOutput() AccountTeamProjectPtrOutput {
	return o
}

func (o AccountTeamProjectPtrOutput) ToAccountTeamProjectPtrOutputWithContext(ctx context.Context) AccountTeamProjectPtrOutput {
	return o
}

func (o AccountTeamProjectPtrOutput) Elem() AccountTeamProjectOutput {
	return o.ApplyT(func(v *AccountTeamProject) AccountTeamProject {
		if v != nil {
			return *v
		}
		var ret AccountTeamProject
		return ret
	}).(AccountTeamProjectOutput)
}

type AccountTeamProjectArrayOutput struct{ *pulumi.OutputState }

func (AccountTeamProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountTeamProject)(nil))
}

func (o AccountTeamProjectArrayOutput) ToAccountTeamProjectArrayOutput() AccountTeamProjectArrayOutput {
	return o
}

func (o AccountTeamProjectArrayOutput) ToAccountTeamProjectArrayOutputWithContext(ctx context.Context) AccountTeamProjectArrayOutput {
	return o
}

func (o AccountTeamProjectArrayOutput) Index(i pulumi.IntInput) AccountTeamProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountTeamProject {
		return vs[0].([]AccountTeamProject)[vs[1].(int)]
	}).(AccountTeamProjectOutput)
}

type AccountTeamProjectMapOutput struct{ *pulumi.OutputState }

func (AccountTeamProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AccountTeamProject)(nil))
}

func (o AccountTeamProjectMapOutput) ToAccountTeamProjectMapOutput() AccountTeamProjectMapOutput {
	return o
}

func (o AccountTeamProjectMapOutput) ToAccountTeamProjectMapOutputWithContext(ctx context.Context) AccountTeamProjectMapOutput {
	return o
}

func (o AccountTeamProjectMapOutput) MapIndex(k pulumi.StringInput) AccountTeamProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AccountTeamProject {
		return vs[0].(map[string]AccountTeamProject)[vs[1].(string)]
	}).(AccountTeamProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamProjectInput)(nil)).Elem(), &AccountTeamProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamProjectPtrInput)(nil)).Elem(), &AccountTeamProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamProjectArrayInput)(nil)).Elem(), AccountTeamProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamProjectMapInput)(nil)).Elem(), AccountTeamProjectMap{})
	pulumi.RegisterOutputType(AccountTeamProjectOutput{})
	pulumi.RegisterOutputType(AccountTeamProjectPtrOutput{})
	pulumi.RegisterOutputType(AccountTeamProjectArrayOutput{})
	pulumi.RegisterOutputType(AccountTeamProjectMapOutput{})
}
