// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Links an existing project to an existing team. Both the project and team should have the same `accountId`.
//
// !> **Teams have been deprecated and are being migrated to groups**
// **On 30 September 2024** the Account Owners team will transition to super admin. Super admin have full access to the organization.
// The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions.
// **From 4 November 2024** you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after
// this date. **On 2 December 2024** all teams will be deleted and the teams feature will be completely removed. View the
// migration guide for more information on the changes and migrating to groups.
//
// > **Important**
// You can't delete the Account Owners team. **Deleting all other teams in your organization will disable the teams feature.**
// You won't be able to create new teams or access your Account Owners team.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := aiven.NewProject(ctx, "example_project", &aiven.ProjectArgs{
//				Project:   pulumi.String("project-1"),
//				AccountId: pulumi.Any(ACCOUNT_RESOURCE_NAME.AccountId),
//			})
//			if err != nil {
//				return err
//			}
//			exampleTeam, err := aiven.NewAccountTeam(ctx, "example_team", &aiven.AccountTeamArgs{
//				AccountId: pulumi.Any(ACCOUNT_RESOURCE_NAMEAivenAccount.AccountId),
//				Name:      pulumi.String("Example team"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aiven.NewAccountTeamProject(ctx, "main", &aiven.AccountTeamProjectArgs{
//				AccountId:   pulumi.Any(ACCOUNT_RESOURCE_NAMEAivenAccount.AccountId),
//				TeamId:      exampleTeam.TeamId,
//				ProjectName: exampleProject.Project,
//				TeamType:    pulumi.String("admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/accountTeamProject:AccountTeamProject account_team_project1 account_id/team_id/project_name
// ```
type AccountTeamProject struct {
	pulumi.CustomResourceState

	// The unique account id
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The name of an already existing project
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// An account team id
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
	TeamType pulumi.StringPtrOutput `pulumi:"teamType"`
}

// NewAccountTeamProject registers a new resource with the given unique name, arguments, and options.
func NewAccountTeamProject(ctx *pulumi.Context,
	name string, args *AccountTeamProjectArgs, opts ...pulumi.ResourceOption) (*AccountTeamProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountTeamProject
	err := ctx.RegisterResource("aiven:index/accountTeamProject:AccountTeamProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountTeamProject gets an existing AccountTeamProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountTeamProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountTeamProjectState, opts ...pulumi.ResourceOption) (*AccountTeamProject, error) {
	var resource AccountTeamProject
	err := ctx.ReadResource("aiven:index/accountTeamProject:AccountTeamProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountTeamProject resources.
type accountTeamProjectState struct {
	// The unique account id
	AccountId *string `pulumi:"accountId"`
	// The name of an already existing project
	ProjectName *string `pulumi:"projectName"`
	// An account team id
	TeamId *string `pulumi:"teamId"`
	// The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
	TeamType *string `pulumi:"teamType"`
}

type AccountTeamProjectState struct {
	// The unique account id
	AccountId pulumi.StringPtrInput
	// The name of an already existing project
	ProjectName pulumi.StringPtrInput
	// An account team id
	TeamId pulumi.StringPtrInput
	// The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
	TeamType pulumi.StringPtrInput
}

func (AccountTeamProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTeamProjectState)(nil)).Elem()
}

type accountTeamProjectArgs struct {
	// The unique account id
	AccountId string `pulumi:"accountId"`
	// The name of an already existing project
	ProjectName *string `pulumi:"projectName"`
	// An account team id
	TeamId string `pulumi:"teamId"`
	// The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
	TeamType *string `pulumi:"teamType"`
}

// The set of arguments for constructing a AccountTeamProject resource.
type AccountTeamProjectArgs struct {
	// The unique account id
	AccountId pulumi.StringInput
	// The name of an already existing project
	ProjectName pulumi.StringPtrInput
	// An account team id
	TeamId pulumi.StringInput
	// The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
	TeamType pulumi.StringPtrInput
}

func (AccountTeamProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTeamProjectArgs)(nil)).Elem()
}

type AccountTeamProjectInput interface {
	pulumi.Input

	ToAccountTeamProjectOutput() AccountTeamProjectOutput
	ToAccountTeamProjectOutputWithContext(ctx context.Context) AccountTeamProjectOutput
}

func (*AccountTeamProject) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountTeamProject)(nil)).Elem()
}

func (i *AccountTeamProject) ToAccountTeamProjectOutput() AccountTeamProjectOutput {
	return i.ToAccountTeamProjectOutputWithContext(context.Background())
}

func (i *AccountTeamProject) ToAccountTeamProjectOutputWithContext(ctx context.Context) AccountTeamProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamProjectOutput)
}

// AccountTeamProjectArrayInput is an input type that accepts AccountTeamProjectArray and AccountTeamProjectArrayOutput values.
// You can construct a concrete instance of `AccountTeamProjectArrayInput` via:
//
//	AccountTeamProjectArray{ AccountTeamProjectArgs{...} }
type AccountTeamProjectArrayInput interface {
	pulumi.Input

	ToAccountTeamProjectArrayOutput() AccountTeamProjectArrayOutput
	ToAccountTeamProjectArrayOutputWithContext(context.Context) AccountTeamProjectArrayOutput
}

type AccountTeamProjectArray []AccountTeamProjectInput

func (AccountTeamProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountTeamProject)(nil)).Elem()
}

func (i AccountTeamProjectArray) ToAccountTeamProjectArrayOutput() AccountTeamProjectArrayOutput {
	return i.ToAccountTeamProjectArrayOutputWithContext(context.Background())
}

func (i AccountTeamProjectArray) ToAccountTeamProjectArrayOutputWithContext(ctx context.Context) AccountTeamProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamProjectArrayOutput)
}

// AccountTeamProjectMapInput is an input type that accepts AccountTeamProjectMap and AccountTeamProjectMapOutput values.
// You can construct a concrete instance of `AccountTeamProjectMapInput` via:
//
//	AccountTeamProjectMap{ "key": AccountTeamProjectArgs{...} }
type AccountTeamProjectMapInput interface {
	pulumi.Input

	ToAccountTeamProjectMapOutput() AccountTeamProjectMapOutput
	ToAccountTeamProjectMapOutputWithContext(context.Context) AccountTeamProjectMapOutput
}

type AccountTeamProjectMap map[string]AccountTeamProjectInput

func (AccountTeamProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountTeamProject)(nil)).Elem()
}

func (i AccountTeamProjectMap) ToAccountTeamProjectMapOutput() AccountTeamProjectMapOutput {
	return i.ToAccountTeamProjectMapOutputWithContext(context.Background())
}

func (i AccountTeamProjectMap) ToAccountTeamProjectMapOutputWithContext(ctx context.Context) AccountTeamProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamProjectMapOutput)
}

type AccountTeamProjectOutput struct{ *pulumi.OutputState }

func (AccountTeamProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountTeamProject)(nil)).Elem()
}

func (o AccountTeamProjectOutput) ToAccountTeamProjectOutput() AccountTeamProjectOutput {
	return o
}

func (o AccountTeamProjectOutput) ToAccountTeamProjectOutputWithContext(ctx context.Context) AccountTeamProjectOutput {
	return o
}

// The unique account id
func (o AccountTeamProjectOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountTeamProject) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The name of an already existing project
func (o AccountTeamProjectOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountTeamProject) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// An account team id
func (o AccountTeamProjectOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountTeamProject) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// The Account team project type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
func (o AccountTeamProjectOutput) TeamType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountTeamProject) pulumi.StringPtrOutput { return v.TeamType }).(pulumi.StringPtrOutput)
}

type AccountTeamProjectArrayOutput struct{ *pulumi.OutputState }

func (AccountTeamProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountTeamProject)(nil)).Elem()
}

func (o AccountTeamProjectArrayOutput) ToAccountTeamProjectArrayOutput() AccountTeamProjectArrayOutput {
	return o
}

func (o AccountTeamProjectArrayOutput) ToAccountTeamProjectArrayOutputWithContext(ctx context.Context) AccountTeamProjectArrayOutput {
	return o
}

func (o AccountTeamProjectArrayOutput) Index(i pulumi.IntInput) AccountTeamProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountTeamProject {
		return vs[0].([]*AccountTeamProject)[vs[1].(int)]
	}).(AccountTeamProjectOutput)
}

type AccountTeamProjectMapOutput struct{ *pulumi.OutputState }

func (AccountTeamProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountTeamProject)(nil)).Elem()
}

func (o AccountTeamProjectMapOutput) ToAccountTeamProjectMapOutput() AccountTeamProjectMapOutput {
	return o
}

func (o AccountTeamProjectMapOutput) ToAccountTeamProjectMapOutputWithContext(ctx context.Context) AccountTeamProjectMapOutput {
	return o
}

func (o AccountTeamProjectMapOutput) MapIndex(k pulumi.StringInput) AccountTeamProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountTeamProject {
		return vs[0].(map[string]*AccountTeamProject)[vs[1].(string)]
	}).(AccountTeamProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamProjectInput)(nil)).Elem(), &AccountTeamProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamProjectArrayInput)(nil)).Elem(), AccountTeamProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamProjectMapInput)(nil)).Elem(), AccountTeamProjectMap{})
	pulumi.RegisterOutputType(AccountTeamProjectOutput{})
	pulumi.RegisterOutputType(AccountTeamProjectArrayOutput{})
	pulumi.RegisterOutputType(AccountTeamProjectMapOutput{})
}
