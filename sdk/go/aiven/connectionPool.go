// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Connection Pool resource allows the creation and management of Aiven Connection Pools.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewConnectionPool(ctx, "mytestpool", &aiven.ConnectionPoolArgs{
// 			Project:      pulumi.Any(aiven_project.Myproject.Project),
// 			ServiceName:  pulumi.Any(aiven_service.Myservice.Service_name),
// 			DatabaseName: pulumi.Any(aiven_database.Mydatabase.Database_name),
// 			PoolMode:     pulumi.String("transaction"),
// 			PoolName:     pulumi.String("mypool"),
// 			PoolSize:     pulumi.Int(10),
// 			Username:     pulumi.Any(aiven_service_user.Myserviceuser.Username),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import aiven:index/connectionPool:ConnectionPool mytestpool project/service_name/pool_name
// ```
type ConnectionPool struct {
	pulumi.CustomResourceState

	// The URI for connecting to the pool
	ConnectionUri pulumi.StringOutput `pulumi:"connectionUri"`
	// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// The mode the pool operates in The possible values are `session`, `transaction` and `statement`. The default value is
	// `transaction`.
	PoolMode pulumi.StringPtrOutput `pulumi:"poolMode"`
	// The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
	PoolName pulumi.StringOutput `pulumi:"poolName"`
	// The number of connections the pool may create towards the backend server. This does not affect the number of incoming
	// connections, which is always a much larger number. The default value is `10`.
	PoolSize pulumi.IntPtrOutput `pulumi:"poolSize"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The name of the service user used to connect to the database. To set up proper dependencies please refer to this
	// variable as a reference.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewConnectionPool registers a new resource with the given unique name, arguments, and options.
func NewConnectionPool(ctx *pulumi.Context,
	name string, args *ConnectionPoolArgs, opts ...pulumi.ResourceOption) (*ConnectionPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.PoolName == nil {
		return nil, errors.New("invalid value for required argument 'PoolName'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource ConnectionPool
	err := ctx.RegisterResource("aiven:index/connectionPool:ConnectionPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionPool gets an existing ConnectionPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionPoolState, opts ...pulumi.ResourceOption) (*ConnectionPool, error) {
	var resource ConnectionPool
	err := ctx.ReadResource("aiven:index/connectionPool:ConnectionPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionPool resources.
type connectionPoolState struct {
	// The URI for connecting to the pool
	ConnectionUri *string `pulumi:"connectionUri"`
	// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	DatabaseName *string `pulumi:"databaseName"`
	// The mode the pool operates in The possible values are `session`, `transaction` and `statement`. The default value is
	// `transaction`.
	PoolMode *string `pulumi:"poolMode"`
	// The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
	PoolName *string `pulumi:"poolName"`
	// The number of connections the pool may create towards the backend server. This does not affect the number of incoming
	// connections, which is always a much larger number. The default value is `10`.
	PoolSize *int `pulumi:"poolSize"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// The name of the service user used to connect to the database. To set up proper dependencies please refer to this
	// variable as a reference.
	Username *string `pulumi:"username"`
}

type ConnectionPoolState struct {
	// The URI for connecting to the pool
	ConnectionUri pulumi.StringPtrInput
	// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	DatabaseName pulumi.StringPtrInput
	// The mode the pool operates in The possible values are `session`, `transaction` and `statement`. The default value is
	// `transaction`.
	PoolMode pulumi.StringPtrInput
	// The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
	PoolName pulumi.StringPtrInput
	// The number of connections the pool may create towards the backend server. This does not affect the number of incoming
	// connections, which is always a much larger number. The default value is `10`.
	PoolSize pulumi.IntPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// The name of the service user used to connect to the database. To set up proper dependencies please refer to this
	// variable as a reference.
	Username pulumi.StringPtrInput
}

func (ConnectionPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPoolState)(nil)).Elem()
}

type connectionPoolArgs struct {
	// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	DatabaseName string `pulumi:"databaseName"`
	// The mode the pool operates in The possible values are `session`, `transaction` and `statement`. The default value is
	// `transaction`.
	PoolMode *string `pulumi:"poolMode"`
	// The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
	PoolName string `pulumi:"poolName"`
	// The number of connections the pool may create towards the backend server. This does not affect the number of incoming
	// connections, which is always a much larger number. The default value is `10`.
	PoolSize *int `pulumi:"poolSize"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// The name of the service user used to connect to the database. To set up proper dependencies please refer to this
	// variable as a reference.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a ConnectionPool resource.
type ConnectionPoolArgs struct {
	// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	DatabaseName pulumi.StringInput
	// The mode the pool operates in The possible values are `session`, `transaction` and `statement`. The default value is
	// `transaction`.
	PoolMode pulumi.StringPtrInput
	// The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
	PoolName pulumi.StringInput
	// The number of connections the pool may create towards the backend server. This does not affect the number of incoming
	// connections, which is always a much larger number. The default value is `10`.
	PoolSize pulumi.IntPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringInput
	// The name of the service user used to connect to the database. To set up proper dependencies please refer to this
	// variable as a reference.
	Username pulumi.StringPtrInput
}

func (ConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPoolArgs)(nil)).Elem()
}

type ConnectionPoolInput interface {
	pulumi.Input

	ToConnectionPoolOutput() ConnectionPoolOutput
	ToConnectionPoolOutputWithContext(ctx context.Context) ConnectionPoolOutput
}

func (*ConnectionPool) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPool)(nil)).Elem()
}

func (i *ConnectionPool) ToConnectionPoolOutput() ConnectionPoolOutput {
	return i.ToConnectionPoolOutputWithContext(context.Background())
}

func (i *ConnectionPool) ToConnectionPoolOutputWithContext(ctx context.Context) ConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPoolOutput)
}

// ConnectionPoolArrayInput is an input type that accepts ConnectionPoolArray and ConnectionPoolArrayOutput values.
// You can construct a concrete instance of `ConnectionPoolArrayInput` via:
//
//          ConnectionPoolArray{ ConnectionPoolArgs{...} }
type ConnectionPoolArrayInput interface {
	pulumi.Input

	ToConnectionPoolArrayOutput() ConnectionPoolArrayOutput
	ToConnectionPoolArrayOutputWithContext(context.Context) ConnectionPoolArrayOutput
}

type ConnectionPoolArray []ConnectionPoolInput

func (ConnectionPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionPool)(nil)).Elem()
}

func (i ConnectionPoolArray) ToConnectionPoolArrayOutput() ConnectionPoolArrayOutput {
	return i.ToConnectionPoolArrayOutputWithContext(context.Background())
}

func (i ConnectionPoolArray) ToConnectionPoolArrayOutputWithContext(ctx context.Context) ConnectionPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPoolArrayOutput)
}

// ConnectionPoolMapInput is an input type that accepts ConnectionPoolMap and ConnectionPoolMapOutput values.
// You can construct a concrete instance of `ConnectionPoolMapInput` via:
//
//          ConnectionPoolMap{ "key": ConnectionPoolArgs{...} }
type ConnectionPoolMapInput interface {
	pulumi.Input

	ToConnectionPoolMapOutput() ConnectionPoolMapOutput
	ToConnectionPoolMapOutputWithContext(context.Context) ConnectionPoolMapOutput
}

type ConnectionPoolMap map[string]ConnectionPoolInput

func (ConnectionPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionPool)(nil)).Elem()
}

func (i ConnectionPoolMap) ToConnectionPoolMapOutput() ConnectionPoolMapOutput {
	return i.ToConnectionPoolMapOutputWithContext(context.Background())
}

func (i ConnectionPoolMap) ToConnectionPoolMapOutputWithContext(ctx context.Context) ConnectionPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPoolMapOutput)
}

type ConnectionPoolOutput struct{ *pulumi.OutputState }

func (ConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPool)(nil)).Elem()
}

func (o ConnectionPoolOutput) ToConnectionPoolOutput() ConnectionPoolOutput {
	return o
}

func (o ConnectionPoolOutput) ToConnectionPoolOutputWithContext(ctx context.Context) ConnectionPoolOutput {
	return o
}

// The URI for connecting to the pool
func (o ConnectionPoolOutput) ConnectionUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPool) pulumi.StringOutput { return v.ConnectionUri }).(pulumi.StringOutput)
}

// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a
// reference. This property cannot be changed, doing so forces recreation of the resource.
func (o ConnectionPoolOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPool) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// The mode the pool operates in The possible values are `session`, `transaction` and `statement`. The default value is
// `transaction`.
func (o ConnectionPoolOutput) PoolMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPool) pulumi.StringPtrOutput { return v.PoolMode }).(pulumi.StringPtrOutput)
}

// The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
func (o ConnectionPoolOutput) PoolName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPool) pulumi.StringOutput { return v.PoolName }).(pulumi.StringOutput)
}

// The number of connections the pool may create towards the backend server. This does not affect the number of incoming
// connections, which is always a much larger number. The default value is `10`.
func (o ConnectionPoolOutput) PoolSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionPool) pulumi.IntPtrOutput { return v.PoolSize }).(pulumi.IntPtrOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
// reference. This property cannot be changed, doing so forces recreation of the resource.
func (o ConnectionPoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o ConnectionPoolOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPool) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The name of the service user used to connect to the database. To set up proper dependencies please refer to this
// variable as a reference.
func (o ConnectionPoolOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPool) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionPoolArrayOutput struct{ *pulumi.OutputState }

func (ConnectionPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionPool)(nil)).Elem()
}

func (o ConnectionPoolArrayOutput) ToConnectionPoolArrayOutput() ConnectionPoolArrayOutput {
	return o
}

func (o ConnectionPoolArrayOutput) ToConnectionPoolArrayOutputWithContext(ctx context.Context) ConnectionPoolArrayOutput {
	return o
}

func (o ConnectionPoolArrayOutput) Index(i pulumi.IntInput) ConnectionPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionPool {
		return vs[0].([]*ConnectionPool)[vs[1].(int)]
	}).(ConnectionPoolOutput)
}

type ConnectionPoolMapOutput struct{ *pulumi.OutputState }

func (ConnectionPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionPool)(nil)).Elem()
}

func (o ConnectionPoolMapOutput) ToConnectionPoolMapOutput() ConnectionPoolMapOutput {
	return o
}

func (o ConnectionPoolMapOutput) ToConnectionPoolMapOutputWithContext(ctx context.Context) ConnectionPoolMapOutput {
	return o
}

func (o ConnectionPoolMapOutput) MapIndex(k pulumi.StringInput) ConnectionPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionPool {
		return vs[0].(map[string]*ConnectionPool)[vs[1].(string)]
	}).(ConnectionPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPoolInput)(nil)).Elem(), &ConnectionPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPoolArrayInput)(nil)).Elem(), ConnectionPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPoolMapInput)(nil)).Elem(), ConnectionPoolMap{})
	pulumi.RegisterOutputType(ConnectionPoolOutput{})
	pulumi.RegisterOutputType(ConnectionPoolArrayOutput{})
	pulumi.RegisterOutputType(ConnectionPoolMapOutput{})
}
