// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v2/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewConnectionPool(ctx, "mytestpool", &aiven.ConnectionPoolArgs{
// 			DatabaseName: pulumi.String(aiven_database.Mydatabase.Database_name),
// 			PoolMode:     pulumi.String("transaction"),
// 			PoolName:     pulumi.String("mypool"),
// 			PoolSize:     pulumi.Int(10),
// 			Project:      pulumi.String(aiven_project.Myproject.Project),
// 			ServiceName:  pulumi.String(aiven_service.Myservice.Service_name),
// 			Username:     pulumi.String(aiven_service_user.Myserviceuser.Username),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ConnectionPool struct {
	pulumi.CustomResourceState

	// URI for connecting to the pool
	ConnectionUri pulumi.StringOutput `pulumi:"connectionUri"`
	// Name of the database the pool connects to
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Mode the pool operates in (session, transaction, statement)
	PoolMode pulumi.StringPtrOutput `pulumi:"poolMode"`
	// Name of the pool
	PoolName pulumi.StringOutput `pulumi:"poolName"`
	// Number of connections the pool may create towards the backend server
	PoolSize pulumi.IntPtrOutput `pulumi:"poolSize"`
	// Project to link the connection pool to
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the connection pool to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Name of the service user used to connect to the database
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewConnectionPool registers a new resource with the given unique name, arguments, and options.
func NewConnectionPool(ctx *pulumi.Context,
	name string, args *ConnectionPoolArgs, opts ...pulumi.ResourceOption) (*ConnectionPool, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.PoolName == nil {
		return nil, errors.New("missing required argument 'PoolName'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &ConnectionPoolArgs{}
	}
	var resource ConnectionPool
	err := ctx.RegisterResource("aiven:index/connectionPool:ConnectionPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionPool gets an existing ConnectionPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionPoolState, opts ...pulumi.ResourceOption) (*ConnectionPool, error) {
	var resource ConnectionPool
	err := ctx.ReadResource("aiven:index/connectionPool:ConnectionPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionPool resources.
type connectionPoolState struct {
	// URI for connecting to the pool
	ConnectionUri *string `pulumi:"connectionUri"`
	// Name of the database the pool connects to
	DatabaseName *string `pulumi:"databaseName"`
	// Mode the pool operates in (session, transaction, statement)
	PoolMode *string `pulumi:"poolMode"`
	// Name of the pool
	PoolName *string `pulumi:"poolName"`
	// Number of connections the pool may create towards the backend server
	PoolSize *int `pulumi:"poolSize"`
	// Project to link the connection pool to
	Project *string `pulumi:"project"`
	// Service to link the connection pool to
	ServiceName *string `pulumi:"serviceName"`
	// Name of the service user used to connect to the database
	Username *string `pulumi:"username"`
}

type ConnectionPoolState struct {
	// URI for connecting to the pool
	ConnectionUri pulumi.StringPtrInput
	// Name of the database the pool connects to
	DatabaseName pulumi.StringPtrInput
	// Mode the pool operates in (session, transaction, statement)
	PoolMode pulumi.StringPtrInput
	// Name of the pool
	PoolName pulumi.StringPtrInput
	// Number of connections the pool may create towards the backend server
	PoolSize pulumi.IntPtrInput
	// Project to link the connection pool to
	Project pulumi.StringPtrInput
	// Service to link the connection pool to
	ServiceName pulumi.StringPtrInput
	// Name of the service user used to connect to the database
	Username pulumi.StringPtrInput
}

func (ConnectionPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPoolState)(nil)).Elem()
}

type connectionPoolArgs struct {
	// Name of the database the pool connects to
	DatabaseName string `pulumi:"databaseName"`
	// Mode the pool operates in (session, transaction, statement)
	PoolMode *string `pulumi:"poolMode"`
	// Name of the pool
	PoolName string `pulumi:"poolName"`
	// Number of connections the pool may create towards the backend server
	PoolSize *int `pulumi:"poolSize"`
	// Project to link the connection pool to
	Project string `pulumi:"project"`
	// Service to link the connection pool to
	ServiceName string `pulumi:"serviceName"`
	// Name of the service user used to connect to the database
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ConnectionPool resource.
type ConnectionPoolArgs struct {
	// Name of the database the pool connects to
	DatabaseName pulumi.StringInput
	// Mode the pool operates in (session, transaction, statement)
	PoolMode pulumi.StringPtrInput
	// Name of the pool
	PoolName pulumi.StringInput
	// Number of connections the pool may create towards the backend server
	PoolSize pulumi.IntPtrInput
	// Project to link the connection pool to
	Project pulumi.StringInput
	// Service to link the connection pool to
	ServiceName pulumi.StringInput
	// Name of the service user used to connect to the database
	Username pulumi.StringInput
}

func (ConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPoolArgs)(nil)).Elem()
}
