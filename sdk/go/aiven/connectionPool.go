// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Connection Pool Resource
//
// The Connection Pool resource allows the creation and management of an Aiven Connection Pool`s.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewConnectionPool(ctx, "mytestpool", &aiven.ConnectionPoolArgs{
// 			DatabaseName: pulumi.Any(aiven_database.Mydatabase.Database_name),
// 			PoolMode:     pulumi.String("transaction"),
// 			PoolName:     pulumi.String("mypool"),
// 			PoolSize:     pulumi.Int(10),
// 			Project:      pulumi.Any(aiven_project.Myproject.Project),
// 			ServiceName:  pulumi.Any(aiven_service.Myservice.Service_name),
// 			Username:     pulumi.Any(aiven_service_user.Myserviceuser.Username),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ConnectionPool struct {
	pulumi.CustomResourceState

	// (Optional) is a computed property that tells the URI for connecting to the pool.
	// This value cannot be set, only read.
	ConnectionUri pulumi.StringOutput `pulumi:"connectionUri"`
	// is the name of the database the pool connects to. This should be
	// defined using reference as shown above to set up dependencies correctly.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// is the mode the pool operates in (session, transaction, statement).
	PoolMode pulumi.StringPtrOutput `pulumi:"poolMode"`
	// is the name of the pool.
	PoolName pulumi.StringOutput `pulumi:"poolName"`
	// is the number of connections the pool may create towards the backend
	// server. This does not affect the number of incoming connections, which is always a much
	// larger number.
	PoolSize pulumi.IntPtrOutput `pulumi:"poolSize"`
	// and `serviceName` - (Required) define the project and service the connection pool
	// belongs to. They should be defined using reference as shown above to set up dependencies
	// correctly. These properties cannot be changed once the service is created. Doing so will
	// result in the connection pool being deleted and new one created instead.
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the connection pool to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// is the name of the service user used to connect to the database. This should
	// be defined using reference as shown above to set up dependencies correctly.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewConnectionPool registers a new resource with the given unique name, arguments, and options.
func NewConnectionPool(ctx *pulumi.Context,
	name string, args *ConnectionPoolArgs, opts ...pulumi.ResourceOption) (*ConnectionPool, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.PoolName == nil {
		return nil, errors.New("missing required argument 'PoolName'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &ConnectionPoolArgs{}
	}
	var resource ConnectionPool
	err := ctx.RegisterResource("aiven:index/connectionPool:ConnectionPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionPool gets an existing ConnectionPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionPoolState, opts ...pulumi.ResourceOption) (*ConnectionPool, error) {
	var resource ConnectionPool
	err := ctx.ReadResource("aiven:index/connectionPool:ConnectionPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionPool resources.
type connectionPoolState struct {
	// (Optional) is a computed property that tells the URI for connecting to the pool.
	// This value cannot be set, only read.
	ConnectionUri *string `pulumi:"connectionUri"`
	// is the name of the database the pool connects to. This should be
	// defined using reference as shown above to set up dependencies correctly.
	DatabaseName *string `pulumi:"databaseName"`
	// is the mode the pool operates in (session, transaction, statement).
	PoolMode *string `pulumi:"poolMode"`
	// is the name of the pool.
	PoolName *string `pulumi:"poolName"`
	// is the number of connections the pool may create towards the backend
	// server. This does not affect the number of incoming connections, which is always a much
	// larger number.
	PoolSize *int `pulumi:"poolSize"`
	// and `serviceName` - (Required) define the project and service the connection pool
	// belongs to. They should be defined using reference as shown above to set up dependencies
	// correctly. These properties cannot be changed once the service is created. Doing so will
	// result in the connection pool being deleted and new one created instead.
	Project *string `pulumi:"project"`
	// Service to link the connection pool to
	ServiceName *string `pulumi:"serviceName"`
	// is the name of the service user used to connect to the database. This should
	// be defined using reference as shown above to set up dependencies correctly.
	Username *string `pulumi:"username"`
}

type ConnectionPoolState struct {
	// (Optional) is a computed property that tells the URI for connecting to the pool.
	// This value cannot be set, only read.
	ConnectionUri pulumi.StringPtrInput
	// is the name of the database the pool connects to. This should be
	// defined using reference as shown above to set up dependencies correctly.
	DatabaseName pulumi.StringPtrInput
	// is the mode the pool operates in (session, transaction, statement).
	PoolMode pulumi.StringPtrInput
	// is the name of the pool.
	PoolName pulumi.StringPtrInput
	// is the number of connections the pool may create towards the backend
	// server. This does not affect the number of incoming connections, which is always a much
	// larger number.
	PoolSize pulumi.IntPtrInput
	// and `serviceName` - (Required) define the project and service the connection pool
	// belongs to. They should be defined using reference as shown above to set up dependencies
	// correctly. These properties cannot be changed once the service is created. Doing so will
	// result in the connection pool being deleted and new one created instead.
	Project pulumi.StringPtrInput
	// Service to link the connection pool to
	ServiceName pulumi.StringPtrInput
	// is the name of the service user used to connect to the database. This should
	// be defined using reference as shown above to set up dependencies correctly.
	Username pulumi.StringPtrInput
}

func (ConnectionPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPoolState)(nil)).Elem()
}

type connectionPoolArgs struct {
	// is the name of the database the pool connects to. This should be
	// defined using reference as shown above to set up dependencies correctly.
	DatabaseName string `pulumi:"databaseName"`
	// is the mode the pool operates in (session, transaction, statement).
	PoolMode *string `pulumi:"poolMode"`
	// is the name of the pool.
	PoolName string `pulumi:"poolName"`
	// is the number of connections the pool may create towards the backend
	// server. This does not affect the number of incoming connections, which is always a much
	// larger number.
	PoolSize *int `pulumi:"poolSize"`
	// and `serviceName` - (Required) define the project and service the connection pool
	// belongs to. They should be defined using reference as shown above to set up dependencies
	// correctly. These properties cannot be changed once the service is created. Doing so will
	// result in the connection pool being deleted and new one created instead.
	Project string `pulumi:"project"`
	// Service to link the connection pool to
	ServiceName string `pulumi:"serviceName"`
	// is the name of the service user used to connect to the database. This should
	// be defined using reference as shown above to set up dependencies correctly.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ConnectionPool resource.
type ConnectionPoolArgs struct {
	// is the name of the database the pool connects to. This should be
	// defined using reference as shown above to set up dependencies correctly.
	DatabaseName pulumi.StringInput
	// is the mode the pool operates in (session, transaction, statement).
	PoolMode pulumi.StringPtrInput
	// is the name of the pool.
	PoolName pulumi.StringInput
	// is the number of connections the pool may create towards the backend
	// server. This does not affect the number of incoming connections, which is always a much
	// larger number.
	PoolSize pulumi.IntPtrInput
	// and `serviceName` - (Required) define the project and service the connection pool
	// belongs to. They should be defined using reference as shown above to set up dependencies
	// correctly. These properties cannot be changed once the service is created. Doing so will
	// result in the connection pool being deleted and new one created instead.
	Project pulumi.StringInput
	// Service to link the connection pool to
	ServiceName pulumi.StringInput
	// is the name of the service user used to connect to the database. This should
	// be defined using reference as shown above to set up dependencies correctly.
	Username pulumi.StringInput
}

func (ConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPoolArgs)(nil)).Elem()
}

type ConnectionPoolInput interface {
	pulumi.Input

	ToConnectionPoolOutput() ConnectionPoolOutput
	ToConnectionPoolOutputWithContext(ctx context.Context) ConnectionPoolOutput
}

func (ConnectionPool) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPool)(nil)).Elem()
}

func (i ConnectionPool) ToConnectionPoolOutput() ConnectionPoolOutput {
	return i.ToConnectionPoolOutputWithContext(context.Background())
}

func (i ConnectionPool) ToConnectionPoolOutputWithContext(ctx context.Context) ConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPoolOutput)
}

type ConnectionPoolOutput struct {
	*pulumi.OutputState
}

func (ConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPoolOutput)(nil)).Elem()
}

func (o ConnectionPoolOutput) ToConnectionPoolOutput() ConnectionPoolOutput {
	return o
}

func (o ConnectionPoolOutput) ToConnectionPoolOutputWithContext(ctx context.Context) ConnectionPoolOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConnectionPoolOutput{})
}
