// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ConnectionPool struct {
	s *pulumi.ResourceState
}

// NewConnectionPool registers a new resource with the given unique name, arguments, and options.
func NewConnectionPool(ctx *pulumi.Context,
	name string, args *ConnectionPoolArgs, opts ...pulumi.ResourceOpt) (*ConnectionPool, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.PoolName == nil {
		return nil, errors.New("missing required argument 'PoolName'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["databaseName"] = nil
		inputs["poolMode"] = nil
		inputs["poolName"] = nil
		inputs["poolSize"] = nil
		inputs["project"] = nil
		inputs["serviceName"] = nil
		inputs["username"] = nil
	} else {
		inputs["databaseName"] = args.DatabaseName
		inputs["poolMode"] = args.PoolMode
		inputs["poolName"] = args.PoolName
		inputs["poolSize"] = args.PoolSize
		inputs["project"] = args.Project
		inputs["serviceName"] = args.ServiceName
		inputs["username"] = args.Username
	}
	inputs["connectionUri"] = nil
	s, err := ctx.RegisterResource("aiven:index/connectionPool:ConnectionPool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConnectionPool{s: s}, nil
}

// GetConnectionPool gets an existing ConnectionPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConnectionPoolState, opts ...pulumi.ResourceOpt) (*ConnectionPool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["connectionUri"] = state.ConnectionUri
		inputs["databaseName"] = state.DatabaseName
		inputs["poolMode"] = state.PoolMode
		inputs["poolName"] = state.PoolName
		inputs["poolSize"] = state.PoolSize
		inputs["project"] = state.Project
		inputs["serviceName"] = state.ServiceName
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("aiven:index/connectionPool:ConnectionPool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConnectionPool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ConnectionPool) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ConnectionPool) ID() pulumi.IDOutput {
	return r.s.ID()
}

// URI for connecting to the pool
func (r *ConnectionPool) ConnectionUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["connectionUri"])
}

// Name of the database the pool connects to
func (r *ConnectionPool) DatabaseName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["databaseName"])
}

// Mode the pool operates in (session, transaction, statement)
func (r *ConnectionPool) PoolMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["poolMode"])
}

// Name of the pool
func (r *ConnectionPool) PoolName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["poolName"])
}

// Number of connections the pool may create towards the backend server
func (r *ConnectionPool) PoolSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["poolSize"])
}

// Project to link the connection pool to
func (r *ConnectionPool) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Service to link the connection pool to
func (r *ConnectionPool) ServiceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceName"])
}

// Name of the service user used to connect to the database
func (r *ConnectionPool) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering ConnectionPool resources.
type ConnectionPoolState struct {
	// URI for connecting to the pool
	ConnectionUri interface{}
	// Name of the database the pool connects to
	DatabaseName interface{}
	// Mode the pool operates in (session, transaction, statement)
	PoolMode interface{}
	// Name of the pool
	PoolName interface{}
	// Number of connections the pool may create towards the backend server
	PoolSize interface{}
	// Project to link the connection pool to
	Project interface{}
	// Service to link the connection pool to
	ServiceName interface{}
	// Name of the service user used to connect to the database
	Username interface{}
}

// The set of arguments for constructing a ConnectionPool resource.
type ConnectionPoolArgs struct {
	// Name of the database the pool connects to
	DatabaseName interface{}
	// Mode the pool operates in (session, transaction, statement)
	PoolMode interface{}
	// Name of the pool
	PoolName interface{}
	// Number of connections the pool may create towards the backend server
	PoolSize interface{}
	// Project to link the connection pool to
	Project interface{}
	// Service to link the connection pool to
	ServiceName interface{}
	// Name of the service user used to connect to the database
	Username interface{}
}
