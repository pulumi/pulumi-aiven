// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Opensearch User data source provides information about the existing Aiven Cassandra User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupOpensearchUser(ctx, &GetOpensearchUserArgs{
// 			Project:     "my-project",
// 			ServiceName: "my-service",
// 			Username:    "user1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupOpensearchUser(ctx *pulumi.Context, args *LookupOpensearchUserArgs, opts ...pulumi.InvokeOption) (*LookupOpensearchUserResult, error) {
	var rv LookupOpensearchUserResult
	err := ctx.Invoke("aiven:index/getOpensearchUser:getOpensearchUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOpensearchUser.
type LookupOpensearchUserArgs struct {
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	Username    string `pulumi:"username"`
}

// A collection of values returned by getOpensearchUser.
type LookupOpensearchUserResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	Password    string `pulumi:"password"`
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	Type        string `pulumi:"type"`
	Username    string `pulumi:"username"`
}

func LookupOpensearchUserOutput(ctx *pulumi.Context, args LookupOpensearchUserOutputArgs, opts ...pulumi.InvokeOption) LookupOpensearchUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOpensearchUserResult, error) {
			args := v.(LookupOpensearchUserArgs)
			r, err := LookupOpensearchUser(ctx, &args, opts...)
			var s LookupOpensearchUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOpensearchUserResultOutput)
}

// A collection of arguments for invoking getOpensearchUser.
type LookupOpensearchUserOutputArgs struct {
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	Username    pulumi.StringInput `pulumi:"username"`
}

func (LookupOpensearchUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchUserArgs)(nil)).Elem()
}

// A collection of values returned by getOpensearchUser.
type LookupOpensearchUserResultOutput struct{ *pulumi.OutputState }

func (LookupOpensearchUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchUserResult)(nil)).Elem()
}

func (o LookupOpensearchUserResultOutput) ToLookupOpensearchUserResultOutput() LookupOpensearchUserResultOutput {
	return o
}

func (o LookupOpensearchUserResultOutput) ToLookupOpensearchUserResultOutputWithContext(ctx context.Context) LookupOpensearchUserResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupOpensearchUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupOpensearchUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchUserResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupOpensearchUserResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchUserResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupOpensearchUserResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchUserResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupOpensearchUserResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchUserResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupOpensearchUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOpensearchUserResultOutput{})
}
