// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupM3Aggregator(ctx *pulumi.Context, args *LookupM3AggregatorArgs, opts ...pulumi.InvokeOption) (*LookupM3AggregatorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupM3AggregatorResult
	err := ctx.Invoke("aiven:index/getM3Aggregator:getM3Aggregator", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getM3Aggregator.
type LookupM3AggregatorArgs struct {
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getM3Aggregator.
type LookupM3AggregatorResult struct {
	AdditionalDiskSpace string                     `pulumi:"additionalDiskSpace"`
	CloudName           string                     `pulumi:"cloudName"`
	Components          []GetM3AggregatorComponent `pulumi:"components"`
	DiskSpace           string                     `pulumi:"diskSpace"`
	DiskSpaceCap        string                     `pulumi:"diskSpaceCap"`
	DiskSpaceDefault    string                     `pulumi:"diskSpaceDefault"`
	DiskSpaceStep       string                     `pulumi:"diskSpaceStep"`
	DiskSpaceUsed       string                     `pulumi:"diskSpaceUsed"`
	// The provider-assigned unique ID for this managed resource.
	Id                      string                                  `pulumi:"id"`
	M3aggregatorUserConfigs []GetM3AggregatorM3aggregatorUserConfig `pulumi:"m3aggregatorUserConfigs"`
	M3aggregators           []GetM3AggregatorM3aggregator           `pulumi:"m3aggregators"`
	MaintenanceWindowDow    string                                  `pulumi:"maintenanceWindowDow"`
	MaintenanceWindowTime   string                                  `pulumi:"maintenanceWindowTime"`
	Plan                    string                                  `pulumi:"plan"`
	Project                 string                                  `pulumi:"project"`
	ProjectVpcId            string                                  `pulumi:"projectVpcId"`
	ServiceHost             string                                  `pulumi:"serviceHost"`
	ServiceIntegrations     []GetM3AggregatorServiceIntegration     `pulumi:"serviceIntegrations"`
	ServiceName             string                                  `pulumi:"serviceName"`
	ServicePassword         string                                  `pulumi:"servicePassword"`
	ServicePort             int                                     `pulumi:"servicePort"`
	ServiceType             string                                  `pulumi:"serviceType"`
	ServiceUri              string                                  `pulumi:"serviceUri"`
	ServiceUsername         string                                  `pulumi:"serviceUsername"`
	State                   string                                  `pulumi:"state"`
	StaticIps               []string                                `pulumi:"staticIps"`
	Tags                    []GetM3AggregatorTag                    `pulumi:"tags"`
	TechEmails              []GetM3AggregatorTechEmail              `pulumi:"techEmails"`
	TerminationProtection   bool                                    `pulumi:"terminationProtection"`
}

func LookupM3AggregatorOutput(ctx *pulumi.Context, args LookupM3AggregatorOutputArgs, opts ...pulumi.InvokeOption) LookupM3AggregatorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupM3AggregatorResultOutput, error) {
			args := v.(LookupM3AggregatorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aiven:index/getM3Aggregator:getM3Aggregator", args, LookupM3AggregatorResultOutput{}, options).(LookupM3AggregatorResultOutput), nil
		}).(LookupM3AggregatorResultOutput)
}

// A collection of arguments for invoking getM3Aggregator.
type LookupM3AggregatorOutputArgs struct {
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupM3AggregatorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupM3AggregatorArgs)(nil)).Elem()
}

// A collection of values returned by getM3Aggregator.
type LookupM3AggregatorResultOutput struct{ *pulumi.OutputState }

func (LookupM3AggregatorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupM3AggregatorResult)(nil)).Elem()
}

func (o LookupM3AggregatorResultOutput) ToLookupM3AggregatorResultOutput() LookupM3AggregatorResultOutput {
	return o
}

func (o LookupM3AggregatorResultOutput) ToLookupM3AggregatorResultOutputWithContext(ctx context.Context) LookupM3AggregatorResultOutput {
	return o
}

func (o LookupM3AggregatorResultOutput) AdditionalDiskSpace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.AdditionalDiskSpace }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) CloudName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.CloudName }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) Components() GetM3AggregatorComponentArrayOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) []GetM3AggregatorComponent { return v.Components }).(GetM3AggregatorComponentArrayOutput)
}

func (o LookupM3AggregatorResultOutput) DiskSpace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.DiskSpace }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) DiskSpaceCap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.DiskSpaceCap }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) DiskSpaceDefault() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.DiskSpaceDefault }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) DiskSpaceStep() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.DiskSpaceStep }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) DiskSpaceUsed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.DiskSpaceUsed }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupM3AggregatorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) M3aggregatorUserConfigs() GetM3AggregatorM3aggregatorUserConfigArrayOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) []GetM3AggregatorM3aggregatorUserConfig {
		return v.M3aggregatorUserConfigs
	}).(GetM3AggregatorM3aggregatorUserConfigArrayOutput)
}

func (o LookupM3AggregatorResultOutput) M3aggregators() GetM3AggregatorM3aggregatorArrayOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) []GetM3AggregatorM3aggregator { return v.M3aggregators }).(GetM3AggregatorM3aggregatorArrayOutput)
}

func (o LookupM3AggregatorResultOutput) MaintenanceWindowDow() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.MaintenanceWindowDow }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) MaintenanceWindowTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.MaintenanceWindowTime }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.Plan }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) ProjectVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.ProjectVpcId }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.ServiceHost }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) ServiceIntegrations() GetM3AggregatorServiceIntegrationArrayOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) []GetM3AggregatorServiceIntegration { return v.ServiceIntegrations }).(GetM3AggregatorServiceIntegrationArrayOutput)
}

func (o LookupM3AggregatorResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.ServicePassword }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) int { return v.ServicePort }).(pulumi.IntOutput)
}

func (o LookupM3AggregatorResultOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.ServiceType }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.ServiceUri }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.ServiceUsername }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupM3AggregatorResultOutput) StaticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) []string { return v.StaticIps }).(pulumi.StringArrayOutput)
}

func (o LookupM3AggregatorResultOutput) Tags() GetM3AggregatorTagArrayOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) []GetM3AggregatorTag { return v.Tags }).(GetM3AggregatorTagArrayOutput)
}

func (o LookupM3AggregatorResultOutput) TechEmails() GetM3AggregatorTechEmailArrayOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) []GetM3AggregatorTechEmail { return v.TechEmails }).(GetM3AggregatorTechEmailArrayOutput)
}

func (o LookupM3AggregatorResultOutput) TerminationProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupM3AggregatorResult) bool { return v.TerminationProtection }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupM3AggregatorResultOutput{})
}
