// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ElasticSearchAcl struct {
	pulumi.CustomResourceState

	// List of Elasticsearch ACLs
	Acls ElasticSearchAclAclArrayOutput `pulumi:"acls"`
	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the
	// ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target
	// indexes they have been granted access to
	ExtendedAcl pulumi.BoolPtrOutput `pulumi:"extendedAcl"`
	// Project to link the Elasticsearch ACLs to
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewElasticSearchAcl registers a new resource with the given unique name, arguments, and options.
func NewElasticSearchAcl(ctx *pulumi.Context,
	name string, args *ElasticSearchAclArgs, opts ...pulumi.ResourceOption) (*ElasticSearchAcl, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil {
		args = &ElasticSearchAclArgs{}
	}
	var resource ElasticSearchAcl
	err := ctx.RegisterResource("aiven:index/elasticSearchAcl:ElasticSearchAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticSearchAcl gets an existing ElasticSearchAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticSearchAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticSearchAclState, opts ...pulumi.ResourceOption) (*ElasticSearchAcl, error) {
	var resource ElasticSearchAcl
	err := ctx.ReadResource("aiven:index/elasticSearchAcl:ElasticSearchAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticSearchAcl resources.
type elasticSearchAclState struct {
	// List of Elasticsearch ACLs
	Acls []ElasticSearchAclAcl `pulumi:"acls"`
	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the
	// ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target
	// indexes they have been granted access to
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// Project to link the Elasticsearch ACLs to
	Project *string `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName *string `pulumi:"serviceName"`
}

type ElasticSearchAclState struct {
	// List of Elasticsearch ACLs
	Acls ElasticSearchAclAclArrayInput
	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the
	// ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target
	// indexes they have been granted access to
	ExtendedAcl pulumi.BoolPtrInput
	// Project to link the Elasticsearch ACLs to
	Project pulumi.StringPtrInput
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringPtrInput
}

func (ElasticSearchAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclState)(nil)).Elem()
}

type elasticSearchAclArgs struct {
	// List of Elasticsearch ACLs
	Acls []ElasticSearchAclAcl `pulumi:"acls"`
	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the
	// ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target
	// indexes they have been granted access to
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// Project to link the Elasticsearch ACLs to
	Project string `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ElasticSearchAcl resource.
type ElasticSearchAclArgs struct {
	// List of Elasticsearch ACLs
	Acls ElasticSearchAclAclArrayInput
	// Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs (and only those) by enabling the
	// ExtendedAcl option for the service. When it is enabled, users can use these APIs as long as all operations only target
	// indexes they have been granted access to
	ExtendedAcl pulumi.BoolPtrInput
	// Project to link the Elasticsearch ACLs to
	Project pulumi.StringInput
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringInput
}

func (ElasticSearchAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclArgs)(nil)).Elem()
}
