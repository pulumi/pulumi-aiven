// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Elasticsearch ACL Resource
//
// ** This resource is deprecated, please use `ElasticSearchAclConfig` and `ElasticSearchAclRule` **
//
// The Elasticsearch ACL resource allows the creation and management of ACLs
// for an Aiven Elasticsearch service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewElasticSearchAcl(ctx, "es-acls", &aiven.ElasticSearchAclArgs{
// 			Project:     pulumi.Any(aiven_project.Es - project.Project),
// 			ServiceName: pulumi.Any(aiven_service.Es.Service_name),
// 			Enabled:     pulumi.Bool(true),
// 			ExtendedAcl: pulumi.Bool(false),
// 			Acls: ElasticSearchAclAclArray{
// 				&ElasticSearchAclAclArgs{
// 					Username: pulumi.Any(aiven_service_user.Es - user.Username),
// 					Rules: ElasticSearchAclAclRuleArray{
// 						&ElasticSearchAclAclRuleArgs{
// 							Index:      pulumi.String("_*"),
// 							Permission: pulumi.String("admin"),
// 						},
// 						&ElasticSearchAclAclRuleArgs{
// 							Index:      pulumi.String("*"),
// 							Permission: pulumi.String("admin"),
// 						},
// 					},
// 				},
// 				&ElasticSearchAclAclArgs{
// 					Username: pulumi.String("avnadmin"),
// 					Rules: ElasticSearchAclAclRuleArray{
// 						&ElasticSearchAclAclRuleArgs{
// 							Index:      pulumi.String("_*"),
// 							Permission: pulumi.String("read"),
// 						},
// 						&ElasticSearchAclAclRuleArgs{
// 							Index:      pulumi.String("*"),
// 							Permission: pulumi.String("read"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ElasticSearchAcl struct {
	pulumi.CustomResourceState

	// List of Elasticsearch ACLs
	Acls ElasticSearchAclAclArrayOutput `pulumi:"acls"`
	// enables of disables Elasticsearch ACL's.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl pulumi.BoolPtrOutput `pulumi:"extendedAcl"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewElasticSearchAcl registers a new resource with the given unique name, arguments, and options.
func NewElasticSearchAcl(ctx *pulumi.Context,
	name string, args *ElasticSearchAclArgs, opts ...pulumi.ResourceOption) (*ElasticSearchAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource ElasticSearchAcl
	err := ctx.RegisterResource("aiven:index/elasticSearchAcl:ElasticSearchAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticSearchAcl gets an existing ElasticSearchAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticSearchAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticSearchAclState, opts ...pulumi.ResourceOption) (*ElasticSearchAcl, error) {
	var resource ElasticSearchAcl
	err := ctx.ReadResource("aiven:index/elasticSearchAcl:ElasticSearchAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticSearchAcl resources.
type elasticSearchAclState struct {
	// List of Elasticsearch ACLs
	Acls []ElasticSearchAclAcl `pulumi:"acls"`
	// enables of disables Elasticsearch ACL's.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project *string `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName *string `pulumi:"serviceName"`
}

type ElasticSearchAclState struct {
	// List of Elasticsearch ACLs
	Acls ElasticSearchAclAclArrayInput
	// enables of disables Elasticsearch ACL's.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl pulumi.BoolPtrInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringPtrInput
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringPtrInput
}

func (ElasticSearchAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclState)(nil)).Elem()
}

type elasticSearchAclArgs struct {
	// List of Elasticsearch ACLs
	Acls []ElasticSearchAclAcl `pulumi:"acls"`
	// enables of disables Elasticsearch ACL's.
	Enabled *bool `pulumi:"enabled"`
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl *bool `pulumi:"extendedAcl"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project string `pulumi:"project"`
	// Service to link the Elasticsearch ACLs to
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ElasticSearchAcl resource.
type ElasticSearchAclArgs struct {
	// List of Elasticsearch ACLs
	Acls ElasticSearchAclAclArrayInput
	// enables of disables Elasticsearch ACL's.
	Enabled pulumi.BoolPtrInput
	// Index rules can be applied in a limited fashion to the _mget, _msearch and _bulk APIs
	// (and only those) by enabling the ExtendedAcl option for the service. When it is enabled, users can use
	// these APIs as long as all operations only target indexes they have been granted access to.
	ExtendedAcl pulumi.BoolPtrInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringInput
	// Service to link the Elasticsearch ACLs to
	ServiceName pulumi.StringInput
}

func (ElasticSearchAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchAclArgs)(nil)).Elem()
}

type ElasticSearchAclInput interface {
	pulumi.Input

	ToElasticSearchAclOutput() ElasticSearchAclOutput
	ToElasticSearchAclOutputWithContext(ctx context.Context) ElasticSearchAclOutput
}

func (*ElasticSearchAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearchAcl)(nil)).Elem()
}

func (i *ElasticSearchAcl) ToElasticSearchAclOutput() ElasticSearchAclOutput {
	return i.ToElasticSearchAclOutputWithContext(context.Background())
}

func (i *ElasticSearchAcl) ToElasticSearchAclOutputWithContext(ctx context.Context) ElasticSearchAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclOutput)
}

// ElasticSearchAclArrayInput is an input type that accepts ElasticSearchAclArray and ElasticSearchAclArrayOutput values.
// You can construct a concrete instance of `ElasticSearchAclArrayInput` via:
//
//          ElasticSearchAclArray{ ElasticSearchAclArgs{...} }
type ElasticSearchAclArrayInput interface {
	pulumi.Input

	ToElasticSearchAclArrayOutput() ElasticSearchAclArrayOutput
	ToElasticSearchAclArrayOutputWithContext(context.Context) ElasticSearchAclArrayOutput
}

type ElasticSearchAclArray []ElasticSearchAclInput

func (ElasticSearchAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticSearchAcl)(nil)).Elem()
}

func (i ElasticSearchAclArray) ToElasticSearchAclArrayOutput() ElasticSearchAclArrayOutput {
	return i.ToElasticSearchAclArrayOutputWithContext(context.Background())
}

func (i ElasticSearchAclArray) ToElasticSearchAclArrayOutputWithContext(ctx context.Context) ElasticSearchAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclArrayOutput)
}

// ElasticSearchAclMapInput is an input type that accepts ElasticSearchAclMap and ElasticSearchAclMapOutput values.
// You can construct a concrete instance of `ElasticSearchAclMapInput` via:
//
//          ElasticSearchAclMap{ "key": ElasticSearchAclArgs{...} }
type ElasticSearchAclMapInput interface {
	pulumi.Input

	ToElasticSearchAclMapOutput() ElasticSearchAclMapOutput
	ToElasticSearchAclMapOutputWithContext(context.Context) ElasticSearchAclMapOutput
}

type ElasticSearchAclMap map[string]ElasticSearchAclInput

func (ElasticSearchAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticSearchAcl)(nil)).Elem()
}

func (i ElasticSearchAclMap) ToElasticSearchAclMapOutput() ElasticSearchAclMapOutput {
	return i.ToElasticSearchAclMapOutputWithContext(context.Background())
}

func (i ElasticSearchAclMap) ToElasticSearchAclMapOutputWithContext(ctx context.Context) ElasticSearchAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchAclMapOutput)
}

type ElasticSearchAclOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearchAcl)(nil)).Elem()
}

func (o ElasticSearchAclOutput) ToElasticSearchAclOutput() ElasticSearchAclOutput {
	return o
}

func (o ElasticSearchAclOutput) ToElasticSearchAclOutputWithContext(ctx context.Context) ElasticSearchAclOutput {
	return o
}

type ElasticSearchAclArrayOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticSearchAcl)(nil)).Elem()
}

func (o ElasticSearchAclArrayOutput) ToElasticSearchAclArrayOutput() ElasticSearchAclArrayOutput {
	return o
}

func (o ElasticSearchAclArrayOutput) ToElasticSearchAclArrayOutputWithContext(ctx context.Context) ElasticSearchAclArrayOutput {
	return o
}

func (o ElasticSearchAclArrayOutput) Index(i pulumi.IntInput) ElasticSearchAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticSearchAcl {
		return vs[0].([]*ElasticSearchAcl)[vs[1].(int)]
	}).(ElasticSearchAclOutput)
}

type ElasticSearchAclMapOutput struct{ *pulumi.OutputState }

func (ElasticSearchAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticSearchAcl)(nil)).Elem()
}

func (o ElasticSearchAclMapOutput) ToElasticSearchAclMapOutput() ElasticSearchAclMapOutput {
	return o
}

func (o ElasticSearchAclMapOutput) ToElasticSearchAclMapOutputWithContext(ctx context.Context) ElasticSearchAclMapOutput {
	return o
}

func (o ElasticSearchAclMapOutput) MapIndex(k pulumi.StringInput) ElasticSearchAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticSearchAcl {
		return vs[0].(map[string]*ElasticSearchAcl)[vs[1].(string)]
	}).(ElasticSearchAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSearchAclInput)(nil)).Elem(), &ElasticSearchAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSearchAclArrayInput)(nil)).Elem(), ElasticSearchAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSearchAclMapInput)(nil)).Elem(), ElasticSearchAclMap{})
	pulumi.RegisterOutputType(ElasticSearchAclOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclArrayOutput{})
	pulumi.RegisterOutputType(ElasticSearchAclMapOutput{})
}
