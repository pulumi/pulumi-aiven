// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Aiven for Apache Kafka® [connectors](https://aiven.io/docs/products/kafka/kafka-connect/concepts/list-of-connector-plugins).
// Source connectors let you import data from an external system into a Kafka topic. Sink connectors let you export data from a topic to an external system.
//
// You can use connectors with any Aiven for Apache Kafka® service that is integrated with an Aiven for Apache Kafka® Connect service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewKafkaConnector(ctx, "kafka-os-connector", &aiven.KafkaConnectorArgs{
//				Project:       pulumi.Any(exampleProject.Project),
//				ServiceName:   pulumi.Any(exampleKafka.ServiceName),
//				ConnectorName: pulumi.String("kafka-opensearch-connector"),
//				Config: pulumi.StringMap{
//					"name":                pulumi.String("kafka-opensearch-connector"),
//					"topics":              pulumi.Any(exampleTopic.TopicName),
//					"connector.class":     pulumi.String("io.aiven.kafka.connect.opensearch.OpensearchSinkConnector"),
//					"type.name":           pulumi.String("os-connector"),
//					"connection.url":      pulumi.Any(exampleOs.ServiceUri),
//					"connection.username": pulumi.Any(exampleOs.ServiceUsername),
//					"connection.password": pulumi.Any(exampleOs.ServicePassword),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/kafkaConnector:KafkaConnector kafka-os-connector PROJECT/SERVICE_NAME/CONNECTOR_NAME
// ```
type KafkaConnector struct {
	pulumi.CustomResourceState

	// The Kafka connector configuration parameters.
	Config pulumi.StringMapOutput `pulumi:"config"`
	// The Kafka connector name. Changing this property forces recreation of the resource.
	ConnectorName pulumi.StringOutput `pulumi:"connectorName"`
	// The Kafka connector author.
	PluginAuthor pulumi.StringOutput `pulumi:"pluginAuthor"`
	// The Kafka connector Java class.
	PluginClass pulumi.StringOutput `pulumi:"pluginClass"`
	// The Kafka connector documentation URL.
	PluginDocUrl pulumi.StringOutput `pulumi:"pluginDocUrl"`
	// The Kafka connector title.
	PluginTitle pulumi.StringOutput `pulumi:"pluginTitle"`
	// The Kafka connector type.
	PluginType pulumi.StringOutput `pulumi:"pluginType"`
	// The version of the Kafka connector.
	PluginVersion pulumi.StringOutput `pulumi:"pluginVersion"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// List of tasks of a connector.
	Tasks KafkaConnectorTaskArrayOutput `pulumi:"tasks"`
}

// NewKafkaConnector registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnector(ctx *pulumi.Context,
	name string, args *KafkaConnectorArgs, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.ConnectorName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorName'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaConnector
	err := ctx.RegisterResource("aiven:index/kafkaConnector:KafkaConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnector gets an existing KafkaConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectorState, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	var resource KafkaConnector
	err := ctx.ReadResource("aiven:index/kafkaConnector:KafkaConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnector resources.
type kafkaConnectorState struct {
	// The Kafka connector configuration parameters.
	Config map[string]string `pulumi:"config"`
	// The Kafka connector name. Changing this property forces recreation of the resource.
	ConnectorName *string `pulumi:"connectorName"`
	// The Kafka connector author.
	PluginAuthor *string `pulumi:"pluginAuthor"`
	// The Kafka connector Java class.
	PluginClass *string `pulumi:"pluginClass"`
	// The Kafka connector documentation URL.
	PluginDocUrl *string `pulumi:"pluginDocUrl"`
	// The Kafka connector title.
	PluginTitle *string `pulumi:"pluginTitle"`
	// The Kafka connector type.
	PluginType *string `pulumi:"pluginType"`
	// The version of the Kafka connector.
	PluginVersion *string `pulumi:"pluginVersion"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// List of tasks of a connector.
	Tasks []KafkaConnectorTask `pulumi:"tasks"`
}

type KafkaConnectorState struct {
	// The Kafka connector configuration parameters.
	Config pulumi.StringMapInput
	// The Kafka connector name. Changing this property forces recreation of the resource.
	ConnectorName pulumi.StringPtrInput
	// The Kafka connector author.
	PluginAuthor pulumi.StringPtrInput
	// The Kafka connector Java class.
	PluginClass pulumi.StringPtrInput
	// The Kafka connector documentation URL.
	PluginDocUrl pulumi.StringPtrInput
	// The Kafka connector title.
	PluginTitle pulumi.StringPtrInput
	// The Kafka connector type.
	PluginType pulumi.StringPtrInput
	// The version of the Kafka connector.
	PluginVersion pulumi.StringPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// List of tasks of a connector.
	Tasks KafkaConnectorTaskArrayInput
}

func (KafkaConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorState)(nil)).Elem()
}

type kafkaConnectorArgs struct {
	// The Kafka connector configuration parameters.
	Config map[string]string `pulumi:"config"`
	// The Kafka connector name. Changing this property forces recreation of the resource.
	ConnectorName string `pulumi:"connectorName"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a KafkaConnector resource.
type KafkaConnectorArgs struct {
	// The Kafka connector configuration parameters.
	Config pulumi.StringMapInput
	// The Kafka connector name. Changing this property forces recreation of the resource.
	ConnectorName pulumi.StringInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringInput
}

func (KafkaConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorArgs)(nil)).Elem()
}

type KafkaConnectorInput interface {
	pulumi.Input

	ToKafkaConnectorOutput() KafkaConnectorOutput
	ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput
}

func (*KafkaConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (i *KafkaConnector) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return i.ToKafkaConnectorOutputWithContext(context.Background())
}

func (i *KafkaConnector) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorOutput)
}

// KafkaConnectorArrayInput is an input type that accepts KafkaConnectorArray and KafkaConnectorArrayOutput values.
// You can construct a concrete instance of `KafkaConnectorArrayInput` via:
//
//	KafkaConnectorArray{ KafkaConnectorArgs{...} }
type KafkaConnectorArrayInput interface {
	pulumi.Input

	ToKafkaConnectorArrayOutput() KafkaConnectorArrayOutput
	ToKafkaConnectorArrayOutputWithContext(context.Context) KafkaConnectorArrayOutput
}

type KafkaConnectorArray []KafkaConnectorInput

func (KafkaConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnector)(nil)).Elem()
}

func (i KafkaConnectorArray) ToKafkaConnectorArrayOutput() KafkaConnectorArrayOutput {
	return i.ToKafkaConnectorArrayOutputWithContext(context.Background())
}

func (i KafkaConnectorArray) ToKafkaConnectorArrayOutputWithContext(ctx context.Context) KafkaConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorArrayOutput)
}

// KafkaConnectorMapInput is an input type that accepts KafkaConnectorMap and KafkaConnectorMapOutput values.
// You can construct a concrete instance of `KafkaConnectorMapInput` via:
//
//	KafkaConnectorMap{ "key": KafkaConnectorArgs{...} }
type KafkaConnectorMapInput interface {
	pulumi.Input

	ToKafkaConnectorMapOutput() KafkaConnectorMapOutput
	ToKafkaConnectorMapOutputWithContext(context.Context) KafkaConnectorMapOutput
}

type KafkaConnectorMap map[string]KafkaConnectorInput

func (KafkaConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnector)(nil)).Elem()
}

func (i KafkaConnectorMap) ToKafkaConnectorMapOutput() KafkaConnectorMapOutput {
	return i.ToKafkaConnectorMapOutputWithContext(context.Background())
}

func (i KafkaConnectorMap) ToKafkaConnectorMapOutputWithContext(ctx context.Context) KafkaConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorMapOutput)
}

type KafkaConnectorOutput struct{ *pulumi.OutputState }

func (KafkaConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return o
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return o
}

// The Kafka connector configuration parameters.
func (o KafkaConnectorOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

// The Kafka connector name. Changing this property forces recreation of the resource.
func (o KafkaConnectorOutput) ConnectorName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.ConnectorName }).(pulumi.StringOutput)
}

// The Kafka connector author.
func (o KafkaConnectorOutput) PluginAuthor() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.PluginAuthor }).(pulumi.StringOutput)
}

// The Kafka connector Java class.
func (o KafkaConnectorOutput) PluginClass() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.PluginClass }).(pulumi.StringOutput)
}

// The Kafka connector documentation URL.
func (o KafkaConnectorOutput) PluginDocUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.PluginDocUrl }).(pulumi.StringOutput)
}

// The Kafka connector title.
func (o KafkaConnectorOutput) PluginTitle() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.PluginTitle }).(pulumi.StringOutput)
}

// The Kafka connector type.
func (o KafkaConnectorOutput) PluginType() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.PluginType }).(pulumi.StringOutput)
}

// The version of the Kafka connector.
func (o KafkaConnectorOutput) PluginVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.PluginVersion }).(pulumi.StringOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o KafkaConnectorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o KafkaConnectorOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// List of tasks of a connector.
func (o KafkaConnectorOutput) Tasks() KafkaConnectorTaskArrayOutput {
	return o.ApplyT(func(v *KafkaConnector) KafkaConnectorTaskArrayOutput { return v.Tasks }).(KafkaConnectorTaskArrayOutput)
}

type KafkaConnectorArrayOutput struct{ *pulumi.OutputState }

func (KafkaConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorArrayOutput) ToKafkaConnectorArrayOutput() KafkaConnectorArrayOutput {
	return o
}

func (o KafkaConnectorArrayOutput) ToKafkaConnectorArrayOutputWithContext(ctx context.Context) KafkaConnectorArrayOutput {
	return o
}

func (o KafkaConnectorArrayOutput) Index(i pulumi.IntInput) KafkaConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaConnector {
		return vs[0].([]*KafkaConnector)[vs[1].(int)]
	}).(KafkaConnectorOutput)
}

type KafkaConnectorMapOutput struct{ *pulumi.OutputState }

func (KafkaConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorMapOutput) ToKafkaConnectorMapOutput() KafkaConnectorMapOutput {
	return o
}

func (o KafkaConnectorMapOutput) ToKafkaConnectorMapOutputWithContext(ctx context.Context) KafkaConnectorMapOutput {
	return o
}

func (o KafkaConnectorMapOutput) MapIndex(k pulumi.StringInput) KafkaConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaConnector {
		return vs[0].(map[string]*KafkaConnector)[vs[1].(string)]
	}).(KafkaConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorInput)(nil)).Elem(), &KafkaConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorArrayInput)(nil)).Elem(), KafkaConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorMapInput)(nil)).Elem(), KafkaConnectorMap{})
	pulumi.RegisterOutputType(KafkaConnectorOutput{})
	pulumi.RegisterOutputType(KafkaConnectorArrayOutput{})
	pulumi.RegisterOutputType(KafkaConnectorMapOutput{})
}
