// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Kafka connectors Resource
//
// The Kafka connectors resource allows the creation and management of Aiven Kafka connectors.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewKafkaConnector(ctx, "kafka_es_con1", &aiven.KafkaConnectorArgs{
// 			Project:       pulumi.Any(aiven_project.Kafka - con - project1.Project),
// 			ServiceName:   pulumi.Any(aiven_service.Kafka - service1.Service_name),
// 			ConnectorName: pulumi.String("kafka-es-con1"),
// 			Config: pulumi.StringMap{
// 				"topics":          pulumi.Any(aiven_kafka_topic.Kafka - topic1.Topic_name),
// 				"connector.class": pulumi.String("io.aiven.connect.elasticsearch.ElasticsearchSinkConnector"),
// 				"type.name":       pulumi.String("es-connector"),
// 				"name":            pulumi.String("kafka-es-con1"),
// 				"connection.url":  pulumi.Any(aiven_service.Es - service1.Service_uri),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// * `project` and `serviceName`- (Required) define the project and service the Kafka Connectors belongs to.
// They should be defined using reference as shown above to set up dependencies correctly.
//
// * `connectorName`- (Required) is the Kafka connector name.
//
// * `config`- (Required)is the Kafka Connector configuration parameters, where `topics`, `connector.class` and `name`
// are required parameters but the rest of them are connector type specific.
type KafkaConnector struct {
	pulumi.CustomResourceState

	// Kafka Connector configuration parameters
	Config pulumi.StringMapOutput `pulumi:"config"`
	// Kafka connector name
	ConnectorName pulumi.StringOutput `pulumi:"connectorName"`
	// Kafka connector author.
	PluginAuthor pulumi.StringOutput `pulumi:"pluginAuthor"`
	// Kafka connector Java class.
	PluginClass pulumi.StringOutput `pulumi:"pluginClass"`
	// Kafka connector documentation URL.
	PluginDocUrl pulumi.StringOutput `pulumi:"pluginDocUrl"`
	// Kafka connector title.
	PluginTitle pulumi.StringOutput `pulumi:"pluginTitle"`
	// Kafka connector type.
	PluginType pulumi.StringOutput `pulumi:"pluginType"`
	// Kafka connector version.
	PluginVersion pulumi.StringOutput `pulumi:"pluginVersion"`
	// Project to link the kafka connector to
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the kafka connector to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// List of tasks of a connector, each element contains `connector`
	// (Related connector name) and `task` (Task id / number).
	Tasks KafkaConnectorTaskArrayOutput `pulumi:"tasks"`
}

// NewKafkaConnector registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnector(ctx *pulumi.Context,
	name string, args *KafkaConnectorArgs, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.ConnectorName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorName'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource KafkaConnector
	err := ctx.RegisterResource("aiven:index/kafkaConnector:KafkaConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnector gets an existing KafkaConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectorState, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	var resource KafkaConnector
	err := ctx.ReadResource("aiven:index/kafkaConnector:KafkaConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnector resources.
type kafkaConnectorState struct {
	// Kafka Connector configuration parameters
	Config map[string]string `pulumi:"config"`
	// Kafka connector name
	ConnectorName *string `pulumi:"connectorName"`
	// Kafka connector author.
	PluginAuthor *string `pulumi:"pluginAuthor"`
	// Kafka connector Java class.
	PluginClass *string `pulumi:"pluginClass"`
	// Kafka connector documentation URL.
	PluginDocUrl *string `pulumi:"pluginDocUrl"`
	// Kafka connector title.
	PluginTitle *string `pulumi:"pluginTitle"`
	// Kafka connector type.
	PluginType *string `pulumi:"pluginType"`
	// Kafka connector version.
	PluginVersion *string `pulumi:"pluginVersion"`
	// Project to link the kafka connector to
	Project *string `pulumi:"project"`
	// Service to link the kafka connector to
	ServiceName *string `pulumi:"serviceName"`
	// List of tasks of a connector, each element contains `connector`
	// (Related connector name) and `task` (Task id / number).
	Tasks []KafkaConnectorTask `pulumi:"tasks"`
}

type KafkaConnectorState struct {
	// Kafka Connector configuration parameters
	Config pulumi.StringMapInput
	// Kafka connector name
	ConnectorName pulumi.StringPtrInput
	// Kafka connector author.
	PluginAuthor pulumi.StringPtrInput
	// Kafka connector Java class.
	PluginClass pulumi.StringPtrInput
	// Kafka connector documentation URL.
	PluginDocUrl pulumi.StringPtrInput
	// Kafka connector title.
	PluginTitle pulumi.StringPtrInput
	// Kafka connector type.
	PluginType pulumi.StringPtrInput
	// Kafka connector version.
	PluginVersion pulumi.StringPtrInput
	// Project to link the kafka connector to
	Project pulumi.StringPtrInput
	// Service to link the kafka connector to
	ServiceName pulumi.StringPtrInput
	// List of tasks of a connector, each element contains `connector`
	// (Related connector name) and `task` (Task id / number).
	Tasks KafkaConnectorTaskArrayInput
}

func (KafkaConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorState)(nil)).Elem()
}

type kafkaConnectorArgs struct {
	// Kafka Connector configuration parameters
	Config map[string]string `pulumi:"config"`
	// Kafka connector name
	ConnectorName string `pulumi:"connectorName"`
	// Project to link the kafka connector to
	Project string `pulumi:"project"`
	// Service to link the kafka connector to
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a KafkaConnector resource.
type KafkaConnectorArgs struct {
	// Kafka Connector configuration parameters
	Config pulumi.StringMapInput
	// Kafka connector name
	ConnectorName pulumi.StringInput
	// Project to link the kafka connector to
	Project pulumi.StringInput
	// Service to link the kafka connector to
	ServiceName pulumi.StringInput
}

func (KafkaConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorArgs)(nil)).Elem()
}

type KafkaConnectorInput interface {
	pulumi.Input

	ToKafkaConnectorOutput() KafkaConnectorOutput
	ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput
}

func (*KafkaConnector) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaConnector)(nil))
}

func (i *KafkaConnector) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return i.ToKafkaConnectorOutputWithContext(context.Background())
}

func (i *KafkaConnector) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorOutput)
}

type KafkaConnectorOutput struct {
	*pulumi.OutputState
}

func (KafkaConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaConnector)(nil))
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return o
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KafkaConnectorOutput{})
}
