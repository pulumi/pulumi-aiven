// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type KafkaConnector struct {
	s *pulumi.ResourceState
}

// NewKafkaConnector registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnector(ctx *pulumi.Context,
	name string, args *KafkaConnectorArgs, opts ...pulumi.ResourceOpt) (*KafkaConnector, error) {
	if args == nil || args.Config == nil {
		return nil, errors.New("missing required argument 'Config'")
	}
	if args == nil || args.ConnectorName == nil {
		return nil, errors.New("missing required argument 'ConnectorName'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["config"] = nil
		inputs["connectorName"] = nil
		inputs["project"] = nil
		inputs["serviceName"] = nil
	} else {
		inputs["config"] = args.Config
		inputs["connectorName"] = args.ConnectorName
		inputs["project"] = args.Project
		inputs["serviceName"] = args.ServiceName
	}
	inputs["pluginAuthor"] = nil
	inputs["pluginClass"] = nil
	inputs["pluginDocUrl"] = nil
	inputs["pluginTitle"] = nil
	inputs["pluginType"] = nil
	inputs["pluginVersion"] = nil
	inputs["tasks"] = nil
	s, err := ctx.RegisterResource("aiven:index/kafkaConnector:KafkaConnector", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KafkaConnector{s: s}, nil
}

// GetKafkaConnector gets an existing KafkaConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnector(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KafkaConnectorState, opts ...pulumi.ResourceOpt) (*KafkaConnector, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["config"] = state.Config
		inputs["connectorName"] = state.ConnectorName
		inputs["pluginAuthor"] = state.PluginAuthor
		inputs["pluginClass"] = state.PluginClass
		inputs["pluginDocUrl"] = state.PluginDocUrl
		inputs["pluginTitle"] = state.PluginTitle
		inputs["pluginType"] = state.PluginType
		inputs["pluginVersion"] = state.PluginVersion
		inputs["project"] = state.Project
		inputs["serviceName"] = state.ServiceName
		inputs["tasks"] = state.Tasks
	}
	s, err := ctx.ReadResource("aiven:index/kafkaConnector:KafkaConnector", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KafkaConnector{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *KafkaConnector) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *KafkaConnector) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Kafka Connector configuration parameters
func (r *KafkaConnector) Config() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["config"])
}

// Kafka connector name
func (r *KafkaConnector) ConnectorName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["connectorName"])
}

// Kafka connector author
func (r *KafkaConnector) PluginAuthor() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pluginAuthor"])
}

// Kafka connector Java class
func (r *KafkaConnector) PluginClass() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pluginClass"])
}

// Kafka connector documentation URL
func (r *KafkaConnector) PluginDocUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pluginDocUrl"])
}

// Kafka connector title
func (r *KafkaConnector) PluginTitle() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pluginTitle"])
}

// Kafka connector type
func (r *KafkaConnector) PluginType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pluginType"])
}

// Kafka connector version
func (r *KafkaConnector) PluginVersion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pluginVersion"])
}

// Project to link the kafka connector to
func (r *KafkaConnector) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Service to link the kafka connector to
func (r *KafkaConnector) ServiceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceName"])
}

// List of tasks of a connector
func (r *KafkaConnector) Tasks() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tasks"])
}

// Input properties used for looking up and filtering KafkaConnector resources.
type KafkaConnectorState struct {
	// Kafka Connector configuration parameters
	Config interface{}
	// Kafka connector name
	ConnectorName interface{}
	// Kafka connector author
	PluginAuthor interface{}
	// Kafka connector Java class
	PluginClass interface{}
	// Kafka connector documentation URL
	PluginDocUrl interface{}
	// Kafka connector title
	PluginTitle interface{}
	// Kafka connector type
	PluginType interface{}
	// Kafka connector version
	PluginVersion interface{}
	// Project to link the kafka connector to
	Project interface{}
	// Service to link the kafka connector to
	ServiceName interface{}
	// List of tasks of a connector
	Tasks interface{}
}

// The set of arguments for constructing a KafkaConnector resource.
type KafkaConnectorArgs struct {
	// Kafka Connector configuration parameters
	Config interface{}
	// Kafka connector name
	ConnectorName interface{}
	// Project to link the kafka connector to
	Project interface{}
	// Service to link the kafka connector to
	ServiceName interface{}
}
