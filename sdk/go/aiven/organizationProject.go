// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages an [Aiven project](https://aiven.io/docs/platform/concepts/orgs-units-projects#projects).
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/organizationProject:OrganizationProject example_project ORGANIZATION_ID/PROJECT_ID
// ```
type OrganizationProject struct {
	pulumi.CustomResourceState

	// Valid port number (1-65535) to use as a base for service port allocation.
	BasePort pulumi.IntOutput `pulumi:"basePort"`
	// Billing group ID to assign to the project. It's required when moving projects between organizations.
	BillingGroupId pulumi.StringOutput `pulumi:"billingGroupId"`
	// PEM encoded certificate.
	CaCert pulumi.StringOutput `pulumi:"caCert"`
	// ID of an organization. Maximum length: `36`.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Tags are key-value pairs that allow you to categorize projects.
	Tags OrganizationProjectTagArrayOutput `pulumi:"tags"`
	// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
	TechnicalEmails pulumi.StringArrayOutput             `pulumi:"technicalEmails"`
	Timeouts        OrganizationProjectTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewOrganizationProject registers a new resource with the given unique name, arguments, and options.
func NewOrganizationProject(ctx *pulumi.Context,
	name string, args *OrganizationProjectArgs, opts ...pulumi.ResourceOption) (*OrganizationProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BillingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'BillingGroupId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.ParentId == nil {
		return nil, errors.New("invalid value for required argument 'ParentId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"caCert",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationProject
	err := ctx.RegisterResource("aiven:index/organizationProject:OrganizationProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationProject gets an existing OrganizationProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationProjectState, opts ...pulumi.ResourceOption) (*OrganizationProject, error) {
	var resource OrganizationProject
	err := ctx.ReadResource("aiven:index/organizationProject:OrganizationProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationProject resources.
type organizationProjectState struct {
	// Valid port number (1-65535) to use as a base for service port allocation.
	BasePort *int `pulumi:"basePort"`
	// Billing group ID to assign to the project. It's required when moving projects between organizations.
	BillingGroupId *string `pulumi:"billingGroupId"`
	// PEM encoded certificate.
	CaCert *string `pulumi:"caCert"`
	// ID of an organization. Maximum length: `36`.
	OrganizationId *string `pulumi:"organizationId"`
	// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
	ParentId *string `pulumi:"parentId"`
	// The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
	ProjectId *string `pulumi:"projectId"`
	// Tags are key-value pairs that allow you to categorize projects.
	Tags []OrganizationProjectTag `pulumi:"tags"`
	// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
	TechnicalEmails []string                     `pulumi:"technicalEmails"`
	Timeouts        *OrganizationProjectTimeouts `pulumi:"timeouts"`
}

type OrganizationProjectState struct {
	// Valid port number (1-65535) to use as a base for service port allocation.
	BasePort pulumi.IntPtrInput
	// Billing group ID to assign to the project. It's required when moving projects between organizations.
	BillingGroupId pulumi.StringPtrInput
	// PEM encoded certificate.
	CaCert pulumi.StringPtrInput
	// ID of an organization. Maximum length: `36`.
	OrganizationId pulumi.StringPtrInput
	// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
	ParentId pulumi.StringPtrInput
	// The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
	ProjectId pulumi.StringPtrInput
	// Tags are key-value pairs that allow you to categorize projects.
	Tags OrganizationProjectTagArrayInput
	// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
	TechnicalEmails pulumi.StringArrayInput
	Timeouts        OrganizationProjectTimeoutsPtrInput
}

func (OrganizationProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationProjectState)(nil)).Elem()
}

type organizationProjectArgs struct {
	// Valid port number (1-65535) to use as a base for service port allocation.
	BasePort *int `pulumi:"basePort"`
	// Billing group ID to assign to the project. It's required when moving projects between organizations.
	BillingGroupId string `pulumi:"billingGroupId"`
	// ID of an organization. Maximum length: `36`.
	OrganizationId string `pulumi:"organizationId"`
	// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
	ParentId string `pulumi:"parentId"`
	// The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
	ProjectId string `pulumi:"projectId"`
	// Tags are key-value pairs that allow you to categorize projects.
	Tags []OrganizationProjectTag `pulumi:"tags"`
	// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
	TechnicalEmails []string                     `pulumi:"technicalEmails"`
	Timeouts        *OrganizationProjectTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a OrganizationProject resource.
type OrganizationProjectArgs struct {
	// Valid port number (1-65535) to use as a base for service port allocation.
	BasePort pulumi.IntPtrInput
	// Billing group ID to assign to the project. It's required when moving projects between organizations.
	BillingGroupId pulumi.StringInput
	// ID of an organization. Maximum length: `36`.
	OrganizationId pulumi.StringInput
	// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
	ParentId pulumi.StringInput
	// The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
	ProjectId pulumi.StringInput
	// Tags are key-value pairs that allow you to categorize projects.
	Tags OrganizationProjectTagArrayInput
	// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
	TechnicalEmails pulumi.StringArrayInput
	Timeouts        OrganizationProjectTimeoutsPtrInput
}

func (OrganizationProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationProjectArgs)(nil)).Elem()
}

type OrganizationProjectInput interface {
	pulumi.Input

	ToOrganizationProjectOutput() OrganizationProjectOutput
	ToOrganizationProjectOutputWithContext(ctx context.Context) OrganizationProjectOutput
}

func (*OrganizationProject) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationProject)(nil)).Elem()
}

func (i *OrganizationProject) ToOrganizationProjectOutput() OrganizationProjectOutput {
	return i.ToOrganizationProjectOutputWithContext(context.Background())
}

func (i *OrganizationProject) ToOrganizationProjectOutputWithContext(ctx context.Context) OrganizationProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationProjectOutput)
}

// OrganizationProjectArrayInput is an input type that accepts OrganizationProjectArray and OrganizationProjectArrayOutput values.
// You can construct a concrete instance of `OrganizationProjectArrayInput` via:
//
//	OrganizationProjectArray{ OrganizationProjectArgs{...} }
type OrganizationProjectArrayInput interface {
	pulumi.Input

	ToOrganizationProjectArrayOutput() OrganizationProjectArrayOutput
	ToOrganizationProjectArrayOutputWithContext(context.Context) OrganizationProjectArrayOutput
}

type OrganizationProjectArray []OrganizationProjectInput

func (OrganizationProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationProject)(nil)).Elem()
}

func (i OrganizationProjectArray) ToOrganizationProjectArrayOutput() OrganizationProjectArrayOutput {
	return i.ToOrganizationProjectArrayOutputWithContext(context.Background())
}

func (i OrganizationProjectArray) ToOrganizationProjectArrayOutputWithContext(ctx context.Context) OrganizationProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationProjectArrayOutput)
}

// OrganizationProjectMapInput is an input type that accepts OrganizationProjectMap and OrganizationProjectMapOutput values.
// You can construct a concrete instance of `OrganizationProjectMapInput` via:
//
//	OrganizationProjectMap{ "key": OrganizationProjectArgs{...} }
type OrganizationProjectMapInput interface {
	pulumi.Input

	ToOrganizationProjectMapOutput() OrganizationProjectMapOutput
	ToOrganizationProjectMapOutputWithContext(context.Context) OrganizationProjectMapOutput
}

type OrganizationProjectMap map[string]OrganizationProjectInput

func (OrganizationProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationProject)(nil)).Elem()
}

func (i OrganizationProjectMap) ToOrganizationProjectMapOutput() OrganizationProjectMapOutput {
	return i.ToOrganizationProjectMapOutputWithContext(context.Background())
}

func (i OrganizationProjectMap) ToOrganizationProjectMapOutputWithContext(ctx context.Context) OrganizationProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationProjectMapOutput)
}

type OrganizationProjectOutput struct{ *pulumi.OutputState }

func (OrganizationProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationProject)(nil)).Elem()
}

func (o OrganizationProjectOutput) ToOrganizationProjectOutput() OrganizationProjectOutput {
	return o
}

func (o OrganizationProjectOutput) ToOrganizationProjectOutputWithContext(ctx context.Context) OrganizationProjectOutput {
	return o
}

// Valid port number (1-65535) to use as a base for service port allocation.
func (o OrganizationProjectOutput) BasePort() pulumi.IntOutput {
	return o.ApplyT(func(v *OrganizationProject) pulumi.IntOutput { return v.BasePort }).(pulumi.IntOutput)
}

// Billing group ID to assign to the project. It's required when moving projects between organizations.
func (o OrganizationProjectOutput) BillingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationProject) pulumi.StringOutput { return v.BillingGroupId }).(pulumi.StringOutput)
}

// PEM encoded certificate.
func (o OrganizationProjectOutput) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationProject) pulumi.StringOutput { return v.CaCert }).(pulumi.StringOutput)
}

// ID of an organization. Maximum length: `36`.
func (o OrganizationProjectOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationProject) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
func (o OrganizationProjectOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationProject) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

// The name of the project. Names must be globally unique among all Aiven customers. Names must begin with a letter (a-z), and consist of letters, numbers, and dashes. It's recommended to use a random string or your organization name as a prefix or suffix. Changing this property forces recreation of the resource. Changing this property forces recreation of the resource.
func (o OrganizationProjectOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationProject) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags are key-value pairs that allow you to categorize projects.
func (o OrganizationProjectOutput) Tags() OrganizationProjectTagArrayOutput {
	return o.ApplyT(func(v *OrganizationProject) OrganizationProjectTagArrayOutput { return v.Tags }).(OrganizationProjectTagArrayOutput)
}

// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
func (o OrganizationProjectOutput) TechnicalEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationProject) pulumi.StringArrayOutput { return v.TechnicalEmails }).(pulumi.StringArrayOutput)
}

func (o OrganizationProjectOutput) Timeouts() OrganizationProjectTimeoutsPtrOutput {
	return o.ApplyT(func(v *OrganizationProject) OrganizationProjectTimeoutsPtrOutput { return v.Timeouts }).(OrganizationProjectTimeoutsPtrOutput)
}

type OrganizationProjectArrayOutput struct{ *pulumi.OutputState }

func (OrganizationProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationProject)(nil)).Elem()
}

func (o OrganizationProjectArrayOutput) ToOrganizationProjectArrayOutput() OrganizationProjectArrayOutput {
	return o
}

func (o OrganizationProjectArrayOutput) ToOrganizationProjectArrayOutputWithContext(ctx context.Context) OrganizationProjectArrayOutput {
	return o
}

func (o OrganizationProjectArrayOutput) Index(i pulumi.IntInput) OrganizationProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationProject {
		return vs[0].([]*OrganizationProject)[vs[1].(int)]
	}).(OrganizationProjectOutput)
}

type OrganizationProjectMapOutput struct{ *pulumi.OutputState }

func (OrganizationProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationProject)(nil)).Elem()
}

func (o OrganizationProjectMapOutput) ToOrganizationProjectMapOutput() OrganizationProjectMapOutput {
	return o
}

func (o OrganizationProjectMapOutput) ToOrganizationProjectMapOutputWithContext(ctx context.Context) OrganizationProjectMapOutput {
	return o
}

func (o OrganizationProjectMapOutput) MapIndex(k pulumi.StringInput) OrganizationProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationProject {
		return vs[0].(map[string]*OrganizationProject)[vs[1].(string)]
	}).(OrganizationProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationProjectInput)(nil)).Elem(), &OrganizationProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationProjectArrayInput)(nil)).Elem(), OrganizationProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationProjectMapInput)(nil)).Elem(), OrganizationProjectMap{})
	pulumi.RegisterOutputType(OrganizationProjectOutput{})
	pulumi.RegisterOutputType(OrganizationProjectArrayOutput{})
	pulumi.RegisterOutputType(OrganizationProjectMapOutput{})
}
