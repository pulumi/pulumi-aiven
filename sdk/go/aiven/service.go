// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Service struct {
	s *pulumi.ResourceState
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOpt) (*Service, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.ServiceType == nil {
		return nil, errors.New("missing required argument 'ServiceType'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cassandra"] = nil
		inputs["cassandraUserConfig"] = nil
		inputs["cloudName"] = nil
		inputs["elasticsearch"] = nil
		inputs["elasticsearchUserConfig"] = nil
		inputs["grafana"] = nil
		inputs["grafanaUserConfig"] = nil
		inputs["influxdb"] = nil
		inputs["influxdbUserConfig"] = nil
		inputs["kafka"] = nil
		inputs["kafkaUserConfig"] = nil
		inputs["maintenanceWindowDow"] = nil
		inputs["maintenanceWindowTime"] = nil
		inputs["mysql"] = nil
		inputs["mysqlUserConfig"] = nil
		inputs["pg"] = nil
		inputs["pgUserConfig"] = nil
		inputs["plan"] = nil
		inputs["project"] = nil
		inputs["projectVpcId"] = nil
		inputs["redis"] = nil
		inputs["redisUserConfig"] = nil
		inputs["serviceIntegrations"] = nil
		inputs["serviceName"] = nil
		inputs["serviceType"] = nil
		inputs["terminationProtection"] = nil
	} else {
		inputs["cassandra"] = args.Cassandra
		inputs["cassandraUserConfig"] = args.CassandraUserConfig
		inputs["cloudName"] = args.CloudName
		inputs["elasticsearch"] = args.Elasticsearch
		inputs["elasticsearchUserConfig"] = args.ElasticsearchUserConfig
		inputs["grafana"] = args.Grafana
		inputs["grafanaUserConfig"] = args.GrafanaUserConfig
		inputs["influxdb"] = args.Influxdb
		inputs["influxdbUserConfig"] = args.InfluxdbUserConfig
		inputs["kafka"] = args.Kafka
		inputs["kafkaUserConfig"] = args.KafkaUserConfig
		inputs["maintenanceWindowDow"] = args.MaintenanceWindowDow
		inputs["maintenanceWindowTime"] = args.MaintenanceWindowTime
		inputs["mysql"] = args.Mysql
		inputs["mysqlUserConfig"] = args.MysqlUserConfig
		inputs["pg"] = args.Pg
		inputs["pgUserConfig"] = args.PgUserConfig
		inputs["plan"] = args.Plan
		inputs["project"] = args.Project
		inputs["projectVpcId"] = args.ProjectVpcId
		inputs["redis"] = args.Redis
		inputs["redisUserConfig"] = args.RedisUserConfig
		inputs["serviceIntegrations"] = args.ServiceIntegrations
		inputs["serviceName"] = args.ServiceName
		inputs["serviceType"] = args.ServiceType
		inputs["terminationProtection"] = args.TerminationProtection
	}
	inputs["serviceHost"] = nil
	inputs["servicePassword"] = nil
	inputs["servicePort"] = nil
	inputs["serviceUri"] = nil
	inputs["serviceUsername"] = nil
	inputs["state"] = nil
	s, err := ctx.RegisterResource("aiven:index/service:Service", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceState, opts ...pulumi.ResourceOpt) (*Service, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cassandra"] = state.Cassandra
		inputs["cassandraUserConfig"] = state.CassandraUserConfig
		inputs["cloudName"] = state.CloudName
		inputs["elasticsearch"] = state.Elasticsearch
		inputs["elasticsearchUserConfig"] = state.ElasticsearchUserConfig
		inputs["grafana"] = state.Grafana
		inputs["grafanaUserConfig"] = state.GrafanaUserConfig
		inputs["influxdb"] = state.Influxdb
		inputs["influxdbUserConfig"] = state.InfluxdbUserConfig
		inputs["kafka"] = state.Kafka
		inputs["kafkaUserConfig"] = state.KafkaUserConfig
		inputs["maintenanceWindowDow"] = state.MaintenanceWindowDow
		inputs["maintenanceWindowTime"] = state.MaintenanceWindowTime
		inputs["mysql"] = state.Mysql
		inputs["mysqlUserConfig"] = state.MysqlUserConfig
		inputs["pg"] = state.Pg
		inputs["pgUserConfig"] = state.PgUserConfig
		inputs["plan"] = state.Plan
		inputs["project"] = state.Project
		inputs["projectVpcId"] = state.ProjectVpcId
		inputs["redis"] = state.Redis
		inputs["redisUserConfig"] = state.RedisUserConfig
		inputs["serviceHost"] = state.ServiceHost
		inputs["serviceIntegrations"] = state.ServiceIntegrations
		inputs["serviceName"] = state.ServiceName
		inputs["servicePassword"] = state.ServicePassword
		inputs["servicePort"] = state.ServicePort
		inputs["serviceType"] = state.ServiceType
		inputs["serviceUri"] = state.ServiceUri
		inputs["serviceUsername"] = state.ServiceUsername
		inputs["state"] = state.State
		inputs["terminationProtection"] = state.TerminationProtection
	}
	s, err := ctx.ReadResource("aiven:index/service:Service", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Service) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Service) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Cassandra specific server provided values
func (r *Service) Cassandra() *pulumi.Output {
	return r.s.State["cassandra"]
}

// Cassandra specific user configurable settings
func (r *Service) CassandraUserConfig() *pulumi.Output {
	return r.s.State["cassandraUserConfig"]
}

// Cloud the service runs in
func (r *Service) CloudName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cloudName"])
}

// Elasticsearch specific server provided values
func (r *Service) Elasticsearch() *pulumi.Output {
	return r.s.State["elasticsearch"]
}

// Elasticsearch specific user configurable settings
func (r *Service) ElasticsearchUserConfig() *pulumi.Output {
	return r.s.State["elasticsearchUserConfig"]
}

// Grafana specific server provided values
func (r *Service) Grafana() *pulumi.Output {
	return r.s.State["grafana"]
}

// Grafana specific user configurable settings
func (r *Service) GrafanaUserConfig() *pulumi.Output {
	return r.s.State["grafanaUserConfig"]
}

// InfluxDB specific server provided values
func (r *Service) Influxdb() *pulumi.Output {
	return r.s.State["influxdb"]
}

// InfluxDB specific user configurable settings
func (r *Service) InfluxdbUserConfig() *pulumi.Output {
	return r.s.State["influxdbUserConfig"]
}

// Kafka specific server provided values
func (r *Service) Kafka() *pulumi.Output {
	return r.s.State["kafka"]
}

// Kafka specific user configurable settings
func (r *Service) KafkaUserConfig() *pulumi.Output {
	return r.s.State["kafkaUserConfig"]
}

// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
func (r *Service) MaintenanceWindowDow() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["maintenanceWindowDow"])
}

// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
func (r *Service) MaintenanceWindowTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["maintenanceWindowTime"])
}

// MySQL specific server provided values
func (r *Service) Mysql() *pulumi.Output {
	return r.s.State["mysql"]
}

// MySQL specific user configurable settings
func (r *Service) MysqlUserConfig() *pulumi.Output {
	return r.s.State["mysqlUserConfig"]
}

// PostgreSQL specific server provided values
func (r *Service) Pg() *pulumi.Output {
	return r.s.State["pg"]
}

// PostgreSQL specific user configurable settings
func (r *Service) PgUserConfig() *pulumi.Output {
	return r.s.State["pgUserConfig"]
}

// Subscription plan
func (r *Service) Plan() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["plan"])
}

// Target project
func (r *Service) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Identifier of the VPC the service should be in, if any
func (r *Service) ProjectVpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectVpcId"])
}

// Redis specific server provided values
func (r *Service) Redis() *pulumi.Output {
	return r.s.State["redis"]
}

// Redis specific user configurable settings
func (r *Service) RedisUserConfig() *pulumi.Output {
	return r.s.State["redisUserConfig"]
}

// Service hostname
func (r *Service) ServiceHost() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceHost"])
}

// Service integrations to specify when creating a service. Not applied after initial service creation
func (r *Service) ServiceIntegrations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["serviceIntegrations"])
}

// Service name
func (r *Service) ServiceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceName"])
}

// Password used for connecting to the service, if applicable
func (r *Service) ServicePassword() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["servicePassword"])
}

// Service port
func (r *Service) ServicePort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["servicePort"])
}

// Service type code
func (r *Service) ServiceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceType"])
}

// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
func (r *Service) ServiceUri() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceUri"])
}

// Username used for connecting to the service, if applicable
func (r *Service) ServiceUsername() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceUsername"])
}

// Service state
func (r *Service) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// Prevent service from being deleted. It is recommended to have this enabled for all services.
func (r *Service) TerminationProtection() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["terminationProtection"])
}

// Input properties used for looking up and filtering Service resources.
type ServiceState struct {
	// Cassandra specific server provided values
	Cassandra interface{}
	// Cassandra specific user configurable settings
	CassandraUserConfig interface{}
	// Cloud the service runs in
	CloudName interface{}
	// Elasticsearch specific server provided values
	Elasticsearch interface{}
	// Elasticsearch specific user configurable settings
	ElasticsearchUserConfig interface{}
	// Grafana specific server provided values
	Grafana interface{}
	// Grafana specific user configurable settings
	GrafanaUserConfig interface{}
	// InfluxDB specific server provided values
	Influxdb interface{}
	// InfluxDB specific user configurable settings
	InfluxdbUserConfig interface{}
	// Kafka specific server provided values
	Kafka interface{}
	// Kafka specific user configurable settings
	KafkaUserConfig interface{}
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow interface{}
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime interface{}
	// MySQL specific server provided values
	Mysql interface{}
	// MySQL specific user configurable settings
	MysqlUserConfig interface{}
	// PostgreSQL specific server provided values
	Pg interface{}
	// PostgreSQL specific user configurable settings
	PgUserConfig interface{}
	// Subscription plan
	Plan interface{}
	// Target project
	Project interface{}
	// Identifier of the VPC the service should be in, if any
	ProjectVpcId interface{}
	// Redis specific server provided values
	Redis interface{}
	// Redis specific user configurable settings
	RedisUserConfig interface{}
	// Service hostname
	ServiceHost interface{}
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations interface{}
	// Service name
	ServiceName interface{}
	// Password used for connecting to the service, if applicable
	ServicePassword interface{}
	// Service port
	ServicePort interface{}
	// Service type code
	ServiceType interface{}
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri interface{}
	// Username used for connecting to the service, if applicable
	ServiceUsername interface{}
	// Service state
	State interface{}
	// Prevent service from being deleted. It is recommended to have this enabled for all services.
	TerminationProtection interface{}
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Cassandra specific server provided values
	Cassandra interface{}
	// Cassandra specific user configurable settings
	CassandraUserConfig interface{}
	// Cloud the service runs in
	CloudName interface{}
	// Elasticsearch specific server provided values
	Elasticsearch interface{}
	// Elasticsearch specific user configurable settings
	ElasticsearchUserConfig interface{}
	// Grafana specific server provided values
	Grafana interface{}
	// Grafana specific user configurable settings
	GrafanaUserConfig interface{}
	// InfluxDB specific server provided values
	Influxdb interface{}
	// InfluxDB specific user configurable settings
	InfluxdbUserConfig interface{}
	// Kafka specific server provided values
	Kafka interface{}
	// Kafka specific user configurable settings
	KafkaUserConfig interface{}
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow interface{}
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime interface{}
	// MySQL specific server provided values
	Mysql interface{}
	// MySQL specific user configurable settings
	MysqlUserConfig interface{}
	// PostgreSQL specific server provided values
	Pg interface{}
	// PostgreSQL specific user configurable settings
	PgUserConfig interface{}
	// Subscription plan
	Plan interface{}
	// Target project
	Project interface{}
	// Identifier of the VPC the service should be in, if any
	ProjectVpcId interface{}
	// Redis specific server provided values
	Redis interface{}
	// Redis specific user configurable settings
	RedisUserConfig interface{}
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations interface{}
	// Service name
	ServiceName interface{}
	// Service type code
	ServiceType interface{}
	// Prevent service from being deleted. It is recommended to have this enabled for all services.
	TerminationProtection interface{}
}
