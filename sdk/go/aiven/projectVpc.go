// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProjectVpc struct {
	s *pulumi.ResourceState
}

// NewProjectVpc registers a new resource with the given unique name, arguments, and options.
func NewProjectVpc(ctx *pulumi.Context,
	name string, args *ProjectVpcArgs, opts ...pulumi.ResourceOpt) (*ProjectVpc, error) {
	if args == nil || args.CloudName == nil {
		return nil, errors.New("missing required argument 'CloudName'")
	}
	if args == nil || args.NetworkCidr == nil {
		return nil, errors.New("missing required argument 'NetworkCidr'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cloudName"] = nil
		inputs["networkCidr"] = nil
		inputs["project"] = nil
	} else {
		inputs["cloudName"] = args.CloudName
		inputs["networkCidr"] = args.NetworkCidr
		inputs["project"] = args.Project
	}
	inputs["state"] = nil
	s, err := ctx.RegisterResource("aiven:index/projectVpc:ProjectVpc", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectVpc{s: s}, nil
}

// GetProjectVpc gets an existing ProjectVpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectVpc(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectVpcState, opts ...pulumi.ResourceOpt) (*ProjectVpc, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cloudName"] = state.CloudName
		inputs["networkCidr"] = state.NetworkCidr
		inputs["project"] = state.Project
		inputs["state"] = state.State
	}
	s, err := ctx.ReadResource("aiven:index/projectVpc:ProjectVpc", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectVpc{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectVpc) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectVpc) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Cloud the VPC is in
func (r *ProjectVpc) CloudName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cloudName"])
}

// Network address range used by the VPC like 192.168.0.0/24
func (r *ProjectVpc) NetworkCidr() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkCidr"])
}

// The project the VPC belongs to
func (r *ProjectVpc) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// State of the VPC (APPROVED, ACTIVE, DELETING, DELETED)
func (r *ProjectVpc) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// Input properties used for looking up and filtering ProjectVpc resources.
type ProjectVpcState struct {
	// Cloud the VPC is in
	CloudName interface{}
	// Network address range used by the VPC like 192.168.0.0/24
	NetworkCidr interface{}
	// The project the VPC belongs to
	Project interface{}
	// State of the VPC (APPROVED, ACTIVE, DELETING, DELETED)
	State interface{}
}

// The set of arguments for constructing a ProjectVpc resource.
type ProjectVpcArgs struct {
	// Cloud the VPC is in
	CloudName interface{}
	// Network address range used by the VPC like 192.168.0.0/24
	NetworkCidr interface{}
	// The project the VPC belongs to
	Project interface{}
}
