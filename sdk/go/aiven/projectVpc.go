// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Project VPC Resource
//
// The Project VPC resource allows the creation and management of Aiven Project VPCs.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewProjectVpc(ctx, "myvpc", &aiven.ProjectVpcArgs{
// 			CloudName:   pulumi.String("google-europe-west1"),
// 			NetworkCidr: pulumi.String("192.168.0.1/24"),
// 			Project:     pulumi.Any(aiven_project.Myproject.Project),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ProjectVpc struct {
	pulumi.CustomResourceState

	// defines where the cloud provider and region where the service is hosted
	// in. See the Service resource for additional information.
	CloudName pulumi.StringOutput `pulumi:"cloudName"`
	// defines the network CIDR of the VPC.
	NetworkCidr pulumi.StringOutput `pulumi:"networkCidr"`
	// defines the project the VPC belongs to.
	Project pulumi.StringOutput `pulumi:"project"`
	// ia a computed property that tells the current state of the VPC. This property cannot be
	// set, only read.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewProjectVpc registers a new resource with the given unique name, arguments, and options.
func NewProjectVpc(ctx *pulumi.Context,
	name string, args *ProjectVpcArgs, opts ...pulumi.ResourceOption) (*ProjectVpc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudName == nil {
		return nil, errors.New("invalid value for required argument 'CloudName'")
	}
	if args.NetworkCidr == nil {
		return nil, errors.New("invalid value for required argument 'NetworkCidr'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource ProjectVpc
	err := ctx.RegisterResource("aiven:index/projectVpc:ProjectVpc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectVpc gets an existing ProjectVpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectVpc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectVpcState, opts ...pulumi.ResourceOption) (*ProjectVpc, error) {
	var resource ProjectVpc
	err := ctx.ReadResource("aiven:index/projectVpc:ProjectVpc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectVpc resources.
type projectVpcState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. See the Service resource for additional information.
	CloudName *string `pulumi:"cloudName"`
	// defines the network CIDR of the VPC.
	NetworkCidr *string `pulumi:"networkCidr"`
	// defines the project the VPC belongs to.
	Project *string `pulumi:"project"`
	// ia a computed property that tells the current state of the VPC. This property cannot be
	// set, only read.
	State *string `pulumi:"state"`
}

type ProjectVpcState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. See the Service resource for additional information.
	CloudName pulumi.StringPtrInput
	// defines the network CIDR of the VPC.
	NetworkCidr pulumi.StringPtrInput
	// defines the project the VPC belongs to.
	Project pulumi.StringPtrInput
	// ia a computed property that tells the current state of the VPC. This property cannot be
	// set, only read.
	State pulumi.StringPtrInput
}

func (ProjectVpcState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectVpcState)(nil)).Elem()
}

type projectVpcArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. See the Service resource for additional information.
	CloudName string `pulumi:"cloudName"`
	// defines the network CIDR of the VPC.
	NetworkCidr string `pulumi:"networkCidr"`
	// defines the project the VPC belongs to.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectVpc resource.
type ProjectVpcArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. See the Service resource for additional information.
	CloudName pulumi.StringInput
	// defines the network CIDR of the VPC.
	NetworkCidr pulumi.StringInput
	// defines the project the VPC belongs to.
	Project pulumi.StringInput
}

func (ProjectVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectVpcArgs)(nil)).Elem()
}

type ProjectVpcInput interface {
	pulumi.Input

	ToProjectVpcOutput() ProjectVpcOutput
	ToProjectVpcOutputWithContext(ctx context.Context) ProjectVpcOutput
}

func (*ProjectVpc) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpc)(nil))
}

func (i *ProjectVpc) ToProjectVpcOutput() ProjectVpcOutput {
	return i.ToProjectVpcOutputWithContext(context.Background())
}

func (i *ProjectVpc) ToProjectVpcOutputWithContext(ctx context.Context) ProjectVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcOutput)
}

func (i *ProjectVpc) ToProjectVpcPtrOutput() ProjectVpcPtrOutput {
	return i.ToProjectVpcPtrOutputWithContext(context.Background())
}

func (i *ProjectVpc) ToProjectVpcPtrOutputWithContext(ctx context.Context) ProjectVpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcPtrOutput)
}

type ProjectVpcPtrInput interface {
	pulumi.Input

	ToProjectVpcPtrOutput() ProjectVpcPtrOutput
	ToProjectVpcPtrOutputWithContext(ctx context.Context) ProjectVpcPtrOutput
}

type projectVpcPtrType ProjectVpcArgs

func (*projectVpcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVpc)(nil))
}

func (i *projectVpcPtrType) ToProjectVpcPtrOutput() ProjectVpcPtrOutput {
	return i.ToProjectVpcPtrOutputWithContext(context.Background())
}

func (i *projectVpcPtrType) ToProjectVpcPtrOutputWithContext(ctx context.Context) ProjectVpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcPtrOutput)
}

// ProjectVpcArrayInput is an input type that accepts ProjectVpcArray and ProjectVpcArrayOutput values.
// You can construct a concrete instance of `ProjectVpcArrayInput` via:
//
//          ProjectVpcArray{ ProjectVpcArgs{...} }
type ProjectVpcArrayInput interface {
	pulumi.Input

	ToProjectVpcArrayOutput() ProjectVpcArrayOutput
	ToProjectVpcArrayOutputWithContext(context.Context) ProjectVpcArrayOutput
}

type ProjectVpcArray []ProjectVpcInput

func (ProjectVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ProjectVpc)(nil))
}

func (i ProjectVpcArray) ToProjectVpcArrayOutput() ProjectVpcArrayOutput {
	return i.ToProjectVpcArrayOutputWithContext(context.Background())
}

func (i ProjectVpcArray) ToProjectVpcArrayOutputWithContext(ctx context.Context) ProjectVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcArrayOutput)
}

// ProjectVpcMapInput is an input type that accepts ProjectVpcMap and ProjectVpcMapOutput values.
// You can construct a concrete instance of `ProjectVpcMapInput` via:
//
//          ProjectVpcMap{ "key": ProjectVpcArgs{...} }
type ProjectVpcMapInput interface {
	pulumi.Input

	ToProjectVpcMapOutput() ProjectVpcMapOutput
	ToProjectVpcMapOutputWithContext(context.Context) ProjectVpcMapOutput
}

type ProjectVpcMap map[string]ProjectVpcInput

func (ProjectVpcMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ProjectVpc)(nil))
}

func (i ProjectVpcMap) ToProjectVpcMapOutput() ProjectVpcMapOutput {
	return i.ToProjectVpcMapOutputWithContext(context.Background())
}

func (i ProjectVpcMap) ToProjectVpcMapOutputWithContext(ctx context.Context) ProjectVpcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcMapOutput)
}

type ProjectVpcOutput struct {
	*pulumi.OutputState
}

func (ProjectVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpc)(nil))
}

func (o ProjectVpcOutput) ToProjectVpcOutput() ProjectVpcOutput {
	return o
}

func (o ProjectVpcOutput) ToProjectVpcOutputWithContext(ctx context.Context) ProjectVpcOutput {
	return o
}

func (o ProjectVpcOutput) ToProjectVpcPtrOutput() ProjectVpcPtrOutput {
	return o.ToProjectVpcPtrOutputWithContext(context.Background())
}

func (o ProjectVpcOutput) ToProjectVpcPtrOutputWithContext(ctx context.Context) ProjectVpcPtrOutput {
	return o.ApplyT(func(v ProjectVpc) *ProjectVpc {
		return &v
	}).(ProjectVpcPtrOutput)
}

type ProjectVpcPtrOutput struct {
	*pulumi.OutputState
}

func (ProjectVpcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVpc)(nil))
}

func (o ProjectVpcPtrOutput) ToProjectVpcPtrOutput() ProjectVpcPtrOutput {
	return o
}

func (o ProjectVpcPtrOutput) ToProjectVpcPtrOutputWithContext(ctx context.Context) ProjectVpcPtrOutput {
	return o
}

type ProjectVpcArrayOutput struct{ *pulumi.OutputState }

func (ProjectVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectVpc)(nil))
}

func (o ProjectVpcArrayOutput) ToProjectVpcArrayOutput() ProjectVpcArrayOutput {
	return o
}

func (o ProjectVpcArrayOutput) ToProjectVpcArrayOutputWithContext(ctx context.Context) ProjectVpcArrayOutput {
	return o
}

func (o ProjectVpcArrayOutput) Index(i pulumi.IntInput) ProjectVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectVpc {
		return vs[0].([]ProjectVpc)[vs[1].(int)]
	}).(ProjectVpcOutput)
}

type ProjectVpcMapOutput struct{ *pulumi.OutputState }

func (ProjectVpcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProjectVpc)(nil))
}

func (o ProjectVpcMapOutput) ToProjectVpcMapOutput() ProjectVpcMapOutput {
	return o
}

func (o ProjectVpcMapOutput) ToProjectVpcMapOutputWithContext(ctx context.Context) ProjectVpcMapOutput {
	return o
}

func (o ProjectVpcMapOutput) MapIndex(k pulumi.StringInput) ProjectVpcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ProjectVpc {
		return vs[0].(map[string]ProjectVpc)[vs[1].(string)]
	}).(ProjectVpcOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectVpcOutput{})
	pulumi.RegisterOutputType(ProjectVpcPtrOutput{})
	pulumi.RegisterOutputType(ProjectVpcArrayOutput{})
	pulumi.RegisterOutputType(ProjectVpcMapOutput{})
}
