// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Resource Kafka ACL Resource
//
// The Resource Kafka ACL resource allows the creation and management of an Aiven Kafka ACL`s for a Kafka service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewKafkaAcl(ctx, "mytestacl", &aiven.KafkaAclArgs{
// 			Permission:  pulumi.String("admin"),
// 			Project:     pulumi.Any(aiven_project.Myproject.Project),
// 			ServiceName: pulumi.Any(aiven_service.Myservice.Service_name),
// 			Topic:       pulumi.String("<TOPIC_NAME_PATTERN>"),
// 			Username:    pulumi.String("<USERNAME_PATTERN>"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type KafkaAcl struct {
	pulumi.CustomResourceState

	// is the level of permission the matching users are given to the matching
	// topics (admin, read, readwrite, write).
	Permission pulumi.StringOutput `pulumi:"permission"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the Kafka ACL to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// is a topic name pattern the ACL entry matches to.
	Topic pulumi.StringOutput `pulumi:"topic"`
	// is a username pattern the ACL entry matches to.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewKafkaAcl registers a new resource with the given unique name, arguments, and options.
func NewKafkaAcl(ctx *pulumi.Context,
	name string, args *KafkaAclArgs, opts ...pulumi.ResourceOption) (*KafkaAcl, error) {
	if args == nil || args.Permission == nil {
		return nil, errors.New("missing required argument 'Permission'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.Topic == nil {
		return nil, errors.New("missing required argument 'Topic'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &KafkaAclArgs{}
	}
	var resource KafkaAcl
	err := ctx.RegisterResource("aiven:index/kafkaAcl:KafkaAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaAcl gets an existing KafkaAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaAclState, opts ...pulumi.ResourceOption) (*KafkaAcl, error) {
	var resource KafkaAcl
	err := ctx.ReadResource("aiven:index/kafkaAcl:KafkaAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaAcl resources.
type kafkaAclState struct {
	// is the level of permission the matching users are given to the matching
	// topics (admin, read, readwrite, write).
	Permission *string `pulumi:"permission"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project *string `pulumi:"project"`
	// Service to link the Kafka ACL to
	ServiceName *string `pulumi:"serviceName"`
	// is a topic name pattern the ACL entry matches to.
	Topic *string `pulumi:"topic"`
	// is a username pattern the ACL entry matches to.
	Username *string `pulumi:"username"`
}

type KafkaAclState struct {
	// is the level of permission the matching users are given to the matching
	// topics (admin, read, readwrite, write).
	Permission pulumi.StringPtrInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project pulumi.StringPtrInput
	// Service to link the Kafka ACL to
	ServiceName pulumi.StringPtrInput
	// is a topic name pattern the ACL entry matches to.
	Topic pulumi.StringPtrInput
	// is a username pattern the ACL entry matches to.
	Username pulumi.StringPtrInput
}

func (KafkaAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaAclState)(nil)).Elem()
}

type kafkaAclArgs struct {
	// is the level of permission the matching users are given to the matching
	// topics (admin, read, readwrite, write).
	Permission string `pulumi:"permission"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project string `pulumi:"project"`
	// Service to link the Kafka ACL to
	ServiceName string `pulumi:"serviceName"`
	// is a topic name pattern the ACL entry matches to.
	Topic string `pulumi:"topic"`
	// is a username pattern the ACL entry matches to.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a KafkaAcl resource.
type KafkaAclArgs struct {
	// is the level of permission the matching users are given to the matching
	// topics (admin, read, readwrite, write).
	Permission pulumi.StringInput
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project pulumi.StringInput
	// Service to link the Kafka ACL to
	ServiceName pulumi.StringInput
	// is a topic name pattern the ACL entry matches to.
	Topic pulumi.StringInput
	// is a username pattern the ACL entry matches to.
	Username pulumi.StringInput
}

func (KafkaAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaAclArgs)(nil)).Elem()
}
