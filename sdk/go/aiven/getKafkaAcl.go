// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Kafka ACL Data Source
//
// The Data Source Kafka ACL data source provides information about the existing Aiven Kafka ACL
// for a Kafka service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupKafkaAcl(ctx, &GetKafkaAclArgs{
// 			Project:     aiven_project.Myproject.Project,
// 			ServiceName: aiven_service.Myservice.Service_name,
// 			Topic:       "<TOPIC_NAME_PATTERN>",
// 			Permission:  "admin",
// 			Username:    "<USERNAME_PATTERN>",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupKafkaAcl(ctx *pulumi.Context, args *LookupKafkaAclArgs, opts ...pulumi.InvokeOption) (*LookupKafkaAclResult, error) {
	var rv LookupKafkaAclResult
	err := ctx.Invoke("aiven:index/getKafkaAcl:getKafkaAcl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKafkaAcl.
type LookupKafkaAclArgs struct {
	// is the level of permission the matching users are given to the matching
	// topics (admin, read, readwrite, write).
	Permission string `pulumi:"permission"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	// is a topic name pattern the ACL entry matches to.
	Topic string `pulumi:"topic"`
	// is a username pattern the ACL entry matches to.
	Username string `pulumi:"username"`
}

// A collection of values returned by getKafkaAcl.
type LookupKafkaAclResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	Permission  string `pulumi:"permission"`
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	Topic       string `pulumi:"topic"`
	Username    string `pulumi:"username"`
}

func LookupKafkaAclOutput(ctx *pulumi.Context, args LookupKafkaAclOutputArgs, opts ...pulumi.InvokeOption) LookupKafkaAclResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKafkaAclResult, error) {
			args := v.(LookupKafkaAclArgs)
			r, err := LookupKafkaAcl(ctx, &args, opts...)
			return *r, err
		}).(LookupKafkaAclResultOutput)
}

// A collection of arguments for invoking getKafkaAcl.
type LookupKafkaAclOutputArgs struct {
	// is the level of permission the matching users are given to the matching
	// topics (admin, read, readwrite, write).
	Permission pulumi.StringInput `pulumi:"permission"`
	// and `serviceName` - (Required) define the project and service the ACL belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	// These properties cannot be changed once the service is created. Doing so will result in
	// the topic being deleted and new one created instead.
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// is a topic name pattern the ACL entry matches to.
	Topic pulumi.StringInput `pulumi:"topic"`
	// is a username pattern the ACL entry matches to.
	Username pulumi.StringInput `pulumi:"username"`
}

func (LookupKafkaAclOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaAclArgs)(nil)).Elem()
}

// A collection of values returned by getKafkaAcl.
type LookupKafkaAclResultOutput struct{ *pulumi.OutputState }

func (LookupKafkaAclResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaAclResult)(nil)).Elem()
}

func (o LookupKafkaAclResultOutput) ToLookupKafkaAclResultOutput() LookupKafkaAclResultOutput {
	return o
}

func (o LookupKafkaAclResultOutput) ToLookupKafkaAclResultOutputWithContext(ctx context.Context) LookupKafkaAclResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKafkaAclResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaAclResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupKafkaAclResultOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaAclResult) string { return v.Permission }).(pulumi.StringOutput)
}

func (o LookupKafkaAclResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaAclResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupKafkaAclResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaAclResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupKafkaAclResultOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaAclResult) string { return v.Topic }).(pulumi.StringOutput)
}

func (o LookupKafkaAclResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaAclResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKafkaAclResultOutput{})
}
