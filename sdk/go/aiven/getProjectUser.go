// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Project User data source provides information about the existing Aiven Project User.
//
// > **This resource is deprecated**
// Use `OrganizationPermission` instead and
// migrate existing `ProjectUser` resources
// to the new resource. **Do not use the `ProjectUser` and `OrganizationPermission` resources together**.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.LookupProjectUser(ctx, &aiven.LookupProjectUserArgs{
//				Project: myproject.Project,
//				Email:   "john.doe@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProjectUser(ctx *pulumi.Context, args *LookupProjectUserArgs, opts ...pulumi.InvokeOption) (*LookupProjectUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectUserResult
	err := ctx.Invoke("aiven:index/getProjectUser:getProjectUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectUser.
type LookupProjectUserArgs struct {
	// Email address of the user in lowercase. Changing this property forces recreation of the resource.
	Email string `pulumi:"email"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
}

// A collection of values returned by getProjectUser.
type LookupProjectUserResult struct {
	// Whether the user has accepted the request to join the project. Users get an invite and become project members after accepting the invite.
	Accepted bool `pulumi:"accepted"`
	// Email address of the user in lowercase. Changing this property forces recreation of the resource.
	Email string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Project membership type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
	MemberType string `pulumi:"memberType"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
}

func LookupProjectUserOutput(ctx *pulumi.Context, args LookupProjectUserOutputArgs, opts ...pulumi.InvokeOption) LookupProjectUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectUserResultOutput, error) {
			args := v.(LookupProjectUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aiven:index/getProjectUser:getProjectUser", args, LookupProjectUserResultOutput{}, options).(LookupProjectUserResultOutput), nil
		}).(LookupProjectUserResultOutput)
}

// A collection of arguments for invoking getProjectUser.
type LookupProjectUserOutputArgs struct {
	// Email address of the user in lowercase. Changing this property forces recreation of the resource.
	Email pulumi.StringInput `pulumi:"email"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput `pulumi:"project"`
}

func (LookupProjectUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectUserArgs)(nil)).Elem()
}

// A collection of values returned by getProjectUser.
type LookupProjectUserResultOutput struct{ *pulumi.OutputState }

func (LookupProjectUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectUserResult)(nil)).Elem()
}

func (o LookupProjectUserResultOutput) ToLookupProjectUserResultOutput() LookupProjectUserResultOutput {
	return o
}

func (o LookupProjectUserResultOutput) ToLookupProjectUserResultOutputWithContext(ctx context.Context) LookupProjectUserResultOutput {
	return o
}

// Whether the user has accepted the request to join the project. Users get an invite and become project members after accepting the invite.
func (o LookupProjectUserResultOutput) Accepted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectUserResult) bool { return v.Accepted }).(pulumi.BoolOutput)
}

// Email address of the user in lowercase. Changing this property forces recreation of the resource.
func (o LookupProjectUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// Project membership type. The possible values are `admin`, `developer`, `operator`, `organization:app_users:write`, `organization:audit_logs:read`, `organization:billing:read`, `organization:billing:write`, `organization:domains:write`, `organization:groups:write`, `organization:idps:write`, `organization:networking:read`, `organization:networking:write`, `organization:projects:write`, `organization:users:write`, `project:audit_logs:read`, `project:integrations:read`, `project:integrations:write`, `project:networking:read`, `project:networking:write`, `project:permissions:read`, `project:services:read`, `project:services:write`, `readOnly`, `role:organization:admin`, `role:services:maintenance`, `role:services:recover`, `service:configuration:write`, `service:data:write`, `service:logs:read`, `service:secrets:read` and `service:users:write`.
func (o LookupProjectUserResultOutput) MemberType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectUserResult) string { return v.MemberType }).(pulumi.StringOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o LookupProjectUserResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectUserResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectUserResultOutput{})
}
