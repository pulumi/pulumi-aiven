// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Clickhouse database data source provides information about the existing Aiven Clickhouse Database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupClickhouseDatabase(ctx, &GetClickhouseDatabaseArgs{
// 			Project:     aiven_clickhouse.Ch.Project,
// 			ServiceName: aiven_clickhouse.Ch.Service_name,
// 			Name:        "my-ch-db",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupClickhouseDatabase(ctx *pulumi.Context, args *LookupClickhouseDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupClickhouseDatabaseResult, error) {
	var rv LookupClickhouseDatabaseResult
	err := ctx.Invoke("aiven:index/getClickhouseDatabase:getClickhouseDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClickhouseDatabase.
type LookupClickhouseDatabaseArgs struct {
	Name        string `pulumi:"name"`
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getClickhouseDatabase.
type LookupClickhouseDatabaseResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                    string `pulumi:"id"`
	Name                  string `pulumi:"name"`
	Project               string `pulumi:"project"`
	ServiceName           string `pulumi:"serviceName"`
	TerminationProtection bool   `pulumi:"terminationProtection"`
}

func LookupClickhouseDatabaseOutput(ctx *pulumi.Context, args LookupClickhouseDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupClickhouseDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClickhouseDatabaseResult, error) {
			args := v.(LookupClickhouseDatabaseArgs)
			r, err := LookupClickhouseDatabase(ctx, &args, opts...)
			var s LookupClickhouseDatabaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClickhouseDatabaseResultOutput)
}

// A collection of arguments for invoking getClickhouseDatabase.
type LookupClickhouseDatabaseOutputArgs struct {
	Name        pulumi.StringInput `pulumi:"name"`
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupClickhouseDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClickhouseDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getClickhouseDatabase.
type LookupClickhouseDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupClickhouseDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClickhouseDatabaseResult)(nil)).Elem()
}

func (o LookupClickhouseDatabaseResultOutput) ToLookupClickhouseDatabaseResultOutput() LookupClickhouseDatabaseResultOutput {
	return o
}

func (o LookupClickhouseDatabaseResultOutput) ToLookupClickhouseDatabaseResultOutputWithContext(ctx context.Context) LookupClickhouseDatabaseResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupClickhouseDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupClickhouseDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupClickhouseDatabaseResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseDatabaseResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupClickhouseDatabaseResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseDatabaseResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupClickhouseDatabaseResultOutput) TerminationProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClickhouseDatabaseResult) bool { return v.TerminationProtection }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClickhouseDatabaseResultOutput{})
}
