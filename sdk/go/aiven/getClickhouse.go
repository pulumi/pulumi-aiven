// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Clickhouse data source provides information about the existing Aiven Clickhouse service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupClickhouse(ctx, &GetClickhouseArgs{
// 			Project:     data.Aiven_project.Pr1.Project,
// 			ServiceName: "<SERVICE_NAME>",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupClickhouse(ctx *pulumi.Context, args *LookupClickhouseArgs, opts ...pulumi.InvokeOption) (*LookupClickhouseResult, error) {
	var rv LookupClickhouseResult
	err := ctx.Invoke("aiven:index/getClickhouse:getClickhouse", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClickhouse.
type LookupClickhouseArgs struct {
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getClickhouse.
type LookupClickhouseResult struct {
	// Clickhouse user configurable settings
	ClickhouseUserConfigs []GetClickhouseClickhouseUserConfig `pulumi:"clickhouseUserConfigs"`
	// Clickhouse server provided values
	Clickhouses []GetClickhouseClickhouse `pulumi:"clickhouses"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName string `pulumi:"cloudName"`
	// Service component information objects
	Components []GetClickhouseComponent `pulumi:"components"`
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
	DiskSpace string `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap string `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault string `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep string `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed string `pulumi:"diskSpaceUsed"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId string `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []GetClickhouseServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword string `pulumi:"servicePassword"`
	// The port of the service
	ServicePort int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType string `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri string `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername string `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State string `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection bool `pulumi:"terminationProtection"`
}

func LookupClickhouseOutput(ctx *pulumi.Context, args LookupClickhouseOutputArgs, opts ...pulumi.InvokeOption) LookupClickhouseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClickhouseResult, error) {
			args := v.(LookupClickhouseArgs)
			r, err := LookupClickhouse(ctx, &args, opts...)
			return *r, err
		}).(LookupClickhouseResultOutput)
}

// A collection of arguments for invoking getClickhouse.
type LookupClickhouseOutputArgs struct {
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput `pulumi:"project"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupClickhouseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClickhouseArgs)(nil)).Elem()
}

// A collection of values returned by getClickhouse.
type LookupClickhouseResultOutput struct{ *pulumi.OutputState }

func (LookupClickhouseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClickhouseResult)(nil)).Elem()
}

func (o LookupClickhouseResultOutput) ToLookupClickhouseResultOutput() LookupClickhouseResultOutput {
	return o
}

func (o LookupClickhouseResultOutput) ToLookupClickhouseResultOutputWithContext(ctx context.Context) LookupClickhouseResultOutput {
	return o
}

// Clickhouse user configurable settings
func (o LookupClickhouseResultOutput) ClickhouseUserConfigs() GetClickhouseClickhouseUserConfigArrayOutput {
	return o.ApplyT(func(v LookupClickhouseResult) []GetClickhouseClickhouseUserConfig { return v.ClickhouseUserConfigs }).(GetClickhouseClickhouseUserConfigArrayOutput)
}

// Clickhouse server provided values
func (o LookupClickhouseResultOutput) Clickhouses() GetClickhouseClickhouseArrayOutput {
	return o.ApplyT(func(v LookupClickhouseResult) []GetClickhouseClickhouse { return v.Clickhouses }).(GetClickhouseClickhouseArrayOutput)
}

// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
func (o LookupClickhouseResultOutput) CloudName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.CloudName }).(pulumi.StringOutput)
}

// Service component information objects
func (o LookupClickhouseResultOutput) Components() GetClickhouseComponentArrayOutput {
	return o.ApplyT(func(v LookupClickhouseResult) []GetClickhouseComponent { return v.Components }).(GetClickhouseComponentArrayOutput)
}

// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
func (o LookupClickhouseResultOutput) DiskSpace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.DiskSpace }).(pulumi.StringOutput)
}

// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
func (o LookupClickhouseResultOutput) DiskSpaceCap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.DiskSpaceCap }).(pulumi.StringOutput)
}

// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
func (o LookupClickhouseResultOutput) DiskSpaceDefault() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.DiskSpaceDefault }).(pulumi.StringOutput)
}

// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
func (o LookupClickhouseResultOutput) DiskSpaceStep() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.DiskSpaceStep }).(pulumi.StringOutput)
}

// Disk space that service is currently using
func (o LookupClickhouseResultOutput) DiskSpaceUsed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.DiskSpaceUsed }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupClickhouseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.Id }).(pulumi.StringOutput)
}

// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
func (o LookupClickhouseResultOutput) MaintenanceWindowDow() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.MaintenanceWindowDow }).(pulumi.StringOutput)
}

// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
func (o LookupClickhouseResultOutput) MaintenanceWindowTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.MaintenanceWindowTime }).(pulumi.StringOutput)
}

// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
func (o LookupClickhouseResultOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.Plan }).(pulumi.StringOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o LookupClickhouseResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.Project }).(pulumi.StringOutput)
}

// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
func (o LookupClickhouseResultOutput) ProjectVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.ProjectVpcId }).(pulumi.StringOutput)
}

// The hostname of the service.
func (o LookupClickhouseResultOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.ServiceHost }).(pulumi.StringOutput)
}

// Service integrations to specify when creating a service. Not applied after initial service creation
func (o LookupClickhouseResultOutput) ServiceIntegrations() GetClickhouseServiceIntegrationArrayOutput {
	return o.ApplyT(func(v LookupClickhouseResult) []GetClickhouseServiceIntegration { return v.ServiceIntegrations }).(GetClickhouseServiceIntegrationArrayOutput)
}

// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
func (o LookupClickhouseResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Password used for connecting to the service, if applicable
func (o LookupClickhouseResultOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.ServicePassword }).(pulumi.StringOutput)
}

// The port of the service
func (o LookupClickhouseResultOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClickhouseResult) int { return v.ServicePort }).(pulumi.IntOutput)
}

// Aiven internal service type code
func (o LookupClickhouseResultOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.ServiceType }).(pulumi.StringOutput)
}

// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
func (o LookupClickhouseResultOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.ServiceUri }).(pulumi.StringOutput)
}

// Username used for connecting to the service, if applicable
func (o LookupClickhouseResultOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.ServiceUsername }).(pulumi.StringOutput)
}

// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
func (o LookupClickhouseResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClickhouseResult) string { return v.State }).(pulumi.StringOutput)
}

// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
func (o LookupClickhouseResultOutput) StaticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClickhouseResult) []string { return v.StaticIps }).(pulumi.StringArrayOutput)
}

// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
func (o LookupClickhouseResultOutput) TerminationProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClickhouseResult) bool { return v.TerminationProtection }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClickhouseResultOutput{})
}
