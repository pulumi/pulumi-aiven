// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Kafka MirrorMaker Resource
//
// The Kafka MirrorMaker resource allows the creation and management of Aiven Kafka MirrorMaker 2 services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewKafkaMirrorMaker(ctx, "mm1", &aiven.KafkaMirrorMakerArgs{
// 			Project:     pulumi.Any(data.Aiven_project.Pr1.Project),
// 			CloudName:   pulumi.String("google-europe-west1"),
// 			Plan:        pulumi.String("startup-4"),
// 			ServiceName: pulumi.String("my-mm1"),
// 			KafkaMirrormakerUserConfig: &aiven.KafkaMirrorMakerKafkaMirrormakerUserConfigArgs{
// 				IpFilters: pulumi.StringArray{
// 					pulumi.String("0.0.0.0/0"),
// 				},
// 				KafkaMirrormaker: &aiven.KafkaMirrorMakerKafkaMirrormakerUserConfigKafkaMirrormakerArgs{
// 					RefreshGroupsIntervalSeconds: pulumi.String("600"),
// 					RefreshTopicsEnabled:         pulumi.String("true"),
// 					RefreshTopicsIntervalSeconds: pulumi.String("600"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type KafkaMirrorMaker struct {
	pulumi.CustomResourceState

	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components KafkaMirrorMakerComponentArrayOutput `pulumi:"components"`
	// Kafka MirrorMaker configuration values
	KafkaMirrormaker KafkaMirrorMakerKafkaMirrormakerOutput `pulumi:"kafkaMirrormaker"`
	// defines Kafka MirrorMaker 2 specific additional configuration options.
	// The following configuration options available:
	KafkaMirrormakerUserConfig KafkaMirrorMakerKafkaMirrormakerUserConfigPtrOutput `pulumi:"kafkaMirrormakerUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringOutput `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// Kafka MirrorMaker 2 hostname.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations KafkaMirrorMakerServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the Kafka MirrorMaker 2 service, if applicable.
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// Kafka MirrorMaker 2 port.
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the Kafka MirrorMaker 2 service.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the Kafka MirrorMaker 2 service, if applicable.
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state.
	State pulumi.StringOutput `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewKafkaMirrorMaker registers a new resource with the given unique name, arguments, and options.
func NewKafkaMirrorMaker(ctx *pulumi.Context,
	name string, args *KafkaMirrorMakerArgs, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource KafkaMirrorMaker
	err := ctx.RegisterResource("aiven:index/kafkaMirrorMaker:KafkaMirrorMaker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaMirrorMaker gets an existing KafkaMirrorMaker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaMirrorMaker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaMirrorMakerState, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker, error) {
	var resource KafkaMirrorMaker
	err := ctx.ReadResource("aiven:index/kafkaMirrorMaker:KafkaMirrorMaker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaMirrorMaker resources.
type kafkaMirrorMakerState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []KafkaMirrorMakerComponent `pulumi:"components"`
	// Kafka MirrorMaker configuration values
	KafkaMirrormaker *KafkaMirrorMakerKafkaMirrormaker `pulumi:"kafkaMirrormaker"`
	// defines Kafka MirrorMaker 2 specific additional configuration options.
	// The following configuration options available:
	KafkaMirrormakerUserConfig *KafkaMirrorMakerKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project *string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Kafka MirrorMaker 2 hostname.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []KafkaMirrorMakerServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the Kafka MirrorMaker 2 service, if applicable.
	ServicePassword *string `pulumi:"servicePassword"`
	// Kafka MirrorMaker 2 port.
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the Kafka MirrorMaker 2 service.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the Kafka MirrorMaker 2 service, if applicable.
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state.
	State *string `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type KafkaMirrorMakerState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components KafkaMirrorMakerComponentArrayInput
	// Kafka MirrorMaker configuration values
	KafkaMirrormaker KafkaMirrorMakerKafkaMirrormakerPtrInput
	// defines Kafka MirrorMaker 2 specific additional configuration options.
	// The following configuration options available:
	KafkaMirrormakerUserConfig KafkaMirrorMakerKafkaMirrormakerUserConfigPtrInput
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringPtrInput
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Kafka MirrorMaker 2 hostname.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations KafkaMirrorMakerServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the Kafka MirrorMaker 2 service, if applicable.
	ServicePassword pulumi.StringPtrInput
	// Kafka MirrorMaker 2 port.
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the Kafka MirrorMaker 2 service.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the Kafka MirrorMaker 2 service, if applicable.
	ServiceUsername pulumi.StringPtrInput
	// Service state.
	State pulumi.StringPtrInput
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (KafkaMirrorMakerState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMakerState)(nil)).Elem()
}

type kafkaMirrorMakerArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Kafka MirrorMaker configuration values
	KafkaMirrormaker *KafkaMirrorMakerKafkaMirrormaker `pulumi:"kafkaMirrormaker"`
	// defines Kafka MirrorMaker 2 specific additional configuration options.
	// The following configuration options available:
	KafkaMirrormakerUserConfig *KafkaMirrorMakerKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []KafkaMirrorMakerServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a KafkaMirrorMaker resource.
type KafkaMirrorMakerArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Kafka MirrorMaker configuration values
	KafkaMirrormaker KafkaMirrorMakerKafkaMirrormakerPtrInput
	// defines Kafka MirrorMaker 2 specific additional configuration options.
	// The following configuration options available:
	KafkaMirrormakerUserConfig KafkaMirrorMakerKafkaMirrormakerUserConfigPtrInput
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringInput
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations KafkaMirrorMakerServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (KafkaMirrorMakerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMakerArgs)(nil)).Elem()
}

type KafkaMirrorMakerInput interface {
	pulumi.Input

	ToKafkaMirrorMakerOutput() KafkaMirrorMakerOutput
	ToKafkaMirrorMakerOutputWithContext(ctx context.Context) KafkaMirrorMakerOutput
}

func (*KafkaMirrorMaker) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorMaker)(nil))
}

func (i *KafkaMirrorMaker) ToKafkaMirrorMakerOutput() KafkaMirrorMakerOutput {
	return i.ToKafkaMirrorMakerOutputWithContext(context.Background())
}

func (i *KafkaMirrorMaker) ToKafkaMirrorMakerOutputWithContext(ctx context.Context) KafkaMirrorMakerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerOutput)
}

func (i *KafkaMirrorMaker) ToKafkaMirrorMakerPtrOutput() KafkaMirrorMakerPtrOutput {
	return i.ToKafkaMirrorMakerPtrOutputWithContext(context.Background())
}

func (i *KafkaMirrorMaker) ToKafkaMirrorMakerPtrOutputWithContext(ctx context.Context) KafkaMirrorMakerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerPtrOutput)
}

type KafkaMirrorMakerPtrInput interface {
	pulumi.Input

	ToKafkaMirrorMakerPtrOutput() KafkaMirrorMakerPtrOutput
	ToKafkaMirrorMakerPtrOutputWithContext(ctx context.Context) KafkaMirrorMakerPtrOutput
}

type kafkaMirrorMakerPtrType KafkaMirrorMakerArgs

func (*kafkaMirrorMakerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker)(nil))
}

func (i *kafkaMirrorMakerPtrType) ToKafkaMirrorMakerPtrOutput() KafkaMirrorMakerPtrOutput {
	return i.ToKafkaMirrorMakerPtrOutputWithContext(context.Background())
}

func (i *kafkaMirrorMakerPtrType) ToKafkaMirrorMakerPtrOutputWithContext(ctx context.Context) KafkaMirrorMakerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerPtrOutput)
}

// KafkaMirrorMakerArrayInput is an input type that accepts KafkaMirrorMakerArray and KafkaMirrorMakerArrayOutput values.
// You can construct a concrete instance of `KafkaMirrorMakerArrayInput` via:
//
//          KafkaMirrorMakerArray{ KafkaMirrorMakerArgs{...} }
type KafkaMirrorMakerArrayInput interface {
	pulumi.Input

	ToKafkaMirrorMakerArrayOutput() KafkaMirrorMakerArrayOutput
	ToKafkaMirrorMakerArrayOutputWithContext(context.Context) KafkaMirrorMakerArrayOutput
}

type KafkaMirrorMakerArray []KafkaMirrorMakerInput

func (KafkaMirrorMakerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*KafkaMirrorMaker)(nil))
}

func (i KafkaMirrorMakerArray) ToKafkaMirrorMakerArrayOutput() KafkaMirrorMakerArrayOutput {
	return i.ToKafkaMirrorMakerArrayOutputWithContext(context.Background())
}

func (i KafkaMirrorMakerArray) ToKafkaMirrorMakerArrayOutputWithContext(ctx context.Context) KafkaMirrorMakerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerArrayOutput)
}

// KafkaMirrorMakerMapInput is an input type that accepts KafkaMirrorMakerMap and KafkaMirrorMakerMapOutput values.
// You can construct a concrete instance of `KafkaMirrorMakerMapInput` via:
//
//          KafkaMirrorMakerMap{ "key": KafkaMirrorMakerArgs{...} }
type KafkaMirrorMakerMapInput interface {
	pulumi.Input

	ToKafkaMirrorMakerMapOutput() KafkaMirrorMakerMapOutput
	ToKafkaMirrorMakerMapOutputWithContext(context.Context) KafkaMirrorMakerMapOutput
}

type KafkaMirrorMakerMap map[string]KafkaMirrorMakerInput

func (KafkaMirrorMakerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*KafkaMirrorMaker)(nil))
}

func (i KafkaMirrorMakerMap) ToKafkaMirrorMakerMapOutput() KafkaMirrorMakerMapOutput {
	return i.ToKafkaMirrorMakerMapOutputWithContext(context.Background())
}

func (i KafkaMirrorMakerMap) ToKafkaMirrorMakerMapOutputWithContext(ctx context.Context) KafkaMirrorMakerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerMapOutput)
}

type KafkaMirrorMakerOutput struct {
	*pulumi.OutputState
}

func (KafkaMirrorMakerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorMaker)(nil))
}

func (o KafkaMirrorMakerOutput) ToKafkaMirrorMakerOutput() KafkaMirrorMakerOutput {
	return o
}

func (o KafkaMirrorMakerOutput) ToKafkaMirrorMakerOutputWithContext(ctx context.Context) KafkaMirrorMakerOutput {
	return o
}

func (o KafkaMirrorMakerOutput) ToKafkaMirrorMakerPtrOutput() KafkaMirrorMakerPtrOutput {
	return o.ToKafkaMirrorMakerPtrOutputWithContext(context.Background())
}

func (o KafkaMirrorMakerOutput) ToKafkaMirrorMakerPtrOutputWithContext(ctx context.Context) KafkaMirrorMakerPtrOutput {
	return o.ApplyT(func(v KafkaMirrorMaker) *KafkaMirrorMaker {
		return &v
	}).(KafkaMirrorMakerPtrOutput)
}

type KafkaMirrorMakerPtrOutput struct {
	*pulumi.OutputState
}

func (KafkaMirrorMakerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker)(nil))
}

func (o KafkaMirrorMakerPtrOutput) ToKafkaMirrorMakerPtrOutput() KafkaMirrorMakerPtrOutput {
	return o
}

func (o KafkaMirrorMakerPtrOutput) ToKafkaMirrorMakerPtrOutputWithContext(ctx context.Context) KafkaMirrorMakerPtrOutput {
	return o
}

type KafkaMirrorMakerArrayOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMakerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaMirrorMaker)(nil))
}

func (o KafkaMirrorMakerArrayOutput) ToKafkaMirrorMakerArrayOutput() KafkaMirrorMakerArrayOutput {
	return o
}

func (o KafkaMirrorMakerArrayOutput) ToKafkaMirrorMakerArrayOutputWithContext(ctx context.Context) KafkaMirrorMakerArrayOutput {
	return o
}

func (o KafkaMirrorMakerArrayOutput) Index(i pulumi.IntInput) KafkaMirrorMakerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaMirrorMaker {
		return vs[0].([]KafkaMirrorMaker)[vs[1].(int)]
	}).(KafkaMirrorMakerOutput)
}

type KafkaMirrorMakerMapOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMakerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KafkaMirrorMaker)(nil))
}

func (o KafkaMirrorMakerMapOutput) ToKafkaMirrorMakerMapOutput() KafkaMirrorMakerMapOutput {
	return o
}

func (o KafkaMirrorMakerMapOutput) ToKafkaMirrorMakerMapOutputWithContext(ctx context.Context) KafkaMirrorMakerMapOutput {
	return o
}

func (o KafkaMirrorMakerMapOutput) MapIndex(k pulumi.StringInput) KafkaMirrorMakerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KafkaMirrorMaker {
		return vs[0].(map[string]KafkaMirrorMaker)[vs[1].(string)]
	}).(KafkaMirrorMakerOutput)
}

func init() {
	pulumi.RegisterOutputType(KafkaMirrorMakerOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMakerPtrOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMakerArrayOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMakerMapOutput{})
}
