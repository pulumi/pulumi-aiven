// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The MySQL resource allows the creation and management of Aiven MySQL services.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewMySql(ctx, "mysql1", &aiven.MySqlArgs{
//				Project:               pulumi.Any(data.Aiven_project.Foo.Project),
//				CloudName:             pulumi.String("google-europe-west1"),
//				Plan:                  pulumi.String("business-4"),
//				ServiceName:           pulumi.String("my-mysql1"),
//				MaintenanceWindowDow:  pulumi.String("monday"),
//				MaintenanceWindowTime: pulumi.String("10:00:00"),
//				MysqlUserConfig: &aiven.MySqlMysqlUserConfigArgs{
//					MysqlVersion: pulumi.String("8"),
//					Mysql: &aiven.MySqlMysqlUserConfigMysqlArgs{
//						SqlMode:              pulumi.String("ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE"),
//						SqlRequirePrimaryKey: pulumi.Bool(true),
//					},
//					PublicAccess: &aiven.MySqlMysqlUserConfigPublicAccessArgs{
//						Mysql: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/mySql:MySql mysql1 project/service_name
// ```
type MySql struct {
	pulumi.CustomResourceState

	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrOutput `pulumi:"additionalDiskSpace"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components MySqlComponentArrayOutput `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additional_disk_space` to specify the space to be added to the default `disk_space` defined by the plan.
	DiskSpace pulumi.StringPtrOutput `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringOutput `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault pulumi.StringOutput `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep pulumi.StringOutput `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringOutput `pulumi:"diskSpaceUsed"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// Mysql user configurable settings
	MysqlUserConfig MySqlMysqlUserConfigPtrOutput `pulumi:"mysqlUserConfig"`
	// MySQL specific server provided values
	Mysqls MySqlMysqlArrayOutput `pulumi:"mysqls"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringOutput `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations MySqlServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// The port of the service
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringOutput `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayOutput `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags MySqlTagArrayOutput `pulumi:"tags"`
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails MySqlTechEmailArrayOutput `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewMySql registers a new resource with the given unique name, arguments, and options.
func NewMySql(ctx *pulumi.Context,
	name string, args *MySqlArgs, opts ...pulumi.ResourceOption) (*MySql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePassword",
		"serviceUri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MySql
	err := ctx.RegisterResource("aiven:index/mySql:MySql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMySql gets an existing MySql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMySql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MySqlState, opts ...pulumi.ResourceOption) (*MySql, error) {
	var resource MySql
	err := ctx.ReadResource("aiven:index/mySql:MySql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MySql resources.
type mySqlState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []MySqlComponent `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additional_disk_space` to specify the space to be added to the default `disk_space` defined by the plan.
	DiskSpace *string `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap *string `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault *string `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep *string `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed *string `pulumi:"diskSpaceUsed"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Mysql user configurable settings
	MysqlUserConfig *MySqlMysqlUserConfig `pulumi:"mysqlUserConfig"`
	// MySQL specific server provided values
	Mysqls []MySqlMysql `pulumi:"mysqls"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []MySqlServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword *string `pulumi:"servicePassword"`
	// The port of the service
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State *string `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []MySqlTag `pulumi:"tags"`
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails []MySqlTechEmail `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type MySqlState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components MySqlComponentArrayInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additional_disk_space` to specify the space to be added to the default `disk_space` defined by the plan.
	DiskSpace pulumi.StringPtrInput
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringPtrInput
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault pulumi.StringPtrInput
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep pulumi.StringPtrInput
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Mysql user configurable settings
	MysqlUserConfig MySqlMysqlUserConfigPtrInput
	// MySQL specific server provided values
	Mysqls MySqlMysqlArrayInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// The hostname of the service.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations MySqlServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringPtrInput
	// The port of the service
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringPtrInput
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringPtrInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags MySqlTagArrayInput
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails MySqlTechEmailArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (MySqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*mySqlState)(nil)).Elem()
}

type mySqlArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additional_disk_space` to specify the space to be added to the default `disk_space` defined by the plan.
	DiskSpace *string `pulumi:"diskSpace"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Mysql user configurable settings
	MysqlUserConfig *MySqlMysqlUserConfig `pulumi:"mysqlUserConfig"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []MySqlServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []MySqlTag `pulumi:"tags"`
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails []MySqlTechEmail `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a MySql resource.
type MySqlArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additional_disk_space` to specify the space to be added to the default `disk_space` defined by the plan.
	DiskSpace pulumi.StringPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Mysql user configurable settings
	MysqlUserConfig MySqlMysqlUserConfigPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations MySqlServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags MySqlTagArrayInput
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails MySqlTechEmailArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (MySqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mySqlArgs)(nil)).Elem()
}

type MySqlInput interface {
	pulumi.Input

	ToMySqlOutput() MySqlOutput
	ToMySqlOutputWithContext(ctx context.Context) MySqlOutput
}

func (*MySql) ElementType() reflect.Type {
	return reflect.TypeOf((**MySql)(nil)).Elem()
}

func (i *MySql) ToMySqlOutput() MySqlOutput {
	return i.ToMySqlOutputWithContext(context.Background())
}

func (i *MySql) ToMySqlOutputWithContext(ctx context.Context) MySqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlOutput)
}

// MySqlArrayInput is an input type that accepts MySqlArray and MySqlArrayOutput values.
// You can construct a concrete instance of `MySqlArrayInput` via:
//
//	MySqlArray{ MySqlArgs{...} }
type MySqlArrayInput interface {
	pulumi.Input

	ToMySqlArrayOutput() MySqlArrayOutput
	ToMySqlArrayOutputWithContext(context.Context) MySqlArrayOutput
}

type MySqlArray []MySqlInput

func (MySqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MySql)(nil)).Elem()
}

func (i MySqlArray) ToMySqlArrayOutput() MySqlArrayOutput {
	return i.ToMySqlArrayOutputWithContext(context.Background())
}

func (i MySqlArray) ToMySqlArrayOutputWithContext(ctx context.Context) MySqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlArrayOutput)
}

// MySqlMapInput is an input type that accepts MySqlMap and MySqlMapOutput values.
// You can construct a concrete instance of `MySqlMapInput` via:
//
//	MySqlMap{ "key": MySqlArgs{...} }
type MySqlMapInput interface {
	pulumi.Input

	ToMySqlMapOutput() MySqlMapOutput
	ToMySqlMapOutputWithContext(context.Context) MySqlMapOutput
}

type MySqlMap map[string]MySqlInput

func (MySqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MySql)(nil)).Elem()
}

func (i MySqlMap) ToMySqlMapOutput() MySqlMapOutput {
	return i.ToMySqlMapOutputWithContext(context.Background())
}

func (i MySqlMap) ToMySqlMapOutputWithContext(ctx context.Context) MySqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlMapOutput)
}

type MySqlOutput struct{ *pulumi.OutputState }

func (MySqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySql)(nil)).Elem()
}

func (o MySqlOutput) ToMySqlOutput() MySqlOutput {
	return o
}

func (o MySqlOutput) ToMySqlOutputWithContext(ctx context.Context) MySqlOutput {
	return o
}

// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
// reducing will result in the service rebalancing.
func (o MySqlOutput) AdditionalDiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringPtrOutput { return v.AdditionalDiskSpace }).(pulumi.StringPtrOutput)
}

// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
// are documented on each Cloud provider's own support articles, like [here for
// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
func (o MySqlOutput) CloudName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringPtrOutput { return v.CloudName }).(pulumi.StringPtrOutput)
}

// Service component information objects
func (o MySqlOutput) Components() MySqlComponentArrayOutput {
	return o.ApplyT(func(v *MySql) MySqlComponentArrayOutput { return v.Components }).(MySqlComponentArrayOutput)
}

// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
// will result in the service rebalancing.
//
// Deprecated: This will be removed in v5.0.0. Please use `additional_disk_space` to specify the space to be added to the default `disk_space` defined by the plan.
func (o MySqlOutput) DiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringPtrOutput { return v.DiskSpace }).(pulumi.StringPtrOutput)
}

// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
func (o MySqlOutput) DiskSpaceCap() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.DiskSpaceCap }).(pulumi.StringOutput)
}

// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
// Its also the minimum value for `disk_space`
func (o MySqlOutput) DiskSpaceDefault() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.DiskSpaceDefault }).(pulumi.StringOutput)
}

// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
func (o MySqlOutput) DiskSpaceStep() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.DiskSpaceStep }).(pulumi.StringOutput)
}

// Disk space that service is currently using
func (o MySqlOutput) DiskSpaceUsed() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.DiskSpaceUsed }).(pulumi.StringOutput)
}

// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
func (o MySqlOutput) MaintenanceWindowDow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringPtrOutput { return v.MaintenanceWindowDow }).(pulumi.StringPtrOutput)
}

// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
func (o MySqlOutput) MaintenanceWindowTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringPtrOutput { return v.MaintenanceWindowTime }).(pulumi.StringPtrOutput)
}

// Mysql user configurable settings
func (o MySqlOutput) MysqlUserConfig() MySqlMysqlUserConfigPtrOutput {
	return o.ApplyT(func(v *MySql) MySqlMysqlUserConfigPtrOutput { return v.MysqlUserConfig }).(MySqlMysqlUserConfigPtrOutput)
}

// MySQL specific server provided values
func (o MySqlOutput) Mysqls() MySqlMysqlArrayOutput {
	return o.ApplyT(func(v *MySql) MySqlMysqlArrayOutput { return v.Mysqls }).(MySqlMysqlArrayOutput)
}

// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
func (o MySqlOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
// reference. This property cannot be changed, doing so forces recreation of the resource.
func (o MySqlOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
// servers so the operation can take significant amount of time to complete if the service has a lot of data.
func (o MySqlOutput) ProjectVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringPtrOutput { return v.ProjectVpcId }).(pulumi.StringPtrOutput)
}

// The hostname of the service.
func (o MySqlOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.ServiceHost }).(pulumi.StringOutput)
}

// Service integrations to specify when creating a service. Not applied after initial service creation
func (o MySqlOutput) ServiceIntegrations() MySqlServiceIntegrationArrayOutput {
	return o.ApplyT(func(v *MySql) MySqlServiceIntegrationArrayOutput { return v.ServiceIntegrations }).(MySqlServiceIntegrationArrayOutput)
}

// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
// service so name should be picked based on intended service usage rather than current attributes.
func (o MySqlOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Password used for connecting to the service, if applicable
func (o MySqlOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// The port of the service
func (o MySqlOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v *MySql) pulumi.IntOutput { return v.ServicePort }).(pulumi.IntOutput)
}

// Aiven internal service type code
func (o MySqlOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
func (o MySqlOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.ServiceUri }).(pulumi.StringOutput)
}

// Username used for connecting to the service, if applicable
func (o MySqlOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.ServiceUsername }).(pulumi.StringOutput)
}

// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
func (o MySqlOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
// static ip resource is in the 'assigned' state it cannot be unbound from the node again
func (o MySqlOutput) StaticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MySql) pulumi.StringArrayOutput { return v.StaticIps }).(pulumi.StringArrayOutput)
}

// Tags are key-value pairs that allow you to categorize services.
func (o MySqlOutput) Tags() MySqlTagArrayOutput {
	return o.ApplyT(func(v *MySql) MySqlTagArrayOutput { return v.Tags }).(MySqlTagArrayOutput)
}

// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
// instability.
func (o MySqlOutput) TechEmails() MySqlTechEmailArrayOutput {
	return o.ApplyT(func(v *MySql) MySqlTechEmailArrayOutput { return v.TechEmails }).(MySqlTechEmailArrayOutput)
}

// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
// much of the content can at least be restored from backup in case accidental deletion is done.
func (o MySqlOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MySql) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type MySqlArrayOutput struct{ *pulumi.OutputState }

func (MySqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MySql)(nil)).Elem()
}

func (o MySqlArrayOutput) ToMySqlArrayOutput() MySqlArrayOutput {
	return o
}

func (o MySqlArrayOutput) ToMySqlArrayOutputWithContext(ctx context.Context) MySqlArrayOutput {
	return o
}

func (o MySqlArrayOutput) Index(i pulumi.IntInput) MySqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MySql {
		return vs[0].([]*MySql)[vs[1].(int)]
	}).(MySqlOutput)
}

type MySqlMapOutput struct{ *pulumi.OutputState }

func (MySqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MySql)(nil)).Elem()
}

func (o MySqlMapOutput) ToMySqlMapOutput() MySqlMapOutput {
	return o
}

func (o MySqlMapOutput) ToMySqlMapOutputWithContext(ctx context.Context) MySqlMapOutput {
	return o
}

func (o MySqlMapOutput) MapIndex(k pulumi.StringInput) MySqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MySql {
		return vs[0].(map[string]*MySql)[vs[1].(string)]
	}).(MySqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MySqlInput)(nil)).Elem(), &MySql{})
	pulumi.RegisterInputType(reflect.TypeOf((*MySqlArrayInput)(nil)).Elem(), MySqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MySqlMapInput)(nil)).Elem(), MySqlMap{})
	pulumi.RegisterOutputType(MySqlOutput{})
	pulumi.RegisterOutputType(MySqlArrayOutput{})
	pulumi.RegisterOutputType(MySqlMapOutput{})
}
