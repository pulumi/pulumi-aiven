// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # MySQL Resource
//
// The MySQL resource allows the creation and management of Aiven MySQL services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewMySql(ctx, "mysql1", &aiven.MySqlArgs{
// 			Project:               pulumi.Any(data.Aiven_project.Foo.Project),
// 			CloudName:             pulumi.String("google-europe-west1"),
// 			Plan:                  pulumi.String("business-4"),
// 			ServiceName:           pulumi.String("my-mysql1"),
// 			MaintenanceWindowDow:  pulumi.String("monday"),
// 			MaintenanceWindowTime: pulumi.String("10:00:00"),
// 			MysqlUserConfig: &aiven.MySqlMysqlUserConfigArgs{
// 				MysqlVersion: pulumi.String("8"),
// 				Mysql: &aiven.MySqlMysqlUserConfigMysqlArgs{
// 					SqlMode:              pulumi.String("ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE"),
// 					SqlRequirePrimaryKey: pulumi.String("true"),
// 				},
// 				PublicAccess: &aiven.MySqlMysqlUserConfigPublicAccessArgs{
// 					Mysql: pulumi.String("true"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type MySql struct {
	pulumi.CustomResourceState

	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components MySqlComponentArrayOutput `pulumi:"components"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// Allow clients to connect to mysql from the public internet for service
	// nodes that are in a project VPC or another type of private network
	Mysql MySqlMysqlOutput `pulumi:"mysql"`
	// defines MySQL specific additional configuration options. The following
	// configuration options available:
	MysqlUserConfig MySqlMysqlUserConfigPtrOutput `pulumi:"mysqlUserConfig"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringOutput `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// MySQL hostname.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// can be used to define service integrations that must exist
	// immediately upon service creation. By the time of writing the only such integration is
	// defining that MySQL service is a read-replica of another service. To define a read-
	// replica the following configuration needs to be added:
	ServiceIntegrations MySqlServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the MySQL service, if applicable.
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// MySQL port.
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the MySQL service.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the MySQL service, if applicable.
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state.
	State pulumi.StringOutput `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewMySql registers a new resource with the given unique name, arguments, and options.
func NewMySql(ctx *pulumi.Context,
	name string, args *MySqlArgs, opts ...pulumi.ResourceOption) (*MySql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource MySql
	err := ctx.RegisterResource("aiven:index/mySql:MySql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMySql gets an existing MySql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMySql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MySqlState, opts ...pulumi.ResourceOption) (*MySql, error) {
	var resource MySql
	err := ctx.ReadResource("aiven:index/mySql:MySql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MySql resources.
type mySqlState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []MySqlComponent `pulumi:"components"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Allow clients to connect to mysql from the public internet for service
	// nodes that are in a project VPC or another type of private network
	Mysql *MySqlMysql `pulumi:"mysql"`
	// defines MySQL specific additional configuration options. The following
	// configuration options available:
	MysqlUserConfig *MySqlMysqlUserConfig `pulumi:"mysqlUserConfig"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project *string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// MySQL hostname.
	ServiceHost *string `pulumi:"serviceHost"`
	// can be used to define service integrations that must exist
	// immediately upon service creation. By the time of writing the only such integration is
	// defining that MySQL service is a read-replica of another service. To define a read-
	// replica the following configuration needs to be added:
	ServiceIntegrations []MySqlServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the MySQL service, if applicable.
	ServicePassword *string `pulumi:"servicePassword"`
	// MySQL port.
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the MySQL service.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the MySQL service, if applicable.
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state.
	State *string `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type MySqlState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components MySqlComponentArrayInput
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Allow clients to connect to mysql from the public internet for service
	// nodes that are in a project VPC or another type of private network
	Mysql MySqlMysqlPtrInput
	// defines MySQL specific additional configuration options. The following
	// configuration options available:
	MysqlUserConfig MySqlMysqlUserConfigPtrInput
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringPtrInput
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// MySQL hostname.
	ServiceHost pulumi.StringPtrInput
	// can be used to define service integrations that must exist
	// immediately upon service creation. By the time of writing the only such integration is
	// defining that MySQL service is a read-replica of another service. To define a read-
	// replica the following configuration needs to be added:
	ServiceIntegrations MySqlServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the MySQL service, if applicable.
	ServicePassword pulumi.StringPtrInput
	// MySQL port.
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the MySQL service.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the MySQL service, if applicable.
	ServiceUsername pulumi.StringPtrInput
	// Service state.
	State pulumi.StringPtrInput
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (MySqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*mySqlState)(nil)).Elem()
}

type mySqlArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Allow clients to connect to mysql from the public internet for service
	// nodes that are in a project VPC or another type of private network
	Mysql *MySqlMysql `pulumi:"mysql"`
	// defines MySQL specific additional configuration options. The following
	// configuration options available:
	MysqlUserConfig *MySqlMysqlUserConfig `pulumi:"mysqlUserConfig"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// can be used to define service integrations that must exist
	// immediately upon service creation. By the time of writing the only such integration is
	// defining that MySQL service is a read-replica of another service. To define a read-
	// replica the following configuration needs to be added:
	ServiceIntegrations []MySqlServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a MySql resource.
type MySqlArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Allow clients to connect to mysql from the public internet for service
	// nodes that are in a project VPC or another type of private network
	Mysql MySqlMysqlPtrInput
	// defines MySQL specific additional configuration options. The following
	// configuration options available:
	MysqlUserConfig MySqlMysqlUserConfigPtrInput
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The exact options can be
	// seen from the Aiven web console's Create Service dialog.
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringInput
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// can be used to define service integrations that must exist
	// immediately upon service creation. By the time of writing the only such integration is
	// defining that MySQL service is a read-replica of another service. To define a read-
	// replica the following configuration needs to be added:
	ServiceIntegrations MySqlServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (MySqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mySqlArgs)(nil)).Elem()
}

type MySqlInput interface {
	pulumi.Input

	ToMySqlOutput() MySqlOutput
	ToMySqlOutputWithContext(ctx context.Context) MySqlOutput
}

func (MySql) ElementType() reflect.Type {
	return reflect.TypeOf((*MySql)(nil)).Elem()
}

func (i MySql) ToMySqlOutput() MySqlOutput {
	return i.ToMySqlOutputWithContext(context.Background())
}

func (i MySql) ToMySqlOutputWithContext(ctx context.Context) MySqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlOutput)
}

type MySqlOutput struct {
	*pulumi.OutputState
}

func (MySqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlOutput)(nil)).Elem()
}

func (o MySqlOutput) ToMySqlOutput() MySqlOutput {
	return o
}

func (o MySqlOutput) ToMySqlOutputWithContext(ctx context.Context) MySqlOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MySqlOutput{})
}
