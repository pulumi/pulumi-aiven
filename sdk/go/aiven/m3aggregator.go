// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The M3 Aggregator resource allows the creation and management of Aiven M3 Aggregator services.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewM3Aggregator(ctx, "m3a", &aiven.M3AggregatorArgs{
//				Project:               pulumi.Any(foo.Project),
//				CloudName:             pulumi.String("google-europe-west1"),
//				Plan:                  pulumi.String("business-8"),
//				ServiceName:           pulumi.String("my-m3a"),
//				MaintenanceWindowDow:  pulumi.String("monday"),
//				MaintenanceWindowTime: pulumi.String("10:00:00"),
//				M3aggregatorUserConfig: &aiven.M3AggregatorM3aggregatorUserConfigArgs{
//					M3aggregatorVersion: pulumi.String("0.15"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/m3Aggregator:M3Aggregator m3a project/service_name
// ```
type M3Aggregator struct {
	pulumi.CustomResourceState

	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrOutput `pulumi:"additionalDiskSpace"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components M3AggregatorComponentArrayOutput `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace pulumi.StringPtrOutput `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringOutput `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault pulumi.StringOutput `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep pulumi.StringOutput `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringOutput `pulumi:"diskSpaceUsed"`
	// M3aggregator user configurable settings
	M3aggregatorUserConfig M3AggregatorM3aggregatorUserConfigPtrOutput `pulumi:"m3aggregatorUserConfig"`
	// M3 aggregator specific server provided values
	M3aggregators M3AggregatorM3aggregatorArrayOutput `pulumi:"m3aggregators"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringOutput `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations M3AggregatorServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// The port of the service
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringOutput `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayOutput `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags M3AggregatorTagArrayOutput `pulumi:"tags"`
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails M3AggregatorTechEmailArrayOutput `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewM3Aggregator registers a new resource with the given unique name, arguments, and options.
func NewM3Aggregator(ctx *pulumi.Context,
	name string, args *M3AggregatorArgs, opts ...pulumi.ResourceOption) (*M3Aggregator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePassword",
		"serviceUri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource M3Aggregator
	err := ctx.RegisterResource("aiven:index/m3Aggregator:M3Aggregator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetM3Aggregator gets an existing M3Aggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetM3Aggregator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *M3AggregatorState, opts ...pulumi.ResourceOption) (*M3Aggregator, error) {
	var resource M3Aggregator
	err := ctx.ReadResource("aiven:index/m3Aggregator:M3Aggregator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering M3Aggregator resources.
type m3aggregatorState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []M3AggregatorComponent `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace *string `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap *string `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault *string `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep *string `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed *string `pulumi:"diskSpaceUsed"`
	// M3aggregator user configurable settings
	M3aggregatorUserConfig *M3AggregatorM3aggregatorUserConfig `pulumi:"m3aggregatorUserConfig"`
	// M3 aggregator specific server provided values
	M3aggregators []M3AggregatorM3aggregator `pulumi:"m3aggregators"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []M3AggregatorServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword *string `pulumi:"servicePassword"`
	// The port of the service
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State *string `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []M3AggregatorTag `pulumi:"tags"`
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails []M3AggregatorTechEmail `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type M3AggregatorState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components M3AggregatorComponentArrayInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace pulumi.StringPtrInput
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringPtrInput
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault pulumi.StringPtrInput
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep pulumi.StringPtrInput
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringPtrInput
	// M3aggregator user configurable settings
	M3aggregatorUserConfig M3AggregatorM3aggregatorUserConfigPtrInput
	// M3 aggregator specific server provided values
	M3aggregators M3AggregatorM3aggregatorArrayInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// The hostname of the service.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations M3AggregatorServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringPtrInput
	// The port of the service
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringPtrInput
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringPtrInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags M3AggregatorTagArrayInput
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails M3AggregatorTechEmailArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (M3AggregatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*m3aggregatorState)(nil)).Elem()
}

type m3aggregatorArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace *string `pulumi:"diskSpace"`
	// M3aggregator user configurable settings
	M3aggregatorUserConfig *M3AggregatorM3aggregatorUserConfig `pulumi:"m3aggregatorUserConfig"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []M3AggregatorServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []M3AggregatorTag `pulumi:"tags"`
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails []M3AggregatorTechEmail `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a M3Aggregator resource.
type M3AggregatorArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace pulumi.StringPtrInput
	// M3aggregator user configurable settings
	M3aggregatorUserConfig M3AggregatorM3aggregatorUserConfigPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations M3AggregatorServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags M3AggregatorTagArrayInput
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
	// instability.
	TechEmails M3AggregatorTechEmailArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (M3AggregatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*m3aggregatorArgs)(nil)).Elem()
}

type M3AggregatorInput interface {
	pulumi.Input

	ToM3AggregatorOutput() M3AggregatorOutput
	ToM3AggregatorOutputWithContext(ctx context.Context) M3AggregatorOutput
}

func (*M3Aggregator) ElementType() reflect.Type {
	return reflect.TypeOf((**M3Aggregator)(nil)).Elem()
}

func (i *M3Aggregator) ToM3AggregatorOutput() M3AggregatorOutput {
	return i.ToM3AggregatorOutputWithContext(context.Background())
}

func (i *M3Aggregator) ToM3AggregatorOutputWithContext(ctx context.Context) M3AggregatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(M3AggregatorOutput)
}

// M3AggregatorArrayInput is an input type that accepts M3AggregatorArray and M3AggregatorArrayOutput values.
// You can construct a concrete instance of `M3AggregatorArrayInput` via:
//
//	M3AggregatorArray{ M3AggregatorArgs{...} }
type M3AggregatorArrayInput interface {
	pulumi.Input

	ToM3AggregatorArrayOutput() M3AggregatorArrayOutput
	ToM3AggregatorArrayOutputWithContext(context.Context) M3AggregatorArrayOutput
}

type M3AggregatorArray []M3AggregatorInput

func (M3AggregatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*M3Aggregator)(nil)).Elem()
}

func (i M3AggregatorArray) ToM3AggregatorArrayOutput() M3AggregatorArrayOutput {
	return i.ToM3AggregatorArrayOutputWithContext(context.Background())
}

func (i M3AggregatorArray) ToM3AggregatorArrayOutputWithContext(ctx context.Context) M3AggregatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(M3AggregatorArrayOutput)
}

// M3AggregatorMapInput is an input type that accepts M3AggregatorMap and M3AggregatorMapOutput values.
// You can construct a concrete instance of `M3AggregatorMapInput` via:
//
//	M3AggregatorMap{ "key": M3AggregatorArgs{...} }
type M3AggregatorMapInput interface {
	pulumi.Input

	ToM3AggregatorMapOutput() M3AggregatorMapOutput
	ToM3AggregatorMapOutputWithContext(context.Context) M3AggregatorMapOutput
}

type M3AggregatorMap map[string]M3AggregatorInput

func (M3AggregatorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*M3Aggregator)(nil)).Elem()
}

func (i M3AggregatorMap) ToM3AggregatorMapOutput() M3AggregatorMapOutput {
	return i.ToM3AggregatorMapOutputWithContext(context.Background())
}

func (i M3AggregatorMap) ToM3AggregatorMapOutputWithContext(ctx context.Context) M3AggregatorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(M3AggregatorMapOutput)
}

type M3AggregatorOutput struct{ *pulumi.OutputState }

func (M3AggregatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**M3Aggregator)(nil)).Elem()
}

func (o M3AggregatorOutput) ToM3AggregatorOutput() M3AggregatorOutput {
	return o
}

func (o M3AggregatorOutput) ToM3AggregatorOutputWithContext(ctx context.Context) M3AggregatorOutput {
	return o
}

// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
// reducing will result in the service rebalancing.
func (o M3AggregatorOutput) AdditionalDiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringPtrOutput { return v.AdditionalDiskSpace }).(pulumi.StringPtrOutput)
}

// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
// are documented on each Cloud provider's own support articles, like [here for
// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
func (o M3AggregatorOutput) CloudName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringPtrOutput { return v.CloudName }).(pulumi.StringPtrOutput)
}

// Service component information objects
func (o M3AggregatorOutput) Components() M3AggregatorComponentArrayOutput {
	return o.ApplyT(func(v *M3Aggregator) M3AggregatorComponentArrayOutput { return v.Components }).(M3AggregatorComponentArrayOutput)
}

// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
// will result in the service rebalancing.
//
// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
func (o M3AggregatorOutput) DiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringPtrOutput { return v.DiskSpace }).(pulumi.StringPtrOutput)
}

// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
func (o M3AggregatorOutput) DiskSpaceCap() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.DiskSpaceCap }).(pulumi.StringOutput)
}

// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
// Its also the minimum value for `disk_space`
func (o M3AggregatorOutput) DiskSpaceDefault() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.DiskSpaceDefault }).(pulumi.StringOutput)
}

// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
func (o M3AggregatorOutput) DiskSpaceStep() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.DiskSpaceStep }).(pulumi.StringOutput)
}

// Disk space that service is currently using
func (o M3AggregatorOutput) DiskSpaceUsed() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.DiskSpaceUsed }).(pulumi.StringOutput)
}

// M3aggregator user configurable settings
func (o M3AggregatorOutput) M3aggregatorUserConfig() M3AggregatorM3aggregatorUserConfigPtrOutput {
	return o.ApplyT(func(v *M3Aggregator) M3AggregatorM3aggregatorUserConfigPtrOutput { return v.M3aggregatorUserConfig }).(M3AggregatorM3aggregatorUserConfigPtrOutput)
}

// M3 aggregator specific server provided values
func (o M3AggregatorOutput) M3aggregators() M3AggregatorM3aggregatorArrayOutput {
	return o.ApplyT(func(v *M3Aggregator) M3AggregatorM3aggregatorArrayOutput { return v.M3aggregators }).(M3AggregatorM3aggregatorArrayOutput)
}

// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
func (o M3AggregatorOutput) MaintenanceWindowDow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringPtrOutput { return v.MaintenanceWindowDow }).(pulumi.StringPtrOutput)
}

// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
func (o M3AggregatorOutput) MaintenanceWindowTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringPtrOutput { return v.MaintenanceWindowTime }).(pulumi.StringPtrOutput)
}

// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
func (o M3AggregatorOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
// reference. Changing this property forces recreation of the resource.
func (o M3AggregatorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
// servers so the operation can take significant amount of time to complete if the service has a lot of data.
func (o M3AggregatorOutput) ProjectVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringPtrOutput { return v.ProjectVpcId }).(pulumi.StringPtrOutput)
}

// The hostname of the service.
func (o M3AggregatorOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.ServiceHost }).(pulumi.StringOutput)
}

// Service integrations to specify when creating a service. Not applied after initial service creation
func (o M3AggregatorOutput) ServiceIntegrations() M3AggregatorServiceIntegrationArrayOutput {
	return o.ApplyT(func(v *M3Aggregator) M3AggregatorServiceIntegrationArrayOutput { return v.ServiceIntegrations }).(M3AggregatorServiceIntegrationArrayOutput)
}

// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
// service so name should be picked based on intended service usage rather than current attributes.
func (o M3AggregatorOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Password used for connecting to the service, if applicable
func (o M3AggregatorOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// The port of the service
func (o M3AggregatorOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.IntOutput { return v.ServicePort }).(pulumi.IntOutput)
}

// Aiven internal service type code
func (o M3AggregatorOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
func (o M3AggregatorOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.ServiceUri }).(pulumi.StringOutput)
}

// Username used for connecting to the service, if applicable
func (o M3AggregatorOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.ServiceUsername }).(pulumi.StringOutput)
}

// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
func (o M3AggregatorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
// static ip resource is in the 'assigned' state it cannot be unbound from the node again
func (o M3AggregatorOutput) StaticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.StringArrayOutput { return v.StaticIps }).(pulumi.StringArrayOutput)
}

// Tags are key-value pairs that allow you to categorize services.
func (o M3AggregatorOutput) Tags() M3AggregatorTagArrayOutput {
	return o.ApplyT(func(v *M3Aggregator) M3AggregatorTagArrayOutput { return v.Tags }).(M3AggregatorTagArrayOutput)
}

// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service
// instability.
func (o M3AggregatorOutput) TechEmails() M3AggregatorTechEmailArrayOutput {
	return o.ApplyT(func(v *M3Aggregator) M3AggregatorTechEmailArrayOutput { return v.TechEmails }).(M3AggregatorTechEmailArrayOutput)
}

// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
// much of the content can at least be restored from backup in case accidental deletion is done.
func (o M3AggregatorOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *M3Aggregator) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type M3AggregatorArrayOutput struct{ *pulumi.OutputState }

func (M3AggregatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*M3Aggregator)(nil)).Elem()
}

func (o M3AggregatorArrayOutput) ToM3AggregatorArrayOutput() M3AggregatorArrayOutput {
	return o
}

func (o M3AggregatorArrayOutput) ToM3AggregatorArrayOutputWithContext(ctx context.Context) M3AggregatorArrayOutput {
	return o
}

func (o M3AggregatorArrayOutput) Index(i pulumi.IntInput) M3AggregatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *M3Aggregator {
		return vs[0].([]*M3Aggregator)[vs[1].(int)]
	}).(M3AggregatorOutput)
}

type M3AggregatorMapOutput struct{ *pulumi.OutputState }

func (M3AggregatorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*M3Aggregator)(nil)).Elem()
}

func (o M3AggregatorMapOutput) ToM3AggregatorMapOutput() M3AggregatorMapOutput {
	return o
}

func (o M3AggregatorMapOutput) ToM3AggregatorMapOutputWithContext(ctx context.Context) M3AggregatorMapOutput {
	return o
}

func (o M3AggregatorMapOutput) MapIndex(k pulumi.StringInput) M3AggregatorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *M3Aggregator {
		return vs[0].(map[string]*M3Aggregator)[vs[1].(string)]
	}).(M3AggregatorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*M3AggregatorInput)(nil)).Elem(), &M3Aggregator{})
	pulumi.RegisterInputType(reflect.TypeOf((*M3AggregatorArrayInput)(nil)).Elem(), M3AggregatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*M3AggregatorMapInput)(nil)).Elem(), M3AggregatorMap{})
	pulumi.RegisterOutputType(M3AggregatorOutput{})
	pulumi.RegisterOutputType(M3AggregatorArrayOutput{})
	pulumi.RegisterOutputType(M3AggregatorMapOutput{})
}
