// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type KafkaSchemaConfiguration struct {
	pulumi.CustomResourceState

	// Kafka Schemas compatibility level
	CompatibilityLevel pulumi.StringOutput `pulumi:"compatibilityLevel"`
	// Project to link the Kafka Schemas Configuration to
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the Kafka Schemas Configuration to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewKafkaSchemaConfiguration registers a new resource with the given unique name, arguments, and options.
func NewKafkaSchemaConfiguration(ctx *pulumi.Context,
	name string, args *KafkaSchemaConfigurationArgs, opts ...pulumi.ResourceOption) (*KafkaSchemaConfiguration, error) {
	if args == nil || args.CompatibilityLevel == nil {
		return nil, errors.New("missing required argument 'CompatibilityLevel'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil {
		args = &KafkaSchemaConfigurationArgs{}
	}
	var resource KafkaSchemaConfiguration
	err := ctx.RegisterResource("aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaSchemaConfiguration gets an existing KafkaSchemaConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaSchemaConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaSchemaConfigurationState, opts ...pulumi.ResourceOption) (*KafkaSchemaConfiguration, error) {
	var resource KafkaSchemaConfiguration
	err := ctx.ReadResource("aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaSchemaConfiguration resources.
type kafkaSchemaConfigurationState struct {
	// Kafka Schemas compatibility level
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// Project to link the Kafka Schemas Configuration to
	Project *string `pulumi:"project"`
	// Service to link the Kafka Schemas Configuration to
	ServiceName *string `pulumi:"serviceName"`
}

type KafkaSchemaConfigurationState struct {
	// Kafka Schemas compatibility level
	CompatibilityLevel pulumi.StringPtrInput
	// Project to link the Kafka Schemas Configuration to
	Project pulumi.StringPtrInput
	// Service to link the Kafka Schemas Configuration to
	ServiceName pulumi.StringPtrInput
}

func (KafkaSchemaConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaConfigurationState)(nil)).Elem()
}

type kafkaSchemaConfigurationArgs struct {
	// Kafka Schemas compatibility level
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// Project to link the Kafka Schemas Configuration to
	Project string `pulumi:"project"`
	// Service to link the Kafka Schemas Configuration to
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a KafkaSchemaConfiguration resource.
type KafkaSchemaConfigurationArgs struct {
	// Kafka Schemas compatibility level
	CompatibilityLevel pulumi.StringInput
	// Project to link the Kafka Schemas Configuration to
	Project pulumi.StringInput
	// Service to link the Kafka Schemas Configuration to
	ServiceName pulumi.StringInput
}

func (KafkaSchemaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaConfigurationArgs)(nil)).Elem()
}
