// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Kafka Schema Configuration Resource
//
// The Kafka Schema Configuration resource allows the creation and management of Aiven Kafka Schema Configurations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewKafkaSchemaConfiguration(ctx, "config", &aiven.KafkaSchemaConfigurationArgs{
// 			Project:            pulumi.Any(aiven_project.Kafka - schemas - project1.Project),
// 			ServiceName:        pulumi.Any(aiven_kafka.Kafka - service1.Service_name),
// 			CompatibilityLevel: pulumi.String("BACKWARD"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type KafkaSchemaConfiguration struct {
	pulumi.CustomResourceState

	// is the Global Kafka Schema configuration compatibility level when defined
	// for `KafkaSchemaConfiguration` resource. Also, Kafka Schema configuration
	// compatibility level can be overridden for a specific subject when used in `KafkaSchema`
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel pulumi.StringOutput `pulumi:"compatibilityLevel"`
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the Kafka Schemas Configuration to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewKafkaSchemaConfiguration registers a new resource with the given unique name, arguments, and options.
func NewKafkaSchemaConfiguration(ctx *pulumi.Context,
	name string, args *KafkaSchemaConfigurationArgs, opts ...pulumi.ResourceOption) (*KafkaSchemaConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompatibilityLevel == nil {
		return nil, errors.New("invalid value for required argument 'CompatibilityLevel'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource KafkaSchemaConfiguration
	err := ctx.RegisterResource("aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaSchemaConfiguration gets an existing KafkaSchemaConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaSchemaConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaSchemaConfigurationState, opts ...pulumi.ResourceOption) (*KafkaSchemaConfiguration, error) {
	var resource KafkaSchemaConfiguration
	err := ctx.ReadResource("aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaSchemaConfiguration resources.
type kafkaSchemaConfigurationState struct {
	// is the Global Kafka Schema configuration compatibility level when defined
	// for `KafkaSchemaConfiguration` resource. Also, Kafka Schema configuration
	// compatibility level can be overridden for a specific subject when used in `KafkaSchema`
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project *string `pulumi:"project"`
	// Service to link the Kafka Schemas Configuration to
	ServiceName *string `pulumi:"serviceName"`
}

type KafkaSchemaConfigurationState struct {
	// is the Global Kafka Schema configuration compatibility level when defined
	// for `KafkaSchemaConfiguration` resource. Also, Kafka Schema configuration
	// compatibility level can be overridden for a specific subject when used in `KafkaSchema`
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel pulumi.StringPtrInput
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringPtrInput
	// Service to link the Kafka Schemas Configuration to
	ServiceName pulumi.StringPtrInput
}

func (KafkaSchemaConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaConfigurationState)(nil)).Elem()
}

type kafkaSchemaConfigurationArgs struct {
	// is the Global Kafka Schema configuration compatibility level when defined
	// for `KafkaSchemaConfiguration` resource. Also, Kafka Schema configuration
	// compatibility level can be overridden for a specific subject when used in `KafkaSchema`
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project string `pulumi:"project"`
	// Service to link the Kafka Schemas Configuration to
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a KafkaSchemaConfiguration resource.
type KafkaSchemaConfigurationArgs struct {
	// is the Global Kafka Schema configuration compatibility level when defined
	// for `KafkaSchemaConfiguration` resource. Also, Kafka Schema configuration
	// compatibility level can be overridden for a specific subject when used in `KafkaSchema`
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel pulumi.StringInput
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringInput
	// Service to link the Kafka Schemas Configuration to
	ServiceName pulumi.StringInput
}

func (KafkaSchemaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaConfigurationArgs)(nil)).Elem()
}

type KafkaSchemaConfigurationInput interface {
	pulumi.Input

	ToKafkaSchemaConfigurationOutput() KafkaSchemaConfigurationOutput
	ToKafkaSchemaConfigurationOutputWithContext(ctx context.Context) KafkaSchemaConfigurationOutput
}

func (*KafkaSchemaConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSchemaConfiguration)(nil)).Elem()
}

func (i *KafkaSchemaConfiguration) ToKafkaSchemaConfigurationOutput() KafkaSchemaConfigurationOutput {
	return i.ToKafkaSchemaConfigurationOutputWithContext(context.Background())
}

func (i *KafkaSchemaConfiguration) ToKafkaSchemaConfigurationOutputWithContext(ctx context.Context) KafkaSchemaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSchemaConfigurationOutput)
}

// KafkaSchemaConfigurationArrayInput is an input type that accepts KafkaSchemaConfigurationArray and KafkaSchemaConfigurationArrayOutput values.
// You can construct a concrete instance of `KafkaSchemaConfigurationArrayInput` via:
//
//          KafkaSchemaConfigurationArray{ KafkaSchemaConfigurationArgs{...} }
type KafkaSchemaConfigurationArrayInput interface {
	pulumi.Input

	ToKafkaSchemaConfigurationArrayOutput() KafkaSchemaConfigurationArrayOutput
	ToKafkaSchemaConfigurationArrayOutputWithContext(context.Context) KafkaSchemaConfigurationArrayOutput
}

type KafkaSchemaConfigurationArray []KafkaSchemaConfigurationInput

func (KafkaSchemaConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaSchemaConfiguration)(nil)).Elem()
}

func (i KafkaSchemaConfigurationArray) ToKafkaSchemaConfigurationArrayOutput() KafkaSchemaConfigurationArrayOutput {
	return i.ToKafkaSchemaConfigurationArrayOutputWithContext(context.Background())
}

func (i KafkaSchemaConfigurationArray) ToKafkaSchemaConfigurationArrayOutputWithContext(ctx context.Context) KafkaSchemaConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSchemaConfigurationArrayOutput)
}

// KafkaSchemaConfigurationMapInput is an input type that accepts KafkaSchemaConfigurationMap and KafkaSchemaConfigurationMapOutput values.
// You can construct a concrete instance of `KafkaSchemaConfigurationMapInput` via:
//
//          KafkaSchemaConfigurationMap{ "key": KafkaSchemaConfigurationArgs{...} }
type KafkaSchemaConfigurationMapInput interface {
	pulumi.Input

	ToKafkaSchemaConfigurationMapOutput() KafkaSchemaConfigurationMapOutput
	ToKafkaSchemaConfigurationMapOutputWithContext(context.Context) KafkaSchemaConfigurationMapOutput
}

type KafkaSchemaConfigurationMap map[string]KafkaSchemaConfigurationInput

func (KafkaSchemaConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaSchemaConfiguration)(nil)).Elem()
}

func (i KafkaSchemaConfigurationMap) ToKafkaSchemaConfigurationMapOutput() KafkaSchemaConfigurationMapOutput {
	return i.ToKafkaSchemaConfigurationMapOutputWithContext(context.Background())
}

func (i KafkaSchemaConfigurationMap) ToKafkaSchemaConfigurationMapOutputWithContext(ctx context.Context) KafkaSchemaConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSchemaConfigurationMapOutput)
}

type KafkaSchemaConfigurationOutput struct{ *pulumi.OutputState }

func (KafkaSchemaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSchemaConfiguration)(nil)).Elem()
}

func (o KafkaSchemaConfigurationOutput) ToKafkaSchemaConfigurationOutput() KafkaSchemaConfigurationOutput {
	return o
}

func (o KafkaSchemaConfigurationOutput) ToKafkaSchemaConfigurationOutputWithContext(ctx context.Context) KafkaSchemaConfigurationOutput {
	return o
}

type KafkaSchemaConfigurationArrayOutput struct{ *pulumi.OutputState }

func (KafkaSchemaConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaSchemaConfiguration)(nil)).Elem()
}

func (o KafkaSchemaConfigurationArrayOutput) ToKafkaSchemaConfigurationArrayOutput() KafkaSchemaConfigurationArrayOutput {
	return o
}

func (o KafkaSchemaConfigurationArrayOutput) ToKafkaSchemaConfigurationArrayOutputWithContext(ctx context.Context) KafkaSchemaConfigurationArrayOutput {
	return o
}

func (o KafkaSchemaConfigurationArrayOutput) Index(i pulumi.IntInput) KafkaSchemaConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaSchemaConfiguration {
		return vs[0].([]*KafkaSchemaConfiguration)[vs[1].(int)]
	}).(KafkaSchemaConfigurationOutput)
}

type KafkaSchemaConfigurationMapOutput struct{ *pulumi.OutputState }

func (KafkaSchemaConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaSchemaConfiguration)(nil)).Elem()
}

func (o KafkaSchemaConfigurationMapOutput) ToKafkaSchemaConfigurationMapOutput() KafkaSchemaConfigurationMapOutput {
	return o
}

func (o KafkaSchemaConfigurationMapOutput) ToKafkaSchemaConfigurationMapOutputWithContext(ctx context.Context) KafkaSchemaConfigurationMapOutput {
	return o
}

func (o KafkaSchemaConfigurationMapOutput) MapIndex(k pulumi.StringInput) KafkaSchemaConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaSchemaConfiguration {
		return vs[0].(map[string]*KafkaSchemaConfiguration)[vs[1].(string)]
	}).(KafkaSchemaConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaSchemaConfigurationInput)(nil)).Elem(), &KafkaSchemaConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaSchemaConfigurationArrayInput)(nil)).Elem(), KafkaSchemaConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaSchemaConfigurationMapInput)(nil)).Elem(), KafkaSchemaConfigurationMap{})
	pulumi.RegisterOutputType(KafkaSchemaConfigurationOutput{})
	pulumi.RegisterOutputType(KafkaSchemaConfigurationArrayOutput{})
	pulumi.RegisterOutputType(KafkaSchemaConfigurationMapOutput{})
}
