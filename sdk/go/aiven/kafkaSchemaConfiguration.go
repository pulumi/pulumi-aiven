// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type KafkaSchemaConfiguration struct {
	s *pulumi.ResourceState
}

// NewKafkaSchemaConfiguration registers a new resource with the given unique name, arguments, and options.
func NewKafkaSchemaConfiguration(ctx *pulumi.Context,
	name string, args *KafkaSchemaConfigurationArgs, opts ...pulumi.ResourceOpt) (*KafkaSchemaConfiguration, error) {
	if args == nil || args.CompatibilityLevel == nil {
		return nil, errors.New("missing required argument 'CompatibilityLevel'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["compatibilityLevel"] = nil
		inputs["project"] = nil
		inputs["serviceName"] = nil
	} else {
		inputs["compatibilityLevel"] = args.CompatibilityLevel
		inputs["project"] = args.Project
		inputs["serviceName"] = args.ServiceName
	}
	s, err := ctx.RegisterResource("aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KafkaSchemaConfiguration{s: s}, nil
}

// GetKafkaSchemaConfiguration gets an existing KafkaSchemaConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaSchemaConfiguration(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KafkaSchemaConfigurationState, opts ...pulumi.ResourceOpt) (*KafkaSchemaConfiguration, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["compatibilityLevel"] = state.CompatibilityLevel
		inputs["project"] = state.Project
		inputs["serviceName"] = state.ServiceName
	}
	s, err := ctx.ReadResource("aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KafkaSchemaConfiguration{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *KafkaSchemaConfiguration) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *KafkaSchemaConfiguration) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Kafka Schemas compatibility level
func (r *KafkaSchemaConfiguration) CompatibilityLevel() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["compatibilityLevel"])
}

// Project to link the Kafka Schemas Configuration to
func (r *KafkaSchemaConfiguration) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Service to link the Kafka Schemas Configuration to
func (r *KafkaSchemaConfiguration) ServiceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceName"])
}

// Input properties used for looking up and filtering KafkaSchemaConfiguration resources.
type KafkaSchemaConfigurationState struct {
	// Kafka Schemas compatibility level
	CompatibilityLevel interface{}
	// Project to link the Kafka Schemas Configuration to
	Project interface{}
	// Service to link the Kafka Schemas Configuration to
	ServiceName interface{}
}

// The set of arguments for constructing a KafkaSchemaConfiguration resource.
type KafkaSchemaConfigurationArgs struct {
	// Kafka Schemas compatibility level
	CompatibilityLevel interface{}
	// Project to link the Kafka Schemas Configuration to
	Project interface{}
	// Service to link the Kafka Schemas Configuration to
	ServiceName interface{}
}
