// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Flink Application resource allows the creation and management of Aiven Flink Applications.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewFlinkApplication(ctx, "foo", &aiven.FlinkApplicationArgs{
//				Project:     pulumi.Any(aiven_project.Foo.Project),
//				ServiceName: pulumi.String("flink-service-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import aiven:index/flinkApplication:FlinkApplication myapp project/service/application_name
//
// ```
type FlinkApplication struct {
	pulumi.CustomResourceState

	// Application ID
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Application creation time
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Application creator
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Application name
	Name pulumi.StringOutput `pulumi:"name"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Application update time
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Application updater
	UpdatedBy pulumi.StringOutput `pulumi:"updatedBy"`
}

// NewFlinkApplication registers a new resource with the given unique name, arguments, and options.
func NewFlinkApplication(ctx *pulumi.Context,
	name string, args *FlinkApplicationArgs, opts ...pulumi.ResourceOption) (*FlinkApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlinkApplication
	err := ctx.RegisterResource("aiven:index/flinkApplication:FlinkApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlinkApplication gets an existing FlinkApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlinkApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlinkApplicationState, opts ...pulumi.ResourceOption) (*FlinkApplication, error) {
	var resource FlinkApplication
	err := ctx.ReadResource("aiven:index/flinkApplication:FlinkApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlinkApplication resources.
type flinkApplicationState struct {
	// Application ID
	ApplicationId *string `pulumi:"applicationId"`
	// Application creation time
	CreatedAt *string `pulumi:"createdAt"`
	// Application creator
	CreatedBy *string `pulumi:"createdBy"`
	// Application name
	Name *string `pulumi:"name"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// Application update time
	UpdatedAt *string `pulumi:"updatedAt"`
	// Application updater
	UpdatedBy *string `pulumi:"updatedBy"`
}

type FlinkApplicationState struct {
	// Application ID
	ApplicationId pulumi.StringPtrInput
	// Application creation time
	CreatedAt pulumi.StringPtrInput
	// Application creator
	CreatedBy pulumi.StringPtrInput
	// Application name
	Name pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// Application update time
	UpdatedAt pulumi.StringPtrInput
	// Application updater
	UpdatedBy pulumi.StringPtrInput
}

func (FlinkApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*flinkApplicationState)(nil)).Elem()
}

type flinkApplicationArgs struct {
	// Application name
	Name *string `pulumi:"name"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a FlinkApplication resource.
type FlinkApplicationArgs struct {
	// Application name
	Name pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringInput
}

func (FlinkApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flinkApplicationArgs)(nil)).Elem()
}

type FlinkApplicationInput interface {
	pulumi.Input

	ToFlinkApplicationOutput() FlinkApplicationOutput
	ToFlinkApplicationOutputWithContext(ctx context.Context) FlinkApplicationOutput
}

func (*FlinkApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkApplication)(nil)).Elem()
}

func (i *FlinkApplication) ToFlinkApplicationOutput() FlinkApplicationOutput {
	return i.ToFlinkApplicationOutputWithContext(context.Background())
}

func (i *FlinkApplication) ToFlinkApplicationOutputWithContext(ctx context.Context) FlinkApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkApplicationOutput)
}

// FlinkApplicationArrayInput is an input type that accepts FlinkApplicationArray and FlinkApplicationArrayOutput values.
// You can construct a concrete instance of `FlinkApplicationArrayInput` via:
//
//	FlinkApplicationArray{ FlinkApplicationArgs{...} }
type FlinkApplicationArrayInput interface {
	pulumi.Input

	ToFlinkApplicationArrayOutput() FlinkApplicationArrayOutput
	ToFlinkApplicationArrayOutputWithContext(context.Context) FlinkApplicationArrayOutput
}

type FlinkApplicationArray []FlinkApplicationInput

func (FlinkApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlinkApplication)(nil)).Elem()
}

func (i FlinkApplicationArray) ToFlinkApplicationArrayOutput() FlinkApplicationArrayOutput {
	return i.ToFlinkApplicationArrayOutputWithContext(context.Background())
}

func (i FlinkApplicationArray) ToFlinkApplicationArrayOutputWithContext(ctx context.Context) FlinkApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkApplicationArrayOutput)
}

// FlinkApplicationMapInput is an input type that accepts FlinkApplicationMap and FlinkApplicationMapOutput values.
// You can construct a concrete instance of `FlinkApplicationMapInput` via:
//
//	FlinkApplicationMap{ "key": FlinkApplicationArgs{...} }
type FlinkApplicationMapInput interface {
	pulumi.Input

	ToFlinkApplicationMapOutput() FlinkApplicationMapOutput
	ToFlinkApplicationMapOutputWithContext(context.Context) FlinkApplicationMapOutput
}

type FlinkApplicationMap map[string]FlinkApplicationInput

func (FlinkApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlinkApplication)(nil)).Elem()
}

func (i FlinkApplicationMap) ToFlinkApplicationMapOutput() FlinkApplicationMapOutput {
	return i.ToFlinkApplicationMapOutputWithContext(context.Background())
}

func (i FlinkApplicationMap) ToFlinkApplicationMapOutputWithContext(ctx context.Context) FlinkApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkApplicationMapOutput)
}

type FlinkApplicationOutput struct{ *pulumi.OutputState }

func (FlinkApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkApplication)(nil)).Elem()
}

func (o FlinkApplicationOutput) ToFlinkApplicationOutput() FlinkApplicationOutput {
	return o
}

func (o FlinkApplicationOutput) ToFlinkApplicationOutputWithContext(ctx context.Context) FlinkApplicationOutput {
	return o
}

// Application ID
func (o FlinkApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinkApplication) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Application creation time
func (o FlinkApplicationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinkApplication) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Application creator
func (o FlinkApplicationOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinkApplication) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Application name
func (o FlinkApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinkApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o FlinkApplicationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinkApplication) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o FlinkApplicationOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinkApplication) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Application update time
func (o FlinkApplicationOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinkApplication) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Application updater
func (o FlinkApplicationOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinkApplication) pulumi.StringOutput { return v.UpdatedBy }).(pulumi.StringOutput)
}

type FlinkApplicationArrayOutput struct{ *pulumi.OutputState }

func (FlinkApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlinkApplication)(nil)).Elem()
}

func (o FlinkApplicationArrayOutput) ToFlinkApplicationArrayOutput() FlinkApplicationArrayOutput {
	return o
}

func (o FlinkApplicationArrayOutput) ToFlinkApplicationArrayOutputWithContext(ctx context.Context) FlinkApplicationArrayOutput {
	return o
}

func (o FlinkApplicationArrayOutput) Index(i pulumi.IntInput) FlinkApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlinkApplication {
		return vs[0].([]*FlinkApplication)[vs[1].(int)]
	}).(FlinkApplicationOutput)
}

type FlinkApplicationMapOutput struct{ *pulumi.OutputState }

func (FlinkApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlinkApplication)(nil)).Elem()
}

func (o FlinkApplicationMapOutput) ToFlinkApplicationMapOutput() FlinkApplicationMapOutput {
	return o
}

func (o FlinkApplicationMapOutput) ToFlinkApplicationMapOutputWithContext(ctx context.Context) FlinkApplicationMapOutput {
	return o
}

func (o FlinkApplicationMapOutput) MapIndex(k pulumi.StringInput) FlinkApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlinkApplication {
		return vs[0].(map[string]*FlinkApplication)[vs[1].(string)]
	}).(FlinkApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlinkApplicationInput)(nil)).Elem(), &FlinkApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlinkApplicationArrayInput)(nil)).Elem(), FlinkApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlinkApplicationMapInput)(nil)).Elem(), FlinkApplicationMap{})
	pulumi.RegisterOutputType(FlinkApplicationOutput{})
	pulumi.RegisterOutputType(FlinkApplicationArrayOutput{})
	pulumi.RegisterOutputType(FlinkApplicationMapOutput{})
}
