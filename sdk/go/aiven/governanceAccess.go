// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewGovernanceAccess(ctx, "example_access", &aiven.GovernanceAccessArgs{
//				OrganizationId: pulumi.Any(main.Id),
//				AccessName:     pulumi.String("example-topic-access"),
//				AccessType:     pulumi.String("KAFKA"),
//				AccessData: &aiven.GovernanceAccessAccessDataArgs{
//					Project:     pulumi.Any(exampleProject.Project),
//					ServiceName: pulumi.Any(exampleKafka.ServiceName),
//					Acls: aiven.GovernanceAccessAccessDataAclArray{
//						&aiven.GovernanceAccessAccessDataAclArgs{
//							ResourceName:   pulumi.String("example-topic"),
//							ResourceType:   pulumi.String("Topic"),
//							Operation:      pulumi.String("Read"),
//							PermissionType: pulumi.String("ALLOW"),
//							Host:           pulumi.String("*"),
//						},
//					},
//				},
//				OwnerUserGroupId: pulumi.Any(example.GroupId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type GovernanceAccess struct {
	pulumi.CustomResourceState

	// Required property. access type specific data. Changing this property forces recreation of the resource.
	AccessData GovernanceAccessAccessDataPtrOutput `pulumi:"accessData"`
	// Label to describe the access. Changing this property forces recreation of the resource.
	AccessName pulumi.StringOutput `pulumi:"accessName"`
	// An enumeration. The possible value is `KAFKA`. Changing this property forces recreation of the resource.
	AccessType pulumi.StringOutput `pulumi:"accessType"`
	// ID of an organization. Changing this property forces recreation of the resource.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The ID of the group that will own the access. Maximum length: `36`. Changing this property forces recreation of the resource.
	OwnerUserGroupId pulumi.StringPtrOutput `pulumi:"ownerUserGroupId"`
	// The ID of the access.
	SusbcriptionId pulumi.StringOutput               `pulumi:"susbcriptionId"`
	Timeouts       GovernanceAccessTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewGovernanceAccess registers a new resource with the given unique name, arguments, and options.
func NewGovernanceAccess(ctx *pulumi.Context,
	name string, args *GovernanceAccessArgs, opts ...pulumi.ResourceOption) (*GovernanceAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessName == nil {
		return nil, errors.New("invalid value for required argument 'AccessName'")
	}
	if args.AccessType == nil {
		return nil, errors.New("invalid value for required argument 'AccessType'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GovernanceAccess
	err := ctx.RegisterResource("aiven:index/governanceAccess:GovernanceAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGovernanceAccess gets an existing GovernanceAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGovernanceAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GovernanceAccessState, opts ...pulumi.ResourceOption) (*GovernanceAccess, error) {
	var resource GovernanceAccess
	err := ctx.ReadResource("aiven:index/governanceAccess:GovernanceAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GovernanceAccess resources.
type governanceAccessState struct {
	// Required property. access type specific data. Changing this property forces recreation of the resource.
	AccessData *GovernanceAccessAccessData `pulumi:"accessData"`
	// Label to describe the access. Changing this property forces recreation of the resource.
	AccessName *string `pulumi:"accessName"`
	// An enumeration. The possible value is `KAFKA`. Changing this property forces recreation of the resource.
	AccessType *string `pulumi:"accessType"`
	// ID of an organization. Changing this property forces recreation of the resource.
	OrganizationId *string `pulumi:"organizationId"`
	// The ID of the group that will own the access. Maximum length: `36`. Changing this property forces recreation of the resource.
	OwnerUserGroupId *string `pulumi:"ownerUserGroupId"`
	// The ID of the access.
	SusbcriptionId *string                   `pulumi:"susbcriptionId"`
	Timeouts       *GovernanceAccessTimeouts `pulumi:"timeouts"`
}

type GovernanceAccessState struct {
	// Required property. access type specific data. Changing this property forces recreation of the resource.
	AccessData GovernanceAccessAccessDataPtrInput
	// Label to describe the access. Changing this property forces recreation of the resource.
	AccessName pulumi.StringPtrInput
	// An enumeration. The possible value is `KAFKA`. Changing this property forces recreation of the resource.
	AccessType pulumi.StringPtrInput
	// ID of an organization. Changing this property forces recreation of the resource.
	OrganizationId pulumi.StringPtrInput
	// The ID of the group that will own the access. Maximum length: `36`. Changing this property forces recreation of the resource.
	OwnerUserGroupId pulumi.StringPtrInput
	// The ID of the access.
	SusbcriptionId pulumi.StringPtrInput
	Timeouts       GovernanceAccessTimeoutsPtrInput
}

func (GovernanceAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*governanceAccessState)(nil)).Elem()
}

type governanceAccessArgs struct {
	// Required property. access type specific data. Changing this property forces recreation of the resource.
	AccessData *GovernanceAccessAccessData `pulumi:"accessData"`
	// Label to describe the access. Changing this property forces recreation of the resource.
	AccessName string `pulumi:"accessName"`
	// An enumeration. The possible value is `KAFKA`. Changing this property forces recreation of the resource.
	AccessType string `pulumi:"accessType"`
	// ID of an organization. Changing this property forces recreation of the resource.
	OrganizationId string `pulumi:"organizationId"`
	// The ID of the group that will own the access. Maximum length: `36`. Changing this property forces recreation of the resource.
	OwnerUserGroupId *string                   `pulumi:"ownerUserGroupId"`
	Timeouts         *GovernanceAccessTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a GovernanceAccess resource.
type GovernanceAccessArgs struct {
	// Required property. access type specific data. Changing this property forces recreation of the resource.
	AccessData GovernanceAccessAccessDataPtrInput
	// Label to describe the access. Changing this property forces recreation of the resource.
	AccessName pulumi.StringInput
	// An enumeration. The possible value is `KAFKA`. Changing this property forces recreation of the resource.
	AccessType pulumi.StringInput
	// ID of an organization. Changing this property forces recreation of the resource.
	OrganizationId pulumi.StringInput
	// The ID of the group that will own the access. Maximum length: `36`. Changing this property forces recreation of the resource.
	OwnerUserGroupId pulumi.StringPtrInput
	Timeouts         GovernanceAccessTimeoutsPtrInput
}

func (GovernanceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*governanceAccessArgs)(nil)).Elem()
}

type GovernanceAccessInput interface {
	pulumi.Input

	ToGovernanceAccessOutput() GovernanceAccessOutput
	ToGovernanceAccessOutputWithContext(ctx context.Context) GovernanceAccessOutput
}

func (*GovernanceAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**GovernanceAccess)(nil)).Elem()
}

func (i *GovernanceAccess) ToGovernanceAccessOutput() GovernanceAccessOutput {
	return i.ToGovernanceAccessOutputWithContext(context.Background())
}

func (i *GovernanceAccess) ToGovernanceAccessOutputWithContext(ctx context.Context) GovernanceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GovernanceAccessOutput)
}

// GovernanceAccessArrayInput is an input type that accepts GovernanceAccessArray and GovernanceAccessArrayOutput values.
// You can construct a concrete instance of `GovernanceAccessArrayInput` via:
//
//	GovernanceAccessArray{ GovernanceAccessArgs{...} }
type GovernanceAccessArrayInput interface {
	pulumi.Input

	ToGovernanceAccessArrayOutput() GovernanceAccessArrayOutput
	ToGovernanceAccessArrayOutputWithContext(context.Context) GovernanceAccessArrayOutput
}

type GovernanceAccessArray []GovernanceAccessInput

func (GovernanceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GovernanceAccess)(nil)).Elem()
}

func (i GovernanceAccessArray) ToGovernanceAccessArrayOutput() GovernanceAccessArrayOutput {
	return i.ToGovernanceAccessArrayOutputWithContext(context.Background())
}

func (i GovernanceAccessArray) ToGovernanceAccessArrayOutputWithContext(ctx context.Context) GovernanceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GovernanceAccessArrayOutput)
}

// GovernanceAccessMapInput is an input type that accepts GovernanceAccessMap and GovernanceAccessMapOutput values.
// You can construct a concrete instance of `GovernanceAccessMapInput` via:
//
//	GovernanceAccessMap{ "key": GovernanceAccessArgs{...} }
type GovernanceAccessMapInput interface {
	pulumi.Input

	ToGovernanceAccessMapOutput() GovernanceAccessMapOutput
	ToGovernanceAccessMapOutputWithContext(context.Context) GovernanceAccessMapOutput
}

type GovernanceAccessMap map[string]GovernanceAccessInput

func (GovernanceAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GovernanceAccess)(nil)).Elem()
}

func (i GovernanceAccessMap) ToGovernanceAccessMapOutput() GovernanceAccessMapOutput {
	return i.ToGovernanceAccessMapOutputWithContext(context.Background())
}

func (i GovernanceAccessMap) ToGovernanceAccessMapOutputWithContext(ctx context.Context) GovernanceAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GovernanceAccessMapOutput)
}

type GovernanceAccessOutput struct{ *pulumi.OutputState }

func (GovernanceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GovernanceAccess)(nil)).Elem()
}

func (o GovernanceAccessOutput) ToGovernanceAccessOutput() GovernanceAccessOutput {
	return o
}

func (o GovernanceAccessOutput) ToGovernanceAccessOutputWithContext(ctx context.Context) GovernanceAccessOutput {
	return o
}

// Required property. access type specific data. Changing this property forces recreation of the resource.
func (o GovernanceAccessOutput) AccessData() GovernanceAccessAccessDataPtrOutput {
	return o.ApplyT(func(v *GovernanceAccess) GovernanceAccessAccessDataPtrOutput { return v.AccessData }).(GovernanceAccessAccessDataPtrOutput)
}

// Label to describe the access. Changing this property forces recreation of the resource.
func (o GovernanceAccessOutput) AccessName() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceAccess) pulumi.StringOutput { return v.AccessName }).(pulumi.StringOutput)
}

// An enumeration. The possible value is `KAFKA`. Changing this property forces recreation of the resource.
func (o GovernanceAccessOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceAccess) pulumi.StringOutput { return v.AccessType }).(pulumi.StringOutput)
}

// ID of an organization. Changing this property forces recreation of the resource.
func (o GovernanceAccessOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceAccess) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the group that will own the access. Maximum length: `36`. Changing this property forces recreation of the resource.
func (o GovernanceAccessOutput) OwnerUserGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GovernanceAccess) pulumi.StringPtrOutput { return v.OwnerUserGroupId }).(pulumi.StringPtrOutput)
}

// The ID of the access.
func (o GovernanceAccessOutput) SusbcriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceAccess) pulumi.StringOutput { return v.SusbcriptionId }).(pulumi.StringOutput)
}

func (o GovernanceAccessOutput) Timeouts() GovernanceAccessTimeoutsPtrOutput {
	return o.ApplyT(func(v *GovernanceAccess) GovernanceAccessTimeoutsPtrOutput { return v.Timeouts }).(GovernanceAccessTimeoutsPtrOutput)
}

type GovernanceAccessArrayOutput struct{ *pulumi.OutputState }

func (GovernanceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GovernanceAccess)(nil)).Elem()
}

func (o GovernanceAccessArrayOutput) ToGovernanceAccessArrayOutput() GovernanceAccessArrayOutput {
	return o
}

func (o GovernanceAccessArrayOutput) ToGovernanceAccessArrayOutputWithContext(ctx context.Context) GovernanceAccessArrayOutput {
	return o
}

func (o GovernanceAccessArrayOutput) Index(i pulumi.IntInput) GovernanceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GovernanceAccess {
		return vs[0].([]*GovernanceAccess)[vs[1].(int)]
	}).(GovernanceAccessOutput)
}

type GovernanceAccessMapOutput struct{ *pulumi.OutputState }

func (GovernanceAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GovernanceAccess)(nil)).Elem()
}

func (o GovernanceAccessMapOutput) ToGovernanceAccessMapOutput() GovernanceAccessMapOutput {
	return o
}

func (o GovernanceAccessMapOutput) ToGovernanceAccessMapOutputWithContext(ctx context.Context) GovernanceAccessMapOutput {
	return o
}

func (o GovernanceAccessMapOutput) MapIndex(k pulumi.StringInput) GovernanceAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GovernanceAccess {
		return vs[0].(map[string]*GovernanceAccess)[vs[1].(string)]
	}).(GovernanceAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GovernanceAccessInput)(nil)).Elem(), &GovernanceAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*GovernanceAccessArrayInput)(nil)).Elem(), GovernanceAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GovernanceAccessMapInput)(nil)).Elem(), GovernanceAccessMap{})
	pulumi.RegisterOutputType(GovernanceAccessOutput{})
	pulumi.RegisterOutputType(GovernanceAccessArrayOutput{})
	pulumi.RegisterOutputType(GovernanceAccessMapOutput{})
}
