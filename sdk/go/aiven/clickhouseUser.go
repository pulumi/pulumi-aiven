// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Clickhouse User resource allows the creation and management of Aiven Clikhouse Users.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewClickhouseUser(ctx, "ch-user", &aiven.ClickhouseUserArgs{
//				Project:     pulumi.Any(aiven_project.Myproject.Project),
//				ServiceName: pulumi.Any(aiven_clickhouse.Myservice.Service_name),
//				Username:    pulumi.String("<USERNAME>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import aiven:index/clickhouseUser:ClickhouseUser ch-user project/service_name/id
//
// ```
type ClickhouseUser struct {
	pulumi.CustomResourceState

	// The password of the clickhouse user.
	Password pulumi.StringOutput `pulumi:"password"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Indicates if a clickhouse user is required
	Required pulumi.BoolOutput `pulumi:"required"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The actual name of the Clickhouse user. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringOutput `pulumi:"username"`
	// UUID of the clickhouse user.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewClickhouseUser registers a new resource with the given unique name, arguments, and options.
func NewClickhouseUser(ctx *pulumi.Context,
	name string, args *ClickhouseUserArgs, opts ...pulumi.ResourceOption) (*ClickhouseUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource ClickhouseUser
	err := ctx.RegisterResource("aiven:index/clickhouseUser:ClickhouseUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClickhouseUser gets an existing ClickhouseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClickhouseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClickhouseUserState, opts ...pulumi.ResourceOption) (*ClickhouseUser, error) {
	var resource ClickhouseUser
	err := ctx.ReadResource("aiven:index/clickhouseUser:ClickhouseUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClickhouseUser resources.
type clickhouseUserState struct {
	// The password of the clickhouse user.
	Password *string `pulumi:"password"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Indicates if a clickhouse user is required
	Required *bool `pulumi:"required"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// The actual name of the Clickhouse user. This property cannot be changed, doing so forces recreation of the resource.
	Username *string `pulumi:"username"`
	// UUID of the clickhouse user.
	Uuid *string `pulumi:"uuid"`
}

type ClickhouseUserState struct {
	// The password of the clickhouse user.
	Password pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Indicates if a clickhouse user is required
	Required pulumi.BoolPtrInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// The actual name of the Clickhouse user. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringPtrInput
	// UUID of the clickhouse user.
	Uuid pulumi.StringPtrInput
}

func (ClickhouseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*clickhouseUserState)(nil)).Elem()
}

type clickhouseUserArgs struct {
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// The actual name of the Clickhouse user. This property cannot be changed, doing so forces recreation of the resource.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ClickhouseUser resource.
type ClickhouseUserArgs struct {
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringInput
	// The actual name of the Clickhouse user. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringInput
}

func (ClickhouseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clickhouseUserArgs)(nil)).Elem()
}

type ClickhouseUserInput interface {
	pulumi.Input

	ToClickhouseUserOutput() ClickhouseUserOutput
	ToClickhouseUserOutputWithContext(ctx context.Context) ClickhouseUserOutput
}

func (*ClickhouseUser) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickhouseUser)(nil)).Elem()
}

func (i *ClickhouseUser) ToClickhouseUserOutput() ClickhouseUserOutput {
	return i.ToClickhouseUserOutputWithContext(context.Background())
}

func (i *ClickhouseUser) ToClickhouseUserOutputWithContext(ctx context.Context) ClickhouseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickhouseUserOutput)
}

// ClickhouseUserArrayInput is an input type that accepts ClickhouseUserArray and ClickhouseUserArrayOutput values.
// You can construct a concrete instance of `ClickhouseUserArrayInput` via:
//
//	ClickhouseUserArray{ ClickhouseUserArgs{...} }
type ClickhouseUserArrayInput interface {
	pulumi.Input

	ToClickhouseUserArrayOutput() ClickhouseUserArrayOutput
	ToClickhouseUserArrayOutputWithContext(context.Context) ClickhouseUserArrayOutput
}

type ClickhouseUserArray []ClickhouseUserInput

func (ClickhouseUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickhouseUser)(nil)).Elem()
}

func (i ClickhouseUserArray) ToClickhouseUserArrayOutput() ClickhouseUserArrayOutput {
	return i.ToClickhouseUserArrayOutputWithContext(context.Background())
}

func (i ClickhouseUserArray) ToClickhouseUserArrayOutputWithContext(ctx context.Context) ClickhouseUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickhouseUserArrayOutput)
}

// ClickhouseUserMapInput is an input type that accepts ClickhouseUserMap and ClickhouseUserMapOutput values.
// You can construct a concrete instance of `ClickhouseUserMapInput` via:
//
//	ClickhouseUserMap{ "key": ClickhouseUserArgs{...} }
type ClickhouseUserMapInput interface {
	pulumi.Input

	ToClickhouseUserMapOutput() ClickhouseUserMapOutput
	ToClickhouseUserMapOutputWithContext(context.Context) ClickhouseUserMapOutput
}

type ClickhouseUserMap map[string]ClickhouseUserInput

func (ClickhouseUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickhouseUser)(nil)).Elem()
}

func (i ClickhouseUserMap) ToClickhouseUserMapOutput() ClickhouseUserMapOutput {
	return i.ToClickhouseUserMapOutputWithContext(context.Background())
}

func (i ClickhouseUserMap) ToClickhouseUserMapOutputWithContext(ctx context.Context) ClickhouseUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickhouseUserMapOutput)
}

type ClickhouseUserOutput struct{ *pulumi.OutputState }

func (ClickhouseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickhouseUser)(nil)).Elem()
}

func (o ClickhouseUserOutput) ToClickhouseUserOutput() ClickhouseUserOutput {
	return o
}

func (o ClickhouseUserOutput) ToClickhouseUserOutputWithContext(ctx context.Context) ClickhouseUserOutput {
	return o
}

// The password of the clickhouse user.
func (o ClickhouseUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickhouseUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o ClickhouseUserOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickhouseUser) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Indicates if a clickhouse user is required
func (o ClickhouseUserOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v *ClickhouseUser) pulumi.BoolOutput { return v.Required }).(pulumi.BoolOutput)
}

// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o ClickhouseUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickhouseUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The actual name of the Clickhouse user. This property cannot be changed, doing so forces recreation of the resource.
func (o ClickhouseUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickhouseUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// UUID of the clickhouse user.
func (o ClickhouseUserOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickhouseUser) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ClickhouseUserArrayOutput struct{ *pulumi.OutputState }

func (ClickhouseUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickhouseUser)(nil)).Elem()
}

func (o ClickhouseUserArrayOutput) ToClickhouseUserArrayOutput() ClickhouseUserArrayOutput {
	return o
}

func (o ClickhouseUserArrayOutput) ToClickhouseUserArrayOutputWithContext(ctx context.Context) ClickhouseUserArrayOutput {
	return o
}

func (o ClickhouseUserArrayOutput) Index(i pulumi.IntInput) ClickhouseUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClickhouseUser {
		return vs[0].([]*ClickhouseUser)[vs[1].(int)]
	}).(ClickhouseUserOutput)
}

type ClickhouseUserMapOutput struct{ *pulumi.OutputState }

func (ClickhouseUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickhouseUser)(nil)).Elem()
}

func (o ClickhouseUserMapOutput) ToClickhouseUserMapOutput() ClickhouseUserMapOutput {
	return o
}

func (o ClickhouseUserMapOutput) ToClickhouseUserMapOutputWithContext(ctx context.Context) ClickhouseUserMapOutput {
	return o
}

func (o ClickhouseUserMapOutput) MapIndex(k pulumi.StringInput) ClickhouseUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClickhouseUser {
		return vs[0].(map[string]*ClickhouseUser)[vs[1].(string)]
	}).(ClickhouseUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickhouseUserInput)(nil)).Elem(), &ClickhouseUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickhouseUserArrayInput)(nil)).Elem(), ClickhouseUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickhouseUserMapInput)(nil)).Elem(), ClickhouseUserMap{})
	pulumi.RegisterOutputType(ClickhouseUserOutput{})
	pulumi.RegisterOutputType(ClickhouseUserArrayOutput{})
	pulumi.RegisterOutputType(ClickhouseUserMapOutput{})
}
