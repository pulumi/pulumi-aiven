// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Service User data source provides information about the existing Aiven Service User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupServiceUser(ctx, &GetServiceUserArgs{
// 			Project:     aiven_project.Myproject.Project,
// 			ServiceName: aiven_service.Myservice.Service_name,
// 			Username:    "<USERNAME>",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupServiceUser(ctx *pulumi.Context, args *LookupServiceUserArgs, opts ...pulumi.InvokeOption) (*LookupServiceUserResult, error) {
	var rv LookupServiceUserResult
	err := ctx.Invoke("aiven:index/getServiceUser:getServiceUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceUser.
type LookupServiceUserArgs struct {
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	Username    string `pulumi:"username"`
}

// A collection of values returned by getServiceUser.
type LookupServiceUserResult struct {
	AccessCert     string `pulumi:"accessCert"`
	AccessKey      string `pulumi:"accessKey"`
	Authentication string `pulumi:"authentication"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string   `pulumi:"id"`
	Password           string   `pulumi:"password"`
	PgAllowReplication bool     `pulumi:"pgAllowReplication"`
	Project            string   `pulumi:"project"`
	RedisAclCategories []string `pulumi:"redisAclCategories"`
	RedisAclChannels   []string `pulumi:"redisAclChannels"`
	RedisAclCommands   []string `pulumi:"redisAclCommands"`
	RedisAclKeys       []string `pulumi:"redisAclKeys"`
	ServiceName        string   `pulumi:"serviceName"`
	Type               string   `pulumi:"type"`
	Username           string   `pulumi:"username"`
}

func LookupServiceUserOutput(ctx *pulumi.Context, args LookupServiceUserOutputArgs, opts ...pulumi.InvokeOption) LookupServiceUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceUserResult, error) {
			args := v.(LookupServiceUserArgs)
			r, err := LookupServiceUser(ctx, &args, opts...)
			var s LookupServiceUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServiceUserResultOutput)
}

// A collection of arguments for invoking getServiceUser.
type LookupServiceUserOutputArgs struct {
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	Username    pulumi.StringInput `pulumi:"username"`
}

func (LookupServiceUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceUserArgs)(nil)).Elem()
}

// A collection of values returned by getServiceUser.
type LookupServiceUserResultOutput struct{ *pulumi.OutputState }

func (LookupServiceUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceUserResult)(nil)).Elem()
}

func (o LookupServiceUserResultOutput) ToLookupServiceUserResultOutput() LookupServiceUserResultOutput {
	return o
}

func (o LookupServiceUserResultOutput) ToLookupServiceUserResultOutputWithContext(ctx context.Context) LookupServiceUserResultOutput {
	return o
}

func (o LookupServiceUserResultOutput) AccessCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceUserResult) string { return v.AccessCert }).(pulumi.StringOutput)
}

func (o LookupServiceUserResultOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceUserResult) string { return v.AccessKey }).(pulumi.StringOutput)
}

func (o LookupServiceUserResultOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceUserResult) string { return v.Authentication }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServiceUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupServiceUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceUserResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupServiceUserResultOutput) PgAllowReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceUserResult) bool { return v.PgAllowReplication }).(pulumi.BoolOutput)
}

func (o LookupServiceUserResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceUserResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupServiceUserResultOutput) RedisAclCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServiceUserResult) []string { return v.RedisAclCategories }).(pulumi.StringArrayOutput)
}

func (o LookupServiceUserResultOutput) RedisAclChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServiceUserResult) []string { return v.RedisAclChannels }).(pulumi.StringArrayOutput)
}

func (o LookupServiceUserResultOutput) RedisAclCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServiceUserResult) []string { return v.RedisAclCommands }).(pulumi.StringArrayOutput)
}

func (o LookupServiceUserResultOutput) RedisAclKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServiceUserResult) []string { return v.RedisAclKeys }).(pulumi.StringArrayOutput)
}

func (o LookupServiceUserResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceUserResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupServiceUserResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceUserResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupServiceUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceUserResultOutput{})
}
