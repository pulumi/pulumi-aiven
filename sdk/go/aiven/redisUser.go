// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The Redis User resource allows the creation and management of Aiven Redis Users.
//
// ## Import
//
// ```sh
//
//	$ pulumi import aiven:index/redisUser:RedisUser foo project/service_name/username
//
// ```
type RedisUser struct {
	pulumi.CustomResourceState

	// The password of the Redis User.
	Password pulumi.StringOutput `pulumi:"password"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories pulumi.StringArrayOutput `pulumi:"redisAclCategories"`
	// Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels pulumi.StringArrayOutput `pulumi:"redisAclChannels"`
	// Defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands pulumi.StringArrayOutput `pulumi:"redisAclCommands"`
	// Defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys pulumi.StringArrayOutput `pulumi:"redisAclKeys"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Type of the user account. Tells whether the user is the primary account or a regular account.
	Type pulumi.StringOutput `pulumi:"type"`
	// The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewRedisUser registers a new resource with the given unique name, arguments, and options.
func NewRedisUser(ctx *pulumi.Context,
	name string, args *RedisUserArgs, opts ...pulumi.ResourceOption) (*RedisUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedisUser
	err := ctx.RegisterResource("aiven:index/redisUser:RedisUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisUser gets an existing RedisUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisUserState, opts ...pulumi.ResourceOption) (*RedisUser, error) {
	var resource RedisUser
	err := ctx.ReadResource("aiven:index/redisUser:RedisUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisUser resources.
type redisUserState struct {
	// The password of the Redis User.
	Password *string `pulumi:"password"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories []string `pulumi:"redisAclCategories"`
	// Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels []string `pulumi:"redisAclChannels"`
	// Defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands []string `pulumi:"redisAclCommands"`
	// Defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys []string `pulumi:"redisAclKeys"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// Type of the user account. Tells whether the user is the primary account or a regular account.
	Type *string `pulumi:"type"`
	// The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username *string `pulumi:"username"`
}

type RedisUserState struct {
	// The password of the Redis User.
	Password pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories pulumi.StringArrayInput
	// Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels pulumi.StringArrayInput
	// Defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands pulumi.StringArrayInput
	// Defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys pulumi.StringArrayInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// Type of the user account. Tells whether the user is the primary account or a regular account.
	Type pulumi.StringPtrInput
	// The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringPtrInput
}

func (RedisUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisUserState)(nil)).Elem()
}

type redisUserArgs struct {
	// The password of the Redis User.
	Password *string `pulumi:"password"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories []string `pulumi:"redisAclCategories"`
	// Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels []string `pulumi:"redisAclChannels"`
	// Defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands []string `pulumi:"redisAclCommands"`
	// Defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys []string `pulumi:"redisAclKeys"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a RedisUser resource.
type RedisUserArgs struct {
	// The password of the Redis User.
	Password pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCategories pulumi.StringArrayInput
	// Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclChannels pulumi.StringArrayInput
	// Defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclCommands pulumi.StringArrayInput
	// Defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
	RedisAclKeys pulumi.StringArrayInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringInput
	// The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringInput
}

func (RedisUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisUserArgs)(nil)).Elem()
}

type RedisUserInput interface {
	pulumi.Input

	ToRedisUserOutput() RedisUserOutput
	ToRedisUserOutputWithContext(ctx context.Context) RedisUserOutput
}

func (*RedisUser) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisUser)(nil)).Elem()
}

func (i *RedisUser) ToRedisUserOutput() RedisUserOutput {
	return i.ToRedisUserOutputWithContext(context.Background())
}

func (i *RedisUser) ToRedisUserOutputWithContext(ctx context.Context) RedisUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisUserOutput)
}

func (i *RedisUser) ToOutput(ctx context.Context) pulumix.Output[*RedisUser] {
	return pulumix.Output[*RedisUser]{
		OutputState: i.ToRedisUserOutputWithContext(ctx).OutputState,
	}
}

// RedisUserArrayInput is an input type that accepts RedisUserArray and RedisUserArrayOutput values.
// You can construct a concrete instance of `RedisUserArrayInput` via:
//
//	RedisUserArray{ RedisUserArgs{...} }
type RedisUserArrayInput interface {
	pulumi.Input

	ToRedisUserArrayOutput() RedisUserArrayOutput
	ToRedisUserArrayOutputWithContext(context.Context) RedisUserArrayOutput
}

type RedisUserArray []RedisUserInput

func (RedisUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisUser)(nil)).Elem()
}

func (i RedisUserArray) ToRedisUserArrayOutput() RedisUserArrayOutput {
	return i.ToRedisUserArrayOutputWithContext(context.Background())
}

func (i RedisUserArray) ToRedisUserArrayOutputWithContext(ctx context.Context) RedisUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisUserArrayOutput)
}

func (i RedisUserArray) ToOutput(ctx context.Context) pulumix.Output[[]*RedisUser] {
	return pulumix.Output[[]*RedisUser]{
		OutputState: i.ToRedisUserArrayOutputWithContext(ctx).OutputState,
	}
}

// RedisUserMapInput is an input type that accepts RedisUserMap and RedisUserMapOutput values.
// You can construct a concrete instance of `RedisUserMapInput` via:
//
//	RedisUserMap{ "key": RedisUserArgs{...} }
type RedisUserMapInput interface {
	pulumi.Input

	ToRedisUserMapOutput() RedisUserMapOutput
	ToRedisUserMapOutputWithContext(context.Context) RedisUserMapOutput
}

type RedisUserMap map[string]RedisUserInput

func (RedisUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisUser)(nil)).Elem()
}

func (i RedisUserMap) ToRedisUserMapOutput() RedisUserMapOutput {
	return i.ToRedisUserMapOutputWithContext(context.Background())
}

func (i RedisUserMap) ToRedisUserMapOutputWithContext(ctx context.Context) RedisUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisUserMapOutput)
}

func (i RedisUserMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RedisUser] {
	return pulumix.Output[map[string]*RedisUser]{
		OutputState: i.ToRedisUserMapOutputWithContext(ctx).OutputState,
	}
}

type RedisUserOutput struct{ *pulumi.OutputState }

func (RedisUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisUser)(nil)).Elem()
}

func (o RedisUserOutput) ToRedisUserOutput() RedisUserOutput {
	return o
}

func (o RedisUserOutput) ToRedisUserOutputWithContext(ctx context.Context) RedisUserOutput {
	return o
}

func (o RedisUserOutput) ToOutput(ctx context.Context) pulumix.Output[*RedisUser] {
	return pulumix.Output[*RedisUser]{
		OutputState: o.OutputState,
	}
}

// The password of the Redis User.
func (o RedisUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o RedisUserOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisUser) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Defines command category rules. The field is required with`redisAclCommands` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
func (o RedisUserOutput) RedisAclCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisUser) pulumi.StringArrayOutput { return v.RedisAclCategories }).(pulumi.StringArrayOutput)
}

// Defines the permitted pub/sub channel patterns. This property cannot be changed, doing so forces recreation of the resource.
func (o RedisUserOutput) RedisAclChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisUser) pulumi.StringArrayOutput { return v.RedisAclChannels }).(pulumi.StringArrayOutput)
}

// Defines rules for individual commands. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
func (o RedisUserOutput) RedisAclCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisUser) pulumi.StringArrayOutput { return v.RedisAclCommands }).(pulumi.StringArrayOutput)
}

// Defines key access rules. The field is required with`redisAclCategories` and `redisAclKeys`. This property cannot be changed, doing so forces recreation of the resource.
func (o RedisUserOutput) RedisAclKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisUser) pulumi.StringArrayOutput { return v.RedisAclKeys }).(pulumi.StringArrayOutput)
}

// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o RedisUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Type of the user account. Tells whether the user is the primary account or a regular account.
func (o RedisUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The actual name of the Redis User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o RedisUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type RedisUserArrayOutput struct{ *pulumi.OutputState }

func (RedisUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisUser)(nil)).Elem()
}

func (o RedisUserArrayOutput) ToRedisUserArrayOutput() RedisUserArrayOutput {
	return o
}

func (o RedisUserArrayOutput) ToRedisUserArrayOutputWithContext(ctx context.Context) RedisUserArrayOutput {
	return o
}

func (o RedisUserArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RedisUser] {
	return pulumix.Output[[]*RedisUser]{
		OutputState: o.OutputState,
	}
}

func (o RedisUserArrayOutput) Index(i pulumi.IntInput) RedisUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedisUser {
		return vs[0].([]*RedisUser)[vs[1].(int)]
	}).(RedisUserOutput)
}

type RedisUserMapOutput struct{ *pulumi.OutputState }

func (RedisUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisUser)(nil)).Elem()
}

func (o RedisUserMapOutput) ToRedisUserMapOutput() RedisUserMapOutput {
	return o
}

func (o RedisUserMapOutput) ToRedisUserMapOutputWithContext(ctx context.Context) RedisUserMapOutput {
	return o
}

func (o RedisUserMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RedisUser] {
	return pulumix.Output[map[string]*RedisUser]{
		OutputState: o.OutputState,
	}
}

func (o RedisUserMapOutput) MapIndex(k pulumi.StringInput) RedisUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedisUser {
		return vs[0].(map[string]*RedisUser)[vs[1].(string)]
	}).(RedisUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisUserInput)(nil)).Elem(), &RedisUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisUserArrayInput)(nil)).Elem(), RedisUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisUserMapInput)(nil)).Elem(), RedisUserMap{})
	pulumi.RegisterOutputType(RedisUserOutput{})
	pulumi.RegisterOutputType(RedisUserArrayOutput{})
	pulumi.RegisterOutputType(RedisUserMapOutput{})
}
