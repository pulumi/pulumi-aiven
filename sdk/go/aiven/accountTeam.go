// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Account Team Resource
//
// The Account Team resource allows the creation and management of an Account Team.
type AccountTeam struct {
	pulumi.CustomResourceState

	// is a unique account id.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// time of creation.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// defines an account team name.
	Name pulumi.StringOutput `pulumi:"name"`
	// is an auto-generated unique account team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// time of last update.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAccountTeam registers a new resource with the given unique name, arguments, and options.
func NewAccountTeam(ctx *pulumi.Context,
	name string, args *AccountTeamArgs, opts ...pulumi.ResourceOption) (*AccountTeam, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	var resource AccountTeam
	err := ctx.RegisterResource("aiven:index/accountTeam:AccountTeam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountTeam gets an existing AccountTeam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountTeamState, opts ...pulumi.ResourceOption) (*AccountTeam, error) {
	var resource AccountTeam
	err := ctx.ReadResource("aiven:index/accountTeam:AccountTeam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountTeam resources.
type accountTeamState struct {
	// is a unique account id.
	AccountId *string `pulumi:"accountId"`
	// time of creation.
	CreateTime *string `pulumi:"createTime"`
	// defines an account team name.
	Name *string `pulumi:"name"`
	// is an auto-generated unique account team id.
	TeamId *string `pulumi:"teamId"`
	// time of last update.
	UpdateTime *string `pulumi:"updateTime"`
}

type AccountTeamState struct {
	// is a unique account id.
	AccountId pulumi.StringPtrInput
	// time of creation.
	CreateTime pulumi.StringPtrInput
	// defines an account team name.
	Name pulumi.StringPtrInput
	// is an auto-generated unique account team id.
	TeamId pulumi.StringPtrInput
	// time of last update.
	UpdateTime pulumi.StringPtrInput
}

func (AccountTeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTeamState)(nil)).Elem()
}

type accountTeamArgs struct {
	// is a unique account id.
	AccountId string `pulumi:"accountId"`
	// time of creation.
	CreateTime *string `pulumi:"createTime"`
	// defines an account team name.
	Name *string `pulumi:"name"`
	// time of last update.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a AccountTeam resource.
type AccountTeamArgs struct {
	// is a unique account id.
	AccountId pulumi.StringInput
	// time of creation.
	CreateTime pulumi.StringPtrInput
	// defines an account team name.
	Name pulumi.StringPtrInput
	// time of last update.
	UpdateTime pulumi.StringPtrInput
}

func (AccountTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTeamArgs)(nil)).Elem()
}

type AccountTeamInput interface {
	pulumi.Input

	ToAccountTeamOutput() AccountTeamOutput
	ToAccountTeamOutputWithContext(ctx context.Context) AccountTeamOutput
}

func (*AccountTeam) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountTeam)(nil))
}

func (i *AccountTeam) ToAccountTeamOutput() AccountTeamOutput {
	return i.ToAccountTeamOutputWithContext(context.Background())
}

func (i *AccountTeam) ToAccountTeamOutputWithContext(ctx context.Context) AccountTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamOutput)
}

type AccountTeamOutput struct {
	*pulumi.OutputState
}

func (AccountTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountTeam)(nil))
}

func (o AccountTeamOutput) ToAccountTeamOutput() AccountTeamOutput {
	return o
}

func (o AccountTeamOutput) ToAccountTeamOutputWithContext(ctx context.Context) AccountTeamOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AccountTeamOutput{})
}
