// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The Account Team resource allows the creation and management of an Account Team.
//
// ## Import
//
// ```sh
//
//	$ pulumi import aiven:index/accountTeam:AccountTeam account_team1 account_id/team_id
//
// ```
type AccountTeam struct {
	pulumi.CustomResourceState

	// The unique account id
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Time of creation
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The account team name
	Name pulumi.StringOutput `pulumi:"name"`
	// The auto-generated unique account team id
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// Time of last update
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAccountTeam registers a new resource with the given unique name, arguments, and options.
func NewAccountTeam(ctx *pulumi.Context,
	name string, args *AccountTeamArgs, opts ...pulumi.ResourceOption) (*AccountTeam, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountTeam
	err := ctx.RegisterResource("aiven:index/accountTeam:AccountTeam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountTeam gets an existing AccountTeam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountTeamState, opts ...pulumi.ResourceOption) (*AccountTeam, error) {
	var resource AccountTeam
	err := ctx.ReadResource("aiven:index/accountTeam:AccountTeam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountTeam resources.
type accountTeamState struct {
	// The unique account id
	AccountId *string `pulumi:"accountId"`
	// Time of creation
	CreateTime *string `pulumi:"createTime"`
	// The account team name
	Name *string `pulumi:"name"`
	// The auto-generated unique account team id
	TeamId *string `pulumi:"teamId"`
	// Time of last update
	UpdateTime *string `pulumi:"updateTime"`
}

type AccountTeamState struct {
	// The unique account id
	AccountId pulumi.StringPtrInput
	// Time of creation
	CreateTime pulumi.StringPtrInput
	// The account team name
	Name pulumi.StringPtrInput
	// The auto-generated unique account team id
	TeamId pulumi.StringPtrInput
	// Time of last update
	UpdateTime pulumi.StringPtrInput
}

func (AccountTeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTeamState)(nil)).Elem()
}

type accountTeamArgs struct {
	// The unique account id
	AccountId string `pulumi:"accountId"`
	// The account team name
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AccountTeam resource.
type AccountTeamArgs struct {
	// The unique account id
	AccountId pulumi.StringInput
	// The account team name
	Name pulumi.StringPtrInput
}

func (AccountTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTeamArgs)(nil)).Elem()
}

type AccountTeamInput interface {
	pulumi.Input

	ToAccountTeamOutput() AccountTeamOutput
	ToAccountTeamOutputWithContext(ctx context.Context) AccountTeamOutput
}

func (*AccountTeam) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountTeam)(nil)).Elem()
}

func (i *AccountTeam) ToAccountTeamOutput() AccountTeamOutput {
	return i.ToAccountTeamOutputWithContext(context.Background())
}

func (i *AccountTeam) ToAccountTeamOutputWithContext(ctx context.Context) AccountTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamOutput)
}

func (i *AccountTeam) ToOutput(ctx context.Context) pulumix.Output[*AccountTeam] {
	return pulumix.Output[*AccountTeam]{
		OutputState: i.ToAccountTeamOutputWithContext(ctx).OutputState,
	}
}

// AccountTeamArrayInput is an input type that accepts AccountTeamArray and AccountTeamArrayOutput values.
// You can construct a concrete instance of `AccountTeamArrayInput` via:
//
//	AccountTeamArray{ AccountTeamArgs{...} }
type AccountTeamArrayInput interface {
	pulumi.Input

	ToAccountTeamArrayOutput() AccountTeamArrayOutput
	ToAccountTeamArrayOutputWithContext(context.Context) AccountTeamArrayOutput
}

type AccountTeamArray []AccountTeamInput

func (AccountTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountTeam)(nil)).Elem()
}

func (i AccountTeamArray) ToAccountTeamArrayOutput() AccountTeamArrayOutput {
	return i.ToAccountTeamArrayOutputWithContext(context.Background())
}

func (i AccountTeamArray) ToAccountTeamArrayOutputWithContext(ctx context.Context) AccountTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamArrayOutput)
}

func (i AccountTeamArray) ToOutput(ctx context.Context) pulumix.Output[[]*AccountTeam] {
	return pulumix.Output[[]*AccountTeam]{
		OutputState: i.ToAccountTeamArrayOutputWithContext(ctx).OutputState,
	}
}

// AccountTeamMapInput is an input type that accepts AccountTeamMap and AccountTeamMapOutput values.
// You can construct a concrete instance of `AccountTeamMapInput` via:
//
//	AccountTeamMap{ "key": AccountTeamArgs{...} }
type AccountTeamMapInput interface {
	pulumi.Input

	ToAccountTeamMapOutput() AccountTeamMapOutput
	ToAccountTeamMapOutputWithContext(context.Context) AccountTeamMapOutput
}

type AccountTeamMap map[string]AccountTeamInput

func (AccountTeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountTeam)(nil)).Elem()
}

func (i AccountTeamMap) ToAccountTeamMapOutput() AccountTeamMapOutput {
	return i.ToAccountTeamMapOutputWithContext(context.Background())
}

func (i AccountTeamMap) ToAccountTeamMapOutputWithContext(ctx context.Context) AccountTeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTeamMapOutput)
}

func (i AccountTeamMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AccountTeam] {
	return pulumix.Output[map[string]*AccountTeam]{
		OutputState: i.ToAccountTeamMapOutputWithContext(ctx).OutputState,
	}
}

type AccountTeamOutput struct{ *pulumi.OutputState }

func (AccountTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountTeam)(nil)).Elem()
}

func (o AccountTeamOutput) ToAccountTeamOutput() AccountTeamOutput {
	return o
}

func (o AccountTeamOutput) ToAccountTeamOutputWithContext(ctx context.Context) AccountTeamOutput {
	return o
}

func (o AccountTeamOutput) ToOutput(ctx context.Context) pulumix.Output[*AccountTeam] {
	return pulumix.Output[*AccountTeam]{
		OutputState: o.OutputState,
	}
}

// The unique account id
func (o AccountTeamOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountTeam) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Time of creation
func (o AccountTeamOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountTeam) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The account team name
func (o AccountTeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountTeam) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The auto-generated unique account team id
func (o AccountTeamOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountTeam) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// Time of last update
func (o AccountTeamOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountTeam) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AccountTeamArrayOutput struct{ *pulumi.OutputState }

func (AccountTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountTeam)(nil)).Elem()
}

func (o AccountTeamArrayOutput) ToAccountTeamArrayOutput() AccountTeamArrayOutput {
	return o
}

func (o AccountTeamArrayOutput) ToAccountTeamArrayOutputWithContext(ctx context.Context) AccountTeamArrayOutput {
	return o
}

func (o AccountTeamArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AccountTeam] {
	return pulumix.Output[[]*AccountTeam]{
		OutputState: o.OutputState,
	}
}

func (o AccountTeamArrayOutput) Index(i pulumi.IntInput) AccountTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountTeam {
		return vs[0].([]*AccountTeam)[vs[1].(int)]
	}).(AccountTeamOutput)
}

type AccountTeamMapOutput struct{ *pulumi.OutputState }

func (AccountTeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountTeam)(nil)).Elem()
}

func (o AccountTeamMapOutput) ToAccountTeamMapOutput() AccountTeamMapOutput {
	return o
}

func (o AccountTeamMapOutput) ToAccountTeamMapOutputWithContext(ctx context.Context) AccountTeamMapOutput {
	return o
}

func (o AccountTeamMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AccountTeam] {
	return pulumix.Output[map[string]*AccountTeam]{
		OutputState: o.OutputState,
	}
}

func (o AccountTeamMapOutput) MapIndex(k pulumi.StringInput) AccountTeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountTeam {
		return vs[0].(map[string]*AccountTeam)[vs[1].(string)]
	}).(AccountTeamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamInput)(nil)).Elem(), &AccountTeam{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamArrayInput)(nil)).Elem(), AccountTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTeamMapInput)(nil)).Elem(), AccountTeamMap{})
	pulumi.RegisterOutputType(AccountTeamOutput{})
	pulumi.RegisterOutputType(AccountTeamArrayOutput{})
	pulumi.RegisterOutputType(AccountTeamMapOutput{})
}
