// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Kafka Connect resource allows the creation and management of Aiven Kafka Connect services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewKafkaConnect(ctx, "kc1", &aiven.KafkaConnectArgs{
//				Project:               pulumi.Any(data.Aiven_project.Pr1.Project),
//				CloudName:             pulumi.String("google-europe-west1"),
//				Plan:                  pulumi.String("startup-4"),
//				ServiceName:           pulumi.String("my-kc1"),
//				MaintenanceWindowDow:  pulumi.String("monday"),
//				MaintenanceWindowTime: pulumi.String("10:00:00"),
//				KafkaConnectUserConfig: &aiven.KafkaConnectKafkaConnectUserConfigArgs{
//					KafkaConnect: &aiven.KafkaConnectKafkaConnectUserConfigKafkaConnectArgs{
//						ConsumerIsolationLevel: pulumi.String("read_committed"),
//					},
//					PublicAccess: &aiven.KafkaConnectKafkaConnectUserConfigPublicAccessArgs{
//						KafkaConnect: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import aiven:index/kafkaConnect:KafkaConnect kc1 project/service_name
//
// ```
type KafkaConnect struct {
	pulumi.CustomResourceState

	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrOutput `pulumi:"additionalDiskSpace"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components KafkaConnectComponentArrayOutput `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	DiskSpace pulumi.StringPtrOutput `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringOutput `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault pulumi.StringOutput `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep pulumi.StringOutput `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringOutput `pulumi:"diskSpaceUsed"`
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig KafkaConnectKafkaConnectUserConfigPtrOutput `pulumi:"kafkaConnectUserConfig"`
	// Kafka Connect server provided values
	KafkaConnects KafkaConnectKafkaConnectArrayOutput `pulumi:"kafkaConnects"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations KafkaConnectServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// The port of the service
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringOutput `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayOutput `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags KafkaConnectTagArrayOutput `pulumi:"tags"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewKafkaConnect registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnect(ctx *pulumi.Context,
	name string, args *KafkaConnectArgs, opts ...pulumi.ResourceOption) (*KafkaConnect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePassword",
		"serviceUri",
	})
	opts = append(opts, secrets)
	var resource KafkaConnect
	err := ctx.RegisterResource("aiven:index/kafkaConnect:KafkaConnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnect gets an existing KafkaConnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectState, opts ...pulumi.ResourceOption) (*KafkaConnect, error) {
	var resource KafkaConnect
	err := ctx.ReadResource("aiven:index/kafkaConnect:KafkaConnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnect resources.
type kafkaConnectState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []KafkaConnectComponent `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	DiskSpace *string `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap *string `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault *string `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep *string `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed *string `pulumi:"diskSpaceUsed"`
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig *KafkaConnectKafkaConnectUserConfig `pulumi:"kafkaConnectUserConfig"`
	// Kafka Connect server provided values
	KafkaConnects []KafkaConnectKafkaConnect `pulumi:"kafkaConnects"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []KafkaConnectServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword *string `pulumi:"servicePassword"`
	// The port of the service
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State *string `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []KafkaConnectTag `pulumi:"tags"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type KafkaConnectState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components KafkaConnectComponentArrayInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	DiskSpace pulumi.StringPtrInput
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringPtrInput
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault pulumi.StringPtrInput
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep pulumi.StringPtrInput
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringPtrInput
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig KafkaConnectKafkaConnectUserConfigPtrInput
	// Kafka Connect server provided values
	KafkaConnects KafkaConnectKafkaConnectArrayInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// The hostname of the service.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations KafkaConnectServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringPtrInput
	// The port of the service
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringPtrInput
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringPtrInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags KafkaConnectTagArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (KafkaConnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectState)(nil)).Elem()
}

type kafkaConnectArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	DiskSpace *string `pulumi:"diskSpace"`
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig *KafkaConnectKafkaConnectUserConfig `pulumi:"kafkaConnectUserConfig"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []KafkaConnectServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []KafkaConnectTag `pulumi:"tags"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a KafkaConnect resource.
type KafkaConnectArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
	// reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
	// will result in the service rebalancing.
	DiskSpace pulumi.StringPtrInput
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig KafkaConnectKafkaConnectUserConfigPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations KafkaConnectServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags KafkaConnectTagArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (KafkaConnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectArgs)(nil)).Elem()
}

type KafkaConnectInput interface {
	pulumi.Input

	ToKafkaConnectOutput() KafkaConnectOutput
	ToKafkaConnectOutputWithContext(ctx context.Context) KafkaConnectOutput
}

func (*KafkaConnect) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnect)(nil)).Elem()
}

func (i *KafkaConnect) ToKafkaConnectOutput() KafkaConnectOutput {
	return i.ToKafkaConnectOutputWithContext(context.Background())
}

func (i *KafkaConnect) ToKafkaConnectOutputWithContext(ctx context.Context) KafkaConnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectOutput)
}

// KafkaConnectArrayInput is an input type that accepts KafkaConnectArray and KafkaConnectArrayOutput values.
// You can construct a concrete instance of `KafkaConnectArrayInput` via:
//
//	KafkaConnectArray{ KafkaConnectArgs{...} }
type KafkaConnectArrayInput interface {
	pulumi.Input

	ToKafkaConnectArrayOutput() KafkaConnectArrayOutput
	ToKafkaConnectArrayOutputWithContext(context.Context) KafkaConnectArrayOutput
}

type KafkaConnectArray []KafkaConnectInput

func (KafkaConnectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnect)(nil)).Elem()
}

func (i KafkaConnectArray) ToKafkaConnectArrayOutput() KafkaConnectArrayOutput {
	return i.ToKafkaConnectArrayOutputWithContext(context.Background())
}

func (i KafkaConnectArray) ToKafkaConnectArrayOutputWithContext(ctx context.Context) KafkaConnectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectArrayOutput)
}

// KafkaConnectMapInput is an input type that accepts KafkaConnectMap and KafkaConnectMapOutput values.
// You can construct a concrete instance of `KafkaConnectMapInput` via:
//
//	KafkaConnectMap{ "key": KafkaConnectArgs{...} }
type KafkaConnectMapInput interface {
	pulumi.Input

	ToKafkaConnectMapOutput() KafkaConnectMapOutput
	ToKafkaConnectMapOutputWithContext(context.Context) KafkaConnectMapOutput
}

type KafkaConnectMap map[string]KafkaConnectInput

func (KafkaConnectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnect)(nil)).Elem()
}

func (i KafkaConnectMap) ToKafkaConnectMapOutput() KafkaConnectMapOutput {
	return i.ToKafkaConnectMapOutputWithContext(context.Background())
}

func (i KafkaConnectMap) ToKafkaConnectMapOutputWithContext(ctx context.Context) KafkaConnectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectMapOutput)
}

type KafkaConnectOutput struct{ *pulumi.OutputState }

func (KafkaConnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnect)(nil)).Elem()
}

func (o KafkaConnectOutput) ToKafkaConnectOutput() KafkaConnectOutput {
	return o
}

func (o KafkaConnectOutput) ToKafkaConnectOutputWithContext(ctx context.Context) KafkaConnectOutput {
	return o
}

// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore,
// reducing will result in the service rebalancing.
func (o KafkaConnectOutput) AdditionalDiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringPtrOutput { return v.AdditionalDiskSpace }).(pulumi.StringPtrOutput)
}

// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
// are documented on each Cloud provider's own support articles, like [here for
// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
func (o KafkaConnectOutput) CloudName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringPtrOutput { return v.CloudName }).(pulumi.StringPtrOutput)
}

// Service component information objects
func (o KafkaConnectOutput) Components() KafkaConnectComponentArrayOutput {
	return o.ApplyT(func(v *KafkaConnect) KafkaConnectComponentArrayOutput { return v.Components }).(KafkaConnectComponentArrayOutput)
}

// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing
// will result in the service rebalancing.
func (o KafkaConnectOutput) DiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringPtrOutput { return v.DiskSpace }).(pulumi.StringPtrOutput)
}

// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
func (o KafkaConnectOutput) DiskSpaceCap() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.DiskSpaceCap }).(pulumi.StringOutput)
}

// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
// Its also the minimum value for `disk_space`
func (o KafkaConnectOutput) DiskSpaceDefault() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.DiskSpaceDefault }).(pulumi.StringOutput)
}

// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
func (o KafkaConnectOutput) DiskSpaceStep() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.DiskSpaceStep }).(pulumi.StringOutput)
}

// Disk space that service is currently using
func (o KafkaConnectOutput) DiskSpaceUsed() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.DiskSpaceUsed }).(pulumi.StringOutput)
}

// KafkaConnect user configurable settings
func (o KafkaConnectOutput) KafkaConnectUserConfig() KafkaConnectKafkaConnectUserConfigPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) KafkaConnectKafkaConnectUserConfigPtrOutput { return v.KafkaConnectUserConfig }).(KafkaConnectKafkaConnectUserConfigPtrOutput)
}

// Kafka Connect server provided values
func (o KafkaConnectOutput) KafkaConnects() KafkaConnectKafkaConnectArrayOutput {
	return o.ApplyT(func(v *KafkaConnect) KafkaConnectKafkaConnectArrayOutput { return v.KafkaConnects }).(KafkaConnectKafkaConnectArrayOutput)
}

// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
func (o KafkaConnectOutput) MaintenanceWindowDow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringPtrOutput { return v.MaintenanceWindowDow }).(pulumi.StringPtrOutput)
}

// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
func (o KafkaConnectOutput) MaintenanceWindowTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringPtrOutput { return v.MaintenanceWindowTime }).(pulumi.StringPtrOutput)
}

// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
func (o KafkaConnectOutput) Plan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringPtrOutput { return v.Plan }).(pulumi.StringPtrOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
// reference. This property cannot be changed, doing so forces recreation of the resource.
func (o KafkaConnectOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
// servers so the operation can take significant amount of time to complete if the service has a lot of data.
func (o KafkaConnectOutput) ProjectVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringPtrOutput { return v.ProjectVpcId }).(pulumi.StringPtrOutput)
}

// The hostname of the service.
func (o KafkaConnectOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.ServiceHost }).(pulumi.StringOutput)
}

// Service integrations to specify when creating a service. Not applied after initial service creation
func (o KafkaConnectOutput) ServiceIntegrations() KafkaConnectServiceIntegrationArrayOutput {
	return o.ApplyT(func(v *KafkaConnect) KafkaConnectServiceIntegrationArrayOutput { return v.ServiceIntegrations }).(KafkaConnectServiceIntegrationArrayOutput)
}

// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
// service so name should be picked based on intended service usage rather than current attributes.
func (o KafkaConnectOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Password used for connecting to the service, if applicable
func (o KafkaConnectOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// The port of the service
func (o KafkaConnectOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.IntOutput { return v.ServicePort }).(pulumi.IntOutput)
}

// Aiven internal service type code
func (o KafkaConnectOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
func (o KafkaConnectOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.ServiceUri }).(pulumi.StringOutput)
}

// Username used for connecting to the service, if applicable
func (o KafkaConnectOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.ServiceUsername }).(pulumi.StringOutput)
}

// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
func (o KafkaConnectOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
// static ip resource is in the 'assigned' state it cannot be unbound from the node again
func (o KafkaConnectOutput) StaticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringArrayOutput { return v.StaticIps }).(pulumi.StringArrayOutput)
}

// Tags are key-value pairs that allow you to categorize services.
func (o KafkaConnectOutput) Tags() KafkaConnectTagArrayOutput {
	return o.ApplyT(func(v *KafkaConnect) KafkaConnectTagArrayOutput { return v.Tags }).(KafkaConnectTagArrayOutput)
}

// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
// much of the content can at least be restored from backup in case accidental deletion is done.
func (o KafkaConnectOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type KafkaConnectArrayOutput struct{ *pulumi.OutputState }

func (KafkaConnectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnect)(nil)).Elem()
}

func (o KafkaConnectArrayOutput) ToKafkaConnectArrayOutput() KafkaConnectArrayOutput {
	return o
}

func (o KafkaConnectArrayOutput) ToKafkaConnectArrayOutputWithContext(ctx context.Context) KafkaConnectArrayOutput {
	return o
}

func (o KafkaConnectArrayOutput) Index(i pulumi.IntInput) KafkaConnectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaConnect {
		return vs[0].([]*KafkaConnect)[vs[1].(int)]
	}).(KafkaConnectOutput)
}

type KafkaConnectMapOutput struct{ *pulumi.OutputState }

func (KafkaConnectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnect)(nil)).Elem()
}

func (o KafkaConnectMapOutput) ToKafkaConnectMapOutput() KafkaConnectMapOutput {
	return o
}

func (o KafkaConnectMapOutput) ToKafkaConnectMapOutputWithContext(ctx context.Context) KafkaConnectMapOutput {
	return o
}

func (o KafkaConnectMapOutput) MapIndex(k pulumi.StringInput) KafkaConnectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaConnect {
		return vs[0].(map[string]*KafkaConnect)[vs[1].(string)]
	}).(KafkaConnectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectInput)(nil)).Elem(), &KafkaConnect{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectArrayInput)(nil)).Elem(), KafkaConnectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectMapInput)(nil)).Elem(), KafkaConnectMap{})
	pulumi.RegisterOutputType(KafkaConnectOutput{})
	pulumi.RegisterOutputType(KafkaConnectArrayOutput{})
	pulumi.RegisterOutputType(KafkaConnectMapOutput{})
}
