// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Cassandra resource allows the creation and management of Aiven Cassandra services.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewCassandra(ctx, "bar", &aiven.CassandraArgs{
//				Project:               pulumi.Any(data.Aiven_project.Foo.Project),
//				CloudName:             pulumi.String("google-europe-west1"),
//				Plan:                  pulumi.String("startup-4"),
//				ServiceName:           pulumi.String("test-service-name"),
//				MaintenanceWindowDow:  pulumi.String("monday"),
//				MaintenanceWindowTime: pulumi.String("10:00:00"),
//				CassandraUserConfig: &aiven.CassandraCassandraUserConfigArgs{
//					MigrateSstableloader: pulumi.Bool(true),
//					PublicAccess: &aiven.CassandraCassandraUserConfigPublicAccessArgs{
//						Prometheus: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/cassandra:Cassandra bar project/service_name
// ```
type Cassandra struct {
	pulumi.CustomResourceState

	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrOutput `pulumi:"additionalDiskSpace"`
	// Cassandra user configurable settings
	CassandraUserConfig CassandraCassandraUserConfigPtrOutput `pulumi:"cassandraUserConfig"`
	// cassandra configuration values
	Cassandras CassandraCassandraArrayOutput `pulumi:"cassandras"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components CassandraComponentArrayOutput `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace pulumi.StringPtrOutput `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringOutput `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault pulumi.StringOutput `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep pulumi.StringOutput `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringOutput `pulumi:"diskSpaceUsed"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringOutput `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations CassandraServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// The port of the service
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringOutput `pulumi:"state"`
	// Use static public IP addresses.
	StaticIps pulumi.StringArrayOutput `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags CassandraTagArrayOutput `pulumi:"tags"`
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability.
	TechEmails CassandraTechEmailArrayOutput `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewCassandra registers a new resource with the given unique name, arguments, and options.
func NewCassandra(ctx *pulumi.Context,
	name string, args *CassandraArgs, opts ...pulumi.ResourceOption) (*Cassandra, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePassword",
		"serviceUri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cassandra
	err := ctx.RegisterResource("aiven:index/cassandra:Cassandra", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCassandra gets an existing Cassandra resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCassandra(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CassandraState, opts ...pulumi.ResourceOption) (*Cassandra, error) {
	var resource Cassandra
	err := ctx.ReadResource("aiven:index/cassandra:Cassandra", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cassandra resources.
type cassandraState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Cassandra user configurable settings
	CassandraUserConfig *CassandraCassandraUserConfig `pulumi:"cassandraUserConfig"`
	// cassandra configuration values
	Cassandras []CassandraCassandra `pulumi:"cassandras"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []CassandraComponent `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace *string `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap *string `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault *string `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep *string `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed *string `pulumi:"diskSpaceUsed"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []CassandraServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword *string `pulumi:"servicePassword"`
	// The port of the service
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State *string `pulumi:"state"`
	// Use static public IP addresses.
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []CassandraTag `pulumi:"tags"`
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability.
	TechEmails []CassandraTechEmail `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type CassandraState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Cassandra user configurable settings
	CassandraUserConfig CassandraCassandraUserConfigPtrInput
	// cassandra configuration values
	Cassandras CassandraCassandraArrayInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components CassandraComponentArrayInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace pulumi.StringPtrInput
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringPtrInput
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault pulumi.StringPtrInput
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep pulumi.StringPtrInput
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// The hostname of the service.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations CassandraServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringPtrInput
	// The port of the service
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringPtrInput
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringPtrInput
	// Use static public IP addresses.
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags CassandraTagArrayInput
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability.
	TechEmails CassandraTechEmailArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (CassandraState) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraState)(nil)).Elem()
}

type cassandraArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Cassandra user configurable settings
	CassandraUserConfig *CassandraCassandraUserConfig `pulumi:"cassandraUserConfig"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace *string `pulumi:"diskSpace"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []CassandraServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// Use static public IP addresses.
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []CassandraTag `pulumi:"tags"`
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability.
	TechEmails []CassandraTechEmail `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a Cassandra resource.
type CassandraArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Cassandra user configurable settings
	CassandraUserConfig CassandraCassandraUserConfigPtrInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace pulumi.StringPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations CassandraServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// Use static public IP addresses.
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags CassandraTagArrayInput
	// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability.
	TechEmails CassandraTechEmailArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (CassandraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraArgs)(nil)).Elem()
}

type CassandraInput interface {
	pulumi.Input

	ToCassandraOutput() CassandraOutput
	ToCassandraOutputWithContext(ctx context.Context) CassandraOutput
}

func (*Cassandra) ElementType() reflect.Type {
	return reflect.TypeOf((**Cassandra)(nil)).Elem()
}

func (i *Cassandra) ToCassandraOutput() CassandraOutput {
	return i.ToCassandraOutputWithContext(context.Background())
}

func (i *Cassandra) ToCassandraOutputWithContext(ctx context.Context) CassandraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraOutput)
}

// CassandraArrayInput is an input type that accepts CassandraArray and CassandraArrayOutput values.
// You can construct a concrete instance of `CassandraArrayInput` via:
//
//	CassandraArray{ CassandraArgs{...} }
type CassandraArrayInput interface {
	pulumi.Input

	ToCassandraArrayOutput() CassandraArrayOutput
	ToCassandraArrayOutputWithContext(context.Context) CassandraArrayOutput
}

type CassandraArray []CassandraInput

func (CassandraArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cassandra)(nil)).Elem()
}

func (i CassandraArray) ToCassandraArrayOutput() CassandraArrayOutput {
	return i.ToCassandraArrayOutputWithContext(context.Background())
}

func (i CassandraArray) ToCassandraArrayOutputWithContext(ctx context.Context) CassandraArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraArrayOutput)
}

// CassandraMapInput is an input type that accepts CassandraMap and CassandraMapOutput values.
// You can construct a concrete instance of `CassandraMapInput` via:
//
//	CassandraMap{ "key": CassandraArgs{...} }
type CassandraMapInput interface {
	pulumi.Input

	ToCassandraMapOutput() CassandraMapOutput
	ToCassandraMapOutputWithContext(context.Context) CassandraMapOutput
}

type CassandraMap map[string]CassandraInput

func (CassandraMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cassandra)(nil)).Elem()
}

func (i CassandraMap) ToCassandraMapOutput() CassandraMapOutput {
	return i.ToCassandraMapOutputWithContext(context.Background())
}

func (i CassandraMap) ToCassandraMapOutputWithContext(ctx context.Context) CassandraMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraMapOutput)
}

type CassandraOutput struct{ *pulumi.OutputState }

func (CassandraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cassandra)(nil)).Elem()
}

func (o CassandraOutput) ToCassandraOutput() CassandraOutput {
	return o
}

func (o CassandraOutput) ToCassandraOutputWithContext(ctx context.Context) CassandraOutput {
	return o
}

// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
func (o CassandraOutput) AdditionalDiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringPtrOutput { return v.AdditionalDiskSpace }).(pulumi.StringPtrOutput)
}

// Cassandra user configurable settings
func (o CassandraOutput) CassandraUserConfig() CassandraCassandraUserConfigPtrOutput {
	return o.ApplyT(func(v *Cassandra) CassandraCassandraUserConfigPtrOutput { return v.CassandraUserConfig }).(CassandraCassandraUserConfigPtrOutput)
}

// cassandra configuration values
func (o CassandraOutput) Cassandras() CassandraCassandraArrayOutput {
	return o.ApplyT(func(v *Cassandra) CassandraCassandraArrayOutput { return v.Cassandras }).(CassandraCassandraArrayOutput)
}

// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
func (o CassandraOutput) CloudName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringPtrOutput { return v.CloudName }).(pulumi.StringPtrOutput)
}

// Service component information objects
func (o CassandraOutput) Components() CassandraComponentArrayOutput {
	return o.ApplyT(func(v *Cassandra) CassandraComponentArrayOutput { return v.Components }).(CassandraComponentArrayOutput)
}

// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
//
// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
func (o CassandraOutput) DiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringPtrOutput { return v.DiskSpace }).(pulumi.StringPtrOutput)
}

// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
func (o CassandraOutput) DiskSpaceCap() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.DiskSpaceCap }).(pulumi.StringOutput)
}

// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
func (o CassandraOutput) DiskSpaceDefault() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.DiskSpaceDefault }).(pulumi.StringOutput)
}

// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
func (o CassandraOutput) DiskSpaceStep() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.DiskSpaceStep }).(pulumi.StringOutput)
}

// Disk space that service is currently using
func (o CassandraOutput) DiskSpaceUsed() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.DiskSpaceUsed }).(pulumi.StringOutput)
}

// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
func (o CassandraOutput) MaintenanceWindowDow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringPtrOutput { return v.MaintenanceWindowDow }).(pulumi.StringPtrOutput)
}

// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
func (o CassandraOutput) MaintenanceWindowTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringPtrOutput { return v.MaintenanceWindowTime }).(pulumi.StringPtrOutput)
}

// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
func (o CassandraOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o CassandraOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
func (o CassandraOutput) ProjectVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringPtrOutput { return v.ProjectVpcId }).(pulumi.StringPtrOutput)
}

// The hostname of the service.
func (o CassandraOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.ServiceHost }).(pulumi.StringOutput)
}

// Service integrations to specify when creating a service. Not applied after initial service creation
func (o CassandraOutput) ServiceIntegrations() CassandraServiceIntegrationArrayOutput {
	return o.ApplyT(func(v *Cassandra) CassandraServiceIntegrationArrayOutput { return v.ServiceIntegrations }).(CassandraServiceIntegrationArrayOutput)
}

// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
func (o CassandraOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Password used for connecting to the service, if applicable
func (o CassandraOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// The port of the service
func (o CassandraOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.IntOutput { return v.ServicePort }).(pulumi.IntOutput)
}

// Aiven internal service type code
func (o CassandraOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
func (o CassandraOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.ServiceUri }).(pulumi.StringOutput)
}

// Username used for connecting to the service, if applicable
func (o CassandraOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.ServiceUsername }).(pulumi.StringOutput)
}

// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
func (o CassandraOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Use static public IP addresses.
func (o CassandraOutput) StaticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.StringArrayOutput { return v.StaticIps }).(pulumi.StringArrayOutput)
}

// Tags are key-value pairs that allow you to categorize services.
func (o CassandraOutput) Tags() CassandraTagArrayOutput {
	return o.ApplyT(func(v *Cassandra) CassandraTagArrayOutput { return v.Tags }).(CassandraTagArrayOutput)
}

// Defines the email addresses that will receive alerts about upcoming maintenance updates or warnings about service instability.
func (o CassandraOutput) TechEmails() CassandraTechEmailArrayOutput {
	return o.ApplyT(func(v *Cassandra) CassandraTechEmailArrayOutput { return v.TechEmails }).(CassandraTechEmailArrayOutput)
}

// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
func (o CassandraOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cassandra) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type CassandraArrayOutput struct{ *pulumi.OutputState }

func (CassandraArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cassandra)(nil)).Elem()
}

func (o CassandraArrayOutput) ToCassandraArrayOutput() CassandraArrayOutput {
	return o
}

func (o CassandraArrayOutput) ToCassandraArrayOutputWithContext(ctx context.Context) CassandraArrayOutput {
	return o
}

func (o CassandraArrayOutput) Index(i pulumi.IntInput) CassandraOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cassandra {
		return vs[0].([]*Cassandra)[vs[1].(int)]
	}).(CassandraOutput)
}

type CassandraMapOutput struct{ *pulumi.OutputState }

func (CassandraMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cassandra)(nil)).Elem()
}

func (o CassandraMapOutput) ToCassandraMapOutput() CassandraMapOutput {
	return o
}

func (o CassandraMapOutput) ToCassandraMapOutputWithContext(ctx context.Context) CassandraMapOutput {
	return o
}

func (o CassandraMapOutput) MapIndex(k pulumi.StringInput) CassandraOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cassandra {
		return vs[0].(map[string]*Cassandra)[vs[1].(string)]
	}).(CassandraOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraInput)(nil)).Elem(), &Cassandra{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraArrayInput)(nil)).Elem(), CassandraArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraMapInput)(nil)).Elem(), CassandraMap{})
	pulumi.RegisterOutputType(CassandraOutput{})
	pulumi.RegisterOutputType(CassandraArrayOutput{})
	pulumi.RegisterOutputType(CassandraMapOutput{})
}
