// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The PG User resource allows the creation and management of Aiven PG Users.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewPgUser(ctx, "foo", &aiven.PgUserArgs{
//				ServiceName: pulumi.Any(aiven_pg.Bar.Service_name),
//				Project:     pulumi.String("my-project"),
//				Username:    pulumi.String("user-1"),
//				Password:    pulumi.String("Test$1234"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import aiven:index/pgUser:PgUser user project/service_name/username
//
// ```
type PgUser struct {
	pulumi.CustomResourceState

	// Access certificate for the user
	AccessCert pulumi.StringOutput `pulumi:"accessCert"`
	// Access certificate key for the user
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The password of the PG User ( not applicable for all services ).
	Password pulumi.StringOutput `pulumi:"password"`
	// Defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication pulumi.BoolPtrOutput `pulumi:"pgAllowReplication"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Type of the user account. Tells whether the user is the primary account or a regular account.
	Type pulumi.StringOutput `pulumi:"type"`
	// The actual name of the PG User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewPgUser registers a new resource with the given unique name, arguments, and options.
func NewPgUser(ctx *pulumi.Context,
	name string, args *PgUserArgs, opts ...pulumi.ResourceOption) (*PgUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessCert",
		"accessKey",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PgUser
	err := ctx.RegisterResource("aiven:index/pgUser:PgUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgUser gets an existing PgUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgUserState, opts ...pulumi.ResourceOption) (*PgUser, error) {
	var resource PgUser
	err := ctx.ReadResource("aiven:index/pgUser:PgUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgUser resources.
type pgUserState struct {
	// Access certificate for the user
	AccessCert *string `pulumi:"accessCert"`
	// Access certificate key for the user
	AccessKey *string `pulumi:"accessKey"`
	// The password of the PG User ( not applicable for all services ).
	Password *string `pulumi:"password"`
	// Defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication *bool `pulumi:"pgAllowReplication"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// Type of the user account. Tells whether the user is the primary account or a regular account.
	Type *string `pulumi:"type"`
	// The actual name of the PG User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username *string `pulumi:"username"`
}

type PgUserState struct {
	// Access certificate for the user
	AccessCert pulumi.StringPtrInput
	// Access certificate key for the user
	AccessKey pulumi.StringPtrInput
	// The password of the PG User ( not applicable for all services ).
	Password pulumi.StringPtrInput
	// Defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication pulumi.BoolPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// Type of the user account. Tells whether the user is the primary account or a regular account.
	Type pulumi.StringPtrInput
	// The actual name of the PG User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringPtrInput
}

func (PgUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgUserState)(nil)).Elem()
}

type pgUserArgs struct {
	// The password of the PG User ( not applicable for all services ).
	Password *string `pulumi:"password"`
	// Defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication *bool `pulumi:"pgAllowReplication"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// The actual name of the PG User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a PgUser resource.
type PgUserArgs struct {
	// The password of the PG User ( not applicable for all services ).
	Password pulumi.StringPtrInput
	// Defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
	PgAllowReplication pulumi.BoolPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringInput
	// The actual name of the PG User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Username pulumi.StringInput
}

func (PgUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgUserArgs)(nil)).Elem()
}

type PgUserInput interface {
	pulumi.Input

	ToPgUserOutput() PgUserOutput
	ToPgUserOutputWithContext(ctx context.Context) PgUserOutput
}

func (*PgUser) ElementType() reflect.Type {
	return reflect.TypeOf((**PgUser)(nil)).Elem()
}

func (i *PgUser) ToPgUserOutput() PgUserOutput {
	return i.ToPgUserOutputWithContext(context.Background())
}

func (i *PgUser) ToPgUserOutputWithContext(ctx context.Context) PgUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgUserOutput)
}

func (i *PgUser) ToOutput(ctx context.Context) pulumix.Output[*PgUser] {
	return pulumix.Output[*PgUser]{
		OutputState: i.ToPgUserOutputWithContext(ctx).OutputState,
	}
}

// PgUserArrayInput is an input type that accepts PgUserArray and PgUserArrayOutput values.
// You can construct a concrete instance of `PgUserArrayInput` via:
//
//	PgUserArray{ PgUserArgs{...} }
type PgUserArrayInput interface {
	pulumi.Input

	ToPgUserArrayOutput() PgUserArrayOutput
	ToPgUserArrayOutputWithContext(context.Context) PgUserArrayOutput
}

type PgUserArray []PgUserInput

func (PgUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgUser)(nil)).Elem()
}

func (i PgUserArray) ToPgUserArrayOutput() PgUserArrayOutput {
	return i.ToPgUserArrayOutputWithContext(context.Background())
}

func (i PgUserArray) ToPgUserArrayOutputWithContext(ctx context.Context) PgUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgUserArrayOutput)
}

func (i PgUserArray) ToOutput(ctx context.Context) pulumix.Output[[]*PgUser] {
	return pulumix.Output[[]*PgUser]{
		OutputState: i.ToPgUserArrayOutputWithContext(ctx).OutputState,
	}
}

// PgUserMapInput is an input type that accepts PgUserMap and PgUserMapOutput values.
// You can construct a concrete instance of `PgUserMapInput` via:
//
//	PgUserMap{ "key": PgUserArgs{...} }
type PgUserMapInput interface {
	pulumi.Input

	ToPgUserMapOutput() PgUserMapOutput
	ToPgUserMapOutputWithContext(context.Context) PgUserMapOutput
}

type PgUserMap map[string]PgUserInput

func (PgUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgUser)(nil)).Elem()
}

func (i PgUserMap) ToPgUserMapOutput() PgUserMapOutput {
	return i.ToPgUserMapOutputWithContext(context.Background())
}

func (i PgUserMap) ToPgUserMapOutputWithContext(ctx context.Context) PgUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgUserMapOutput)
}

func (i PgUserMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PgUser] {
	return pulumix.Output[map[string]*PgUser]{
		OutputState: i.ToPgUserMapOutputWithContext(ctx).OutputState,
	}
}

type PgUserOutput struct{ *pulumi.OutputState }

func (PgUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgUser)(nil)).Elem()
}

func (o PgUserOutput) ToPgUserOutput() PgUserOutput {
	return o
}

func (o PgUserOutput) ToPgUserOutputWithContext(ctx context.Context) PgUserOutput {
	return o
}

func (o PgUserOutput) ToOutput(ctx context.Context) pulumix.Output[*PgUser] {
	return pulumix.Output[*PgUser]{
		OutputState: o.OutputState,
	}
}

// Access certificate for the user
func (o PgUserOutput) AccessCert() pulumi.StringOutput {
	return o.ApplyT(func(v *PgUser) pulumi.StringOutput { return v.AccessCert }).(pulumi.StringOutput)
}

// Access certificate key for the user
func (o PgUserOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *PgUser) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The password of the PG User ( not applicable for all services ).
func (o PgUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *PgUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Defines whether replication is allowed. This property cannot be changed, doing so forces recreation of the resource.
func (o PgUserOutput) PgAllowReplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PgUser) pulumi.BoolPtrOutput { return v.PgAllowReplication }).(pulumi.BoolPtrOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o PgUserOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PgUser) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o PgUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *PgUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Type of the user account. Tells whether the user is the primary account or a regular account.
func (o PgUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PgUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The actual name of the PG User. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o PgUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *PgUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type PgUserArrayOutput struct{ *pulumi.OutputState }

func (PgUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgUser)(nil)).Elem()
}

func (o PgUserArrayOutput) ToPgUserArrayOutput() PgUserArrayOutput {
	return o
}

func (o PgUserArrayOutput) ToPgUserArrayOutputWithContext(ctx context.Context) PgUserArrayOutput {
	return o
}

func (o PgUserArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PgUser] {
	return pulumix.Output[[]*PgUser]{
		OutputState: o.OutputState,
	}
}

func (o PgUserArrayOutput) Index(i pulumi.IntInput) PgUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgUser {
		return vs[0].([]*PgUser)[vs[1].(int)]
	}).(PgUserOutput)
}

type PgUserMapOutput struct{ *pulumi.OutputState }

func (PgUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgUser)(nil)).Elem()
}

func (o PgUserMapOutput) ToPgUserMapOutput() PgUserMapOutput {
	return o
}

func (o PgUserMapOutput) ToPgUserMapOutputWithContext(ctx context.Context) PgUserMapOutput {
	return o
}

func (o PgUserMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PgUser] {
	return pulumix.Output[map[string]*PgUser]{
		OutputState: o.OutputState,
	}
}

func (o PgUserMapOutput) MapIndex(k pulumi.StringInput) PgUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgUser {
		return vs[0].(map[string]*PgUser)[vs[1].(string)]
	}).(PgUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgUserInput)(nil)).Elem(), &PgUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgUserArrayInput)(nil)).Elem(), PgUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgUserMapInput)(nil)).Elem(), PgUserMap{})
	pulumi.RegisterOutputType(PgUserOutput{})
	pulumi.RegisterOutputType(PgUserArrayOutput{})
	pulumi.RegisterOutputType(PgUserMapOutput{})
}
