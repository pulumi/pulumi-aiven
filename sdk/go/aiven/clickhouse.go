// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages an [Aiven for ClickHouseÂ®](https://aiven.io/docs/products/clickhouse/concepts/features-overview) service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewClickhouse(ctx, "example_clickhouse", &aiven.ClickhouseArgs{
//				Project:               pulumi.Any(exampleProject.Project),
//				CloudName:             pulumi.String("google-europe-west1"),
//				Plan:                  pulumi.String("business-4"),
//				ServiceName:           pulumi.String("example-clickhouse-service"),
//				MaintenanceWindowDow:  pulumi.String("monday"),
//				MaintenanceWindowTime: pulumi.String("10:00:00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/clickhouse:Clickhouse clickhouse PROJECT/SERVICE_NAME
// ```
type Clickhouse struct {
	pulumi.CustomResourceState

	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrOutput `pulumi:"additionalDiskSpace"`
	// Values provided by the ClickHouse server.
	Clickhouse ClickhouseClickhouseOutput `pulumi:"clickhouse"`
	// Clickhouse user configurable settings
	ClickhouseUserConfig ClickhouseClickhouseUserConfigPtrOutput `pulumi:"clickhouseUserConfig"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components ClickhouseComponentArrayOutput `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace pulumi.StringPtrOutput `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringOutput `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault pulumi.StringOutput `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep pulumi.StringOutput `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringOutput `pulumi:"diskSpaceUsed"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Integrations with other services. Service integrations are only applied at service creation.
	ServiceIntegrations ClickhouseServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// The port of the service
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringOutput `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayOutput `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags ClickhouseTagArrayOutput `pulumi:"tags"`
	// The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
	TechEmails ClickhouseTechEmailArrayOutput `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewClickhouse registers a new resource with the given unique name, arguments, and options.
func NewClickhouse(ctx *pulumi.Context,
	name string, args *ClickhouseArgs, opts ...pulumi.ResourceOption) (*Clickhouse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Clickhouse != nil {
		args.Clickhouse = pulumi.ToSecret(args.Clickhouse).(ClickhouseClickhousePtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clickhouse",
		"servicePassword",
		"serviceUri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Clickhouse
	err := ctx.RegisterResource("aiven:index/clickhouse:Clickhouse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClickhouse gets an existing Clickhouse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClickhouse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClickhouseState, opts ...pulumi.ResourceOption) (*Clickhouse, error) {
	var resource Clickhouse
	err := ctx.ReadResource("aiven:index/clickhouse:Clickhouse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Clickhouse resources.
type clickhouseState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Values provided by the ClickHouse server.
	Clickhouse *ClickhouseClickhouse `pulumi:"clickhouse"`
	// Clickhouse user configurable settings
	ClickhouseUserConfig *ClickhouseClickhouseUserConfig `pulumi:"clickhouseUserConfig"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []ClickhouseComponent `pulumi:"components"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace *string `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap *string `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault *string `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep *string `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed *string `pulumi:"diskSpaceUsed"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost *string `pulumi:"serviceHost"`
	// Integrations with other services. Service integrations are only applied at service creation.
	ServiceIntegrations []ClickhouseServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword *string `pulumi:"servicePassword"`
	// The port of the service
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State *string `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []ClickhouseTag `pulumi:"tags"`
	// The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
	TechEmails []ClickhouseTechEmail `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type ClickhouseState struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Values provided by the ClickHouse server.
	Clickhouse ClickhouseClickhousePtrInput
	// Clickhouse user configurable settings
	ClickhouseUserConfig ClickhouseClickhouseUserConfigPtrInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components ClickhouseComponentArrayInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace pulumi.StringPtrInput
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringPtrInput
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault pulumi.StringPtrInput
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep pulumi.StringPtrInput
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// The hostname of the service.
	ServiceHost pulumi.StringPtrInput
	// Integrations with other services. Service integrations are only applied at service creation.
	ServiceIntegrations ClickhouseServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringPtrInput
	// The port of the service
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringPtrInput
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringPtrInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags ClickhouseTagArrayInput
	// The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
	TechEmails ClickhouseTechEmailArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (ClickhouseState) ElementType() reflect.Type {
	return reflect.TypeOf((*clickhouseState)(nil)).Elem()
}

type clickhouseArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace *string `pulumi:"additionalDiskSpace"`
	// Values provided by the ClickHouse server.
	Clickhouse *ClickhouseClickhouse `pulumi:"clickhouse"`
	// Clickhouse user configurable settings
	ClickhouseUserConfig *ClickhouseClickhouseUserConfig `pulumi:"clickhouseUserConfig"`
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace *string `pulumi:"diskSpace"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan string `pulumi:"plan"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Integrations with other services. Service integrations are only applied at service creation.
	ServiceIntegrations []ClickhouseServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []ClickhouseTag `pulumi:"tags"`
	// The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
	TechEmails []ClickhouseTechEmail `pulumi:"techEmails"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a Clickhouse resource.
type ClickhouseArgs struct {
	// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	AdditionalDiskSpace pulumi.StringPtrInput
	// Values provided by the ClickHouse server.
	Clickhouse ClickhouseClickhousePtrInput
	// Clickhouse user configurable settings
	ClickhouseUserConfig ClickhouseClickhouseUserConfigPtrInput
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
	//
	// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
	DiskSpace pulumi.StringPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Integrations with other services. Service integrations are only applied at service creation.
	ServiceIntegrations ClickhouseServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags ClickhouseTagArrayInput
	// The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
	TechEmails ClickhouseTechEmailArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (ClickhouseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clickhouseArgs)(nil)).Elem()
}

type ClickhouseInput interface {
	pulumi.Input

	ToClickhouseOutput() ClickhouseOutput
	ToClickhouseOutputWithContext(ctx context.Context) ClickhouseOutput
}

func (*Clickhouse) ElementType() reflect.Type {
	return reflect.TypeOf((**Clickhouse)(nil)).Elem()
}

func (i *Clickhouse) ToClickhouseOutput() ClickhouseOutput {
	return i.ToClickhouseOutputWithContext(context.Background())
}

func (i *Clickhouse) ToClickhouseOutputWithContext(ctx context.Context) ClickhouseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickhouseOutput)
}

// ClickhouseArrayInput is an input type that accepts ClickhouseArray and ClickhouseArrayOutput values.
// You can construct a concrete instance of `ClickhouseArrayInput` via:
//
//	ClickhouseArray{ ClickhouseArgs{...} }
type ClickhouseArrayInput interface {
	pulumi.Input

	ToClickhouseArrayOutput() ClickhouseArrayOutput
	ToClickhouseArrayOutputWithContext(context.Context) ClickhouseArrayOutput
}

type ClickhouseArray []ClickhouseInput

func (ClickhouseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clickhouse)(nil)).Elem()
}

func (i ClickhouseArray) ToClickhouseArrayOutput() ClickhouseArrayOutput {
	return i.ToClickhouseArrayOutputWithContext(context.Background())
}

func (i ClickhouseArray) ToClickhouseArrayOutputWithContext(ctx context.Context) ClickhouseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickhouseArrayOutput)
}

// ClickhouseMapInput is an input type that accepts ClickhouseMap and ClickhouseMapOutput values.
// You can construct a concrete instance of `ClickhouseMapInput` via:
//
//	ClickhouseMap{ "key": ClickhouseArgs{...} }
type ClickhouseMapInput interface {
	pulumi.Input

	ToClickhouseMapOutput() ClickhouseMapOutput
	ToClickhouseMapOutputWithContext(context.Context) ClickhouseMapOutput
}

type ClickhouseMap map[string]ClickhouseInput

func (ClickhouseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clickhouse)(nil)).Elem()
}

func (i ClickhouseMap) ToClickhouseMapOutput() ClickhouseMapOutput {
	return i.ToClickhouseMapOutputWithContext(context.Background())
}

func (i ClickhouseMap) ToClickhouseMapOutputWithContext(ctx context.Context) ClickhouseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickhouseMapOutput)
}

type ClickhouseOutput struct{ *pulumi.OutputState }

func (ClickhouseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clickhouse)(nil)).Elem()
}

func (o ClickhouseOutput) ToClickhouseOutput() ClickhouseOutput {
	return o
}

func (o ClickhouseOutput) ToClickhouseOutputWithContext(ctx context.Context) ClickhouseOutput {
	return o
}

// Additional disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
func (o ClickhouseOutput) AdditionalDiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringPtrOutput { return v.AdditionalDiskSpace }).(pulumi.StringPtrOutput)
}

// Values provided by the ClickHouse server.
func (o ClickhouseOutput) Clickhouse() ClickhouseClickhouseOutput {
	return o.ApplyT(func(v *Clickhouse) ClickhouseClickhouseOutput { return v.Clickhouse }).(ClickhouseClickhouseOutput)
}

// Clickhouse user configurable settings
func (o ClickhouseOutput) ClickhouseUserConfig() ClickhouseClickhouseUserConfigPtrOutput {
	return o.ApplyT(func(v *Clickhouse) ClickhouseClickhouseUserConfigPtrOutput { return v.ClickhouseUserConfig }).(ClickhouseClickhouseUserConfigPtrOutput)
}

// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
func (o ClickhouseOutput) CloudName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringPtrOutput { return v.CloudName }).(pulumi.StringPtrOutput)
}

// Service component information objects
func (o ClickhouseOutput) Components() ClickhouseComponentArrayOutput {
	return o.ApplyT(func(v *Clickhouse) ClickhouseComponentArrayOutput { return v.Components }).(ClickhouseComponentArrayOutput)
}

// Service disk space. Possible values depend on the service type, the cloud provider and the project. Therefore, reducing will result in the service rebalancing.
//
// Deprecated: This will be removed in v5.0.0. Please use `additionalDiskSpace` to specify the space to be added to the default `diskSpace` defined by the plan.
func (o ClickhouseOutput) DiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringPtrOutput { return v.DiskSpace }).(pulumi.StringPtrOutput)
}

// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
func (o ClickhouseOutput) DiskSpaceCap() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.DiskSpaceCap }).(pulumi.StringOutput)
}

// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
func (o ClickhouseOutput) DiskSpaceDefault() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.DiskSpaceDefault }).(pulumi.StringOutput)
}

// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
func (o ClickhouseOutput) DiskSpaceStep() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.DiskSpaceStep }).(pulumi.StringOutput)
}

// Disk space that service is currently using
func (o ClickhouseOutput) DiskSpaceUsed() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.DiskSpaceUsed }).(pulumi.StringOutput)
}

// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
func (o ClickhouseOutput) MaintenanceWindowDow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringPtrOutput { return v.MaintenanceWindowDow }).(pulumi.StringPtrOutput)
}

// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
func (o ClickhouseOutput) MaintenanceWindowTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringPtrOutput { return v.MaintenanceWindowTime }).(pulumi.StringPtrOutput)
}

// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
func (o ClickhouseOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o ClickhouseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
func (o ClickhouseOutput) ProjectVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringPtrOutput { return v.ProjectVpcId }).(pulumi.StringPtrOutput)
}

// The hostname of the service.
func (o ClickhouseOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.ServiceHost }).(pulumi.StringOutput)
}

// Integrations with other services. Service integrations are only applied at service creation.
func (o ClickhouseOutput) ServiceIntegrations() ClickhouseServiceIntegrationArrayOutput {
	return o.ApplyT(func(v *Clickhouse) ClickhouseServiceIntegrationArrayOutput { return v.ServiceIntegrations }).(ClickhouseServiceIntegrationArrayOutput)
}

// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
func (o ClickhouseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Password used for connecting to the service, if applicable
func (o ClickhouseOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// The port of the service
func (o ClickhouseOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.IntOutput { return v.ServicePort }).(pulumi.IntOutput)
}

// Aiven internal service type code
func (o ClickhouseOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
func (o ClickhouseOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.ServiceUri }).(pulumi.StringOutput)
}

// Username used for connecting to the service, if applicable
func (o ClickhouseOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.ServiceUsername }).(pulumi.StringOutput)
}

// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
func (o ClickhouseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
func (o ClickhouseOutput) StaticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.StringArrayOutput { return v.StaticIps }).(pulumi.StringArrayOutput)
}

// Tags are key-value pairs that allow you to categorize services.
func (o ClickhouseOutput) Tags() ClickhouseTagArrayOutput {
	return o.ApplyT(func(v *Clickhouse) ClickhouseTagArrayOutput { return v.Tags }).(ClickhouseTagArrayOutput)
}

// The email addresses for [service contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this service. You can also set email contacts at the project level.
func (o ClickhouseOutput) TechEmails() ClickhouseTechEmailArrayOutput {
	return o.ApplyT(func(v *Clickhouse) ClickhouseTechEmailArrayOutput { return v.TechEmails }).(ClickhouseTechEmailArrayOutput)
}

// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
func (o ClickhouseOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Clickhouse) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type ClickhouseArrayOutput struct{ *pulumi.OutputState }

func (ClickhouseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clickhouse)(nil)).Elem()
}

func (o ClickhouseArrayOutput) ToClickhouseArrayOutput() ClickhouseArrayOutput {
	return o
}

func (o ClickhouseArrayOutput) ToClickhouseArrayOutputWithContext(ctx context.Context) ClickhouseArrayOutput {
	return o
}

func (o ClickhouseArrayOutput) Index(i pulumi.IntInput) ClickhouseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Clickhouse {
		return vs[0].([]*Clickhouse)[vs[1].(int)]
	}).(ClickhouseOutput)
}

type ClickhouseMapOutput struct{ *pulumi.OutputState }

func (ClickhouseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clickhouse)(nil)).Elem()
}

func (o ClickhouseMapOutput) ToClickhouseMapOutput() ClickhouseMapOutput {
	return o
}

func (o ClickhouseMapOutput) ToClickhouseMapOutputWithContext(ctx context.Context) ClickhouseMapOutput {
	return o
}

func (o ClickhouseMapOutput) MapIndex(k pulumi.StringInput) ClickhouseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Clickhouse {
		return vs[0].(map[string]*Clickhouse)[vs[1].(string)]
	}).(ClickhouseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickhouseInput)(nil)).Elem(), &Clickhouse{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickhouseArrayInput)(nil)).Elem(), ClickhouseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickhouseMapInput)(nil)).Elem(), ClickhouseMap{})
	pulumi.RegisterOutputType(ClickhouseOutput{})
	pulumi.RegisterOutputType(ClickhouseArrayOutput{})
	pulumi.RegisterOutputType(ClickhouseMapOutput{})
}
