// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # MirrorMaker 2 Replication Flow Resource
//
// The MirrorMaker 2 Replication Flow resource allows the creation and management of MirrorMaker 2
// Replication Flows on Aiven Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewMirrorMakerReplicationFlow(ctx, "f1", &aiven.MirrorMakerReplicationFlowArgs{
// 			Project:       pulumi.Any(aiven_project.Kafka - mm - project1.Project),
// 			ServiceName:   pulumi.Any(aiven_service.Mm.Service_name),
// 			SourceCluster: pulumi.Any(aiven_service.Source.Service_name),
// 			TargetCluster: pulumi.Any(aiven_service.Target.Service_name),
// 			Enable:        pulumi.Bool(true),
// 			Topics: pulumi.StringArray{
// 				pulumi.String(".*"),
// 			},
// 			TopicsBlacklists: pulumi.StringArray{
// 				pulumi.String(".*[\\-\\.]internal"),
// 				pulumi.String(".*\\.replica"),
// 				pulumi.String("__.*"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type MirrorMakerReplicationFlow struct {
	pulumi.CustomResourceState

	// Emit heartbeats enabled
	EmitHeartbeatsEnabled pulumi.BoolPtrOutput `pulumi:"emitHeartbeatsEnabled"`
	// enable of disable replication flows for a MirrorMaker service
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// and `serviceName` - (Required) define the project and service the Kafka MirrorMaker Replication
	// Flow belongs to. They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringOutput `pulumi:"project"`
	// Replication policy class
	ReplicationPolicyClass pulumi.StringPtrOutput `pulumi:"replicationPolicyClass"`
	// Service to link the kafka topic to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// is a source cluster alias.
	SourceCluster pulumi.StringOutput `pulumi:"sourceCluster"`
	// Sync consumer group offsets
	SyncGroupOffsetsEnabled pulumi.BoolPtrOutput `pulumi:"syncGroupOffsetsEnabled"`
	// Frequency of consumer group offset sync
	SyncGroupOffsetsIntervalSeconds pulumi.IntPtrOutput `pulumi:"syncGroupOffsetsIntervalSeconds"`
	// is a target cluster alias.
	TargetCluster pulumi.StringOutput `pulumi:"targetCluster"`
	// is a list of topics and/or regular expressions to replicate.
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
	// is a list of topics and/or regular expressions to not replicate.
	TopicsBlacklists pulumi.StringArrayOutput `pulumi:"topicsBlacklists"`
}

// NewMirrorMakerReplicationFlow registers a new resource with the given unique name, arguments, and options.
func NewMirrorMakerReplicationFlow(ctx *pulumi.Context,
	name string, args *MirrorMakerReplicationFlowArgs, opts ...pulumi.ResourceOption) (*MirrorMakerReplicationFlow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.SourceCluster == nil {
		return nil, errors.New("invalid value for required argument 'SourceCluster'")
	}
	if args.TargetCluster == nil {
		return nil, errors.New("invalid value for required argument 'TargetCluster'")
	}
	var resource MirrorMakerReplicationFlow
	err := ctx.RegisterResource("aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMirrorMakerReplicationFlow gets an existing MirrorMakerReplicationFlow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMirrorMakerReplicationFlow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MirrorMakerReplicationFlowState, opts ...pulumi.ResourceOption) (*MirrorMakerReplicationFlow, error) {
	var resource MirrorMakerReplicationFlow
	err := ctx.ReadResource("aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MirrorMakerReplicationFlow resources.
type mirrorMakerReplicationFlowState struct {
	// Emit heartbeats enabled
	EmitHeartbeatsEnabled *bool `pulumi:"emitHeartbeatsEnabled"`
	// enable of disable replication flows for a MirrorMaker service
	Enable *bool `pulumi:"enable"`
	// and `serviceName` - (Required) define the project and service the Kafka MirrorMaker Replication
	// Flow belongs to. They should be defined using reference as shown above to set up dependencies correctly.
	Project *string `pulumi:"project"`
	// Replication policy class
	ReplicationPolicyClass *string `pulumi:"replicationPolicyClass"`
	// Service to link the kafka topic to
	ServiceName *string `pulumi:"serviceName"`
	// is a source cluster alias.
	SourceCluster *string `pulumi:"sourceCluster"`
	// Sync consumer group offsets
	SyncGroupOffsetsEnabled *bool `pulumi:"syncGroupOffsetsEnabled"`
	// Frequency of consumer group offset sync
	SyncGroupOffsetsIntervalSeconds *int `pulumi:"syncGroupOffsetsIntervalSeconds"`
	// is a target cluster alias.
	TargetCluster *string `pulumi:"targetCluster"`
	// is a list of topics and/or regular expressions to replicate.
	Topics []string `pulumi:"topics"`
	// is a list of topics and/or regular expressions to not replicate.
	TopicsBlacklists []string `pulumi:"topicsBlacklists"`
}

type MirrorMakerReplicationFlowState struct {
	// Emit heartbeats enabled
	EmitHeartbeatsEnabled pulumi.BoolPtrInput
	// enable of disable replication flows for a MirrorMaker service
	Enable pulumi.BoolPtrInput
	// and `serviceName` - (Required) define the project and service the Kafka MirrorMaker Replication
	// Flow belongs to. They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringPtrInput
	// Replication policy class
	ReplicationPolicyClass pulumi.StringPtrInput
	// Service to link the kafka topic to
	ServiceName pulumi.StringPtrInput
	// is a source cluster alias.
	SourceCluster pulumi.StringPtrInput
	// Sync consumer group offsets
	SyncGroupOffsetsEnabled pulumi.BoolPtrInput
	// Frequency of consumer group offset sync
	SyncGroupOffsetsIntervalSeconds pulumi.IntPtrInput
	// is a target cluster alias.
	TargetCluster pulumi.StringPtrInput
	// is a list of topics and/or regular expressions to replicate.
	Topics pulumi.StringArrayInput
	// is a list of topics and/or regular expressions to not replicate.
	TopicsBlacklists pulumi.StringArrayInput
}

func (MirrorMakerReplicationFlowState) ElementType() reflect.Type {
	return reflect.TypeOf((*mirrorMakerReplicationFlowState)(nil)).Elem()
}

type mirrorMakerReplicationFlowArgs struct {
	// Emit heartbeats enabled
	EmitHeartbeatsEnabled *bool `pulumi:"emitHeartbeatsEnabled"`
	// enable of disable replication flows for a MirrorMaker service
	Enable bool `pulumi:"enable"`
	// and `serviceName` - (Required) define the project and service the Kafka MirrorMaker Replication
	// Flow belongs to. They should be defined using reference as shown above to set up dependencies correctly.
	Project string `pulumi:"project"`
	// Replication policy class
	ReplicationPolicyClass *string `pulumi:"replicationPolicyClass"`
	// Service to link the kafka topic to
	ServiceName string `pulumi:"serviceName"`
	// is a source cluster alias.
	SourceCluster string `pulumi:"sourceCluster"`
	// Sync consumer group offsets
	SyncGroupOffsetsEnabled *bool `pulumi:"syncGroupOffsetsEnabled"`
	// Frequency of consumer group offset sync
	SyncGroupOffsetsIntervalSeconds *int `pulumi:"syncGroupOffsetsIntervalSeconds"`
	// is a target cluster alias.
	TargetCluster string `pulumi:"targetCluster"`
	// is a list of topics and/or regular expressions to replicate.
	Topics []string `pulumi:"topics"`
	// is a list of topics and/or regular expressions to not replicate.
	TopicsBlacklists []string `pulumi:"topicsBlacklists"`
}

// The set of arguments for constructing a MirrorMakerReplicationFlow resource.
type MirrorMakerReplicationFlowArgs struct {
	// Emit heartbeats enabled
	EmitHeartbeatsEnabled pulumi.BoolPtrInput
	// enable of disable replication flows for a MirrorMaker service
	Enable pulumi.BoolInput
	// and `serviceName` - (Required) define the project and service the Kafka MirrorMaker Replication
	// Flow belongs to. They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringInput
	// Replication policy class
	ReplicationPolicyClass pulumi.StringPtrInput
	// Service to link the kafka topic to
	ServiceName pulumi.StringInput
	// is a source cluster alias.
	SourceCluster pulumi.StringInput
	// Sync consumer group offsets
	SyncGroupOffsetsEnabled pulumi.BoolPtrInput
	// Frequency of consumer group offset sync
	SyncGroupOffsetsIntervalSeconds pulumi.IntPtrInput
	// is a target cluster alias.
	TargetCluster pulumi.StringInput
	// is a list of topics and/or regular expressions to replicate.
	Topics pulumi.StringArrayInput
	// is a list of topics and/or regular expressions to not replicate.
	TopicsBlacklists pulumi.StringArrayInput
}

func (MirrorMakerReplicationFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mirrorMakerReplicationFlowArgs)(nil)).Elem()
}

type MirrorMakerReplicationFlowInput interface {
	pulumi.Input

	ToMirrorMakerReplicationFlowOutput() MirrorMakerReplicationFlowOutput
	ToMirrorMakerReplicationFlowOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowOutput
}

func (*MirrorMakerReplicationFlow) ElementType() reflect.Type {
	return reflect.TypeOf((*MirrorMakerReplicationFlow)(nil))
}

func (i *MirrorMakerReplicationFlow) ToMirrorMakerReplicationFlowOutput() MirrorMakerReplicationFlowOutput {
	return i.ToMirrorMakerReplicationFlowOutputWithContext(context.Background())
}

func (i *MirrorMakerReplicationFlow) ToMirrorMakerReplicationFlowOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirrorMakerReplicationFlowOutput)
}

func (i *MirrorMakerReplicationFlow) ToMirrorMakerReplicationFlowPtrOutput() MirrorMakerReplicationFlowPtrOutput {
	return i.ToMirrorMakerReplicationFlowPtrOutputWithContext(context.Background())
}

func (i *MirrorMakerReplicationFlow) ToMirrorMakerReplicationFlowPtrOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirrorMakerReplicationFlowPtrOutput)
}

type MirrorMakerReplicationFlowPtrInput interface {
	pulumi.Input

	ToMirrorMakerReplicationFlowPtrOutput() MirrorMakerReplicationFlowPtrOutput
	ToMirrorMakerReplicationFlowPtrOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowPtrOutput
}

type mirrorMakerReplicationFlowPtrType MirrorMakerReplicationFlowArgs

func (*mirrorMakerReplicationFlowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MirrorMakerReplicationFlow)(nil))
}

func (i *mirrorMakerReplicationFlowPtrType) ToMirrorMakerReplicationFlowPtrOutput() MirrorMakerReplicationFlowPtrOutput {
	return i.ToMirrorMakerReplicationFlowPtrOutputWithContext(context.Background())
}

func (i *mirrorMakerReplicationFlowPtrType) ToMirrorMakerReplicationFlowPtrOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirrorMakerReplicationFlowPtrOutput)
}

// MirrorMakerReplicationFlowArrayInput is an input type that accepts MirrorMakerReplicationFlowArray and MirrorMakerReplicationFlowArrayOutput values.
// You can construct a concrete instance of `MirrorMakerReplicationFlowArrayInput` via:
//
//          MirrorMakerReplicationFlowArray{ MirrorMakerReplicationFlowArgs{...} }
type MirrorMakerReplicationFlowArrayInput interface {
	pulumi.Input

	ToMirrorMakerReplicationFlowArrayOutput() MirrorMakerReplicationFlowArrayOutput
	ToMirrorMakerReplicationFlowArrayOutputWithContext(context.Context) MirrorMakerReplicationFlowArrayOutput
}

type MirrorMakerReplicationFlowArray []MirrorMakerReplicationFlowInput

func (MirrorMakerReplicationFlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirrorMakerReplicationFlow)(nil)).Elem()
}

func (i MirrorMakerReplicationFlowArray) ToMirrorMakerReplicationFlowArrayOutput() MirrorMakerReplicationFlowArrayOutput {
	return i.ToMirrorMakerReplicationFlowArrayOutputWithContext(context.Background())
}

func (i MirrorMakerReplicationFlowArray) ToMirrorMakerReplicationFlowArrayOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirrorMakerReplicationFlowArrayOutput)
}

// MirrorMakerReplicationFlowMapInput is an input type that accepts MirrorMakerReplicationFlowMap and MirrorMakerReplicationFlowMapOutput values.
// You can construct a concrete instance of `MirrorMakerReplicationFlowMapInput` via:
//
//          MirrorMakerReplicationFlowMap{ "key": MirrorMakerReplicationFlowArgs{...} }
type MirrorMakerReplicationFlowMapInput interface {
	pulumi.Input

	ToMirrorMakerReplicationFlowMapOutput() MirrorMakerReplicationFlowMapOutput
	ToMirrorMakerReplicationFlowMapOutputWithContext(context.Context) MirrorMakerReplicationFlowMapOutput
}

type MirrorMakerReplicationFlowMap map[string]MirrorMakerReplicationFlowInput

func (MirrorMakerReplicationFlowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirrorMakerReplicationFlow)(nil)).Elem()
}

func (i MirrorMakerReplicationFlowMap) ToMirrorMakerReplicationFlowMapOutput() MirrorMakerReplicationFlowMapOutput {
	return i.ToMirrorMakerReplicationFlowMapOutputWithContext(context.Background())
}

func (i MirrorMakerReplicationFlowMap) ToMirrorMakerReplicationFlowMapOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirrorMakerReplicationFlowMapOutput)
}

type MirrorMakerReplicationFlowOutput struct{ *pulumi.OutputState }

func (MirrorMakerReplicationFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MirrorMakerReplicationFlow)(nil))
}

func (o MirrorMakerReplicationFlowOutput) ToMirrorMakerReplicationFlowOutput() MirrorMakerReplicationFlowOutput {
	return o
}

func (o MirrorMakerReplicationFlowOutput) ToMirrorMakerReplicationFlowOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowOutput {
	return o
}

func (o MirrorMakerReplicationFlowOutput) ToMirrorMakerReplicationFlowPtrOutput() MirrorMakerReplicationFlowPtrOutput {
	return o.ToMirrorMakerReplicationFlowPtrOutputWithContext(context.Background())
}

func (o MirrorMakerReplicationFlowOutput) ToMirrorMakerReplicationFlowPtrOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MirrorMakerReplicationFlow) *MirrorMakerReplicationFlow {
		return &v
	}).(MirrorMakerReplicationFlowPtrOutput)
}

type MirrorMakerReplicationFlowPtrOutput struct{ *pulumi.OutputState }

func (MirrorMakerReplicationFlowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MirrorMakerReplicationFlow)(nil))
}

func (o MirrorMakerReplicationFlowPtrOutput) ToMirrorMakerReplicationFlowPtrOutput() MirrorMakerReplicationFlowPtrOutput {
	return o
}

func (o MirrorMakerReplicationFlowPtrOutput) ToMirrorMakerReplicationFlowPtrOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowPtrOutput {
	return o
}

func (o MirrorMakerReplicationFlowPtrOutput) Elem() MirrorMakerReplicationFlowOutput {
	return o.ApplyT(func(v *MirrorMakerReplicationFlow) MirrorMakerReplicationFlow {
		if v != nil {
			return *v
		}
		var ret MirrorMakerReplicationFlow
		return ret
	}).(MirrorMakerReplicationFlowOutput)
}

type MirrorMakerReplicationFlowArrayOutput struct{ *pulumi.OutputState }

func (MirrorMakerReplicationFlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MirrorMakerReplicationFlow)(nil))
}

func (o MirrorMakerReplicationFlowArrayOutput) ToMirrorMakerReplicationFlowArrayOutput() MirrorMakerReplicationFlowArrayOutput {
	return o
}

func (o MirrorMakerReplicationFlowArrayOutput) ToMirrorMakerReplicationFlowArrayOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowArrayOutput {
	return o
}

func (o MirrorMakerReplicationFlowArrayOutput) Index(i pulumi.IntInput) MirrorMakerReplicationFlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MirrorMakerReplicationFlow {
		return vs[0].([]MirrorMakerReplicationFlow)[vs[1].(int)]
	}).(MirrorMakerReplicationFlowOutput)
}

type MirrorMakerReplicationFlowMapOutput struct{ *pulumi.OutputState }

func (MirrorMakerReplicationFlowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MirrorMakerReplicationFlow)(nil))
}

func (o MirrorMakerReplicationFlowMapOutput) ToMirrorMakerReplicationFlowMapOutput() MirrorMakerReplicationFlowMapOutput {
	return o
}

func (o MirrorMakerReplicationFlowMapOutput) ToMirrorMakerReplicationFlowMapOutputWithContext(ctx context.Context) MirrorMakerReplicationFlowMapOutput {
	return o
}

func (o MirrorMakerReplicationFlowMapOutput) MapIndex(k pulumi.StringInput) MirrorMakerReplicationFlowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MirrorMakerReplicationFlow {
		return vs[0].(map[string]MirrorMakerReplicationFlow)[vs[1].(string)]
	}).(MirrorMakerReplicationFlowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MirrorMakerReplicationFlowInput)(nil)).Elem(), &MirrorMakerReplicationFlow{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirrorMakerReplicationFlowPtrInput)(nil)).Elem(), &MirrorMakerReplicationFlow{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirrorMakerReplicationFlowArrayInput)(nil)).Elem(), MirrorMakerReplicationFlowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirrorMakerReplicationFlowMapInput)(nil)).Elem(), MirrorMakerReplicationFlowMap{})
	pulumi.RegisterOutputType(MirrorMakerReplicationFlowOutput{})
	pulumi.RegisterOutputType(MirrorMakerReplicationFlowPtrOutput{})
	pulumi.RegisterOutputType(MirrorMakerReplicationFlowArrayOutput{})
	pulumi.RegisterOutputType(MirrorMakerReplicationFlowMapOutput{})
}
