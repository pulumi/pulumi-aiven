// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type MirrorMakerReplicationFlow struct {
	pulumi.CustomResourceState

	// Enable of disable replication flows for a service
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// Project to link the kafka topic to
	Project pulumi.StringOutput `pulumi:"project"`
	// Service to link the kafka topic to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Source cluster alias
	SourceCluster pulumi.StringOutput `pulumi:"sourceCluster"`
	// Target cluster alias
	TargetCluster pulumi.StringOutput `pulumi:"targetCluster"`
	// List of topics and/or regular expressions to replicate
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
	// List of topics and/or regular expressions to not replicate.
	TopicsBlacklists pulumi.StringArrayOutput `pulumi:"topicsBlacklists"`
}

// NewMirrorMakerReplicationFlow registers a new resource with the given unique name, arguments, and options.
func NewMirrorMakerReplicationFlow(ctx *pulumi.Context,
	name string, args *MirrorMakerReplicationFlowArgs, opts ...pulumi.ResourceOption) (*MirrorMakerReplicationFlow, error) {
	if args == nil || args.Enable == nil {
		return nil, errors.New("missing required argument 'Enable'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.SourceCluster == nil {
		return nil, errors.New("missing required argument 'SourceCluster'")
	}
	if args == nil || args.TargetCluster == nil {
		return nil, errors.New("missing required argument 'TargetCluster'")
	}
	if args == nil {
		args = &MirrorMakerReplicationFlowArgs{}
	}
	var resource MirrorMakerReplicationFlow
	err := ctx.RegisterResource("aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMirrorMakerReplicationFlow gets an existing MirrorMakerReplicationFlow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMirrorMakerReplicationFlow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MirrorMakerReplicationFlowState, opts ...pulumi.ResourceOption) (*MirrorMakerReplicationFlow, error) {
	var resource MirrorMakerReplicationFlow
	err := ctx.ReadResource("aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MirrorMakerReplicationFlow resources.
type mirrorMakerReplicationFlowState struct {
	// Enable of disable replication flows for a service
	Enable *bool `pulumi:"enable"`
	// Project to link the kafka topic to
	Project *string `pulumi:"project"`
	// Service to link the kafka topic to
	ServiceName *string `pulumi:"serviceName"`
	// Source cluster alias
	SourceCluster *string `pulumi:"sourceCluster"`
	// Target cluster alias
	TargetCluster *string `pulumi:"targetCluster"`
	// List of topics and/or regular expressions to replicate
	Topics []string `pulumi:"topics"`
	// List of topics and/or regular expressions to not replicate.
	TopicsBlacklists []string `pulumi:"topicsBlacklists"`
}

type MirrorMakerReplicationFlowState struct {
	// Enable of disable replication flows for a service
	Enable pulumi.BoolPtrInput
	// Project to link the kafka topic to
	Project pulumi.StringPtrInput
	// Service to link the kafka topic to
	ServiceName pulumi.StringPtrInput
	// Source cluster alias
	SourceCluster pulumi.StringPtrInput
	// Target cluster alias
	TargetCluster pulumi.StringPtrInput
	// List of topics and/or regular expressions to replicate
	Topics pulumi.StringArrayInput
	// List of topics and/or regular expressions to not replicate.
	TopicsBlacklists pulumi.StringArrayInput
}

func (MirrorMakerReplicationFlowState) ElementType() reflect.Type {
	return reflect.TypeOf((*mirrorMakerReplicationFlowState)(nil)).Elem()
}

type mirrorMakerReplicationFlowArgs struct {
	// Enable of disable replication flows for a service
	Enable bool `pulumi:"enable"`
	// Project to link the kafka topic to
	Project string `pulumi:"project"`
	// Service to link the kafka topic to
	ServiceName string `pulumi:"serviceName"`
	// Source cluster alias
	SourceCluster string `pulumi:"sourceCluster"`
	// Target cluster alias
	TargetCluster string `pulumi:"targetCluster"`
	// List of topics and/or regular expressions to replicate
	Topics []string `pulumi:"topics"`
	// List of topics and/or regular expressions to not replicate.
	TopicsBlacklists []string `pulumi:"topicsBlacklists"`
}

// The set of arguments for constructing a MirrorMakerReplicationFlow resource.
type MirrorMakerReplicationFlowArgs struct {
	// Enable of disable replication flows for a service
	Enable pulumi.BoolInput
	// Project to link the kafka topic to
	Project pulumi.StringInput
	// Service to link the kafka topic to
	ServiceName pulumi.StringInput
	// Source cluster alias
	SourceCluster pulumi.StringInput
	// Target cluster alias
	TargetCluster pulumi.StringInput
	// List of topics and/or regular expressions to replicate
	Topics pulumi.StringArrayInput
	// List of topics and/or regular expressions to not replicate.
	TopicsBlacklists pulumi.StringArrayInput
}

func (MirrorMakerReplicationFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mirrorMakerReplicationFlowArgs)(nil)).Elem()
}
