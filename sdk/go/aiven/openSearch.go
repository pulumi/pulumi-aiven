// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Opensearch Resource
//
// The Opensearch resource allows the creation and management of Aiven Opensearch services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewOpenSearch(ctx, "os1", &aiven.OpenSearchArgs{
// 			Project:               pulumi.Any(data.Aiven_project.Pr1.Project),
// 			CloudName:             pulumi.String("google-europe-west1"),
// 			Plan:                  pulumi.String("startup-4"),
// 			ServiceName:           pulumi.String("my-os1"),
// 			MaintenanceWindowDow:  pulumi.String("monday"),
// 			MaintenanceWindowTime: pulumi.String("10:00:00"),
// 			OpensearchUserConfig: &aiven.OpenSearchOpensearchUserConfigArgs{
// 				OpensearchVersion: pulumi.String("1"),
// 				OpensearchDashboards: &aiven.OpenSearchOpensearchUserConfigOpensearchDashboardsArgs{
// 					Enabled:                            pulumi.String("true"),
// 					OpensearchDashboardsRequestTimeout: pulumi.Float64(30000),
// 				},
// 				PublicAccess: &aiven.OpenSearchOpensearchUserConfigPublicAccessArgs{
// 					Opensearch:           pulumi.String("true"),
// 					OpensearchDashboards: pulumi.String("true"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type OpenSearch struct {
	pulumi.CustomResourceState

	// defines where the cloud provider and region where the service is hosted in. This can be
	// changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for
	// the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
	// documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components OpenSearchComponentArrayOutput `pulumi:"components"`
	// day of week when maintenance operations should be performed. On monday, tuesday,
	// wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed. UTC time in HH:mm:
	// ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// Allow clients to connect to opensearch from the public internet for service nodes
	// that are in a project VPC or another type of private network.
	Opensearch OpenSearchOpensearchOutput `pulumi:"opensearch"`
	// defines Opensearch specific additional configuration options. The following
	// configuration options available:
	OpensearchUserConfig OpenSearchOpensearchUserConfigPtrOutput `pulumi:"opensearchUserConfig"`
	// defines what kind of computing resources are allocated for the service. It can be changed after
	// creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient
	// amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The
	// basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
	// but naming is based on memory). The available options can be seem from
	// the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency between the project
	// and the service, refer to the project as shown in the above example. Project cannot be changed later without
	// destroying and re-creating the service.
	Project pulumi.StringOutput `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value is not set the
	// service is not run inside a VPC. When set, the value should be given as a reference as shown above to set up
	// dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely
	// moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// Opensearch hostname.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations OpenSearchServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed later without
	// destroying and re-creating the service so name should be picked based on intended service usage rather than current
	// attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the Opensearch service, if applicable.
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// Opensearch port.
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the Opensearch service.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the Opensearch service, if applicable.
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state.
	State pulumi.StringOutput `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to set this to `true`
	// for all production services to prevent unintentional service deletion. This does not shield against deleting databases
	// or topics but for services with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewOpenSearch registers a new resource with the given unique name, arguments, and options.
func NewOpenSearch(ctx *pulumi.Context,
	name string, args *OpenSearchArgs, opts ...pulumi.ResourceOption) (*OpenSearch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource OpenSearch
	err := ctx.RegisterResource("aiven:index/openSearch:OpenSearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenSearch gets an existing OpenSearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenSearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenSearchState, opts ...pulumi.ResourceOption) (*OpenSearch, error) {
	var resource OpenSearch
	err := ctx.ReadResource("aiven:index/openSearch:OpenSearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenSearch resources.
type openSearchState struct {
	// defines where the cloud provider and region where the service is hosted in. This can be
	// changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for
	// the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
	// documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []OpenSearchComponent `pulumi:"components"`
	// day of week when maintenance operations should be performed. On monday, tuesday,
	// wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed. UTC time in HH:mm:
	// ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Allow clients to connect to opensearch from the public internet for service nodes
	// that are in a project VPC or another type of private network.
	Opensearch *OpenSearchOpensearch `pulumi:"opensearch"`
	// defines Opensearch specific additional configuration options. The following
	// configuration options available:
	OpensearchUserConfig *OpenSearchOpensearchUserConfig `pulumi:"opensearchUserConfig"`
	// defines what kind of computing resources are allocated for the service. It can be changed after
	// creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient
	// amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The
	// basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
	// but naming is based on memory). The available options can be seem from
	// the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency between the project
	// and the service, refer to the project as shown in the above example. Project cannot be changed later without
	// destroying and re-creating the service.
	Project *string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value is not set the
	// service is not run inside a VPC. When set, the value should be given as a reference as shown above to set up
	// dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely
	// moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Opensearch hostname.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []OpenSearchServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed later without
	// destroying and re-creating the service so name should be picked based on intended service usage rather than current
	// attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the Opensearch service, if applicable.
	ServicePassword *string `pulumi:"servicePassword"`
	// Opensearch port.
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the Opensearch service.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the Opensearch service, if applicable.
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state.
	State *string `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to set this to `true`
	// for all production services to prevent unintentional service deletion. This does not shield against deleting databases
	// or topics but for services with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type OpenSearchState struct {
	// defines where the cloud provider and region where the service is hosted in. This can be
	// changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for
	// the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
	// documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components OpenSearchComponentArrayInput
	// day of week when maintenance operations should be performed. On monday, tuesday,
	// wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed. UTC time in HH:mm:
	// ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Allow clients to connect to opensearch from the public internet for service nodes
	// that are in a project VPC or another type of private network.
	Opensearch OpenSearchOpensearchPtrInput
	// defines Opensearch specific additional configuration options. The following
	// configuration options available:
	OpensearchUserConfig OpenSearchOpensearchUserConfigPtrInput
	// defines what kind of computing resources are allocated for the service. It can be changed after
	// creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient
	// amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The
	// basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
	// but naming is based on memory). The available options can be seem from
	// the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency between the project
	// and the service, refer to the project as shown in the above example. Project cannot be changed later without
	// destroying and re-creating the service.
	Project pulumi.StringPtrInput
	// optionally specifies the VPC the service should run in. If the value is not set the
	// service is not run inside a VPC. When set, the value should be given as a reference as shown above to set up
	// dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely
	// moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Opensearch hostname.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations OpenSearchServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed later without
	// destroying and re-creating the service so name should be picked based on intended service usage rather than current
	// attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the Opensearch service, if applicable.
	ServicePassword pulumi.StringPtrInput
	// Opensearch port.
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the Opensearch service.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the Opensearch service, if applicable.
	ServiceUsername pulumi.StringPtrInput
	// Service state.
	State pulumi.StringPtrInput
	// prevents the service from being deleted. It is recommended to set this to `true`
	// for all production services to prevent unintentional service deletion. This does not shield against deleting databases
	// or topics but for services with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (OpenSearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*openSearchState)(nil)).Elem()
}

type openSearchArgs struct {
	// defines where the cloud provider and region where the service is hosted in. This can be
	// changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for
	// the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
	// documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// day of week when maintenance operations should be performed. On monday, tuesday,
	// wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed. UTC time in HH:mm:
	// ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Allow clients to connect to opensearch from the public internet for service nodes
	// that are in a project VPC or another type of private network.
	Opensearch *OpenSearchOpensearch `pulumi:"opensearch"`
	// defines Opensearch specific additional configuration options. The following
	// configuration options available:
	OpensearchUserConfig *OpenSearchOpensearchUserConfig `pulumi:"opensearchUserConfig"`
	// defines what kind of computing resources are allocated for the service. It can be changed after
	// creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient
	// amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The
	// basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
	// but naming is based on memory). The available options can be seem from
	// the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency between the project
	// and the service, refer to the project as shown in the above example. Project cannot be changed later without
	// destroying and re-creating the service.
	Project string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value is not set the
	// service is not run inside a VPC. When set, the value should be given as a reference as shown above to set up
	// dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely
	// moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []OpenSearchServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed later without
	// destroying and re-creating the service so name should be picked based on intended service usage rather than current
	// attributes.
	ServiceName string `pulumi:"serviceName"`
	// prevents the service from being deleted. It is recommended to set this to `true`
	// for all production services to prevent unintentional service deletion. This does not shield against deleting databases
	// or topics but for services with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a OpenSearch resource.
type OpenSearchArgs struct {
	// defines where the cloud provider and region where the service is hosted in. This can be
	// changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for
	// the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are
	// documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// day of week when maintenance operations should be performed. On monday, tuesday,
	// wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed. UTC time in HH:mm:
	// ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Allow clients to connect to opensearch from the public internet for service nodes
	// that are in a project VPC or another type of private network.
	Opensearch OpenSearchOpensearchPtrInput
	// defines Opensearch specific additional configuration options. The following
	// configuration options available:
	OpensearchUserConfig OpenSearchOpensearchUserConfigPtrInput
	// defines what kind of computing resources are allocated for the service. It can be changed after
	// creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient
	// amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The
	// basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies
	// but naming is based on memory). The available options can be seem from
	// the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency between the project
	// and the service, refer to the project as shown in the above example. Project cannot be changed later without
	// destroying and re-creating the service.
	Project pulumi.StringInput
	// optionally specifies the VPC the service should run in. If the value is not set the
	// service is not run inside a VPC. When set, the value should be given as a reference as shown above to set up
	// dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely
	// moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations OpenSearchServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed later without
	// destroying and re-creating the service so name should be picked based on intended service usage rather than current
	// attributes.
	ServiceName pulumi.StringInput
	// prevents the service from being deleted. It is recommended to set this to `true`
	// for all production services to prevent unintentional service deletion. This does not shield against deleting databases
	// or topics but for services with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (OpenSearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openSearchArgs)(nil)).Elem()
}

type OpenSearchInput interface {
	pulumi.Input

	ToOpenSearchOutput() OpenSearchOutput
	ToOpenSearchOutputWithContext(ctx context.Context) OpenSearchOutput
}

func (*OpenSearch) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenSearch)(nil))
}

func (i *OpenSearch) ToOpenSearchOutput() OpenSearchOutput {
	return i.ToOpenSearchOutputWithContext(context.Background())
}

func (i *OpenSearch) ToOpenSearchOutputWithContext(ctx context.Context) OpenSearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchOutput)
}

func (i *OpenSearch) ToOpenSearchPtrOutput() OpenSearchPtrOutput {
	return i.ToOpenSearchPtrOutputWithContext(context.Background())
}

func (i *OpenSearch) ToOpenSearchPtrOutputWithContext(ctx context.Context) OpenSearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchPtrOutput)
}

type OpenSearchPtrInput interface {
	pulumi.Input

	ToOpenSearchPtrOutput() OpenSearchPtrOutput
	ToOpenSearchPtrOutputWithContext(ctx context.Context) OpenSearchPtrOutput
}

type openSearchPtrType OpenSearchArgs

func (*openSearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenSearch)(nil))
}

func (i *openSearchPtrType) ToOpenSearchPtrOutput() OpenSearchPtrOutput {
	return i.ToOpenSearchPtrOutputWithContext(context.Background())
}

func (i *openSearchPtrType) ToOpenSearchPtrOutputWithContext(ctx context.Context) OpenSearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchPtrOutput)
}

// OpenSearchArrayInput is an input type that accepts OpenSearchArray and OpenSearchArrayOutput values.
// You can construct a concrete instance of `OpenSearchArrayInput` via:
//
//          OpenSearchArray{ OpenSearchArgs{...} }
type OpenSearchArrayInput interface {
	pulumi.Input

	ToOpenSearchArrayOutput() OpenSearchArrayOutput
	ToOpenSearchArrayOutputWithContext(context.Context) OpenSearchArrayOutput
}

type OpenSearchArray []OpenSearchInput

func (OpenSearchArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*OpenSearch)(nil))
}

func (i OpenSearchArray) ToOpenSearchArrayOutput() OpenSearchArrayOutput {
	return i.ToOpenSearchArrayOutputWithContext(context.Background())
}

func (i OpenSearchArray) ToOpenSearchArrayOutputWithContext(ctx context.Context) OpenSearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchArrayOutput)
}

// OpenSearchMapInput is an input type that accepts OpenSearchMap and OpenSearchMapOutput values.
// You can construct a concrete instance of `OpenSearchMapInput` via:
//
//          OpenSearchMap{ "key": OpenSearchArgs{...} }
type OpenSearchMapInput interface {
	pulumi.Input

	ToOpenSearchMapOutput() OpenSearchMapOutput
	ToOpenSearchMapOutputWithContext(context.Context) OpenSearchMapOutput
}

type OpenSearchMap map[string]OpenSearchInput

func (OpenSearchMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*OpenSearch)(nil))
}

func (i OpenSearchMap) ToOpenSearchMapOutput() OpenSearchMapOutput {
	return i.ToOpenSearchMapOutputWithContext(context.Background())
}

func (i OpenSearchMap) ToOpenSearchMapOutputWithContext(ctx context.Context) OpenSearchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchMapOutput)
}

type OpenSearchOutput struct {
	*pulumi.OutputState
}

func (OpenSearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenSearch)(nil))
}

func (o OpenSearchOutput) ToOpenSearchOutput() OpenSearchOutput {
	return o
}

func (o OpenSearchOutput) ToOpenSearchOutputWithContext(ctx context.Context) OpenSearchOutput {
	return o
}

func (o OpenSearchOutput) ToOpenSearchPtrOutput() OpenSearchPtrOutput {
	return o.ToOpenSearchPtrOutputWithContext(context.Background())
}

func (o OpenSearchOutput) ToOpenSearchPtrOutputWithContext(ctx context.Context) OpenSearchPtrOutput {
	return o.ApplyT(func(v OpenSearch) *OpenSearch {
		return &v
	}).(OpenSearchPtrOutput)
}

type OpenSearchPtrOutput struct {
	*pulumi.OutputState
}

func (OpenSearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenSearch)(nil))
}

func (o OpenSearchPtrOutput) ToOpenSearchPtrOutput() OpenSearchPtrOutput {
	return o
}

func (o OpenSearchPtrOutput) ToOpenSearchPtrOutputWithContext(ctx context.Context) OpenSearchPtrOutput {
	return o
}

type OpenSearchArrayOutput struct{ *pulumi.OutputState }

func (OpenSearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OpenSearch)(nil))
}

func (o OpenSearchArrayOutput) ToOpenSearchArrayOutput() OpenSearchArrayOutput {
	return o
}

func (o OpenSearchArrayOutput) ToOpenSearchArrayOutputWithContext(ctx context.Context) OpenSearchArrayOutput {
	return o
}

func (o OpenSearchArrayOutput) Index(i pulumi.IntInput) OpenSearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OpenSearch {
		return vs[0].([]OpenSearch)[vs[1].(int)]
	}).(OpenSearchOutput)
}

type OpenSearchMapOutput struct{ *pulumi.OutputState }

func (OpenSearchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OpenSearch)(nil))
}

func (o OpenSearchMapOutput) ToOpenSearchMapOutput() OpenSearchMapOutput {
	return o
}

func (o OpenSearchMapOutput) ToOpenSearchMapOutputWithContext(ctx context.Context) OpenSearchMapOutput {
	return o
}

func (o OpenSearchMapOutput) MapIndex(k pulumi.StringInput) OpenSearchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OpenSearch {
		return vs[0].(map[string]OpenSearch)[vs[1].(string)]
	}).(OpenSearchOutput)
}

func init() {
	pulumi.RegisterOutputType(OpenSearchOutput{})
	pulumi.RegisterOutputType(OpenSearchPtrOutput{})
	pulumi.RegisterOutputType(OpenSearchArrayOutput{})
	pulumi.RegisterOutputType(OpenSearchMapOutput{})
}
