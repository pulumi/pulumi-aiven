// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Opensearch resource allows the creation and management of Aiven Opensearch services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewOpenSearch(ctx, "os1", &aiven.OpenSearchArgs{
// 			Project:               pulumi.Any(data.Aiven_project.Pr1.Project),
// 			CloudName:             pulumi.String("google-europe-west1"),
// 			Plan:                  pulumi.String("startup-4"),
// 			ServiceName:           pulumi.String("my-os1"),
// 			MaintenanceWindowDow:  pulumi.String("monday"),
// 			MaintenanceWindowTime: pulumi.String("10:00:00"),
// 			OpensearchUserConfig: &OpenSearchOpensearchUserConfigArgs{
// 				OpensearchVersion: pulumi.String("1"),
// 				OpensearchDashboards: &OpenSearchOpensearchUserConfigOpensearchDashboardsArgs{
// 					Enabled:                  pulumi.String("true"),
// 					OpensearchRequestTimeout: pulumi.String("30000"),
// 				},
// 				PublicAccess: &OpenSearchOpensearchUserConfigPublicAccessArgs{
// 					Opensearch:           pulumi.String("true"),
// 					OpensearchDashboards: pulumi.String("true"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import aiven:index/openSearch:OpenSearch os1 project/service_name
// ```
type OpenSearch struct {
	pulumi.CustomResourceState

	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components OpenSearchComponentArrayOutput `pulumi:"components"`
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing
	// will result in the service rebalancing.
	DiskSpace pulumi.StringPtrOutput `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringOutput `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault pulumi.StringOutput `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep pulumi.StringOutput `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringOutput `pulumi:"diskSpaceUsed"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// Opensearch user configurable settings
	OpensearchUserConfig OpenSearchOpensearchUserConfigPtrOutput `pulumi:"opensearchUserConfig"`
	// Opensearch server provided values
	Opensearches OpenSearchOpensearchArrayOutput `pulumi:"opensearches"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations OpenSearchServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// The port of the service
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringOutput `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayOutput `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags OpenSearchTagArrayOutput `pulumi:"tags"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewOpenSearch registers a new resource with the given unique name, arguments, and options.
func NewOpenSearch(ctx *pulumi.Context,
	name string, args *OpenSearchArgs, opts ...pulumi.ResourceOption) (*OpenSearch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource OpenSearch
	err := ctx.RegisterResource("aiven:index/openSearch:OpenSearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenSearch gets an existing OpenSearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenSearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenSearchState, opts ...pulumi.ResourceOption) (*OpenSearch, error) {
	var resource OpenSearch
	err := ctx.ReadResource("aiven:index/openSearch:OpenSearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenSearch resources.
type openSearchState struct {
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []OpenSearchComponent `pulumi:"components"`
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing
	// will result in the service rebalancing.
	DiskSpace *string `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap *string `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault *string `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep *string `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed *string `pulumi:"diskSpaceUsed"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Opensearch user configurable settings
	OpensearchUserConfig *OpenSearchOpensearchUserConfig `pulumi:"opensearchUserConfig"`
	// Opensearch server provided values
	Opensearches []OpenSearchOpensearch `pulumi:"opensearches"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []OpenSearchServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword *string `pulumi:"servicePassword"`
	// The port of the service
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State *string `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []OpenSearchTag `pulumi:"tags"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type OpenSearchState struct {
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components OpenSearchComponentArrayInput
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing
	// will result in the service rebalancing.
	DiskSpace pulumi.StringPtrInput
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringPtrInput
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
	// Its also the minimum value for `disk_space`
	DiskSpaceDefault pulumi.StringPtrInput
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
	// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
	DiskSpaceStep pulumi.StringPtrInput
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Opensearch user configurable settings
	OpensearchUserConfig OpenSearchOpensearchUserConfigPtrInput
	// Opensearch server provided values
	Opensearches OpenSearchOpensearchArrayInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// The hostname of the service.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations OpenSearchServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringPtrInput
	// The port of the service
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringPtrInput
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringPtrInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags OpenSearchTagArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (OpenSearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*openSearchState)(nil)).Elem()
}

type openSearchArgs struct {
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing
	// will result in the service rebalancing.
	DiskSpace *string `pulumi:"diskSpace"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Opensearch user configurable settings
	OpensearchUserConfig *OpenSearchOpensearchUserConfig `pulumi:"opensearchUserConfig"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []OpenSearchServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Tags are key-value pairs that allow you to categorize services.
	Tags []OpenSearchTag `pulumi:"tags"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a OpenSearch resource.
type OpenSearchArgs struct {
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
	// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
	// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
	// are documented on each Cloud provider's own support articles, like [here for
	// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
	// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing
	// will result in the service rebalancing.
	DiskSpace pulumi.StringPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Opensearch user configurable settings
	OpensearchUserConfig OpenSearchOpensearchUserConfigPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
	// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
	// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
	// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
	// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
	// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
	// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
	// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
	// servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations OpenSearchServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
	// service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
	// static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Tags are key-value pairs that allow you to categorize services.
	Tags OpenSearchTagArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
	// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
	// much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (OpenSearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openSearchArgs)(nil)).Elem()
}

type OpenSearchInput interface {
	pulumi.Input

	ToOpenSearchOutput() OpenSearchOutput
	ToOpenSearchOutputWithContext(ctx context.Context) OpenSearchOutput
}

func (*OpenSearch) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenSearch)(nil)).Elem()
}

func (i *OpenSearch) ToOpenSearchOutput() OpenSearchOutput {
	return i.ToOpenSearchOutputWithContext(context.Background())
}

func (i *OpenSearch) ToOpenSearchOutputWithContext(ctx context.Context) OpenSearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchOutput)
}

// OpenSearchArrayInput is an input type that accepts OpenSearchArray and OpenSearchArrayOutput values.
// You can construct a concrete instance of `OpenSearchArrayInput` via:
//
//          OpenSearchArray{ OpenSearchArgs{...} }
type OpenSearchArrayInput interface {
	pulumi.Input

	ToOpenSearchArrayOutput() OpenSearchArrayOutput
	ToOpenSearchArrayOutputWithContext(context.Context) OpenSearchArrayOutput
}

type OpenSearchArray []OpenSearchInput

func (OpenSearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenSearch)(nil)).Elem()
}

func (i OpenSearchArray) ToOpenSearchArrayOutput() OpenSearchArrayOutput {
	return i.ToOpenSearchArrayOutputWithContext(context.Background())
}

func (i OpenSearchArray) ToOpenSearchArrayOutputWithContext(ctx context.Context) OpenSearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchArrayOutput)
}

// OpenSearchMapInput is an input type that accepts OpenSearchMap and OpenSearchMapOutput values.
// You can construct a concrete instance of `OpenSearchMapInput` via:
//
//          OpenSearchMap{ "key": OpenSearchArgs{...} }
type OpenSearchMapInput interface {
	pulumi.Input

	ToOpenSearchMapOutput() OpenSearchMapOutput
	ToOpenSearchMapOutputWithContext(context.Context) OpenSearchMapOutput
}

type OpenSearchMap map[string]OpenSearchInput

func (OpenSearchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenSearch)(nil)).Elem()
}

func (i OpenSearchMap) ToOpenSearchMapOutput() OpenSearchMapOutput {
	return i.ToOpenSearchMapOutputWithContext(context.Background())
}

func (i OpenSearchMap) ToOpenSearchMapOutputWithContext(ctx context.Context) OpenSearchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenSearchMapOutput)
}

type OpenSearchOutput struct{ *pulumi.OutputState }

func (OpenSearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenSearch)(nil)).Elem()
}

func (o OpenSearchOutput) ToOpenSearchOutput() OpenSearchOutput {
	return o
}

func (o OpenSearchOutput) ToOpenSearchOutputWithContext(ctx context.Context) OpenSearchOutput {
	return o
}

// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is
// created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud
// provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These
// are documented on each Cloud provider's own support articles, like [here for
// Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for
// AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
func (o OpenSearchOutput) CloudName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringPtrOutput { return v.CloudName }).(pulumi.StringPtrOutput)
}

// Service component information objects
func (o OpenSearchOutput) Components() OpenSearchComponentArrayOutput {
	return o.ApplyT(func(v *OpenSearch) OpenSearchComponentArrayOutput { return v.Components }).(OpenSearchComponentArrayOutput)
}

// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing
// will result in the service rebalancing.
func (o OpenSearchOutput) DiskSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringPtrOutput { return v.DiskSpace }).(pulumi.StringPtrOutput)
}

// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
func (o OpenSearchOutput) DiskSpaceCap() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.DiskSpaceCap }).(pulumi.StringOutput)
}

// The default disk space of the service, possible values depend on the service type, the cloud provider and the project.
// Its also the minimum value for `disk_space`
func (o OpenSearchOutput) DiskSpaceDefault() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.DiskSpaceDefault }).(pulumi.StringOutput)
}

// The default disk space step of the service, possible values depend on the service type, the cloud provider and the
// project. `disk_space` needs to increment from `disk_space_default` by increments of this size.
func (o OpenSearchOutput) DiskSpaceStep() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.DiskSpaceStep }).(pulumi.StringOutput)
}

// Disk space that service is currently using
func (o OpenSearchOutput) DiskSpaceUsed() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.DiskSpaceUsed }).(pulumi.StringOutput)
}

// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
func (o OpenSearchOutput) MaintenanceWindowDow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringPtrOutput { return v.MaintenanceWindowDow }).(pulumi.StringPtrOutput)
}

// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
func (o OpenSearchOutput) MaintenanceWindowTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringPtrOutput { return v.MaintenanceWindowTime }).(pulumi.StringPtrOutput)
}

// Opensearch user configurable settings
func (o OpenSearchOutput) OpensearchUserConfig() OpenSearchOpensearchUserConfigPtrOutput {
	return o.ApplyT(func(v *OpenSearch) OpenSearchOpensearchUserConfigPtrOutput { return v.OpensearchUserConfig }).(OpenSearchOpensearchUserConfigPtrOutput)
}

// Opensearch server provided values
func (o OpenSearchOutput) Opensearches() OpenSearchOpensearchArrayOutput {
	return o.ApplyT(func(v *OpenSearch) OpenSearchOpensearchArrayOutput { return v.Opensearches }).(OpenSearchOpensearchArrayOutput)
}

// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there
// are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to
// store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are
// `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also
// other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available
// options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
func (o OpenSearchOutput) Plan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringPtrOutput { return v.Plan }).(pulumi.StringPtrOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
// reference. This property cannot be changed, doing so forces recreation of the resource.
func (o OpenSearchOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the
// value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region
// as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new
// servers so the operation can take significant amount of time to complete if the service has a lot of data.
func (o OpenSearchOutput) ProjectVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringPtrOutput { return v.ProjectVpcId }).(pulumi.StringPtrOutput)
}

// The hostname of the service.
func (o OpenSearchOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.ServiceHost }).(pulumi.StringOutput)
}

// Service integrations to specify when creating a service. Not applied after initial service creation
func (o OpenSearchOutput) ServiceIntegrations() OpenSearchServiceIntegrationArrayOutput {
	return o.ApplyT(func(v *OpenSearch) OpenSearchServiceIntegrationArrayOutput { return v.ServiceIntegrations }).(OpenSearchServiceIntegrationArrayOutput)
}

// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the
// service so name should be picked based on intended service usage rather than current attributes.
func (o OpenSearchOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Password used for connecting to the service, if applicable
func (o OpenSearchOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// The port of the service
func (o OpenSearchOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.IntOutput { return v.ServicePort }).(pulumi.IntOutput)
}

// Aiven internal service type code
func (o OpenSearchOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
func (o OpenSearchOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.ServiceUri }).(pulumi.StringOutput)
}

// Username used for connecting to the service, if applicable
func (o OpenSearchOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.ServiceUsername }).(pulumi.StringOutput)
}

// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
func (o OpenSearchOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a
// static ip resource is in the 'assigned' state it cannot be unbound from the node again
func (o OpenSearchOutput) StaticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.StringArrayOutput { return v.StaticIps }).(pulumi.StringArrayOutput)
}

// Tags are key-value pairs that allow you to categorize services.
func (o OpenSearchOutput) Tags() OpenSearchTagArrayOutput {
	return o.ApplyT(func(v *OpenSearch) OpenSearchTagArrayOutput { return v.Tags }).(OpenSearchTagArrayOutput)
}

// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent
// unintentional service deletion. This does not shield against deleting databases or topics but for services with backups
// much of the content can at least be restored from backup in case accidental deletion is done.
func (o OpenSearchOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OpenSearch) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type OpenSearchArrayOutput struct{ *pulumi.OutputState }

func (OpenSearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenSearch)(nil)).Elem()
}

func (o OpenSearchArrayOutput) ToOpenSearchArrayOutput() OpenSearchArrayOutput {
	return o
}

func (o OpenSearchArrayOutput) ToOpenSearchArrayOutputWithContext(ctx context.Context) OpenSearchArrayOutput {
	return o
}

func (o OpenSearchArrayOutput) Index(i pulumi.IntInput) OpenSearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenSearch {
		return vs[0].([]*OpenSearch)[vs[1].(int)]
	}).(OpenSearchOutput)
}

type OpenSearchMapOutput struct{ *pulumi.OutputState }

func (OpenSearchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenSearch)(nil)).Elem()
}

func (o OpenSearchMapOutput) ToOpenSearchMapOutput() OpenSearchMapOutput {
	return o
}

func (o OpenSearchMapOutput) ToOpenSearchMapOutputWithContext(ctx context.Context) OpenSearchMapOutput {
	return o
}

func (o OpenSearchMapOutput) MapIndex(k pulumi.StringInput) OpenSearchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenSearch {
		return vs[0].(map[string]*OpenSearch)[vs[1].(string)]
	}).(OpenSearchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenSearchInput)(nil)).Elem(), &OpenSearch{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenSearchArrayInput)(nil)).Elem(), OpenSearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenSearchMapInput)(nil)).Elem(), OpenSearchMap{})
	pulumi.RegisterOutputType(OpenSearchOutput{})
	pulumi.RegisterOutputType(OpenSearchArrayOutput{})
	pulumi.RegisterOutputType(OpenSearchMapOutput{})
}
