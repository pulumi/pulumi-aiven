// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Elasticsearch resource allows the creation and management of Aiven Elasticsearch services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewElasticSearch(ctx, "es1", &aiven.ElasticSearchArgs{
// 			Project:               pulumi.Any(data.Aiven_project.Pr1.Project),
// 			CloudName:             pulumi.String("google-europe-west1"),
// 			Plan:                  pulumi.String("startup-4"),
// 			ServiceName:           pulumi.String("my-es1"),
// 			MaintenanceWindowDow:  pulumi.String("monday"),
// 			MaintenanceWindowTime: pulumi.String("10:00:00"),
// 			ElasticsearchUserConfig: &ElasticSearchElasticsearchUserConfigArgs{
// 				ElasticsearchVersion: pulumi.String("7"),
// 				Kibana: &ElasticSearchElasticsearchUserConfigKibanaArgs{
// 					Enabled:                     pulumi.String("true"),
// 					ElasticsearchRequestTimeout: pulumi.String("30000"),
// 				},
// 				PublicAccess: &ElasticSearchElasticsearchUserConfigPublicAccessArgs{
// 					Elasticsearch: pulumi.String("true"),
// 					Kibana:        pulumi.String("true"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ElasticSearch struct {
	pulumi.CustomResourceState

	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components ElasticSearchComponentArrayOutput `pulumi:"components"`
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
	DiskSpace pulumi.StringPtrOutput `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringOutput `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault pulumi.StringOutput `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep pulumi.StringOutput `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringOutput `pulumi:"diskSpaceUsed"`
	// Elasticsearch user configurable settings
	ElasticsearchUserConfig ElasticSearchElasticsearchUserConfigPtrOutput `pulumi:"elasticsearchUserConfig"`
	// Elasticsearch server provided values
	Elasticsearches ElasticSearchElasticsearchArrayOutput `pulumi:"elasticsearches"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations ElasticSearchServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// The port of the service
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringOutput `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayOutput `pulumi:"staticIps"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewElasticSearch registers a new resource with the given unique name, arguments, and options.
func NewElasticSearch(ctx *pulumi.Context,
	name string, args *ElasticSearchArgs, opts ...pulumi.ResourceOption) (*ElasticSearch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource ElasticSearch
	err := ctx.RegisterResource("aiven:index/elasticSearch:ElasticSearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticSearch gets an existing ElasticSearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticSearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticSearchState, opts ...pulumi.ResourceOption) (*ElasticSearch, error) {
	var resource ElasticSearch
	err := ctx.ReadResource("aiven:index/elasticSearch:ElasticSearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticSearch resources.
type elasticSearchState struct {
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []ElasticSearchComponent `pulumi:"components"`
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
	DiskSpace *string `pulumi:"diskSpace"`
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap *string `pulumi:"diskSpaceCap"`
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault *string `pulumi:"diskSpaceDefault"`
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep *string `pulumi:"diskSpaceStep"`
	// Disk space that service is currently using
	DiskSpaceUsed *string `pulumi:"diskSpaceUsed"`
	// Elasticsearch user configurable settings
	ElasticsearchUserConfig *ElasticSearchElasticsearchUserConfig `pulumi:"elasticsearchUserConfig"`
	// Elasticsearch server provided values
	Elasticsearches []ElasticSearchElasticsearch `pulumi:"elasticsearches"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// The hostname of the service.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []ElasticSearchServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the service, if applicable
	ServicePassword *string `pulumi:"servicePassword"`
	// The port of the service
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the service, if applicable
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State *string `pulumi:"state"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type ElasticSearchState struct {
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components ElasticSearchComponentArrayInput
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
	DiskSpace pulumi.StringPtrInput
	// The maximum disk space of the service, possible values depend on the service type, the cloud provider and the project.
	DiskSpaceCap pulumi.StringPtrInput
	// The default disk space of the service, possible values depend on the service type, the cloud provider and the project. Its also the minimum value for `diskSpace`
	DiskSpaceDefault pulumi.StringPtrInput
	// The default disk space step of the service, possible values depend on the service type, the cloud provider and the project. `diskSpace` needs to increment from `diskSpaceDefault` by increments of this size.
	DiskSpaceStep pulumi.StringPtrInput
	// Disk space that service is currently using
	DiskSpaceUsed pulumi.StringPtrInput
	// Elasticsearch user configurable settings
	ElasticsearchUserConfig ElasticSearchElasticsearchUserConfigPtrInput
	// Elasticsearch server provided values
	Elasticsearches ElasticSearchElasticsearchArrayInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// The hostname of the service.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations ElasticSearchServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the service, if applicable
	ServicePassword pulumi.StringPtrInput
	// The port of the service
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the service. Service specific info is under "kafka", "pg", etc.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the service, if applicable
	ServiceUsername pulumi.StringPtrInput
	// Service state. One of `POWEROFF`, `REBALANCING`, `REBUILDING` or `RUNNING`
	State pulumi.StringPtrInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (ElasticSearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchState)(nil)).Elem()
}

type elasticSearchArgs struct {
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
	DiskSpace *string `pulumi:"diskSpace"`
	// Elasticsearch user configurable settings
	ElasticsearchUserConfig *ElasticSearchElasticsearchUserConfig `pulumi:"elasticsearchUserConfig"`
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []ElasticSearchServiceIntegration `pulumi:"serviceIntegrations"`
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps []string `pulumi:"staticIps"`
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a ElasticSearch resource.
type ElasticSearchArgs struct {
	// Defines where the cloud provider and region where the service is hosted in. This can be changed freely after service is created. Changing the value will trigger a potentially lengthy migration process for the service. Format is cloud provider name (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider specific region name. These are documented on each Cloud provider's own support articles, like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service rebalancing.
	DiskSpace pulumi.StringPtrInput
	// Elasticsearch user configurable settings
	ElasticsearchUserConfig ElasticSearchElasticsearchUserConfigPtrInput
	// Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// Defines what kind of computing resources are allocated for the service. It can be changed after creation, though there are some restrictions when going to a smaller plan such as the new plan must have sufficient amount of disk space to store all current data and switching to a plan with fewer nodes might not be supported. The basic plan names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is (roughly) the amount of memory on each node (also other attributes like number of CPUs and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the VPC the service should run in. If the value is not set the service is not run inside a VPC. When set, the value should be given as a reference to set up dependencies correctly and the VPC must be in the same cloud and region as the service itself. Project can be freely moved to and from VPC after creation but doing so triggers migration to new servers so the operation can take significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations ElasticSearchServiceIntegrationArrayInput
	// Specifies the actual name of the service. The name cannot be changed later without destroying and re-creating the service so name should be picked based on intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// Static IPs that are going to be associated with this service. Please assign a value using the 'toset' function. Once a static ip resource is in the 'assigned' state it cannot be unbound from the node again
	StaticIps pulumi.StringArrayInput
	// Prevents the service from being deleted. It is recommended to set this to `true` for all production services to prevent unintentional service deletion. This does not shield against deleting databases or topics but for services with backups much of the content can at least be restored from backup in case accidental deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (ElasticSearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSearchArgs)(nil)).Elem()
}

type ElasticSearchInput interface {
	pulumi.Input

	ToElasticSearchOutput() ElasticSearchOutput
	ToElasticSearchOutputWithContext(ctx context.Context) ElasticSearchOutput
}

func (*ElasticSearch) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearch)(nil)).Elem()
}

func (i *ElasticSearch) ToElasticSearchOutput() ElasticSearchOutput {
	return i.ToElasticSearchOutputWithContext(context.Background())
}

func (i *ElasticSearch) ToElasticSearchOutputWithContext(ctx context.Context) ElasticSearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchOutput)
}

// ElasticSearchArrayInput is an input type that accepts ElasticSearchArray and ElasticSearchArrayOutput values.
// You can construct a concrete instance of `ElasticSearchArrayInput` via:
//
//          ElasticSearchArray{ ElasticSearchArgs{...} }
type ElasticSearchArrayInput interface {
	pulumi.Input

	ToElasticSearchArrayOutput() ElasticSearchArrayOutput
	ToElasticSearchArrayOutputWithContext(context.Context) ElasticSearchArrayOutput
}

type ElasticSearchArray []ElasticSearchInput

func (ElasticSearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticSearch)(nil)).Elem()
}

func (i ElasticSearchArray) ToElasticSearchArrayOutput() ElasticSearchArrayOutput {
	return i.ToElasticSearchArrayOutputWithContext(context.Background())
}

func (i ElasticSearchArray) ToElasticSearchArrayOutputWithContext(ctx context.Context) ElasticSearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchArrayOutput)
}

// ElasticSearchMapInput is an input type that accepts ElasticSearchMap and ElasticSearchMapOutput values.
// You can construct a concrete instance of `ElasticSearchMapInput` via:
//
//          ElasticSearchMap{ "key": ElasticSearchArgs{...} }
type ElasticSearchMapInput interface {
	pulumi.Input

	ToElasticSearchMapOutput() ElasticSearchMapOutput
	ToElasticSearchMapOutputWithContext(context.Context) ElasticSearchMapOutput
}

type ElasticSearchMap map[string]ElasticSearchInput

func (ElasticSearchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticSearch)(nil)).Elem()
}

func (i ElasticSearchMap) ToElasticSearchMapOutput() ElasticSearchMapOutput {
	return i.ToElasticSearchMapOutputWithContext(context.Background())
}

func (i ElasticSearchMap) ToElasticSearchMapOutputWithContext(ctx context.Context) ElasticSearchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSearchMapOutput)
}

type ElasticSearchOutput struct{ *pulumi.OutputState }

func (ElasticSearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSearch)(nil)).Elem()
}

func (o ElasticSearchOutput) ToElasticSearchOutput() ElasticSearchOutput {
	return o
}

func (o ElasticSearchOutput) ToElasticSearchOutputWithContext(ctx context.Context) ElasticSearchOutput {
	return o
}

type ElasticSearchArrayOutput struct{ *pulumi.OutputState }

func (ElasticSearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticSearch)(nil)).Elem()
}

func (o ElasticSearchArrayOutput) ToElasticSearchArrayOutput() ElasticSearchArrayOutput {
	return o
}

func (o ElasticSearchArrayOutput) ToElasticSearchArrayOutputWithContext(ctx context.Context) ElasticSearchArrayOutput {
	return o
}

func (o ElasticSearchArrayOutput) Index(i pulumi.IntInput) ElasticSearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticSearch {
		return vs[0].([]*ElasticSearch)[vs[1].(int)]
	}).(ElasticSearchOutput)
}

type ElasticSearchMapOutput struct{ *pulumi.OutputState }

func (ElasticSearchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticSearch)(nil)).Elem()
}

func (o ElasticSearchMapOutput) ToElasticSearchMapOutput() ElasticSearchMapOutput {
	return o
}

func (o ElasticSearchMapOutput) ToElasticSearchMapOutputWithContext(ctx context.Context) ElasticSearchMapOutput {
	return o
}

func (o ElasticSearchMapOutput) MapIndex(k pulumi.StringInput) ElasticSearchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticSearch {
		return vs[0].(map[string]*ElasticSearch)[vs[1].(string)]
	}).(ElasticSearchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSearchInput)(nil)).Elem(), &ElasticSearch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSearchArrayInput)(nil)).Elem(), ElasticSearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSearchMapInput)(nil)).Elem(), ElasticSearchMap{})
	pulumi.RegisterOutputType(ElasticSearchOutput{})
	pulumi.RegisterOutputType(ElasticSearchArrayOutput{})
	pulumi.RegisterOutputType(ElasticSearchMapOutput{})
}
