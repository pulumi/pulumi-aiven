// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Project struct {
	s *pulumi.ResourceState
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOpt) (*Project, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["billingAddress"] = nil
		inputs["billingEmails"] = nil
		inputs["caCert"] = nil
		inputs["cardId"] = nil
		inputs["copyFromProject"] = nil
		inputs["countryCode"] = nil
		inputs["project"] = nil
		inputs["technicalEmails"] = nil
	} else {
		inputs["billingAddress"] = args.BillingAddress
		inputs["billingEmails"] = args.BillingEmails
		inputs["caCert"] = args.CaCert
		inputs["cardId"] = args.CardId
		inputs["copyFromProject"] = args.CopyFromProject
		inputs["countryCode"] = args.CountryCode
		inputs["project"] = args.Project
		inputs["technicalEmails"] = args.TechnicalEmails
	}
	s, err := ctx.RegisterResource("aiven:index/project:Project", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectState, opts ...pulumi.ResourceOpt) (*Project, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["billingAddress"] = state.BillingAddress
		inputs["billingEmails"] = state.BillingEmails
		inputs["caCert"] = state.CaCert
		inputs["cardId"] = state.CardId
		inputs["copyFromProject"] = state.CopyFromProject
		inputs["countryCode"] = state.CountryCode
		inputs["project"] = state.Project
		inputs["technicalEmails"] = state.TechnicalEmails
	}
	s, err := ctx.ReadResource("aiven:index/project:Project", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Project) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Project) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Billing name and address of the project
func (r *Project) BillingAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["billingAddress"])
}

// Billing contact emails of the project
func (r *Project) BillingEmails() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["billingEmails"])
}

// Project root CA. This is used by some services like Kafka to sign service certificate
func (r *Project) CaCert() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["caCert"])
}

// Credit card ID
func (r *Project) CardId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cardId"])
}

// Copy properties from another project. Only has effect when a new project is created.
func (r *Project) CopyFromProject() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["copyFromProject"])
}

// Billing country code of the project
func (r *Project) CountryCode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["countryCode"])
}

// Project name
func (r *Project) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Technical contact emails of the project
func (r *Project) TechnicalEmails() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["technicalEmails"])
}

// Input properties used for looking up and filtering Project resources.
type ProjectState struct {
	// Billing name and address of the project
	BillingAddress interface{}
	// Billing contact emails of the project
	BillingEmails interface{}
	// Project root CA. This is used by some services like Kafka to sign service certificate
	CaCert interface{}
	// Credit card ID
	CardId interface{}
	// Copy properties from another project. Only has effect when a new project is created.
	CopyFromProject interface{}
	// Billing country code of the project
	CountryCode interface{}
	// Project name
	Project interface{}
	// Technical contact emails of the project
	TechnicalEmails interface{}
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Billing name and address of the project
	BillingAddress interface{}
	// Billing contact emails of the project
	BillingEmails interface{}
	// Project root CA. This is used by some services like Kafka to sign service certificate
	CaCert interface{}
	// Credit card ID
	CardId interface{}
	// Copy properties from another project. Only has effect when a new project is created.
	CopyFromProject interface{}
	// Billing country code of the project
	CountryCode interface{}
	// Project name
	Project interface{}
	// Technical contact emails of the project
	TechnicalEmails interface{}
}
