// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages an Aiven for Apache KafkaÂ® service user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewKafkaUser(ctx, "example_service_user", &aiven.KafkaUserArgs{
//				ServiceName: pulumi.Any(exampleKafka.ServiceName),
//				Project:     pulumi.Any(exampleProject.Project),
//				Username:    pulumi.String("example-kafka-user"),
//				Password:    pulumi.Any(serviceUserPw),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/kafkaUser:KafkaUser example_user PROJECT/SERVICE_NAME/USERNAME
// ```
type KafkaUser struct {
	pulumi.CustomResourceState

	// Access certificate for the user.
	AccessCert pulumi.StringOutput `pulumi:"accessCert"`
	// Access certificate key for the user.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The Kafka service user's password.
	Password pulumi.StringOutput `pulumi:"password"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// User account type, such as primary or regular account.
	Type pulumi.StringOutput `pulumi:"type"`
	// Name of the Kafka service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewKafkaUser registers a new resource with the given unique name, arguments, and options.
func NewKafkaUser(ctx *pulumi.Context,
	name string, args *KafkaUserArgs, opts ...pulumi.ResourceOption) (*KafkaUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessCert",
		"accessKey",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaUser
	err := ctx.RegisterResource("aiven:index/kafkaUser:KafkaUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaUser gets an existing KafkaUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaUserState, opts ...pulumi.ResourceOption) (*KafkaUser, error) {
	var resource KafkaUser
	err := ctx.ReadResource("aiven:index/kafkaUser:KafkaUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaUser resources.
type kafkaUserState struct {
	// Access certificate for the user.
	AccessCert *string `pulumi:"accessCert"`
	// Access certificate key for the user.
	AccessKey *string `pulumi:"accessKey"`
	// The Kafka service user's password.
	Password *string `pulumi:"password"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// User account type, such as primary or regular account.
	Type *string `pulumi:"type"`
	// Name of the Kafka service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username *string `pulumi:"username"`
}

type KafkaUserState struct {
	// Access certificate for the user.
	AccessCert pulumi.StringPtrInput
	// Access certificate key for the user.
	AccessKey pulumi.StringPtrInput
	// The Kafka service user's password.
	Password pulumi.StringPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// User account type, such as primary or regular account.
	Type pulumi.StringPtrInput
	// Name of the Kafka service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username pulumi.StringPtrInput
}

func (KafkaUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserState)(nil)).Elem()
}

type kafkaUserArgs struct {
	// The Kafka service user's password.
	Password *string `pulumi:"password"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// Name of the Kafka service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a KafkaUser resource.
type KafkaUserArgs struct {
	// The Kafka service user's password.
	Password pulumi.StringPtrInput
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringInput
	// Name of the Kafka service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Username pulumi.StringInput
}

func (KafkaUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserArgs)(nil)).Elem()
}

type KafkaUserInput interface {
	pulumi.Input

	ToKafkaUserOutput() KafkaUserOutput
	ToKafkaUserOutputWithContext(ctx context.Context) KafkaUserOutput
}

func (*KafkaUser) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUser)(nil)).Elem()
}

func (i *KafkaUser) ToKafkaUserOutput() KafkaUserOutput {
	return i.ToKafkaUserOutputWithContext(context.Background())
}

func (i *KafkaUser) ToKafkaUserOutputWithContext(ctx context.Context) KafkaUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserOutput)
}

// KafkaUserArrayInput is an input type that accepts KafkaUserArray and KafkaUserArrayOutput values.
// You can construct a concrete instance of `KafkaUserArrayInput` via:
//
//	KafkaUserArray{ KafkaUserArgs{...} }
type KafkaUserArrayInput interface {
	pulumi.Input

	ToKafkaUserArrayOutput() KafkaUserArrayOutput
	ToKafkaUserArrayOutputWithContext(context.Context) KafkaUserArrayOutput
}

type KafkaUserArray []KafkaUserInput

func (KafkaUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUser)(nil)).Elem()
}

func (i KafkaUserArray) ToKafkaUserArrayOutput() KafkaUserArrayOutput {
	return i.ToKafkaUserArrayOutputWithContext(context.Background())
}

func (i KafkaUserArray) ToKafkaUserArrayOutputWithContext(ctx context.Context) KafkaUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserArrayOutput)
}

// KafkaUserMapInput is an input type that accepts KafkaUserMap and KafkaUserMapOutput values.
// You can construct a concrete instance of `KafkaUserMapInput` via:
//
//	KafkaUserMap{ "key": KafkaUserArgs{...} }
type KafkaUserMapInput interface {
	pulumi.Input

	ToKafkaUserMapOutput() KafkaUserMapOutput
	ToKafkaUserMapOutputWithContext(context.Context) KafkaUserMapOutput
}

type KafkaUserMap map[string]KafkaUserInput

func (KafkaUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUser)(nil)).Elem()
}

func (i KafkaUserMap) ToKafkaUserMapOutput() KafkaUserMapOutput {
	return i.ToKafkaUserMapOutputWithContext(context.Background())
}

func (i KafkaUserMap) ToKafkaUserMapOutputWithContext(ctx context.Context) KafkaUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserMapOutput)
}

type KafkaUserOutput struct{ *pulumi.OutputState }

func (KafkaUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUser)(nil)).Elem()
}

func (o KafkaUserOutput) ToKafkaUserOutput() KafkaUserOutput {
	return o
}

func (o KafkaUserOutput) ToKafkaUserOutputWithContext(ctx context.Context) KafkaUserOutput {
	return o
}

// Access certificate for the user.
func (o KafkaUserOutput) AccessCert() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.AccessCert }).(pulumi.StringOutput)
}

// Access certificate key for the user.
func (o KafkaUserOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The Kafka service user's password.
func (o KafkaUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o KafkaUserOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o KafkaUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// User account type, such as primary or regular account.
func (o KafkaUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Name of the Kafka service user. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o KafkaUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type KafkaUserArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUser)(nil)).Elem()
}

func (o KafkaUserArrayOutput) ToKafkaUserArrayOutput() KafkaUserArrayOutput {
	return o
}

func (o KafkaUserArrayOutput) ToKafkaUserArrayOutputWithContext(ctx context.Context) KafkaUserArrayOutput {
	return o
}

func (o KafkaUserArrayOutput) Index(i pulumi.IntInput) KafkaUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaUser {
		return vs[0].([]*KafkaUser)[vs[1].(int)]
	}).(KafkaUserOutput)
}

type KafkaUserMapOutput struct{ *pulumi.OutputState }

func (KafkaUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUser)(nil)).Elem()
}

func (o KafkaUserMapOutput) ToKafkaUserMapOutput() KafkaUserMapOutput {
	return o
}

func (o KafkaUserMapOutput) ToKafkaUserMapOutputWithContext(ctx context.Context) KafkaUserMapOutput {
	return o
}

func (o KafkaUserMapOutput) MapIndex(k pulumi.StringInput) KafkaUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaUser {
		return vs[0].(map[string]*KafkaUser)[vs[1].(string)]
	}).(KafkaUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserInput)(nil)).Elem(), &KafkaUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserArrayInput)(nil)).Elem(), KafkaUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserMapInput)(nil)).Elem(), KafkaUserMap{})
	pulumi.RegisterOutputType(KafkaUserOutput{})
	pulumi.RegisterOutputType(KafkaUserArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserMapOutput{})
}
