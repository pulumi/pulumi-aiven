// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Grants permissions to a principal for a resource.
//
// **This resource is in the beta stage and may change without notice.** Set
// the `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Grant permission to a user
//			_, err := aiven.NewOrganizationPermission(ctx, "operator", &aiven.OrganizationPermissionArgs{
//				OrganizationId: pulumi.Any(main.Id),
//				ResourceId:     pulumi.Any(exampleProject.Id),
//				ResourceType:   pulumi.String("project"),
//				Permissions: aiven.OrganizationPermissionPermissionArray{
//					&aiven.OrganizationPermissionPermissionArgs{
//						Permissions: pulumi.StringArray{
//							pulumi.String("operator"),
//						},
//						PrincipalId:   pulumi.String("u123a456b7890c"),
//						PrincipalType: pulumi.String("user"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Grant permission to a group
//			_, err = aiven.NewOrganizationPermission(ctx, "developers", &aiven.OrganizationPermissionArgs{
//				OrganizationId: pulumi.Any(main.Id),
//				ResourceId:     pulumi.Any(exampleProject.Id),
//				ResourceType:   pulumi.String("project"),
//				Permissions: aiven.OrganizationPermissionPermissionArray{
//					&aiven.OrganizationPermissionPermissionArgs{
//						Permissions: pulumi.StringArray{
//							pulumi.String("developer"),
//						},
//						PrincipalId:   pulumi.Any(exampleGroup.GroupId),
//						PrincipalType: pulumi.String("user_group"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/organizationPermission:OrganizationPermission operator ORGANIZATION_ID/ID
// ```
type OrganizationPermission struct {
	pulumi.CustomResourceState

	// Organization ID.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Permissions to grant to principals.
	Permissions OrganizationPermissionPermissionArrayOutput `pulumi:"permissions"`
	// Resource ID.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Resource type. The possible values are `project`.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
}

// NewOrganizationPermission registers a new resource with the given unique name, arguments, and options.
func NewOrganizationPermission(ctx *pulumi.Context,
	name string, args *OrganizationPermissionArgs, opts ...pulumi.ResourceOption) (*OrganizationPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationPermission
	err := ctx.RegisterResource("aiven:index/organizationPermission:OrganizationPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationPermission gets an existing OrganizationPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationPermissionState, opts ...pulumi.ResourceOption) (*OrganizationPermission, error) {
	var resource OrganizationPermission
	err := ctx.ReadResource("aiven:index/organizationPermission:OrganizationPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationPermission resources.
type organizationPermissionState struct {
	// Organization ID.
	OrganizationId *string `pulumi:"organizationId"`
	// Permissions to grant to principals.
	Permissions []OrganizationPermissionPermission `pulumi:"permissions"`
	// Resource ID.
	ResourceId *string `pulumi:"resourceId"`
	// Resource type. The possible values are `project`.
	ResourceType *string `pulumi:"resourceType"`
}

type OrganizationPermissionState struct {
	// Organization ID.
	OrganizationId pulumi.StringPtrInput
	// Permissions to grant to principals.
	Permissions OrganizationPermissionPermissionArrayInput
	// Resource ID.
	ResourceId pulumi.StringPtrInput
	// Resource type. The possible values are `project`.
	ResourceType pulumi.StringPtrInput
}

func (OrganizationPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationPermissionState)(nil)).Elem()
}

type organizationPermissionArgs struct {
	// Organization ID.
	OrganizationId string `pulumi:"organizationId"`
	// Permissions to grant to principals.
	Permissions []OrganizationPermissionPermission `pulumi:"permissions"`
	// Resource ID.
	ResourceId string `pulumi:"resourceId"`
	// Resource type. The possible values are `project`.
	ResourceType string `pulumi:"resourceType"`
}

// The set of arguments for constructing a OrganizationPermission resource.
type OrganizationPermissionArgs struct {
	// Organization ID.
	OrganizationId pulumi.StringInput
	// Permissions to grant to principals.
	Permissions OrganizationPermissionPermissionArrayInput
	// Resource ID.
	ResourceId pulumi.StringInput
	// Resource type. The possible values are `project`.
	ResourceType pulumi.StringInput
}

func (OrganizationPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationPermissionArgs)(nil)).Elem()
}

type OrganizationPermissionInput interface {
	pulumi.Input

	ToOrganizationPermissionOutput() OrganizationPermissionOutput
	ToOrganizationPermissionOutputWithContext(ctx context.Context) OrganizationPermissionOutput
}

func (*OrganizationPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationPermission)(nil)).Elem()
}

func (i *OrganizationPermission) ToOrganizationPermissionOutput() OrganizationPermissionOutput {
	return i.ToOrganizationPermissionOutputWithContext(context.Background())
}

func (i *OrganizationPermission) ToOrganizationPermissionOutputWithContext(ctx context.Context) OrganizationPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPermissionOutput)
}

// OrganizationPermissionArrayInput is an input type that accepts OrganizationPermissionArray and OrganizationPermissionArrayOutput values.
// You can construct a concrete instance of `OrganizationPermissionArrayInput` via:
//
//	OrganizationPermissionArray{ OrganizationPermissionArgs{...} }
type OrganizationPermissionArrayInput interface {
	pulumi.Input

	ToOrganizationPermissionArrayOutput() OrganizationPermissionArrayOutput
	ToOrganizationPermissionArrayOutputWithContext(context.Context) OrganizationPermissionArrayOutput
}

type OrganizationPermissionArray []OrganizationPermissionInput

func (OrganizationPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationPermission)(nil)).Elem()
}

func (i OrganizationPermissionArray) ToOrganizationPermissionArrayOutput() OrganizationPermissionArrayOutput {
	return i.ToOrganizationPermissionArrayOutputWithContext(context.Background())
}

func (i OrganizationPermissionArray) ToOrganizationPermissionArrayOutputWithContext(ctx context.Context) OrganizationPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPermissionArrayOutput)
}

// OrganizationPermissionMapInput is an input type that accepts OrganizationPermissionMap and OrganizationPermissionMapOutput values.
// You can construct a concrete instance of `OrganizationPermissionMapInput` via:
//
//	OrganizationPermissionMap{ "key": OrganizationPermissionArgs{...} }
type OrganizationPermissionMapInput interface {
	pulumi.Input

	ToOrganizationPermissionMapOutput() OrganizationPermissionMapOutput
	ToOrganizationPermissionMapOutputWithContext(context.Context) OrganizationPermissionMapOutput
}

type OrganizationPermissionMap map[string]OrganizationPermissionInput

func (OrganizationPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationPermission)(nil)).Elem()
}

func (i OrganizationPermissionMap) ToOrganizationPermissionMapOutput() OrganizationPermissionMapOutput {
	return i.ToOrganizationPermissionMapOutputWithContext(context.Background())
}

func (i OrganizationPermissionMap) ToOrganizationPermissionMapOutputWithContext(ctx context.Context) OrganizationPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPermissionMapOutput)
}

type OrganizationPermissionOutput struct{ *pulumi.OutputState }

func (OrganizationPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationPermission)(nil)).Elem()
}

func (o OrganizationPermissionOutput) ToOrganizationPermissionOutput() OrganizationPermissionOutput {
	return o
}

func (o OrganizationPermissionOutput) ToOrganizationPermissionOutputWithContext(ctx context.Context) OrganizationPermissionOutput {
	return o
}

// Organization ID.
func (o OrganizationPermissionOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPermission) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Permissions to grant to principals.
func (o OrganizationPermissionOutput) Permissions() OrganizationPermissionPermissionArrayOutput {
	return o.ApplyT(func(v *OrganizationPermission) OrganizationPermissionPermissionArrayOutput { return v.Permissions }).(OrganizationPermissionPermissionArrayOutput)
}

// Resource ID.
func (o OrganizationPermissionOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPermission) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Resource type. The possible values are `project`.
func (o OrganizationPermissionOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPermission) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

type OrganizationPermissionArrayOutput struct{ *pulumi.OutputState }

func (OrganizationPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationPermission)(nil)).Elem()
}

func (o OrganizationPermissionArrayOutput) ToOrganizationPermissionArrayOutput() OrganizationPermissionArrayOutput {
	return o
}

func (o OrganizationPermissionArrayOutput) ToOrganizationPermissionArrayOutputWithContext(ctx context.Context) OrganizationPermissionArrayOutput {
	return o
}

func (o OrganizationPermissionArrayOutput) Index(i pulumi.IntInput) OrganizationPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationPermission {
		return vs[0].([]*OrganizationPermission)[vs[1].(int)]
	}).(OrganizationPermissionOutput)
}

type OrganizationPermissionMapOutput struct{ *pulumi.OutputState }

func (OrganizationPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationPermission)(nil)).Elem()
}

func (o OrganizationPermissionMapOutput) ToOrganizationPermissionMapOutput() OrganizationPermissionMapOutput {
	return o
}

func (o OrganizationPermissionMapOutput) ToOrganizationPermissionMapOutputWithContext(ctx context.Context) OrganizationPermissionMapOutput {
	return o
}

func (o OrganizationPermissionMapOutput) MapIndex(k pulumi.StringInput) OrganizationPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationPermission {
		return vs[0].(map[string]*OrganizationPermission)[vs[1].(string)]
	}).(OrganizationPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPermissionInput)(nil)).Elem(), &OrganizationPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPermissionArrayInput)(nil)).Elem(), OrganizationPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPermissionMapInput)(nil)).Elem(), OrganizationPermissionMap{})
	pulumi.RegisterOutputType(OrganizationPermissionOutput{})
	pulumi.RegisterOutputType(OrganizationPermissionArrayOutput{})
	pulumi.RegisterOutputType(OrganizationPermissionMapOutput{})
}
