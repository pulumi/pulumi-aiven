// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ServiceIntegrationEndpoint struct {
	s *pulumi.ResourceState
}

// NewServiceIntegrationEndpoint registers a new resource with the given unique name, arguments, and options.
func NewServiceIntegrationEndpoint(ctx *pulumi.Context,
	name string, args *ServiceIntegrationEndpointArgs, opts ...pulumi.ResourceOpt) (*ServiceIntegrationEndpoint, error) {
	if args == nil || args.EndpointName == nil {
		return nil, errors.New("missing required argument 'EndpointName'")
	}
	if args == nil || args.EndpointType == nil {
		return nil, errors.New("missing required argument 'EndpointType'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["datadogUserConfig"] = nil
		inputs["endpointName"] = nil
		inputs["endpointType"] = nil
		inputs["externalElasticsearchLogsUserConfig"] = nil
		inputs["project"] = nil
		inputs["prometheusUserConfig"] = nil
		inputs["rsyslogUserConfig"] = nil
	} else {
		inputs["datadogUserConfig"] = args.DatadogUserConfig
		inputs["endpointName"] = args.EndpointName
		inputs["endpointType"] = args.EndpointType
		inputs["externalElasticsearchLogsUserConfig"] = args.ExternalElasticsearchLogsUserConfig
		inputs["project"] = args.Project
		inputs["prometheusUserConfig"] = args.PrometheusUserConfig
		inputs["rsyslogUserConfig"] = args.RsyslogUserConfig
	}
	inputs["endpointConfig"] = nil
	s, err := ctx.RegisterResource("aiven:index/serviceIntegrationEndpoint:ServiceIntegrationEndpoint", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceIntegrationEndpoint{s: s}, nil
}

// GetServiceIntegrationEndpoint gets an existing ServiceIntegrationEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceIntegrationEndpoint(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceIntegrationEndpointState, opts ...pulumi.ResourceOpt) (*ServiceIntegrationEndpoint, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["datadogUserConfig"] = state.DatadogUserConfig
		inputs["endpointConfig"] = state.EndpointConfig
		inputs["endpointName"] = state.EndpointName
		inputs["endpointType"] = state.EndpointType
		inputs["externalElasticsearchLogsUserConfig"] = state.ExternalElasticsearchLogsUserConfig
		inputs["project"] = state.Project
		inputs["prometheusUserConfig"] = state.PrometheusUserConfig
		inputs["rsyslogUserConfig"] = state.RsyslogUserConfig
	}
	s, err := ctx.ReadResource("aiven:index/serviceIntegrationEndpoint:ServiceIntegrationEndpoint", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceIntegrationEndpoint{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServiceIntegrationEndpoint) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServiceIntegrationEndpoint) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Datadog specific user configurable settings
func (r *ServiceIntegrationEndpoint) DatadogUserConfig() *pulumi.Output {
	return r.s.State["datadogUserConfig"]
}

// Integration endpoint specific backend configuration
func (r *ServiceIntegrationEndpoint) EndpointConfig() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["endpointConfig"])
}

// Name of the service integration endpoint
func (r *ServiceIntegrationEndpoint) EndpointName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpointName"])
}

// Type of the service integration endpoint
func (r *ServiceIntegrationEndpoint) EndpointType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpointType"])
}

// external elasticsearch specific user configurable settings
func (r *ServiceIntegrationEndpoint) ExternalElasticsearchLogsUserConfig() *pulumi.Output {
	return r.s.State["externalElasticsearchLogsUserConfig"]
}

// Project the service integration endpoint belongs to
func (r *ServiceIntegrationEndpoint) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Prometheus specific user configurable settings
func (r *ServiceIntegrationEndpoint) PrometheusUserConfig() *pulumi.Output {
	return r.s.State["prometheusUserConfig"]
}

// rsyslog specific user configurable settings
func (r *ServiceIntegrationEndpoint) RsyslogUserConfig() *pulumi.Output {
	return r.s.State["rsyslogUserConfig"]
}

// Input properties used for looking up and filtering ServiceIntegrationEndpoint resources.
type ServiceIntegrationEndpointState struct {
	// Datadog specific user configurable settings
	DatadogUserConfig interface{}
	// Integration endpoint specific backend configuration
	EndpointConfig interface{}
	// Name of the service integration endpoint
	EndpointName interface{}
	// Type of the service integration endpoint
	EndpointType interface{}
	// external elasticsearch specific user configurable settings
	ExternalElasticsearchLogsUserConfig interface{}
	// Project the service integration endpoint belongs to
	Project interface{}
	// Prometheus specific user configurable settings
	PrometheusUserConfig interface{}
	// rsyslog specific user configurable settings
	RsyslogUserConfig interface{}
}

// The set of arguments for constructing a ServiceIntegrationEndpoint resource.
type ServiceIntegrationEndpointArgs struct {
	// Datadog specific user configurable settings
	DatadogUserConfig interface{}
	// Name of the service integration endpoint
	EndpointName interface{}
	// Type of the service integration endpoint
	EndpointType interface{}
	// external elasticsearch specific user configurable settings
	ExternalElasticsearchLogsUserConfig interface{}
	// Project the service integration endpoint belongs to
	Project interface{}
	// Prometheus specific user configurable settings
	PrometheusUserConfig interface{}
	// rsyslog specific user configurable settings
	RsyslogUserConfig interface{}
}
