// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about a connection pool in an Aiven for PostgreSQLÂ® service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.LookupConnectionPool(ctx, &aiven.LookupConnectionPoolArgs{
//				Project:     exampleProject.Project,
//				ServiceName: examplePostgres.ServiceName,
//				PoolName:    "example-pool",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupConnectionPool(ctx *pulumi.Context, args *LookupConnectionPoolArgs, opts ...pulumi.InvokeOption) (*LookupConnectionPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionPoolResult
	err := ctx.Invoke("aiven:index/getConnectionPool:getConnectionPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectionPool.
type LookupConnectionPoolArgs struct {
	// Name of the pool. Changing this property forces recreation of the resource.
	PoolName string `pulumi:"poolName"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getConnectionPool.
type LookupConnectionPoolResult struct {
	// The URI for connecting to the pool.
	ConnectionUri string `pulumi:"connectionUri"`
	// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	DatabaseName string `pulumi:"databaseName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The [operational mode](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling#pooling-modes). The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
	PoolMode string `pulumi:"poolMode"`
	// Name of the pool. Changing this property forces recreation of the resource.
	PoolName string `pulumi:"poolName"`
	// The number of PostgreSQL server connections this pool can use at a time. This does not affect the number of incoming connections. Each pool can handle a minimum of 5000 client connections. The default value is `10`.
	PoolSize int `pulumi:"poolSize"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
	Username string `pulumi:"username"`
}

func LookupConnectionPoolOutput(ctx *pulumi.Context, args LookupConnectionPoolOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectionPoolResult, error) {
			args := v.(LookupConnectionPoolArgs)
			r, err := LookupConnectionPool(ctx, &args, opts...)
			var s LookupConnectionPoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectionPoolResultOutput)
}

// A collection of arguments for invoking getConnectionPool.
type LookupConnectionPoolOutputArgs struct {
	// Name of the pool. Changing this property forces recreation of the resource.
	PoolName pulumi.StringInput `pulumi:"poolName"`
	// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput `pulumi:"project"`
	// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupConnectionPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionPoolArgs)(nil)).Elem()
}

// A collection of values returned by getConnectionPool.
type LookupConnectionPoolResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionPoolResult)(nil)).Elem()
}

func (o LookupConnectionPoolResultOutput) ToLookupConnectionPoolResultOutput() LookupConnectionPoolResultOutput {
	return o
}

func (o LookupConnectionPoolResultOutput) ToLookupConnectionPoolResultOutputWithContext(ctx context.Context) LookupConnectionPoolResultOutput {
	return o
}

// The URI for connecting to the pool.
func (o LookupConnectionPoolResultOutput) ConnectionUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionPoolResult) string { return v.ConnectionUri }).(pulumi.StringOutput)
}

// The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o LookupConnectionPoolResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionPoolResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectionPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

// The [operational mode](https://aiven.io/docs/products/postgresql/concepts/pg-connection-pooling#pooling-modes). The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
func (o LookupConnectionPoolResultOutput) PoolMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionPoolResult) string { return v.PoolMode }).(pulumi.StringOutput)
}

// Name of the pool. Changing this property forces recreation of the resource.
func (o LookupConnectionPoolResultOutput) PoolName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionPoolResult) string { return v.PoolName }).(pulumi.StringOutput)
}

// The number of PostgreSQL server connections this pool can use at a time. This does not affect the number of incoming connections. Each pool can handle a minimum of 5000 client connections. The default value is `10`.
func (o LookupConnectionPoolResultOutput) PoolSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupConnectionPoolResult) int { return v.PoolSize }).(pulumi.IntOutput)
}

// The name of the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o LookupConnectionPoolResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionPoolResult) string { return v.Project }).(pulumi.StringOutput)
}

// The name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o LookupConnectionPoolResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionPoolResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
func (o LookupConnectionPoolResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionPoolResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectionPoolResultOutput{})
}
