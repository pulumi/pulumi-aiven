// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupM3dbUser(ctx *pulumi.Context, args *LookupM3dbUserArgs, opts ...pulumi.InvokeOption) (*LookupM3dbUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupM3dbUserResult
	err := ctx.Invoke("aiven:index/getM3dbUser:getM3dbUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getM3dbUser.
type LookupM3dbUserArgs struct {
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	Username    string `pulumi:"username"`
}

// A collection of values returned by getM3dbUser.
type LookupM3dbUserResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	Password    string `pulumi:"password"`
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	Type        string `pulumi:"type"`
	Username    string `pulumi:"username"`
}

func LookupM3dbUserOutput(ctx *pulumi.Context, args LookupM3dbUserOutputArgs, opts ...pulumi.InvokeOption) LookupM3dbUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupM3dbUserResultOutput, error) {
			args := v.(LookupM3dbUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aiven:index/getM3dbUser:getM3dbUser", args, LookupM3dbUserResultOutput{}, options).(LookupM3dbUserResultOutput), nil
		}).(LookupM3dbUserResultOutput)
}

// A collection of arguments for invoking getM3dbUser.
type LookupM3dbUserOutputArgs struct {
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	Username    pulumi.StringInput `pulumi:"username"`
}

func (LookupM3dbUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupM3dbUserArgs)(nil)).Elem()
}

// A collection of values returned by getM3dbUser.
type LookupM3dbUserResultOutput struct{ *pulumi.OutputState }

func (LookupM3dbUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupM3dbUserResult)(nil)).Elem()
}

func (o LookupM3dbUserResultOutput) ToLookupM3dbUserResultOutput() LookupM3dbUserResultOutput {
	return o
}

func (o LookupM3dbUserResultOutput) ToLookupM3dbUserResultOutputWithContext(ctx context.Context) LookupM3dbUserResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupM3dbUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3dbUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupM3dbUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3dbUserResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupM3dbUserResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3dbUserResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupM3dbUserResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3dbUserResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupM3dbUserResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3dbUserResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupM3dbUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3dbUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupM3dbUserResultOutput{})
}
