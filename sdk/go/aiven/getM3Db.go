// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # M3 DB Data Source
//
// The M3 DB data source provides information about the existing Aiven M3 services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupM3Db(ctx, &GetM3DbArgs{
// 			Project:     data.Aiven_project.Foo.Project,
// 			ServiceName: "my-m3db",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupM3Db(ctx *pulumi.Context, args *LookupM3DbArgs, opts ...pulumi.InvokeOption) (*LookupM3DbResult, error) {
	var rv LookupM3DbResult
	err := ctx.Invoke("aiven:index/getM3Db:getM3Db", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getM3Db.
type LookupM3DbArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName  *string            `pulumi:"cloudName"`
	Components []GetM3DbComponent `pulumi:"components"`
	// M3 specific server provided values.
	M3db *GetM3DbM3db `pulumi:"m3db"`
	// defines M3 specific additional configuration options. The following
	// configuration options available:
	M3dbUserConfig *GetM3DbM3dbUserConfig `pulumi:"m3dbUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// M3 hostname.
	ServiceHost         *string                     `pulumi:"serviceHost"`
	ServiceIntegrations []GetM3DbServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// Password used for connecting to the M3 service, if applicable.
	ServicePassword *string `pulumi:"servicePassword"`
	// M3 port.
	ServicePort *int    `pulumi:"servicePort"`
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the M3 service.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the M3 service, if applicable.
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state.
	State *string `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// A collection of values returned by getM3Db.
type LookupM3DbResult struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName  *string            `pulumi:"cloudName"`
	Components []GetM3DbComponent `pulumi:"components"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// M3 specific server provided values.
	M3db GetM3DbM3db `pulumi:"m3db"`
	// defines M3 specific additional configuration options. The following
	// configuration options available:
	M3dbUserConfig *GetM3DbM3dbUserConfig `pulumi:"m3dbUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan    *string `pulumi:"plan"`
	Project string  `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// M3 hostname.
	ServiceHost         string                      `pulumi:"serviceHost"`
	ServiceIntegrations []GetM3DbServiceIntegration `pulumi:"serviceIntegrations"`
	ServiceName         string                      `pulumi:"serviceName"`
	// Password used for connecting to the M3 service, if applicable.
	ServicePassword string `pulumi:"servicePassword"`
	// M3 port.
	ServicePort int    `pulumi:"servicePort"`
	ServiceType string `pulumi:"serviceType"`
	// URI for connecting to the M3 service.
	ServiceUri string `pulumi:"serviceUri"`
	// Username used for connecting to the M3 service, if applicable.
	ServiceUsername string `pulumi:"serviceUsername"`
	// Service state.
	State string `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

func LookupM3DbOutput(ctx *pulumi.Context, args LookupM3DbOutputArgs, opts ...pulumi.InvokeOption) LookupM3DbResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupM3DbResult, error) {
			args := v.(LookupM3DbArgs)
			r, err := LookupM3Db(ctx, &args, opts...)
			return *r, err
		}).(LookupM3DbResultOutput)
}

// A collection of arguments for invoking getM3Db.
type LookupM3DbOutputArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName  pulumi.StringPtrInput      `pulumi:"cloudName"`
	Components GetM3DbComponentArrayInput `pulumi:"components"`
	// M3 specific server provided values.
	M3db GetM3DbM3dbPtrInput `pulumi:"m3db"`
	// defines M3 specific additional configuration options. The following
	// configuration options available:
	M3dbUserConfig GetM3DbM3dbUserConfigPtrInput `pulumi:"m3dbUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringInput `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput `pulumi:"projectVpcId"`
	// M3 hostname.
	ServiceHost         pulumi.StringPtrInput               `pulumi:"serviceHost"`
	ServiceIntegrations GetM3DbServiceIntegrationArrayInput `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// Password used for connecting to the M3 service, if applicable.
	ServicePassword pulumi.StringPtrInput `pulumi:"servicePassword"`
	// M3 port.
	ServicePort pulumi.IntPtrInput    `pulumi:"servicePort"`
	ServiceType pulumi.StringPtrInput `pulumi:"serviceType"`
	// URI for connecting to the M3 service.
	ServiceUri pulumi.StringPtrInput `pulumi:"serviceUri"`
	// Username used for connecting to the M3 service, if applicable.
	ServiceUsername pulumi.StringPtrInput `pulumi:"serviceUsername"`
	// Service state.
	State pulumi.StringPtrInput `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput `pulumi:"terminationProtection"`
}

func (LookupM3DbOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupM3DbArgs)(nil)).Elem()
}

// A collection of values returned by getM3Db.
type LookupM3DbResultOutput struct{ *pulumi.OutputState }

func (LookupM3DbResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupM3DbResult)(nil)).Elem()
}

func (o LookupM3DbResultOutput) ToLookupM3DbResultOutput() LookupM3DbResultOutput {
	return o
}

func (o LookupM3DbResultOutput) ToLookupM3DbResultOutputWithContext(ctx context.Context) LookupM3DbResultOutput {
	return o
}

// defines where the cloud provider and region where the service is hosted
// in. This can be changed freely after service is created. Changing the value will trigger
// a potentially lengthy migration process for the service. Format is cloud provider name
// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
// specific region name. These are documented on each Cloud provider's own support articles,
// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
func (o LookupM3DbResultOutput) CloudName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupM3DbResult) *string { return v.CloudName }).(pulumi.StringPtrOutput)
}

func (o LookupM3DbResultOutput) Components() GetM3DbComponentArrayOutput {
	return o.ApplyT(func(v LookupM3DbResult) []GetM3DbComponent { return v.Components }).(GetM3DbComponentArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupM3DbResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3DbResult) string { return v.Id }).(pulumi.StringOutput)
}

// M3 specific server provided values.
func (o LookupM3DbResultOutput) M3db() GetM3DbM3dbOutput {
	return o.ApplyT(func(v LookupM3DbResult) GetM3DbM3db { return v.M3db }).(GetM3DbM3dbOutput)
}

// defines M3 specific additional configuration options. The following
// configuration options available:
func (o LookupM3DbResultOutput) M3dbUserConfig() GetM3DbM3dbUserConfigPtrOutput {
	return o.ApplyT(func(v LookupM3DbResult) *GetM3DbM3dbUserConfig { return v.M3dbUserConfig }).(GetM3DbM3dbUserConfigPtrOutput)
}

// day of week when maintenance operations should be performed.
// On monday, tuesday, wednesday, etc.
func (o LookupM3DbResultOutput) MaintenanceWindowDow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupM3DbResult) *string { return v.MaintenanceWindowDow }).(pulumi.StringPtrOutput)
}

// time of day when maintenance operations should be performed.
// UTC time in HH:mm:ss format.
func (o LookupM3DbResultOutput) MaintenanceWindowTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupM3DbResult) *string { return v.MaintenanceWindowTime }).(pulumi.StringPtrOutput)
}

// defines what kind of computing resources are allocated for the service. It can
// be changed after creation, though there are some restrictions when going to a smaller
// plan such as the new plan must have sufficient amount of disk space to store all current
// data and switching to a plan with fewer nodes might not be supported. The basic plan
// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
// (roughly) the amount of memory on each node (also other attributes like number of CPUs
// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
func (o LookupM3DbResultOutput) Plan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupM3DbResult) *string { return v.Plan }).(pulumi.StringPtrOutput)
}

func (o LookupM3DbResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3DbResult) string { return v.Project }).(pulumi.StringOutput)
}

// optionally specifies the VPC the service should run in. If the value
// is not set the service is not run inside a VPC. When set, the value should be given as a
// reference as shown above to set up dependencies correctly and the VPC must be in the same
// cloud and region as the service itself. Project can be freely moved to and from VPC after
// creation but doing so triggers migration to new servers so the operation can take
// significant amount of time to complete if the service has a lot of data.
func (o LookupM3DbResultOutput) ProjectVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupM3DbResult) *string { return v.ProjectVpcId }).(pulumi.StringPtrOutput)
}

// M3 hostname.
func (o LookupM3DbResultOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3DbResult) string { return v.ServiceHost }).(pulumi.StringOutput)
}

func (o LookupM3DbResultOutput) ServiceIntegrations() GetM3DbServiceIntegrationArrayOutput {
	return o.ApplyT(func(v LookupM3DbResult) []GetM3DbServiceIntegration { return v.ServiceIntegrations }).(GetM3DbServiceIntegrationArrayOutput)
}

func (o LookupM3DbResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3DbResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Password used for connecting to the M3 service, if applicable.
func (o LookupM3DbResultOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3DbResult) string { return v.ServicePassword }).(pulumi.StringOutput)
}

// M3 port.
func (o LookupM3DbResultOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupM3DbResult) int { return v.ServicePort }).(pulumi.IntOutput)
}

func (o LookupM3DbResultOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3DbResult) string { return v.ServiceType }).(pulumi.StringOutput)
}

// URI for connecting to the M3 service.
func (o LookupM3DbResultOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3DbResult) string { return v.ServiceUri }).(pulumi.StringOutput)
}

// Username used for connecting to the M3 service, if applicable.
func (o LookupM3DbResultOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3DbResult) string { return v.ServiceUsername }).(pulumi.StringOutput)
}

// Service state.
func (o LookupM3DbResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupM3DbResult) string { return v.State }).(pulumi.StringOutput)
}

// prevents the service from being deleted. It is recommended to
// set this to `true` for all production services to prevent unintentional service
// deletion. This does not shield against deleting databases or topics but for services
// with backups much of the content can at least be restored from backup in case accidental
// deletion is done.
func (o LookupM3DbResultOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupM3DbResult) *bool { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupM3DbResultOutput{})
}
