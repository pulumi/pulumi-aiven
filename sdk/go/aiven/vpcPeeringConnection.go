// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v2/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewVpcPeeringConnection(ctx, "mypeeringconnection", &aiven.VpcPeeringConnectionArgs{
// 			PeerCloudAccount: pulumi.String("<PEER_ACCOUNT_ID>"),
// 			PeerRegion:       pulumi.String("<PEER_REGION>"),
// 			PeerVpc:          pulumi.String("<PEER_VPC_ID/NAME>"),
// 			VpcId:            pulumi.String(aiven_project_vpc.Myvpc.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VpcPeeringConnection struct {
	pulumi.CustomResourceState

	// Custom Terraform Client timeouts
	//
	// Deprecated: use timeouts instead
	ClientTimeout VpcPeeringConnectionClientTimeoutPtrOutput `pulumi:"clientTimeout"`
	// AWS account ID or GCP project ID of the peered VPC
	PeerCloudAccount pulumi.StringOutput `pulumi:"peerCloudAccount"`
	// AWS region of the peered VPC (if not in the same region as Aiven VPC)
	PeerRegion pulumi.StringPtrOutput `pulumi:"peerRegion"`
	// AWS VPC ID or GCP VPC network name of the peered VPC
	PeerVpc pulumi.StringOutput `pulumi:"peerVpc"`
	// Cloud provider identifier for the peering connection if available
	PeeringConnectionId pulumi.StringOutput `pulumi:"peeringConnectionId"`
	// State of the peering connection
	State pulumi.StringOutput `pulumi:"state"`
	// State-specific help or error information
	StateInfo pulumi.MapOutput `pulumi:"stateInfo"`
	// The VPC the peering connection belongs to
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnection(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	if args == nil || args.PeerCloudAccount == nil {
		return nil, errors.New("missing required argument 'PeerCloudAccount'")
	}
	if args == nil || args.PeerVpc == nil {
		return nil, errors.New("missing required argument 'PeerVpc'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	if args == nil {
		args = &VpcPeeringConnectionArgs{}
	}
	var resource VpcPeeringConnection
	err := ctx.RegisterResource("aiven:index/vpcPeeringConnection:VpcPeeringConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnection gets an existing VpcPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionState, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	var resource VpcPeeringConnection
	err := ctx.ReadResource("aiven:index/vpcPeeringConnection:VpcPeeringConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnection resources.
type vpcPeeringConnectionState struct {
	// Custom Terraform Client timeouts
	//
	// Deprecated: use timeouts instead
	ClientTimeout *VpcPeeringConnectionClientTimeout `pulumi:"clientTimeout"`
	// AWS account ID or GCP project ID of the peered VPC
	PeerCloudAccount *string `pulumi:"peerCloudAccount"`
	// AWS region of the peered VPC (if not in the same region as Aiven VPC)
	PeerRegion *string `pulumi:"peerRegion"`
	// AWS VPC ID or GCP VPC network name of the peered VPC
	PeerVpc *string `pulumi:"peerVpc"`
	// Cloud provider identifier for the peering connection if available
	PeeringConnectionId *string `pulumi:"peeringConnectionId"`
	// State of the peering connection
	State *string `pulumi:"state"`
	// State-specific help or error information
	StateInfo map[string]interface{} `pulumi:"stateInfo"`
	// The VPC the peering connection belongs to
	VpcId *string `pulumi:"vpcId"`
}

type VpcPeeringConnectionState struct {
	// Custom Terraform Client timeouts
	//
	// Deprecated: use timeouts instead
	ClientTimeout VpcPeeringConnectionClientTimeoutPtrInput
	// AWS account ID or GCP project ID of the peered VPC
	PeerCloudAccount pulumi.StringPtrInput
	// AWS region of the peered VPC (if not in the same region as Aiven VPC)
	PeerRegion pulumi.StringPtrInput
	// AWS VPC ID or GCP VPC network name of the peered VPC
	PeerVpc pulumi.StringPtrInput
	// Cloud provider identifier for the peering connection if available
	PeeringConnectionId pulumi.StringPtrInput
	// State of the peering connection
	State pulumi.StringPtrInput
	// State-specific help or error information
	StateInfo pulumi.MapInput
	// The VPC the peering connection belongs to
	VpcId pulumi.StringPtrInput
}

func (VpcPeeringConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionState)(nil)).Elem()
}

type vpcPeeringConnectionArgs struct {
	// Custom Terraform Client timeouts
	//
	// Deprecated: use timeouts instead
	ClientTimeout *VpcPeeringConnectionClientTimeout `pulumi:"clientTimeout"`
	// AWS account ID or GCP project ID of the peered VPC
	PeerCloudAccount string `pulumi:"peerCloudAccount"`
	// AWS region of the peered VPC (if not in the same region as Aiven VPC)
	PeerRegion *string `pulumi:"peerRegion"`
	// AWS VPC ID or GCP VPC network name of the peered VPC
	PeerVpc string `pulumi:"peerVpc"`
	// The VPC the peering connection belongs to
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcPeeringConnection resource.
type VpcPeeringConnectionArgs struct {
	// Custom Terraform Client timeouts
	//
	// Deprecated: use timeouts instead
	ClientTimeout VpcPeeringConnectionClientTimeoutPtrInput
	// AWS account ID or GCP project ID of the peered VPC
	PeerCloudAccount pulumi.StringInput
	// AWS region of the peered VPC (if not in the same region as Aiven VPC)
	PeerRegion pulumi.StringPtrInput
	// AWS VPC ID or GCP VPC network name of the peered VPC
	PeerVpc pulumi.StringInput
	// The VPC the peering connection belongs to
	VpcId pulumi.StringInput
}

func (VpcPeeringConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionArgs)(nil)).Elem()
}
