// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type VpcPeeringConnection struct {
	s *pulumi.ResourceState
}

// NewVpcPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnection(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionArgs, opts ...pulumi.ResourceOpt) (*VpcPeeringConnection, error) {
	if args == nil || args.PeerCloudAccount == nil {
		return nil, errors.New("missing required argument 'PeerCloudAccount'")
	}
	if args == nil || args.PeerVpc == nil {
		return nil, errors.New("missing required argument 'PeerVpc'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["peerCloudAccount"] = nil
		inputs["peerRegion"] = nil
		inputs["peerVpc"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["peerCloudAccount"] = args.PeerCloudAccount
		inputs["peerRegion"] = args.PeerRegion
		inputs["peerVpc"] = args.PeerVpc
		inputs["vpcId"] = args.VpcId
	}
	inputs["peeringConnectionId"] = nil
	inputs["state"] = nil
	s, err := ctx.RegisterResource("aiven:index/vpcPeeringConnection:VpcPeeringConnection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpcPeeringConnection{s: s}, nil
}

// GetVpcPeeringConnection gets an existing VpcPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VpcPeeringConnectionState, opts ...pulumi.ResourceOpt) (*VpcPeeringConnection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["peerCloudAccount"] = state.PeerCloudAccount
		inputs["peerRegion"] = state.PeerRegion
		inputs["peerVpc"] = state.PeerVpc
		inputs["peeringConnectionId"] = state.PeeringConnectionId
		inputs["state"] = state.State
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("aiven:index/vpcPeeringConnection:VpcPeeringConnection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpcPeeringConnection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VpcPeeringConnection) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VpcPeeringConnection) ID() pulumi.IDOutput {
	return r.s.ID()
}

// AWS account ID or GCP project ID of the peered VPC
func (r *VpcPeeringConnection) PeerCloudAccount() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["peerCloudAccount"])
}

// AWS region of the peered VPC (if not in the same region as Aiven VPC)
func (r *VpcPeeringConnection) PeerRegion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["peerRegion"])
}

// AWS VPC ID or GCP VPC network name of the peered VPC
func (r *VpcPeeringConnection) PeerVpc() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["peerVpc"])
}

// Cloud provider identifier for the peering connection if available
func (r *VpcPeeringConnection) PeeringConnectionId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["peeringConnectionId"])
}

// State of the peering connection
func (r *VpcPeeringConnection) State() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["state"])
}

// The VPC the peering connection belongs to
func (r *VpcPeeringConnection) VpcId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering VpcPeeringConnection resources.
type VpcPeeringConnectionState struct {
	// AWS account ID or GCP project ID of the peered VPC
	PeerCloudAccount interface{}
	// AWS region of the peered VPC (if not in the same region as Aiven VPC)
	PeerRegion interface{}
	// AWS VPC ID or GCP VPC network name of the peered VPC
	PeerVpc interface{}
	// Cloud provider identifier for the peering connection if available
	PeeringConnectionId interface{}
	// State of the peering connection
	State interface{}
	// The VPC the peering connection belongs to
	VpcId interface{}
}

// The set of arguments for constructing a VpcPeeringConnection resource.
type VpcPeeringConnectionArgs struct {
	// AWS account ID or GCP project ID of the peered VPC
	PeerCloudAccount interface{}
	// AWS region of the peered VPC (if not in the same region as Aiven VPC)
	PeerRegion interface{}
	// AWS VPC ID or GCP VPC network name of the peered VPC
	PeerVpc interface{}
	// The VPC the peering connection belongs to
	VpcId interface{}
}
