// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Kafka Schema resource allows the creation and management of Aiven Kafka Schemas.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewKafkaSchema(ctx, "kafka-schema1", &aiven.KafkaSchemaArgs{
// 			Project:            pulumi.Any(aiven_project.Kafka - schemas - project1.Project),
// 			ServiceName:        pulumi.Any(aiven_kafka.Kafka - service1.Service_name),
// 			SubjectName:        pulumi.String("kafka-schema1"),
// 			CompatibilityLevel: pulumi.String("FORWARD"),
// 			Schema: pulumi.String(fmt.Sprintf(`    {
//        "doc": "example",
//        "fields": [{
//            "default": 5,
//            "doc": "my test number",
//            "name": "test",
//            "namespace": "test",
//            "type": "int"
//        }],
//        "name": "example",
//        "namespace": "example",
//        "type": "record"
//     }
// `)),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import aiven:index/kafkaSchema:KafkaSchema kafka-schema1 project/service_name/subject_name
// ```
type KafkaSchema struct {
	pulumi.CustomResourceState

	// Kafka Schemas compatibility level. The possible values are `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE` and `NONE`.
	CompatibilityLevel pulumi.StringPtrOutput `pulumi:"compatibilityLevel"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Kafka Schema type JSON or AVRO
	SchemaType pulumi.StringPtrOutput `pulumi:"schemaType"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The Kafka Schema Subject name. This property cannot be changed, doing so forces recreation of the resource.
	SubjectName pulumi.StringOutput `pulumi:"subjectName"`
	// Kafka Schema configuration version.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewKafkaSchema registers a new resource with the given unique name, arguments, and options.
func NewKafkaSchema(ctx *pulumi.Context,
	name string, args *KafkaSchemaArgs, opts ...pulumi.ResourceOption) (*KafkaSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.SubjectName == nil {
		return nil, errors.New("invalid value for required argument 'SubjectName'")
	}
	var resource KafkaSchema
	err := ctx.RegisterResource("aiven:index/kafkaSchema:KafkaSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaSchema gets an existing KafkaSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaSchemaState, opts ...pulumi.ResourceOption) (*KafkaSchema, error) {
	var resource KafkaSchema
	err := ctx.ReadResource("aiven:index/kafkaSchema:KafkaSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaSchema resources.
type kafkaSchemaState struct {
	// Kafka Schemas compatibility level. The possible values are `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE` and `NONE`.
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema *string `pulumi:"schema"`
	// Kafka Schema type JSON or AVRO
	SchemaType *string `pulumi:"schemaType"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
	// The Kafka Schema Subject name. This property cannot be changed, doing so forces recreation of the resource.
	SubjectName *string `pulumi:"subjectName"`
	// Kafka Schema configuration version.
	Version *int `pulumi:"version"`
}

type KafkaSchemaState struct {
	// Kafka Schemas compatibility level. The possible values are `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE` and `NONE`.
	CompatibilityLevel pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema pulumi.StringPtrInput
	// Kafka Schema type JSON or AVRO
	SchemaType pulumi.StringPtrInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
	// The Kafka Schema Subject name. This property cannot be changed, doing so forces recreation of the resource.
	SubjectName pulumi.StringPtrInput
	// Kafka Schema configuration version.
	Version pulumi.IntPtrInput
}

func (KafkaSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaState)(nil)).Elem()
}

type kafkaSchemaArgs struct {
	// Kafka Schemas compatibility level. The possible values are `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE` and `NONE`.
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project string `pulumi:"project"`
	// Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema string `pulumi:"schema"`
	// Kafka Schema type JSON or AVRO
	SchemaType *string `pulumi:"schemaType"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
	// The Kafka Schema Subject name. This property cannot be changed, doing so forces recreation of the resource.
	SubjectName string `pulumi:"subjectName"`
}

// The set of arguments for constructing a KafkaSchema resource.
type KafkaSchemaArgs struct {
	// Kafka Schemas compatibility level. The possible values are `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE` and `NONE`.
	CompatibilityLevel pulumi.StringPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
	// reference. This property cannot be changed, doing so forces recreation of the resource.
	Project pulumi.StringInput
	// Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema pulumi.StringInput
	// Kafka Schema type JSON or AVRO
	SchemaType pulumi.StringPtrInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
	// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
	ServiceName pulumi.StringInput
	// The Kafka Schema Subject name. This property cannot be changed, doing so forces recreation of the resource.
	SubjectName pulumi.StringInput
}

func (KafkaSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaArgs)(nil)).Elem()
}

type KafkaSchemaInput interface {
	pulumi.Input

	ToKafkaSchemaOutput() KafkaSchemaOutput
	ToKafkaSchemaOutputWithContext(ctx context.Context) KafkaSchemaOutput
}

func (*KafkaSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSchema)(nil)).Elem()
}

func (i *KafkaSchema) ToKafkaSchemaOutput() KafkaSchemaOutput {
	return i.ToKafkaSchemaOutputWithContext(context.Background())
}

func (i *KafkaSchema) ToKafkaSchemaOutputWithContext(ctx context.Context) KafkaSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSchemaOutput)
}

// KafkaSchemaArrayInput is an input type that accepts KafkaSchemaArray and KafkaSchemaArrayOutput values.
// You can construct a concrete instance of `KafkaSchemaArrayInput` via:
//
//          KafkaSchemaArray{ KafkaSchemaArgs{...} }
type KafkaSchemaArrayInput interface {
	pulumi.Input

	ToKafkaSchemaArrayOutput() KafkaSchemaArrayOutput
	ToKafkaSchemaArrayOutputWithContext(context.Context) KafkaSchemaArrayOutput
}

type KafkaSchemaArray []KafkaSchemaInput

func (KafkaSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaSchema)(nil)).Elem()
}

func (i KafkaSchemaArray) ToKafkaSchemaArrayOutput() KafkaSchemaArrayOutput {
	return i.ToKafkaSchemaArrayOutputWithContext(context.Background())
}

func (i KafkaSchemaArray) ToKafkaSchemaArrayOutputWithContext(ctx context.Context) KafkaSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSchemaArrayOutput)
}

// KafkaSchemaMapInput is an input type that accepts KafkaSchemaMap and KafkaSchemaMapOutput values.
// You can construct a concrete instance of `KafkaSchemaMapInput` via:
//
//          KafkaSchemaMap{ "key": KafkaSchemaArgs{...} }
type KafkaSchemaMapInput interface {
	pulumi.Input

	ToKafkaSchemaMapOutput() KafkaSchemaMapOutput
	ToKafkaSchemaMapOutputWithContext(context.Context) KafkaSchemaMapOutput
}

type KafkaSchemaMap map[string]KafkaSchemaInput

func (KafkaSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaSchema)(nil)).Elem()
}

func (i KafkaSchemaMap) ToKafkaSchemaMapOutput() KafkaSchemaMapOutput {
	return i.ToKafkaSchemaMapOutputWithContext(context.Background())
}

func (i KafkaSchemaMap) ToKafkaSchemaMapOutputWithContext(ctx context.Context) KafkaSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSchemaMapOutput)
}

type KafkaSchemaOutput struct{ *pulumi.OutputState }

func (KafkaSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSchema)(nil)).Elem()
}

func (o KafkaSchemaOutput) ToKafkaSchemaOutput() KafkaSchemaOutput {
	return o
}

func (o KafkaSchemaOutput) ToKafkaSchemaOutputWithContext(ctx context.Context) KafkaSchemaOutput {
	return o
}

// Kafka Schemas compatibility level. The possible values are `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE` and `NONE`.
func (o KafkaSchemaOutput) CompatibilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaSchema) pulumi.StringPtrOutput { return v.CompatibilityLevel }).(pulumi.StringPtrOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a
// reference. This property cannot be changed, doing so forces recreation of the resource.
func (o KafkaSchemaOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaSchema) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Kafka Schema configuration should be a valid Avro Schema JSON format.
func (o KafkaSchemaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaSchema) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Kafka Schema type JSON or AVRO
func (o KafkaSchemaOutput) SchemaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaSchema) pulumi.StringPtrOutput { return v.SchemaType }).(pulumi.StringPtrOutput)
}

// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this
// variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
func (o KafkaSchemaOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaSchema) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The Kafka Schema Subject name. This property cannot be changed, doing so forces recreation of the resource.
func (o KafkaSchemaOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaSchema) pulumi.StringOutput { return v.SubjectName }).(pulumi.StringOutput)
}

// Kafka Schema configuration version.
func (o KafkaSchemaOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaSchema) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type KafkaSchemaArrayOutput struct{ *pulumi.OutputState }

func (KafkaSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaSchema)(nil)).Elem()
}

func (o KafkaSchemaArrayOutput) ToKafkaSchemaArrayOutput() KafkaSchemaArrayOutput {
	return o
}

func (o KafkaSchemaArrayOutput) ToKafkaSchemaArrayOutputWithContext(ctx context.Context) KafkaSchemaArrayOutput {
	return o
}

func (o KafkaSchemaArrayOutput) Index(i pulumi.IntInput) KafkaSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaSchema {
		return vs[0].([]*KafkaSchema)[vs[1].(int)]
	}).(KafkaSchemaOutput)
}

type KafkaSchemaMapOutput struct{ *pulumi.OutputState }

func (KafkaSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaSchema)(nil)).Elem()
}

func (o KafkaSchemaMapOutput) ToKafkaSchemaMapOutput() KafkaSchemaMapOutput {
	return o
}

func (o KafkaSchemaMapOutput) ToKafkaSchemaMapOutputWithContext(ctx context.Context) KafkaSchemaMapOutput {
	return o
}

func (o KafkaSchemaMapOutput) MapIndex(k pulumi.StringInput) KafkaSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaSchema {
		return vs[0].(map[string]*KafkaSchema)[vs[1].(string)]
	}).(KafkaSchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaSchemaInput)(nil)).Elem(), &KafkaSchema{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaSchemaArrayInput)(nil)).Elem(), KafkaSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaSchemaMapInput)(nil)).Elem(), KafkaSchemaMap{})
	pulumi.RegisterOutputType(KafkaSchemaOutput{})
	pulumi.RegisterOutputType(KafkaSchemaArrayOutput{})
	pulumi.RegisterOutputType(KafkaSchemaMapOutput{})
}
