// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Kafka Schema Resource
//
// The Kafka Schema resource allows the creation and management of an Aiven Kafka Schemas.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewKafkaSchema(ctx, "kafka_schema1", &aiven.KafkaSchemaArgs{
// 			Project:            pulumi.Any(aiven_project.Kafka - schemas - project1.Project),
// 			ServiceName:        pulumi.Any(aiven_service.Kafka - service1.Service_name),
// 			SubjectName:        pulumi.String("kafka-schema1"),
// 			CompatibilityLevel: pulumi.String("FORWARD"),
// 			Schema:             pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "    {\n", "       \"doc\": \"example\",\n", "       \"fields\": [{\n", "           \"default\": 5,\n", "           \"doc\": \"my test number\",\n", "           \"name\": \"test\",\n", "           \"namespace\": \"test\",\n", "           \"type\": \"int\"\n", "       }],\n", "       \"name\": \"example\",\n", "       \"namespace\": \"example\",\n", "       \"type\": \"record\"\n", "    }\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type KafkaSchema struct {
	pulumi.CustomResourceState

	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel pulumi.StringPtrOutput `pulumi:"compatibilityLevel"`
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringOutput `pulumi:"project"`
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Service to link the Kafka Schema to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// is Kafka Schema subject name.
	SubjectName pulumi.StringOutput `pulumi:"subjectName"`
	// Kafka Schema configuration version
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewKafkaSchema registers a new resource with the given unique name, arguments, and options.
func NewKafkaSchema(ctx *pulumi.Context,
	name string, args *KafkaSchemaArgs, opts ...pulumi.ResourceOption) (*KafkaSchema, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Schema == nil {
		return nil, errors.New("missing required argument 'Schema'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.SubjectName == nil {
		return nil, errors.New("missing required argument 'SubjectName'")
	}
	if args == nil {
		args = &KafkaSchemaArgs{}
	}
	var resource KafkaSchema
	err := ctx.RegisterResource("aiven:index/kafkaSchema:KafkaSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaSchema gets an existing KafkaSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaSchemaState, opts ...pulumi.ResourceOption) (*KafkaSchema, error) {
	var resource KafkaSchema
	err := ctx.ReadResource("aiven:index/kafkaSchema:KafkaSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaSchema resources.
type kafkaSchemaState struct {
	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project *string `pulumi:"project"`
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema *string `pulumi:"schema"`
	// Service to link the Kafka Schema to
	ServiceName *string `pulumi:"serviceName"`
	// is Kafka Schema subject name.
	SubjectName *string `pulumi:"subjectName"`
	// Kafka Schema configuration version
	Version *int `pulumi:"version"`
}

type KafkaSchemaState struct {
	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel pulumi.StringPtrInput
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringPtrInput
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema pulumi.StringPtrInput
	// Service to link the Kafka Schema to
	ServiceName pulumi.StringPtrInput
	// is Kafka Schema subject name.
	SubjectName pulumi.StringPtrInput
	// Kafka Schema configuration version
	Version pulumi.IntPtrInput
}

func (KafkaSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaState)(nil)).Elem()
}

type kafkaSchemaArgs struct {
	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project string `pulumi:"project"`
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema string `pulumi:"schema"`
	// Service to link the Kafka Schema to
	ServiceName string `pulumi:"serviceName"`
	// is Kafka Schema subject name.
	SubjectName string `pulumi:"subjectName"`
}

// The set of arguments for constructing a KafkaSchema resource.
type KafkaSchemaArgs struct {
	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel pulumi.StringPtrInput
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringInput
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema pulumi.StringInput
	// Service to link the Kafka Schema to
	ServiceName pulumi.StringInput
	// is Kafka Schema subject name.
	SubjectName pulumi.StringInput
}

func (KafkaSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaArgs)(nil)).Elem()
}
