// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Kafka Schema Resource
//
// The Kafka Schema resource allows the creation and management of Aiven Kafka Schemas.
type KafkaSchema struct {
	pulumi.CustomResourceState

	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel pulumi.StringPtrOutput `pulumi:"compatibilityLevel"`
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringOutput `pulumi:"project"`
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Service to link the Kafka Schema to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// is Kafka Schema subject name.
	SubjectName pulumi.StringOutput `pulumi:"subjectName"`
	// Kafka Schema configuration version
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewKafkaSchema registers a new resource with the given unique name, arguments, and options.
func NewKafkaSchema(ctx *pulumi.Context,
	name string, args *KafkaSchemaArgs, opts ...pulumi.ResourceOption) (*KafkaSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.SubjectName == nil {
		return nil, errors.New("invalid value for required argument 'SubjectName'")
	}
	var resource KafkaSchema
	err := ctx.RegisterResource("aiven:index/kafkaSchema:KafkaSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaSchema gets an existing KafkaSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaSchemaState, opts ...pulumi.ResourceOption) (*KafkaSchema, error) {
	var resource KafkaSchema
	err := ctx.ReadResource("aiven:index/kafkaSchema:KafkaSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaSchema resources.
type kafkaSchemaState struct {
	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project *string `pulumi:"project"`
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema *string `pulumi:"schema"`
	// Service to link the Kafka Schema to
	ServiceName *string `pulumi:"serviceName"`
	// is Kafka Schema subject name.
	SubjectName *string `pulumi:"subjectName"`
	// Kafka Schema configuration version
	Version *int `pulumi:"version"`
}

type KafkaSchemaState struct {
	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel pulumi.StringPtrInput
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringPtrInput
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema pulumi.StringPtrInput
	// Service to link the Kafka Schema to
	ServiceName pulumi.StringPtrInput
	// is Kafka Schema subject name.
	SubjectName pulumi.StringPtrInput
	// Kafka Schema configuration version
	Version pulumi.IntPtrInput
}

func (KafkaSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaState)(nil)).Elem()
}

type kafkaSchemaArgs struct {
	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project string `pulumi:"project"`
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema string `pulumi:"schema"`
	// Service to link the Kafka Schema to
	ServiceName string `pulumi:"serviceName"`
	// is Kafka Schema subject name.
	SubjectName string `pulumi:"subjectName"`
}

// The set of arguments for constructing a KafkaSchema resource.
type KafkaSchemaArgs struct {
	// configuration compatibility level overrides specific subject
	// resource. If the compatibility level not specified for the individual subject by default,
	// it takes a global value. Allowed values: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`,
	// `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, `NONE`.
	CompatibilityLevel pulumi.StringPtrInput
	// and `serviceName` - (Required) define the project and service the Kafka Schemas belongs to.
	// They should be defined using reference as shown above to set up dependencies correctly.
	Project pulumi.StringInput
	// is Kafka Schema configuration should be a valid Avro Schema JSON format.
	Schema pulumi.StringInput
	// Service to link the Kafka Schema to
	ServiceName pulumi.StringInput
	// is Kafka Schema subject name.
	SubjectName pulumi.StringInput
}

func (KafkaSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaArgs)(nil)).Elem()
}

type KafkaSchemaInput interface {
	pulumi.Input

	ToKafkaSchemaOutput() KafkaSchemaOutput
	ToKafkaSchemaOutputWithContext(ctx context.Context) KafkaSchemaOutput
}

func (*KafkaSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSchema)(nil)).Elem()
}

func (i *KafkaSchema) ToKafkaSchemaOutput() KafkaSchemaOutput {
	return i.ToKafkaSchemaOutputWithContext(context.Background())
}

func (i *KafkaSchema) ToKafkaSchemaOutputWithContext(ctx context.Context) KafkaSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSchemaOutput)
}

// KafkaSchemaArrayInput is an input type that accepts KafkaSchemaArray and KafkaSchemaArrayOutput values.
// You can construct a concrete instance of `KafkaSchemaArrayInput` via:
//
//          KafkaSchemaArray{ KafkaSchemaArgs{...} }
type KafkaSchemaArrayInput interface {
	pulumi.Input

	ToKafkaSchemaArrayOutput() KafkaSchemaArrayOutput
	ToKafkaSchemaArrayOutputWithContext(context.Context) KafkaSchemaArrayOutput
}

type KafkaSchemaArray []KafkaSchemaInput

func (KafkaSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaSchema)(nil)).Elem()
}

func (i KafkaSchemaArray) ToKafkaSchemaArrayOutput() KafkaSchemaArrayOutput {
	return i.ToKafkaSchemaArrayOutputWithContext(context.Background())
}

func (i KafkaSchemaArray) ToKafkaSchemaArrayOutputWithContext(ctx context.Context) KafkaSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSchemaArrayOutput)
}

// KafkaSchemaMapInput is an input type that accepts KafkaSchemaMap and KafkaSchemaMapOutput values.
// You can construct a concrete instance of `KafkaSchemaMapInput` via:
//
//          KafkaSchemaMap{ "key": KafkaSchemaArgs{...} }
type KafkaSchemaMapInput interface {
	pulumi.Input

	ToKafkaSchemaMapOutput() KafkaSchemaMapOutput
	ToKafkaSchemaMapOutputWithContext(context.Context) KafkaSchemaMapOutput
}

type KafkaSchemaMap map[string]KafkaSchemaInput

func (KafkaSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaSchema)(nil)).Elem()
}

func (i KafkaSchemaMap) ToKafkaSchemaMapOutput() KafkaSchemaMapOutput {
	return i.ToKafkaSchemaMapOutputWithContext(context.Background())
}

func (i KafkaSchemaMap) ToKafkaSchemaMapOutputWithContext(ctx context.Context) KafkaSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSchemaMapOutput)
}

type KafkaSchemaOutput struct{ *pulumi.OutputState }

func (KafkaSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSchema)(nil)).Elem()
}

func (o KafkaSchemaOutput) ToKafkaSchemaOutput() KafkaSchemaOutput {
	return o
}

func (o KafkaSchemaOutput) ToKafkaSchemaOutputWithContext(ctx context.Context) KafkaSchemaOutput {
	return o
}

type KafkaSchemaArrayOutput struct{ *pulumi.OutputState }

func (KafkaSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaSchema)(nil)).Elem()
}

func (o KafkaSchemaArrayOutput) ToKafkaSchemaArrayOutput() KafkaSchemaArrayOutput {
	return o
}

func (o KafkaSchemaArrayOutput) ToKafkaSchemaArrayOutputWithContext(ctx context.Context) KafkaSchemaArrayOutput {
	return o
}

func (o KafkaSchemaArrayOutput) Index(i pulumi.IntInput) KafkaSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaSchema {
		return vs[0].([]*KafkaSchema)[vs[1].(int)]
	}).(KafkaSchemaOutput)
}

type KafkaSchemaMapOutput struct{ *pulumi.OutputState }

func (KafkaSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaSchema)(nil)).Elem()
}

func (o KafkaSchemaMapOutput) ToKafkaSchemaMapOutput() KafkaSchemaMapOutput {
	return o
}

func (o KafkaSchemaMapOutput) ToKafkaSchemaMapOutputWithContext(ctx context.Context) KafkaSchemaMapOutput {
	return o
}

func (o KafkaSchemaMapOutput) MapIndex(k pulumi.StringInput) KafkaSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaSchema {
		return vs[0].(map[string]*KafkaSchema)[vs[1].(string)]
	}).(KafkaSchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaSchemaInput)(nil)).Elem(), &KafkaSchema{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaSchemaArrayInput)(nil)).Elem(), KafkaSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaSchemaMapInput)(nil)).Elem(), KafkaSchemaMap{})
	pulumi.RegisterOutputType(KafkaSchemaOutput{})
	pulumi.RegisterOutputType(KafkaSchemaArrayOutput{})
	pulumi.RegisterOutputType(KafkaSchemaMapOutput{})
}
