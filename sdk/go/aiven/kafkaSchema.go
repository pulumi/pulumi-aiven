// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type KafkaSchema struct {
	pulumi.CustomResourceState

	// Project to link the Kafka Schema to
	Project pulumi.StringOutput `pulumi:"project"`
	// Kafka Schema configuration should be a valid Avro Schema JSON format
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Service to link the Kafka Schema to
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Kafka Schema Subject name
	SubjectName pulumi.StringOutput `pulumi:"subjectName"`
	// Kafka Schema configuration version
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewKafkaSchema registers a new resource with the given unique name, arguments, and options.
func NewKafkaSchema(ctx *pulumi.Context,
	name string, args *KafkaSchemaArgs, opts ...pulumi.ResourceOption) (*KafkaSchema, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Schema == nil {
		return nil, errors.New("missing required argument 'Schema'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.SubjectName == nil {
		return nil, errors.New("missing required argument 'SubjectName'")
	}
	if args == nil {
		args = &KafkaSchemaArgs{}
	}
	var resource KafkaSchema
	err := ctx.RegisterResource("aiven:index/kafkaSchema:KafkaSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaSchema gets an existing KafkaSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaSchemaState, opts ...pulumi.ResourceOption) (*KafkaSchema, error) {
	var resource KafkaSchema
	err := ctx.ReadResource("aiven:index/kafkaSchema:KafkaSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaSchema resources.
type kafkaSchemaState struct {
	// Project to link the Kafka Schema to
	Project *string `pulumi:"project"`
	// Kafka Schema configuration should be a valid Avro Schema JSON format
	Schema *string `pulumi:"schema"`
	// Service to link the Kafka Schema to
	ServiceName *string `pulumi:"serviceName"`
	// Kafka Schema Subject name
	SubjectName *string `pulumi:"subjectName"`
	// Kafka Schema configuration version
	Version *int `pulumi:"version"`
}

type KafkaSchemaState struct {
	// Project to link the Kafka Schema to
	Project pulumi.StringPtrInput
	// Kafka Schema configuration should be a valid Avro Schema JSON format
	Schema pulumi.StringPtrInput
	// Service to link the Kafka Schema to
	ServiceName pulumi.StringPtrInput
	// Kafka Schema Subject name
	SubjectName pulumi.StringPtrInput
	// Kafka Schema configuration version
	Version pulumi.IntPtrInput
}

func (KafkaSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaState)(nil)).Elem()
}

type kafkaSchemaArgs struct {
	// Project to link the Kafka Schema to
	Project string `pulumi:"project"`
	// Kafka Schema configuration should be a valid Avro Schema JSON format
	Schema string `pulumi:"schema"`
	// Service to link the Kafka Schema to
	ServiceName string `pulumi:"serviceName"`
	// Kafka Schema Subject name
	SubjectName string `pulumi:"subjectName"`
}

// The set of arguments for constructing a KafkaSchema resource.
type KafkaSchemaArgs struct {
	// Project to link the Kafka Schema to
	Project pulumi.StringInput
	// Kafka Schema configuration should be a valid Avro Schema JSON format
	Schema pulumi.StringInput
	// Service to link the Kafka Schema to
	ServiceName pulumi.StringInput
	// Kafka Schema Subject name
	SubjectName pulumi.StringInput
}

func (KafkaSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaSchemaArgs)(nil)).Elem()
}
