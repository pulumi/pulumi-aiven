// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Kafka Resource
//
// The Kafka resource allows the creation and management of Aiven Kafka services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v4/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewKafka(ctx, "kafka1", &aiven.KafkaArgs{
// 			Project:               pulumi.Any(data.Aiven_project.Pr1.Project),
// 			CloudName:             pulumi.String("google-europe-west1"),
// 			Plan:                  pulumi.String("business-4"),
// 			ServiceName:           pulumi.String("my-kafka1"),
// 			MaintenanceWindowDow:  pulumi.String("monday"),
// 			MaintenanceWindowTime: pulumi.String("10:00:00"),
// 			KafkaUserConfig: &KafkaKafkaUserConfigArgs{
// 				KafkaRest:      pulumi.String("true"),
// 				KafkaConnect:   pulumi.String("true"),
// 				SchemaRegistry: pulumi.String("true"),
// 				KafkaVersion:   pulumi.String("2.4"),
// 				Kafka: &KafkaKafkaUserConfigKafkaArgs{
// 					GroupMaxSessionTimeoutMs: pulumi.String("70000"),
// 					LogRetentionBytes:        pulumi.String("1000000000"),
// 				},
// 				PublicAccess: &KafkaKafkaUserConfigPublicAccessArgs{
// 					KafkaRest:    pulumi.String("true"),
// 					KafkaConnect: pulumi.String("true"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Kafka struct {
	pulumi.CustomResourceState

	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrOutput `pulumi:"cloudName"`
	// Service component information objects
	Components KafkaComponentArrayOutput `pulumi:"components"`
	// Create default wildcard Kafka ACL
	DefaultAcl pulumi.BoolPtrOutput `pulumi:"defaultAcl"`
	// Enable kafka
	Kafka KafkaKafkaOutput `pulumi:"kafka"`
	// defines Kafka specific additional configuration options. The following
	// configuration options available:
	KafkaUserConfig KafkaKafkaUserConfigPtrOutput `pulumi:"kafkaUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrOutput `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrOutput `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringOutput `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrOutput `pulumi:"projectVpcId"`
	// Kafka hostname.
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations KafkaServiceIntegrationArrayOutput `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Password used for connecting to the Kafka service, if applicable.
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// Kafka port.
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// URI for connecting to the Kafka service.
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Username used for connecting to the Kafka service, if applicable.
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// Service state.
	State pulumi.StringOutput `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewKafka registers a new resource with the given unique name, arguments, and options.
func NewKafka(ctx *pulumi.Context,
	name string, args *KafkaArgs, opts ...pulumi.ResourceOption) (*Kafka, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource Kafka
	err := ctx.RegisterResource("aiven:index/kafka:Kafka", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafka gets an existing Kafka resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafka(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaState, opts ...pulumi.ResourceOption) (*Kafka, error) {
	var resource Kafka
	err := ctx.ReadResource("aiven:index/kafka:Kafka", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kafka resources.
type kafkaState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Service component information objects
	Components []KafkaComponent `pulumi:"components"`
	// Create default wildcard Kafka ACL
	DefaultAcl *bool `pulumi:"defaultAcl"`
	// Enable kafka
	Kafka *KafkaKafka `pulumi:"kafka"`
	// defines Kafka specific additional configuration options. The following
	// configuration options available:
	KafkaUserConfig *KafkaKafkaUserConfig `pulumi:"kafkaUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project *string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Kafka hostname.
	ServiceHost *string `pulumi:"serviceHost"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []KafkaServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName *string `pulumi:"serviceName"`
	// Password used for connecting to the Kafka service, if applicable.
	ServicePassword *string `pulumi:"servicePassword"`
	// Kafka port.
	ServicePort *int `pulumi:"servicePort"`
	// Aiven internal service type code
	ServiceType *string `pulumi:"serviceType"`
	// URI for connecting to the Kafka service.
	ServiceUri *string `pulumi:"serviceUri"`
	// Username used for connecting to the Kafka service, if applicable.
	ServiceUsername *string `pulumi:"serviceUsername"`
	// Service state.
	State *string `pulumi:"state"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type KafkaState struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Service component information objects
	Components KafkaComponentArrayInput
	// Create default wildcard Kafka ACL
	DefaultAcl pulumi.BoolPtrInput
	// Enable kafka
	Kafka KafkaKafkaPtrInput
	// defines Kafka specific additional configuration options. The following
	// configuration options available:
	KafkaUserConfig KafkaKafkaUserConfigPtrInput
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringPtrInput
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Kafka hostname.
	ServiceHost pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations KafkaServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringPtrInput
	// Password used for connecting to the Kafka service, if applicable.
	ServicePassword pulumi.StringPtrInput
	// Kafka port.
	ServicePort pulumi.IntPtrInput
	// Aiven internal service type code
	ServiceType pulumi.StringPtrInput
	// URI for connecting to the Kafka service.
	ServiceUri pulumi.StringPtrInput
	// Username used for connecting to the Kafka service, if applicable.
	ServiceUsername pulumi.StringPtrInput
	// Service state.
	State pulumi.StringPtrInput
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (KafkaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaState)(nil)).Elem()
}

type kafkaArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName *string `pulumi:"cloudName"`
	// Create default wildcard Kafka ACL
	DefaultAcl *bool `pulumi:"defaultAcl"`
	// Enable kafka
	Kafka *KafkaKafka `pulumi:"kafka"`
	// defines Kafka specific additional configuration options. The following
	// configuration options available:
	KafkaUserConfig *KafkaKafkaUserConfig `pulumi:"kafkaUserConfig"`
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan *string `pulumi:"plan"`
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project string `pulumi:"project"`
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId *string `pulumi:"projectVpcId"`
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations []KafkaServiceIntegration `pulumi:"serviceIntegrations"`
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName string `pulumi:"serviceName"`
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a Kafka resource.
type KafkaArgs struct {
	// defines where the cloud provider and region where the service is hosted
	// in. This can be changed freely after service is created. Changing the value will trigger
	// a potentially lengthy migration process for the service. Format is cloud provider name
	// (`aws`, `azure`, `do` `google`, `upcloud`, etc.), dash, and the cloud provider
	// specific region name. These are documented on each Cloud provider's own support articles,
	// like [here for Google](https://cloud.google.com/compute/docs/regions-zones/) and
	// [here for AWS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
	CloudName pulumi.StringPtrInput
	// Create default wildcard Kafka ACL
	DefaultAcl pulumi.BoolPtrInput
	// Enable kafka
	Kafka KafkaKafkaPtrInput
	// defines Kafka specific additional configuration options. The following
	// configuration options available:
	KafkaUserConfig KafkaKafkaUserConfigPtrInput
	// day of week when maintenance operations should be performed.
	// On monday, tuesday, wednesday, etc.
	MaintenanceWindowDow pulumi.StringPtrInput
	// time of day when maintenance operations should be performed.
	// UTC time in HH:mm:ss format.
	MaintenanceWindowTime pulumi.StringPtrInput
	// defines what kind of computing resources are allocated for the service. It can
	// be changed after creation, though there are some restrictions when going to a smaller
	// plan such as the new plan must have sufficient amount of disk space to store all current
	// data and switching to a plan with fewer nodes might not be supported. The basic plan
	// names are `hobbyist`, `startup-x`, `business-x` and `premium-x` where `x` is
	// (roughly) the amount of memory on each node (also other attributes like number of CPUs
	// and amount of disk space varies but naming is based on memory). The available options can be seem from the [Aiven pricing page](https://aiven.io/pricing).
	Plan pulumi.StringPtrInput
	// identifies the project the service belongs to. To set up proper dependency
	// between the project and the service, refer to the project as shown in the above example.
	// Project cannot be changed later without destroying and re-creating the service.
	Project pulumi.StringInput
	// optionally specifies the VPC the service should run in. If the value
	// is not set the service is not run inside a VPC. When set, the value should be given as a
	// reference as shown above to set up dependencies correctly and the VPC must be in the same
	// cloud and region as the service itself. Project can be freely moved to and from VPC after
	// creation but doing so triggers migration to new servers so the operation can take
	// significant amount of time to complete if the service has a lot of data.
	ProjectVpcId pulumi.StringPtrInput
	// Service integrations to specify when creating a service. Not applied after initial service creation
	ServiceIntegrations KafkaServiceIntegrationArrayInput
	// specifies the actual name of the service. The name cannot be changed
	// later without destroying and re-creating the service so name should be picked based on
	// intended service usage rather than current attributes.
	ServiceName pulumi.StringInput
	// prevents the service from being deleted. It is recommended to
	// set this to `true` for all production services to prevent unintentional service
	// deletion. This does not shield against deleting databases or topics but for services
	// with backups much of the content can at least be restored from backup in case accidental
	// deletion is done.
	TerminationProtection pulumi.BoolPtrInput
}

func (KafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaArgs)(nil)).Elem()
}

type KafkaInput interface {
	pulumi.Input

	ToKafkaOutput() KafkaOutput
	ToKafkaOutputWithContext(ctx context.Context) KafkaOutput
}

func (*Kafka) ElementType() reflect.Type {
	return reflect.TypeOf((*Kafka)(nil))
}

func (i *Kafka) ToKafkaOutput() KafkaOutput {
	return i.ToKafkaOutputWithContext(context.Background())
}

func (i *Kafka) ToKafkaOutputWithContext(ctx context.Context) KafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaOutput)
}

func (i *Kafka) ToKafkaPtrOutput() KafkaPtrOutput {
	return i.ToKafkaPtrOutputWithContext(context.Background())
}

func (i *Kafka) ToKafkaPtrOutputWithContext(ctx context.Context) KafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPtrOutput)
}

type KafkaPtrInput interface {
	pulumi.Input

	ToKafkaPtrOutput() KafkaPtrOutput
	ToKafkaPtrOutputWithContext(ctx context.Context) KafkaPtrOutput
}

type kafkaPtrType KafkaArgs

func (*kafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Kafka)(nil))
}

func (i *kafkaPtrType) ToKafkaPtrOutput() KafkaPtrOutput {
	return i.ToKafkaPtrOutputWithContext(context.Background())
}

func (i *kafkaPtrType) ToKafkaPtrOutputWithContext(ctx context.Context) KafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPtrOutput)
}

// KafkaArrayInput is an input type that accepts KafkaArray and KafkaArrayOutput values.
// You can construct a concrete instance of `KafkaArrayInput` via:
//
//          KafkaArray{ KafkaArgs{...} }
type KafkaArrayInput interface {
	pulumi.Input

	ToKafkaArrayOutput() KafkaArrayOutput
	ToKafkaArrayOutputWithContext(context.Context) KafkaArrayOutput
}

type KafkaArray []KafkaInput

func (KafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kafka)(nil)).Elem()
}

func (i KafkaArray) ToKafkaArrayOutput() KafkaArrayOutput {
	return i.ToKafkaArrayOutputWithContext(context.Background())
}

func (i KafkaArray) ToKafkaArrayOutputWithContext(ctx context.Context) KafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaArrayOutput)
}

// KafkaMapInput is an input type that accepts KafkaMap and KafkaMapOutput values.
// You can construct a concrete instance of `KafkaMapInput` via:
//
//          KafkaMap{ "key": KafkaArgs{...} }
type KafkaMapInput interface {
	pulumi.Input

	ToKafkaMapOutput() KafkaMapOutput
	ToKafkaMapOutputWithContext(context.Context) KafkaMapOutput
}

type KafkaMap map[string]KafkaInput

func (KafkaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kafka)(nil)).Elem()
}

func (i KafkaMap) ToKafkaMapOutput() KafkaMapOutput {
	return i.ToKafkaMapOutputWithContext(context.Background())
}

func (i KafkaMap) ToKafkaMapOutputWithContext(ctx context.Context) KafkaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMapOutput)
}

type KafkaOutput struct{ *pulumi.OutputState }

func (KafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Kafka)(nil))
}

func (o KafkaOutput) ToKafkaOutput() KafkaOutput {
	return o
}

func (o KafkaOutput) ToKafkaOutputWithContext(ctx context.Context) KafkaOutput {
	return o
}

func (o KafkaOutput) ToKafkaPtrOutput() KafkaPtrOutput {
	return o.ToKafkaPtrOutputWithContext(context.Background())
}

func (o KafkaOutput) ToKafkaPtrOutputWithContext(ctx context.Context) KafkaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Kafka) *Kafka {
		return &v
	}).(KafkaPtrOutput)
}

type KafkaPtrOutput struct{ *pulumi.OutputState }

func (KafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kafka)(nil))
}

func (o KafkaPtrOutput) ToKafkaPtrOutput() KafkaPtrOutput {
	return o
}

func (o KafkaPtrOutput) ToKafkaPtrOutputWithContext(ctx context.Context) KafkaPtrOutput {
	return o
}

func (o KafkaPtrOutput) Elem() KafkaOutput {
	return o.ApplyT(func(v *Kafka) Kafka {
		if v != nil {
			return *v
		}
		var ret Kafka
		return ret
	}).(KafkaOutput)
}

type KafkaArrayOutput struct{ *pulumi.OutputState }

func (KafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Kafka)(nil))
}

func (o KafkaArrayOutput) ToKafkaArrayOutput() KafkaArrayOutput {
	return o
}

func (o KafkaArrayOutput) ToKafkaArrayOutputWithContext(ctx context.Context) KafkaArrayOutput {
	return o
}

func (o KafkaArrayOutput) Index(i pulumi.IntInput) KafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Kafka {
		return vs[0].([]Kafka)[vs[1].(int)]
	}).(KafkaOutput)
}

type KafkaMapOutput struct{ *pulumi.OutputState }

func (KafkaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Kafka)(nil))
}

func (o KafkaMapOutput) ToKafkaMapOutput() KafkaMapOutput {
	return o
}

func (o KafkaMapOutput) ToKafkaMapOutputWithContext(ctx context.Context) KafkaMapOutput {
	return o
}

func (o KafkaMapOutput) MapIndex(k pulumi.StringInput) KafkaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Kafka {
		return vs[0].(map[string]Kafka)[vs[1].(string)]
	}).(KafkaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInput)(nil)).Elem(), &Kafka{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaPtrInput)(nil)).Elem(), &Kafka{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaArrayInput)(nil)).Elem(), KafkaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMapInput)(nil)).Elem(), KafkaMap{})
	pulumi.RegisterOutputType(KafkaOutput{})
	pulumi.RegisterOutputType(KafkaPtrOutput{})
	pulumi.RegisterOutputType(KafkaArrayOutput{})
	pulumi.RegisterOutputType(KafkaMapOutput{})
}
