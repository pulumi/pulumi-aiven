// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Adds and manages a [group](https://aiven.io/docs/platform/concepts/projects_accounts_access#groups) of users as [members of a project](https://aiven.io/docs/platform/reference/project-member-privileges).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := aiven.NewOrganizationUserGroup(ctx, "example", &aiven.OrganizationUserGroupArgs{
//				Description:    pulumi.String("Example group of users."),
//				OrganizationId: pulumi.Any(main.Id),
//				Name:           pulumi.String("Example group"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aiven.NewOrganizationUserGroupProject(ctx, "example", &aiven.OrganizationUserGroupProjectArgs{
//				GroupId: example.GroupId,
//				Project: exampleAivenProject.Project,
//				Role:    "admin",
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/organizationGroupProject:OrganizationGroupProject example PROJECT/USER_GROUP_ID
// ```
type OrganizationGroupProject struct {
	pulumi.CustomResourceState

	// The ID of the user group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The project that the users in the group are members of.
	Project pulumi.StringOutput `pulumi:"project"`
	// Role assigned to all users in the group for the project.
	Role     pulumi.StringOutput                       `pulumi:"role"`
	Timeouts OrganizationGroupProjectTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewOrganizationGroupProject registers a new resource with the given unique name, arguments, and options.
func NewOrganizationGroupProject(ctx *pulumi.Context,
	name string, args *OrganizationGroupProjectArgs, opts ...pulumi.ResourceOption) (*OrganizationGroupProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationGroupProject
	err := ctx.RegisterResource("aiven:index/organizationGroupProject:OrganizationGroupProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationGroupProject gets an existing OrganizationGroupProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationGroupProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationGroupProjectState, opts ...pulumi.ResourceOption) (*OrganizationGroupProject, error) {
	var resource OrganizationGroupProject
	err := ctx.ReadResource("aiven:index/organizationGroupProject:OrganizationGroupProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationGroupProject resources.
type organizationGroupProjectState struct {
	// The ID of the user group.
	GroupId *string `pulumi:"groupId"`
	// The project that the users in the group are members of.
	Project *string `pulumi:"project"`
	// Role assigned to all users in the group for the project.
	Role     *string                           `pulumi:"role"`
	Timeouts *OrganizationGroupProjectTimeouts `pulumi:"timeouts"`
}

type OrganizationGroupProjectState struct {
	// The ID of the user group.
	GroupId pulumi.StringPtrInput
	// The project that the users in the group are members of.
	Project pulumi.StringPtrInput
	// Role assigned to all users in the group for the project.
	Role     pulumi.StringPtrInput
	Timeouts OrganizationGroupProjectTimeoutsPtrInput
}

func (OrganizationGroupProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationGroupProjectState)(nil)).Elem()
}

type organizationGroupProjectArgs struct {
	// The ID of the user group.
	GroupId string `pulumi:"groupId"`
	// The project that the users in the group are members of.
	Project string `pulumi:"project"`
	// Role assigned to all users in the group for the project.
	Role     string                            `pulumi:"role"`
	Timeouts *OrganizationGroupProjectTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a OrganizationGroupProject resource.
type OrganizationGroupProjectArgs struct {
	// The ID of the user group.
	GroupId pulumi.StringInput
	// The project that the users in the group are members of.
	Project pulumi.StringInput
	// Role assigned to all users in the group for the project.
	Role     pulumi.StringInput
	Timeouts OrganizationGroupProjectTimeoutsPtrInput
}

func (OrganizationGroupProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationGroupProjectArgs)(nil)).Elem()
}

type OrganizationGroupProjectInput interface {
	pulumi.Input

	ToOrganizationGroupProjectOutput() OrganizationGroupProjectOutput
	ToOrganizationGroupProjectOutputWithContext(ctx context.Context) OrganizationGroupProjectOutput
}

func (*OrganizationGroupProject) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationGroupProject)(nil)).Elem()
}

func (i *OrganizationGroupProject) ToOrganizationGroupProjectOutput() OrganizationGroupProjectOutput {
	return i.ToOrganizationGroupProjectOutputWithContext(context.Background())
}

func (i *OrganizationGroupProject) ToOrganizationGroupProjectOutputWithContext(ctx context.Context) OrganizationGroupProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationGroupProjectOutput)
}

// OrganizationGroupProjectArrayInput is an input type that accepts OrganizationGroupProjectArray and OrganizationGroupProjectArrayOutput values.
// You can construct a concrete instance of `OrganizationGroupProjectArrayInput` via:
//
//	OrganizationGroupProjectArray{ OrganizationGroupProjectArgs{...} }
type OrganizationGroupProjectArrayInput interface {
	pulumi.Input

	ToOrganizationGroupProjectArrayOutput() OrganizationGroupProjectArrayOutput
	ToOrganizationGroupProjectArrayOutputWithContext(context.Context) OrganizationGroupProjectArrayOutput
}

type OrganizationGroupProjectArray []OrganizationGroupProjectInput

func (OrganizationGroupProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationGroupProject)(nil)).Elem()
}

func (i OrganizationGroupProjectArray) ToOrganizationGroupProjectArrayOutput() OrganizationGroupProjectArrayOutput {
	return i.ToOrganizationGroupProjectArrayOutputWithContext(context.Background())
}

func (i OrganizationGroupProjectArray) ToOrganizationGroupProjectArrayOutputWithContext(ctx context.Context) OrganizationGroupProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationGroupProjectArrayOutput)
}

// OrganizationGroupProjectMapInput is an input type that accepts OrganizationGroupProjectMap and OrganizationGroupProjectMapOutput values.
// You can construct a concrete instance of `OrganizationGroupProjectMapInput` via:
//
//	OrganizationGroupProjectMap{ "key": OrganizationGroupProjectArgs{...} }
type OrganizationGroupProjectMapInput interface {
	pulumi.Input

	ToOrganizationGroupProjectMapOutput() OrganizationGroupProjectMapOutput
	ToOrganizationGroupProjectMapOutputWithContext(context.Context) OrganizationGroupProjectMapOutput
}

type OrganizationGroupProjectMap map[string]OrganizationGroupProjectInput

func (OrganizationGroupProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationGroupProject)(nil)).Elem()
}

func (i OrganizationGroupProjectMap) ToOrganizationGroupProjectMapOutput() OrganizationGroupProjectMapOutput {
	return i.ToOrganizationGroupProjectMapOutputWithContext(context.Background())
}

func (i OrganizationGroupProjectMap) ToOrganizationGroupProjectMapOutputWithContext(ctx context.Context) OrganizationGroupProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationGroupProjectMapOutput)
}

type OrganizationGroupProjectOutput struct{ *pulumi.OutputState }

func (OrganizationGroupProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationGroupProject)(nil)).Elem()
}

func (o OrganizationGroupProjectOutput) ToOrganizationGroupProjectOutput() OrganizationGroupProjectOutput {
	return o
}

func (o OrganizationGroupProjectOutput) ToOrganizationGroupProjectOutputWithContext(ctx context.Context) OrganizationGroupProjectOutput {
	return o
}

// The ID of the user group.
func (o OrganizationGroupProjectOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationGroupProject) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The project that the users in the group are members of.
func (o OrganizationGroupProjectOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationGroupProject) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Role assigned to all users in the group for the project.
func (o OrganizationGroupProjectOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationGroupProject) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o OrganizationGroupProjectOutput) Timeouts() OrganizationGroupProjectTimeoutsPtrOutput {
	return o.ApplyT(func(v *OrganizationGroupProject) OrganizationGroupProjectTimeoutsPtrOutput { return v.Timeouts }).(OrganizationGroupProjectTimeoutsPtrOutput)
}

type OrganizationGroupProjectArrayOutput struct{ *pulumi.OutputState }

func (OrganizationGroupProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationGroupProject)(nil)).Elem()
}

func (o OrganizationGroupProjectArrayOutput) ToOrganizationGroupProjectArrayOutput() OrganizationGroupProjectArrayOutput {
	return o
}

func (o OrganizationGroupProjectArrayOutput) ToOrganizationGroupProjectArrayOutputWithContext(ctx context.Context) OrganizationGroupProjectArrayOutput {
	return o
}

func (o OrganizationGroupProjectArrayOutput) Index(i pulumi.IntInput) OrganizationGroupProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationGroupProject {
		return vs[0].([]*OrganizationGroupProject)[vs[1].(int)]
	}).(OrganizationGroupProjectOutput)
}

type OrganizationGroupProjectMapOutput struct{ *pulumi.OutputState }

func (OrganizationGroupProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationGroupProject)(nil)).Elem()
}

func (o OrganizationGroupProjectMapOutput) ToOrganizationGroupProjectMapOutput() OrganizationGroupProjectMapOutput {
	return o
}

func (o OrganizationGroupProjectMapOutput) ToOrganizationGroupProjectMapOutputWithContext(ctx context.Context) OrganizationGroupProjectMapOutput {
	return o
}

func (o OrganizationGroupProjectMapOutput) MapIndex(k pulumi.StringInput) OrganizationGroupProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationGroupProject {
		return vs[0].(map[string]*OrganizationGroupProject)[vs[1].(string)]
	}).(OrganizationGroupProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationGroupProjectInput)(nil)).Elem(), &OrganizationGroupProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationGroupProjectArrayInput)(nil)).Elem(), OrganizationGroupProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationGroupProjectMapInput)(nil)).Elem(), OrganizationGroupProjectMap{})
	pulumi.RegisterOutputType(OrganizationGroupProjectOutput{})
	pulumi.RegisterOutputType(OrganizationGroupProjectArrayOutput{})
	pulumi.RegisterOutputType(OrganizationGroupProjectMapOutput{})
}
