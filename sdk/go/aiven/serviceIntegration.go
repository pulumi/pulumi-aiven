// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Service Integration resource allows the creation and management of Aiven Service Integrations.
//
// **Note** For services running on `hobbyist` plan service integrations are not supported.
//
// Service Integration defines an integration between two Aiven services or between Aiven service and an external
// integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service,
// getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to
// Elasticsearch, etc.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.NewServiceIntegration(ctx, "myIntegrationMetrics", &aiven.ServiceIntegrationArgs{
//				Project:                pulumi.Any(aiven_project.Myproject.Project),
//				IntegrationType:        pulumi.String("metrics"),
//				SourceServiceName:      pulumi.Any(aiven_kafka.Kfk1.Service_name),
//				DestinationServiceName: pulumi.Any(aiven_m3db.M3db.Service_name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import aiven:index/serviceIntegration:ServiceIntegration myintegration project/integration_id
//
// ```
type ServiceIntegration struct {
	pulumi.CustomResourceState

	// ClickhouseKafka user configurable settings
	ClickhouseKafkaUserConfig ServiceIntegrationClickhouseKafkaUserConfigPtrOutput `pulumi:"clickhouseKafkaUserConfig"`
	// ClickhousePostgresql user configurable settings
	ClickhousePostgresqlUserConfig ServiceIntegrationClickhousePostgresqlUserConfigPtrOutput `pulumi:"clickhousePostgresqlUserConfig"`
	// Datadog user configurable settings
	DatadogUserConfig ServiceIntegrationDatadogUserConfigPtrOutput `pulumi:"datadogUserConfig"`
	// Destination endpoint for the integration (if any)
	DestinationEndpointId pulumi.StringPtrOutput `pulumi:"destinationEndpointId"`
	// Destination service for the integration (if any)
	DestinationServiceName pulumi.StringPtrOutput `pulumi:"destinationServiceName"`
	// ExternalAwsCloudwatchMetrics user configurable settings
	ExternalAwsCloudwatchMetricsUserConfig ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigPtrOutput `pulumi:"externalAwsCloudwatchMetricsUserConfig"`
	// Service Integration Id at aiven
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
	IntegrationType pulumi.StringOutput `pulumi:"integrationType"`
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig ServiceIntegrationKafkaConnectUserConfigPtrOutput `pulumi:"kafkaConnectUserConfig"`
	// KafkaLogs user configurable settings
	KafkaLogsUserConfig ServiceIntegrationKafkaLogsUserConfigPtrOutput `pulumi:"kafkaLogsUserConfig"`
	// KafkaMirrormaker user configurable settings
	KafkaMirrormakerUserConfig ServiceIntegrationKafkaMirrormakerUserConfigPtrOutput `pulumi:"kafkaMirrormakerUserConfig"`
	// Logs user configurable settings
	LogsUserConfig ServiceIntegrationLogsUserConfigPtrOutput `pulumi:"logsUserConfig"`
	// Metrics user configurable settings
	MetricsUserConfig ServiceIntegrationMetricsUserConfigPtrOutput `pulumi:"metricsUserConfig"`
	// Project the integration belongs to
	Project pulumi.StringOutput `pulumi:"project"`
	// Source endpoint for the integration (if any)
	SourceEndpointId pulumi.StringPtrOutput `pulumi:"sourceEndpointId"`
	// Source service for the integration (if any)
	SourceServiceName pulumi.StringPtrOutput `pulumi:"sourceServiceName"`
}

// NewServiceIntegration registers a new resource with the given unique name, arguments, and options.
func NewServiceIntegration(ctx *pulumi.Context,
	name string, args *ServiceIntegrationArgs, opts ...pulumi.ResourceOption) (*ServiceIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IntegrationType == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationType'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource ServiceIntegration
	err := ctx.RegisterResource("aiven:index/serviceIntegration:ServiceIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceIntegration gets an existing ServiceIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceIntegrationState, opts ...pulumi.ResourceOption) (*ServiceIntegration, error) {
	var resource ServiceIntegration
	err := ctx.ReadResource("aiven:index/serviceIntegration:ServiceIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceIntegration resources.
type serviceIntegrationState struct {
	// ClickhouseKafka user configurable settings
	ClickhouseKafkaUserConfig *ServiceIntegrationClickhouseKafkaUserConfig `pulumi:"clickhouseKafkaUserConfig"`
	// ClickhousePostgresql user configurable settings
	ClickhousePostgresqlUserConfig *ServiceIntegrationClickhousePostgresqlUserConfig `pulumi:"clickhousePostgresqlUserConfig"`
	// Datadog user configurable settings
	DatadogUserConfig *ServiceIntegrationDatadogUserConfig `pulumi:"datadogUserConfig"`
	// Destination endpoint for the integration (if any)
	DestinationEndpointId *string `pulumi:"destinationEndpointId"`
	// Destination service for the integration (if any)
	DestinationServiceName *string `pulumi:"destinationServiceName"`
	// ExternalAwsCloudwatchMetrics user configurable settings
	ExternalAwsCloudwatchMetricsUserConfig *ServiceIntegrationExternalAwsCloudwatchMetricsUserConfig `pulumi:"externalAwsCloudwatchMetricsUserConfig"`
	// Service Integration Id at aiven
	IntegrationId *string `pulumi:"integrationId"`
	// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
	IntegrationType *string `pulumi:"integrationType"`
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig *ServiceIntegrationKafkaConnectUserConfig `pulumi:"kafkaConnectUserConfig"`
	// KafkaLogs user configurable settings
	KafkaLogsUserConfig *ServiceIntegrationKafkaLogsUserConfig `pulumi:"kafkaLogsUserConfig"`
	// KafkaMirrormaker user configurable settings
	KafkaMirrormakerUserConfig *ServiceIntegrationKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfig"`
	// Logs user configurable settings
	LogsUserConfig *ServiceIntegrationLogsUserConfig `pulumi:"logsUserConfig"`
	// Metrics user configurable settings
	MetricsUserConfig *ServiceIntegrationMetricsUserConfig `pulumi:"metricsUserConfig"`
	// Project the integration belongs to
	Project *string `pulumi:"project"`
	// Source endpoint for the integration (if any)
	SourceEndpointId *string `pulumi:"sourceEndpointId"`
	// Source service for the integration (if any)
	SourceServiceName *string `pulumi:"sourceServiceName"`
}

type ServiceIntegrationState struct {
	// ClickhouseKafka user configurable settings
	ClickhouseKafkaUserConfig ServiceIntegrationClickhouseKafkaUserConfigPtrInput
	// ClickhousePostgresql user configurable settings
	ClickhousePostgresqlUserConfig ServiceIntegrationClickhousePostgresqlUserConfigPtrInput
	// Datadog user configurable settings
	DatadogUserConfig ServiceIntegrationDatadogUserConfigPtrInput
	// Destination endpoint for the integration (if any)
	DestinationEndpointId pulumi.StringPtrInput
	// Destination service for the integration (if any)
	DestinationServiceName pulumi.StringPtrInput
	// ExternalAwsCloudwatchMetrics user configurable settings
	ExternalAwsCloudwatchMetricsUserConfig ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigPtrInput
	// Service Integration Id at aiven
	IntegrationId pulumi.StringPtrInput
	// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
	IntegrationType pulumi.StringPtrInput
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig ServiceIntegrationKafkaConnectUserConfigPtrInput
	// KafkaLogs user configurable settings
	KafkaLogsUserConfig ServiceIntegrationKafkaLogsUserConfigPtrInput
	// KafkaMirrormaker user configurable settings
	KafkaMirrormakerUserConfig ServiceIntegrationKafkaMirrormakerUserConfigPtrInput
	// Logs user configurable settings
	LogsUserConfig ServiceIntegrationLogsUserConfigPtrInput
	// Metrics user configurable settings
	MetricsUserConfig ServiceIntegrationMetricsUserConfigPtrInput
	// Project the integration belongs to
	Project pulumi.StringPtrInput
	// Source endpoint for the integration (if any)
	SourceEndpointId pulumi.StringPtrInput
	// Source service for the integration (if any)
	SourceServiceName pulumi.StringPtrInput
}

func (ServiceIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceIntegrationState)(nil)).Elem()
}

type serviceIntegrationArgs struct {
	// ClickhouseKafka user configurable settings
	ClickhouseKafkaUserConfig *ServiceIntegrationClickhouseKafkaUserConfig `pulumi:"clickhouseKafkaUserConfig"`
	// ClickhousePostgresql user configurable settings
	ClickhousePostgresqlUserConfig *ServiceIntegrationClickhousePostgresqlUserConfig `pulumi:"clickhousePostgresqlUserConfig"`
	// Datadog user configurable settings
	DatadogUserConfig *ServiceIntegrationDatadogUserConfig `pulumi:"datadogUserConfig"`
	// Destination endpoint for the integration (if any)
	DestinationEndpointId *string `pulumi:"destinationEndpointId"`
	// Destination service for the integration (if any)
	DestinationServiceName *string `pulumi:"destinationServiceName"`
	// ExternalAwsCloudwatchMetrics user configurable settings
	ExternalAwsCloudwatchMetricsUserConfig *ServiceIntegrationExternalAwsCloudwatchMetricsUserConfig `pulumi:"externalAwsCloudwatchMetricsUserConfig"`
	// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
	IntegrationType string `pulumi:"integrationType"`
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig *ServiceIntegrationKafkaConnectUserConfig `pulumi:"kafkaConnectUserConfig"`
	// KafkaLogs user configurable settings
	KafkaLogsUserConfig *ServiceIntegrationKafkaLogsUserConfig `pulumi:"kafkaLogsUserConfig"`
	// KafkaMirrormaker user configurable settings
	KafkaMirrormakerUserConfig *ServiceIntegrationKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfig"`
	// Logs user configurable settings
	LogsUserConfig *ServiceIntegrationLogsUserConfig `pulumi:"logsUserConfig"`
	// Metrics user configurable settings
	MetricsUserConfig *ServiceIntegrationMetricsUserConfig `pulumi:"metricsUserConfig"`
	// Project the integration belongs to
	Project string `pulumi:"project"`
	// Source endpoint for the integration (if any)
	SourceEndpointId *string `pulumi:"sourceEndpointId"`
	// Source service for the integration (if any)
	SourceServiceName *string `pulumi:"sourceServiceName"`
}

// The set of arguments for constructing a ServiceIntegration resource.
type ServiceIntegrationArgs struct {
	// ClickhouseKafka user configurable settings
	ClickhouseKafkaUserConfig ServiceIntegrationClickhouseKafkaUserConfigPtrInput
	// ClickhousePostgresql user configurable settings
	ClickhousePostgresqlUserConfig ServiceIntegrationClickhousePostgresqlUserConfigPtrInput
	// Datadog user configurable settings
	DatadogUserConfig ServiceIntegrationDatadogUserConfigPtrInput
	// Destination endpoint for the integration (if any)
	DestinationEndpointId pulumi.StringPtrInput
	// Destination service for the integration (if any)
	DestinationServiceName pulumi.StringPtrInput
	// ExternalAwsCloudwatchMetrics user configurable settings
	ExternalAwsCloudwatchMetricsUserConfig ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigPtrInput
	// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
	IntegrationType pulumi.StringInput
	// KafkaConnect user configurable settings
	KafkaConnectUserConfig ServiceIntegrationKafkaConnectUserConfigPtrInput
	// KafkaLogs user configurable settings
	KafkaLogsUserConfig ServiceIntegrationKafkaLogsUserConfigPtrInput
	// KafkaMirrormaker user configurable settings
	KafkaMirrormakerUserConfig ServiceIntegrationKafkaMirrormakerUserConfigPtrInput
	// Logs user configurable settings
	LogsUserConfig ServiceIntegrationLogsUserConfigPtrInput
	// Metrics user configurable settings
	MetricsUserConfig ServiceIntegrationMetricsUserConfigPtrInput
	// Project the integration belongs to
	Project pulumi.StringInput
	// Source endpoint for the integration (if any)
	SourceEndpointId pulumi.StringPtrInput
	// Source service for the integration (if any)
	SourceServiceName pulumi.StringPtrInput
}

func (ServiceIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceIntegrationArgs)(nil)).Elem()
}

type ServiceIntegrationInput interface {
	pulumi.Input

	ToServiceIntegrationOutput() ServiceIntegrationOutput
	ToServiceIntegrationOutputWithContext(ctx context.Context) ServiceIntegrationOutput
}

func (*ServiceIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIntegration)(nil)).Elem()
}

func (i *ServiceIntegration) ToServiceIntegrationOutput() ServiceIntegrationOutput {
	return i.ToServiceIntegrationOutputWithContext(context.Background())
}

func (i *ServiceIntegration) ToServiceIntegrationOutputWithContext(ctx context.Context) ServiceIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationOutput)
}

// ServiceIntegrationArrayInput is an input type that accepts ServiceIntegrationArray and ServiceIntegrationArrayOutput values.
// You can construct a concrete instance of `ServiceIntegrationArrayInput` via:
//
//	ServiceIntegrationArray{ ServiceIntegrationArgs{...} }
type ServiceIntegrationArrayInput interface {
	pulumi.Input

	ToServiceIntegrationArrayOutput() ServiceIntegrationArrayOutput
	ToServiceIntegrationArrayOutputWithContext(context.Context) ServiceIntegrationArrayOutput
}

type ServiceIntegrationArray []ServiceIntegrationInput

func (ServiceIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceIntegration)(nil)).Elem()
}

func (i ServiceIntegrationArray) ToServiceIntegrationArrayOutput() ServiceIntegrationArrayOutput {
	return i.ToServiceIntegrationArrayOutputWithContext(context.Background())
}

func (i ServiceIntegrationArray) ToServiceIntegrationArrayOutputWithContext(ctx context.Context) ServiceIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationArrayOutput)
}

// ServiceIntegrationMapInput is an input type that accepts ServiceIntegrationMap and ServiceIntegrationMapOutput values.
// You can construct a concrete instance of `ServiceIntegrationMapInput` via:
//
//	ServiceIntegrationMap{ "key": ServiceIntegrationArgs{...} }
type ServiceIntegrationMapInput interface {
	pulumi.Input

	ToServiceIntegrationMapOutput() ServiceIntegrationMapOutput
	ToServiceIntegrationMapOutputWithContext(context.Context) ServiceIntegrationMapOutput
}

type ServiceIntegrationMap map[string]ServiceIntegrationInput

func (ServiceIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceIntegration)(nil)).Elem()
}

func (i ServiceIntegrationMap) ToServiceIntegrationMapOutput() ServiceIntegrationMapOutput {
	return i.ToServiceIntegrationMapOutputWithContext(context.Background())
}

func (i ServiceIntegrationMap) ToServiceIntegrationMapOutputWithContext(ctx context.Context) ServiceIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationMapOutput)
}

type ServiceIntegrationOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIntegration)(nil)).Elem()
}

func (o ServiceIntegrationOutput) ToServiceIntegrationOutput() ServiceIntegrationOutput {
	return o
}

func (o ServiceIntegrationOutput) ToServiceIntegrationOutputWithContext(ctx context.Context) ServiceIntegrationOutput {
	return o
}

// ClickhouseKafka user configurable settings
func (o ServiceIntegrationOutput) ClickhouseKafkaUserConfig() ServiceIntegrationClickhouseKafkaUserConfigPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) ServiceIntegrationClickhouseKafkaUserConfigPtrOutput {
		return v.ClickhouseKafkaUserConfig
	}).(ServiceIntegrationClickhouseKafkaUserConfigPtrOutput)
}

// ClickhousePostgresql user configurable settings
func (o ServiceIntegrationOutput) ClickhousePostgresqlUserConfig() ServiceIntegrationClickhousePostgresqlUserConfigPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) ServiceIntegrationClickhousePostgresqlUserConfigPtrOutput {
		return v.ClickhousePostgresqlUserConfig
	}).(ServiceIntegrationClickhousePostgresqlUserConfigPtrOutput)
}

// Datadog user configurable settings
func (o ServiceIntegrationOutput) DatadogUserConfig() ServiceIntegrationDatadogUserConfigPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) ServiceIntegrationDatadogUserConfigPtrOutput { return v.DatadogUserConfig }).(ServiceIntegrationDatadogUserConfigPtrOutput)
}

// Destination endpoint for the integration (if any)
func (o ServiceIntegrationOutput) DestinationEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) pulumi.StringPtrOutput { return v.DestinationEndpointId }).(pulumi.StringPtrOutput)
}

// Destination service for the integration (if any)
func (o ServiceIntegrationOutput) DestinationServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) pulumi.StringPtrOutput { return v.DestinationServiceName }).(pulumi.StringPtrOutput)
}

// ExternalAwsCloudwatchMetrics user configurable settings
func (o ServiceIntegrationOutput) ExternalAwsCloudwatchMetricsUserConfig() ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigPtrOutput {
		return v.ExternalAwsCloudwatchMetricsUserConfig
	}).(ServiceIntegrationExternalAwsCloudwatchMetricsUserConfigPtrOutput)
}

// Service Integration Id at aiven
func (o ServiceIntegrationOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceIntegration) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
func (o ServiceIntegrationOutput) IntegrationType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceIntegration) pulumi.StringOutput { return v.IntegrationType }).(pulumi.StringOutput)
}

// KafkaConnect user configurable settings
func (o ServiceIntegrationOutput) KafkaConnectUserConfig() ServiceIntegrationKafkaConnectUserConfigPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) ServiceIntegrationKafkaConnectUserConfigPtrOutput {
		return v.KafkaConnectUserConfig
	}).(ServiceIntegrationKafkaConnectUserConfigPtrOutput)
}

// KafkaLogs user configurable settings
func (o ServiceIntegrationOutput) KafkaLogsUserConfig() ServiceIntegrationKafkaLogsUserConfigPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) ServiceIntegrationKafkaLogsUserConfigPtrOutput {
		return v.KafkaLogsUserConfig
	}).(ServiceIntegrationKafkaLogsUserConfigPtrOutput)
}

// KafkaMirrormaker user configurable settings
func (o ServiceIntegrationOutput) KafkaMirrormakerUserConfig() ServiceIntegrationKafkaMirrormakerUserConfigPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) ServiceIntegrationKafkaMirrormakerUserConfigPtrOutput {
		return v.KafkaMirrormakerUserConfig
	}).(ServiceIntegrationKafkaMirrormakerUserConfigPtrOutput)
}

// Logs user configurable settings
func (o ServiceIntegrationOutput) LogsUserConfig() ServiceIntegrationLogsUserConfigPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) ServiceIntegrationLogsUserConfigPtrOutput { return v.LogsUserConfig }).(ServiceIntegrationLogsUserConfigPtrOutput)
}

// Metrics user configurable settings
func (o ServiceIntegrationOutput) MetricsUserConfig() ServiceIntegrationMetricsUserConfigPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) ServiceIntegrationMetricsUserConfigPtrOutput { return v.MetricsUserConfig }).(ServiceIntegrationMetricsUserConfigPtrOutput)
}

// Project the integration belongs to
func (o ServiceIntegrationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceIntegration) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Source endpoint for the integration (if any)
func (o ServiceIntegrationOutput) SourceEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) pulumi.StringPtrOutput { return v.SourceEndpointId }).(pulumi.StringPtrOutput)
}

// Source service for the integration (if any)
func (o ServiceIntegrationOutput) SourceServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIntegration) pulumi.StringPtrOutput { return v.SourceServiceName }).(pulumi.StringPtrOutput)
}

type ServiceIntegrationArrayOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceIntegration)(nil)).Elem()
}

func (o ServiceIntegrationArrayOutput) ToServiceIntegrationArrayOutput() ServiceIntegrationArrayOutput {
	return o
}

func (o ServiceIntegrationArrayOutput) ToServiceIntegrationArrayOutputWithContext(ctx context.Context) ServiceIntegrationArrayOutput {
	return o
}

func (o ServiceIntegrationArrayOutput) Index(i pulumi.IntInput) ServiceIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceIntegration {
		return vs[0].([]*ServiceIntegration)[vs[1].(int)]
	}).(ServiceIntegrationOutput)
}

type ServiceIntegrationMapOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceIntegration)(nil)).Elem()
}

func (o ServiceIntegrationMapOutput) ToServiceIntegrationMapOutput() ServiceIntegrationMapOutput {
	return o
}

func (o ServiceIntegrationMapOutput) ToServiceIntegrationMapOutputWithContext(ctx context.Context) ServiceIntegrationMapOutput {
	return o
}

func (o ServiceIntegrationMapOutput) MapIndex(k pulumi.StringInput) ServiceIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceIntegration {
		return vs[0].(map[string]*ServiceIntegration)[vs[1].(string)]
	}).(ServiceIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationInput)(nil)).Elem(), &ServiceIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationArrayInput)(nil)).Elem(), ServiceIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationMapInput)(nil)).Elem(), ServiceIntegrationMap{})
	pulumi.RegisterOutputType(ServiceIntegrationOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationArrayOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationMapOutput{})
}
