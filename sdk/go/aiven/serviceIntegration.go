// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v2/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.NewServiceIntegration(ctx, "myintegration", &aiven.ServiceIntegrationArgs{
// 			DestinationEndpointId:  pulumi.String(aiven_service_integration_endpoint.Myendpoint.Id),
// 			DestinationServiceName: pulumi.String(""),
// 			IntegrationType:        pulumi.String("datadog"),
// 			Project:                pulumi.String(aiven_project.Myproject.Project),
// 			SourceEndpointId:       pulumi.String(""),
// 			SourceServiceName:      pulumi.String(aiven_service.Testkafka.Service_name),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ServiceIntegration struct {
	pulumi.CustomResourceState

	// Destination endpoint for the integration (if any)
	DestinationEndpointId pulumi.StringPtrOutput `pulumi:"destinationEndpointId"`
	// Destination service for the integration (if any)
	DestinationServiceName pulumi.StringPtrOutput `pulumi:"destinationServiceName"`
	// Type of the service integration
	IntegrationType pulumi.StringOutput `pulumi:"integrationType"`
	// Kafka Connect specific user configurable settings
	KafkaConnectUserConfig ServiceIntegrationKafkaConnectUserConfigPtrOutput `pulumi:"kafkaConnectUserConfig"`
	// Mirrormaker 2 integration specific user configurable settings
	KafkaMirrormakerUserConfig ServiceIntegrationKafkaMirrormakerUserConfigPtrOutput `pulumi:"kafkaMirrormakerUserConfig"`
	// Log integration specific user configurable settings
	LogsUserConfig ServiceIntegrationLogsUserConfigPtrOutput `pulumi:"logsUserConfig"`
	// Mirrormaker 1 integration specific user configurable settings
	MirrormakerUserConfig ServiceIntegrationMirrormakerUserConfigPtrOutput `pulumi:"mirrormakerUserConfig"`
	// Project the integration belongs to
	Project pulumi.StringOutput `pulumi:"project"`
	// Source endpoint for the integration (if any)
	SourceEndpointId pulumi.StringPtrOutput `pulumi:"sourceEndpointId"`
	// Source service for the integration (if any)
	SourceServiceName pulumi.StringPtrOutput `pulumi:"sourceServiceName"`
}

// NewServiceIntegration registers a new resource with the given unique name, arguments, and options.
func NewServiceIntegration(ctx *pulumi.Context,
	name string, args *ServiceIntegrationArgs, opts ...pulumi.ResourceOption) (*ServiceIntegration, error) {
	if args == nil || args.IntegrationType == nil {
		return nil, errors.New("missing required argument 'IntegrationType'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil {
		args = &ServiceIntegrationArgs{}
	}
	var resource ServiceIntegration
	err := ctx.RegisterResource("aiven:index/serviceIntegration:ServiceIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceIntegration gets an existing ServiceIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceIntegrationState, opts ...pulumi.ResourceOption) (*ServiceIntegration, error) {
	var resource ServiceIntegration
	err := ctx.ReadResource("aiven:index/serviceIntegration:ServiceIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceIntegration resources.
type serviceIntegrationState struct {
	// Destination endpoint for the integration (if any)
	DestinationEndpointId *string `pulumi:"destinationEndpointId"`
	// Destination service for the integration (if any)
	DestinationServiceName *string `pulumi:"destinationServiceName"`
	// Type of the service integration
	IntegrationType *string `pulumi:"integrationType"`
	// Kafka Connect specific user configurable settings
	KafkaConnectUserConfig *ServiceIntegrationKafkaConnectUserConfig `pulumi:"kafkaConnectUserConfig"`
	// Mirrormaker 2 integration specific user configurable settings
	KafkaMirrormakerUserConfig *ServiceIntegrationKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfig"`
	// Log integration specific user configurable settings
	LogsUserConfig *ServiceIntegrationLogsUserConfig `pulumi:"logsUserConfig"`
	// Mirrormaker 1 integration specific user configurable settings
	MirrormakerUserConfig *ServiceIntegrationMirrormakerUserConfig `pulumi:"mirrormakerUserConfig"`
	// Project the integration belongs to
	Project *string `pulumi:"project"`
	// Source endpoint for the integration (if any)
	SourceEndpointId *string `pulumi:"sourceEndpointId"`
	// Source service for the integration (if any)
	SourceServiceName *string `pulumi:"sourceServiceName"`
}

type ServiceIntegrationState struct {
	// Destination endpoint for the integration (if any)
	DestinationEndpointId pulumi.StringPtrInput
	// Destination service for the integration (if any)
	DestinationServiceName pulumi.StringPtrInput
	// Type of the service integration
	IntegrationType pulumi.StringPtrInput
	// Kafka Connect specific user configurable settings
	KafkaConnectUserConfig ServiceIntegrationKafkaConnectUserConfigPtrInput
	// Mirrormaker 2 integration specific user configurable settings
	KafkaMirrormakerUserConfig ServiceIntegrationKafkaMirrormakerUserConfigPtrInput
	// Log integration specific user configurable settings
	LogsUserConfig ServiceIntegrationLogsUserConfigPtrInput
	// Mirrormaker 1 integration specific user configurable settings
	MirrormakerUserConfig ServiceIntegrationMirrormakerUserConfigPtrInput
	// Project the integration belongs to
	Project pulumi.StringPtrInput
	// Source endpoint for the integration (if any)
	SourceEndpointId pulumi.StringPtrInput
	// Source service for the integration (if any)
	SourceServiceName pulumi.StringPtrInput
}

func (ServiceIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceIntegrationState)(nil)).Elem()
}

type serviceIntegrationArgs struct {
	// Destination endpoint for the integration (if any)
	DestinationEndpointId *string `pulumi:"destinationEndpointId"`
	// Destination service for the integration (if any)
	DestinationServiceName *string `pulumi:"destinationServiceName"`
	// Type of the service integration
	IntegrationType string `pulumi:"integrationType"`
	// Kafka Connect specific user configurable settings
	KafkaConnectUserConfig *ServiceIntegrationKafkaConnectUserConfig `pulumi:"kafkaConnectUserConfig"`
	// Mirrormaker 2 integration specific user configurable settings
	KafkaMirrormakerUserConfig *ServiceIntegrationKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfig"`
	// Log integration specific user configurable settings
	LogsUserConfig *ServiceIntegrationLogsUserConfig `pulumi:"logsUserConfig"`
	// Mirrormaker 1 integration specific user configurable settings
	MirrormakerUserConfig *ServiceIntegrationMirrormakerUserConfig `pulumi:"mirrormakerUserConfig"`
	// Project the integration belongs to
	Project string `pulumi:"project"`
	// Source endpoint for the integration (if any)
	SourceEndpointId *string `pulumi:"sourceEndpointId"`
	// Source service for the integration (if any)
	SourceServiceName *string `pulumi:"sourceServiceName"`
}

// The set of arguments for constructing a ServiceIntegration resource.
type ServiceIntegrationArgs struct {
	// Destination endpoint for the integration (if any)
	DestinationEndpointId pulumi.StringPtrInput
	// Destination service for the integration (if any)
	DestinationServiceName pulumi.StringPtrInput
	// Type of the service integration
	IntegrationType pulumi.StringInput
	// Kafka Connect specific user configurable settings
	KafkaConnectUserConfig ServiceIntegrationKafkaConnectUserConfigPtrInput
	// Mirrormaker 2 integration specific user configurable settings
	KafkaMirrormakerUserConfig ServiceIntegrationKafkaMirrormakerUserConfigPtrInput
	// Log integration specific user configurable settings
	LogsUserConfig ServiceIntegrationLogsUserConfigPtrInput
	// Mirrormaker 1 integration specific user configurable settings
	MirrormakerUserConfig ServiceIntegrationMirrormakerUserConfigPtrInput
	// Project the integration belongs to
	Project pulumi.StringInput
	// Source endpoint for the integration (if any)
	SourceEndpointId pulumi.StringPtrInput
	// Source service for the integration (if any)
	SourceServiceName pulumi.StringPtrInput
}

func (ServiceIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceIntegrationArgs)(nil)).Elem()
}
