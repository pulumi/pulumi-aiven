// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about an Aiven project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.LookupProject(ctx, &aiven.LookupProjectArgs{
//				Project: "example-project",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProject(ctx *pulumi.Context, args *LookupProjectArgs, opts ...pulumi.InvokeOption) (*LookupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectResult
	err := ctx.Invoke("aiven:index/getProject:getProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProject.
type LookupProjectArgs struct {
	// The name of the project. Names must be globally unique among all Aiven customers and cannot be changed later without destroying and re-creating the project, including all sub-resources.
	Project string `pulumi:"project"`
}

// A collection of values returned by getProject.
type LookupProjectResult struct {
	// Link a project to an existing account using its account ID. This field is deprecated. Use `parentId` instead. To set up proper dependencies please refer to this variable as a reference.
	AccountId string `pulumi:"accountId"`
	// If parentId is set, grant account owner team admin access to the new project. The default value is `true`.
	AddAccountOwnersAdminAccess bool `pulumi:"addAccountOwnersAdminAccess"`
	// The number of trial or promotional credits remaining for this project.
	AvailableCredits string `pulumi:"availableCredits"`
	// The ID of the billing group this project is assigned to. To set up proper dependencies please refer to this variable as a reference.
	BillingGroup string `pulumi:"billingGroup"`
	// The CA certificate for the project. This is required for configuring clients that connect to certain services like Kafka.
	CaCert string `pulumi:"caCert"`
	// The name of the project to copy billing information, technical contacts, and some other project attributes from. This is most useful to set up the same billing method when you use bank transfers to pay invoices for other projects. You can only do this when creating a project. You can't set the billing over the API for an existing. To set up proper dependencies please refer to this variable as a reference.
	CopyFromProject string `pulumi:"copyFromProject"`
	// Default cloud provider and region where services are hosted. This can be changed after the project is created and will not affect existing services.
	DefaultCloud string `pulumi:"defaultCloud"`
	// The monthly running estimate for this project for the current billing period.
	EstimatedBalance string `pulumi:"estimatedBalance"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
	ParentId string `pulumi:"parentId"`
	// The payment type used for this project. For example,`card`.
	PaymentMethod string `pulumi:"paymentMethod"`
	// The name of the project. Names must be globally unique among all Aiven customers and cannot be changed later without destroying and re-creating the project, including all sub-resources.
	Project string `pulumi:"project"`
	// Tags are key-value pairs that allow you to categorize projects.
	Tags []GetProjectTag `pulumi:"tags"`
	// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
	TechnicalEmails []string `pulumi:"technicalEmails"`
	// Use the same billing group that is used in source project.
	UseSourceProjectBillingGroup bool `pulumi:"useSourceProjectBillingGroup"`
}

func LookupProjectOutput(ctx *pulumi.Context, args LookupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupProjectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectResultOutput, error) {
			args := v.(LookupProjectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aiven:index/getProject:getProject", args, LookupProjectResultOutput{}, options).(LookupProjectResultOutput), nil
		}).(LookupProjectResultOutput)
}

// A collection of arguments for invoking getProject.
type LookupProjectOutputArgs struct {
	// The name of the project. Names must be globally unique among all Aiven customers and cannot be changed later without destroying and re-creating the project, including all sub-resources.
	Project pulumi.StringInput `pulumi:"project"`
}

func (LookupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getProject.
type LookupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectResult)(nil)).Elem()
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutput() LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutputWithContext(ctx context.Context) LookupProjectResultOutput {
	return o
}

// Link a project to an existing account using its account ID. This field is deprecated. Use `parentId` instead. To set up proper dependencies please refer to this variable as a reference.
func (o LookupProjectResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// If parentId is set, grant account owner team admin access to the new project. The default value is `true`.
func (o LookupProjectResultOutput) AddAccountOwnersAdminAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.AddAccountOwnersAdminAccess }).(pulumi.BoolOutput)
}

// The number of trial or promotional credits remaining for this project.
func (o LookupProjectResultOutput) AvailableCredits() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.AvailableCredits }).(pulumi.StringOutput)
}

// The ID of the billing group this project is assigned to. To set up proper dependencies please refer to this variable as a reference.
func (o LookupProjectResultOutput) BillingGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.BillingGroup }).(pulumi.StringOutput)
}

// The CA certificate for the project. This is required for configuring clients that connect to certain services like Kafka.
func (o LookupProjectResultOutput) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.CaCert }).(pulumi.StringOutput)
}

// The name of the project to copy billing information, technical contacts, and some other project attributes from. This is most useful to set up the same billing method when you use bank transfers to pay invoices for other projects. You can only do this when creating a project. You can't set the billing over the API for an existing. To set up proper dependencies please refer to this variable as a reference.
func (o LookupProjectResultOutput) CopyFromProject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.CopyFromProject }).(pulumi.StringOutput)
}

// Default cloud provider and region where services are hosted. This can be changed after the project is created and will not affect existing services.
func (o LookupProjectResultOutput) DefaultCloud() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.DefaultCloud }).(pulumi.StringOutput)
}

// The monthly running estimate for this project for the current billing period.
func (o LookupProjectResultOutput) EstimatedBalance() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.EstimatedBalance }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// Link a project to an [organization or organizational unit](https://aiven.io/docs/platform/concepts/orgs-units-projects) by using its ID. To set up proper dependencies please refer to this variable as a reference.
func (o LookupProjectResultOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.ParentId }).(pulumi.StringOutput)
}

// The payment type used for this project. For example,`card`.
func (o LookupProjectResultOutput) PaymentMethod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.PaymentMethod }).(pulumi.StringOutput)
}

// The name of the project. Names must be globally unique among all Aiven customers and cannot be changed later without destroying and re-creating the project, including all sub-resources.
func (o LookupProjectResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Project }).(pulumi.StringOutput)
}

// Tags are key-value pairs that allow you to categorize projects.
func (o LookupProjectResultOutput) Tags() GetProjectTagArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []GetProjectTag { return v.Tags }).(GetProjectTagArrayOutput)
}

// The email addresses for [project contacts](https://aiven.io/docs/platform/howto/technical-emails), who will receive important alerts and updates about this project and its services. You can also set email contacts at the service level. It's good practice to keep these up-to-date to be aware of any potential issues with your project.
func (o LookupProjectResultOutput) TechnicalEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []string { return v.TechnicalEmails }).(pulumi.StringArrayOutput)
}

// Use the same billing group that is used in source project.
func (o LookupProjectResultOutput) UseSourceProjectBillingGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.UseSourceProjectBillingGroup }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectResultOutput{})
}
