// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Kafka User data source provides information about the existing Aiven Kafka User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v5/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupKafkaUser(ctx, &GetKafkaUserArgs{
// 			Project:     "my-project",
// 			ServiceName: "my-service",
// 			Username:    "user1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupKafkaUser(ctx *pulumi.Context, args *LookupKafkaUserArgs, opts ...pulumi.InvokeOption) (*LookupKafkaUserResult, error) {
	var rv LookupKafkaUserResult
	err := ctx.Invoke("aiven:index/getKafkaUser:getKafkaUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKafkaUser.
type LookupKafkaUserArgs struct {
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	Username    string `pulumi:"username"`
}

// A collection of values returned by getKafkaUser.
type LookupKafkaUserResult struct {
	AccessCert string `pulumi:"accessCert"`
	AccessKey  string `pulumi:"accessKey"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	Password    string `pulumi:"password"`
	Project     string `pulumi:"project"`
	ServiceName string `pulumi:"serviceName"`
	Type        string `pulumi:"type"`
	Username    string `pulumi:"username"`
}

func LookupKafkaUserOutput(ctx *pulumi.Context, args LookupKafkaUserOutputArgs, opts ...pulumi.InvokeOption) LookupKafkaUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKafkaUserResult, error) {
			args := v.(LookupKafkaUserArgs)
			r, err := LookupKafkaUser(ctx, &args, opts...)
			var s LookupKafkaUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKafkaUserResultOutput)
}

// A collection of arguments for invoking getKafkaUser.
type LookupKafkaUserOutputArgs struct {
	Project     pulumi.StringInput `pulumi:"project"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	Username    pulumi.StringInput `pulumi:"username"`
}

func (LookupKafkaUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaUserArgs)(nil)).Elem()
}

// A collection of values returned by getKafkaUser.
type LookupKafkaUserResultOutput struct{ *pulumi.OutputState }

func (LookupKafkaUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaUserResult)(nil)).Elem()
}

func (o LookupKafkaUserResultOutput) ToLookupKafkaUserResultOutput() LookupKafkaUserResultOutput {
	return o
}

func (o LookupKafkaUserResultOutput) ToLookupKafkaUserResultOutputWithContext(ctx context.Context) LookupKafkaUserResultOutput {
	return o
}

func (o LookupKafkaUserResultOutput) AccessCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaUserResult) string { return v.AccessCert }).(pulumi.StringOutput)
}

func (o LookupKafkaUserResultOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaUserResult) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKafkaUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupKafkaUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaUserResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupKafkaUserResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaUserResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupKafkaUserResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaUserResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o LookupKafkaUserResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaUserResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupKafkaUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKafkaUserResultOutput{})
}
