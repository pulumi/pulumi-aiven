// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Service Integration data source provides information about the existing Aiven Service Integration.
//
// Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
//
// ## Example Usage
//
// {{tffile "examples/data-sources/aiven_service_integration/data-source.tf"}}
func LookupServiceIntegration(ctx *pulumi.Context, args *LookupServiceIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupServiceIntegrationResult, error) {
	var rv LookupServiceIntegrationResult
	err := ctx.Invoke("aiven:index/getServiceIntegration:getServiceIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceIntegration.
type LookupServiceIntegrationArgs struct {
	DestinationServiceName string `pulumi:"destinationServiceName"`
	IntegrationType        string `pulumi:"integrationType"`
	Project                string `pulumi:"project"`
	SourceServiceName      string `pulumi:"sourceServiceName"`
}

// A collection of values returned by getServiceIntegration.
type LookupServiceIntegrationResult struct {
	DestinationEndpointId  string `pulumi:"destinationEndpointId"`
	DestinationServiceName string `pulumi:"destinationServiceName"`
	// The provider-assigned unique ID for this managed resource.
	Id                          string                                            `pulumi:"id"`
	IntegrationId               string                                            `pulumi:"integrationId"`
	IntegrationType             string                                            `pulumi:"integrationType"`
	KafkaConnectUserConfigs     []GetServiceIntegrationKafkaConnectUserConfig     `pulumi:"kafkaConnectUserConfigs"`
	KafkaLogsUserConfigs        []GetServiceIntegrationKafkaLogsUserConfig        `pulumi:"kafkaLogsUserConfigs"`
	KafkaMirrormakerUserConfigs []GetServiceIntegrationKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfigs"`
	LogsUserConfigs             []GetServiceIntegrationLogsUserConfig             `pulumi:"logsUserConfigs"`
	MetricsUserConfigs          []GetServiceIntegrationMetricsUserConfig          `pulumi:"metricsUserConfigs"`
	MirrormakerUserConfigs      []GetServiceIntegrationMirrormakerUserConfig      `pulumi:"mirrormakerUserConfigs"`
	Project                     string                                            `pulumi:"project"`
	SourceEndpointId            string                                            `pulumi:"sourceEndpointId"`
	SourceServiceName           string                                            `pulumi:"sourceServiceName"`
}

func LookupServiceIntegrationOutput(ctx *pulumi.Context, args LookupServiceIntegrationOutputArgs, opts ...pulumi.InvokeOption) LookupServiceIntegrationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceIntegrationResult, error) {
			args := v.(LookupServiceIntegrationArgs)
			r, err := LookupServiceIntegration(ctx, &args, opts...)
			var s LookupServiceIntegrationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServiceIntegrationResultOutput)
}

// A collection of arguments for invoking getServiceIntegration.
type LookupServiceIntegrationOutputArgs struct {
	DestinationServiceName pulumi.StringInput `pulumi:"destinationServiceName"`
	IntegrationType        pulumi.StringInput `pulumi:"integrationType"`
	Project                pulumi.StringInput `pulumi:"project"`
	SourceServiceName      pulumi.StringInput `pulumi:"sourceServiceName"`
}

func (LookupServiceIntegrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceIntegrationArgs)(nil)).Elem()
}

// A collection of values returned by getServiceIntegration.
type LookupServiceIntegrationResultOutput struct{ *pulumi.OutputState }

func (LookupServiceIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceIntegrationResult)(nil)).Elem()
}

func (o LookupServiceIntegrationResultOutput) ToLookupServiceIntegrationResultOutput() LookupServiceIntegrationResultOutput {
	return o
}

func (o LookupServiceIntegrationResultOutput) ToLookupServiceIntegrationResultOutputWithContext(ctx context.Context) LookupServiceIntegrationResultOutput {
	return o
}

func (o LookupServiceIntegrationResultOutput) DestinationEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.DestinationEndpointId }).(pulumi.StringOutput)
}

func (o LookupServiceIntegrationResultOutput) DestinationServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.DestinationServiceName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServiceIntegrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupServiceIntegrationResultOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.IntegrationId }).(pulumi.StringOutput)
}

func (o LookupServiceIntegrationResultOutput) IntegrationType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.IntegrationType }).(pulumi.StringOutput)
}

func (o LookupServiceIntegrationResultOutput) KafkaConnectUserConfigs() GetServiceIntegrationKafkaConnectUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationKafkaConnectUserConfig {
		return v.KafkaConnectUserConfigs
	}).(GetServiceIntegrationKafkaConnectUserConfigArrayOutput)
}

func (o LookupServiceIntegrationResultOutput) KafkaLogsUserConfigs() GetServiceIntegrationKafkaLogsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationKafkaLogsUserConfig {
		return v.KafkaLogsUserConfigs
	}).(GetServiceIntegrationKafkaLogsUserConfigArrayOutput)
}

func (o LookupServiceIntegrationResultOutput) KafkaMirrormakerUserConfigs() GetServiceIntegrationKafkaMirrormakerUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationKafkaMirrormakerUserConfig {
		return v.KafkaMirrormakerUserConfigs
	}).(GetServiceIntegrationKafkaMirrormakerUserConfigArrayOutput)
}

func (o LookupServiceIntegrationResultOutput) LogsUserConfigs() GetServiceIntegrationLogsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationLogsUserConfig { return v.LogsUserConfigs }).(GetServiceIntegrationLogsUserConfigArrayOutput)
}

func (o LookupServiceIntegrationResultOutput) MetricsUserConfigs() GetServiceIntegrationMetricsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationMetricsUserConfig {
		return v.MetricsUserConfigs
	}).(GetServiceIntegrationMetricsUserConfigArrayOutput)
}

func (o LookupServiceIntegrationResultOutput) MirrormakerUserConfigs() GetServiceIntegrationMirrormakerUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationMirrormakerUserConfig {
		return v.MirrormakerUserConfigs
	}).(GetServiceIntegrationMirrormakerUserConfigArrayOutput)
}

func (o LookupServiceIntegrationResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupServiceIntegrationResultOutput) SourceEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.SourceEndpointId }).(pulumi.StringOutput)
}

func (o LookupServiceIntegrationResultOutput) SourceServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.SourceServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceIntegrationResultOutput{})
}
