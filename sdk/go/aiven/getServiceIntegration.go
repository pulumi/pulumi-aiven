// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Service Integration Data Source
//
// The Service Integration data source provides information about the existing Aiven Service Integration.
//
// Service Integration defines an integration between two Aiven services or between Aiven service and an external
// integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service,
// getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to
// Elasticsearch, etc.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aiven/sdk/v3/go/aiven"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aiven.LookupServiceIntegration(ctx, &aiven.LookupServiceIntegrationArgs{
// 			DestinationServiceName: "<DESTINATION_SERVICE_NAME>",
// 			IntegrationType:        "datadog",
// 			Project:                aiven_project.Myproject.Project,
// 			SourceServiceName:      "<SOURCE_SERVICE_NAME>",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupServiceIntegration(ctx *pulumi.Context, args *LookupServiceIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupServiceIntegrationResult, error) {
	var rv LookupServiceIntegrationResult
	err := ctx.Invoke("aiven:index/getServiceIntegration:getServiceIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceIntegration.
type LookupServiceIntegrationArgs struct {
	DashboardUserConfig   *GetServiceIntegrationDashboardUserConfig `pulumi:"dashboardUserConfig"`
	DatadogUserConfig     *GetServiceIntegrationDatadogUserConfig   `pulumi:"datadogUserConfig"`
	DestinationEndpointId *string                                   `pulumi:"destinationEndpointId"`
	// identifies the target side of the integration.
	DestinationServiceName               string                                                     `pulumi:"destinationServiceName"`
	ExternalAwsCloudwatchLogsUserConfig  *GetServiceIntegrationExternalAwsCloudwatchLogsUserConfig  `pulumi:"externalAwsCloudwatchLogsUserConfig"`
	ExternalElasticsearchLogsUserConfig  *GetServiceIntegrationExternalElasticsearchLogsUserConfig  `pulumi:"externalElasticsearchLogsUserConfig"`
	ExternalGoogleCloudLoggingUserConfig *GetServiceIntegrationExternalGoogleCloudLoggingUserConfig `pulumi:"externalGoogleCloudLoggingUserConfig"`
	// identifies the type of integration that is set up. Possible values include `dashboard`
	// , `datadog`, `logs`, `metrics` and `mirrormaker`.
	IntegrationType            string                                           `pulumi:"integrationType"`
	KafkaConnectUserConfig     *GetServiceIntegrationKafkaConnectUserConfig     `pulumi:"kafkaConnectUserConfig"`
	KafkaLogsUserConfig        *GetServiceIntegrationKafkaLogsUserConfig        `pulumi:"kafkaLogsUserConfig"`
	KafkaMirrormakerUserConfig *GetServiceIntegrationKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfig"`
	LogsUserConfig             *GetServiceIntegrationLogsUserConfig             `pulumi:"logsUserConfig"`
	M3aggregatorUserConfig     *GetServiceIntegrationM3aggregatorUserConfig     `pulumi:"m3aggregatorUserConfig"`
	M3coordinatorUserConfig    *GetServiceIntegrationM3coordinatorUserConfig    `pulumi:"m3coordinatorUserConfig"`
	MetricsUserConfig          *GetServiceIntegrationMetricsUserConfig          `pulumi:"metricsUserConfig"`
	MirrormakerUserConfig      *GetServiceIntegrationMirrormakerUserConfig      `pulumi:"mirrormakerUserConfig"`
	// defines the project the integration belongs to.
	Project               string                                      `pulumi:"project"`
	PrometheusUserConfig  *GetServiceIntegrationPrometheusUserConfig  `pulumi:"prometheusUserConfig"`
	ReadReplicaUserConfig *GetServiceIntegrationReadReplicaUserConfig `pulumi:"readReplicaUserConfig"`
	RsyslogUserConfig     *GetServiceIntegrationRsyslogUserConfig     `pulumi:"rsyslogUserConfig"`
	SignalfxUserConfig    *GetServiceIntegrationSignalfxUserConfig    `pulumi:"signalfxUserConfig"`
	SourceEndpointId      *string                                     `pulumi:"sourceEndpointId"`
	// identifies the source side of the integration.
	SourceServiceName string `pulumi:"sourceServiceName"`
}

// A collection of values returned by getServiceIntegration.
type LookupServiceIntegrationResult struct {
	DashboardUserConfig                  *GetServiceIntegrationDashboardUserConfig                  `pulumi:"dashboardUserConfig"`
	DatadogUserConfig                    *GetServiceIntegrationDatadogUserConfig                    `pulumi:"datadogUserConfig"`
	DestinationEndpointId                *string                                                    `pulumi:"destinationEndpointId"`
	DestinationServiceName               string                                                     `pulumi:"destinationServiceName"`
	ExternalAwsCloudwatchLogsUserConfig  *GetServiceIntegrationExternalAwsCloudwatchLogsUserConfig  `pulumi:"externalAwsCloudwatchLogsUserConfig"`
	ExternalElasticsearchLogsUserConfig  *GetServiceIntegrationExternalElasticsearchLogsUserConfig  `pulumi:"externalElasticsearchLogsUserConfig"`
	ExternalGoogleCloudLoggingUserConfig *GetServiceIntegrationExternalGoogleCloudLoggingUserConfig `pulumi:"externalGoogleCloudLoggingUserConfig"`
	// The provider-assigned unique ID for this managed resource.
	Id                         string                                           `pulumi:"id"`
	IntegrationType            string                                           `pulumi:"integrationType"`
	KafkaConnectUserConfig     *GetServiceIntegrationKafkaConnectUserConfig     `pulumi:"kafkaConnectUserConfig"`
	KafkaLogsUserConfig        *GetServiceIntegrationKafkaLogsUserConfig        `pulumi:"kafkaLogsUserConfig"`
	KafkaMirrormakerUserConfig *GetServiceIntegrationKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfig"`
	LogsUserConfig             *GetServiceIntegrationLogsUserConfig             `pulumi:"logsUserConfig"`
	M3aggregatorUserConfig     *GetServiceIntegrationM3aggregatorUserConfig     `pulumi:"m3aggregatorUserConfig"`
	M3coordinatorUserConfig    *GetServiceIntegrationM3coordinatorUserConfig    `pulumi:"m3coordinatorUserConfig"`
	MetricsUserConfig          *GetServiceIntegrationMetricsUserConfig          `pulumi:"metricsUserConfig"`
	MirrormakerUserConfig      *GetServiceIntegrationMirrormakerUserConfig      `pulumi:"mirrormakerUserConfig"`
	Project                    string                                           `pulumi:"project"`
	PrometheusUserConfig       *GetServiceIntegrationPrometheusUserConfig       `pulumi:"prometheusUserConfig"`
	ReadReplicaUserConfig      *GetServiceIntegrationReadReplicaUserConfig      `pulumi:"readReplicaUserConfig"`
	RsyslogUserConfig          *GetServiceIntegrationRsyslogUserConfig          `pulumi:"rsyslogUserConfig"`
	SignalfxUserConfig         *GetServiceIntegrationSignalfxUserConfig         `pulumi:"signalfxUserConfig"`
	SourceEndpointId           *string                                          `pulumi:"sourceEndpointId"`
	SourceServiceName          string                                           `pulumi:"sourceServiceName"`
}
