// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Service Integration data source provides information about the existing Aiven Service Integration.
//
// Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
func LookupServiceIntegration(ctx *pulumi.Context, args *LookupServiceIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupServiceIntegrationResult, error) {
	var rv LookupServiceIntegrationResult
	err := ctx.Invoke("aiven:index/getServiceIntegration:getServiceIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceIntegration.
type LookupServiceIntegrationArgs struct {
	// Destination service for the integration (if any)
	DestinationServiceName string `pulumi:"destinationServiceName"`
	// Type of the service integration
	IntegrationType string `pulumi:"integrationType"`
	// Project the integration belongs to
	Project string `pulumi:"project"`
	// Source service for the integration (if any)
	SourceServiceName string `pulumi:"sourceServiceName"`
}

// A collection of values returned by getServiceIntegration.
type LookupServiceIntegrationResult struct {
	// Dashboard specific user configurable settings
	DatadogUserConfigs []GetServiceIntegrationDatadogUserConfig `pulumi:"datadogUserConfigs"`
	// Destination endpoint for the integration (if any)
	DestinationEndpointId string `pulumi:"destinationEndpointId"`
	// Destination service for the integration (if any)
	DestinationServiceName string `pulumi:"destinationServiceName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Service Integration Id at aiven
	IntegrationId string `pulumi:"integrationId"`
	// Type of the service integration
	IntegrationType string `pulumi:"integrationType"`
	// Kafka Connect specific user configurable settings
	KafkaConnectUserConfigs []GetServiceIntegrationKafkaConnectUserConfig `pulumi:"kafkaConnectUserConfigs"`
	// Kafka Logs specific user configurable settings
	KafkaLogsUserConfigs []GetServiceIntegrationKafkaLogsUserConfig `pulumi:"kafkaLogsUserConfigs"`
	// Mirrormaker 2 integration specific user configurable settings
	KafkaMirrormakerUserConfigs []GetServiceIntegrationKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfigs"`
	// Log integration specific user configurable settings
	LogsUserConfigs []GetServiceIntegrationLogsUserConfig `pulumi:"logsUserConfigs"`
	// Metrics specific user configurable settings
	MetricsUserConfigs []GetServiceIntegrationMetricsUserConfig `pulumi:"metricsUserConfigs"`
	// Mirrormaker 1 integration specific user configurable settings
	MirrormakerUserConfigs []GetServiceIntegrationMirrormakerUserConfig `pulumi:"mirrormakerUserConfigs"`
	// Project the integration belongs to
	Project string `pulumi:"project"`
	// Prometheus coordinator specific user configurable settings
	PrometheusUserConfigs []GetServiceIntegrationPrometheusUserConfig `pulumi:"prometheusUserConfigs"`
	// Source endpoint for the integration (if any)
	SourceEndpointId string `pulumi:"sourceEndpointId"`
	// Source service for the integration (if any)
	SourceServiceName string `pulumi:"sourceServiceName"`
}

func LookupServiceIntegrationOutput(ctx *pulumi.Context, args LookupServiceIntegrationOutputArgs, opts ...pulumi.InvokeOption) LookupServiceIntegrationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceIntegrationResult, error) {
			args := v.(LookupServiceIntegrationArgs)
			r, err := LookupServiceIntegration(ctx, &args, opts...)
			return *r, err
		}).(LookupServiceIntegrationResultOutput)
}

// A collection of arguments for invoking getServiceIntegration.
type LookupServiceIntegrationOutputArgs struct {
	// Destination service for the integration (if any)
	DestinationServiceName pulumi.StringInput `pulumi:"destinationServiceName"`
	// Type of the service integration
	IntegrationType pulumi.StringInput `pulumi:"integrationType"`
	// Project the integration belongs to
	Project pulumi.StringInput `pulumi:"project"`
	// Source service for the integration (if any)
	SourceServiceName pulumi.StringInput `pulumi:"sourceServiceName"`
}

func (LookupServiceIntegrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceIntegrationArgs)(nil)).Elem()
}

// A collection of values returned by getServiceIntegration.
type LookupServiceIntegrationResultOutput struct{ *pulumi.OutputState }

func (LookupServiceIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceIntegrationResult)(nil)).Elem()
}

func (o LookupServiceIntegrationResultOutput) ToLookupServiceIntegrationResultOutput() LookupServiceIntegrationResultOutput {
	return o
}

func (o LookupServiceIntegrationResultOutput) ToLookupServiceIntegrationResultOutputWithContext(ctx context.Context) LookupServiceIntegrationResultOutput {
	return o
}

// Dashboard specific user configurable settings
func (o LookupServiceIntegrationResultOutput) DatadogUserConfigs() GetServiceIntegrationDatadogUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationDatadogUserConfig {
		return v.DatadogUserConfigs
	}).(GetServiceIntegrationDatadogUserConfigArrayOutput)
}

// Destination endpoint for the integration (if any)
func (o LookupServiceIntegrationResultOutput) DestinationEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.DestinationEndpointId }).(pulumi.StringOutput)
}

// Destination service for the integration (if any)
func (o LookupServiceIntegrationResultOutput) DestinationServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.DestinationServiceName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServiceIntegrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Service Integration Id at aiven
func (o LookupServiceIntegrationResultOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.IntegrationId }).(pulumi.StringOutput)
}

// Type of the service integration
func (o LookupServiceIntegrationResultOutput) IntegrationType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.IntegrationType }).(pulumi.StringOutput)
}

// Kafka Connect specific user configurable settings
func (o LookupServiceIntegrationResultOutput) KafkaConnectUserConfigs() GetServiceIntegrationKafkaConnectUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationKafkaConnectUserConfig {
		return v.KafkaConnectUserConfigs
	}).(GetServiceIntegrationKafkaConnectUserConfigArrayOutput)
}

// Kafka Logs specific user configurable settings
func (o LookupServiceIntegrationResultOutput) KafkaLogsUserConfigs() GetServiceIntegrationKafkaLogsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationKafkaLogsUserConfig {
		return v.KafkaLogsUserConfigs
	}).(GetServiceIntegrationKafkaLogsUserConfigArrayOutput)
}

// Mirrormaker 2 integration specific user configurable settings
func (o LookupServiceIntegrationResultOutput) KafkaMirrormakerUserConfigs() GetServiceIntegrationKafkaMirrormakerUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationKafkaMirrormakerUserConfig {
		return v.KafkaMirrormakerUserConfigs
	}).(GetServiceIntegrationKafkaMirrormakerUserConfigArrayOutput)
}

// Log integration specific user configurable settings
func (o LookupServiceIntegrationResultOutput) LogsUserConfigs() GetServiceIntegrationLogsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationLogsUserConfig { return v.LogsUserConfigs }).(GetServiceIntegrationLogsUserConfigArrayOutput)
}

// Metrics specific user configurable settings
func (o LookupServiceIntegrationResultOutput) MetricsUserConfigs() GetServiceIntegrationMetricsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationMetricsUserConfig {
		return v.MetricsUserConfigs
	}).(GetServiceIntegrationMetricsUserConfigArrayOutput)
}

// Mirrormaker 1 integration specific user configurable settings
func (o LookupServiceIntegrationResultOutput) MirrormakerUserConfigs() GetServiceIntegrationMirrormakerUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationMirrormakerUserConfig {
		return v.MirrormakerUserConfigs
	}).(GetServiceIntegrationMirrormakerUserConfigArrayOutput)
}

// Project the integration belongs to
func (o LookupServiceIntegrationResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.Project }).(pulumi.StringOutput)
}

// Prometheus coordinator specific user configurable settings
func (o LookupServiceIntegrationResultOutput) PrometheusUserConfigs() GetServiceIntegrationPrometheusUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationPrometheusUserConfig {
		return v.PrometheusUserConfigs
	}).(GetServiceIntegrationPrometheusUserConfigArrayOutput)
}

// Source endpoint for the integration (if any)
func (o LookupServiceIntegrationResultOutput) SourceEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.SourceEndpointId }).(pulumi.StringOutput)
}

// Source service for the integration (if any)
func (o LookupServiceIntegrationResultOutput) SourceServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.SourceServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceIntegrationResultOutput{})
}
