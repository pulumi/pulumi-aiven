// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Service Integration data source provides information about the existing Aiven Service Integration.
//
// Service Integration defines an integration between two Aiven services or between Aiven service and an external
// integration endpoint. Integration could be for example sending metrics from Kafka service to an M3DB service,
// getting metrics from an M3Db service to a Grafana service to show dashboards, sending logs from any service to
// OpenSearch, etc.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aiven.LookupServiceIntegration(ctx, &aiven.LookupServiceIntegrationArgs{
//				Project:                aiven_project.Myproject.Project,
//				DestinationServiceName: "<DESTINATION_SERVICE_NAME>",
//				IntegrationType:        "datadog",
//				SourceServiceName:      "<SOURCE_SERVICE_NAME>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupServiceIntegration(ctx *pulumi.Context, args *LookupServiceIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupServiceIntegrationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceIntegrationResult
	err := ctx.Invoke("aiven:index/getServiceIntegration:getServiceIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceIntegration.
type LookupServiceIntegrationArgs struct {
	// Destination service for the integration (if any)
	DestinationServiceName string `pulumi:"destinationServiceName"`
	// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
	IntegrationType string `pulumi:"integrationType"`
	// Project the integration belongs to
	Project string `pulumi:"project"`
	// Source service for the integration (if any)
	SourceServiceName string `pulumi:"sourceServiceName"`
}

// A collection of values returned by getServiceIntegration.
type LookupServiceIntegrationResult struct {
	// ClickhouseKafka user configurable settings
	ClickhouseKafkaUserConfigs []GetServiceIntegrationClickhouseKafkaUserConfig `pulumi:"clickhouseKafkaUserConfigs"`
	// ClickhousePostgresql user configurable settings
	ClickhousePostgresqlUserConfigs []GetServiceIntegrationClickhousePostgresqlUserConfig `pulumi:"clickhousePostgresqlUserConfigs"`
	// Datadog user configurable settings
	DatadogUserConfigs []GetServiceIntegrationDatadogUserConfig `pulumi:"datadogUserConfigs"`
	// Destination endpoint for the integration (if any)
	DestinationEndpointId string `pulumi:"destinationEndpointId"`
	// Destination service for the integration (if any)
	DestinationServiceName string `pulumi:"destinationServiceName"`
	// ExternalAwsCloudwatchMetrics user configurable settings
	ExternalAwsCloudwatchMetricsUserConfigs []GetServiceIntegrationExternalAwsCloudwatchMetricsUserConfig `pulumi:"externalAwsCloudwatchMetricsUserConfigs"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Service Integration Id at aiven
	IntegrationId string `pulumi:"integrationId"`
	// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
	IntegrationType string `pulumi:"integrationType"`
	// KafkaConnect user configurable settings
	KafkaConnectUserConfigs []GetServiceIntegrationKafkaConnectUserConfig `pulumi:"kafkaConnectUserConfigs"`
	// KafkaLogs user configurable settings
	KafkaLogsUserConfigs []GetServiceIntegrationKafkaLogsUserConfig `pulumi:"kafkaLogsUserConfigs"`
	// KafkaMirrormaker user configurable settings
	KafkaMirrormakerUserConfigs []GetServiceIntegrationKafkaMirrormakerUserConfig `pulumi:"kafkaMirrormakerUserConfigs"`
	// Logs user configurable settings
	LogsUserConfigs []GetServiceIntegrationLogsUserConfig `pulumi:"logsUserConfigs"`
	// Metrics user configurable settings
	MetricsUserConfigs []GetServiceIntegrationMetricsUserConfig `pulumi:"metricsUserConfigs"`
	// Project the integration belongs to
	Project string `pulumi:"project"`
	// Source endpoint for the integration (if any)
	SourceEndpointId string `pulumi:"sourceEndpointId"`
	// Source service for the integration (if any)
	SourceServiceName string `pulumi:"sourceServiceName"`
}

func LookupServiceIntegrationOutput(ctx *pulumi.Context, args LookupServiceIntegrationOutputArgs, opts ...pulumi.InvokeOption) LookupServiceIntegrationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceIntegrationResult, error) {
			args := v.(LookupServiceIntegrationArgs)
			r, err := LookupServiceIntegration(ctx, &args, opts...)
			var s LookupServiceIntegrationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServiceIntegrationResultOutput)
}

// A collection of arguments for invoking getServiceIntegration.
type LookupServiceIntegrationOutputArgs struct {
	// Destination service for the integration (if any)
	DestinationServiceName pulumi.StringInput `pulumi:"destinationServiceName"`
	// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
	IntegrationType pulumi.StringInput `pulumi:"integrationType"`
	// Project the integration belongs to
	Project pulumi.StringInput `pulumi:"project"`
	// Source service for the integration (if any)
	SourceServiceName pulumi.StringInput `pulumi:"sourceServiceName"`
}

func (LookupServiceIntegrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceIntegrationArgs)(nil)).Elem()
}

// A collection of values returned by getServiceIntegration.
type LookupServiceIntegrationResultOutput struct{ *pulumi.OutputState }

func (LookupServiceIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceIntegrationResult)(nil)).Elem()
}

func (o LookupServiceIntegrationResultOutput) ToLookupServiceIntegrationResultOutput() LookupServiceIntegrationResultOutput {
	return o
}

func (o LookupServiceIntegrationResultOutput) ToLookupServiceIntegrationResultOutputWithContext(ctx context.Context) LookupServiceIntegrationResultOutput {
	return o
}

// ClickhouseKafka user configurable settings
func (o LookupServiceIntegrationResultOutput) ClickhouseKafkaUserConfigs() GetServiceIntegrationClickhouseKafkaUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationClickhouseKafkaUserConfig {
		return v.ClickhouseKafkaUserConfigs
	}).(GetServiceIntegrationClickhouseKafkaUserConfigArrayOutput)
}

// ClickhousePostgresql user configurable settings
func (o LookupServiceIntegrationResultOutput) ClickhousePostgresqlUserConfigs() GetServiceIntegrationClickhousePostgresqlUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationClickhousePostgresqlUserConfig {
		return v.ClickhousePostgresqlUserConfigs
	}).(GetServiceIntegrationClickhousePostgresqlUserConfigArrayOutput)
}

// Datadog user configurable settings
func (o LookupServiceIntegrationResultOutput) DatadogUserConfigs() GetServiceIntegrationDatadogUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationDatadogUserConfig {
		return v.DatadogUserConfigs
	}).(GetServiceIntegrationDatadogUserConfigArrayOutput)
}

// Destination endpoint for the integration (if any)
func (o LookupServiceIntegrationResultOutput) DestinationEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.DestinationEndpointId }).(pulumi.StringOutput)
}

// Destination service for the integration (if any)
func (o LookupServiceIntegrationResultOutput) DestinationServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.DestinationServiceName }).(pulumi.StringOutput)
}

// ExternalAwsCloudwatchMetrics user configurable settings
func (o LookupServiceIntegrationResultOutput) ExternalAwsCloudwatchMetricsUserConfigs() GetServiceIntegrationExternalAwsCloudwatchMetricsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationExternalAwsCloudwatchMetricsUserConfig {
		return v.ExternalAwsCloudwatchMetricsUserConfigs
	}).(GetServiceIntegrationExternalAwsCloudwatchMetricsUserConfigArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServiceIntegrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Service Integration Id at aiven
func (o LookupServiceIntegrationResultOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.IntegrationId }).(pulumi.StringOutput)
}

// Type of the service integration. Possible values: `alertmanager`, `cassandraCrossServiceCluster`, `clickhouseKafka`, `clickhousePostgresql`, `dashboard`, `datadog`, `datasource`, `externalAwsCloudwatchLogs`, `externalAwsCloudwatchMetrics`, `externalElasticsearchLogs`, `externalGoogleCloudLogging`, `externalOpensearchLogs`, `flink`, `internalConnectivity`, `jolokia`, `kafkaConnect`, `kafkaLogs`, `kafkaMirrormaker`, `logs`, `m3aggregator`, `m3coordinator`, `metrics`, `opensearchCrossClusterReplication`, `opensearchCrossClusterSearch`, `prometheus`, `readReplica`, `rsyslog`, `schemaRegistryProxy`
func (o LookupServiceIntegrationResultOutput) IntegrationType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.IntegrationType }).(pulumi.StringOutput)
}

// KafkaConnect user configurable settings
func (o LookupServiceIntegrationResultOutput) KafkaConnectUserConfigs() GetServiceIntegrationKafkaConnectUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationKafkaConnectUserConfig {
		return v.KafkaConnectUserConfigs
	}).(GetServiceIntegrationKafkaConnectUserConfigArrayOutput)
}

// KafkaLogs user configurable settings
func (o LookupServiceIntegrationResultOutput) KafkaLogsUserConfigs() GetServiceIntegrationKafkaLogsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationKafkaLogsUserConfig {
		return v.KafkaLogsUserConfigs
	}).(GetServiceIntegrationKafkaLogsUserConfigArrayOutput)
}

// KafkaMirrormaker user configurable settings
func (o LookupServiceIntegrationResultOutput) KafkaMirrormakerUserConfigs() GetServiceIntegrationKafkaMirrormakerUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationKafkaMirrormakerUserConfig {
		return v.KafkaMirrormakerUserConfigs
	}).(GetServiceIntegrationKafkaMirrormakerUserConfigArrayOutput)
}

// Logs user configurable settings
func (o LookupServiceIntegrationResultOutput) LogsUserConfigs() GetServiceIntegrationLogsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationLogsUserConfig { return v.LogsUserConfigs }).(GetServiceIntegrationLogsUserConfigArrayOutput)
}

// Metrics user configurable settings
func (o LookupServiceIntegrationResultOutput) MetricsUserConfigs() GetServiceIntegrationMetricsUserConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) []GetServiceIntegrationMetricsUserConfig {
		return v.MetricsUserConfigs
	}).(GetServiceIntegrationMetricsUserConfigArrayOutput)
}

// Project the integration belongs to
func (o LookupServiceIntegrationResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.Project }).(pulumi.StringOutput)
}

// Source endpoint for the integration (if any)
func (o LookupServiceIntegrationResultOutput) SourceEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.SourceEndpointId }).(pulumi.StringOutput)
}

// Source service for the integration (if any)
func (o LookupServiceIntegrationResultOutput) SourceServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceIntegrationResult) string { return v.SourceServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceIntegrationResultOutput{})
}
