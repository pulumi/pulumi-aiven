// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiven

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The OpenSearch Security Plugin Config resource allows the creation and management of AivenOpenSearch Security Plugin config.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aiven/sdk/v6/go/aiven"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := aiven.LookupProject(ctx, &aiven.LookupProjectArgs{
//				Project: "example_project",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			bar, err := aiven.NewOpenSearch(ctx, "bar", &aiven.OpenSearchArgs{
//				Project:               pulumi.String(foo.Project),
//				CloudName:             pulumi.String("google-europe-west1"),
//				Plan:                  pulumi.String("startup-4"),
//				ServiceName:           pulumi.String("example_service_name"),
//				MaintenanceWindowDow:  pulumi.String("monday"),
//				MaintenanceWindowTime: pulumi.String("10:00:00"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aiven.NewOpensearchUser(ctx, "foo", &aiven.OpensearchUserArgs{
//				ServiceName: bar.ServiceName,
//				Project:     pulumi.String(foo.Project),
//				Username:    pulumi.String("user-example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aiven.NewOpensearchSecurityPluginConfig(ctx, "foo", &aiven.OpensearchSecurityPluginConfigArgs{
//				Project:       pulumi.String(foo.Project),
//				ServiceName:   bar.ServiceName,
//				AdminPassword: pulumi.String("ThisIsATest123^=^"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// ```sh
// $ pulumi import aiven:index/opensearchSecurityPluginConfig:OpensearchSecurityPluginConfig foo project/service_name
// ```
type OpensearchSecurityPluginConfig struct {
	pulumi.CustomResourceState

	// Whether the os-sec-admin user is enabled. This indicates whether the user management with the security plugin is enabled. This is always true when the os-sec-admin password was set at least once.
	AdminEnabled pulumi.BoolOutput `pulumi:"adminEnabled"`
	// The password for the os-sec-admin user.
	AdminPassword pulumi.StringOutput `pulumi:"adminPassword"`
	// Whether the security plugin is available. This is always true for recently created services.
	Available pulumi.BoolOutput `pulumi:"available"`
	// Whether the security plugin is enabled. This is always true for recently created services.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewOpensearchSecurityPluginConfig registers a new resource with the given unique name, arguments, and options.
func NewOpensearchSecurityPluginConfig(ctx *pulumi.Context,
	name string, args *OpensearchSecurityPluginConfigArgs, opts ...pulumi.ResourceOption) (*OpensearchSecurityPluginConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'AdminPassword'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.AdminPassword != nil {
		args.AdminPassword = pulumi.ToSecret(args.AdminPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"adminPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpensearchSecurityPluginConfig
	err := ctx.RegisterResource("aiven:index/opensearchSecurityPluginConfig:OpensearchSecurityPluginConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpensearchSecurityPluginConfig gets an existing OpensearchSecurityPluginConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpensearchSecurityPluginConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpensearchSecurityPluginConfigState, opts ...pulumi.ResourceOption) (*OpensearchSecurityPluginConfig, error) {
	var resource OpensearchSecurityPluginConfig
	err := ctx.ReadResource("aiven:index/opensearchSecurityPluginConfig:OpensearchSecurityPluginConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpensearchSecurityPluginConfig resources.
type opensearchSecurityPluginConfigState struct {
	// Whether the os-sec-admin user is enabled. This indicates whether the user management with the security plugin is enabled. This is always true when the os-sec-admin password was set at least once.
	AdminEnabled *bool `pulumi:"adminEnabled"`
	// The password for the os-sec-admin user.
	AdminPassword *string `pulumi:"adminPassword"`
	// Whether the security plugin is available. This is always true for recently created services.
	Available *bool `pulumi:"available"`
	// Whether the security plugin is enabled. This is always true for recently created services.
	Enabled *bool `pulumi:"enabled"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project *string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName *string `pulumi:"serviceName"`
}

type OpensearchSecurityPluginConfigState struct {
	// Whether the os-sec-admin user is enabled. This indicates whether the user management with the security plugin is enabled. This is always true when the os-sec-admin password was set at least once.
	AdminEnabled pulumi.BoolPtrInput
	// The password for the os-sec-admin user.
	AdminPassword pulumi.StringPtrInput
	// Whether the security plugin is available. This is always true for recently created services.
	Available pulumi.BoolPtrInput
	// Whether the security plugin is enabled. This is always true for recently created services.
	Enabled pulumi.BoolPtrInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringPtrInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringPtrInput
}

func (OpensearchSecurityPluginConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*opensearchSecurityPluginConfigState)(nil)).Elem()
}

type opensearchSecurityPluginConfigArgs struct {
	// The password for the os-sec-admin user.
	AdminPassword string `pulumi:"adminPassword"`
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project string `pulumi:"project"`
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a OpensearchSecurityPluginConfig resource.
type OpensearchSecurityPluginConfigArgs struct {
	// The password for the os-sec-admin user.
	AdminPassword pulumi.StringInput
	// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	Project pulumi.StringInput
	// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
	ServiceName pulumi.StringInput
}

func (OpensearchSecurityPluginConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*opensearchSecurityPluginConfigArgs)(nil)).Elem()
}

type OpensearchSecurityPluginConfigInput interface {
	pulumi.Input

	ToOpensearchSecurityPluginConfigOutput() OpensearchSecurityPluginConfigOutput
	ToOpensearchSecurityPluginConfigOutputWithContext(ctx context.Context) OpensearchSecurityPluginConfigOutput
}

func (*OpensearchSecurityPluginConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchSecurityPluginConfig)(nil)).Elem()
}

func (i *OpensearchSecurityPluginConfig) ToOpensearchSecurityPluginConfigOutput() OpensearchSecurityPluginConfigOutput {
	return i.ToOpensearchSecurityPluginConfigOutputWithContext(context.Background())
}

func (i *OpensearchSecurityPluginConfig) ToOpensearchSecurityPluginConfigOutputWithContext(ctx context.Context) OpensearchSecurityPluginConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchSecurityPluginConfigOutput)
}

// OpensearchSecurityPluginConfigArrayInput is an input type that accepts OpensearchSecurityPluginConfigArray and OpensearchSecurityPluginConfigArrayOutput values.
// You can construct a concrete instance of `OpensearchSecurityPluginConfigArrayInput` via:
//
//	OpensearchSecurityPluginConfigArray{ OpensearchSecurityPluginConfigArgs{...} }
type OpensearchSecurityPluginConfigArrayInput interface {
	pulumi.Input

	ToOpensearchSecurityPluginConfigArrayOutput() OpensearchSecurityPluginConfigArrayOutput
	ToOpensearchSecurityPluginConfigArrayOutputWithContext(context.Context) OpensearchSecurityPluginConfigArrayOutput
}

type OpensearchSecurityPluginConfigArray []OpensearchSecurityPluginConfigInput

func (OpensearchSecurityPluginConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpensearchSecurityPluginConfig)(nil)).Elem()
}

func (i OpensearchSecurityPluginConfigArray) ToOpensearchSecurityPluginConfigArrayOutput() OpensearchSecurityPluginConfigArrayOutput {
	return i.ToOpensearchSecurityPluginConfigArrayOutputWithContext(context.Background())
}

func (i OpensearchSecurityPluginConfigArray) ToOpensearchSecurityPluginConfigArrayOutputWithContext(ctx context.Context) OpensearchSecurityPluginConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchSecurityPluginConfigArrayOutput)
}

// OpensearchSecurityPluginConfigMapInput is an input type that accepts OpensearchSecurityPluginConfigMap and OpensearchSecurityPluginConfigMapOutput values.
// You can construct a concrete instance of `OpensearchSecurityPluginConfigMapInput` via:
//
//	OpensearchSecurityPluginConfigMap{ "key": OpensearchSecurityPluginConfigArgs{...} }
type OpensearchSecurityPluginConfigMapInput interface {
	pulumi.Input

	ToOpensearchSecurityPluginConfigMapOutput() OpensearchSecurityPluginConfigMapOutput
	ToOpensearchSecurityPluginConfigMapOutputWithContext(context.Context) OpensearchSecurityPluginConfigMapOutput
}

type OpensearchSecurityPluginConfigMap map[string]OpensearchSecurityPluginConfigInput

func (OpensearchSecurityPluginConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpensearchSecurityPluginConfig)(nil)).Elem()
}

func (i OpensearchSecurityPluginConfigMap) ToOpensearchSecurityPluginConfigMapOutput() OpensearchSecurityPluginConfigMapOutput {
	return i.ToOpensearchSecurityPluginConfigMapOutputWithContext(context.Background())
}

func (i OpensearchSecurityPluginConfigMap) ToOpensearchSecurityPluginConfigMapOutputWithContext(ctx context.Context) OpensearchSecurityPluginConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchSecurityPluginConfigMapOutput)
}

type OpensearchSecurityPluginConfigOutput struct{ *pulumi.OutputState }

func (OpensearchSecurityPluginConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchSecurityPluginConfig)(nil)).Elem()
}

func (o OpensearchSecurityPluginConfigOutput) ToOpensearchSecurityPluginConfigOutput() OpensearchSecurityPluginConfigOutput {
	return o
}

func (o OpensearchSecurityPluginConfigOutput) ToOpensearchSecurityPluginConfigOutputWithContext(ctx context.Context) OpensearchSecurityPluginConfigOutput {
	return o
}

// Whether the os-sec-admin user is enabled. This indicates whether the user management with the security plugin is enabled. This is always true when the os-sec-admin password was set at least once.
func (o OpensearchSecurityPluginConfigOutput) AdminEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpensearchSecurityPluginConfig) pulumi.BoolOutput { return v.AdminEnabled }).(pulumi.BoolOutput)
}

// The password for the os-sec-admin user.
func (o OpensearchSecurityPluginConfigOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchSecurityPluginConfig) pulumi.StringOutput { return v.AdminPassword }).(pulumi.StringOutput)
}

// Whether the security plugin is available. This is always true for recently created services.
func (o OpensearchSecurityPluginConfigOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpensearchSecurityPluginConfig) pulumi.BoolOutput { return v.Available }).(pulumi.BoolOutput)
}

// Whether the security plugin is enabled. This is always true for recently created services.
func (o OpensearchSecurityPluginConfigOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpensearchSecurityPluginConfig) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o OpensearchSecurityPluginConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchSecurityPluginConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. Changing this property forces recreation of the resource.
func (o OpensearchSecurityPluginConfigOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchSecurityPluginConfig) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type OpensearchSecurityPluginConfigArrayOutput struct{ *pulumi.OutputState }

func (OpensearchSecurityPluginConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpensearchSecurityPluginConfig)(nil)).Elem()
}

func (o OpensearchSecurityPluginConfigArrayOutput) ToOpensearchSecurityPluginConfigArrayOutput() OpensearchSecurityPluginConfigArrayOutput {
	return o
}

func (o OpensearchSecurityPluginConfigArrayOutput) ToOpensearchSecurityPluginConfigArrayOutputWithContext(ctx context.Context) OpensearchSecurityPluginConfigArrayOutput {
	return o
}

func (o OpensearchSecurityPluginConfigArrayOutput) Index(i pulumi.IntInput) OpensearchSecurityPluginConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpensearchSecurityPluginConfig {
		return vs[0].([]*OpensearchSecurityPluginConfig)[vs[1].(int)]
	}).(OpensearchSecurityPluginConfigOutput)
}

type OpensearchSecurityPluginConfigMapOutput struct{ *pulumi.OutputState }

func (OpensearchSecurityPluginConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpensearchSecurityPluginConfig)(nil)).Elem()
}

func (o OpensearchSecurityPluginConfigMapOutput) ToOpensearchSecurityPluginConfigMapOutput() OpensearchSecurityPluginConfigMapOutput {
	return o
}

func (o OpensearchSecurityPluginConfigMapOutput) ToOpensearchSecurityPluginConfigMapOutputWithContext(ctx context.Context) OpensearchSecurityPluginConfigMapOutput {
	return o
}

func (o OpensearchSecurityPluginConfigMapOutput) MapIndex(k pulumi.StringInput) OpensearchSecurityPluginConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpensearchSecurityPluginConfig {
		return vs[0].(map[string]*OpensearchSecurityPluginConfig)[vs[1].(string)]
	}).(OpensearchSecurityPluginConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchSecurityPluginConfigInput)(nil)).Elem(), &OpensearchSecurityPluginConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchSecurityPluginConfigArrayInput)(nil)).Elem(), OpensearchSecurityPluginConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchSecurityPluginConfigMapInput)(nil)).Elem(), OpensearchSecurityPluginConfigMap{})
	pulumi.RegisterOutputType(OpensearchSecurityPluginConfigOutput{})
	pulumi.RegisterOutputType(OpensearchSecurityPluginConfigArrayOutput{})
	pulumi.RegisterOutputType(OpensearchSecurityPluginConfigMapOutput{})
}
